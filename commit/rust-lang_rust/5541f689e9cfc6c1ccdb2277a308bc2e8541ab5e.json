{"sha": "5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NDFmNjg5ZTljZmM2YzFjY2RiMjI3N2EzMDhiYzJlODU0MWFiNWU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-06-09T13:37:59Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-06-09T14:01:02Z"}, "message": "Handle assembler warnings properly", "tree": {"sha": "5a8f9bd2527f03f20cc1b4e53d32cb53540db1cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8f9bd2527f03f20cc1b4e53d32cb53540db1cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "html_url": "https://github.com/rust-lang/rust/commit/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccac43b86b559e01fa71179af1a838ab94559c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccac43b86b559e01fa71179af1a838ab94559c75", "html_url": "https://github.com/rust-lang/rust/commit/ccac43b86b559e01fa71179af1a838ab94559c75"}], "stats": {"total": 139, "additions": 124, "deletions": 15}, "files": [{"sha": "26f5334668b8fd0d5cb5a5fc57d012ca179696e1", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -16,7 +16,7 @@ use rustc_codegen_ssa::back::write::{BitcodeSection, CodegenContext, EmitObj, Mo\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_errors::{FatalError, Handler};\n+use rustc_errors::{FatalError, Handler, Level};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n@@ -242,6 +242,7 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n fn report_inline_asm(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     msg: String,\n+    level: llvm::DiagnosticLevel,\n     mut cookie: c_uint,\n     source: Option<(String, Vec<InnerSpan>)>,\n ) {\n@@ -251,7 +252,12 @@ fn report_inline_asm(\n     if matches!(cgcx.lto, Lto::Fat | Lto::Thin) {\n         cookie = 0;\n     }\n-    cgcx.diag_emitter.inline_asm_error(cookie as u32, msg, source);\n+    let level = match level {\n+        llvm::DiagnosticLevel::Error => Level::Error,\n+        llvm::DiagnosticLevel::Warning => Level::Warning,\n+        llvm::DiagnosticLevel::Note | llvm::DiagnosticLevel::Remark => Level::Note,\n+    };\n+    cgcx.diag_emitter.inline_asm_error(cookie as u32, msg, level, source);\n }\n \n unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void, cookie: c_uint) {\n@@ -264,6 +270,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void\n     // diagnostics.\n     let mut have_source = false;\n     let mut buffer = String::new();\n+    let mut level = llvm::DiagnosticLevel::Error;\n     let mut loc = 0;\n     let mut ranges = [0; 8];\n     let mut num_ranges = ranges.len() / 2;\n@@ -273,6 +280,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void\n                 diag,\n                 msg,\n                 buffer,\n+                &mut level,\n                 &mut loc,\n                 ranges.as_mut_ptr(),\n                 &mut num_ranges,\n@@ -290,7 +298,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void\n         (buffer, spans)\n     });\n \n-    report_inline_asm(cgcx, msg, cookie, source);\n+    report_inline_asm(cgcx, msg, level, cookie, source);\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void) {\n@@ -301,7 +309,13 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::InlineAsm(inline) => {\n-            report_inline_asm(cgcx, llvm::twine_to_string(inline.message), inline.cookie, None);\n+            report_inline_asm(\n+                cgcx,\n+                llvm::twine_to_string(inline.message),\n+                inline.level,\n+                inline.cookie,\n+                None,\n+            );\n         }\n \n         llvm::diagnostic::Optimization(opt) => {"}, {"sha": "47f5c94e70c532fae1269884cc0c69529f0abe26", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -88,6 +88,7 @@ impl OptimizationDiagnostic<'ll> {\n \n #[derive(Copy, Clone)]\n pub struct InlineAsmDiagnostic<'ll> {\n+    pub level: super::DiagnosticLevel,\n     pub cookie: c_uint,\n     pub message: &'ll Twine,\n     pub instruction: Option<&'ll Value>,\n@@ -98,10 +99,17 @@ impl InlineAsmDiagnostic<'ll> {\n         let mut cookie = 0;\n         let mut message = None;\n         let mut instruction = None;\n+        let mut level = super::DiagnosticLevel::Error;\n \n-        super::LLVMRustUnpackInlineAsmDiagnostic(di, &mut cookie, &mut message, &mut instruction);\n+        super::LLVMRustUnpackInlineAsmDiagnostic(\n+            di,\n+            &mut level,\n+            &mut cookie,\n+            &mut message,\n+            &mut instruction,\n+        );\n \n-        InlineAsmDiagnostic { cookie, message: message.unwrap(), instruction }\n+        InlineAsmDiagnostic { level, cookie, message: message.unwrap(), instruction }\n     }\n }\n "}, {"sha": "3c981af73ab0d3ceba104797c9a59a8364d33945", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -489,6 +489,17 @@ pub enum DiagnosticKind {\n     Linker,\n }\n \n+/// LLVMRustDiagnosticLevel\n+#[derive(Copy, Clone)]\n+#[repr(C)]\n+#[allow(dead_code)] // Variants constructed by C++.\n+pub enum DiagnosticLevel {\n+    Error,\n+    Warning,\n+    Note,\n+    Remark,\n+}\n+\n /// LLVMRustArchiveKind\n #[derive(Copy, Clone)]\n #[repr(C)]\n@@ -2054,6 +2065,7 @@ extern \"C\" {\n \n     pub fn LLVMRustUnpackInlineAsmDiagnostic(\n         DI: &'a DiagnosticInfo,\n+        level_out: &mut DiagnosticLevel,\n         cookie_out: &mut c_uint,\n         message_out: &mut Option<&'a Twine>,\n         instruction_out: &mut Option<&'a Value>,\n@@ -2074,6 +2086,7 @@ extern \"C\" {\n         d: &SMDiagnostic,\n         message_out: &RustString,\n         buffer_out: &RustString,\n+        level_out: &mut DiagnosticLevel,\n         loc_out: &mut c_uint,\n         ranges_out: *mut c_uint,\n         num_ranges: &mut usize,"}, {"sha": "c118e5ebdb72d780d70aea6a90d4cf2feabc509a", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -1551,7 +1551,7 @@ fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>\n \n enum SharedEmitterMessage {\n     Diagnostic(Diagnostic),\n-    InlineAsmError(u32, String, Option<(String, Vec<InnerSpan>)>),\n+    InlineAsmError(u32, String, Level, Option<(String, Vec<InnerSpan>)>),\n     AbortIfErrors,\n     Fatal(String),\n }\n@@ -1576,9 +1576,10 @@ impl SharedEmitter {\n         &self,\n         cookie: u32,\n         msg: String,\n+        level: Level,\n         source: Option<(String, Vec<InnerSpan>)>,\n     ) {\n-        drop(self.sender.send(SharedEmitterMessage::InlineAsmError(cookie, msg, source)));\n+        drop(self.sender.send(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)));\n     }\n \n     pub fn fatal(&self, msg: &str) {\n@@ -1631,16 +1632,21 @@ impl SharedEmitterMain {\n                     }\n                     handler.emit_diagnostic(&d);\n                 }\n-                Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, source)) => {\n+                Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {\n                     let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg);\n \n+                    let mut err = match level {\n+                        Level::Error => sess.struct_err(&msg),\n+                        Level::Warning => sess.struct_warn(&msg),\n+                        Level::Note => sess.struct_note_without_error(&msg),\n+                        _ => bug!(\"Invalid inline asm diagnostic level\"),\n+                    };\n+\n                     // If the cookie is 0 then we don't have span information.\n-                    let mut err = if cookie == 0 {\n-                        sess.struct_err(&msg)\n-                    } else {\n+                    if cookie != 0 {\n                         let pos = BytePos::from_u32(cookie);\n                         let span = Span::with_root_ctxt(pos, pos);\n-                        sess.struct_span_err(span, &msg)\n+                        err.set_span(span);\n                     };\n \n                     // Point to the generated assembly if it is available."}, {"sha": "7261c638ce013985ebda6b92aa7dcf640ec4a56b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -581,6 +581,11 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n+    /// Construct a builder at the `Note` level with the `msg`.\n+    pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+        DiagnosticBuilder::new(self, Level::Note, msg)\n+    }\n+\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: &str) -> FatalError {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError"}, {"sha": "06d7d4f14d8f4407527a59f0a5a5ffd6867655e9", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -441,6 +441,9 @@ impl Session {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n+    pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+        self.diagnostic().struct_note_without_error(msg)\n+    }\n \n     pub fn diagnostic(&self) -> &rustc_errors::Handler {\n         &self.parse_sess.span_diagnostic"}, {"sha": "4704622922af04fc200e70e7265f3173f59be91a", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -1094,8 +1094,17 @@ extern \"C\" void LLVMRustUnpackOptimizationDiagnostic(\n   MessageOS << Opt->getMsg();\n }\n \n+enum class LLVMRustDiagnosticLevel {\n+    Error,\n+    Warning,\n+    Note,\n+    Remark,\n+};\n+\n extern \"C\" void\n-LLVMRustUnpackInlineAsmDiagnostic(LLVMDiagnosticInfoRef DI, unsigned *CookieOut,\n+LLVMRustUnpackInlineAsmDiagnostic(LLVMDiagnosticInfoRef DI,\n+                                  LLVMRustDiagnosticLevel *LevelOut,\n+                                  unsigned *CookieOut,\n                                   LLVMTwineRef *MessageOut,\n                                   LLVMValueRef *InstructionOut) {\n   // Undefined to call this not on an inline assembly diagnostic!\n@@ -1105,6 +1114,23 @@ LLVMRustUnpackInlineAsmDiagnostic(LLVMDiagnosticInfoRef DI, unsigned *CookieOut,\n   *CookieOut = IA->getLocCookie();\n   *MessageOut = wrap(&IA->getMsgStr());\n   *InstructionOut = wrap(IA->getInstruction());\n+\n+  switch (IA->getSeverity()) {\n+    case DS_Error:\n+      *LevelOut = LLVMRustDiagnosticLevel::Error;\n+      break;\n+    case DS_Warning:\n+      *LevelOut = LLVMRustDiagnosticLevel::Warning;\n+      break;\n+    case DS_Note:\n+      *LevelOut = LLVMRustDiagnosticLevel::Note;\n+      break;\n+    case DS_Remark:\n+      *LevelOut = LLVMRustDiagnosticLevel::Remark;\n+      break;\n+    default:\n+      report_fatal_error(\"Invalid LLVMRustDiagnosticLevel value!\");\n+  }\n }\n \n extern \"C\" void LLVMRustWriteDiagnosticInfoToString(LLVMDiagnosticInfoRef DI,\n@@ -1166,6 +1192,7 @@ extern \"C\" LLVMRustDiagnosticKind\n LLVMRustGetDiagInfoKind(LLVMDiagnosticInfoRef DI) {\n   return toRust((DiagnosticKind)unwrap(DI)->getKind());\n }\n+\n // This is kept distinct from LLVMGetTypeKind, because when\n // a new type kind is added, the Rust-side enum must be\n // updated or UB will result.\n@@ -1219,13 +1246,31 @@ extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler(\n extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n                                            RustStringRef MessageOut,\n                                            RustStringRef BufferOut,\n+                                           LLVMRustDiagnosticLevel* LevelOut,\n                                            unsigned* LocOut,\n                                            unsigned* RangesOut,\n                                            size_t* NumRanges) {\n   SMDiagnostic& D = *unwrap(DRef);\n   RawRustStringOstream MessageOS(MessageOut);\n   MessageOS << D.getMessage();\n \n+  switch (D.getKind()) {\n+    case SourceMgr::DK_Error:\n+      *LevelOut = LLVMRustDiagnosticLevel::Error;\n+      break;\n+    case SourceMgr::DK_Warning:\n+      *LevelOut = LLVMRustDiagnosticLevel::Warning;\n+      break;\n+    case SourceMgr::DK_Note:\n+      *LevelOut = LLVMRustDiagnosticLevel::Note;\n+      break;\n+    case SourceMgr::DK_Remark:\n+      *LevelOut = LLVMRustDiagnosticLevel::Remark;\n+      break;\n+    default:\n+      report_fatal_error(\"Invalid LLVMRustDiagnosticLevel value!\");\n+  }\n+\n   if (D.getLoc() == SMLoc())\n     return false;\n "}, {"sha": "402adc50d5b44a7935647735b2b6789f4aec34a9", "filename": "src/test/ui/asm/srcloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -37,5 +37,8 @@ fn main() {\n \n         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n         //~^ ERROR: invalid instruction mnemonic 'invalid_instruction'\n+\n+        asm!(\"movaps %xmm3, (%esi, 2)\", options(att_syntax));\n+        //~^ WARN: scale factor without index register is ignored\n     }\n }"}, {"sha": "d5d12b004816f56cb1b90650bbaacac4c5e788c9", "filename": "src/test/ui/asm/srcloc.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Ftest%2Fui%2Fasm%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e/src%2Ftest%2Fui%2Fasm%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsrcloc.stderr?ref=5541f689e9cfc6c1ccdb2277a308bc2e8541ab5e", "patch": "@@ -70,5 +70,17 @@ note: instantiated into assembly here\n LL |     invalid_instruction\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+warning: scale factor without index register is ignored\n+  --> $DIR/srcloc.rs:41:15\n+   |\n+LL |         asm!(\"movaps %xmm3, (%esi, 2)\", options(att_syntax));\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:23\n+   |\n+LL |     movaps %xmm3, (%esi, 2)\n+   |                          ^\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n "}]}