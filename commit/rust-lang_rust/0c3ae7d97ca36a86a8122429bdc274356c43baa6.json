{"sha": "0c3ae7d97ca36a86a8122429bdc274356c43baa6", "node_id": "C_kwDOAAsO6NoAKDBjM2FlN2Q5N2NhMzZhODZhODEyMjQyOWJkYzI3NDM1NmM0M2JhYTY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-16T05:03:52Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-25T21:58:29Z"}, "message": "Try to say that memory outside the AM is always exposed\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "8447d93d275d662bed6897b6af2ed7f5e27a2aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8447d93d275d662bed6897b6af2ed7f5e27a2aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c3ae7d97ca36a86a8122429bdc274356c43baa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3ae7d97ca36a86a8122429bdc274356c43baa6", "html_url": "https://github.com/rust-lang/rust/commit/0c3ae7d97ca36a86a8122429bdc274356c43baa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c3ae7d97ca36a86a8122429bdc274356c43baa6/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758f19645b8ebce61ea52d1f6672fd057bc8dbee", "url": "https://api.github.com/repos/rust-lang/rust/commits/758f19645b8ebce61ea52d1f6672fd057bc8dbee", "html_url": "https://github.com/rust-lang/rust/commit/758f19645b8ebce61ea52d1f6672fd057bc8dbee"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "2c19c27681f37d67e5fd60e120222bc10b440d7f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ae7d97ca36a86a8122429bdc274356c43baa6/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ae7d97ca36a86a8122429bdc274356c43baa6/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=0c3ae7d97ca36a86a8122429bdc274356c43baa6", "patch": "@@ -581,12 +581,20 @@ pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n /// Convert an address back to a pointer, picking up a previously 'exposed' provenance.\n ///\n /// This is equivalent to `addr as *const T`. The provenance of the returned pointer is that of *any*\n-/// pointer that was previously passed to [`expose_addr`][pointer::expose_addr] or a `ptr as usize`\n-/// cast. If there is no previously 'exposed' provenance that justifies the way this pointer will be\n-/// used, the program has undefined behavior. Note that there is no algorithm that decides which\n-/// provenance will be used. You can think of this as \"guessing\" the right provenance, and the guess\n-/// will be \"maximally in your favor\", in the sense that if there is any way to avoid undefined\n-/// behavior, then that is the guess that will be taken.\n+/// pointer that was previously exposed by passing it to [`expose_addr`][pointer::expose_addr],\n+/// or a `ptr as usize` cast. In addition, memory which is outside the control of the Rust abstract\n+/// machine (MMIO registers, for example) is always considered to be exposed, so long as this memory\n+/// is disjoint from memory that will be used by the abstract machine such as the stack, heap,\n+/// and statics.\n+///\n+/// If there is no 'exposed' provenance that justifies the way this pointer will be used,\n+/// the program has undefined behavior. In particular, the aliasing rules still apply: pointers\n+/// and references that have been invalidated due to aliasing accesses cannot be used any more,\n+/// even if they have been exposed!\n+/// Note that there is no algorithm that decides which provenance will be used. You can think of this\n+/// as \"guessing\" the right provenance, and the guess will be \"maximally in your favor\", in the sense\n+/// that if there is any way to avoid undefined behavior (while upholding all aliasing requirements),\n+/// then that is the guess that will be taken.\n ///\n /// On platforms with multiple address spaces, it is your responsibility to ensure that the\n /// address makes sense in the address space that this pointer will be used with."}]}