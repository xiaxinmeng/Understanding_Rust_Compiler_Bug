{"sha": "f00cd911bffff26a2e55d09c7305a76aa2b820f9", "node_id": "C_kwDOAAsO6NoAKGYwMGNkOTExYmZmZmYyNmEyZTU1ZDA5YzczMDVhNzZhYTJiODIwZjk", "commit": {"author": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-11-09T10:13:42Z"}, "committer": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-11-09T10:14:02Z"}, "message": "lookup impls in local del maps", "tree": {"sha": "c86d84a07cff63b10613cac2b801ca82391c8e5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c86d84a07cff63b10613cac2b801ca82391c8e5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f00cd911bffff26a2e55d09c7305a76aa2b820f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f00cd911bffff26a2e55d09c7305a76aa2b820f9", "html_url": "https://github.com/rust-lang/rust/commit/f00cd911bffff26a2e55d09c7305a76aa2b820f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f00cd911bffff26a2e55d09c7305a76aa2b820f9/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c786bd7fdd232cd9de31d5c680018d725eea0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c786bd7fdd232cd9de31d5c680018d725eea0fd", "html_url": "https://github.com/rust-lang/rust/commit/3c786bd7fdd232cd9de31d5c680018d725eea0fd"}], "stats": {"total": 124, "additions": 99, "deletions": 25}, "files": [{"sha": "3a787aa47f6ddcf145c382dc63c636e2a3698a79", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f00cd911bffff26a2e55d09c7305a76aa2b820f9/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00cd911bffff26a2e55d09c7305a76aa2b820f9/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=f00cd911bffff26a2e55d09c7305a76aa2b820f9", "patch": "@@ -77,6 +77,9 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(InherentImpls::inherent_impls_in_crate_query)]\n     fn inherent_impls_in_crate(&self, krate: CrateId) -> Arc<InherentImpls>;\n \n+    #[salsa::invoke(InherentImpls::inherent_impls_in_block_query)]\n+    fn inherent_impls_in_block(&self, block: BlockId) -> Option<Arc<InherentImpls>>;\n+\n     #[salsa::invoke(TraitImpls::trait_impls_in_crate_query)]\n     fn trait_impls_in_crate(&self, krate: CrateId) -> Arc<TraitImpls>;\n "}, {"sha": "cdc3e039517237088abefff8d547c9c3d674d32a", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 75, "deletions": 25, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f00cd911bffff26a2e55d09c7305a76aa2b820f9/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00cd911bffff26a2e55d09c7305a76aa2b820f9/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=f00cd911bffff26a2e55d09c7305a76aa2b820f9", "patch": "@@ -261,33 +261,45 @@ impl InherentImpls {\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n-        collect_def_map(db, &crate_def_map, &mut impls);\n+        impls.collect_def_map(db, &crate_def_map);\n \n         return Arc::new(impls);\n+    }\n+\n+    pub(crate) fn inherent_impls_in_block_query(\n+        db: &dyn HirDatabase,\n+        block: BlockId,\n+    ) -> Option<Arc<Self>> {\n+        let mut impls = Self { map: FxHashMap::default() };\n+        if let Some(block_def_map) = db.block_def_map(block) {\n+            impls.collect_def_map(db, &block_def_map);\n+            return Some(Arc::new(impls));\n+        }\n+        return None;\n+    }\n+\n+    fn collect_def_map(&mut self, db: &dyn HirDatabase, def_map: &DefMap) {\n+        for (_module_id, module_data) in def_map.modules() {\n+            for impl_id in module_data.scope.impls() {\n+                let data = db.impl_data(impl_id);\n+                if data.target_trait.is_some() {\n+                    continue;\n+                }\n \n-        fn collect_def_map(db: &dyn HirDatabase, def_map: &DefMap, impls: &mut InherentImpls) {\n-            for (_module_id, module_data) in def_map.modules() {\n-                for impl_id in module_data.scope.impls() {\n-                    let data = db.impl_data(impl_id);\n-                    if data.target_trait.is_some() {\n-                        continue;\n-                    }\n-\n-                    let self_ty = db.impl_self_ty(impl_id);\n-                    let fp = TyFingerprint::for_inherent_impl(self_ty.skip_binders());\n-                    if let Some(fp) = fp {\n-                        impls.map.entry(fp).or_default().push(impl_id);\n-                    }\n-                    // `fp` should only be `None` in error cases (either erroneous code or incomplete name resolution)\n+                let self_ty = db.impl_self_ty(impl_id);\n+                let fp = TyFingerprint::for_inherent_impl(self_ty.skip_binders());\n+                if let Some(fp) = fp {\n+                    self.map.entry(fp).or_default().push(impl_id);\n                 }\n+                // `fp` should only be `None` in error cases (either erroneous code or incomplete name resolution)\n+            }\n \n-                // To better support custom derives, collect impls in all unnamed const items.\n-                // const _: () = { ... };\n-                for konst in module_data.scope.unnamed_consts() {\n-                    let body = db.body(konst.into());\n-                    for (_, block_def_map) in body.blocks(db.upcast()) {\n-                        collect_def_map(db, &block_def_map, impls);\n-                    }\n+            // To better support custom derives, collect impls in all unnamed const items.\n+            // const _: () = { ... };\n+            for konst in module_data.scope.unnamed_consts() {\n+                let body = db.body(konst.into());\n+                for (_, block_def_map) in body.blocks(db.upcast()) {\n+                    self.collect_def_map(db, &block_def_map);\n                 }\n             }\n         }\n@@ -744,11 +756,49 @@ fn iterate_inherent_methods(\n         None => return ControlFlow::Continue(()),\n     };\n \n+    if let Some(module_id) = visible_from_module {\n+        if let Some(block_id) = module_id.containing_block() {\n+            if let Some(impls) = db.inherent_impls_in_block(block_id) {\n+                impls_for_self_ty(\n+                    &impls,\n+                    self_ty,\n+                    db,\n+                    env.clone(),\n+                    name,\n+                    receiver_ty,\n+                    visible_from_module,\n+                    callback,\n+                )?;\n+            }\n+        }\n+    }\n+\n     for krate in def_crates {\n         let impls = db.inherent_impls_in_crate(krate);\n+        impls_for_self_ty(\n+            &impls,\n+            self_ty,\n+            db,\n+            env.clone(),\n+            name,\n+            receiver_ty,\n+            visible_from_module,\n+            callback,\n+        )?;\n+    }\n+    return ControlFlow::Continue(());\n \n-        let impls_for_self_ty = filter_inherent_impls_for_self_ty(&impls, &self_ty.value);\n-\n+    fn impls_for_self_ty(\n+        impls: &InherentImpls,\n+        self_ty: &Canonical<Ty>,\n+        db: &dyn HirDatabase,\n+        env: Arc<TraitEnvironment>,\n+        name: Option<&Name>,\n+        receiver_ty: Option<&Canonical<Ty>>,\n+        visible_from_module: Option<ModuleId>,\n+        callback: &mut dyn FnMut(&Canonical<Ty>, AssocItemId) -> ControlFlow<()>,\n+    ) -> ControlFlow<()> {\n+        let impls_for_self_ty = filter_inherent_impls_for_self_ty(impls, &self_ty.value);\n         for &impl_def in impls_for_self_ty {\n             for &item in db.impl_data(impl_def).items.iter() {\n                 if !is_valid_candidate(\n@@ -776,8 +826,8 @@ fn iterate_inherent_methods(\n                 callback(receiver_ty, item)?;\n             }\n         }\n+        ControlFlow::Continue(())\n     }\n-    ControlFlow::Continue(())\n }\n \n /// Returns the self type for the index trait call."}, {"sha": "9b1f682b6142941f9ca345a61d2d12df9cfd1b1e", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f00cd911bffff26a2e55d09c7305a76aa2b820f9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00cd911bffff26a2e55d09c7305a76aa2b820f9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=f00cd911bffff26a2e55d09c7305a76aa2b820f9", "patch": "@@ -1386,3 +1386,24 @@ fn f<S: Sized, T, U: ?Sized>() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn local_impl() {\n+    check_types(\n+        r#\"\n+fn main() {\n+    struct SomeStruct(i32);\n+\n+    impl SomeStruct {\n+        fn is_even(&self) -> bool {\n+            self.0 % 2 == 0\n+        }\n+    }\n+\n+    let o = SomeStruct(3);\n+    let is_even = o.is_even();\n+     // ^^^^^^^ bool\n+}\n+    \"#,\n+    );\n+}"}]}