{"sha": "c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OTJlZDQ2OGM4ZGM0YjlmNTQ5ZWY4MzliNGI0OTBlM2I4NGQxOWM=", "commit": {"author": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-06-15T18:42:29Z"}, "committer": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-07-27T21:00:38Z"}, "message": "Move `Error` and `RenderInfo` out of `html` module", "tree": {"sha": "4e8ecd0527747d52bce94f22ab2feee873e27f80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8ecd0527747d52bce94f22ab2feee873e27f80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEtei29J14PIgXYsIlGom1QEO7zL0FAl8fQHYACgkQGom1QEO7\nzL2sYAf/S9Xz1QO08ATdarUI5ij5JNnBdXkekGJ7NkT4l3KBbTNYa1HaTt12C6Qu\nGFontNGXlDC7h5reGxnNQGVNCBszPx3JaL3G120Tq0pOvw0RMXSt4f9ejskAl+73\nuCpEsQMltKC391zf6WogrRMzPxSkCOCX09OrdHfuLiTLUPwF/gpFpKr4UpRCi9IR\nAeXBXKlNUN/ZDbL5tpuLkZNQpRNeRYR6+mFVl3z69xR6Oq8Am3zBxOffRHtxSfFB\nK3dyxPb2+H6YX0oyDXbFrTAWwtnfoWEOs4EWnJUF7avdOfnYq4BKxEuinBERqUpf\nJZYaGJ5SQ7+cFGpuMpg3yLomGn/2lA==\n=XcaY\n-----END PGP SIGNATURE-----", "payload": "tree 4e8ecd0527747d52bce94f22ab2feee873e27f80\nparent efc02b03d18b0cbaa55b1e421d792f70a39230b2\nauthor Joseph Ryan <josephryan3.14@gmail.com> 1592246549 -0500\ncommitter Joseph Ryan <josephryan3.14@gmail.com> 1595883638 -0500\n\nMove `Error` and `RenderInfo` out of `html` module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "html_url": "https://github.com/rust-lang/rust/commit/c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/comments", "author": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc02b03d18b0cbaa55b1e421d792f70a39230b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc02b03d18b0cbaa55b1e421d792f70a39230b2", "html_url": "https://github.com/rust-lang/rust/commit/efc02b03d18b0cbaa55b1e421d792f70a39230b2"}], "stats": {"total": 156, "additions": 85, "deletions": 71}, "files": [{"sha": "1ea9e28ae42acbc8acada19139dc65be9aa2fa35", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -4,6 +4,9 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::DefId;\n+use rustc_middle::middle::privacy::AccessLevels;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n use rustc_session::config::{\n     build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n@@ -249,6 +252,20 @@ pub struct RenderOptions {\n     pub document_hidden: bool,\n }\n \n+/// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n+/// Later on moved into `CACHE_KEY`.\n+#[derive(Default)]\n+pub struct RenderInfo {\n+    pub inlined: FxHashSet<DefId>,\n+    pub external_paths: crate::core::ExternalPaths,\n+    pub exact_paths: FxHashMap<DefId, Vec<String>>,\n+    pub access_levels: AccessLevels<DefId>,\n+    pub deref_trait_did: Option<DefId>,\n+    pub deref_mut_trait_did: Option<DefId>,\n+    pub owned_box_did: Option<DefId>,\n+    pub output_format: Option<OutputFormat>,\n+}\n+\n impl Options {\n     /// Parses the given command-line for options. If an error message or other early-return has\n     /// been printed, returns `Err` with the exit code."}, {"sha": "85bb7ca4cd60d3f7eba9421b6c18216f2750bc99", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -32,8 +32,8 @@ use std::rc::Rc;\n \n use crate::clean;\n use crate::clean::{AttributesExt, MAX_DEF_ID};\n+use crate::config::RenderInfo;\n use crate::config::{Options as RustdocOptions, RenderOptions};\n-use crate::html::render::RenderInfo;\n use crate::passes::{self, Condition::*, ConditionalPass};\n \n pub use rustc_session::config::{CodegenOptions, DebuggingOptions, Input, Options};"}, {"sha": "77063ab4639a121dccb44de7342941eee56e8766", "filename": "src/librustdoc/error.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ferror.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -0,0 +1,56 @@\n+use std::error;\n+use std::fmt::{self, Formatter};\n+use std::path::{Path, PathBuf};\n+\n+use crate::docfs::PathError;\n+\n+#[derive(Debug)]\n+pub struct Error {\n+    pub file: PathBuf,\n+    pub error: String,\n+}\n+\n+impl error::Error for Error {}\n+\n+impl std::fmt::Display for Error {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        let file = self.file.display().to_string();\n+        if file.is_empty() {\n+            write!(f, \"{}\", self.error)\n+        } else {\n+            write!(f, \"\\\"{}\\\": {}\", self.file.display(), self.error)\n+        }\n+    }\n+}\n+\n+impl PathError for Error {\n+    fn new<S, P: AsRef<Path>>(e: S, path: P) -> Error\n+    where\n+        S: ToString + Sized,\n+    {\n+        Error { file: path.as_ref().to_path_buf(), error: e.to_string() }\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! try_none {\n+    ($e:expr, $file:expr) => {{\n+        use std::io;\n+        match $e {\n+            Some(e) => e,\n+            None => {\n+                return Err(Error::new(io::Error::new(io::ErrorKind::Other, \"not found\"), $file));\n+            }\n+        }\n+    }};\n+}\n+\n+#[macro_export]\n+macro_rules! try_err {\n+    ($e:expr, $file:expr) => {{\n+        match $e {\n+            Ok(e) => e,\n+            Err(e) => return Err(Error::new(e, $file)),\n+        }\n+    }};\n+}"}, {"sha": "18ef97118e097ffa29ba3cb906692eebf7a3c578", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 67, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -30,9 +30,8 @@ use std::cell::{Cell, RefCell};\n use std::cmp::Ordering;\n use std::collections::{BTreeMap, VecDeque};\n use std::default::Default;\n-use std::error;\n use std::ffi::OsStr;\n-use std::fmt::{self, Formatter, Write};\n+use std::fmt::{self, Write};\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n@@ -50,7 +49,6 @@ use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n-use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n@@ -60,9 +58,11 @@ use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, TypeKind};\n-use crate::config::{OutputFormat, RenderOptions};\n+use crate::config::RenderInfo;\n+use crate::config::RenderOptions;\n use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n+use crate::error::Error;\n use crate::html::escape::Escape;\n use crate::html::format::fmt_impl_for_trait_page;\n use crate::html::format::Function;\n@@ -90,55 +90,6 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     })\n }\n \n-#[derive(Debug)]\n-pub struct Error {\n-    pub file: PathBuf,\n-    pub error: String,\n-}\n-\n-impl error::Error for Error {}\n-\n-impl std::fmt::Display for Error {\n-    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n-        let file = self.file.display().to_string();\n-        if file.is_empty() {\n-            write!(f, \"{}\", self.error)\n-        } else {\n-            write!(f, \"\\\"{}\\\": {}\", self.file.display(), self.error)\n-        }\n-    }\n-}\n-\n-impl PathError for Error {\n-    fn new<S, P: AsRef<Path>>(e: S, path: P) -> Error\n-    where\n-        S: ToString + Sized,\n-    {\n-        Error { file: path.as_ref().to_path_buf(), error: e.to_string() }\n-    }\n-}\n-\n-macro_rules! try_none {\n-    ($e:expr, $file:expr) => {{\n-        use std::io;\n-        match $e {\n-            Some(e) => e,\n-            None => {\n-                return Err(Error::new(io::Error::new(io::ErrorKind::Other, \"not found\"), $file));\n-            }\n-        }\n-    }};\n-}\n-\n-macro_rules! try_err {\n-    ($e:expr, $file:expr) => {{\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => return Err(Error::new(e, $file)),\n-        }\n-    }};\n-}\n-\n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n /// how the current page is being rendered.\n@@ -260,20 +211,6 @@ impl Impl {\n     }\n }\n \n-/// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n-/// Later on moved into `CACHE_KEY`.\n-#[derive(Default)]\n-pub struct RenderInfo {\n-    pub inlined: FxHashSet<DefId>,\n-    pub external_paths: crate::core::ExternalPaths,\n-    pub exact_paths: FxHashMap<DefId, Vec<String>>,\n-    pub access_levels: AccessLevels<DefId>,\n-    pub deref_trait_did: Option<DefId>,\n-    pub deref_mut_trait_did: Option<DefId>,\n-    pub owned_box_did: Option<DefId>,\n-    pub output_format: Option<OutputFormat>,\n-}\n-\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n "}, {"sha": "6da4a4628e8f9f7737ed9e7de36ec97ea4301c6e", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -12,7 +12,8 @@ use std::path::{Path, PathBuf};\n use serde::Serialize;\n \n use super::{plain_summary_line, shorten, Impl, IndexItem, IndexItemFunctionType, ItemType};\n-use super::{Generic, RenderInfo, RenderType, TypeWithKind};\n+use super::{Generic, RenderType, TypeWithKind};\n+use crate::config::RenderInfo;\n \n /// Indicates where an external crate can be found.\n pub enum ExternalLocation {"}, {"sha": "aaa73b100c2433b15918b871091e4e645c7a0698", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -1,10 +1,11 @@\n use crate::clean;\n use crate::docfs::PathError;\n+use crate::error::Error;\n use crate::fold::DocFolder;\n use crate::html::format::Buffer;\n use crate::html::highlight;\n use crate::html::layout;\n-use crate::html::render::{Error, SharedContext, BASIC_KEYWORDS};\n+use crate::html::render::{SharedContext, BASIC_KEYWORDS};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_span::source_map::FileName;\n use std::ffi::OsStr;"}, {"sha": "ac31ab5980cc31c5d6e4ca5503ed458a3bf08bf8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692ed468c8dc4b9f549ef839b4b490e3b84d19c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c692ed468c8dc4b9f549ef839b4b490e3b84d19c", "patch": "@@ -63,6 +63,8 @@ mod config;\n mod core;\n mod docfs;\n mod doctree;\n+#[macro_use]\n+mod error;\n mod fold;\n pub mod html {\n     crate mod escape;\n@@ -85,7 +87,7 @@ mod visit_lib;\n \n struct Output {\n     krate: clean::Crate,\n-    renderinfo: html::render::RenderInfo,\n+    renderinfo: config::RenderInfo,\n     renderopts: config::RenderOptions,\n }\n "}]}