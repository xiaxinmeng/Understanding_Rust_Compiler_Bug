{"sha": "1f2178e2d3e274d29146a3380a8ae09a4f9beb27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjE3OGUyZDNlMjc0ZDI5MTQ2YTMzODBhOGFlMDlhNGY5YmViMjc=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-01T20:01:56Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-03T01:55:44Z"}, "message": "Removing an obsolete benchmark", "tree": {"sha": "f505efb23a6719eb153114792d6b5ebeaaacdb67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f505efb23a6719eb153114792d6b5ebeaaacdb67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2178e2d3e274d29146a3380a8ae09a4f9beb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2178e2d3e274d29146a3380a8ae09a4f9beb27", "html_url": "https://github.com/rust-lang/rust/commit/1f2178e2d3e274d29146a3380a8ae09a4f9beb27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2178e2d3e274d29146a3380a8ae09a4f9beb27/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19570ab1f010ed5347f0b192282f3e681400155a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19570ab1f010ed5347f0b192282f3e681400155a", "html_url": "https://github.com/rust-lang/rust/commit/19570ab1f010ed5347f0b192282f3e681400155a"}], "stats": {"total": 459, "additions": 0, "deletions": 459}, "files": [{"sha": "01b949e312cc1ebaffd256e3f010ec38408ce14e", "filename": "src/test/bench/task-perf-word-count.rs", "status": "removed", "additions": 0, "deletions": 459, "changes": 459, "blob_url": "https://github.com/rust-lang/rust/blob/19570ab1f010ed5347f0b192282f3e681400155a/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19570ab1f010ed5347f0b192282f3e681400155a/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=19570ab1f010ed5347f0b192282f3e681400155a", "patch": "@@ -1,459 +0,0 @@\n-/**\n-   A parallel word-frequency counting program.\n-\n-   This is meant primarily to demonstrate Rust's MapReduce framework.\n-\n-   It takes a list of files on the command line and outputs a list of\n-   words along with how many times each word is used.\n-\n-*/\n-\n-use std;\n-\n-import option = option;\n-import option::{some, none};\n-import std::{map, time};\n-import std::map::hashmap;\n-import io::reader_util;\n-\n-import comm::chan;\n-import comm::port;\n-import comm::recv;\n-import comm::send;\n-\n-fn map(input: ~str, emit: map_reduce::putter) {\n-    let f = io::str_reader(input);\n-\n-\n-    loop {\n-        alt read_word(f) { some(w) { emit(w, 1); } none { break; } }\n-    }\n-}\n-\n-fn reduce(_word: ~str, get: map_reduce::getter) {\n-    let mut count = 0;\n-\n-    loop { alt get() { some(_) { count += 1; } none { break; } } }\n-}\n-\n-mod map_reduce {\n-    export putter;\n-    export getter;\n-    export mapper;\n-    export reducer;\n-    export map_reduce;\n-\n-    type putter = fn@(~str, int);\n-\n-    type mapper = fn@(~str, putter);\n-\n-    type getter = fn@() -> option<int>;\n-\n-    type reducer = fn@(~str, getter);\n-\n-    enum ctrl_proto {\n-        find_reducer(~str, chan<chan<reduce_proto>>),\n-        mapper_done,\n-    }\n-\n-    enum reduce_proto { emit_val(int), done, addref, release, }\n-\n-    fn start_mappers(ctrl: chan<ctrl_proto>, -inputs: ~[~str]) ->\n-       ~[future::future<task::task_result>] {\n-        let mut results = ~[];\n-        for inputs.each |i| {\n-            do task::task().future_result(|-r| {\n-                results += ~[r]; // Add result for this task to the list\n-            }).spawn {\n-                map_task(ctrl, i); // Task body\n-            }\n-        }\n-        return results;\n-    }\n-\n-    fn map_task(ctrl: chan<ctrl_proto>, input: ~str) {\n-        // log(error, \"map_task \" + input);\n-        let intermediates = map::str_hash();\n-\n-        fn emit(im: map::hashmap<~str, chan<reduce_proto>>,\n-                ctrl: chan<ctrl_proto>, key: ~str, val: int) {\n-            let mut c;\n-            alt im.find(key) {\n-              some(_c) {\n-                c = _c;\n-              }\n-              none {\n-                let p = port();\n-                send(ctrl, find_reducer(key, chan(p)));\n-                c = recv(p);\n-                im.insert(key, c);\n-                send(c, addref);\n-              }\n-            }\n-            send(c, emit_val(val));\n-        }\n-\n-        map(input, |a,b| emit(intermediates, ctrl, a, b) );\n-\n-        for intermediates.each_value |v| { send(v, release); }\n-\n-        send(ctrl, mapper_done);\n-    }\n-\n-    fn reduce_task(key: ~str, out: chan<chan<reduce_proto>>) {\n-        let p = port();\n-\n-        send(out, chan(p));\n-\n-        let state = @{mut ref_count: 0, mut is_done: false};\n-\n-        fn get(p: port<reduce_proto>, state: @{mut ref_count: int,\n-                                               mut is_done: bool})\n-            -> option<int> {\n-            while !state.is_done || state.ref_count > 0 {\n-                alt recv(p) {\n-                  emit_val(v) {\n-                    // error!{\"received %d\", v};\n-                    return some(v);\n-                  }\n-                  done {\n-                    // error!{\"all done\"};\n-                    state.is_done = true;\n-                  }\n-                  addref { state.ref_count += 1; }\n-                  release { state.ref_count -= 1; }\n-                }\n-            }\n-            return none;\n-        }\n-\n-        reduce(key, || get(p, state) );\n-    }\n-\n-    fn map_reduce(-inputs: ~[~str]) {\n-        let ctrl = port::<ctrl_proto>();\n-\n-        // This task becomes the master control task. It task::_spawns\n-        // to do the rest.\n-\n-        let mut reducers: map::hashmap<~str, chan<reduce_proto>>;\n-\n-        reducers = map::str_hash();\n-\n-        let mut num_mappers = vec::len(inputs) as int;\n-        let mut results = start_mappers(chan(ctrl), inputs);\n-\n-        while num_mappers > 0 {\n-            alt recv(ctrl) {\n-              mapper_done {\n-                // error!{\"received mapper terminated.\"};\n-                num_mappers -= 1;\n-              }\n-              find_reducer(k, cc) {\n-                let mut c;\n-                // log(error, \"finding reducer for \" + k);\n-                alt reducers.find(k) {\n-                  some(_c) {\n-                    // log(error,\n-                    // \"reusing existing reducer for \" + k);\n-                    c = _c;\n-                  }\n-                  none {\n-                    // log(error, \"creating new reducer for \" + k);\n-                    let p = port();\n-                    let ch = chan(p);\n-                    do task::task().future_result(|-r| {\n-                        results += ~[r]; // Add result for this task\n-                    }).spawn {\n-                        reduce_task(k, ch); // Task body\n-                    }\n-                    c = recv(p);\n-                    reducers.insert(k, c);\n-                  }\n-                }\n-                send(cc, c);\n-              }\n-            }\n-        }\n-\n-        for reducers.each_value |v| { send(v, done); }\n-\n-        for results.each |r| { future::get(r); }\n-    }\n-}\n-\n-fn main(argv: ~[~str]) {\n-    let inputs = if vec::len(argv) < 2u {\n-        ~[input1(), input2(), input3()]\n-    } else {\n-        vec::map(vec::slice(argv, 1u, vec::len(argv)),\n-                 {|f| result::get(io::read_whole_file_str(f)) })\n-    };\n-\n-    let start = time::precise_time_ns();\n-\n-    map_reduce::map_reduce(inputs);\n-    let stop = time::precise_time_ns();\n-\n-    let mut elapsed = stop - start;\n-    elapsed /= 1000000u64;\n-\n-    log(error, ~\"MapReduce completed in \"\n-             + u64::str(elapsed) + ~\"ms\");\n-}\n-\n-fn read_word(r: io::reader) -> option<~str> {\n-    let mut w = ~\"\";\n-\n-    while !r.eof() {\n-        let c = r.read_char();\n-\n-        if is_word_char(c) {\n-            w += str::from_char(c);\n-        } else { if w != ~\"\" { return some(w); } }\n-    }\n-    return none;\n-}\n-\n-fn is_digit(c: char) -> bool {\n-    alt c {\n-      '0' { true }\n-      '1' { true }\n-      '2' { true }\n-      '3' { true }\n-      '4' { true }\n-      '5' { true }\n-      '6' { true }\n-      '7' { true }\n-      '8' { true }\n-      '9' { true }\n-      _ { false }\n-    }\n-}\n-\n-fn is_alpha_lower(c: char) -> bool {\n-    alt c {\n-      'a' { true }\n-      'b' { true }\n-      'c' { true }\n-      'd' { true }\n-      'e' { true }\n-      'f' { true }\n-      'g' { true }\n-      'h' { true }\n-      'i' { true }\n-      'j' { true }\n-      'k' { true }\n-      'l' { true }\n-      'm' { true }\n-      'n' { true }\n-      'o' { true }\n-      'p' { true }\n-      'q' { true }\n-      'r' { true }\n-      's' { true }\n-      't' { true }\n-      'u' { true }\n-      'v' { true }\n-      'w' { true }\n-      'x' { true }\n-      'y' { true }\n-      'z' { true }\n-      _ { false }\n-    }\n-}\n-\n-fn is_alpha_upper(c: char) -> bool {\n-    alt c {\n-      'A' { true }\n-      'B' { true }\n-      'C' { true }\n-      'D' { true }\n-      'E' { true }\n-      'F' { true }\n-      'G' { true }\n-      'H' { true }\n-      'I' { true }\n-      'J' { true }\n-      'K' { true }\n-      'L' { true }\n-      'M' { true }\n-      'N' { true }\n-      'O' { true }\n-      'P' { true }\n-      'Q' { true }\n-      'R' { true }\n-      'S' { true }\n-      'T' { true }\n-      'U' { true }\n-      'V' { true }\n-      'W' { true }\n-      'X' { true }\n-      'Y' { true }\n-      'Z' { true }\n-      _ { false }\n-    }\n-}\n-\n-fn is_alpha(c: char) -> bool { is_alpha_upper(c) || is_alpha_lower(c) }\n-\n-fn is_word_char(c: char) -> bool { is_alpha(c) || is_digit(c) || c == '_' }\n-\n-\n-\n-fn input1() -> ~str { ~\" Lorem ipsum dolor sit amet, consectetur\n-adipiscing elit. Vestibulum tempor erat a dui commodo congue. Proin ac\n-imperdiet est. Nunc volutpat placerat justo, ac euismod nisl elementum\n-et. Nam a eros eleifend dolor porttitor auctor a a felis. Maecenas dui\n-odio, malesuada eget bibendum at, ultrices suscipit enim. Sed libero\n-dolor, sagittis eget mattis quis, imperdiet quis diam. Praesent eu\n-tristique nunc. Integer blandit commodo elementum. In eros lacus,\n-pretium vel fermentum vitae, euismod ut nulla.\n-\n-Cras eget magna tempor mauris gravida laoreet. Suspendisse venenatis\n-volutpat molestie. Pellentesque suscipit nisl feugiat sem blandit\n-venenatis. Mauris id odio nec est elementum congue sed id\n-diam. Maecenas viverra, mi id aliquam commodo, ipsum dolor iaculis\n-odio, sed fringilla neque ipsum quis orci. Pellentesque dui dolor,\n-faucibus a rutrum sed, faucibus a mi. In eget sodales\n-ipsum. Pellentesque sollicitudin dapibus diam, ac interdum tellus\n-porta ac.\n-\n-Donec ligula mi, sodales vel cursus a, dapibus ut sapien. In convallis\n-tempor libero, id dapibus mi sodales quis. Suspendisse\n-potenti. Vestibulum feugiat bibendum bibendum. Maecenas metus magna,\n-consequat in mollis at, malesuada id sem. Donec interdum viverra enim\n-nec ornare. Donec pellentesque neque magna.\n-\n-Donec euismod, ante quis tempor pretium, leo lectus ornare arcu, sed\n-porttitor nisl ipsum elementum lectus. Nam rhoncus dictum sapien sed\n-tincidunt. Integer sit amet dui orci. Quisque lectus elit, dignissim\n-eget mattis nec, cursus nec erat. Fusce vitae metus nulla, et mattis\n-quam. Nullam sit amet diam augue. Nunc non ante eu enim lacinia\n-condimentum ac eget lectus.\n-\n-Aliquam ut pulvinar tellus. Vestibulum ante ipsum primis in faucibus\n-orci luctus et ultrices posuere cubilia Curae; Pellentesque non urna\n-urna. Nulla facilisi. Aenean in felis quis massa aliquam eleifend non\n-sed libero. Proin sit amet iaculis urna. In hac habitasse platea\n-dictumst. Aenean scelerisque aliquet dolor, sit amet viverra est\n-laoreet nec. Curabitur non urna a augue rhoncus pulvinar. Integer\n-placerat vehicula nisl sed egestas. Morbi iaculis diam at erat\n-sollicitudin nec interdum libero tristique.  \" }\n-\n-fn input2() -> ~str { ~\" Lorem ipsum dolor sit amet, consectetur\n-adipiscing elit. Proin enim nibh, scelerisque faucibus accumsan id,\n-feugiat id ipsum. In luctus mauris a massa consequat dignissim. Donec\n-sit amet sem urna. Nullam pellentesque accumsan mi, at convallis arcu\n-pharetra in. Quisque euismod gravida nibh in rutrum. Phasellus laoreet\n-elit porta augue molestie nec imperdiet quam venenatis. Maecenas et\n-egestas arcu. Donec vulputate mauris enim. Aenean malesuada urna sed\n-dui eleifend quis posuere massa malesuada. Proin varius fringilla\n-feugiat. Donec mollis lorem sit amet ligula blandit quis fermentum dui\n-eleifend. Fusce molestie sodales magna in mattis. Aenean imperdiet,\n-elit sit amet accumsan vehicula, velit massa semper nibh, et varius\n-justo sem ut orci. Sed et magna lectus. Vestibulum vehicula, tellus\n-non dapibus mattis, libero ligula ullamcorper odio, in interdum odio\n-sem at mi.\n-\n-Donec ut rhoncus mi. Donec ullamcorper, sem nec laoreet ullamcorper,\n-metus metus accumsan orci, ac luctus est velit a dolor. Donec eros\n-lectus, facilisis ut volutpat sit amet, pellentesque eu\n-velit. Praesent eget nibh et arcu vestibulum consequat. Pellentesque\n-habitant morbi tristique senectus et netus et malesuada fames ac\n-turpis egestas. Pellentesque lectus est, rhoncus ut cursus sit amet,\n-hendrerit quis dui. Maecenas vel purus in tellus luctus semper vel non\n-orci. Proin viverra, erat eget pretium ultrices, quam quam vulputate\n-tortor, eu dapibus risus nunc ac ipsum. Vestibulum ante ipsum primis\n-in faucibus orci luctus et ultrices posuere cubilia Curae; Ut aliquet\n-augue volutpat arcu mattis ullamcorper. Quisque vulputate consectetur\n-massa, quis cursus mauris lacinia vitae. Morbi id mi eu leo accumsan\n-aliquet ac et arcu. Quisque risus nisi, rhoncus vulputate egestas sed,\n-rhoncus quis risus. Sed semper odio sed nulla accumsan vitae auctor\n-tortor mattis.\n-\n-Vivamus vitae mauris turpis. Praesent consectetur mi non sem lacinia a\n-cursus sapien gravida. Aenean viverra turpis sit amet ligula\n-vestibulum a ornare nunc feugiat. Mauris et risus arcu. Cras dictum\n-porta cursus. Donec tempus laoreet eros. Nam nec turpis non dui\n-hendrerit laoreet eu ut ipsum. Nam in sem eget turpis lacinia euismod\n-eu eget nulla.\n-\n-Suspendisse at varius elit. Donec consectetur pharetra massa nec\n-viverra. Cras vehicula lorem id sapien hendrerit tristique. Mauris\n-vitae mi ipsum. Suspendisse feugiat commodo iaculis. Maecenas vitae\n-dignissim nunc. Sed hendrerit, arcu et aliquet suscipit, urna quam\n-fermentum eros, vel accumsan metus quam quis risus. Praesent id eros\n-pulvinar tellus fringilla cursus. Sed nec vulputate ipsum. Suspendisse\n-sagittis, magna vitae faucibus semper, nibh felis vehicula tortor, et\n-molestie velit lorem ac massa.\n-\n-Duis aliquam accumsan lobortis. Morbi interdum cursus risus, vel\n-dapibus nisl fermentum sit amet. Etiam in mauris at lectus lacinia\n-mollis. Proin pretium sem nibh, id scelerisque arcu. Mauris pretium\n-adipiscing metus. Suspendisse quis convallis augue. Aliquam sed dui\n-augue, vel tempor ligula. Suspendisse luctus velit quis urna suscipit\n-sit amet ullamcorper nunc mollis. Praesent vitae velit justo. Donec\n-quis risus felis. Nullam rutrum, odio non varius ornare, tortor odio\n-posuere felis, eget accumsan sem sapien et nunc. Fusce mi neque,\n-elementum non convallis eu, hendrerit id arcu. Morbi tempus tincidunt\n-ullamcorper. Nullam blandit, diam quis sollicitudin tincidunt, elit\n-justo varius lacus, aliquet luctus neque nibh quis turpis. Etiam massa\n-sapien, tristique ut consectetur eu, elementum vel orci.  \" }\n-\n-fn input3() -> ~str { ~\" Lorem ipsum dolor sit amet, consectetur\n-adipiscing elit. Pellentesque bibendum sapien ut magna fringilla\n-mollis. Vivamus in neque non metus faucibus accumsan eu pretium\n-nunc. Ut erat augue, pulvinar eget blandit nec, cursus quis\n-ipsum. Aliquam eu ornare risus. Mauris ipsum tortor, posuere vel\n-gravida ut, tincidunt eu nunc. Aenean pellentesque, justo eu aliquam\n-condimentum, neque eros feugiat nibh, in dictum nisi augue euismod\n-lectus. Nam fringilla placerat metus aliquam rutrum. Nullam dapibus\n-vehicula ligula ut tempor. Aliquam vehicula, diam vitae fermentum\n-aliquam, justo augue venenatis enim, porta euismod dolor libero in\n-arcu. Sed sollicitudin dictum eros non ornare. Donec nec purus\n-orci. Mauris euismod fringilla consequat. Praesent non erat quis risus\n-dapibus semper ac adipiscing lorem. Aliquam pulvinar dapibus\n-mollis. Donec fermentum sollicitudin metus, sit amet condimentum leo\n-adipiscing a.\n-\n-Vestibulum mi felis, commodo placerat rhoncus sed, feugiat tincidunt\n-orci. Integer faucibus ornare placerat. Nam et odio massa. Suspendisse\n-porttitor nunc quis mi mollis imperdiet. Ut ut neque ipsum, sit amet\n-facilisis erat. Nam ac lacinia turpis. Vivamus ullamcorper iaculis\n-odio, et euismod sem imperdiet non. Duis porta felis sit amet nunc\n-venenatis eu vestibulum nisi scelerisque. Nullam luctus mollis nunc\n-vel pulvinar. Nam lorem tellus, imperdiet sed sodales eu, auctor ut\n-nunc.\n-\n-Nulla at mauris at leo sagittis varius eu a elit. Etiam consequat,\n-tellus ut sagittis porttitor, est justo convallis eros, quis suscipit\n-justo tortor vitae sem. In in odio augue. Pellentesque habitant morbi\n-tristique senectus et netus et malesuada fames ac turpis\n-egestas. Nulla varius ornare ligula quis euismod. Maecenas lobortis\n-sodales sapien a mattis. Nulla blandit lobortis lacus, ut lobortis\n-neque dictum ut. Praesent semper laoreet nisl. Etiam arcu eros,\n-pretium eget eleifend eu, condimentum quis leo. Donec imperdiet porta\n-erat. Aenean tempor sapien ut arcu porta mollis. Duis ultrices commodo\n-quam venenatis commodo.\n-\n-Aliquam odio tellus, tincidunt nec condimentum pellentesque, semper\n-eget magna. Nam et lacus urna. Pellentesque urna nisi, pharetra vitae\n-dignissim non, scelerisque eu massa. Sed sapien neque, cursus a\n-malesuada ut, porta et quam. Donec odio sapien, blandit non aliquam\n-vel, lobortis quis ligula. Nullam fermentum velit nec quam ultrices et\n-venenatis sapien congue. Pellentesque vitae nunc arcu. Nullam eget\n-laoreet nulla. Curabitur dignissim convallis nunc sed blandit. Sed ac\n-ipsum mi. Ut euismod tellus hendrerit arcu egestas sollicitudin. Nam\n-eget laoreet ipsum. Morbi sed nulla odio, at volutpat ante. Vivamus\n-elementum dictum gravida.\n-\n-Phasellus diam nisi, ullamcorper et placerat non, ultrices ut\n-lectus. Etiam tincidunt scelerisque imperdiet. Quisque pretium pretium\n-urna quis cursus. Sed sit amet velit sem. Maecenas eu orci et leo\n-ultricies dictum. Mauris pellentesque ante a purus gravida\n-convallis. Integer non tellus ante. Nulla hendrerit lobortis augue sit\n-amet vulputate. Donec cursus hendrerit diam convallis\n-luctus. Curabitur ipsum mauris, fermentum quis tincidunt ac, laoreet\n-sollicitudin sapien. Fusce velit urna, gravida non pulvinar eu, tempor\n-id nunc.  \" }"}]}