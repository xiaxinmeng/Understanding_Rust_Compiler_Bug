{"sha": "be221573c853f5cdca8becab5acc600d6c79eac5", "node_id": "C_kwDOAAsO6NoAKGJlMjIxNTczYzg1M2Y1Y2RjYThiZWNhYjVhY2M2MDBkNmM3OWVhYzU", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-12T20:55:28Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-12T20:55:28Z"}, "message": "UPDATE - Move IntoDiagnosticArg implementations to diagnostic_impls file", "tree": {"sha": "709db01b3ea396be01d12e3badc5b422bd6bde82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709db01b3ea396be01d12e3badc5b422bd6bde82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be221573c853f5cdca8becab5acc600d6c79eac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be221573c853f5cdca8becab5acc600d6c79eac5", "html_url": "https://github.com/rust-lang/rust/commit/be221573c853f5cdca8becab5acc600d6c79eac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be221573c853f5cdca8becab5acc600d6c79eac5/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5645cd5b09fb6db849376872fd09fe31bf029b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/5645cd5b09fb6db849376872fd09fe31bf029b57", "html_url": "https://github.com/rust-lang/rust/commit/5645cd5b09fb6db849376872fd09fe31bf029b57"}], "stats": {"total": 312, "additions": 160, "deletions": 152}, "files": [{"sha": "518c59dba536605ca17b785e43f35e8a59aaad42", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 149, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/be221573c853f5cdca8becab5acc600d6c79eac5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be221573c853f5cdca8becab5acc600d6c79eac5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=be221573c853f5cdca8becab5acc600d6c79eac5", "patch": "@@ -3,21 +3,15 @@ use crate::{\n     CodeSuggestion, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Level, MultiSpan,\n     SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n-use rustc_ast as ast;\n-use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_error_messages::FluentValue;\n-use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n-use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n-use rustc_span::{edition::Edition, Span, DUMMY_SP};\n-use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use std::num::ParseIntError;\n-use std::path::{Path, PathBuf};\n \n /// Error type for `Diagnostic`'s `suggestions` field, indicating that\n /// `.disable_suggestions()` was called on the `Diagnostic`.\n@@ -49,119 +43,6 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n-pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n-\n-impl IntoDiagnosticArg for DiagnosticArgFromDisplay<'_> {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.0.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n-impl<'a> From<&'a dyn fmt::Display> for DiagnosticArgFromDisplay<'a> {\n-    fn from(t: &'a dyn fmt::Display) -> Self {\n-        DiagnosticArgFromDisplay(t)\n-    }\n-}\n-\n-impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n-    fn from(t: &'a T) -> Self {\n-        DiagnosticArgFromDisplay(t)\n-    }\n-}\n-\n-macro_rules! into_diagnostic_arg_using_display {\n-    ($( $ty:ty ),+ $(,)?) => {\n-        $(\n-            impl IntoDiagnosticArg for $ty {\n-                fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-                    self.to_string().into_diagnostic_arg()\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-into_diagnostic_arg_using_display!(\n-    i8,\n-    u8,\n-    i16,\n-    u16,\n-    i32,\n-    u32,\n-    i64,\n-    u64,\n-    i128,\n-    u128,\n-    std::io::Error,\n-    std::num::NonZeroU32,\n-    hir::Target,\n-    Edition,\n-    Ident,\n-    MacroRulesNormalizedIdent,\n-    ParseIntError,\n-    StackProtector,\n-    &TargetTriple,\n-    SplitDebuginfo\n-);\n-\n-impl IntoDiagnosticArg for bool {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        if self {\n-            DiagnosticArgValue::Str(Cow::Borrowed(\"true\"))\n-        } else {\n-            DiagnosticArgValue::Str(Cow::Borrowed(\"false\"))\n-        }\n-    }\n-}\n-\n-impl IntoDiagnosticArg for char {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(format!(\"{:?}\", self)))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for Symbol {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.to_ident_string().into_diagnostic_arg()\n-    }\n-}\n-\n-impl<'a> IntoDiagnosticArg for &'a str {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n-impl IntoDiagnosticArg for String {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self))\n-    }\n-}\n-\n-impl<'a> IntoDiagnosticArg for &'a Path {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for PathBuf {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for usize {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Number(self)\n-    }\n-}\n-\n-impl IntoDiagnosticArg for PanicStrategy {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(self.desc().to_string()))\n-    }\n-}\n-\n impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     fn into(self) -> FluentValue<'source> {\n         match self {\n@@ -171,34 +52,6 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     }\n }\n \n-impl IntoDiagnosticArg for hir::ConstContext {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n-            hir::ConstContext::ConstFn => \"constant function\",\n-            hir::ConstContext::Static(_) => \"static\",\n-            hir::ConstContext::Const => \"constant\",\n-        }))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for ast::Path {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(pprust::path_to_string(&self)))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for ast::token::Token {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(pprust::token_to_string(&self))\n-    }\n-}\n-\n-impl IntoDiagnosticArg for ast::token::TokenKind {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(pprust::token_kind_to_string(&self))\n-    }\n-}\n-\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n #[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]"}, {"sha": "860f24871bcdc25471176c1d7bac732ae16d7795", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 155, "deletions": 1, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/be221573c853f5cdca8becab5acc600d6c79eac5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be221573c853f5cdca8becab5acc600d6c79eac5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=be221573c853f5cdca8becab5acc600d6c79eac5", "patch": "@@ -1,5 +1,159 @@\n-use crate::{fluent, DiagnosticBuilder, Handler, IntoDiagnostic};\n+use crate::{\n+    fluent, DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg,\n+};\n use rustc_target::abi::TargetDataLayoutErrors;\n+use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n+\n+use rustc_ast as ast;\n+use rustc_ast_pretty::pprust;\n+use rustc_hir as hir;\n+use rustc_span::edition::Edition;\n+use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n+use std::borrow::Cow;\n+use std::fmt;\n+use std::num::ParseIntError;\n+use std::path::{Path, PathBuf};\n+\n+pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n+\n+impl IntoDiagnosticArg for DiagnosticArgFromDisplay<'_> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.0.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> From<&'a dyn fmt::Display> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a dyn fmt::Display) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n+impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a T) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n+macro_rules! into_diagnostic_arg_using_display {\n+    ($( $ty:ty ),+ $(,)?) => {\n+        $(\n+            impl IntoDiagnosticArg for $ty {\n+                fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+                    self.to_string().into_diagnostic_arg()\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+into_diagnostic_arg_using_display!(\n+    i8,\n+    u8,\n+    i16,\n+    u16,\n+    i32,\n+    u32,\n+    i64,\n+    u64,\n+    i128,\n+    u128,\n+    std::io::Error,\n+    std::num::NonZeroU32,\n+    hir::Target,\n+    Edition,\n+    Ident,\n+    MacroRulesNormalizedIdent,\n+    ParseIntError,\n+    StackProtector,\n+    &TargetTriple,\n+    SplitDebuginfo\n+);\n+\n+impl IntoDiagnosticArg for bool {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        if self {\n+            DiagnosticArgValue::Str(Cow::Borrowed(\"true\"))\n+        } else {\n+            DiagnosticArgValue::Str(Cow::Borrowed(\"false\"))\n+        }\n+    }\n+}\n+\n+impl IntoDiagnosticArg for char {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(format!(\"{:?}\", self)))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for Symbol {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_ident_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> IntoDiagnosticArg for &'a str {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl IntoDiagnosticArg for String {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self))\n+    }\n+}\n+\n+impl<'a> IntoDiagnosticArg for &'a Path {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for PathBuf {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for usize {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Number(self)\n+    }\n+}\n+\n+impl IntoDiagnosticArg for PanicStrategy {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.desc().to_string()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for hir::ConstContext {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            hir::ConstContext::ConstFn => \"constant function\",\n+            hir::ConstContext::Static(_) => \"static\",\n+            hir::ConstContext::Const => \"constant\",\n+        }))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::Path {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(pprust::path_to_string(&self)))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::token::Token {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(pprust::token_to_string(&self))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::token::TokenKind {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(pprust::token_kind_to_string(&self))\n+    }\n+}\n \n impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n     fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {"}, {"sha": "9fafbe4bd407eb61d9dc847a5626adf601c55240", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be221573c853f5cdca8becab5acc600d6c79eac5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be221573c853f5cdca8becab5acc600d6c79eac5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=be221573c853f5cdca8becab5acc600d6c79eac5", "patch": "@@ -372,10 +372,11 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n-    DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n+    AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n+    DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n+pub use diagnostic_impls::DiagnosticArgFromDisplay;\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output."}]}