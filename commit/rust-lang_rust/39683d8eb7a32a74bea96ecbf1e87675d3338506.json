{"sha": "39683d8eb7a32a74bea96ecbf1e87675d3338506", "node_id": "C_kwDOAAsO6NoAKDM5NjgzZDhlYjdhMzJhNzRiZWE5NmVjYmYxZTg3Njc1ZDMzMzg1MDY", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-03-26T17:00:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-26T17:00:39Z"}, "message": "Merge pull request #146 from bjorn3/rustup\n\nRustup to rustc 1.61.0-nightly (d53246fed 2022-03-25)", "tree": {"sha": "f466d9b0bff049dc9522a24fb201205400ffd7c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f466d9b0bff049dc9522a24fb201205400ffd7c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39683d8eb7a32a74bea96ecbf1e87675d3338506", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiP0a3CRBK7hj4Ov3rIwAASWgIAExzOpnTMg7zTC8uewKn2Pb8\ncHS4WhE9MRKbf3VjoLYlQOrXq+xMznBnXqSZNLy40kkqeosJ33K4BYvT7EiVoLdy\nOrE92a5Ly9kjrCIo9V/1Fd1WzjGhyLiupJIA35+yacF97AK1xc1UnOvt/OzFXyPq\nfiwBuadozi4oAztvm+T6pAEdHJZdab0/n9UYxhsKdlx/DeLCjfEd+xFzj3Ua1dqu\nUCGpZS6aTIP7P7AE9H1IN87F57CBPBVDGIyK7mX6TN7C6gdwM/WG+gY97U/VQxqW\naOn/oUemr1XOZ7LnANYq0dq4NV4cxCTzhgbcB/GRts67/w4SCDf/GVh4E+rORk0=\n=AmnH\n-----END PGP SIGNATURE-----\n", "payload": "tree f466d9b0bff049dc9522a24fb201205400ffd7c9\nparent a22e15b954d2be638ab0b15cee6e93cf301dc159\nparent fb9658d312adec8a036c9dc0fad1b60e285c4af6\nauthor antoyo <antoyo@users.noreply.github.com> 1648314039 -0400\ncommitter GitHub <noreply@github.com> 1648314039 -0400\n\nMerge pull request #146 from bjorn3/rustup\n\nRustup to rustc 1.61.0-nightly (d53246fed 2022-03-25)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39683d8eb7a32a74bea96ecbf1e87675d3338506", "html_url": "https://github.com/rust-lang/rust/commit/39683d8eb7a32a74bea96ecbf1e87675d3338506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39683d8eb7a32a74bea96ecbf1e87675d3338506/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22e15b954d2be638ab0b15cee6e93cf301dc159", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22e15b954d2be638ab0b15cee6e93cf301dc159", "html_url": "https://github.com/rust-lang/rust/commit/a22e15b954d2be638ab0b15cee6e93cf301dc159"}, {"sha": "fb9658d312adec8a036c9dc0fad1b60e285c4af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9658d312adec8a036c9dc0fad1b60e285c4af6", "html_url": "https://github.com/rust-lang/rust/commit/fb9658d312adec8a036c9dc0fad1b60e285c4af6"}], "stats": {"total": 166, "additions": 98, "deletions": 68}, "files": [{"sha": "cfadf47cc3f8608ad5e26832d7c53a6571efb8cc", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -5,7 +5,7 @@ version = \"0.0.0\"\n \n [dependencies]\n core = { path = \"./sysroot_src/library/core\" }\n-compiler_builtins = \"=0.1.70\" # TODO: update back to \"0.1\" when updating to latest nightly.\n+compiler_builtins = \"0.1\"\n alloc = { path = \"./sysroot_src/library/alloc\" }\n std = { path = \"./sysroot_src/library/std\", features = [\"panic_unwind\", \"backtrace\"] }\n test = { path = \"./sysroot_src/library/test\" }"}, {"sha": "a8435287d9fde698eb89c37a44b4c32dc5e3f4a5", "filename": "example/mini_core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -14,6 +14,9 @@ unsafe extern \"C\" fn _Unwind_Resume() {\n #[lang = \"sized\"]\n pub trait Sized {}\n \n+#[lang = \"destruct\"]\n+pub trait Destruct {}\n+\n #[lang = \"unsize\"]\n pub trait Unsize<T: ?Sized> {}\n \n@@ -59,6 +62,7 @@ unsafe impl Copy for i16 {}\n unsafe impl Copy for i32 {}\n unsafe impl Copy for isize {}\n unsafe impl Copy for f32 {}\n+unsafe impl Copy for f64 {}\n unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}"}, {"sha": "03900ba101a900b67f484827b237a9842449a9cc", "filename": "patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/patches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/patches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-core-Disable-portable-simd-test.patch?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -11,7 +11,7 @@ diff --git a/library/core/src/lib.rs b/library/core/src/lib.rs\n index aa1ad93..95fbf55 100644\n --- a/library/core/src/lib.rs\n +++ b/library/core/src/lib.rs\n-@@ -398,25 +398,4 @@ pub mod arch {\n+@@ -398,23 +398,4 @@ pub mod arch {\n      }\n  }\n  \n@@ -25,12 +25,10 @@ index aa1ad93..95fbf55 100644\n -#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n -#[allow(rustdoc::bare_urls)]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -mod core_simd;\n -\n -#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -pub mod simd {\n -    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n -    pub use crate::core_simd::simd::*;\n@@ -41,15 +39,14 @@ diff --git a/library/core/src/slice/mod.rs b/library/core/src/slice/mod.rs\n index cd38c3a..ad632dc 100644\n --- a/library/core/src/slice/mod.rs\n +++ b/library/core/src/slice/mod.rs\n-@@ -17,7 +17,6 @@ use crate::ptr;\n+@@ -17,6 +17,5 @@ use crate::ptr;\n  use crate::result::Result;\n  use crate::result::Result::{Err, Ok};\n- #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n -use crate::simd::{self, Simd};\n  use crate::slice;\n  \n  #[unstable(\n-@@ -3475,123 +3474,6 @@ impl<T> [T] {\n+@@ -3475,121 +3474,6 @@ impl<T> [T] {\n          }\n      }\n  \n@@ -102,14 +99,13 @@ index cd38c3a..ad632dc 100644\n -    ///         suffix.iter().copied().sum(),\n -    ///     ]);\n -    ///     let sums = middle.iter().copied().fold(sums, f32x4::add);\n--    ///     sums.horizontal_sum()\n+-    ///     sums.reduce_sum()\n -    /// }\n -    ///\n -    /// let numbers: Vec<f32> = (1..101).map(|x| x as _).collect();\n -    /// assert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n -    /// ```\n -    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n -    pub fn as_simd<const LANES: usize>(&self) -> (&[T], &[Simd<T, LANES>], &[T])\n -    where\n -        Simd<T, LANES>: AsRef<[T; LANES]>,\n@@ -153,7 +149,6 @@ index cd38c3a..ad632dc 100644\n -    /// be lifted in a way that would make it possible to see panics from this\n -    /// method for something like `LANES == 3`.\n -    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n -    pub fn as_simd_mut<const LANES: usize>(&mut self) -> (&mut [T], &mut [Simd<T, LANES>], &mut [T])\n -    where\n -        Simd<T, LANES>: AsMut<[T; LANES]>,\n@@ -197,15 +192,14 @@ diff --git a/library/std/src/lib.rs b/library/std/src/lib.rs\n index 5dc586d..b6fc48f 100644\n --- a/library/std/src/lib.rs\n +++ b/library/std/src/lib.rs\n-@@ -312,7 +312,6 @@\n+@@ -312,6 +312,5 @@\n  #![feature(panic_can_unwind)]\n  #![feature(panic_unwind)]\n  #![feature(platform_intrinsics)]\n -#![feature(portable_simd)]\n  #![feature(prelude_import)]\n  #![feature(ptr_as_uninit)]\n- #![feature(ptr_internals)]\n-@@ -508,25 +508,6 @@ pub mod time;\n+@@ -508,23 +508,6 @@ pub mod time;\n  #[unstable(feature = \"once_cell\", issue = \"74465\")]\n  pub mod lazy;\n  \n@@ -215,10 +209,8 @@ index 5dc586d..b6fc48f 100644\n -#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n -#[allow(rustdoc::bare_urls)]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -mod std_float;\n -\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n -pub mod simd {"}, {"sha": "dc1beae6d2e71311801af88a5d8b496c0cbc51a4", "filename": "patches/0028-core-Disable-long-running-tests.patch", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/patches%2F0028-core-Disable-long-running-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/patches%2F0028-core-Disable-long-running-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0028-core-Disable-long-running-tests.patch?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -1,30 +1,32 @@\n-From 0ffdd8eda8df364391c8ac6e1ce92c73ba9254d4 Mon Sep 17 00:00:00 2001\n+From eb703e627e7a84f1cd8d0d87f0f69da1f0acf765 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n Date: Fri, 3 Dec 2021 12:16:30 +0100\n Subject: [PATCH] Disable long running tests\n \n ---\n- library/core/tests/slice.rs | 3 +++\n- 1 file changed, 3 insertions(+)\n+ library/core/tests/slice.rs | 2 ++\n+ 1 file changed, 2 insertions(+)\n \n diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n-index 2c8f00a..44847ee 100644\n+index 8402833..84592e0 100644\n --- a/library/core/tests/slice.rs\n +++ b/library/core/tests/slice.rs\n-@@ -2332,7 +2332,8 @@ macro_rules! empty_max_mut {\n-     };\n- }\n+@@ -2462,6 +2462,7 @@ take_tests! {\n+ #[cfg(not(miri))] // unused in Miri\n+ const EMPTY_MAX: &'static [()] = &[(); usize::MAX];\n  \n +/*\n- #[cfg(not(miri))] // Comparing usize::MAX many elements takes forever in Miri (and in rustc without optimizations)\n- take_tests! {\n-     slice: &[(); usize::MAX], method: take,\n-     (take_in_bounds_max_range_to, (..usize::MAX), Some(EMPTY_MAX), &[(); 0]),\n-@@ -2345,3 +2347,4 @@ take_tests! {\n+ // can't be a constant due to const mutability rules\n+ #[cfg(not(miri))] // unused in Miri\n+ macro_rules! empty_max_mut {\n+@@ -2485,6 +2486,7 @@ take_tests! {\n      (take_mut_oob_max_range_to_inclusive, (..=usize::MAX), None, empty_max_mut!()),\n      (take_mut_in_bounds_max_range_from, (usize::MAX..), Some(&mut [] as _), empty_max_mut!()),\n  }\n +*/\n+ \n+ #[test]\n+ fn test_slice_from_ptr_range() {\n -- \n 2.26.2.7.g19db9cfb68\n "}, {"sha": "db14ea2bebca557044f875a723bdae0fb54cd56e", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-02-25\"\n+channel = \"nightly-2022-03-26\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "c761e5aabd1071d3c4f22f58d63155e6b0e8a3c2", "filename": "src/allocator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -1,7 +1,8 @@\n-use gccjit::{FunctionType, ToRValue};\n+use gccjit::{FunctionType, GlobalKind, ToRValue};\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::OomStrategy;\n use rustc_span::symbol::sym;\n \n use crate::GccContext;\n@@ -113,4 +114,10 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n     let _ret = context.new_call(None, callee, &args);\n     //llvm::LLVMSetTailCall(ret, True);\n     block.end_with_void_return(None);\n+\n+    let name = OomStrategy::SYMBOL.to_string();\n+    let global = context.new_global(None, GlobalKind::Exported, i8, name);\n+    let value = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let value = context.new_rvalue_from_int(i8, value as i32);\n+    global.global_set_initializer_rvalue(value);\n }"}, {"sha": "b2f46e92eccbf72bb150d2e447b0c4719216326f", "filename": "src/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -934,7 +934,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let val_type = value.get_type();\n         match (type_is_pointer(val_type), type_is_pointer(dest_ty)) {\n             (false, true) => {\n-                // NOTE: Projecting a field of a pointer type will attemp a cast from a signed char to\n+                // NOTE: Projecting a field of a pointer type will attempt a cast from a signed char to\n                 // a pointer, which is not supported by gccjit.\n                 return self.cx.context.new_cast(None, self.inttoptr(value, val_type.make_pointer()), dest_ty);\n             },\n@@ -1251,8 +1251,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.cx\n     }\n \n-    fn apply_attrs_to_cleanup_callsite(&mut self, _llret: RValue<'gcc>) {\n-        // TODO\n+    fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n+        // FIMXE(bjorn3): implement\n     }\n \n     fn set_span(&mut self, _span: Span) {}"}, {"sha": "61709dd92de7961e17524100ae7bdbfe02ac1f15", "filename": "src/common.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -11,7 +11,7 @@ use rustc_codegen_ssa::traits::{\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::ScalarInt;\n use rustc_middle::ty::layout::{TyAndLayout, LayoutOf};\n-use rustc_middle::mir::interpret::{Allocation, GlobalAlloc, Scalar};\n+use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_span::Symbol;\n use rustc_target::abi::{self, HasDataLayout, Pointer, Size};\n \n@@ -24,18 +24,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         bytes_in_context(self, bytes)\n     }\n \n-    fn const_cstr(&self, symbol: Symbol, _null_terminated: bool) -> LValue<'gcc> {\n-        // TODO(antoyo): handle null_terminated.\n-        if let Some(&value) = self.const_cstr_cache.borrow().get(&symbol) {\n-            return value;\n-        }\n-\n-        let global = self.global_string(symbol.as_str());\n-\n-        self.const_cstr_cache.borrow_mut().insert(symbol, global);\n-        global\n-    }\n-\n     fn global_string(&self, string: &str) -> LValue<'gcc> {\n         // TODO(antoyo): handle non-null-terminated strings.\n         let string = self.context.new_string_literal(&*string);\n@@ -134,8 +122,12 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let len = s.as_str().len();\n-        let cs = self.const_ptrcast(self.const_cstr(s, false).get_address(None),\n+        let s_str = s.as_str();\n+        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n+            self.global_string(s_str)\n+        });\n+        let len = s_str.len();\n+        let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self, true)),\n         );\n         (cs, self.const_usize(len as u64))\n@@ -190,6 +182,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                     match self.tcx.global_alloc(alloc_id) {\n                         GlobalAlloc::Memory(alloc) => {\n                             let init = const_alloc_to_gcc(self, alloc);\n+                            let alloc = alloc.inner();\n                             let value =\n                                 match alloc.mutability {\n                                     Mutability::Mut => self.static_addr_of_mut(init, alloc.align, None),\n@@ -222,21 +215,21 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         }\n     }\n \n-    fn const_data_from_alloc(&self, alloc: &Allocation) -> Self::Value {\n+    fn const_data_from_alloc(&self, alloc: ConstAllocation<'tcx>) -> Self::Value {\n         const_alloc_to_gcc(self, alloc)\n     }\n \n-    fn from_const_alloc(&self, layout: TyAndLayout<'tcx>, alloc: &Allocation, offset: Size) -> PlaceRef<'tcx, RValue<'gcc>> {\n-        assert_eq!(alloc.align, layout.align.abi);\n+    fn from_const_alloc(&self, layout: TyAndLayout<'tcx>, alloc: ConstAllocation<'tcx>, offset: Size) -> PlaceRef<'tcx, RValue<'gcc>> {\n+        assert_eq!(alloc.inner().align, layout.align.abi);\n         let ty = self.type_ptr_to(layout.gcc_type(self, true));\n         let value =\n             if layout.size == Size::ZERO {\n-                let value = self.const_usize(alloc.align.bytes());\n+                let value = self.const_usize(alloc.inner().align.bytes());\n                 self.context.new_cast(None, value, ty)\n             }\n             else {\n                 let init = const_alloc_to_gcc(self, alloc);\n-                let base_addr = self.static_addr_of(init, alloc.align, None);\n+                let base_addr = self.static_addr_of(init, alloc.inner().align, None);\n \n                 let array = self.const_bitcast(base_addr, self.type_i8p());\n                 let value = self.context.new_array_access(None, array, self.const_usize(offset.bytes())).get_address(None);"}, {"sha": "de52f3ea2255e7092863403dd028d568b9900b18", "filename": "src/consts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::mir::interpret::{self, Allocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n+use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n use rustc_span::Span;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n@@ -293,7 +293,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     }\n }\n \n-pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: &Allocation) -> RValue<'gcc> {\n+pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAllocation<'tcx>) -> RValue<'gcc> {\n+    let alloc = alloc.inner();\n     let mut llvals = Vec::with_capacity(alloc.relocations().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n@@ -347,7 +348,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: &Alloca\n     cx.const_struct(&llvals, true)\n }\n \n-pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id: DefId) -> Result<(RValue<'gcc>, &'tcx Allocation), ErrorHandled> {\n+pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id: DefId) -> Result<(RValue<'gcc>, ConstAllocation<'tcx>), ErrorHandled> {\n     let alloc = cx.tcx.eval_static_initializer(def_id)?;\n     Ok((const_alloc_to_gcc(cx, alloc), alloc))\n }"}, {"sha": "5e5b9e7e9b1b7e85e64dcec0aee15ba37fc55a00", "filename": "src/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -89,12 +89,13 @@ pub struct CodegenCx<'gcc, 'tcx> {\n \n     /// Cache of emitted const globals (value -> global)\n     pub const_globals: RefCell<FxHashMap<RValue<'gcc>, RValue<'gcc>>>,\n+\n     /// Map from the address of a global variable (rvalue) to the global variable itself (lvalue).\n     /// TODO(antoyo): remove when the rustc API is fixed.\n     pub global_lvalues: RefCell<FxHashMap<RValue<'gcc>, LValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,\n@@ -219,7 +220,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             vtables: Default::default(),\n             const_globals: Default::default(),\n             global_lvalues: Default::default(),\n-            const_cstr_cache: Default::default(),\n+            const_str_cache: Default::default(),\n             globals: Default::default(),\n             scalar_types: Default::default(),\n             types: Default::default(),"}, {"sha": "266759ed6cfa16e9d5d853340009b13a890aebb1", "filename": "src/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'gcc, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n+    fn create_vtable_debuginfo(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n         // TODO(antoyo)\n     }\n "}, {"sha": "08e584a46f33b16dfebc212fe5c3c8ab02fec3fd", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -260,20 +260,20 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     use rustc_target::abi::Abi::*;\n                     let tp_ty = substs.type_at(0);\n                     let layout = self.layout_of(tp_ty).layout;\n-                    let _use_integer_compare = match layout.abi {\n+                    let _use_integer_compare = match layout.abi() {\n                         Scalar(_) | ScalarPair(_, _) => true,\n                         Uninhabited | Vector { .. } => false,\n                         Aggregate { .. } => {\n                             // For rusty ABIs, small aggregates are actually passed\n                             // as `RegKind::Integer` (see `FnAbi::adjust_for_abi`),\n                             // so we re-use that same threshold here.\n-                            layout.size <= self.data_layout().pointer_size * 2\n+                            layout.size() <= self.data_layout().pointer_size * 2\n                         }\n                     };\n \n                     let a = args[0].immediate();\n                     let b = args[1].immediate();\n-                    if layout.size.bytes() == 0 {\n+                    if layout.size().bytes() == 0 {\n                         self.const_bool(true)\n                     }\n                     /*else if use_integer_compare {\n@@ -289,7 +289,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                         let void_ptr_type = self.context.new_type::<*const ()>();\n                         let a_ptr = self.bitcast(a, void_ptr_type);\n                         let b_ptr = self.bitcast(b, void_ptr_type);\n-                        let n = self.context.new_cast(None, self.const_usize(layout.size.bytes()), self.sizet_type);\n+                        let n = self.context.new_cast(None, self.const_usize(layout.size().bytes()), self.sizet_type);\n                         let builtin = self.context.get_builtin_function(\"memcmp\");\n                         let cmp = self.context.new_call(None, builtin, &[a_ptr, b_ptr, n]);\n                         self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0))"}, {"sha": "eac4a06226cf8aaf6d7ace95fbf54f176c0fc2ae", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -60,10 +60,11 @@ use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModul\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_codegen_ssa::traits::{CodegenBackend, ExtraBackendMethods, ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorReported, Handler};\n+use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::query::Providers;\n use rustc_session::config::{Lto, OptLevel, OutputFilenames};\n use rustc_session::Session;\n use rustc_span::Symbol;\n@@ -101,14 +102,19 @@ impl CodegenBackend for GccCodegenBackend {\n         *self.supports_128bit_integers.lock().expect(\"lock\") = check_context.get_last_error() == Ok(None);\n     }\n \n+    fn provide(&self, providers: &mut Providers) {\n+        // FIXME(antoyo) compute list of enabled features from cli flags\n+        providers.global_backend_features = |_tcx, ()| vec![];\n+    }\n+\n     fn codegen_crate<'tcx>(&self, tcx: TyCtxt<'tcx>, metadata: EncodedMetadata, need_metadata_module: bool) -> Box<dyn Any> {\n         let target_cpu = target_cpu(tcx.sess);\n         let res = codegen_crate(self.clone(), tcx, target_cpu.to_string(), metadata, need_metadata_module);\n \n         Box::new(res)\n     }\n \n-    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<GccCodegenBackend>>()\n             .expect(\"Expected GccCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -117,7 +123,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Ok((codegen_results, work_products))\n     }\n \n-    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorReported> {\n+    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n@@ -147,7 +153,7 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         base::compile_codegen_unit(tcx, cgu_name, *self.supports_128bit_integers.lock().expect(\"lock\"))\n     }\n \n-    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel) -> TargetMachineFactoryFn<Self> {\n+    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel, _features: &[String]) -> TargetMachineFactoryFn<Self> {\n         // TODO(antoyo): set opt level.\n         Arc::new(|_| {\n             Ok(())"}, {"sha": "ed8f0445ca3e20d07dc67de469b089e6b7cab5a5", "filename": "src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -56,8 +56,8 @@ pub fn uncached_gcc_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLa\n             if let (&ty::Adt(def, _), &Variants::Single { index }) =\n                 (layout.ty.kind(), &layout.variants)\n             {\n-                if def.is_enum() && !def.variants.is_empty() {\n-                    write!(&mut name, \"::{}\", def.variants[index].name).unwrap();\n+                if def.is_enum() && !def.variants().is_empty() {\n+                    write!(&mut name, \"::{}\", def.variant(index).name).unwrap();\n                 }\n             }\n             if let (&ty::Generator(_, _, _), &Variants::Single { index }) ="}, {"sha": "1beeee136df3106401aed9afdbde9919c8238fd8", "filename": "test.sh", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -165,6 +165,24 @@ function test_rustc() {\n     git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n     export RUSTFLAGS=\n \n+    git apply - <<EOF\n+diff --git a/src/tools/compiletest/src/header.rs b/src/tools/compiletest/src/header.rs\n+index 887d27fd6dca4..2c2239f2b83d1 100644\n+--- a/src/tools/compiletest/src/header.rs\n++++ b/src/tools/compiletest/src/header.rs\n+@@ -806,8 +806,8 @@ pub fn make_test_description<R: Read>(\n+     cfg: Option<&str>,\n+ ) -> test::TestDesc {\n+     let mut ignore = false;\n+     #[cfg(not(bootstrap))]\n+-    let ignore_message: Option<String> = None;\n++    let ignore_message: Option<&str> = None;\n+     let mut should_fail = false;\n+\n+     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n+\n+EOF\n+\n     rm config.toml || true\n \n     cat > config.toml <<EOF"}, {"sha": "294add968449a4c6104e553cc99f5644442274e4", "filename": "tests/run/static.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39683d8eb7a32a74bea96ecbf1e87675d3338506/tests%2Frun%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39683d8eb7a32a74bea96ecbf1e87675d3338506/tests%2Frun%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fstatic.rs?ref=39683d8eb7a32a74bea96ecbf1e87675d3338506", "patch": "@@ -22,6 +22,12 @@\n #[lang = \"sized\"]\n pub trait Sized {}\n \n+#[lang = \"destruct\"]\n+pub trait Destruct {}\n+\n+#[lang = \"drop\"]\n+pub trait Drop {}\n+\n #[lang = \"copy\"]\n trait Copy {\n }"}]}