{"sha": "b39a43cd5c12808c615e4f65366a04687317daa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOWE0M2NkNWMxMjgwOGM2MTVlNGY2NTM2NmEwNDY4NzMxN2RhYTE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-02T18:03:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:50Z"}, "message": "adding uv_hl module and some doc work", "tree": {"sha": "7217bea7ee0e885af67e389ca8ed15bd24f48ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7217bea7ee0e885af67e389ca8ed15bd24f48ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b39a43cd5c12808c615e4f65366a04687317daa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b39a43cd5c12808c615e4f65366a04687317daa1", "html_url": "https://github.com/rust-lang/rust/commit/b39a43cd5c12808c615e4f65366a04687317daa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b39a43cd5c12808c615e4f65366a04687317daa1/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0fed469f70fffc7164539ba9e6e28bf84371a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0fed469f70fffc7164539ba9e6e28bf84371a3", "html_url": "https://github.com/rust-lang/rust/commit/7c0fed469f70fffc7164539ba9e6e28bf84371a3"}], "stats": {"total": 158, "additions": 141, "deletions": 17}, "files": [{"sha": "b2486b41cdcfb955511d1d5c94c963552e530f8b", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=b39a43cd5c12808c615e4f65366a04687317daa1", "patch": "@@ -27,6 +27,7 @@ mod net;\n // libuv modules\n mod uv;\n mod uv_ll;\n+mod uv_hl;\n \n \n // Utility modules"}, {"sha": "5099ef074910376ecb9113d8e4abae523e33cb8a", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=b39a43cd5c12808c615e4f65366a04687317daa1", "patch": "@@ -1,23 +1,26 @@\n #[doc = \"\n Rust bindings to libuv\n \n-This crate provides a low-level mapping to libuv, a library for\n-running an asynchronous event loop, with extensive IO operations.\n-\n-This crate is seeing heavy work, currently, and the final API layout\n-should not be inferred from its current form.\n-\n-The base module contains a set of safe functions for creating\n-an event loop that runs within a single task, but allows operations\n-against it from other tasks, but funneling it through a uv_async\n-request which reads from a port that users write to. This API should\n-not be considered stable and may go away in the near future.\n-\n-The 'll' module contains low-level, bare-metal mappings to the libuv\n-C-api. All functions within this module are marked unsafe and should\n-be used, primarily, for composing rust-idiomatic abstractions. In\n-lieu of satisfactory documention for the 'll' module, itself, libuv's\n-uv.h should be consulted.\n+This is the base-module for various levels of bindings to\n+the libuv library.\n+\n+These modules are seeing heavy work, currently, and the final\n+API layout should not be inferred from its current form.\n+\n+This base module currently contains a historical, rust-based\n+implementation of a few libuv operations that hews closely to\n+the patterns of the libuv C-API. It was used, mostly, to explore\n+some implementation details and will most likely be deprecated\n+in the near future.\n+\n+The `ll` module contains low-level mappings for working directly\n+with the libuv C-API.\n+\n+The `hl` module contains a set of tools library developers can\n+use for interacting with an active libuv loop. This modules's\n+API is meant to be used to write high-level,\n+rust-idiomatic abstractions for utilizes libuv's asynchronous IO\n+facilities.\n \"];\n \n import map::hashmap;\n@@ -28,6 +31,9 @@ export timer_init, timer_start, timer_stop;\n import ll = uv_ll;\n export ll;\n \n+import hl = uv_hl;\n+export hl;\n+\n #[nolink]\n native mod rustrt {\n     fn rust_uv_loop_new() -> *libc::c_void;"}, {"sha": "753af6f090b01aed25ea347fb7ed44cf980995e0", "filename": "src/libstd/uv_hl.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=b39a43cd5c12808c615e4f65366a04687317daa1", "patch": "@@ -0,0 +1,95 @@\n+#[doc = \"\n+High-level bindings to work with the libuv library.\n+\n+This module is geared towards library developers who want to\n+provide a high-level, abstracted interface to some set of\n+libuv functionality.\n+\"];\n+\n+import ll = uv_ll;\n+\n+export high_level_loop;\n+export interact, prepare_loop;\n+\n+#[doc = \"\n+Used to abstract-away direct interaction with a libuv loop.\n+\n+# Fields\n+\n+* async_handle - a pointer to a uv_async_t struct used to 'poke'\n+the C uv loop to process any pending callbacks\n+\n+* op_chan - a channel used to send function callbacks to be processed\n+by the C uv loop\n+\"]\n+type high_level_loop = {\n+    async_handle: *ll::uv_async_t,\n+    op_chan: comm::chan<fn~(*libc::c_void)>\n+};\n+\n+#[doc = \"\n+Pass in a callback to be processed on the running libuv loop's thread\n+\n+# Fields\n+\n+* a_loop - a high_level_loop record that represents a channel of\n+communication with an active libuv loop running on a thread\n+somwhere in the current process\n+\n+* cb - a function callback to be processed on the running loop's\n+thread. The only parameter is an opaque pointer to the running\n+uv_loop_t. You can use this pointer to initiate or continue any\n+operations against the loop\n+\"]\n+unsafe fn interact(a_loop: high_level_loop,\n+                      -cb: fn~(*libc::c_void)) {\n+    comm::send(a_loop.op_chan, cb);\n+    ll::async_send(a_loop.async_handle);\n+}\n+\n+#[doc = \"\n+Prepares a clean, inactive uv_loop_t* to be used with any of the\n+functions in the `uv::hl` module.\n+\n+Library developers can use this function to prepare a given\n+`uv_loop_t*`, whose lifecycle they manage, to be used, ran\n+and controlled with the tools in this module.\n+\n+After this is ran against a loop, a library developer can run\n+the loop in its own thread and then use the returned\n+`high_level_loop` to interact with it.\n+\n+# Fields\n+\n+* loop_ptr - a pointer to a newly created `uv_loop_t*` with no\n+handles registered (this will interfere with the internal lifecycle\n+management this module provides). Ideally, this should be called\n+immediately after using `uv::ll::loop_new()`\n+\n+# Returns\n+\n+A `high_level_loop` record that can be used to interact with the\n+loop (after you use `uv::ll::run()` on the `uv_loop_t*`, of course\n+\"]\n+unsafe fn prepare_loop(loop_ptr: *libc::c_void)\n+    -> high_level_loop {\n+    // will probably need to stake out a data record\n+    // here, as well, to keep whatever state we want to\n+    // use with the loop\n+    \n+    // move this into a malloc\n+    let async = ll::async_t();\n+    let async_ptr = ptr::addr_of(async);\n+    let async_result = ll::async_init(loop_ptr,\n+                                      async_ptr,\n+                                      interact_ptr);\n+    if (async_result != 0i32) {\n+        fail ll::get_last_err_info(loop_ptr);\n+    }\n+}\n+\n+// this will be invoked by a called to uv::hl::interact(), so\n+// we'll drain the port of pending callbacks, processing each\n+crust fn interact_poke(async_handle: *libc::c_void) {\n+    // nothing here, yet.\n+}\n\\ No newline at end of file"}, {"sha": "a3e934e1ee8efbbe6eb46326de757bdcf5a1f52d", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39a43cd5c12808c615e4f65366a04687317daa1/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=b39a43cd5c12808c615e4f65366a04687317daa1", "patch": "@@ -1,3 +1,25 @@\n+#[doc = \"\n+Low-level bindings to the libuv library.\n+\n+This module contains a set of direct, 'bare-metal' wrappers around\n+the libuv C-API.\n+\n+Also contained herein are a set of rust records that map, in\n+approximate memory-size, to the libuv data structures. The record\n+implementations are adjusted, per-platform, to match their respective\n+representations.\n+\n+There are also a collection of helper functions to ease interacting\n+with the low-level API (such as a function to return the latest\n+libuv error as a rust-formatted string).\n+\n+As new functionality, existant in uv.h, is added to the rust stdlib,\n+the mappings should be added in this module.\n+\n+This module's implementation will hopefully be, eventually, replaced\n+with per-platform, generated source files from rust-bindgen.\n+\"];\n+\n // libuv struct mappings\n type uv_ip4_addr = {\n     ip: [u8],"}]}