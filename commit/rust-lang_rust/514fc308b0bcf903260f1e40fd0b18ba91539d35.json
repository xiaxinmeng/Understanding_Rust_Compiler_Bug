{"sha": "514fc308b0bcf903260f1e40fd0b18ba91539d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNGZjMzA4YjBiY2Y5MDMyNjBmMWU0MGZkMGIxOGJhOTE1MzlkMzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-14T08:13:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:50Z"}, "message": "std: Remove run_in_bare_thread", "tree": {"sha": "af1538aa2301ba968f5f8688101b3e60f53596e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1538aa2301ba968f5f8688101b3e60f53596e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514fc308b0bcf903260f1e40fd0b18ba91539d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514fc308b0bcf903260f1e40fd0b18ba91539d35", "html_url": "https://github.com/rust-lang/rust/commit/514fc308b0bcf903260f1e40fd0b18ba91539d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514fc308b0bcf903260f1e40fd0b18ba91539d35/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05af1f6a83ad6eacc02493f71fb4116b120837e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05af1f6a83ad6eacc02493f71fb4116b120837e", "html_url": "https://github.com/rust-lang/rust/commit/b05af1f6a83ad6eacc02493f71fb4116b120837e"}], "stats": {"total": 77, "additions": 23, "deletions": 54}, "files": [{"sha": "5bc96dd6e8ee175ba7b56e92507ed02fe5e291de", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=514fc308b0bcf903260f1e40fd0b18ba91539d35", "patch": "@@ -1137,11 +1137,11 @@ mod test {\n     fn test_schedule_home_states() {\n         use sleeper_list::SleeperList;\n         use super::{Shutdown, Scheduler, SchedHandle};\n-        use std::unstable::run_in_bare_thread;\n+        use std::unstable::Thread;\n         use std::rt::thread::Thread;\n         use std::sync::deque::BufferPool;\n \n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let sleepers = SleeperList::new();\n             let mut pool = BufferPool::new();\n             let (normal_worker, normal_stealer) = pool.deque();\n@@ -1260,7 +1260,7 @@ mod test {\n \n             normal_thread.join();\n             special_thread.join();\n-        });\n+        }).join();\n     }\n \n     //#[test]"}, {"sha": "96b66f616f6e78c4f48cba1947dde34d496993c3", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=514fc308b0bcf903260f1e40fd0b18ba91539d35", "patch": "@@ -472,7 +472,7 @@ fn local_loop() -> &'static mut uvio::UvIoFactory {\n #[cfg(test)]\n mod test {\n     use std::mem::transmute;\n-    use std::unstable::run_in_bare_thread;\n+    use std::rt::Thread;\n \n     use super::{slice_to_uv_buf, Loop};\n \n@@ -496,10 +496,10 @@ mod test {\n \n     #[test]\n     fn loop_smoke_test() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let mut loop_ = Loop::new();\n             loop_.run();\n             loop_.close();\n-        });\n+        }).join();\n     }\n }"}, {"sha": "88e05f815b27eaa65116bbaa2cda0847dc37b5d4", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=514fc308b0bcf903260f1e40fd0b18ba91539d35", "patch": "@@ -27,7 +27,7 @@ use std::rt::rtio;\n use std::rt::rtio::{ProcessConfig, IoFactory, EventLoop};\n use ai = std::io::net::addrinfo;\n \n-#[cfg(test)] use std::unstable::run_in_bare_thread;\n+#[cfg(test)] use std::rt::Thread;\n \n use super::{uv_error_to_io_error, Loop};\n \n@@ -116,7 +116,7 @@ impl EventLoop for UvEventLoop {\n \n #[test]\n fn test_callback_run_once() {\n-    run_in_bare_thread(proc() {\n+    Thread::start(proc() {\n         let mut event_loop = UvEventLoop::new();\n         let mut count = 0;\n         let count_ptr: *mut int = &mut count;\n@@ -125,7 +125,7 @@ fn test_callback_run_once() {\n         });\n         event_loop.run();\n         assert_eq!(count, 1);\n-    });\n+    }).join();\n }\n \n pub struct UvIoFactory {"}, {"sha": "9f0ed8044800cbbfec32f75954eb5ba9ae779347", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=514fc308b0bcf903260f1e40fd0b18ba91539d35", "patch": "@@ -53,24 +53,24 @@ impl Local<local_ptr::Borrowed<Task>> for Task {\n #[cfg(test)]\n mod test {\n     use option::{None, Option};\n-    use unstable::run_in_bare_thread;\n+    use rt::thread::Thread;\n     use super::*;\n     use owned::Box;\n     use rt::task::Task;\n \n     #[test]\n     fn thread_local_task_smoke_test() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn thread_local_task_two_instances() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n@@ -79,12 +79,12 @@ mod test {\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn borrow_smoke_test() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n \n@@ -93,12 +93,12 @@ mod test {\n             }\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn borrow_with_return() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n \n@@ -108,12 +108,12 @@ mod test {\n \n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-        });\n+        }).join();\n     }\n \n     #[test]\n     fn try_take() {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let task = box Task::new();\n             Local::put(task);\n \n@@ -122,7 +122,7 @@ mod test {\n             assert!(u.is_none());\n \n             cleanup_task(t);\n-        });\n+        }).join();\n     }\n \n     fn cleanup_task(mut t: Box<Task>) {"}, {"sha": "f464f70772d9412e6616f21c4f3b9bf70931f9d4", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=514fc308b0bcf903260f1e40fd0b18ba91539d35", "patch": "@@ -11,7 +11,6 @@\n #![doc(hidden)]\n \n use libc::uintptr_t;\n-use kinds::Send;\n \n pub use core::finally;\n \n@@ -21,36 +20,6 @@ pub mod simd;\n pub mod sync;\n pub mod mutex;\n \n-/**\n-\n-Start a new thread outside of the current runtime context and wait\n-for it to terminate.\n-\n-The executing thread has no access to a task pointer and will be using\n-a normal large stack.\n-*/\n-pub fn run_in_bare_thread(f: proc():Send) {\n-    use rt::thread::Thread;\n-    Thread::start(f).join()\n-}\n-\n-#[test]\n-fn test_run_in_bare_thread() {\n-    let i = 100;\n-    run_in_bare_thread(proc() {\n-        assert_eq!(i, 100);\n-    });\n-}\n-\n-#[test]\n-fn test_run_in_bare_thread_exchange() {\n-    // Does the exchange heap work without the runtime?\n-    let i = box 100;\n-    run_in_bare_thread(proc() {\n-        assert!(i == box 100);\n-    });\n-}\n-\n /// Dynamically inquire about whether we're running under V.\n /// You should usually not use this unless your test definitely\n /// can't run correctly un-altered. Valgrind is there to help"}, {"sha": "989c09146b7d5c54fae100ea06ae3c80d37413af", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514fc308b0bcf903260f1e40fd0b18ba91539d35/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=514fc308b0bcf903260f1e40fd0b18ba91539d35", "patch": "@@ -11,7 +11,7 @@\n extern crate libc;\n \n use std::mem;\n-use std::unstable::run_in_bare_thread;\n+use std::rt::thread::Thread;\n \n #[link(name = \"rustrt\")]\n extern {\n@@ -21,10 +21,10 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        run_in_bare_thread(proc() {\n+        Thread::start(proc() {\n             let i = &100;\n             rust_dbg_call(callback, mem::transmute(i));\n-        });\n+        }).join();\n     }\n }\n "}]}