{"sha": "9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMWFhZWI3Yjk3ZTM0YjY2ODhmMzFjNjkyMWQ2MzZkMjdjMDJlNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-22T19:13:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-22T19:13:39Z"}, "message": "Auto merge of #28543 - gandro:netbsd, r=alexcrichton\n\nThese changes introduce the ability to cross-compile working binaries for NetBSD/amd64. Previous support added in PR #26682 shared all its code with the OpenBSD implementation, and was therefore never functional (e.g. linking against non-existing symbols and using wrong type definitions). Nonetheless, the previous patches were a great starting point and made my work significantly easier. :smiley: \r\n\r\nBecause there are no stage0 snapshots for NetBSD (yet), I used a cross-compiler for NetBSD 7.0 RC3 and only tested some toy programs (threading and channels, stack guards, a small TCP/IP echo server and some other platform dependent bits). If someone could point me to documentation on how to generate a stage0 snapshot from a cross-compiler I'm happy to run the full test suite.\r\n\r\nA few other notes regarding Rust on NetBSD/amd64:\r\n- To preserve binary compatibility, NetBSD introduces new symbols for system call wrappers on breaking ABI changes and keeps the old (legacy) symbols around, see [this documentation](https://www.netbsd.org/docs/internals/en/chap-processes.html#syscalls_master) for some details. I went ahead and modified the `libc` and `std` crate to use the current (renamed) symbols instead of the legacy ones where I found them, but I might have missed some. Notably using the `sigaction` symbol (deprecated in 1998) instead of `__sigaction14` even triggers SIGSYS (bad syscall) on my amd64 setup. I also changed the type definitions to use the most recent version.\r\n- NetBSD's gdb doesn't really support position independent executables, so you might want to turn that off for debugging, see [NetBSD Problem Report #48250](https://gnats.netbsd.org/48250).\r\n- For binaries invoked using a relative path, NetBSD supports `$ORIGIN` only for short `rpath`s (~64 chars or so, I'm told). If running an executable fails with `execname not specified in AUX vector: No such file or directory`, consider invoking the binary using its full absolute path.", "tree": {"sha": "7382bd6e81a8c1076404039d1665c75e1cb92330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7382bd6e81a8c1076404039d1665c75e1cb92330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "html_url": "https://github.com/rust-lang/rust/commit/9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6f6f26f4d4a1e22ea5e2b4498d3245d80e8aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6f6f26f4d4a1e22ea5e2b4498d3245d80e8aff", "html_url": "https://github.com/rust-lang/rust/commit/2a6f6f26f4d4a1e22ea5e2b4498d3245d80e8aff"}, {"sha": "428bb164f33951e561a1eed8e636077ad6ce2506", "url": "https://api.github.com/repos/rust-lang/rust/commits/428bb164f33951e561a1eed8e636077ad6ce2506", "html_url": "https://github.com/rust-lang/rust/commit/428bb164f33951e561a1eed8e636077ad6ce2506"}], "stats": {"total": 671, "additions": 603, "deletions": 68}, "files": [{"sha": "a77c5fa542eb187535d205e2132082ccbcb46e66", "filename": "mk/cfg/x86_64-unknown-netbsd.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -1,4 +1,5 @@\n # x86_64-unknown-netbsd configuration\n+CROSS_PREFIX_x86_64-unknown-netbsd=x86_64-unknown-netbsd-\n CC_x86_64-unknown-netbsd=$(CC)\n CXX_x86_64-unknown-netbsd=$(CXX)\n CPP_x86_64-unknown-netbsd=$(CPP)"}, {"sha": "fc6bd6c016719ea1401004ecf7bb5a040e90e9a8", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 488, "deletions": 50, "changes": 538, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -1450,7 +1450,23 @@ pub mod types {\n                     pub __unused7: *mut c_void,\n                 }\n \n-                #[cfg(any(target_os = \"netbsd\", target_os=\"openbsd\"))]\n+                #[cfg(target_os = \"netbsd\")]\n+                #[repr(C)]\n+                #[derive(Copy, Clone)] pub struct glob_t {\n+                    pub gl_pathc:  size_t,\n+                    pub gl_matchc: size_t,\n+                    pub gl_offs:   size_t,\n+                    pub gl_flags:  c_int,\n+                    pub gl_pathv:  *mut *mut c_char,\n+                    pub __unused1: *mut c_void,\n+                    pub __unused2: *mut c_void,\n+                    pub __unused3: *mut c_void,\n+                    pub __unused4: *mut c_void,\n+                    pub __unused5: *mut c_void,\n+                    pub __unused6: *mut c_void,\n+                }\n+\n+                #[cfg(target_os = \"openbsd\")]\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  c_int,\n@@ -1578,6 +1594,7 @@ pub mod types {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+                #[cfg(not(target_os = \"netbsd\"))]\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n@@ -1589,6 +1606,18 @@ pub mod types {\n                     pub ai_canonname: *mut c_char,\n                     pub ai_next: *mut addrinfo,\n                 }\n+                #[cfg(target_os = \"netbsd\")]\n+                #[repr(C)]\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_canonname: *mut c_char,\n+                    pub ai_addr: *mut sockaddr,\n+                    pub ai_next: *mut addrinfo,\n+                }\n                 #[repr(C)]\n                 #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n@@ -1654,7 +1683,7 @@ pub mod types {\n             pub mod posix01 {\n                 use types::common::c95::{c_void};\n                 use types::common::c99::{uint32_t, uint64_t};\n-                use types::os::arch::c95::{c_long, time_t};\n+                use types::os::arch::c95::{c_int, c_uint, c_long, time_t};\n                 use types::os::arch::posix88::{dev_t, gid_t};\n                 use types::os::arch::posix88::{mode_t, off_t};\n                 use types::os::arch::posix88::{uid_t};\n@@ -1665,6 +1694,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32; // type not declared, but struct stat have u_int32_t\n \n+                #[cfg(not(target_os = \"netbsd\"))]\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct stat {\n                     pub st_mode: mode_t,\n@@ -1688,13 +1718,47 @@ pub mod types {\n                     pub st_birthtime: time_t,\n                     pub st_birthtime_nsec: c_long,\n                 }\n+                #[cfg(target_os = \"netbsd\")]\n+                #[repr(C)]\n+                #[derive(Copy, Clone)] pub struct stat {\n+                    pub st_mode: mode_t,\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: fflags_t,\n+                    pub st_gen: uint32_t,\n+                    st_spare: [uint32_t; 2],\n+                }\n+\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[cfg(not(target_os = \"netbsd\"))]\n                 pub type pthread_attr_t = *mut c_void;\n+                #[cfg(target_os = \"netbsd\")]\n+                #[repr(C)]\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n+                    pta_magic: c_uint,\n+                    pta_flags: c_int,\n+                    pta_private: *mut c_void,\n+                }\n             }\n             pub mod posix08 {\n             }\n@@ -4450,7 +4514,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\"))]\n+    #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -4737,18 +4801,11 @@ pub mod consts {\n             pub const RUSAGE_CHILDREN: c_int = -1;\n             pub const RUSAGE_THREAD: c_int = 1;\n         }\n-        #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n         pub mod posix08 {\n             use types::os::arch::c95::c_int;\n             pub const O_CLOEXEC: c_int = 0x10000;\n             pub const F_DUPFD_CLOEXEC: c_int = 10;\n         }\n-        #[cfg(target_os = \"netbsd\")]\n-        pub mod posix08 {\n-            use types::os::arch::c95::c_int;\n-            pub const O_CLOEXEC: c_int = 0x400000;\n-            pub const F_DUPFD_CLOEXEC: c_int = 12;\n-        }\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -4889,6 +4946,410 @@ pub mod consts {\n         }\n     }\n \n+    #[cfg(target_os = \"netbsd\")]\n+    pub mod os {\n+        pub mod c95 {\n+            use types::os::arch::c95::{c_int, c_uint};\n+\n+            pub const EXIT_FAILURE : c_int = 1;\n+            pub const EXIT_SUCCESS : c_int = 0;\n+            pub const RAND_MAX : c_int = 2147483647;\n+            pub const EOF : c_int = -1;\n+            pub const SEEK_SET : c_int = 0;\n+            pub const SEEK_CUR : c_int = 1;\n+            pub const SEEK_END : c_int = 2;\n+            pub const _IOFBF : c_int = 0;\n+            pub const _IONBF : c_int = 2;\n+            pub const _IOLBF : c_int = 1;\n+            pub const BUFSIZ : c_uint = 1024;\n+            pub const FOPEN_MAX : c_uint = 20;\n+            pub const FILENAME_MAX : c_uint = 1024;\n+            pub const L_tmpnam : c_uint = 1024;\n+            pub const TMP_MAX : c_uint = 308915776;\n+        }\n+        pub mod c99 {\n+        }\n+        pub mod posix88 {\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::c_int;\n+            use types::os::arch::posix88::mode_t;\n+\n+            pub const O_RDONLY : c_int = 0;\n+            pub const O_WRONLY : c_int = 1;\n+            pub const O_RDWR : c_int = 2;\n+            pub const O_APPEND : c_int = 8;\n+            pub const O_CREAT : c_int = 512;\n+            pub const O_EXCL : c_int = 2048;\n+            pub const O_NOCTTY : c_int = 32768;\n+            pub const O_TRUNC : c_int = 1024;\n+            pub const S_IFIFO : mode_t = 4096;\n+            pub const S_IFCHR : mode_t = 8192;\n+            pub const S_IFBLK : mode_t = 24576;\n+            pub const S_IFDIR : mode_t = 16384;\n+            pub const S_IFREG : mode_t = 32768;\n+            pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n+            pub const S_IFMT : mode_t = 61440;\n+            pub const S_IEXEC : mode_t = 64;\n+            pub const S_IWRITE : mode_t = 128;\n+            pub const S_IREAD : mode_t = 256;\n+            pub const S_IRWXU : mode_t = 448;\n+            pub const S_IXUSR : mode_t = 64;\n+            pub const S_IWUSR : mode_t = 128;\n+            pub const S_IRUSR : mode_t = 256;\n+            pub const S_IRWXG : mode_t = 56;\n+            pub const S_IXGRP : mode_t = 8;\n+            pub const S_IWGRP : mode_t = 16;\n+            pub const S_IRGRP : mode_t = 32;\n+            pub const S_IRWXO : mode_t = 7;\n+            pub const S_IXOTH : mode_t = 1;\n+            pub const S_IWOTH : mode_t = 2;\n+            pub const S_IROTH : mode_t = 4;\n+            pub const F_OK : c_int = 0;\n+            pub const R_OK : c_int = 4;\n+            pub const W_OK : c_int = 2;\n+            pub const X_OK : c_int = 1;\n+            pub const STDIN_FILENO : c_int = 0;\n+            pub const STDOUT_FILENO : c_int = 1;\n+            pub const STDERR_FILENO : c_int = 2;\n+            pub const F_LOCK : c_int = 1;\n+            pub const F_TEST : c_int = 3;\n+            pub const F_TLOCK : c_int = 2;\n+            pub const F_ULOCK : c_int = 0;\n+            pub const SIGHUP : c_int = 1;\n+            pub const SIGINT : c_int = 2;\n+            pub const SIGQUIT : c_int = 3;\n+            pub const SIGILL : c_int = 4;\n+            pub const SIGABRT : c_int = 6;\n+            pub const SIGFPE : c_int = 8;\n+            pub const SIGKILL : c_int = 9;\n+            pub const SIGSEGV : c_int = 11;\n+            pub const SIGPIPE : c_int = 13;\n+            pub const SIGALRM : c_int = 14;\n+            pub const SIGTERM : c_int = 15;\n+\n+            pub const PROT_NONE : c_int = 0;\n+            pub const PROT_READ : c_int = 1;\n+            pub const PROT_WRITE : c_int = 2;\n+            pub const PROT_EXEC : c_int = 4;\n+\n+            pub const MAP_FILE : c_int = 0;\n+            pub const MAP_SHARED : c_int = 1;\n+            pub const MAP_PRIVATE : c_int = 2;\n+            pub const MAP_FIXED : c_int = 16;\n+            pub const MAP_ANON : c_int = 4096;\n+\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n+\n+            pub const MCL_CURRENT : c_int = 1;\n+            pub const MCL_FUTURE : c_int = 2;\n+\n+            pub const MS_ASYNC : c_int = 1;\n+            pub const MS_SYNC : c_int = 4;\n+            pub const MS_INVALIDATE : c_int = 2;\n+\n+            pub const EPERM : c_int = 1;\n+            pub const ENOENT : c_int = 2;\n+            pub const ESRCH : c_int = 3;\n+            pub const EINTR : c_int = 4;\n+            pub const EIO : c_int = 5;\n+            pub const ENXIO : c_int = 6;\n+            pub const E2BIG : c_int = 7;\n+            pub const ENOEXEC : c_int = 8;\n+            pub const EBADF : c_int = 9;\n+            pub const ECHILD : c_int = 10;\n+            pub const EDEADLK : c_int = 11;\n+            pub const ENOMEM : c_int = 12;\n+            pub const EACCES : c_int = 13;\n+            pub const EFAULT : c_int = 14;\n+            pub const ENOTBLK : c_int = 15;\n+            pub const EBUSY : c_int = 16;\n+            pub const EEXIST : c_int = 17;\n+            pub const EXDEV : c_int = 18;\n+            pub const ENODEV : c_int = 19;\n+            pub const ENOTDIR : c_int = 20;\n+            pub const EISDIR : c_int = 21;\n+            pub const EINVAL : c_int = 22;\n+            pub const ENFILE : c_int = 23;\n+            pub const EMFILE : c_int = 24;\n+            pub const ENOTTY : c_int = 25;\n+            pub const ETXTBSY : c_int = 26;\n+            pub const EFBIG : c_int = 27;\n+            pub const ENOSPC : c_int = 28;\n+            pub const ESPIPE : c_int = 29;\n+            pub const EROFS : c_int = 30;\n+            pub const EMLINK : c_int = 31;\n+            pub const EPIPE : c_int = 32;\n+            pub const EDOM : c_int = 33;\n+            pub const ERANGE : c_int = 34;\n+            pub const EAGAIN : c_int = 35;\n+            pub const EWOULDBLOCK : c_int = 35;\n+            pub const EINPROGRESS : c_int = 36;\n+            pub const EALREADY : c_int = 37;\n+            pub const ENOTSOCK : c_int = 38;\n+            pub const EDESTADDRREQ : c_int = 39;\n+            pub const EMSGSIZE : c_int = 40;\n+            pub const EPROTOTYPE : c_int = 41;\n+            pub const ENOPROTOOPT : c_int = 42;\n+            pub const EPROTONOSUPPORT : c_int = 43;\n+            pub const ESOCKTNOSUPPORT : c_int = 44;\n+            pub const EOPNOTSUPP : c_int = 45;\n+            pub const EPFNOSUPPORT : c_int = 46;\n+            pub const EAFNOSUPPORT : c_int = 47;\n+            pub const EADDRINUSE : c_int = 48;\n+            pub const EADDRNOTAVAIL : c_int = 49;\n+            pub const ENETDOWN : c_int = 50;\n+            pub const ENETUNREACH : c_int = 51;\n+            pub const ENETRESET : c_int = 52;\n+            pub const ECONNABORTED : c_int = 53;\n+            pub const ECONNRESET : c_int = 54;\n+            pub const ENOBUFS : c_int = 55;\n+            pub const EISCONN : c_int = 56;\n+            pub const ENOTCONN : c_int = 57;\n+            pub const ESHUTDOWN : c_int = 58;\n+            pub const ETOOMANYREFS : c_int = 59;\n+            pub const ETIMEDOUT : c_int = 60;\n+            pub const ECONNREFUSED : c_int = 61;\n+            pub const ELOOP : c_int = 62;\n+            pub const ENAMETOOLONG : c_int = 63;\n+            pub const EHOSTDOWN : c_int = 64;\n+            pub const EHOSTUNREACH : c_int = 65;\n+            pub const ENOTEMPTY : c_int = 66;\n+            pub const EPROCLIM : c_int = 67;\n+            pub const EUSERS : c_int = 68;\n+            pub const EDQUOT : c_int = 69;\n+            pub const ESTALE : c_int = 70;\n+            pub const EREMOTE : c_int = 71;\n+            pub const EBADRPC : c_int = 72;\n+            pub const ERPCMISMATCH : c_int = 73;\n+            pub const EPROGUNAVAIL : c_int = 74;\n+            pub const EPROGMISMATCH : c_int = 75;\n+            pub const EPROCUNAVAIL : c_int = 76;\n+            pub const ENOLCK : c_int = 77;\n+            pub const ENOSYS : c_int = 78;\n+            pub const EFTYPE : c_int = 79;\n+            pub const EAUTH : c_int = 80;\n+            pub const ENEEDAUTH : c_int = 81;\n+            pub const ENOATTR : c_int = 93;\n+            pub const EILSEQ : c_int = 85;\n+            pub const EOVERFLOW : c_int = 84;\n+            pub const ECANCELED : c_int = 87;\n+            pub const EIDRM : c_int = 82;\n+            pub const ENOMSG : c_int = 83;\n+            pub const ENOTSUP : c_int = 86;\n+            pub const ELAST : c_int = 96;\n+        }\n+        pub mod posix01 {\n+            use types::os::arch::c95::{c_int, size_t};\n+            use types::os::common::posix01::rlim_t;\n+\n+            pub const F_DUPFD : c_int = 0;\n+            pub const F_GETFD : c_int = 1;\n+            pub const F_SETFD : c_int = 2;\n+            pub const F_GETFL : c_int = 3;\n+            pub const F_SETFL : c_int = 4;\n+            pub const F_GETOWN : c_int = 5;\n+            pub const F_SETOWN : c_int = 6;\n+            pub const F_GETLK : c_int = 7;\n+            pub const F_SETLK : c_int = 8;\n+            pub const F_SETLKW : c_int = 9;\n+\n+            pub const SIGTRAP : c_int = 5;\n+            pub const SIG_IGN : size_t = 1;\n+\n+            pub const GLOB_APPEND : c_int = 1;\n+            pub const GLOB_DOOFFS : c_int = 2;\n+            pub const GLOB_ERR : c_int = 4;\n+            pub const GLOB_MARK : c_int = 8;\n+            pub const GLOB_NOCHECK : c_int = 16;\n+            pub const GLOB_NOSORT : c_int = 32;\n+            pub const GLOB_NOESCAPE : c_int = 4096;\n+\n+            pub const GLOB_NOSPACE : c_int = -1;\n+            pub const GLOB_ABORTED : c_int = -2;\n+            pub const GLOB_NOMATCH : c_int = -3;\n+            pub const GLOB_NOSYS : c_int = -4;\n+\n+            pub const POSIX_MADV_NORMAL : c_int = 0;\n+            pub const POSIX_MADV_RANDOM : c_int = 1;\n+            pub const POSIX_MADV_SEQUENTIAL : c_int = 2;\n+            pub const POSIX_MADV_WILLNEED : c_int = 3;\n+            pub const POSIX_MADV_DONTNEED : c_int = 4;\n+\n+            pub const _SC_IOV_MAX : c_int = 32;\n+            pub const _SC_GETGR_R_SIZE_MAX : c_int = 47;\n+            pub const _SC_GETPW_R_SIZE_MAX : c_int = 48;\n+            pub const _SC_LOGIN_NAME_MAX : c_int = 37;\n+            pub const _SC_MQ_PRIO_MAX : c_int = 55;\n+            pub const _SC_THREAD_ATTR_STACKADDR : c_int = 61;\n+            pub const _SC_THREAD_ATTR_STACKSIZE : c_int = 62;\n+            pub const _SC_THREAD_DESTRUCTOR_ITERATIONS : c_int = 57;\n+            pub const _SC_THREAD_KEYS_MAX : c_int = 58;\n+            pub const _SC_THREAD_PRIO_INHERIT : c_int = 64;\n+            pub const _SC_THREAD_PRIO_PROTECT : c_int = 65;\n+            pub const _SC_THREAD_PRIORITY_SCHEDULING : c_int = 63;\n+            pub const _SC_THREAD_PROCESS_SHARED : c_int = 66;\n+            pub const _SC_THREAD_SAFE_FUNCTIONS : c_int = 67;\n+            pub const _SC_THREAD_STACK_MIN : c_int = 59;\n+            pub const _SC_THREAD_THREADS_MAX : c_int = 60;\n+            pub const _SC_THREADS : c_int = 41;\n+            pub const _SC_TTY_NAME_MAX : c_int = 68;\n+            pub const _SC_ATEXIT_MAX : c_int = 40;\n+            pub const _SC_XOPEN_SHM : c_int = 30;\n+\n+            pub const PTHREAD_CREATE_JOINABLE : c_int = 0;\n+            pub const PTHREAD_CREATE_DETACHED : c_int = 1;\n+            pub const PTHREAD_STACK_MIN : size_t = 2048;\n+\n+            pub const CLOCK_REALTIME : c_int = 0;\n+            pub const CLOCK_MONOTONIC : c_int = 3;\n+\n+            pub const RLIMIT_CPU : c_int = 0;\n+            pub const RLIMIT_FSIZE : c_int = 1;\n+            pub const RLIMIT_DATA : c_int = 2;\n+            pub const RLIMIT_STACK : c_int = 3;\n+            pub const RLIMIT_CORE : c_int = 4;\n+            pub const RLIMIT_RSS : c_int = 5;\n+            pub const RLIMIT_MEMLOCK : c_int = 6;\n+            pub const RLIMIT_NPROC : c_int = 7;\n+            pub const RLIMIT_NOFILE : c_int = 8;\n+            pub const RLIM_NLIMITS : c_int = 9;\n+\n+            pub const RLIM_INFINITY : rlim_t = 0x7fff_ffff_ffff_ffff;\n+            pub const RLIM_SAVED_MAX : rlim_t = RLIM_INFINITY;\n+            pub const RLIM_SAVED_CUR : rlim_t = RLIM_INFINITY;\n+\n+            pub const RUSAGE_SELF : c_int = 0;\n+            pub const RUSAGE_CHILDREN : c_int = -1;\n+            pub const RUSAGE_THREAD : c_int = 1;\n+        }\n+        pub mod posix08 {\n+            use types::os::arch::c95::c_int;\n+            pub const O_CLOEXEC: c_int = 0x400000;\n+            pub const F_DUPFD_CLOEXEC: c_int = 12;\n+        }\n+        pub mod bsd44 {\n+            use types::os::arch::c95::c_int;\n+\n+            pub const MADV_NORMAL : c_int = 0;\n+            pub const MADV_RANDOM : c_int = 1;\n+            pub const MADV_SEQUENTIAL : c_int = 2;\n+            pub const MADV_WILLNEED : c_int = 3;\n+            pub const MADV_DONTNEED : c_int = 4;\n+            pub const MADV_FREE : c_int = 6;\n+\n+            pub const AF_UNIX : c_int = 1;\n+            pub const AF_INET : c_int = 2;\n+            pub const AF_INET6 : c_int = 24;\n+            pub const SOCK_STREAM : c_int = 1;\n+            pub const SOCK_DGRAM : c_int = 2;\n+            pub const SOCK_RAW : c_int = 3;\n+            pub const IPPROTO_TCP : c_int = 6;\n+            pub const IPPROTO_IP : c_int = 0;\n+            pub const IPPROTO_IPV6 : c_int = 41;\n+            pub const IP_MULTICAST_TTL : c_int = 10;\n+            pub const IP_MULTICAST_LOOP : c_int = 11;\n+            pub const IP_TTL : c_int = 4;\n+            pub const IP_HDRINCL : c_int = 2;\n+            pub const IP_ADD_MEMBERSHIP : c_int = 12;\n+            pub const IP_DROP_MEMBERSHIP : c_int = 13;\n+\n+            pub const TCP_NODELAY : c_int = 1;\n+            pub const SOL_SOCKET : c_int = 65535;\n+            pub const SO_DEBUG : c_int = 1;\n+            pub const SO_ACCEPTCONN : c_int = 2;\n+            pub const SO_REUSEADDR : c_int = 4;\n+            pub const SO_KEEPALIVE : c_int = 8;\n+            pub const SO_DONTROUTE : c_int = 16;\n+            pub const SO_BROADCAST : c_int = 32;\n+            pub const SO_USELOOPBACK : c_int = 64;\n+            pub const SO_LINGER : c_int = 128;\n+            pub const SO_OOBINLINE : c_int = 256;\n+            pub const SO_REUSEPORT : c_int = 512;\n+            pub const SO_SNDBUF : c_int = 4097;\n+            pub const SO_RCVBUF : c_int = 4098;\n+            pub const SO_SNDLOWAT : c_int = 4099;\n+            pub const SO_RCVLOWAT : c_int = 4100;\n+            pub const SO_SNDTIMEO : c_int = 4107;\n+            pub const SO_RCVTIMEO : c_int = 4108;\n+            pub const SO_ERROR : c_int = 4103;\n+            pub const SO_TYPE : c_int = 4104;\n+\n+            pub const IFF_LOOPBACK : c_int = 0x8;\n+\n+            pub const SHUT_RD : c_int = 0;\n+            pub const SHUT_WR : c_int = 1;\n+            pub const SHUT_RDWR : c_int = 2;\n+\n+            pub const LOCK_SH : c_int = 1;\n+            pub const LOCK_EX : c_int = 2;\n+            pub const LOCK_NB : c_int = 4;\n+            pub const LOCK_UN : c_int = 8;\n+        }\n+        pub mod extra {\n+            use types::os::arch::c95::c_int;\n+\n+\n+            pub const MAP_RENAME : c_int = 32;\n+            pub const MAP_NORESERVE : c_int = 64;\n+            pub const MAP_HASSEMAPHORE : c_int = 512;\n+\n+            pub const IPPROTO_RAW : c_int = 255;\n+\n+            pub const PATH_MAX : c_int = 1024;\n+        }\n+        pub mod sysconf {\n+            use types::os::arch::c95::c_int;\n+\n+            pub const _SC_ARG_MAX : c_int = 1;\n+            pub const _SC_CHILD_MAX : c_int = 2;\n+            pub const _SC_CLK_TCK : c_int = 39;\n+            pub const _SC_NGROUPS_MAX : c_int = 4;\n+            pub const _SC_OPEN_MAX : c_int = 5;\n+            pub const _SC_JOB_CONTROL : c_int = 6;\n+            pub const _SC_SAVED_IDS : c_int = 7;\n+            pub const _SC_VERSION : c_int = 8;\n+            pub const _SC_BC_BASE_MAX : c_int = 9;\n+            pub const _SC_BC_DIM_MAX : c_int = 10;\n+            pub const _SC_BC_SCALE_MAX : c_int = 11;\n+            pub const _SC_BC_STRING_MAX : c_int = 12;\n+            pub const _SC_COLL_WEIGHTS_MAX : c_int = 13;\n+            pub const _SC_EXPR_NEST_MAX : c_int = 14;\n+            pub const _SC_LINE_MAX : c_int = 15;\n+            pub const _SC_RE_DUP_MAX : c_int = 16;\n+            pub const _SC_2_VERSION : c_int = 17;\n+            pub const _SC_2_C_BIND : c_int = 18;\n+            pub const _SC_2_C_DEV : c_int = 19;\n+            pub const _SC_2_CHAR_TERM : c_int = 20;\n+            pub const _SC_2_FORT_DEV : c_int = 21;\n+            pub const _SC_2_FORT_RUN : c_int = 22;\n+            pub const _SC_2_LOCALEDEF : c_int = 23;\n+            pub const _SC_2_SW_DEV : c_int = 24;\n+            pub const _SC_2_UPE : c_int = 25;\n+            pub const _SC_STREAM_MAX : c_int = 26;\n+            pub const _SC_TZNAME_MAX : c_int = 27;\n+            pub const _SC_PAGESIZE : c_int = 28;\n+            pub const _SC_FSYNC : c_int = 29;\n+            pub const _SC_AIO_LISTIO_MAX : c_int = 51;\n+            pub const _SC_AIO_MAX : c_int = 52;\n+            pub const _SC_ASYNCHRONOUS_IO : c_int = 50;\n+            pub const _SC_MAPPED_FILES : c_int = 33;\n+            pub const _SC_MEMLOCK : c_int = 34;\n+            pub const _SC_MEMLOCK_RANGE : c_int = 35;\n+            pub const _SC_MEMORY_PROTECTION : c_int = 36;\n+            pub const _SC_MESSAGE_PASSING : c_int = 53;\n+            pub const _SC_MQ_OPEN_MAX : c_int = 54;\n+            pub const _SC_PRIORITY_SCHEDULING : c_int = 56;\n+            pub const _SC_SEMAPHORES : c_int = 42;\n+            pub const _SC_SHARED_MEMORY_OBJECTS : c_int = 87;\n+            pub const _SC_SYNCHRONIZED_IO : c_int = 31;\n+            pub const _SC_TIMERS : c_int = 44;\n+\n+            pub const _PC_NAME_MAX : c_int = 4;\n+            pub const _PC_PATH_MAX : c_int = 5;\n+        }\n+    }\n+\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod os {\n         pub mod c95 {\n@@ -5733,38 +6194,16 @@ pub mod funcs {\n                 pub fn chmod(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n-                #[cfg(any(target_os = \"linux\",\n-                          target_os = \"freebsd\",\n-                          target_os = \"dragonfly\",\n-                          target_os = \"bitrig\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                          target_os = \"android\",\n-                          target_os = \"ios\",\n-                          target_os = \"nacl\"))]\n-                pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n-\n-                #[cfg(target_os = \"macos\")]\n-                #[link_name = \"fstat64\"]\n+                #[cfg_attr(target_os = \"macos\", link_name = \"fstat64\")]\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__fstat50\")]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 pub fn mkdir(path: *const c_char, mode: mode_t) -> c_int;\n                 #[cfg(not(target_os = \"nacl\"))]\n                 pub fn mkfifo(path: *const c_char, mode: mode_t) -> c_int;\n \n-                #[cfg(any(target_os = \"linux\",\n-                          target_os = \"freebsd\",\n-                          target_os = \"dragonfly\",\n-                          target_os = \"bitrig\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                          target_os = \"android\",\n-                          target_os = \"ios\",\n-                          target_os = \"nacl\"))]\n-                pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n-\n-                #[cfg(target_os = \"macos\")]\n-                #[link_name = \"stat64\"]\n+                #[cfg_attr(target_os = \"macos\", link_name = \"stat64\")]\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__stat50\")]\n                 pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n             }\n         }\n@@ -5908,6 +6347,7 @@ pub mod funcs {\n                 pub fn setuid(uid: uid_t) -> c_int;\n                 pub fn sleep(secs: c_uint) -> c_uint;\n                 pub fn usleep(secs: c_uint) -> c_int;\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__nanosleep50\")]\n                 pub fn nanosleep(rqtp: *const timespec,\n                                  rmtp: *mut timespec) -> c_int;\n                 pub fn sysconf(name: c_int) -> c_long;\n@@ -5923,6 +6363,7 @@ pub mod funcs {\n                              offset: off_t) -> ssize_t;\n                 pub fn pwrite(fd: c_int, buf: *const c_void, count: size_t,\n                               offset: off_t) -> ssize_t;\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__utime50\")]\n                 pub fn utime(file: *const c_char, buf: *const utimbuf) -> c_int;\n             }\n             #[cfg(target_os = \"nacl\")]\n@@ -6005,8 +6446,10 @@ pub mod funcs {\n                 pub fn mprotect(addr: *mut c_void, len: size_t, prot: c_int)\n                                 -> c_int;\n \n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__msync13\")]\n                 pub fn msync(addr: *mut c_void, len: size_t, flags: c_int)\n                              -> c_int;\n+\n                 pub fn shm_open(name: *const c_char, oflag: c_int, mode: mode_t)\n                                 -> c_int;\n                 pub fn shm_unlink(name: *const c_char) -> c_int;\n@@ -6051,19 +6494,8 @@ pub mod funcs {\n             use types::os::arch::posix01::stat;\n \n             extern {\n-                #[cfg(any(target_os = \"linux\",\n-                          target_os = \"freebsd\",\n-                          target_os = \"dragonfly\",\n-                          target_os = \"bitrig\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                          target_os = \"android\",\n-                          target_os = \"ios\",\n-                          target_os = \"nacl\"))]\n-                pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n-\n-                #[cfg(target_os = \"macos\")]\n-                #[link_name = \"lstat64\"]\n+                #[cfg_attr(target_os = \"macos\", link_name = \"lstat64\")]\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__lstat50\")]\n                 pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n             }\n         }\n@@ -6085,7 +6517,9 @@ pub mod funcs {\n \n                 pub fn setenv(name: *const c_char, val: *const c_char,\n                               overwrite: c_int) -> c_int;\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__unsetenv13\")]\n                 pub fn unsetenv(name: *const c_char) -> c_int;\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__putenv50\")]\n                 pub fn putenv(string: *mut c_char) -> c_int;\n \n                 pub fn symlink(path1: *const c_char,\n@@ -6120,11 +6554,13 @@ pub mod funcs {\n             use types::os::common::posix01::{glob_t};\n \n             extern {\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__glob30\")]\n                 pub fn glob(pattern: *const c_char,\n                             flags: c_int,\n                             errfunc: ::core::option::Option<extern \"C\" fn(epath: *const c_char,\n                                                               errno: c_int) -> c_int>,\n                             pglob: *mut glob_t);\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__globfree30\")]\n                 pub fn globfree(pglob: *mut glob_t);\n             }\n         }\n@@ -6149,8 +6585,8 @@ pub mod funcs {\n             extern {\n                 pub fn getrlimit(resource: c_int, rlim: *mut rlimit) -> c_int;\n                 pub fn setrlimit(resource: c_int, rlim: *const rlimit) -> c_int;\n+                #[cfg_attr(target_os = \"netbsd\", link_name = \"__getrusage50\")]\n                 pub fn getrusage(resource: c_int, usage: *mut rusage) -> c_int;\n-\n             }\n         }\n     }\n@@ -6198,7 +6634,9 @@ pub mod funcs {\n         use types::os::arch::posix88::ssize_t;\n \n         extern \"system\" {\n+            #[cfg_attr(target_os = \"netbsd\", link_name = \"__socket30\")]\n             pub fn socket(domain: c_int, ty: c_int, protocol: c_int) -> c_int;\n+\n             pub fn connect(socket: c_int, address: *const sockaddr,\n                            len: socklen_t) -> c_int;\n             pub fn bind(socket: c_int, address: *const sockaddr,"}, {"sha": "09adc1d05a60915c1f2c3fe2c7cb924d0c7a53a4", "filename": "src/libstd/os/netbsd/raw.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! NetBSD/OpenBSD-specific raw type definitions\n+//! NetBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n@@ -17,7 +17,7 @@ use os::unix::raw::{uid_t, gid_t};\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n@@ -55,6 +55,10 @@ pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_birthtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_birthtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_size: off_t,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_blocks: blkcnt_t,\n@@ -64,8 +68,5 @@ pub struct stat {\n     pub st_flags: fflags_t,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime_nsec: c_long,\n+    st_spare: [u32; 2],\n }"}, {"sha": "051b3d8897d90c6c8413d8712aa413c99d80b541", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -61,9 +61,10 @@ pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 70;\n           target_os = \"dragonfly\"))]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 71;\n #[cfg(any(target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n           target_os = \"openbsd\"))]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 101;\n+#[cfg(target_os = \"netbsd\")]\n+pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 48;\n #[cfg(target_os = \"android\")]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 0x0048;\n \n@@ -131,26 +132,31 @@ extern {\n \n     pub fn raise(signum: libc::c_int) -> libc::c_int;\n \n+    #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaction14\")]\n     pub fn sigaction(signum: libc::c_int,\n                      act: *const sigaction,\n                      oldact: *mut sigaction) -> libc::c_int;\n \n+    #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaltstack14\")]\n     pub fn sigaltstack(ss: *const sigaltstack,\n                        oss: *mut sigaltstack) -> libc::c_int;\n \n     #[cfg(not(target_os = \"android\"))]\n+    #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigemptyset14\")]\n     pub fn sigemptyset(set: *mut sigset_t) -> libc::c_int;\n \n     pub fn pthread_sigmask(how: libc::c_int, set: *const sigset_t,\n                            oldset: *mut sigset_t) -> libc::c_int;\n \n     #[cfg(not(target_os = \"ios\"))]\n+    #[cfg_attr(target_os = \"netbsd\", link_name = \"__getpwuid_r50\")]\n     pub fn getpwuid_r(uid: libc::uid_t,\n                       pwd: *mut passwd,\n                       buf: *mut libc::c_char,\n                       buflen: libc::size_t,\n                       result: *mut *mut passwd) -> libc::c_int;\n \n+    #[cfg_attr(target_os = \"netbsd\", link_name = \"__utimes50\")]\n     pub fn utimes(filename: *const libc::c_char,\n                   times: *const libc::timeval) -> libc::c_int;\n     pub fn gai_strerror(errcode: libc::c_int) -> *const libc::c_char;\n@@ -347,12 +353,12 @@ mod signal_os {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\"))]\n     pub type sigset_t = u32;\n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))]\n     #[repr(C)]\n     pub struct sigset_t {\n         bits: [u32; 4],\n     }\n-    #[cfg(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\"))]\n+    #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n     pub type sigset_t = libc::c_uint;\n \n     // This structure has more fields, but we're not all that interested in"}, {"sha": "c0e75368f745970906ad5673328c10ec794390e2", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -213,7 +213,12 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     ::fs::read_link(\"/proc/curproc/file\")\n }\n \n-#[cfg(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\"))]\n+#[cfg(target_os = \"netbsd\")]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    ::fs::read_link(\"/proc/curproc/exe\")\n+}\n+\n+#[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     use sync::StaticMutex;\n     static LOCK: StaticMutex = StaticMutex::new();"}, {"sha": "ce6e5609ce7dca96fcc97c16ead6c9f8ae46a263", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -452,6 +452,7 @@ mod tests {\n \n     #[cfg(not(target_os = \"android\"))]\n     extern {\n+        #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaddset14\")]\n         fn sigaddset(set: *mut c::sigset_t, signum: libc::c_int) -> libc::c_int;\n     }\n "}, {"sha": "954bfbb6b18b7e33d4111014f6558185453cf81f", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -40,6 +40,7 @@ extern {\n     pub fn pthread_cond_signal(cond: *mut pthread_cond_t) -> libc::c_int;\n     pub fn pthread_cond_broadcast(cond: *mut pthread_cond_t) -> libc::c_int;\n     pub fn pthread_cond_destroy(cond: *mut pthread_cond_t) -> libc::c_int;\n+    #[cfg_attr(target_os = \"netbsd\", link_name = \"__gettimeofday50\")]\n     pub fn gettimeofday(tp: *mut libc::timeval,\n                         tz: *mut libc::c_void) -> libc::c_int;\n \n@@ -55,7 +56,6 @@ extern {\n #[cfg(any(target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n           target_os = \"openbsd\"))]\n mod os {\n     use libc;\n@@ -249,3 +249,67 @@ mod os {\n     };\n     pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 1;\n }\n+\n+#[cfg(target_os = \"netbsd\")]\n+mod os {\n+    use libc;\n+\n+    // size of the type minus width of the magic and alignment field\n+    #[cfg(target_arch = \"x86_64\")]\n+    const __PTHREAD_MUTEX_SIZE__: usize = 48 - 4 - 8;\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    const __PTHREAD_MUTEXATTR_SIZE__: usize = 16 - 8; // no magic field\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    const __PTHREAD_COND_SIZE__: usize = 40 - 4 - 8;\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    const __PTHREAD_RWLOCK_SIZE__: usize = 64 - 4 - 8;\n+\n+    const _PTHREAD_MUTEX_MAGIC_INIT: libc::c_uint = 0x33330003;\n+    const _PTHREAD_COND_MAGIC_INIT: libc::c_uint = 0x55550005;\n+    const _PTHREAD_RWLOCK_MAGIC_INIT: libc::c_uint = 0x99990009;\n+\n+    #[repr(C)]\n+    pub struct pthread_mutex_t {\n+        __magic: libc::c_uint,\n+        __opaque: [u8; __PTHREAD_MUTEX_SIZE__],\n+        __align: libc::c_longlong,\n+    }\n+    #[repr(C)]\n+    pub struct pthread_mutexattr_t {\n+        __opaque: [u8; __PTHREAD_MUTEXATTR_SIZE__],\n+        __align: libc::c_longlong,\n+    }\n+    #[repr(C)]\n+    pub struct pthread_cond_t {\n+        __magic: libc::c_uint,\n+        __opaque: [u8; __PTHREAD_COND_SIZE__],\n+        __align: libc::c_longlong,\n+    }\n+    #[repr(C)]\n+    pub struct pthread_rwlock_t {\n+        __magic: libc::c_uint,\n+        __opaque: [u8; __PTHREAD_RWLOCK_SIZE__],\n+        __align: libc::c_longlong,\n+    }\n+\n+    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n+        __magic: _PTHREAD_MUTEX_MAGIC_INIT,\n+        __opaque: [0; __PTHREAD_MUTEX_SIZE__],\n+        __align: 0,\n+    };\n+    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n+        __magic: _PTHREAD_COND_MAGIC_INIT,\n+        __opaque: [0; __PTHREAD_COND_SIZE__],\n+        __align: 0,\n+    };\n+    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n+        __magic: _PTHREAD_RWLOCK_MAGIC_INIT,\n+        __opaque: [0; __PTHREAD_RWLOCK_SIZE__],\n+        __align: 0,\n+    };\n+\n+    pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 2;\n+}"}, {"sha": "83e0a03a2341ee2b49630af6151371031509cc6b", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -102,7 +102,6 @@ impl Thread {\n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n-              target_os = \"netbsd\",\n               target_os = \"openbsd\"))]\n     pub fn set_name(name: &str) {\n         extern {\n@@ -126,6 +125,21 @@ impl Thread {\n         }\n     }\n \n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn set_name(name: &str) {\n+        extern {\n+            fn pthread_setname_np(thread: libc::pthread_t,\n+                                  name: *const libc::c_char,\n+                                  arg: *mut libc::c_void) -> libc::c_int;\n+        }\n+        let cname = CString::new(&b\"%s\"[..]).unwrap();\n+        let carg = CString::new(name).unwrap();\n+        unsafe {\n+            pthread_setname_np(pthread_self(), cname.as_ptr(),\n+                               carg.as_ptr() as *mut libc::c_void);\n+        }\n+    }\n+\n     pub fn sleep(dur: Duration) {\n         let mut ts = libc::timespec {\n             tv_sec: dur.as_secs() as libc::time_t,\n@@ -191,13 +205,12 @@ pub mod guard {\n \n     #[cfg(any(target_os = \"macos\",\n               target_os = \"bitrig\",\n-              target_os = \"netbsd\",\n               target_os = \"openbsd\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         current().map(|s| s as *mut libc::c_void)\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         use super::pthread_attr_init;\n \n@@ -263,7 +276,7 @@ pub mod guard {\n               pthread_get_stacksize_np(pthread_self())) as usize)\n     }\n \n-    #[cfg(any(target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"bitrig\"))]\n+    #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n     pub unsafe fn current() -> Option<usize> {\n         #[repr(C)]\n         struct stack_t {\n@@ -290,7 +303,7 @@ pub mod guard {\n         })\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     pub unsafe fn current() -> Option<usize> {\n         use super::pthread_attr_init;\n \n@@ -307,13 +320,17 @@ pub mod guard {\n             let mut size = 0;\n             assert_eq!(pthread_attr_getstack(&attr, &mut stackaddr, &mut size), 0);\n \n-            ret = Some(stackaddr as usize + guardsize as usize);\n+            ret = if cfg!(target_os = \"netbsd\") {\n+                Some(stackaddr as usize)\n+            } else {\n+                Some(stackaddr as usize + guardsize as usize)\n+            };\n         }\n         assert_eq!(pthread_attr_destroy(&mut attr), 0);\n         ret\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     extern {\n         fn pthread_getattr_np(native: libc::pthread_t,\n                               attr: *mut libc::pthread_attr_t) -> libc::c_int;"}, {"sha": "73b66877588146e5cee37770ca2214955057b930", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1aaeb7b97e34b6688f31c6921d636d27c02e73/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=9c1aaeb7b97e34b6688f31c6921d636d27c02e73", "patch": "@@ -86,7 +86,9 @@ mod inner {\n     #[link(name = \"rt\")]\n     extern {}\n \n+\n     extern {\n+        #[cfg_attr(target_os = \"netbsd\", link_name = \"__clock_gettime50\")]\n         fn clock_gettime(clk_id: libc::c_int, tp: *mut libc::timespec) -> libc::c_int;\n     }\n "}]}