{"sha": "200f466d1a3cd1530752842b6895c73fc61b0cb6", "node_id": "C_kwDOAAsO6NoAKDIwMGY0NjZkMWEzY2QxNTMwNzUyODQyYjY4OTVjNzNmYzYxYjBjYjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T18:03:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T15:45:49Z"}, "message": "Encode whether foreign opaques are TAITs or not", "tree": {"sha": "b93b709f4a422e55a90eb8c02dd00b78b6117290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93b709f4a422e55a90eb8c02dd00b78b6117290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200f466d1a3cd1530752842b6895c73fc61b0cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200f466d1a3cd1530752842b6895c73fc61b0cb6", "html_url": "https://github.com/rust-lang/rust/commit/200f466d1a3cd1530752842b6895c73fc61b0cb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200f466d1a3cd1530752842b6895c73fc61b0cb6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79335f1ac4f6bc72795d4ac84764aa185648b5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/79335f1ac4f6bc72795d4ac84764aa185648b5f2", "html_url": "https://github.com/rust-lang/rust/commit/79335f1ac4f6bc72795d4ac84764aa185648b5f2"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "ce72b78f42f93e7ac18674c70b1e6bdf792367de", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -2602,7 +2602,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         match path.res {\n             Res::Def(DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder, did) => {\n                 // Check for desugared `impl Trait`.\n-                assert!(ty::is_impl_trait_defn(tcx, did).is_none());\n+                assert!(tcx.is_type_alias_impl_trait(did));\n                 let item_segment = path.segments.split_last().unwrap();\n                 self.prohibit_generics(item_segment.1.iter(), |err| {\n                     err.note(\"`impl Trait` types can't have type parameters\");"}, {"sha": "9be37dbe8c6b540e7d6995eed598de88d5632200", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -76,6 +76,7 @@ pub fn provide(providers: &mut Providers) {\n         is_foreign_item,\n         generator_kind,\n         collect_mod_item_types,\n+        is_type_alias_impl_trait,\n         ..*providers\n     };\n }\n@@ -1537,3 +1538,13 @@ fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind>\n         _ => bug!(\"generator_kind applied to non-local def-id {:?}\", def_id),\n     }\n }\n+\n+fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    match tcx.hir().get_if_local(def_id) {\n+        Some(Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. })) => {\n+            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias)\n+        }\n+        Some(_) => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n+        _ => bug!(\"tried getting opaque_ty_origin for non-local def-id {:?}\", def_id),\n+    }\n+}"}, {"sha": "c00a95607aadc07766535af81068664e6d261ae1", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -223,6 +223,7 @@ provide! { tcx, def_id, other, cdata,\n     generator_kind => { table }\n     trait_def => { table }\n     deduced_param_attrs => { table }\n+    is_type_alias_impl_trait => { table }\n     collect_return_position_impl_trait_in_trait_tys => {\n         Ok(cdata\n             .root"}, {"sha": "69adefe432c6250c35c944edf3bd5ac2f4b5fc1e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -1514,6 +1514,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::OpaqueTy(..) => {\n                 self.encode_explicit_item_bounds(def_id);\n+                record!(self.tables.is_type_alias_impl_trait[def_id] <- self.tcx.is_type_alias_impl_trait(def_id));\n             }\n             hir::ItemKind::Enum(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);"}, {"sha": "5e2b7938bd5102fc0473491f88f5cc84c3822ace", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -404,6 +404,7 @@ define_tables! {\n     proc_macro: Table<DefIndex, MacroKind>,\n     module_reexports: Table<DefIndex, LazyArray<ModChild>>,\n     deduced_param_attrs: Table<DefIndex, LazyArray<DeducedParamAttrs>>,\n+    is_type_alias_impl_trait: Table<DefIndex, LazyValue<bool>>,\n \n     trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, Ty<'static>>>>,\n }"}, {"sha": "6bbf7fa3914e69ea746a5607cae04b6ad2db1f4e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -177,6 +177,12 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query is_type_alias_impl_trait(key: DefId) -> bool\n+    {\n+        desc { \"determine whether the opaque is a type-alias impl trait\" }\n+        separate_provide_extern\n+    }\n+\n     query analysis(key: ()) -> Result<(), ErrorGuaranteed> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }"}, {"sha": "24f3d1acff1882e7d42deb256bbf4227c06d6cef", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -52,6 +52,7 @@ trivially_parameterized_over_tcx! {\n     usize,\n     (),\n     u32,\n+    bool,\n     std::string::String,\n     crate::metadata::ModChild,\n     crate::middle::codegen_fn_attrs::CodegenFnAttrs,"}, {"sha": "12d4cb4fc6920a0d07438637415bff6980d058cb", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200f466d1a3cd1530752842b6895c73fc61b0cb6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=200f466d1a3cd1530752842b6895c73fc61b0cb6", "patch": "@@ -654,7 +654,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                     // All of the requirements on type parameters\n                     // have already been checked for `impl Trait` in\n                     // return position. We do need to check type-alias-impl-trait though.\n-                    if ty::is_impl_trait_defn(self.tcx, def_id).is_none() {\n+                    if self.tcx.is_type_alias_impl_trait(def_id) {\n                         let obligations = self.nominal_obligations(def_id, substs);\n                         self.out.extend(obligations);\n                     }"}]}