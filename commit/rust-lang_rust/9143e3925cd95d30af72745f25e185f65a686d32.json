{"sha": "9143e3925cd95d30af72745f25e185f65a686d32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDNlMzkyNWNkOTVkMzBhZjcyNzQ1ZjI1ZTE4NWY2NWE2ODZkMzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T10:23:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T10:23:09Z"}, "message": "Prepare for more stateless status reporting", "tree": {"sha": "701fd1902cce7792bf52b51772eadc44f4f8b673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701fd1902cce7792bf52b51772eadc44f4f8b673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9143e3925cd95d30af72745f25e185f65a686d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9143e3925cd95d30af72745f25e185f65a686d32", "html_url": "https://github.com/rust-lang/rust/commit/9143e3925cd95d30af72745f25e185f65a686d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9143e3925cd95d30af72745f25e185f65a686d32/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3c47ccefca2069da70a9513bc2b7f6fbd0f894c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c47ccefca2069da70a9513bc2b7f6fbd0f894c", "html_url": "https://github.com/rust-lang/rust/commit/e3c47ccefca2069da70a9513bc2b7f6fbd0f894c"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "44a656e622027ae07e9ab524b18ff4a36d235e1f", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9143e3925cd95d30af72745f25e185f65a686d32/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143e3925cd95d30af72745f25e185f65a686d32/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=9143e3925cd95d30af72745f25e185f65a686d32", "patch": "@@ -67,21 +67,25 @@ pub(crate) struct GlobalState {\n     req_queue: ReqQueue,\n     pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n     pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n-    pub(crate) vfs_config_version: u32,\n-    pub(crate) flycheck: Vec<FlycheckHandle>,\n-    pub(crate) flycheck_sender: Sender<flycheck::Message>,\n-    pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n     pub(crate) config: Arc<Config>,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n     pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n-    pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) shutdown_requested: bool,\n     pub(crate) status: Status,\n     pub(crate) source_root_config: SourceRootConfig,\n     pub(crate) proc_macro_client: Option<ProcMacroClient>,\n \n+    pub(crate) flycheck: Vec<FlycheckHandle>,\n+    pub(crate) flycheck_sender: Sender<flycheck::Message>,\n+    pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n+\n+    pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n+    pub(crate) vfs_config_version: u32,\n+    pub(crate) vfs_progress_n_total: usize,\n+    pub(crate) vfs_progress_n_done: usize,\n+\n     /// For both `workspaces` and `workspace_build_data`, the field stores the\n     /// data we actually use, while the `OpQueue` stores the result of the last\n     /// fetch.\n@@ -129,23 +133,27 @@ impl GlobalState {\n         GlobalState {\n             sender,\n             req_queue: ReqQueue::default(),\n-            vfs_config_version: 0,\n             task_pool,\n             loader,\n-            flycheck: Vec::new(),\n-            flycheck_sender,\n-            flycheck_receiver,\n             config: Arc::new(config),\n             analysis_host,\n             diagnostics: Default::default(),\n             mem_docs: FxHashMap::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n-            vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n             shutdown_requested: false,\n             status: Status::default(),\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: None,\n \n+            flycheck: Vec::new(),\n+            flycheck_sender,\n+            flycheck_receiver,\n+\n+            vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n+            vfs_config_version: 0,\n+            vfs_progress_n_total: 0,\n+            vfs_progress_n_done: 0,\n+\n             workspaces: Arc::new(Vec::new()),\n             fetch_workspaces_queue: OpQueue::default(),\n             workspace_build_data: None,"}, {"sha": "4a4705e1fa78a31165f326f2b6f3703d97b3ecbd", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9143e3925cd95d30af72745f25e185f65a686d32/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143e3925cd95d30af72745f25e185f65a686d32/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9143e3925cd95d30af72745f25e185f65a686d32", "patch": "@@ -314,31 +314,23 @@ impl GlobalState {\n                             }\n                         }\n                         vfs::loader::Message::Progress { n_total, n_done, config_version } => {\n+                            self.vfs_progress_n_total = n_total;\n+                            self.vfs_progress_n_done = n_done;\n                             always!(config_version <= self.vfs_config_version);\n-                            if n_total == 0 {\n-                                new_status = Status::Invalid;\n+                            let state = if n_done == 0 {\n+                                Progress::Begin\n+                            } else if n_done < n_total {\n+                                Progress::Report\n                             } else {\n-                                let state = if n_done == 0 {\n-                                    new_status = Status::Loading;\n-                                    Progress::Begin\n-                                } else if n_done < n_total {\n-                                    Progress::Report\n-                                } else {\n-                                    assert_eq!(n_done, n_total);\n-                                    new_status = Status::Ready {\n-                                        partial: self.config.run_build_scripts()\n-                                            && self.workspace_build_data.is_none()\n-                                            || config_version < self.vfs_config_version,\n-                                    };\n-                                    Progress::End\n-                                };\n-                                self.report_progress(\n-                                    \"roots scanned\",\n-                                    state,\n-                                    Some(format!(\"{}/{}\", n_done, n_total)),\n-                                    Some(Progress::fraction(n_done, n_total)),\n-                                )\n-                            }\n+                                assert_eq!(n_done, n_total);\n+                                Progress::End\n+                            };\n+                            self.report_progress(\n+                                \"roots scanned\",\n+                                state,\n+                                Some(format!(\"{}/{}\", n_done, n_total)),\n+                                Some(Progress::fraction(n_done, n_total)),\n+                            )\n                         }\n                     }\n                     // Coalesce many VFS event into a single loop turn\n@@ -497,8 +489,9 @@ impl GlobalState {\n \n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| {\n-                self.fetch_workspaces_request();\n-                self.fetch_workspaces_if_needed();\n+                s.fetch_workspaces_request();\n+                s.fetch_workspaces_if_needed();\n+                Ok(())\n             })?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n             .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?"}]}