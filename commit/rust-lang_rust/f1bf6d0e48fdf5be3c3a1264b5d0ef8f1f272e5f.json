{"sha": "f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYmY2ZDBlNDhmZGY1YmUzYzNhMTI2NGI1ZDBlZjhmMWYyNzJlNWY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-28T21:07:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:53:26Z"}, "message": "Iterate DefId to encode visibility.", "tree": {"sha": "7aedc191d8c7396e9d38762c22d409bfe1e4d00f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aedc191d8c7396e9d38762c22d409bfe1e4d00f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f", "html_url": "https://github.com/rust-lang/rust/commit/f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a185cdbc595da86fbe6831f8b678cf44af6e537a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a185cdbc595da86fbe6831f8b678cf44af6e537a", "html_url": "https://github.com/rust-lang/rust/commit/a185cdbc595da86fbe6831f8b678cf44af6e537a"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "7460174c1af0c70901e6bd7b8dfbdcf54052176d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f1bf6d0e48fdf5be3c3a1264b5d0ef8f1f272e5f", "patch": "@@ -716,6 +716,41 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n }\n \n+fn should_encode_visibility(def_kind: DefKind) -> bool {\n+    match def_kind {\n+        DefKind::Mod\n+        | DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::AssocTy\n+        | DefKind::Fn\n+        | DefKind::Const\n+        | DefKind::Static\n+        | DefKind::Ctor(..)\n+        | DefKind::AssocFn\n+        | DefKind::AssocConst\n+        | DefKind::Macro(..)\n+        | DefKind::Use\n+        | DefKind::ForeignMod\n+        | DefKind::OpaqueTy\n+        | DefKind::Impl\n+        | DefKind::Field => true,\n+        DefKind::TyParam\n+        | DefKind::ConstParam\n+        | DefKind::LifetimeParam\n+        | DefKind::AnonConst\n+        | DefKind::GlobalAsm\n+        | DefKind::Closure\n+        | DefKind::Generator\n+        | DefKind::ExternCrate => false,\n+    }\n+}\n+\n impl EncodeContext<'a, 'tcx> {\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {\n@@ -734,6 +769,9 @@ impl EncodeContext<'a, 'tcx> {\n                 def_kind => def_kind,\n             });\n             record!(self.tables.span[def_id] <- tcx.def_span(def_id));\n+            if should_encode_visibility(def_kind) {\n+                record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n+            }\n         }\n     }\n \n@@ -761,7 +799,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n@@ -800,7 +837,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -851,7 +887,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- attrs);\n         if self.is_proc_macro {\n             record!(self.tables.children[def_id] <- &[]);\n@@ -881,7 +916,6 @@ impl EncodeContext<'a, 'tcx> {\n         let variant_data = tcx.hir().expect_variant_data(variant_id);\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- variant_data.fields()[field_index].attrs);\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_ident_span(def_id, field.ident);\n@@ -906,7 +940,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -1010,7 +1043,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- ast_item.attrs);\n         self.encode_ident_span(def_id, ast_item.ident);\n         self.encode_stability(def_id);\n@@ -1113,7 +1145,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- ast_item.attrs);\n         self.encode_ident_span(def_id, impl_item.ident);\n         self.encode_stability(def_id);\n@@ -1358,7 +1389,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         };\n         record!(self.tables.kind[def_id] <- entry_kind);\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- item.attrs);\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n@@ -1477,7 +1507,6 @@ impl EncodeContext<'a, 'tcx> {\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id).to_def_id();\n         record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- macro_def.attrs);\n         self.encode_ident_span(def_id, macro_def.ident);\n         self.encode_stability(def_id);\n@@ -1808,7 +1837,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignType);\n             }\n         }\n-        record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- nitem.attrs);\n         self.encode_ident_span(def_id, nitem.ident);\n         self.encode_stability(def_id);"}]}