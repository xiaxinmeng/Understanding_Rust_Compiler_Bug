{"sha": "817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2QxYWU4MzQ2NWMyNWNiZTNmZGNjMTM1MmE5ZTRjN2M0MDM1NjE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-29T20:41:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-03T17:19:16Z"}, "message": "Move BufferedEarlyLint to librustc_session", "tree": {"sha": "f7400e879ed43f76b3e39a93226f30592a468c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7400e879ed43f76b3e39a93226f30592a468c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "html_url": "https://github.com/rust-lang/rust/commit/817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2731075a6bd297f4c4ea78a4b6528391dd3fd88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2731075a6bd297f4c4ea78a4b6528391dd3fd88b", "html_url": "https://github.com/rust-lang/rust/commit/2731075a6bd297f4c4ea78a4b6528391dd3fd88b"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "93c5c49c9208af1e87202a3766624d0b58e301e4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -3895,6 +3895,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_index\",\n  \"serialize\",\n  \"syntax_pos\",\n ]"}, {"sha": "f90ba129a456e6bf6f9b2efa9a6f92732a92f090", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -14,3 +14,4 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_index = { path = \"../librustc_index\" }"}, {"sha": "8bcd1f1af70d73e050129b6d6836c709e1a9f378", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -2,3 +2,4 @@ pub mod cgu_reuse_tracker;\n pub mod utils;\n #[macro_use]\n pub mod lint;\n+pub mod node_id;"}, {"sha": "faa6a7a4644e06e26cd60332ef2f749cc99c4cc1", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -1,7 +1,8 @@\n-use syntax_pos::{Symbol, sym};\n+use syntax_pos::{MultiSpan, Symbol, sym};\n use syntax_pos::edition::Edition;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n pub use self::Level::*;\n+use crate::node_id::NodeId;\n \n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n@@ -172,6 +173,21 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n+/// Stores buffered lint info which can later be passed to `librustc`.\n+pub struct BufferedEarlyLint {\n+    /// The span of code that we are linting on.\n+   pub span: MultiSpan,\n+\n+   /// The lint message.\n+   pub msg: String,\n+\n+   /// The `NodeId` of the AST node that generated the lint.\n+   pub id: NodeId,\n+\n+   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n+   pub lint_id: &'static Lint,\n+}\n+\n /// Declares a static item of type `&'static Lint`.\n #[macro_export]\n macro_rules! declare_lint {"}, {"sha": "7b14db20b95b1b9059686561cb561d3a41063032", "filename": "src/librustc_session/node_id.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibrustc_session%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fnode_id.rs?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -0,0 +1,39 @@\n+use std::fmt;\n+use rustc_index::vec::Idx;\n+use rustc_serialize::{Encoder, Decoder};\n+use syntax_pos::ExpnId;\n+\n+rustc_index::newtype_index! {\n+    pub struct NodeId {\n+        ENCODABLE = custom\n+        DEBUG_FORMAT = \"NodeId({})\"\n+    }\n+}\n+\n+impl NodeId {\n+    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n+        NodeId::from_u32(expn_id.as_u32())\n+    }\n+\n+    pub fn placeholder_to_expn_id(self) -> ExpnId {\n+        ExpnId::from_u32(self.as_u32())\n+    }\n+}\n+\n+impl fmt::Display for NodeId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.as_u32(), f)\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedEncodable for NodeId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.as_u32())\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedDecodable for NodeId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n+        d.read_u32().map(NodeId::from_u32)\n+    }\n+}"}, {"sha": "ab91d99cff86006a9e66cf1ec8e6c6b785cbd1e7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -30,7 +30,7 @@ use crate::token::{self, DelimToken};\n use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n \n use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{Span, DUMMY_SP, ExpnId};\n+use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -268,46 +268,7 @@ impl ParenthesizedArgs {\n     }\n }\n \n-// hack to ensure that we don't try to access the private parts of `NodeId` in this module\n-mod node_id_inner {\n-    use rustc_index::vec::Idx;\n-    rustc_index::newtype_index! {\n-        pub struct NodeId {\n-            ENCODABLE = custom\n-            DEBUG_FORMAT = \"NodeId({})\"\n-        }\n-    }\n-}\n-\n-pub use node_id_inner::NodeId;\n-\n-impl NodeId {\n-    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n-        NodeId::from_u32(expn_id.as_u32())\n-    }\n-\n-    pub fn placeholder_to_expn_id(self) -> ExpnId {\n-        ExpnId::from_u32(self.as_u32())\n-    }\n-}\n-\n-impl fmt::Display for NodeId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_u32(), f)\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedEncodable for NodeId {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.as_u32())\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedDecodable for NodeId {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n-        d.read_u32().map(NodeId::from_u32)\n-    }\n-}\n+pub use rustc_session::node_id::NodeId;\n \n /// `NodeId` used to represent the root of the crate.\n pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);"}, {"sha": "2c32894a23b06a16a4c6c1673de3198be7d36306", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d1ae83465c25cbe3fdcc1352a9e4c7c403561/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=817d1ae83465c25cbe3fdcc1352a9e4c7c403561", "patch": "@@ -3,8 +3,6 @@\n //! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat\n //! redundant. Later, these types can be converted to types for use by the rest of the compiler.\n \n-use crate::ast::NodeId;\n-use syntax_pos::MultiSpan;\n use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_session::declare_lint;\n pub use rustc_session::lint::BufferedEarlyLint;\n@@ -30,18 +28,3 @@ declare_lint! {\n     Deny,\n     \"trailing content in included file\"\n }\n-\n-/// Stores buffered lint info which can later be passed to `librustc`.\n-pub struct BufferedEarlyLint {\n-    /// The span of code that we are linting on.\n-   pub span: MultiSpan,\n-\n-   /// The lint message.\n-   pub msg: String,\n-\n-   /// The `NodeId` of the AST node that generated the lint.\n-   pub id: NodeId,\n-\n-   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-   pub lint_id: &'static rustc_session::lint::Lint,\n-}"}]}