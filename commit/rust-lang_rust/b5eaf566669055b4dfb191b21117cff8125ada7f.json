{"sha": "b5eaf566669055b4dfb191b21117cff8125ada7f", "node_id": "C_kwDOAAsO6NoAKGI1ZWFmNTY2NjY5MDU1YjRkZmIxOTFiMjExMTdjZmY4MTI1YWRhN2Y", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-05T15:48:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T15:48:09Z"}, "message": "Merge #11904\n\n11904: internal: Wrap macros in expr position in `MacroExpr` node r=jonas-schievink a=jonas-schievink\n\nThis lets us distinguish them from macros in item position just by looking at the syntax tree.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11854\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "5b50b6ef647a53f5c9fb0b9389f611a025ade658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b50b6ef647a53f5c9fb0b9389f611a025ade658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5eaf566669055b4dfb191b21117cff8125ada7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTGS5CRBK7hj4Ov3rIwAAuOMIALIkh35r7z9CDhWc59FNbjHA\npnJYM5pTlX76g/1h0+gGyeKwUkQKgmk+CGLSb41nThEjig5xnI0pQ0JP6qaFyKSm\ncbd3DiTF6WMaLQH0dPrgFB8Qp62ZMhJUuJoTbAaRBZEfItfBtfyRnT0JstnKfYxh\n7yY/N4gwklFVjE5FKggnVrTzHeMxTj/nvaVnk7+moVcEJYZlhPTVkOCRaTz6IVX4\nTxj63uQTPpEVeAfPPFUJqT6wrYIY62Eee/xoa+gPc5D93iHEdByYN3jUll+RU/0K\nJuYKw0npNQGbDT7ZJ/v0+sFJDKXnDg81a72D0RY8VRdAFUB+mjcAJQis6RHsO3w=\n=3kbE\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b50b6ef647a53f5c9fb0b9389f611a025ade658\nparent 5a6918f1c4e9d4f0c6a655e6283470f64edd64cf\nparent 872b7b9660d99a2f556d8b53edb489767b386859\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649173689 +0000\ncommitter GitHub <noreply@github.com> 1649173689 +0000\n\nMerge #11904\n\n11904: internal: Wrap macros in expr position in `MacroExpr` node r=jonas-schievink a=jonas-schievink\n\nThis lets us distinguish them from macros in item position just by looking at the syntax tree.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11854\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5eaf566669055b4dfb191b21117cff8125ada7f", "html_url": "https://github.com/rust-lang/rust/commit/b5eaf566669055b4dfb191b21117cff8125ada7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5eaf566669055b4dfb191b21117cff8125ada7f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf", "html_url": "https://github.com/rust-lang/rust/commit/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf"}, {"sha": "872b7b9660d99a2f556d8b53edb489767b386859", "url": "https://api.github.com/repos/rust-lang/rust/commits/872b7b9660d99a2f556d8b53edb489767b386859", "html_url": "https://github.com/rust-lang/rust/commit/872b7b9660d99a2f556d8b53edb489767b386859"}], "stats": {"total": 1178, "additions": 636, "deletions": 542}, "files": [{"sha": "91d02ab5c931d09df6dfd550aa534b0ad459170c", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -110,8 +110,8 @@ impl SourceAnalyzer {\n \n     fn expr_id(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<ExprId> {\n         let src = match expr {\n-            ast::Expr::MacroCall(call) => {\n-                self.expand_expr(db, InFile::new(self.file_id, call.clone()))?\n+            ast::Expr::MacroExpr(expr) => {\n+                self.expand_expr(db, InFile::new(self.file_id, expr.macro_call()?.clone()))?\n             }\n             _ => InFile::new(self.file_id, expr.clone()),\n         };"}, {"sha": "f0cb39ec362c17a626ae8d65c6375bb2dcb4ac68", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -506,7 +506,8 @@ impl ExprCollector<'_> {\n                     None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n             }\n-            ast::Expr::MacroCall(e) => {\n+            ast::Expr::MacroExpr(e) => {\n+                let e = e.macro_call()?;\n                 let macro_ptr = AstPtr::new(&e);\n                 let id = self.collect_macro_call(e, macro_ptr.clone(), true, |this, expansion| {\n                     expansion.map(|it| this.collect_expr(it))\n@@ -629,7 +630,11 @@ impl ExprCollector<'_> {\n                 }\n                 let has_semi = stmt.semicolon_token().is_some();\n                 // Note that macro could be expended to multiple statements\n-                if let Some(ast::Expr::MacroCall(m)) = stmt.expr() {\n+                if let Some(ast::Expr::MacroExpr(e)) = stmt.expr() {\n+                    let m = match e.macro_call() {\n+                        Some(it) => it,\n+                        None => return,\n+                    };\n                     let macro_ptr = AstPtr::new(&m);\n                     let syntax_ptr = AstPtr::new(&stmt.expr().unwrap());\n "}, {"sha": "c9601f855273799ff127cbefa467cb81990a2205", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -79,6 +79,34 @@ fn main() { n_nuple!(1,2,3); }\n     );\n }\n \n+#[test]\n+fn issue_3642_bad_macro_stackover() {\n+    lower(\n+        r#\"\n+#[macro_export]\n+macro_rules! match_ast {\n+    (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n+\n+    (match ($node:expr) {\n+        $( ast::$ast:ident($it:ident) => $res:expr, )*\n+        _ => $catch_all:expr $(,)?\n+    }) => {{\n+        $( if let Some($it) = ast::$ast::cast($node.clone()) { $res } else )*\n+        { $catch_all }\n+    }};\n+}\n+\n+fn main() {\n+    let anchor = match_ast! {\n+        match parent {\n+            as => {},\n+            _ => return None\n+        }\n+    };\n+}\"#,\n+    );\n+}\n+\n #[test]\n fn macro_resolve() {\n     // Regression test for a path resolution bug introduced with inner item handling."}, {"sha": "074821288987f1741e7cc686f4cdb360bf82d406", "filename": "crates/hir_def/src/body/tests/block.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests%2Fblock.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -371,3 +371,27 @@ fn outer() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn stmt_macro_expansion_with_trailing_expr() {\n+    cov_mark::check!(macro_stmt_with_trailing_macro_expr);\n+    check_at(\n+        r#\"\n+macro_rules! mac {\n+    () => { mac!($) };\n+    ($x:tt) => { fn inner() {} };\n+}\n+fn foo() {\n+    mac!();\n+    $0\n+}\n+        \"#,\n+        expect![[r#\"\n+            block scope\n+            inner: v\n+\n+            crate\n+            foo: v\n+        \"#]],\n+    )\n+}"}, {"sha": "3fa2d9d32ccbd03b6044fd4828dd040d739b9bfb", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -48,22 +48,33 @@ impl<'a> Ctx<'a> {\n     pub(super) fn lower_macro_stmts(mut self, stmts: ast::MacroStmts) -> ItemTree {\n         self.tree.top_level = stmts\n             .statements()\n-            .filter_map(|stmt| match stmt {\n-                ast::Stmt::Item(item) => Some(item),\n-                // Macro calls can be both items and expressions. The syntax library always treats\n-                // them as expressions here, so we undo that.\n-                ast::Stmt::ExprStmt(es) => match es.expr()? {\n-                    ast::Expr::MacroCall(call) => {\n-                        cov_mark::hit!(macro_call_in_macro_stmts_is_added_to_item_tree);\n-                        Some(call.into())\n-                    }\n+            .filter_map(|stmt| {\n+                match stmt {\n+                    ast::Stmt::Item(item) => Some(item),\n+                    // Macro calls can be both items and expressions. The syntax library always treats\n+                    // them as expressions here, so we undo that.\n+                    ast::Stmt::ExprStmt(es) => match es.expr()? {\n+                        ast::Expr::MacroExpr(expr) => {\n+                            cov_mark::hit!(macro_call_in_macro_stmts_is_added_to_item_tree);\n+                            Some(expr.macro_call()?.into())\n+                        }\n+                        _ => None,\n+                    },\n                     _ => None,\n-                },\n-                _ => None,\n+                }\n             })\n             .flat_map(|item| self.lower_mod_item(&item))\n             .collect();\n \n+        if let Some(ast::Expr::MacroExpr(tail_macro)) = stmts.expr() {\n+            if let Some(call) = tail_macro.macro_call() {\n+                cov_mark::hit!(macro_stmt_with_trailing_macro_expr);\n+                if let Some(mod_item) = self.lower_mod_item(&call.into()) {\n+                    self.tree.top_level.push(mod_item);\n+                }\n+            }\n+        }\n+\n         self.tree\n     }\n \n@@ -75,7 +86,7 @@ impl<'a> Ctx<'a> {\n                 // Macro calls can be both items and expressions. The syntax library always treats\n                 // them as expressions here, so we undo that.\n                 ast::Stmt::ExprStmt(es) => match es.expr()? {\n-                    ast::Expr::MacroCall(call) => self.lower_mod_item(&call.into()),\n+                    ast::Expr::MacroExpr(expr) => self.lower_mod_item(&expr.macro_call()?.into()),\n                     _ => None,\n                 },\n                 _ => None,"}, {"sha": "a28478ff4d8d3174bc90f64aaf047326ae300f02", "filename": "crates/hir_def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -249,8 +249,7 @@ macro_rules! format_args {\n \n fn main() {\n     let _ =\n-        // +errors\n-        format_args!(\"{} {:?}\", a.);\n+        format_args!/*+errors*/(\"{} {:?}\", a.);\n }\n \"#,\n         expect![[r##\""}, {"sha": "c8c7b19acaa94a10113fb206ab1b9d7637383f0b", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -530,8 +530,7 @@ macro_rules! m {\n }\n \n fn f() -> i32 {\n-    // +tree\n-    m!{}\n+    m!/*+tree*/{}\n }\n \"#,\n         expect![[r#\""}, {"sha": "537ea087f9ece2810cbf68b0519888cc55154768", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -885,6 +885,16 @@ impl ExpandTo {\n             None => return ExpandTo::Statements,\n         };\n \n+        // FIXME: macros in statement position are treated as expression statements, they should\n+        // probably be their own statement kind. The *grand*parent indicates what's valid.\n+        if parent.kind() == MACRO_EXPR\n+            && parent\n+                .parent()\n+                .map_or(true, |p| matches!(p.kind(), EXPR_STMT | STMT_LIST | MACRO_STMTS))\n+        {\n+            return ExpandTo::Statements;\n+        }\n+\n         match parent.kind() {\n             MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => ExpandTo::Items,\n             MACRO_STMTS | EXPR_STMT | STMT_LIST => ExpandTo::Statements,\n@@ -895,23 +905,10 @@ impl ExpandTo {\n             | CLOSURE_EXPR | FIELD_EXPR | FOR_EXPR | IF_EXPR | INDEX_EXPR | LET_EXPR\n             | MATCH_ARM | MATCH_EXPR | MATCH_GUARD | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR\n             | PREFIX_EXPR | RANGE_EXPR | RECORD_EXPR_FIELD | REF_EXPR | RETURN_EXPR | TRY_EXPR\n-            | TUPLE_EXPR | WHILE_EXPR => ExpandTo::Expr,\n+            | TUPLE_EXPR | WHILE_EXPR | MACRO_EXPR => ExpandTo::Expr,\n             _ => {\n-                match ast::LetStmt::cast(parent) {\n-                    Some(let_stmt) => {\n-                        if let Some(true) = let_stmt.initializer().map(|it| it.syntax() == syn) {\n-                            ExpandTo::Expr\n-                        } else if let Some(true) = let_stmt.ty().map(|it| it.syntax() == syn) {\n-                            ExpandTo::Type\n-                        } else {\n-                            ExpandTo::Pattern\n-                        }\n-                    }\n-                    None => {\n-                        // Unknown , Just guess it is `Items`\n-                        ExpandTo::Items\n-                    }\n-                }\n+                // Unknown , Just guess it is `Items`\n+                ExpandTo::Items\n             }\n         }\n     }"}, {"sha": "be2b733a4b1d1b959fb37d77f6f7b7f450eebdb6", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -444,34 +444,6 @@ fn test() {\n     );\n }\n \n-#[test]\n-fn issue_3642_bad_macro_stackover() {\n-    check_no_mismatches(\n-        r#\"\n-#[macro_export]\n-macro_rules! match_ast {\n-    (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n-\n-    (match ($node:expr) {\n-        $( ast::$ast:ident($it:ident) => $res:expr, )*\n-        _ => $catch_all:expr $(,)?\n-    }) => {{\n-        $( if let Some($it) = ast::$ast::cast($node.clone()) { $res } else )*\n-        { $catch_all }\n-    }};\n-}\n-\n-fn main() {\n-    let anchor = match_ast! {\n-        match parent {\n-            as => {},\n-            _ => return None\n-        }\n-    };\n-}\"#,\n-    );\n-}\n-\n #[test]\n fn issue_3999_slice() {\n     check_infer("}, {"sha": "84fdbc60f87f336dfde18aa9c09e52f3e9ef2392", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -156,7 +156,7 @@ fn highlight_exit_points(\n                     highlights.push(HighlightedRange { category: None, range: token.text_range() });\n                 }\n             }\n-            ast::Expr::MethodCallExpr(_) | ast::Expr::CallExpr(_) | ast::Expr::MacroCall(_) => {\n+            ast::Expr::MethodCallExpr(_) | ast::Expr::CallExpr(_) | ast::Expr::MacroExpr(_) => {\n                 if sema.type_of_expr(&expr).map_or(false, |ty| ty.original.is_never()) {\n                     highlights.push(HighlightedRange {\n                         category: None,"}, {"sha": "9003e7cd34d091b1044313212f539d29a9f0f175", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -163,19 +163,20 @@ fn test() {\n                         L_CURLY@10..11 \"{\"\n                         WHITESPACE@11..16 \"\\n    \"\n                         EXPR_STMT@16..58\n-                          MACRO_CALL@16..57\n-                            PATH@16..22\n-                              PATH_SEGMENT@16..22\n-                                NAME_REF@16..22\n-                                  IDENT@16..22 \"assert\"\n-                            BANG@22..23 \"!\"\n-                            TOKEN_TREE@23..57\n-                              L_PAREN@23..24 \"(\"\n-                              STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n-                              COMMA@52..53 \",\"\n-                              WHITESPACE@53..54 \" \"\n-                              STRING@54..56 \"\\\"\\\"\"\n-                              R_PAREN@56..57 \")\"\n+                          MACRO_EXPR@16..57\n+                            MACRO_CALL@16..57\n+                              PATH@16..22\n+                                PATH_SEGMENT@16..22\n+                                  NAME_REF@16..22\n+                                    IDENT@16..22 \"assert\"\n+                              BANG@22..23 \"!\"\n+                              TOKEN_TREE@23..57\n+                                L_PAREN@23..24 \"(\"\n+                                STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n+                                COMMA@52..53 \",\"\n+                                WHITESPACE@53..54 \" \"\n+                                STRING@54..56 \"\\\"\\\"\"\n+                                R_PAREN@56..57 \")\"\n                           SEMICOLON@57..58 \";\"\n                         WHITESPACE@58..59 \"\\n\"\n                         R_CURLY@59..60 \"}\"\n@@ -214,19 +215,20 @@ fn test() {\n }\"#,\n             expect![[r#\"\n                 EXPR_STMT@16..58\n-                  MACRO_CALL@16..57\n-                    PATH@16..22\n-                      PATH_SEGMENT@16..22\n-                        NAME_REF@16..22\n-                          IDENT@16..22 \"assert\"\n-                    BANG@22..23 \"!\"\n-                    TOKEN_TREE@23..57\n-                      L_PAREN@23..24 \"(\"\n-                      STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n-                      COMMA@52..53 \",\"\n-                      WHITESPACE@53..54 \" \"\n-                      STRING@54..56 \"\\\"\\\"\"\n-                      R_PAREN@56..57 \")\"\n+                  MACRO_EXPR@16..57\n+                    MACRO_CALL@16..57\n+                      PATH@16..22\n+                        PATH_SEGMENT@16..22\n+                          NAME_REF@16..22\n+                            IDENT@16..22 \"assert\"\n+                      BANG@22..23 \"!\"\n+                      TOKEN_TREE@23..57\n+                        L_PAREN@23..24 \"(\"\n+                        STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n+                        COMMA@52..53 \",\"\n+                        WHITESPACE@53..54 \" \"\n+                        STRING@54..56 \"\\\"\\\"\"\n+                        R_PAREN@56..57 \")\"\n                   SEMICOLON@57..58 \";\"\n             \"#]],\n         );"}, {"sha": "00950127910904b1c97d2c1f9a48696ba61245ca", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -601,6 +601,17 @@ sdasdasdasdasd\n         );\n     }\n \n+    #[test]\n+    fn noop_in_item_position_with_macro() {\n+        type_char_noop('{', r#\"$0println!();\"#);\n+        type_char_noop(\n+            '{',\n+            r#\"\n+fn main() $0println!(\"hello\");\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn adds_closing_brace_for_use_tree() {\n         type_char("}, {"sha": "f9ec9326b65ff69541a335c31ac47b3a05b1799a", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -111,7 +111,7 @@ pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) ->\n                     | ast::Expr::ForExpr(_)\n                     | ast::Expr::IfExpr(_)\n                     | ast::Expr::LoopExpr(_)\n-                    | ast::Expr::MacroCall(_)\n+                    | ast::Expr::MacroExpr(_)\n                     | ast::Expr::MatchExpr(_)\n                     | ast::Expr::PrefixExpr(_)\n                     | ast::Expr::RangeExpr(_)"}, {"sha": "b2cda87f93ed733a226e56a246e4a4397bbca35a", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -649,8 +649,8 @@ impl FunctionBody {\n             ast::Expr::PathExpr(path_expr) => {\n                 cb(path_expr.path().and_then(|it| it.as_single_name_ref()))\n             }\n-            ast::Expr::MacroCall(call) => {\n-                if let Some(tt) = call.token_tree() {\n+            ast::Expr::MacroExpr(expr) => {\n+                if let Some(tt) = expr.macro_call().and_then(|call| call.token_tree()) {\n                     tt.syntax()\n                         .children_with_tokens()\n                         .flat_map(SyntaxElement::into_token)\n@@ -923,7 +923,7 @@ fn reference_is_exclusive(\n \n /// checks if this expr requires `&mut` access, recurses on field access\n fn expr_require_exclusive_access(ctx: &AssistContext, expr: &ast::Expr) -> Option<bool> {\n-    if let ast::Expr::MacroCall(_) = expr {\n+    if let ast::Expr::MacroExpr(_) = expr {\n         // FIXME: expand macro and check output for mutable usages of the variable?\n         return None;\n     }\n@@ -1015,7 +1015,7 @@ fn path_element_of_reference(\n         None\n     })?;\n     stdx::always!(\n-        matches!(path, ast::Expr::PathExpr(_) | ast::Expr::MacroCall(_)),\n+        matches!(path, ast::Expr::PathExpr(_) | ast::Expr::MacroExpr(_)),\n         \"unexpected expression type for variable usage: {:?}\",\n         path\n     );"}, {"sha": "01cd32f55c6f9bc7e2a237abd33c7dab21a6e43f", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -39,15 +39,16 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         .map(|mut tokens| syntax::hacks::parse_expr_from_str(&tokens.join(\"\")))\n         .collect::<Option<Vec<ast::Expr>>>()?;\n \n-    let parent = macro_call.syntax().parent()?;\n+    let macro_expr = ast::MacroExpr::cast(macro_call.syntax().parent()?)?;\n+    let parent = macro_expr.syntax().parent()?;\n     let (range, text) = match &*input_expressions {\n         // dbg!()\n         [] => {\n             match_ast! {\n                 match parent {\n                     ast::StmtList(__) => {\n-                        let range = macro_call.syntax().text_range();\n-                        let range = match whitespace_start(macro_call.syntax().prev_sibling_or_token()) {\n+                        let range = macro_expr.syntax().text_range();\n+                        let range = match whitespace_start(macro_expr.syntax().prev_sibling_or_token()) {\n                             Some(start) => range.cover_offset(start),\n                             None => range,\n                         };"}, {"sha": "f011a4a48a36d7e7c075638bdf9f69f5670a1799", "filename": "crates/ide_db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -62,11 +62,6 @@ pub fn preorder_expr(start: &ast::Expr, cb: &mut dyn FnMut(WalkEvent<ast::Expr>)\n         match ast::Stmt::cast(node.clone()) {\n             // Don't skip subtree since we want to process the expression child next\n             Some(ast::Stmt::ExprStmt(_)) | Some(ast::Stmt::LetStmt(_)) => (),\n-            // This might be an expression\n-            Some(ast::Stmt::Item(ast::Item::MacroCall(mcall))) => {\n-                cb(WalkEvent::Enter(ast::Expr::MacroCall(mcall)));\n-                preorder.skip_subtree();\n-            }\n             // skip inner items which might have their own expressions\n             Some(ast::Stmt::Item(_)) => preorder.skip_subtree(),\n             None => {\n@@ -319,7 +314,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         | ast::Expr::ForExpr(_)\n         | ast::Expr::IndexExpr(_)\n         | ast::Expr::Literal(_)\n-        | ast::Expr::MacroCall(_)\n+        | ast::Expr::MacroExpr(_)\n         | ast::Expr::MacroStmts(_)\n         | ast::Expr::MethodCallExpr(_)\n         | ast::Expr::ParenExpr(_)"}, {"sha": "b063c73a9d68955f48d00343476f47294d9b54ac", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -552,7 +552,7 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n         }\n         T![!] if !p.at(T![!=]) => {\n             let block_like = items::macro_call_after_excl(p);\n-            (m.complete(p, MACRO_CALL), block_like)\n+            (m.complete(p, MACRO_CALL).precede(p).complete(p, MACRO_EXPR), block_like)\n         }\n         _ => (m.complete(p, PATH_EXPR), BlockLike::NotBlock),\n     }"}, {"sha": "d137a02ee830886ed5497243c2445ef19102750f", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -605,6 +605,7 @@ fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     if p.nth_at(1, T![!]) {\n         // test try_macro_fallback\n         // fn foo() { try!(Ok(())); }\n+        let macro_call = p.start();\n         let path = p.start();\n         let path_segment = p.start();\n         let name_ref = p.start();\n@@ -613,7 +614,8 @@ fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n         path_segment.complete(p, PATH_SEGMENT);\n         path.complete(p, PATH);\n         let _block_like = items::macro_call_after_excl(p);\n-        return m.complete(p, MACRO_CALL);\n+        macro_call.complete(p, MACRO_CALL);\n+        return m.complete(p, MACRO_EXPR);\n     }\n \n     p.bump(T![try]);"}, {"sha": "628fa745e752d678d625ef5489173918529b265b", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -190,6 +190,7 @@ pub enum SyntaxKind {\n     YIELD_EXPR,\n     LET_EXPR,\n     UNDERSCORE_EXPR,\n+    MACRO_EXPR,\n     MATCH_EXPR,\n     MATCH_ARM_LIST,\n     MATCH_ARM,"}, {"sha": "6524d8e8fa9fe5b11a42a4422e8450952b11dc2f", "filename": "crates/parser/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -104,15 +104,16 @@ SOURCE_FILE\n                         IDENT \"entries\"\n                       COLON \":\"\n                       WHITESPACE \" \"\n-                      MACRO_CALL\n-                        PATH\n-                          PATH_SEGMENT\n-                            NAME_REF\n-                              IDENT \"vec\"\n-                        BANG \"!\"\n-                        TOKEN_TREE\n-                          L_BRACK \"[\"\n-                          R_BRACK \"]\"\n+                      MACRO_EXPR\n+                        MACRO_CALL\n+                          PATH\n+                            PATH_SEGMENT\n+                              NAME_REF\n+                                IDENT \"vec\"\n+                          BANG \"!\"\n+                          TOKEN_TREE\n+                            L_BRACK \"[\"\n+                            R_BRACK \"]\"\n                     WHITESPACE \" \"\n                     R_CURLY \"}\"\n                 R_PAREN \")\""}, {"sha": "4064a7a1ff2de2ca8f1d87794b7b8d99e941942c", "filename": "crates/parser/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -12,26 +12,27 @@ SOURCE_FILE\n       STMT_LIST\n         L_CURLY \"{\"\n         WHITESPACE \"\\n    \"\n-        MACRO_CALL\n-          PATH\n-            PATH_SEGMENT\n-              NAME_REF\n-                IDENT \"foo\"\n-          BANG \"!\"\n-          WHITESPACE \" \"\n-          TOKEN_TREE\n-            L_PAREN \"(\"\n-            WHITESPACE \"\\n        \"\n-            IDENT \"bar\"\n-            COMMA \",\"\n+        MACRO_EXPR\n+          MACRO_CALL\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"foo\"\n+            BANG \"!\"\n             WHITESPACE \" \"\n-            STRING \"\\\"baz\\\"\"\n-            COMMA \",\"\n-            WHITESPACE \" \"\n-            INT_NUMBER \"1\"\n-            COMMA \",\"\n-            WHITESPACE \" \"\n-            FLOAT_NUMBER \"2.0\"\n+            TOKEN_TREE\n+              L_PAREN \"(\"\n+              WHITESPACE \"\\n        \"\n+              IDENT \"bar\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              STRING \"\\\"baz\\\"\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              INT_NUMBER \"1\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              FLOAT_NUMBER \"2.0\"\n         WHITESPACE \"\\n    \"\n         R_CURLY \"}\"\n   WHITESPACE \" \""}, {"sha": "48e123ab11b4d72ca340b66954cdf9f944853748", "filename": "crates/parser/test_data/parser/inline/ok/0053_path_expr.rast", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -81,15 +81,16 @@ SOURCE_FILE\n           WHITESPACE \" \"\n           EQ \"=\"\n           WHITESPACE \" \"\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"format\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n-              R_PAREN \")\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"format\"\n+              BANG \"!\"\n+              TOKEN_TREE\n+                L_PAREN \"(\"\n+                R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\""}, {"sha": "f89cc15e721087db4875e1274e8715df3fbbf198", "filename": "crates/parser/test_data/parser/inline/ok/0096_no_semi_after_block.rast", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -110,15 +110,16 @@ SOURCE_FILE\n             WHITESPACE \"\\n    \"\n             R_CURLY \"}\"\n         WHITESPACE \"\\n    \"\n-        MACRO_CALL\n-          PATH\n-            PATH_SEGMENT\n-              NAME_REF\n-                IDENT \"test\"\n-          BANG \"!\"\n-          TOKEN_TREE\n-            L_CURLY \"{\"\n-            R_CURLY \"}\"\n+        MACRO_EXPR\n+          MACRO_CALL\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"test\"\n+            BANG \"!\"\n+            TOKEN_TREE\n+              L_CURLY \"{\"\n+              R_CURLY \"}\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "81b7f2b3cbbea391e9a4ce6b2ff8f39b9dc8b7bc", "filename": "crates/parser/test_data/parser/inline/ok/0126_attr_on_expr_stmt.rast", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -35,7 +35,7 @@ SOURCE_FILE\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n-          MACRO_CALL\n+          MACRO_EXPR\n             ATTR\n               POUND \"#\"\n               L_BRACK \"[\"\n@@ -46,14 +46,15 @@ SOURCE_FILE\n                       IDENT \"B\"\n               R_BRACK \"]\"\n             WHITESPACE \" \"\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"bar\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_CURLY \"{\"\n-              R_CURLY \"}\"\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"bar\"\n+              BANG \"!\"\n+              TOKEN_TREE\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n           BLOCK_EXPR"}, {"sha": "0adb678fa65d8ae7028ce505412bc47054e7829a", "filename": "crates/parser/test_data/parser/inline/ok/0159_try_macro_fallback.rast", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_try_macro_fallback.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -13,22 +13,23 @@ SOURCE_FILE\n         L_CURLY \"{\"\n         WHITESPACE \" \"\n         EXPR_STMT\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"try\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n-              IDENT \"Ok\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"try\"\n+              BANG \"!\"\n               TOKEN_TREE\n                 L_PAREN \"(\"\n+                IDENT \"Ok\"\n                 TOKEN_TREE\n                   L_PAREN \"(\"\n+                  TOKEN_TREE\n+                    L_PAREN \"(\"\n+                    R_PAREN \")\"\n                   R_PAREN \")\"\n                 R_PAREN \")\"\n-              R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \" \"\n         R_CURLY \"}\""}, {"sha": "9f06e2a9457b902b1158caa6341f41c0aa76b63f", "filename": "crates/parser/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 356, "deletions": 345, "changes": 701, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -396,24 +396,25 @@ SOURCE_FILE\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"assert\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"assert\"\n+              BANG \"!\"\n               TOKEN_TREE\n                 L_PAREN \"(\"\n-                IDENT \"i\"\n-                DOT \".\"\n-                IDENT \"get\"\n                 TOKEN_TREE\n                   L_PAREN \"(\"\n+                  IDENT \"i\"\n+                  DOT \".\"\n+                  IDENT \"get\"\n+                  TOKEN_TREE\n+                    L_PAREN \"(\"\n+                    R_PAREN \")\"\n                   R_PAREN \")\"\n                 R_PAREN \")\"\n-              R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n@@ -887,24 +888,7 @@ SOURCE_FILE\n           PAREN_EXPR\n             L_PAREN \"(\"\n             BIN_EXPR\n-              MACRO_CALL\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"assert\"\n-                BANG \"!\"\n-                TOKEN_TREE\n-                  L_PAREN \"(\"\n-                  TOKEN_TREE\n-                    L_PAREN \"(\"\n-                    TRUE_KW \"true\"\n-                    R_PAREN \")\"\n-                  R_PAREN \")\"\n-              WHITESPACE \" \"\n-              EQ2 \"==\"\n-              WHITESPACE \" \"\n-              PAREN_EXPR\n-                L_PAREN \"(\"\n+              MACRO_EXPR\n                 MACRO_CALL\n                   PATH\n                     PATH_SEGMENT\n@@ -913,11 +897,30 @@ SOURCE_FILE\n                   BANG \"!\"\n                   TOKEN_TREE\n                     L_PAREN \"(\"\n-                    IDENT \"p\"\n                     TOKEN_TREE\n                       L_PAREN \"(\"\n+                      TRUE_KW \"true\"\n                       R_PAREN \")\"\n                     R_PAREN \")\"\n+              WHITESPACE \" \"\n+              EQ2 \"==\"\n+              WHITESPACE \" \"\n+              PAREN_EXPR\n+                L_PAREN \"(\"\n+                MACRO_EXPR\n+                  MACRO_CALL\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"assert\"\n+                    BANG \"!\"\n+                    TOKEN_TREE\n+                      L_PAREN \"(\"\n+                      IDENT \"p\"\n+                      TOKEN_TREE\n+                        L_PAREN \"(\"\n+                        R_PAREN \")\"\n+                      R_PAREN \")\"\n                 R_PAREN \")\"\n             R_PAREN \")\"\n           SEMICOLON \";\"\n@@ -934,22 +937,23 @@ SOURCE_FILE\n           PAREN_EXPR\n             L_PAREN \"(\"\n             BIN_EXPR\n-              MACRO_CALL\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"assert\"\n-                BANG \"!\"\n-                TOKEN_TREE\n-                  L_PAREN \"(\"\n+              MACRO_EXPR\n+                MACRO_CALL\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"assert\"\n+                  BANG \"!\"\n                   TOKEN_TREE\n                     L_PAREN \"(\"\n-                    IDENT \"p\"\n                     TOKEN_TREE\n                       L_PAREN \"(\"\n+                      IDENT \"p\"\n+                      TOKEN_TREE\n+                        L_PAREN \"(\"\n+                        R_PAREN \")\"\n                       R_PAREN \")\"\n                     R_PAREN \")\"\n-                  R_PAREN \")\"\n               WHITESPACE \" \"\n               EQ2 \"==\"\n               WHITESPACE \" \"\n@@ -978,19 +982,20 @@ SOURCE_FILE\n           PAREN_EXPR\n             L_PAREN \"(\"\n             BIN_EXPR\n-              MACRO_CALL\n-                PATH\n-                  PATH_SEGMENT\n-                    NAME_REF\n-                      IDENT \"println\"\n-                BANG \"!\"\n-                TOKEN_TREE\n-                  L_PAREN \"(\"\n-                  STRING \"\\\"{}\\\"\"\n-                  COMMA \",\"\n-                  WHITESPACE \" \"\n-                  INT_NUMBER \"0\"\n-                  R_PAREN \")\"\n+              MACRO_EXPR\n+                MACRO_CALL\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"println\"\n+                  BANG \"!\"\n+                  TOKEN_TREE\n+                    L_PAREN \"(\"\n+                    STRING \"\\\"{}\\\"\"\n+                    COMMA \",\"\n+                    WHITESPACE \" \"\n+                    INT_NUMBER \"0\"\n+                    R_PAREN \")\"\n               WHITESPACE \" \"\n               EQ2 \"==\"\n               WHITESPACE \" \"\n@@ -1130,16 +1135,17 @@ SOURCE_FILE\n                             WHITESPACE \" \"\n                             FAT_ARROW \"=>\"\n                             WHITESPACE \" \"\n-                            MACRO_CALL\n-                              PATH\n-                                PATH_SEGMENT\n-                                  NAME_REF\n-                                    IDENT \"panic\"\n-                              BANG \"!\"\n-                              TOKEN_TREE\n-                                L_PAREN \"(\"\n-                                STRING \"\\\"wat\\\"\"\n-                                R_PAREN \")\"\n+                            MACRO_EXPR\n+                              MACRO_CALL\n+                                PATH\n+                                  PATH_SEGMENT\n+                                    NAME_REF\n+                                      IDENT \"panic\"\n+                                BANG \"!\"\n+                                TOKEN_TREE\n+                                  L_PAREN \"(\"\n+                                  STRING \"\\\"wat\\\"\"\n+                                  R_PAREN \")\"\n                           WHITESPACE \" \"\n                           R_CURLY \"}\"\n                       WHITESPACE \" \"\n@@ -1176,16 +1182,17 @@ SOURCE_FILE\n           WHITESPACE \" \"\n           EQ \"=\"\n           WHITESPACE \" \"\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"println\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n-              STRING \"\\\"lincoln\\\"\"\n-              R_PAREN \")\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"println\"\n+              BANG \"!\"\n+              TOKEN_TREE\n+                L_PAREN \"(\"\n+                STRING \"\\\"lincoln\\\"\"\n+                R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \" \"\n         R_CURLY \"}\"\n@@ -1204,107 +1211,108 @@ SOURCE_FILE\n         L_CURLY \"{\"\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"assert_eq\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n-              IDENT \"String\"\n-              COLON \":\"\n-              COLON \":\"\n-              IDENT \"from\"\n-              TOKEN_TREE\n-                L_PAREN \"(\"\n-                STRING \"\\\"..................................................\\\"\"\n-                R_PAREN \")\"\n-              COMMA \",\"\n-              WHITESPACE \"\\n               \"\n-              IDENT \"format\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"assert_eq\"\n               BANG \"!\"\n               TOKEN_TREE\n                 L_PAREN \"(\"\n-                STRING \"\\\"{:?}\\\"\"\n+                IDENT \"String\"\n+                COLON \":\"\n+                COLON \":\"\n+                IDENT \"from\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  STRING \"\\\"..................................................\\\"\"\n+                  R_PAREN \")\"\n                 COMMA \",\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \"\\n                               \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n-                WHITESPACE \" \"\n-                DOT \".\"\n-                DOT \".\"\n+                WHITESPACE \"\\n               \"\n+                IDENT \"format\"\n+                BANG \"!\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  STRING \"\\\"{:?}\\\"\"\n+                  COMMA \",\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \"\\n                               \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  WHITESPACE \" \"\n+                  DOT \".\"\n+                  DOT \".\"\n+                  R_PAREN \")\"\n                 R_PAREN \")\"\n-              R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n@@ -1353,141 +1361,142 @@ SOURCE_FILE\n               L_CURLY \"{\"\n               WHITESPACE \"\\n        \"\n               EXPR_STMT\n-                MACRO_CALL\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"assert_eq\"\n-                  BANG \"!\"\n-                  TOKEN_TREE\n-                    L_PAREN \"(\"\n-                    INT_NUMBER \"8u8\"\n-                    COMMA \",\"\n-                    WHITESPACE \" \"\n+                MACRO_EXPR\n+                  MACRO_CALL\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"assert_eq\"\n+                    BANG \"!\"\n                     TOKEN_TREE\n-                      L_CURLY \"{\"\n-                      WHITESPACE \"\\n            \"\n-                      IDENT \"macro_rules\"\n-                      BANG \"!\"\n-                      WHITESPACE \" \"\n-                      IDENT \"u8\"\n+                      L_PAREN \"(\"\n+                      INT_NUMBER \"8u8\"\n+                      COMMA \",\"\n                       WHITESPACE \" \"\n                       TOKEN_TREE\n                         L_CURLY \"{\"\n-                        WHITESPACE \"\\n                \"\n-                        TOKEN_TREE\n-                          L_PAREN \"(\"\n-                          IDENT \"u8\"\n-                          R_PAREN \")\"\n+                        WHITESPACE \"\\n            \"\n+                        IDENT \"macro_rules\"\n+                        BANG \"!\"\n                         WHITESPACE \" \"\n-                        EQ \"=\"\n-                        R_ANGLE \">\"\n+                        IDENT \"u8\"\n                         WHITESPACE \" \"\n                         TOKEN_TREE\n                           L_CURLY \"{\"\n-                          WHITESPACE \"\\n                    \"\n-                          MOD_KW \"mod\"\n+                          WHITESPACE \"\\n                \"\n+                          TOKEN_TREE\n+                            L_PAREN \"(\"\n+                            IDENT \"u8\"\n+                            R_PAREN \")\"\n                           WHITESPACE \" \"\n-                          IDENT \"u8\"\n+                          EQ \"=\"\n+                          R_ANGLE \">\"\n                           WHITESPACE \" \"\n                           TOKEN_TREE\n                             L_CURLY \"{\"\n-                            WHITESPACE \"\\n                        \"\n-                            PUB_KW \"pub\"\n-                            WHITESPACE \" \"\n-                            FN_KW \"fn\"\n+                            WHITESPACE \"\\n                    \"\n+                            MOD_KW \"mod\"\n                             WHITESPACE \" \"\n                             IDENT \"u8\"\n-                            L_ANGLE \"<\"\n-                            LIFETIME_IDENT \"'u8\"\n-                            COLON \":\"\n-                            WHITESPACE \" \"\n-                            LIFETIME_IDENT \"'u8\"\n-                            WHITESPACE \" \"\n-                            PLUS \"+\"\n                             WHITESPACE \" \"\n-                            LIFETIME_IDENT \"'u8\"\n-                            R_ANGLE \">\"\n                             TOKEN_TREE\n-                              L_PAREN \"(\"\n+                              L_CURLY \"{\"\n+                              WHITESPACE \"\\n                        \"\n+                              PUB_KW \"pub\"\n+                              WHITESPACE \" \"\n+                              FN_KW \"fn\"\n+                              WHITESPACE \" \"\n                               IDENT \"u8\"\n+                              L_ANGLE \"<\"\n+                              LIFETIME_IDENT \"'u8\"\n                               COLON \":\"\n                               WHITESPACE \" \"\n+                              LIFETIME_IDENT \"'u8\"\n+                              WHITESPACE \" \"\n+                              PLUS \"+\"\n+                              WHITESPACE \" \"\n+                              LIFETIME_IDENT \"'u8\"\n+                              R_ANGLE \">\"\n+                              TOKEN_TREE\n+                                L_PAREN \"(\"\n+                                IDENT \"u8\"\n+                                COLON \":\"\n+                                WHITESPACE \" \"\n+                                AMP \"&\"\n+                                LIFETIME_IDENT \"'u8\"\n+                                WHITESPACE \" \"\n+                                IDENT \"u8\"\n+                                R_PAREN \")\"\n+                              WHITESPACE \" \"\n+                              MINUS \"-\"\n+                              R_ANGLE \">\"\n+                              WHITESPACE \" \"\n                               AMP \"&\"\n                               LIFETIME_IDENT \"'u8\"\n                               WHITESPACE \" \"\n                               IDENT \"u8\"\n-                              R_PAREN \")\"\n-                            WHITESPACE \" \"\n-                            MINUS \"-\"\n-                            R_ANGLE \">\"\n-                            WHITESPACE \" \"\n-                            AMP \"&\"\n-                            LIFETIME_IDENT \"'u8\"\n-                            WHITESPACE \" \"\n-                            IDENT \"u8\"\n-                            WHITESPACE \" \"\n-                            TOKEN_TREE\n-                              L_CURLY \"{\"\n-                              WHITESPACE \"\\n                            \"\n-                              STRING \"\\\"u8\\\"\"\n-                              SEMICOLON \";\"\n-                              WHITESPACE \"\\n                            \"\n-                              IDENT \"u8\"\n-                              WHITESPACE \"\\n                        \"\n+                              WHITESPACE \" \"\n+                              TOKEN_TREE\n+                                L_CURLY \"{\"\n+                                WHITESPACE \"\\n                            \"\n+                                STRING \"\\\"u8\\\"\"\n+                                SEMICOLON \";\"\n+                                WHITESPACE \"\\n                            \"\n+                                IDENT \"u8\"\n+                                WHITESPACE \"\\n                        \"\n+                                R_CURLY \"}\"\n+                              WHITESPACE \"\\n                    \"\n                               R_CURLY \"}\"\n-                            WHITESPACE \"\\n                    \"\n+                            WHITESPACE \"\\n                \"\n                             R_CURLY \"}\"\n-                          WHITESPACE \"\\n                \"\n+                          SEMICOLON \";\"\n+                          WHITESPACE \"\\n            \"\n                           R_CURLY \"}\"\n+                        WHITESPACE \"\\n\\n            \"\n+                        IDENT \"u8\"\n+                        BANG \"!\"\n+                        TOKEN_TREE\n+                          L_PAREN \"(\"\n+                          IDENT \"u8\"\n+                          R_PAREN \")\"\n                         SEMICOLON \";\"\n                         WHITESPACE \"\\n            \"\n-                        R_CURLY \"}\"\n-                      WHITESPACE \"\\n\\n            \"\n-                      IDENT \"u8\"\n-                      BANG \"!\"\n-                      TOKEN_TREE\n-                        L_PAREN \"(\"\n+                        LET_KW \"let\"\n+                        WHITESPACE \" \"\n+                        AMP \"&\"\n                         IDENT \"u8\"\n-                        R_PAREN \")\"\n-                      SEMICOLON \";\"\n-                      WHITESPACE \"\\n            \"\n-                      LET_KW \"let\"\n-                      WHITESPACE \" \"\n-                      AMP \"&\"\n-                      IDENT \"u8\"\n-                      COLON \":\"\n-                      WHITESPACE \" \"\n-                      AMP \"&\"\n-                      IDENT \"u8\"\n-                      WHITESPACE \" \"\n-                      EQ \"=\"\n-                      WHITESPACE \" \"\n-                      IDENT \"u8\"\n-                      COLON \":\"\n-                      COLON \":\"\n-                      IDENT \"u8\"\n-                      TOKEN_TREE\n-                        L_PAREN \"(\"\n+                        COLON \":\"\n+                        WHITESPACE \" \"\n                         AMP \"&\"\n-                        INT_NUMBER \"8u8\"\n-                        R_PAREN \")\"\n-                      SEMICOLON \";\"\n-                      WHITESPACE \"\\n            \"\n-                      CRATE_KW \"crate\"\n-                      COLON \":\"\n-                      COLON \":\"\n-                      IDENT \"u8\"\n-                      TOKEN_TREE\n-                        L_PAREN \"(\"\n-                        INT_NUMBER \"0u8\"\n-                        R_PAREN \")\"\n-                      SEMICOLON \";\"\n-                      WHITESPACE \"\\n            \"\n-                      IDENT \"u8\"\n-                      WHITESPACE \"\\n        \"\n-                      R_CURLY \"}\"\n-                    R_PAREN \")\"\n+                        IDENT \"u8\"\n+                        WHITESPACE \" \"\n+                        EQ \"=\"\n+                        WHITESPACE \" \"\n+                        IDENT \"u8\"\n+                        COLON \":\"\n+                        COLON \":\"\n+                        IDENT \"u8\"\n+                        TOKEN_TREE\n+                          L_PAREN \"(\"\n+                          AMP \"&\"\n+                          INT_NUMBER \"8u8\"\n+                          R_PAREN \")\"\n+                        SEMICOLON \";\"\n+                        WHITESPACE \"\\n            \"\n+                        CRATE_KW \"crate\"\n+                        COLON \":\"\n+                        COLON \":\"\n+                        IDENT \"u8\"\n+                        TOKEN_TREE\n+                          L_PAREN \"(\"\n+                          INT_NUMBER \"0u8\"\n+                          R_PAREN \")\"\n+                        SEMICOLON \";\"\n+                        WHITESPACE \"\\n            \"\n+                        IDENT \"u8\"\n+                        WHITESPACE \"\\n        \"\n+                        R_CURLY \"}\"\n+                      R_PAREN \")\"\n                 SEMICOLON \";\"\n               WHITESPACE \"\\n    \"\n               R_CURLY \"}\"\n@@ -1508,69 +1517,70 @@ SOURCE_FILE\n         L_CURLY \"{\"\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"assert_eq\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n-              IDENT \"String\"\n-              COLON \":\"\n-              COLON \":\"\n-              IDENT \"from\"\n-              TOKEN_TREE\n-                L_PAREN \"(\"\n-                STRING \"\\\"><>\\\"\"\n-                R_PAREN \")\"\n-              COMMA \",\"\n-              WHITESPACE \"\\n               \"\n-              IDENT \"String\"\n-              COLON \":\"\n-              COLON \":\"\n-              L_ANGLE \"<\"\n-              R_ANGLE \">\"\n-              COLON \":\"\n-              COLON \":\"\n-              IDENT \"from\"\n-              COLON \":\"\n-              COLON \":\"\n-              L_ANGLE \"<\"\n-              R_ANGLE \">\"\n-              TOKEN_TREE\n-                L_PAREN \"(\"\n-                STRING \"\\\"><>\\\"\"\n-                R_PAREN \")\"\n-              DOT \".\"\n-              IDENT \"chars\"\n-              COLON \":\"\n-              COLON \":\"\n-              L_ANGLE \"<\"\n-              R_ANGLE \">\"\n-              TOKEN_TREE\n-                L_PAREN \"(\"\n-                R_PAREN \")\"\n-              DOT \".\"\n-              IDENT \"rev\"\n-              COLON \":\"\n-              COLON \":\"\n-              L_ANGLE \"<\"\n-              R_ANGLE \">\"\n-              TOKEN_TREE\n-                L_PAREN \"(\"\n-                R_PAREN \")\"\n-              DOT \".\"\n-              IDENT \"collect\"\n-              COLON \":\"\n-              COLON \":\"\n-              L_ANGLE \"<\"\n-              IDENT \"String\"\n-              R_ANGLE \">\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"assert_eq\"\n+              BANG \"!\"\n               TOKEN_TREE\n                 L_PAREN \"(\"\n+                IDENT \"String\"\n+                COLON \":\"\n+                COLON \":\"\n+                IDENT \"from\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  STRING \"\\\"><>\\\"\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+                WHITESPACE \"\\n               \"\n+                IDENT \"String\"\n+                COLON \":\"\n+                COLON \":\"\n+                L_ANGLE \"<\"\n+                R_ANGLE \">\"\n+                COLON \":\"\n+                COLON \":\"\n+                IDENT \"from\"\n+                COLON \":\"\n+                COLON \":\"\n+                L_ANGLE \"<\"\n+                R_ANGLE \">\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  STRING \"\\\"><>\\\"\"\n+                  R_PAREN \")\"\n+                DOT \".\"\n+                IDENT \"chars\"\n+                COLON \":\"\n+                COLON \":\"\n+                L_ANGLE \"<\"\n+                R_ANGLE \">\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                DOT \".\"\n+                IDENT \"rev\"\n+                COLON \":\"\n+                COLON \":\"\n+                L_ANGLE \"<\"\n+                R_ANGLE \">\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                DOT \".\"\n+                IDENT \"collect\"\n+                COLON \":\"\n+                COLON \":\"\n+                L_ANGLE \"<\"\n+                IDENT \"String\"\n+                R_ANGLE \">\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n                 R_PAREN \")\"\n-              R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n@@ -1741,17 +1751,18 @@ SOURCE_FILE\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"assert\"\n-            BANG \"!\"\n-            TOKEN_TREE\n-              L_PAREN \"(\"\n+          MACRO_EXPR\n+            MACRO_CALL\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"assert\"\n               BANG \"!\"\n-              IDENT \"val\"\n-              R_PAREN \")\"\n+              TOKEN_TREE\n+                L_PAREN \"(\"\n+                BANG \"!\"\n+                IDENT \"val\"\n+                R_PAREN \")\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\""}, {"sha": "24a589ca2e174b8c076ea1cc1bd0188698f4bce8", "filename": "crates/parser/test_data/parser/ok/0042_ufcs_call_list.rast", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -42,15 +42,16 @@ SOURCE_FILE\n           STMT_LIST\n             L_CURLY \"{\"\n             WHITESPACE \"\\n        \"\n-            MACRO_CALL\n-              PATH\n-                PATH_SEGMENT\n-                  NAME_REF\n-                    IDENT \"unimplemented\"\n-              BANG \"!\"\n-              TOKEN_TREE\n-                L_PAREN \"(\"\n-                R_PAREN \")\"\n+            MACRO_EXPR\n+              MACRO_CALL\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"unimplemented\"\n+                BANG \"!\"\n+                TOKEN_TREE\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n             WHITESPACE \"\\n    \"\n             R_CURLY \"}\"\n       WHITESPACE \"\\n\""}, {"sha": "1cafc775cdf7a56e81f1749b0bbd696962c1a105", "filename": "crates/parser/test_data/parser/ok/0071_stmt_attr_placement.rast", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rast?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -38,15 +38,16 @@ SOURCE_FILE\n                           IDENT \"B\"\n                   R_BRACK \"]\"\n                 WHITESPACE \" \"\n-                MACRO_CALL\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"bar\"\n-                  BANG \"!\"\n-                  TOKEN_TREE\n-                    L_PAREN \"(\"\n-                    R_PAREN \")\"\n+                MACRO_EXPR\n+                  MACRO_CALL\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"bar\"\n+                    BANG \"!\"\n+                    TOKEN_TREE\n+                      L_PAREN \"(\"\n+                      R_PAREN \")\"\n                 QUESTION \"?\"\n               WHITESPACE \" \"\n               R_CURLY \"}\""}, {"sha": "4e8d4b478b5b00ae87ed664e27bcd007d6497d51", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -342,7 +342,7 @@ Expr =\n | IndexExpr\n | Literal\n | LoopExpr\n-| MacroCall\n+| MacroExpr\n | MacroStmts\n | MatchExpr\n | MethodCallExpr\n@@ -360,6 +360,9 @@ Expr =\n | LetExpr\n | UnderscoreExpr\n \n+MacroExpr =\n+  MacroCall\n+\n Literal =\n   Attr* value:(\n     'int_number' | 'float_number'"}, {"sha": "f51282fff483d61ba6e6f3169a88258e9e1088fb", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -918,6 +918,14 @@ impl LoopExpr {\n     pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl MacroExpr {\n+    pub fn macro_call(&self) -> Option<MacroCall> { support::child(&self.syntax) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1518,7 +1526,7 @@ pub enum Expr {\n     IndexExpr(IndexExpr),\n     Literal(Literal),\n     LoopExpr(LoopExpr),\n-    MacroCall(MacroCall),\n+    MacroExpr(MacroExpr),\n     MacroStmts(MacroStmts),\n     MatchExpr(MatchExpr),\n     MethodCallExpr(MethodCallExpr),\n@@ -2532,6 +2540,17 @@ impl AstNode for LoopExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for MacroExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for MatchExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3313,8 +3332,8 @@ impl From<Literal> for Expr {\n impl From<LoopExpr> for Expr {\n     fn from(node: LoopExpr) -> Expr { Expr::LoopExpr(node) }\n }\n-impl From<MacroCall> for Expr {\n-    fn from(node: MacroCall) -> Expr { Expr::MacroCall(node) }\n+impl From<MacroExpr> for Expr {\n+    fn from(node: MacroExpr) -> Expr { Expr::MacroExpr(node) }\n }\n impl From<MacroStmts> for Expr {\n     fn from(node: MacroStmts) -> Expr { Expr::MacroStmts(node) }\n@@ -3369,7 +3388,7 @@ impl AstNode for Expr {\n         match kind {\n             ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n             | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | FIELD_EXPR | FOR_EXPR | IF_EXPR\n-            | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MACRO_STMTS | MATCH_EXPR\n+            | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_EXPR | MACRO_STMTS | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n             | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR\n             | YIELD_EXPR | LET_EXPR | UNDERSCORE_EXPR => true,\n@@ -3394,7 +3413,7 @@ impl AstNode for Expr {\n             INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n             LITERAL => Expr::Literal(Literal { syntax }),\n             LOOP_EXPR => Expr::LoopExpr(LoopExpr { syntax }),\n-            MACRO_CALL => Expr::MacroCall(MacroCall { syntax }),\n+            MACRO_EXPR => Expr::MacroExpr(MacroExpr { syntax }),\n             MACRO_STMTS => Expr::MacroStmts(MacroStmts { syntax }),\n             MATCH_EXPR => Expr::MatchExpr(MatchExpr { syntax }),\n             METHOD_CALL_EXPR => Expr::MethodCallExpr(MethodCallExpr { syntax }),\n@@ -3433,7 +3452,7 @@ impl AstNode for Expr {\n             Expr::IndexExpr(it) => &it.syntax,\n             Expr::Literal(it) => &it.syntax,\n             Expr::LoopExpr(it) => &it.syntax,\n-            Expr::MacroCall(it) => &it.syntax,\n+            Expr::MacroExpr(it) => &it.syntax,\n             Expr::MacroStmts(it) => &it.syntax,\n             Expr::MatchExpr(it) => &it.syntax,\n             Expr::MethodCallExpr(it) => &it.syntax,\n@@ -4506,6 +4525,11 @@ impl std::fmt::Display for LoopExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for MacroExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for MatchExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "2f6932a1adddabfbb6d4330bdf1415c1e0bd8e71", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5eaf566669055b4dfb191b21117cff8125ada7f/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=b5eaf566669055b4dfb191b21117cff8125ada7f", "patch": "@@ -144,6 +144,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"YIELD_EXPR\",\n         \"LET_EXPR\",\n         \"UNDERSCORE_EXPR\",\n+        \"MACRO_EXPR\",\n         \"MATCH_EXPR\",\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\","}]}