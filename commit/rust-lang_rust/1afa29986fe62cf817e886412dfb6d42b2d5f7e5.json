{"sha": "1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZmEyOTk4NmZlNjJjZjgxN2U4ODY0MTJkZmI2ZDQyYjJkNWY3ZTU=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-10-27T11:41:41Z"}, "committer": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-10-27T11:41:41Z"}, "message": "rusti: Correct formatting", "tree": {"sha": "fa00c9c9591a3789d3c086a79da368f6af1dc91b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa00c9c9591a3789d3c086a79da368f6af1dc91b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "html_url": "https://github.com/rust-lang/rust/commit/1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed8ce33646e0253fda91471fe528d1800bdf70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed8ce33646e0253fda91471fe528d1800bdf70c", "html_url": "https://github.com/rust-lang/rust/commit/9ed8ce33646e0253fda91471fe528d1800bdf70c"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "96833dd4e440892298d2f694516e752cab156804", "filename": "src/libcore/rl.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/src%2Flibcore%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/src%2Flibcore%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frl.rs?ref=1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "patch": "@@ -17,43 +17,43 @@ extern mod linenoise {\n \n /// Add a line to history\n pub fn add_history(line: ~str) -> bool {\n-\tdo str::as_c_str(line) |buf| {\n-\t\tlinenoise::linenoiseHistoryAdd(buf) == 1 as c_int\n-\t}\n+    do str::as_c_str(line) |buf| {\n+        linenoise::linenoiseHistoryAdd(buf) == 1 as c_int\n+    }\n }\n \n /// Set the maximum amount of lines stored\n pub fn set_history_max_len(len: int) -> bool {\n-\tlinenoise::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n+    linenoise::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n }\n \n /// Save line history to a file\n pub fn save_history(file: ~str) -> bool {\n-\tdo str::as_c_str(file) |buf| {\n-\t\tlinenoise::linenoiseHistorySave(buf) == 1 as c_int\n-\t}\n+    do str::as_c_str(file) |buf| {\n+        linenoise::linenoiseHistorySave(buf) == 1 as c_int\n+    }\n }\n \n /// Load line history from a file\n pub fn load_history(file: ~str) -> bool {\n-\tdo str::as_c_str(file) |buf| {\n-\t\tlinenoise::linenoiseHistoryLoad(buf) == 1 as c_int\n-\t}\n+    do str::as_c_str(file) |buf| {\n+        linenoise::linenoiseHistoryLoad(buf) == 1 as c_int\n+    }\n }\n \n /// Print out a prompt and then wait for input and return it\n pub fn read(prompt: ~str) -> Option<~str> {\n-\tdo str::as_c_str(prompt) |buf| unsafe {\n-\t\tlet line = linenoise::linenoise(buf);\n+    do str::as_c_str(prompt) |buf| unsafe {\n+        let line = linenoise::linenoise(buf);\n \n-\t\tif line.is_null() { None }\n-\t\telse { Some(str::raw::from_c_str(line)) }\n-\t}\n+        if line.is_null() { None }\n+        else { Some(str::raw::from_c_str(line)) }\n+    }\n }\n \n /// Clear the screen\n pub fn clear() {\n-\tlinenoise::linenoiseClearScreen();\n+    linenoise::linenoiseClearScreen();\n }\n \n pub type CompletionCb = fn~(~str, fn(~str));\n@@ -62,17 +62,17 @@ fn complete_key(_v: @CompletionCb) {}\n \n /// Bind to the main completion callback\n pub fn complete(cb: CompletionCb) unsafe {\n-\ttask::local_data::local_data_set(complete_key, @(move cb));\n+    task::local_data::local_data_set(complete_key, @(move cb));\n \n-\textern fn callback(line: *c_char, completions: *()) unsafe {\n-\t\tlet cb: CompletionCb = copy *task::local_data::local_data_get(complete_key).get();\n+    extern fn callback(line: *c_char, completions: *()) unsafe {\n+        let cb = copy *task::local_data::local_data_get(complete_key).get();\n \n-\t\tdo cb(str::raw::from_c_str(line)) |suggestion| {\n-\t\t\tdo str::as_c_str(suggestion) |buf| {\n-\t\t\t\tlinenoise::linenoiseAddCompletion(completions, buf);\n-\t\t\t}\n-\t\t}\n-\t}\n+        do cb(str::raw::from_c_str(line)) |suggestion| {\n+            do str::as_c_str(suggestion) |buf| {\n+                linenoise::linenoiseAddCompletion(completions, buf);\n+            }\n+        }\n+    }\n \n-\tlinenoise::linenoiseSetCompletionCallback(callback);\n+    linenoise::linenoiseSetCompletionCallback(callback);\n }"}, {"sha": "2fa4684b322109f8c1e80cda24f3d72f26a2fa89", "filename": "src/rusti/rusti.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/src%2Frusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/src%2Frusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Frusti.rs?ref=1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "patch": "@@ -246,7 +246,7 @@ fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n             rl::clear();\n         }\n         ~\"help\" => {\n-            io::println(~\":clear - clear the screen\\n\" + \n+            io::println(~\":clear - clear the screen\\n\" +\n                         ~\":exit - exit from the repl\\n\" +\n                         ~\":help - show this message\");\n         }\n@@ -294,7 +294,7 @@ fn main() {\n         if line.starts_with(~\":\") {\n             let full = line.substr(1, line.len() - 1);\n             let split = full.split_char(' ');\n-            let len = split.len(); \n+            let len = split.len();\n \n             if len > 0 {\n                 let cmd = split[0];"}]}