{"sha": "7763b40c71372c6be7a65673a968f6174bab4209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjNiNDBjNzEzNzJjNmJlN2E2NTY3M2E5NjhmNjE3NGJhYjQyMDk=", "commit": {"author": {"name": "Graham Fawcett", "email": "fawcett@uwindsor.ca", "date": "2012-01-18T21:02:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-21T21:33:16Z"}, "message": "issue #1352: change param order on vec::init_elt, putting block in final position.\n\nTo match the init_fn() and init_fn_mut() changes.", "tree": {"sha": "9d8a08b5a3a6547bb6ebd9a0c5d4a82aff3ee871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d8a08b5a3a6547bb6ebd9a0c5d4a82aff3ee871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7763b40c71372c6be7a65673a968f6174bab4209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7763b40c71372c6be7a65673a968f6174bab4209", "html_url": "https://github.com/rust-lang/rust/commit/7763b40c71372c6be7a65673a968f6174bab4209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7763b40c71372c6be7a65673a968f6174bab4209/comments", "author": {"login": "gmfawcett", "id": 49970, "node_id": "MDQ6VXNlcjQ5OTcw", "avatar_url": "https://avatars.githubusercontent.com/u/49970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmfawcett", "html_url": "https://github.com/gmfawcett", "followers_url": "https://api.github.com/users/gmfawcett/followers", "following_url": "https://api.github.com/users/gmfawcett/following{/other_user}", "gists_url": "https://api.github.com/users/gmfawcett/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmfawcett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmfawcett/subscriptions", "organizations_url": "https://api.github.com/users/gmfawcett/orgs", "repos_url": "https://api.github.com/users/gmfawcett/repos", "events_url": "https://api.github.com/users/gmfawcett/events{/privacy}", "received_events_url": "https://api.github.com/users/gmfawcett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "html_url": "https://github.com/rust-lang/rust/commit/35d12be2ce6f62ce75b4f59c2932415dc8b7b786"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "1ef6ccca41b79259f0d2107d8aeafd38aded3394", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -972,7 +972,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         let s = \"fn(\";\n         let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n         let n_args = llvm::LLVMCountParamTypes(ty) as uint;\n-        let args: [TypeRef] = vec::init_elt::<TypeRef>(0 as TypeRef, n_args);\n+        let args: [TypeRef] = vec::init_elt::<TypeRef>(n_args, 0 as TypeRef);\n         unsafe {\n             llvm::LLVMGetParamTypes(ty, vec::to_ptr(args));\n         }\n@@ -984,7 +984,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n       10 {\n         let s: str = \"{\";\n         let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n-        let elts: [TypeRef] = vec::init_elt::<TypeRef>(0 as TypeRef, n_elts);\n+        let elts: [TypeRef] = vec::init_elt::<TypeRef>(n_elts, 0 as TypeRef);\n         unsafe {\n             llvm::LLVMGetStructElementTypes(ty, vec::to_ptr(elts));\n         }\n@@ -1027,8 +1027,8 @@ fn float_width(llt: TypeRef) -> uint {\n }\n \n fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] unsafe {\n-    let args = vec::init_elt(0 as TypeRef,\n-                             llvm::LLVMCountParamTypes(fn_ty) as uint);\n+    let args = vec::init_elt(llvm::LLVMCountParamTypes(fn_ty) as uint,\n+                             0 as TypeRef);\n     llvm::LLVMGetParamTypes(fn_ty, vec::to_ptr(args));\n     ret args;\n }"}, {"sha": "b628c82fe81f8ca9179d3966b6cc5287df42e2cb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -338,7 +338,7 @@ fn get_simple_extern_fn(cx: @block_ctxt,\n                         llmod: ModuleRef,\n                         name: str, n_args: int) -> ValueRef {\n     let ccx = cx.fcx.lcx.ccx;\n-    let inputs = vec::init_elt::<TypeRef>(ccx.int_type, n_args as uint);\n+    let inputs = vec::init_elt::<TypeRef>(n_args as uint, ccx.int_type);\n     let output = ccx.int_type;\n     let t = T_fn(inputs, output);\n     ret get_extern_fn(externs, llmod, name,\n@@ -2842,7 +2842,7 @@ fn lval_maybe_callee_to_lval(c: lval_maybe_callee, ty: ty::t) -> lval_result {\n     alt c.generic {\n       some(gi) {\n         let n_args = vec::len(ty::ty_fn_args(bcx_tcx(c.bcx), ty));\n-        let args = vec::init_elt(none::<@ast::expr>, n_args);\n+        let args = vec::init_elt(n_args, none::<@ast::expr>);\n         let space = alloc_ty(c.bcx, ty);\n         let bcx = trans_closure::trans_bind_1(space.bcx, ty, c, args, ty,\n                                               save_in(space.val));"}, {"sha": "c9f7aff76954984a36a98598c5cb1659426e9b50", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -175,7 +175,7 @@ fn enter_opt(ccx: @crate_ctxt, m: match, opt: opt, col: uint, tag_size: uint,\n           ast::pat_range(l1, l2) {\n             ret if opt_eq(range(l1, l2), opt) { some([]) } else { none };\n           }\n-          _ { ret some(vec::init_elt(dummy, size)); }\n+          _ { ret some(vec::init_elt(size, dummy)); }\n         }\n     }\n     ret enter_match(m, col, val, bind e(ccx, dummy, opt, tag_size, _));\n@@ -198,7 +198,7 @@ fn enter_rec(m: match, col: uint, fields: [ast::ident], val: ValueRef) ->\n             }\n             ret some(pats);\n           }\n-          _ { ret some(vec::init_elt(dummy, vec::len(fields))); }\n+          _ { ret some(vec::init_elt(vec::len(fields), dummy)); }\n         }\n     }\n     ret enter_match(m, col, val, bind e(dummy, fields, _));\n@@ -210,7 +210,7 @@ fn enter_tup(m: match, col: uint, val: ValueRef, n_elts: uint) -> match {\n        option::t<[@ast::pat]> {\n         alt p.node {\n           ast::pat_tup(elts) { ret some(elts); }\n-          _ { ret some(vec::init_elt(dummy, n_elts)); }\n+          _ { ret some(vec::init_elt(n_elts, dummy)); }\n         }\n     }\n     ret enter_match(m, col, val, bind e(dummy, n_elts, _));\n@@ -344,7 +344,7 @@ fn pick_col(m: match) -> uint {\n           _ { 0u }\n         }\n     }\n-    let scores = vec::init_elt_mut(0u, vec::len(m[0].pats));\n+    let scores = vec::init_elt_mut(vec::len(m[0].pats), 0u);\n     for br: match_branch in m {\n         let i = 0u;\n         for p: @ast::pat in br.pats { scores[i] += score(p); i += 1u; }"}, {"sha": "baf368ab6313b62daf1cc0457dfc08e1f9e0752f", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -413,7 +413,7 @@ fn val_str(tn: type_names, v: ValueRef) -> str { ret ty_str(tn, val_ty(v)); }\n fn struct_elt(llstructty: TypeRef, n: uint) -> TypeRef unsafe {\n     let elt_count = llvm::LLVMCountStructElementTypes(llstructty) as uint;\n     assert (n < elt_count);\n-    let elt_tys = vec::init_elt(T_nil(), elt_count);\n+    let elt_tys = vec::init_elt(elt_count, T_nil());\n     llvm::LLVMGetStructElementTypes(llstructty, to_ptr(elt_tys));\n     ret llvm::LLVMGetElementType(elt_tys[n]);\n }\n@@ -594,8 +594,8 @@ fn T_tydesc_field(cx: @crate_ctxt, field: int) -> TypeRef unsafe {\n     // Bit of a kludge: pick the fn typeref out of the tydesc..\n \n     let tydesc_elts: [TypeRef] =\n-        vec::init_elt::<TypeRef>(T_nil(),\n-                                      abi::n_tydesc_fields as uint);\n+        vec::init_elt::<TypeRef>(abi::n_tydesc_fields as uint,\n+                                 T_nil());\n     llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n                                     to_ptr::<TypeRef>(tydesc_elts));\n     let t = llvm::LLVMGetElementType(tydesc_elts[field]);\n@@ -729,7 +729,7 @@ fn T_opaque_tag_ptr(cx: @crate_ctxt) -> TypeRef {\n }\n \n fn T_captured_tydescs(cx: @crate_ctxt, n: uint) -> TypeRef {\n-    ret T_struct(vec::init_elt::<TypeRef>(T_ptr(cx.tydesc_type), n));\n+    ret T_struct(vec::init_elt::<TypeRef>(n, T_ptr(cx.tydesc_type)));\n }\n \n fn T_opaque_iface_ptr(cx: @crate_ctxt) -> TypeRef {"}, {"sha": "2e2e245a1c147df25722563233f9eb6e874a29fe", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -139,7 +139,7 @@ fn trans_iface_callee(bcx: @block_ctxt, fld_expr: @ast::expr,\n fn llfn_arg_tys(ft: TypeRef) -> {inputs: [TypeRef], output: TypeRef} {\n     let out_ty = llvm::LLVMGetReturnType(ft);\n     let n_args = llvm::LLVMCountParamTypes(ft);\n-    let args = vec::init_elt(0 as TypeRef, n_args as uint);\n+    let args = vec::init_elt(n_args as uint, 0 as TypeRef);\n     unsafe { llvm::LLVMGetParamTypes(ft, vec::to_ptr(args)); }\n     {inputs: args, output: out_ty}\n }"}, {"sha": "2a976d0469f998af9bdf88f9e54ace244c230126", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -360,8 +360,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n     alt e.node {\n       expr_vec(elts, _) {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n-                                      vec::init_elt(init_assign,\n-                                                    vec::len(elts)), elts,\n+                                      vec::init_elt(vec::len(elts),\n+                                                    init_assign), elts,\n                                       return_val);\n       }\n       expr_call(operator, operands, _) {\n@@ -404,8 +404,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         let exs = field_exprs(fields);\n         let changed =\n             find_pre_post_state_exprs(fcx, pres, e.id,\n-                                      vec::init_elt(init_assign,\n-                                                    vec::len(fields)),\n+                                      vec::init_elt(vec::len(fields),\n+                                                    init_assign),\n                                       exs, return_val);\n \n         let base_pres = alt vec::last(exs) { none { pres }\n@@ -418,8 +418,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       }\n       expr_tup(elts) {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n-                                      vec::init_elt(init_assign,\n-                                                    vec::len(elts)), elts,\n+                                      vec::init_elt(vec::len(elts),\n+                                                    init_assign), elts,\n                                       return_val);\n       }\n       expr_copy(a) { ret find_pre_post_state_sub(fcx, pres, a, e.id, none); }"}, {"sha": "992de7dab40586ed3489db57df389204b016e8f3", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -1650,7 +1650,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             // HACK: build an arguments list with dummy arguments to\n             // check against\n             let dummy = {mode: ast::by_ref, ty: ty::mk_bot(fcx.ccx.tcx)};\n-            arg_tys = vec::init_elt(dummy, supplied_arg_count);\n+            arg_tys = vec::init_elt(supplied_arg_count, dummy);\n         }\n \n         // Check the arguments."}, {"sha": "54227235957515ea5dfe6e6d67a3df17c05ef5a9", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -102,9 +102,9 @@ fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n     // fall behind.\n     let n: uint = 3u * linewidth;\n     #debug(\"mk_printer %u\", linewidth);\n-    let token: [mutable token] = vec::init_elt_mut(EOF, n);\n-    let size: [mutable int] = vec::init_elt_mut(0, n);\n-    let scan_stack: [mutable uint] = vec::init_elt_mut(0u, n);\n+    let token: [mutable token] = vec::init_elt_mut(n, EOF);\n+    let size: [mutable int] = vec::init_elt_mut(n, 0);\n+    let scan_stack: [mutable uint] = vec::init_elt_mut(n, 0u);\n     let print_stack: [print_stack_elt] = [];\n     @{out: out,\n       buf_len: n,"}, {"sha": "d3d02f08977cc4fe5809bf2ffb18c9f2e77b2144", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -230,7 +230,7 @@ fn check_expected_errors(expected_errors: [errors::expected_error],\n                          procres: procres) {\n \n     // true if we found the error in question\n-    let found_flags = vec::init_elt_mut(false, vec::len(expected_errors));\n+    let found_flags = vec::init_elt_mut(vec::len(expected_errors), false);\n \n     if procres.status == 0 {\n         fatal(\"process did not return an error status\");"}, {"sha": "a4a908b1c42d8847042e7b5f134cf482651265a9", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -388,7 +388,7 @@ mod rt {\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n     fn str_init_elt(c: char, n_elts: uint) -> str {\n-        let svec = vec::init_elt::<u8>(c as u8, n_elts);\n+        let svec = vec::init_elt::<u8>(n_elts, c as u8);\n \n         ret str::unsafe_from_bytes(svec);\n     }"}, {"sha": "f677af1efc7f5a626bc315d441fde6203d221f61", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -121,7 +121,7 @@ Creates and initializes an immutable vector.\n Creates an immutable vector of size `n_elts` and initializes the elements\n to the value `t`.\n */\n-fn init_elt<T: copy>(t: T, n_elts: uint) -> [T] {\n+fn init_elt<T: copy>(n_elts: uint, t: T) -> [T] {\n     let v = [];\n     reserve(v, n_elts);\n     let i: uint = 0u;\n@@ -138,7 +138,7 @@ Creates and initializes a mutable vector.\n Creates a mutable vector of size `n_elts` and initializes the elements\n to the value `t`.\n */\n-fn init_elt_mut<T: copy>(t: T, n_elts: uint) -> [mutable T] {\n+fn init_elt_mut<T: copy>(n_elts: uint, t: T) -> [mutable T] {\n     let v = [mutable];\n     reserve(v, n_elts);\n     let i: uint = 0u;\n@@ -1045,13 +1045,13 @@ mod tests {\n     #[test]\n     fn test_init_elt() {\n         // Test on-stack init_elt.\n-        let v = init_elt(10u, 2u);\n+        let v = init_elt(2u, 10u);\n         assert (len(v) == 2u);\n         assert (v[0] == 10u);\n         assert (v[1] == 10u);\n \n         // Test on-heap init_elt.\n-        v = init_elt(20u, 6u);\n+        v = init_elt(6u, 20u);\n         assert (v[0] == 20u);\n         assert (v[1] == 20u);\n         assert (v[2] == 20u);"}, {"sha": "59e6263f82f1a32b0538be95691710a7920b2b4b", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -49,7 +49,7 @@ init - If true then the bits are initialized to 1, otherwise 0\n */\n fn create(nbits: uint, init: bool) -> t {\n     let elt = if init { !0u } else { 0u };\n-    let storage = vec::init_elt_mut::<uint>(elt, nbits / uint_bits + 1u);\n+    let storage = vec::init_elt_mut::<uint>(nbits / uint_bits + 1u, elt);\n     ret @{storage: storage, nbits: nbits};\n }\n \n@@ -117,7 +117,7 @@ Function: clone\n Makes a copy of a bitvector\n */\n fn clone(v: t) -> t {\n-    let storage = vec::init_elt_mut::<uint>(0u, v.nbits / uint_bits + 1u);\n+    let storage = vec::init_elt_mut::<uint>(v.nbits / uint_bits + 1u, 0u);\n     let len = vec::len(v.storage);\n     uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n     ret @{storage: storage, nbits: v.nbits};"}, {"sha": "290b981306f6744512653c998d56ee009bd0da34", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -127,7 +127,7 @@ fn create<T: copy>() -> t<T> {\n         mutable nelts: 0u,\n         mutable lo: 0u,\n         mutable hi: 0u,\n-        mutable elts: vec::init_elt_mut(none, initial_capacity)\n+        mutable elts: vec::init_elt_mut(initial_capacity, none)\n     };\n     repr as t::<T>\n }"}, {"sha": "3e01d67bc553d1621f7df155c20e46a848d92cdf", "filename": "src/libstd/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -380,7 +380,7 @@ mod rt {\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n     fn str_init_elt(c: char, n_elts: uint) -> str {\n-        let svec = vec::init_elt::<u8>(c as u8, n_elts);\n+        let svec = vec::init_elt::<u8>(n_elts, c as u8);\n \n         ret str::unsafe_from_bytes(svec);\n     }"}, {"sha": "847262ca10cd7d535141ebdf867c65e337fb3a9c", "filename": "src/libstd/freebsd_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Ffreebsd_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Ffreebsd_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffreebsd_os.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -129,7 +129,7 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }\n /// followed by a path separator\n fn get_exe_path() -> option::t<fs::path> unsafe {\n     let bufsize = 1023u;\n-    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize));\n+    let path = str::unsafe_from_bytes(vec::init_elt(bufsize, 0u8));\n     let mib = [libc_constants::CTL_KERN,\n                libc_constants::KERN_PROC,\n                libc_constants::KERN_PROC_PATHNAME, -1i32];"}, {"sha": "7bc0212c1c2f6c5a14cff0f9550f1eab93bd2700", "filename": "src/libstd/linux_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flinux_os.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -125,7 +125,7 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }\n /// followed by a path separator\n fn get_exe_path() -> option::t<fs::path> {\n     let bufsize = 1023u;\n-    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize));\n+    let path = str::unsafe_from_bytes(vec::init_elt(bufsize, 0u8));\n     ret str::as_buf(\"/proc/self/exe\", { |proc_self_buf|\n         str::as_buf(path, { |path_buf|\n             if libc::readlink(proc_self_buf, path_buf, bufsize) != -1 {"}, {"sha": "b72fc732379310d61ae94b2d75d2671c80a7a3a8", "filename": "src/libstd/macos_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacos_os.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -134,7 +134,7 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".dylib\"; }\n fn get_exe_path() -> option::t<fs::path> {\n     // FIXME: This doesn't handle the case where the buffer is too small\n     let bufsize = 1023u32;\n-    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize as uint));\n+    let path = str::unsafe_from_bytes(vec::init_elt(bufsize as uint, 0u8));\n     ret str::as_buf(path, { |path_buf|\n         if mac_libc::_NSGetExecutablePath(path_buf,\n                                           ptr::mut_addr_of(bufsize)) == 0i32 {"}, {"sha": "c3517d4d3f6d3d4d2fd27725cf93271945bfab37", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -242,7 +242,7 @@ mod chained {\n     }\n \n     fn chains<K: copy, V: copy>(nchains: uint) -> [mutable chain<K,V>] {\n-        ret vec::init_elt_mut(absent, nchains);\n+        ret vec::init_elt_mut(nchains, absent);\n     }\n \n     fn foreach_entry<K: copy, V: copy>(chain0: chain<K,V>,"}, {"sha": "d31f0cb524ba3617bfdf01a47d41b098ae632d94", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -25,7 +25,7 @@ fn md4(msg: [u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     }\n \n     let i = 0u, e = vec::len(msg);\n-    let x = vec::init_elt_mut(0u32, 16u);\n+    let x = vec::init_elt_mut(16u, 0u32);\n     while i < e {\n         let aa = a, bb = b, cc = c, dd = d;\n "}, {"sha": "9290bf8992e3bd4ee6692a996587f30819f45e29", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -181,7 +181,7 @@ fn concat(v: [rope]) -> rope {\n     //Copy `v` into a mutable vector\n     let len   = vec::len(v);\n     if len == 0u { ret node::empty; }\n-    let ropes = vec::init_elt_mut(v[0], len);\n+    let ropes = vec::init_elt_mut(len, v[0]);\n     uint::range(1u, len) {|i|\n        ropes[i] = v[i];\n     }\n@@ -779,7 +779,7 @@ mod node {\n             //Firstly, split `str` in slices of hint_max_leaf_char_len\n             let leaves = uint::div_ceil(char_len, hint_max_leaf_char_len);\n             //Number of leaves\n-            let nodes  = vec::init_elt_mut(candidate, leaves);\n+            let nodes  = vec::init_elt_mut(leaves, candidate);\n \n             let i = 0u;\n             let offset = byte_start;\n@@ -892,7 +892,7 @@ mod node {\n     }\n \n     fn serialize_node(node: @node) -> str unsafe {\n-        let buf = vec::init_elt_mut(0u8, byte_len(node));\n+        let buf = vec::init_elt_mut(byte_len(node), 0u8);\n         let offset = 0u;//Current position in the buffer\n         let it = leaf_iterator::start(node);\n         while true {\n@@ -1223,7 +1223,7 @@ mod node {\n         }\n \n         fn start(node: @node) -> t {\n-            let stack = vec::init_elt_mut(node, height(node)+1u);\n+            let stack = vec::init_elt_mut(height(node)+1u, node);\n             ret {\n                 stack:             stack,\n                 mutable stackpos:  0\n@@ -1490,7 +1490,7 @@ mod tests {\n         }\n \n         //Same rope, obtained with rope::concat\n-        let r2 = concat(vec::init_elt(chunk, 10u));\n+        let r2 = concat(vec::init_elt(10u, chunk));\n \n         assert eq(r, r2);\n     }"}, {"sha": "e23737a6c3f98b23da8328f0a9a35be5b27e4e6e", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -274,13 +274,13 @@ fn mk_sha1() -> sha1 {\n         }\n     }\n     let st = {\n-        h: vec::init_elt_mut(0u32, digest_buf_len),\n+        h: vec::init_elt_mut(digest_buf_len, 0u32),\n         mutable len_low: 0u32,\n         mutable len_high: 0u32,\n-        msg_block: vec::init_elt_mut(0u8, msg_block_len),\n+        msg_block: vec::init_elt_mut(msg_block_len, 0u8),\n         mutable msg_block_idx: 0u,\n         mutable computed: false,\n-        work_buf: vec::init_elt_mut(0u32, work_buf_len)\n+        work_buf: vec::init_elt_mut(work_buf_len, 0u32)\n     };\n     let sh = st as sha1;\n     sh.reset();"}, {"sha": "949c818a7ed9d67428d5ef4b48394a0b4f010ac2", "filename": "src/libstd/win32_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Flibstd%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fwin32_os.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -114,7 +114,7 @@ fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n fn get_exe_path() -> option::t<fs::path> {\n     // FIXME: This doesn't handle the case where the buffer is too small\n     let bufsize = 1023u;\n-    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize));\n+    let path = str::unsafe_from_bytes(vec::init_elt(bufsize, 0u8));\n     ret str::as_buf(path, { |path_buf|\n         if kernel32::GetModuleFileNameA(0u, path_buf,\n                                         bufsize as u32) != 0u32 {"}, {"sha": "a4b9528cfeb6b97f67c299644bc3790c3513dcdf", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -39,7 +39,7 @@ enum hlvl {\n }\n \n fn write_header(ctxt: ctxt, lvl: hlvl, title: str) {\n-    let hashes = str::from_chars(vec::init_elt('#', lvl as uint));\n+    let hashes = str::from_chars(vec::init_elt(lvl as uint, '#'));\n     ctxt.w.write_line(#fmt(\"%s %s\", hashes, title));\n     ctxt.w.write_line(\"\");\n }"}, {"sha": "65c1971af6e881858e4fa0c18119e8450abf8665", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -6,9 +6,9 @@ import vec;\n fn fannkuch(n: int) -> int {\n     fn perm1init(i: uint) -> int { ret i as int; }\n \n-    let perm = vec::init_elt_mut(0, n as uint);\n+    let perm = vec::init_elt_mut(n as uint, 0);\n     let perm1 = vec::init_fn_mut(n as uint, perm1init);\n-    let count = vec::init_elt_mut(0, n as uint);\n+    let count = vec::init_elt_mut(n as uint, 0);\n     let f = 0;\n     let i = 0;\n     let k = 0;"}, {"sha": "7a068eb51b25cb0c058cbc4520cb8a31f3a67f99", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -31,7 +31,7 @@ enum grid_t { grid_ctor(grid), }\n fn read_grid(f: io::reader) -> grid_t {\n     assert f.read_line() == \"9,9\"; /* assert first line is exactly \"9,9\" */\n \n-    let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(0 as u8, 10u) });\n+    let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(10u, 0 as u8) });\n     while !f.eof() {\n         // FIXME: replace with unicode compliant call\n         let comps = str::split(str::trim(f.read_line()), ',' as u8);\n@@ -130,7 +130,7 @@ fn write_grid(f: io::writer, g: grid_t) {\n fn main(args: [str]) {\n     let grid = if vec::len(args) == 1u {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n-        let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(0 as u8, 10u) });\n+        let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(10u, 0 as u8) });\n         g[0][1] = 4u8;\n         g[0][3] = 6u8;\n         g[0][7] = 3u8;"}, {"sha": "7f1aa92a47f12bc3cf57e7336b6eabcbdd2ece73", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -3,7 +3,7 @@ use std;\n import vec::*;\n \n fn main() {\n-    let v = init_elt(0, 0u);\n+    let v = init_elt(0u, 0);\n     v += [4, 2];\n     assert (reversed(v) == [2, 4]);\n }"}, {"sha": "6e5e65bb7361b01b65be518b4b551e4489033b69", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7763b40c71372c6be7a65673a968f6174bab4209/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=7763b40c71372c6be7a65673a968f6174bab4209", "patch": "@@ -7,7 +7,7 @@\n mod m {\n     use std;\n     import vec;\n-    fn f() -> [int] { vec::init_elt(0, 1u) }\n+    fn f() -> [int] { vec::init_elt(1u, 0) }\n }\n \n fn main() { let x = m::f(); }"}]}