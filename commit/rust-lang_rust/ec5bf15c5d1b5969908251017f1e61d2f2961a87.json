{"sha": "ec5bf15c5d1b5969908251017f1e61d2f2961a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNWJmMTVjNWQxYjU5Njk5MDgyNTEwMTdmMWU2MWQyZjI5NjFhODc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-13T01:52:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T01:52:57Z"}, "message": "Rollup merge of #69082 - estebank:boxfuture-box-pin, r=tmandry\n\nWhen expecting `BoxFuture` and using `async {}`, suggest `Box::pin`\n\nFix #68197, cc #69083.", "tree": {"sha": "5fef428c2e3ded862487e18f4e4e4fa439a9c9a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fef428c2e3ded862487e18f4e4e4fa439a9c9a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec5bf15c5d1b5969908251017f1e61d2f2961a87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRKv5CRBK7hj4Ov3rIwAAdHIIAKqXN2JwBz+CPnXZzX3D6IfO\nH56ayU6JsaLd3G5hqzwAFla7fV/HN4vPGScniqRmDfmlZ05KTLKigtt2crK1FBo2\nh4pcRZi06HM+yTfkLOQSe2FHYXoh905cirRzx5aeBFB6oPpjhIstChMTaFbAVEn0\nozTfVDUhpyrhhXWco5QE47fg/UCqHV3enbENOCQRmObG4iAbTLYJ+5vM5RpjW1XS\nizebhfAfkHJ+xUnjKSuFhJgwJav3qpiHqfJdsT05410mAPd5OUP43qwv6Rs3+zfE\nNX1b9iJmgpE4Whzct440WzoV9bM3u/N3KZYyaIuuxfOae9nPZWYB1mllMqbghiE=\n=5fv+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fef428c2e3ded862487e18f4e4e4fa439a9c9a5\nparent 2501a10670c331ad5fb51c64c6d991a9a66f8f31\nparent 248f5a4046ab5a90189f37c305c759b7cde8acb3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581558777 +0100\ncommitter GitHub <noreply@github.com> 1581558777 +0100\n\nRollup merge of #69082 - estebank:boxfuture-box-pin, r=tmandry\n\nWhen expecting `BoxFuture` and using `async {}`, suggest `Box::pin`\n\nFix #68197, cc #69083.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5bf15c5d1b5969908251017f1e61d2f2961a87", "html_url": "https://github.com/rust-lang/rust/commit/ec5bf15c5d1b5969908251017f1e61d2f2961a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec5bf15c5d1b5969908251017f1e61d2f2961a87/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2501a10670c331ad5fb51c64c6d991a9a66f8f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/2501a10670c331ad5fb51c64c6d991a9a66f8f31", "html_url": "https://github.com/rust-lang/rust/commit/2501a10670c331ad5fb51c64c6d991a9a66f8f31"}, {"sha": "248f5a4046ab5a90189f37c305c759b7cde8acb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/248f5a4046ab5a90189f37c305c759b7cde8acb3", "html_url": "https://github.com/rust-lang/rust/commit/248f5a4046ab5a90189f37c305c759b7cde8acb3"}], "stats": {"total": 129, "additions": 119, "deletions": 10}, "files": [{"sha": "2800f11cc01b1ae43600b4e82df2ceac154050e8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -727,6 +727,10 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`Pin<P>`]: ../pin/struct.Pin.html\n /// [`pin module`]: ../../std/pin/index.html\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n+#[rustc_on_unimplemented(\n+    on(_Self = \"std::future::Future\", note = \"consider using `Box::pin`\",),\n+    message = \"`{Self}` cannot be unpinned\"\n+)]\n #[lang = \"unpin\"]\n pub auto trait Unpin {}\n "}, {"sha": "ab2d74b1c8deb809bbbc2a0e4baad96811e601c4", "filename": "src/librustc/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -201,6 +201,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n+        if let ty::Dynamic(traits, _) = self_ty.kind {\n+            for t in *traits.skip_binder() {\n+                match t {\n+                    ty::ExistentialPredicate::Trait(trait_ref) => {\n+                        flags.push((sym::_Self, Some(self.tcx.def_path_str(trait_ref.def_id))))\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n \n         if let Ok(Some(command)) =\n             OnUnimplementedDirective::of_item(self.tcx, trait_ref.def_id, def_id)"}, {"sha": "82b73518d09a86d4e84ee6aa5b5f322df38b322d", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -701,10 +701,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>();\n                 // Add the suggestion for the return type.\n-                suggestions.push((\n-                    ret_ty.span,\n-                    format!(\"Box<{}{}>\", if has_dyn { \"\" } else { \"dyn \" }, snippet),\n-                ));\n+                suggestions.push((ret_ty.span, format!(\"Box<dyn {}>\", trait_obj)));\n                 err.multipart_suggestion(\n                     \"return a boxed trait object instead\",\n                     suggestions,"}, {"sha": "4a98095ec89c6b058db26867a2fec95c9fdca8d0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -24,6 +24,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_ref_or_into(err, expr, expected, expr_ty);\n+        if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n+            return;\n+        }\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n     }"}, {"sha": "fd0c994a6eadfb39e1ff83954384752f0676a702", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -5038,14 +5038,60 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n             err.note(\n-                \"for more on the distinction between the stack and the \\\n-                        heap, read https://doc.rust-lang.org/book/ch15-01-box.html, \\\n-                        https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n-                        https://doc.rust-lang.org/std/boxed/index.html\",\n+                \"for more on the distinction between the stack and the heap, read \\\n+                 https://doc.rust-lang.org/book/ch15-01-box.html, \\\n+                 https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n+                 https://doc.rust-lang.org/std/boxed/index.html\",\n             );\n         }\n     }\n \n+    /// When encountering an `impl Future` where `BoxFuture` is expected, suggest `Box::pin`.\n+    fn suggest_calling_boxed_future_when_appropriate(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) -> bool {\n+        // Handle #68197.\n+\n+        if self.tcx.hir().is_const_context(expr.hir_id) {\n+            // Do not suggest `Box::new` in const context.\n+            return false;\n+        }\n+        let pin_did = self.tcx.lang_items().pin_type();\n+        match expected.kind {\n+            ty::Adt(def, _) if Some(def.did) != pin_did => return false,\n+            // This guards the `unwrap` and `mk_box` below.\n+            _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return false,\n+            _ => {}\n+        }\n+        let boxed_found = self.tcx.mk_box(found);\n+        let new_found = self.tcx.mk_lang_item(boxed_found, lang_items::PinTypeLangItem).unwrap();\n+        if let (true, Ok(snippet)) = (\n+            self.can_coerce(new_found, expected),\n+            self.sess().source_map().span_to_snippet(expr.span),\n+        ) {\n+            match found.kind {\n+                ty::Adt(def, _) if def.is_box() => {\n+                    err.help(\"use `Box::pin`\");\n+                }\n+                _ => {\n+                    err.span_suggestion(\n+                        expr.span,\n+                        \"you need to pin and box this expression\",\n+                        format!(\"Box::pin({})\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// A common error is to forget to add a semicolon at the end of a block, e.g.,\n     ///\n     /// ```"}, {"sha": "cfcb94737be6f46c8bae504d2b06551890121796", "filename": "src/test/ui/generator/static-not-unpin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     let mut generator = static || {\n         yield;\n     };\n-    assert_unpin(generator); //~ ERROR std::marker::Unpin` is not satisfied\n+    assert_unpin(generator); //~ ERROR E0277\n }"}, {"sha": "6512d67319b0b6327cf6666040f80711ae144167", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]: std::marker::Unpin` is not satisfied\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]` cannot be unpinned\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {"}, {"sha": "0a1686eac9d349ec3320a0486a160e0bf39a7024", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -0,0 +1,29 @@\n+// edition:2018\n+#![allow(dead_code)]\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n+//   ^^^^^^^^^ This would come from the `futures` crate in real code.\n+\n+fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    // We could instead use an `async` block, but this way we have no std spans.\n+    x //~ ERROR mismatched types\n+}\n+\n+// FIXME: uncomment these once this commit is in Beta and we can rely on `rustc_on_unimplemented`\n+//        having filtering for `Self` being a trait.\n+//\n+// fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+//     Box::new(x)\n+// }\n+//\n+// fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+//     Pin::new(x)\n+// }\n+//\n+// fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+//     Pin::new(Box::new(x))\n+// }\n+\n+fn main() {}"}, {"sha": "48d941283b62de912189fe0811766552ea3fe001", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec5bf15c5d1b5969908251017f1e61d2f2961a87/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=ec5bf15c5d1b5969908251017f1e61d2f2961a87", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:11:5\n+   |\n+LL | fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |        - this type parameter                            ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL |     // We could instead use an `async` block, but this way we have no std spans.\n+LL |     x\n+   |     ^\n+   |     |\n+   |     expected struct `std::pin::Pin`, found type parameter `F`\n+   |     help: you need to pin and box this expression: `Box::pin(x)`\n+   |\n+   = note:      expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+           found type parameter `F`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}