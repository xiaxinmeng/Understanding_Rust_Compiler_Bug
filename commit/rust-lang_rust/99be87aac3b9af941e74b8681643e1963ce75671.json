{"sha": "99be87aac3b9af941e74b8681643e1963ce75671", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YmU4N2FhYzNiOWFmOTQxZTc0Yjg2ODE2NDNlMTk2M2NlNzU2NzE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-05T09:35:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-07T09:42:54Z"}, "message": "unify error handling to single method", "tree": {"sha": "b18c23ebee3a4c5d52a0f0391141002d50e3d12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b18c23ebee3a4c5d52a0f0391141002d50e3d12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99be87aac3b9af941e74b8681643e1963ce75671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99be87aac3b9af941e74b8681643e1963ce75671", "html_url": "https://github.com/rust-lang/rust/commit/99be87aac3b9af941e74b8681643e1963ce75671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99be87aac3b9af941e74b8681643e1963ce75671/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7451cd8dc0b20c012fad1886b321c3dee2052577", "url": "https://api.github.com/repos/rust-lang/rust/commits/7451cd8dc0b20c012fad1886b321c3dee2052577", "html_url": "https://github.com/rust-lang/rust/commit/7451cd8dc0b20c012fad1886b321c3dee2052577"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "fd4089dfdb9db0f137e70c210360309ba982be87", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=99be87aac3b9af941e74b8681643e1963ce75671", "patch": "@@ -29,6 +29,7 @@ use syntax::attr;\n use syntax::source_map;\n use syntax::edition::Edition;\n use syntax::parse::source_file_to_stream;\n+use syntax::parse::parser::emit_unclosed_delims;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, NO_EXPANSION, FileName};\n use rustc_data_structures::bit_set::BitSet;\n@@ -437,12 +438,7 @@ impl cstore::CStore {\n         let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n         let local_span = Span::new(source_file.start_pos, source_file.end_pos, NO_EXPANSION);\n         let (body, errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n-        for err in errors {\n-            sess.struct_span_err(\n-                err.found_span,\n-                \"unclosed delimiter cstore\",\n-            ).emit();\n-        }\n+        emit_unclosed_delims(&errors, &sess.diagnostic());\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);"}, {"sha": "317d69332078687460da9cae9243bac8eff3a954", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=99be87aac3b9af941e74b8681643e1963ce75671", "patch": "@@ -275,6 +275,7 @@ pub fn maybe_file_to_stream(\n         Err(err) => {\n             let mut buffer = Vec::with_capacity(1);\n             err.buffer(&mut buffer);\n+            // Not using `emit_unclosed_delims` to use `db.buffer`\n             for unmatched in srdr.unmatched_braces {\n                 let mut db = sess.span_diagnostic.struct_span_err(unmatched.found_span, &format!(\n                     \"incorrect close delimiter: `{}`\","}, {"sha": "4a932ab7bd19c1ce9a1d11d7875411cc3215c0d4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=99be87aac3b9af941e74b8681643e1963ce75671", "patch": "@@ -724,7 +724,7 @@ impl<'a> Parser<'a> {\n                 if let Some(sp) = unmatched.unclosed_span {\n                     err.span_label(sp, \"in order to close this...\");\n                 }\n-                err.span_suggestion_short_with_applicability(\n+                err.span_suggestion_short(\n                     self.sess.source_map().next_point(self.prev_span),\n                     &format!(\"{} may belong here\", delim.to_string()),\n                     delim.to_string(),\n@@ -1180,7 +1180,7 @@ impl<'a> Parser<'a> {\n                     //     self.struct_span_err(\n                     //         self.span,\n                     //         &format!(\"expected `>`, found `{}`\", self.this_token_to_string()),\n-                    //     // ).span_suggestion_short_with_applicability(\n+                    //     // ).span_suggestion_short(\n                     //     ).emit();\n                     //     Ok(())\n                     // }\n@@ -8503,20 +8503,7 @@ impl<'a> Parser<'a> {\n             module: self.parse_mod_items(&token::Eof, lo)?,\n             span: lo.to(self.span),\n         });\n-        for unmatched in &self.unclosed_delims {\n-            let mut err = self.struct_span_err(unmatched.found_span, &format!(\n-                \"incorrect close delimiter: `{}`\",\n-                pprust::token_to_string(&token::Token::CloseDelim(unmatched.found_delim)),\n-            ));\n-            err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n-            if let Some(sp) = unmatched.candidate_span {\n-                err.span_label(sp, \"close delimiter possibly meant for this\");\n-            }\n-            if let Some(sp) = unmatched.unclosed_span {\n-                err.span_label(sp, \"un-closed delimiter\");\n-            }\n-            err.emit();\n-        }\n+        emit_unclosed_delims(&self.unclosed_delims, self.diagnostic());\n         self.unclosed_delims.clear();\n         krate\n     }\n@@ -8547,3 +8534,20 @@ impl<'a> Parser<'a> {\n         }\n     }\n }\n+\n+pub fn emit_unclosed_delims(unclosed_delims: &[UnmatchedBrace], handler: &errors::Handler) {\n+    for unmatched in unclosed_delims {\n+        let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n+            \"incorrect close delimiter: `{}`\",\n+            pprust::token_to_string(&token::Token::CloseDelim(unmatched.found_delim)),\n+        ));\n+        err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n+        if let Some(sp) = unmatched.candidate_span {\n+            err.span_label(sp, \"close delimiter possibly meant for this\");\n+        }\n+        if let Some(sp) = unmatched.unclosed_span {\n+            err.span_label(sp, \"un-closed delimiter\");\n+        }\n+        err.emit();\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d144223d1b8ebe446c7ffde04cb70a0c87a310a4", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=99be87aac3b9af941e74b8681643e1963ce75671", "patch": "@@ -10,6 +10,7 @@ use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::keywords;\n use crate::syntax::parse::parse_stream_from_source_str;\n+use crate::syntax::parse::parser::emit_unclosed_delims;\n use crate::tokenstream::{self, DelimSpan, TokenStream, TokenTree};\n \n use serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -547,12 +548,7 @@ impl Token {\n             let filename = FileName::macro_expansion_source_code(&source);\n             let (tokens, errors) = parse_stream_from_source_str(\n                 filename, source, sess, Some(span));\n-            for err in errors {\n-                sess.span_diagnostic.struct_span_err(\n-                    err.found_span,\n-                    \"unclosed delimiter for_real\",\n-                ).emit();\n-            }\n+            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n             tokens\n         });\n \n@@ -800,12 +796,7 @@ fn prepend_attrs(sess: &ParseSess,\n                 sess,\n                 Some(span),\n             );\n-            for err in errors {\n-                sess.span_diagnostic.struct_span_err(\n-                    err.found_span,\n-                    \"unclosed delimiter attrs\",\n-                ).emit();\n-            }\n+            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n             builder.push(stream);\n             continue\n         }\n@@ -828,12 +819,7 @@ fn prepend_attrs(sess: &ParseSess,\n                 sess,\n                 Some(span),\n             );\n-            for err in errors {\n-                sess.span_diagnostic.struct_span_err(\n-                    err.found_span,\n-                    \"unclosed delimiter attrs 2\",\n-                ).emit();\n-            }\n+            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n             brackets.push(stream);\n         }\n "}, {"sha": "38d12db13ef7fe095da6eddfe627adc156fdb7a5", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be87aac3b9af941e74b8681643e1963ce75671/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=99be87aac3b9af941e74b8681643e1963ce75671", "patch": "@@ -11,6 +11,7 @@ use syntax::ast;\n use syntax::ext::base::ExtCtxt;\n use syntax::parse::lexer::comments;\n use syntax::parse::{self, token, ParseSess};\n+use syntax::parse::parser::emit_unclosed_delims;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax_pos::hygiene::{SyntaxContext, Transparency};\n use syntax_pos::symbol::{keywords, Symbol};\n@@ -408,12 +409,14 @@ impl server::TokenStream for Rustc<'_> {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        parse::parse_stream_from_source_str(\n+        let (tokens, errors) = parse::parse_stream_from_source_str(\n             FileName::proc_macro_source_code(src.clone()),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),\n-        ).0\n+        );\n+        emit_unclosed_delims(&errors, &self.sess.span_diagnostic);\n+        tokens\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n         stream.to_string()"}]}