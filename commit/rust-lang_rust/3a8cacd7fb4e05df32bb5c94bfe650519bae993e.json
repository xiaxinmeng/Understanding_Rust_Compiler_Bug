{"sha": "3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "node_id": "C_kwDOAAsO6NoAKDNhOGNhY2Q3ZmI0ZTA1ZGYzMmJiNWM5NGJmZTY1MDUxOWJhZTk5M2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-16T07:36:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-16T07:36:11Z"}, "message": "Rollup merge of #104348 - fmease:iat-vis-stab, r=cjgillot\n\nRespect visibility & stability of inherent associated types\n\nAs discussed in #103621, this probably won't be the final location of the code that resolves inherent associated types. Still, I think it's valuable to push correctness fixes for this feature (in regards to visibility and stability).\n\nLet me know if I should write a translatable diagnostic instead and if I should move the tests to `privacy/` and `stability-attribute/` respectively.\n\nFixes #104243.\n````@rustbot```` label A-visibility F-inherent_associated_types\nr? ````@cjgillot```` (since you reviewed #103621, feel free to reroll though)", "tree": {"sha": "376f6c8291883f928e102ed134b7b2455f49afcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/376f6c8291883f928e102ed134b7b2455f49afcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjdJLrCRBK7hj4Ov3rIwAAA6gIADEPbNrnmWnA44dViTDrNrwD\nvktdfsPuHzMZRp7SzAxbrTnVrlfoQfbyo9pLX6zUCO5BYTgmStaEGxPY9StDyBeI\nDjQIpT/nMhIJTPh/fR38/U/qkDSkaq8tmPHUuNaA9IfJv1ykrAgAA2Nji5VFMiS1\nD7OhTB3U7HHBjTXT22PoXl8nlHmXhd47MXzBwOg3XbwZt6dA6WJv2CphYWMFHPzU\nptvtfrbYTjw4Scl/ln2/8U2Q4fOhaTolHv9yH5S39WFFjdT/UPwjCNgZ3yMpBFmM\nip4PLk0WA/3l1thkIVlJYO6NteKrWq4Z2Id0asABoeOwHCd1CYhkOdP0HMRN3Tg=\n=IT0L\n-----END PGP SIGNATURE-----\n", "payload": "tree 376f6c8291883f928e102ed134b7b2455f49afcf\nparent 88a19197b9f57b84a091c34d59c3d9ae72f03511\nparent 70ad2f53449995eb632eb9ef8f7740b34afb46b3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668584171 +0100\ncommitter GitHub <noreply@github.com> 1668584171 +0100\n\nRollup merge of #104348 - fmease:iat-vis-stab, r=cjgillot\n\nRespect visibility & stability of inherent associated types\n\nAs discussed in #103621, this probably won't be the final location of the code that resolves inherent associated types. Still, I think it's valuable to push correctness fixes for this feature (in regards to visibility and stability).\n\nLet me know if I should write a translatable diagnostic instead and if I should move the tests to `privacy/` and `stability-attribute/` respectively.\n\nFixes #104243.\n````@rustbot```` label A-visibility F-inherent_associated_types\nr? ````@cjgillot```` (since you reviewed #103621, feel free to reroll though)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "html_url": "https://github.com/rust-lang/rust/commit/3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88a19197b9f57b84a091c34d59c3d9ae72f03511", "url": "https://api.github.com/repos/rust-lang/rust/commits/88a19197b9f57b84a091c34d59c3d9ae72f03511", "html_url": "https://github.com/rust-lang/rust/commit/88a19197b9f57b84a091c34d59c3d9ae72f03511"}, {"sha": "70ad2f53449995eb632eb9ef8f7740b34afb46b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ad2f53449995eb632eb9ef8f7740b34afb46b3", "html_url": "https://github.com/rust-lang/rust/commit/70ad2f53449995eb632eb9ef8f7740b34afb46b3"}], "stats": {"total": 160, "additions": 122, "deletions": 38}, "files": [{"sha": "7a2d98dbe75b3138e7ea7648f904f0683b7723cc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -1917,17 +1917,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // see if we can satisfy using an inherent associated type\n-            for impl_ in tcx.inherent_impls(adt_def.did()) {\n-                let assoc_ty = tcx.associated_items(impl_).find_by_name_and_kind(\n-                    tcx,\n-                    assoc_ident,\n-                    ty::AssocKind::Type,\n-                    *impl_,\n-                );\n-                if let Some(assoc_ty) = assoc_ty {\n-                    let ty = tcx.type_of(assoc_ty.def_id);\n-                    return Ok((ty, DefKind::AssocTy, assoc_ty.def_id));\n-                }\n+            for &impl_ in tcx.inherent_impls(adt_def.did()) {\n+                let Some(assoc_ty_did) = self.lookup_assoc_ty(assoc_ident, hir_ref_id, span, impl_) else {\n+                    continue;\n+                };\n+                // FIXME(inherent_associated_types): This does not substitute parameters.\n+                let ty = tcx.type_of(assoc_ty_did);\n+                return Ok((ty, DefKind::AssocTy, assoc_ty_did));\n             }\n         }\n \n@@ -2014,37 +2010,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n \n         let trait_did = bound.def_id();\n-        let (assoc_ident, def_scope) =\n-            tcx.adjust_ident_and_get_scope(assoc_ident, trait_did, hir_ref_id);\n-\n-        // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n-        // of calling `filter_by_name_and_kind`.\n-        let item = tcx.associated_items(trait_did).in_definition_order().find(|i| {\n-            i.kind.namespace() == Namespace::TypeNS\n-                && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n-        });\n-        // Assume that if it's not matched, there must be a const defined with the same name\n-        // but it was used in a type position.\n-        let Some(item) = item else {\n+        let Some(assoc_ty_did) = self.lookup_assoc_ty(assoc_ident, hir_ref_id, span, trait_did) else {\n+            // Assume that if it's not matched, there must be a const defined with the same name\n+            // but it was used in a type position.\n             let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n             let guar = tcx.sess.struct_span_err(span, &msg).emit();\n             return Err(guar);\n         };\n \n-        let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n+        let ty = self.projected_ty_from_poly_trait_ref(span, assoc_ty_did, assoc_segment, bound);\n         let ty = self.normalize_ty(span, ty);\n \n-        let kind = DefKind::AssocTy;\n-        if !item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n-            let kind = kind.descr(item.def_id);\n-            let msg = format!(\"{} `{}` is private\", kind, assoc_ident);\n-            tcx.sess\n-                .struct_span_err(span, &msg)\n-                .span_label(span, &format!(\"private {}\", kind))\n-                .emit();\n-        }\n-        tcx.check_stability(item.def_id, Some(hir_ref_id), span, None);\n-\n         if let Some(variant_def_id) = variant_resolution {\n             tcx.struct_span_lint_hir(\n                 AMBIGUOUS_ASSOCIATED_ITEMS,\n@@ -2063,7 +2039,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     };\n \n                     could_refer_to(DefKind::Variant, variant_def_id, \"\");\n-                    could_refer_to(kind, item.def_id, \" also\");\n+                    could_refer_to(DefKind::AssocTy, assoc_ty_did, \" also\");\n \n                     lint.span_suggestion(\n                         span,\n@@ -2076,7 +2052,40 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 },\n             );\n         }\n-        Ok((ty, kind, item.def_id))\n+        Ok((ty, DefKind::AssocTy, assoc_ty_did))\n+    }\n+\n+    fn lookup_assoc_ty(\n+        &self,\n+        ident: Ident,\n+        block: hir::HirId,\n+        span: Span,\n+        scope: DefId,\n+    ) -> Option<DefId> {\n+        let tcx = self.tcx();\n+        let (ident, def_scope) = tcx.adjust_ident_and_get_scope(ident, scope, block);\n+\n+        // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n+        // of calling `find_by_name_and_kind`.\n+        let item = tcx.associated_items(scope).in_definition_order().find(|i| {\n+            i.kind.namespace() == Namespace::TypeNS\n+                && i.ident(tcx).normalize_to_macros_2_0() == ident\n+        })?;\n+\n+        let kind = DefKind::AssocTy;\n+        if !item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n+            let kind = kind.descr(item.def_id);\n+            let msg = format!(\"{kind} `{ident}` is private\");\n+            let def_span = self.tcx().def_span(item.def_id);\n+            tcx.sess\n+                .struct_span_err_with_code(span, &msg, rustc_errors::error_code!(E0624))\n+                .span_label(span, &format!(\"private {kind}\"))\n+                .span_label(def_span, &format!(\"{kind} defined here\"))\n+                .emit();\n+        }\n+        tcx.check_stability(item.def_id, Some(block), span, None);\n+\n+        Some(item.def_id)\n     }\n \n     fn qpath_to_ty("}, {"sha": "531581954438075467790ca56f43bcf6a3f733af", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-private.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.rs?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -0,0 +1,23 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+mod m {\n+    pub struct T;\n+    impl T {\n+        type P = ();\n+    }\n+}\n+type U = m::T::P; //~ ERROR associated type `P` is private\n+\n+mod n {\n+    pub mod n {\n+        pub struct T;\n+        impl T {\n+            pub(super) type P = bool;\n+        }\n+    }\n+    type U = n::T::P;\n+}\n+type V = n::n::T::P; //~ ERROR associated type `P` is private\n+\n+fn main() {}"}, {"sha": "d67b45dae3fbe9881a4e8804c38371e58f36f3ad", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-private.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-private.stderr?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -0,0 +1,21 @@\n+error[E0624]: associated type `P` is private\n+  --> $DIR/assoc-inherent-private.rs:10:10\n+   |\n+LL |         type P = ();\n+   |         ------ associated type defined here\n+...\n+LL | type U = m::T::P;\n+   |          ^^^^^^^ private associated type\n+\n+error[E0624]: associated type `P` is private\n+  --> $DIR/assoc-inherent-private.rs:21:10\n+   |\n+LL |             pub(super) type P = bool;\n+   |             ----------------- associated type defined here\n+...\n+LL | type V = n::n::T::P;\n+   |          ^^^^^^^^^^ private associated type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0624`."}, {"sha": "34b4e47bf462e7d8324b74587d379074f949da76", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-unstable.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.rs?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -0,0 +1,6 @@\n+// aux-crate:aux=assoc-inherent-unstable.rs\n+// edition: 2021\n+\n+type Data = aux::Owner::Data; //~ ERROR use of unstable library feature 'data'\n+\n+fn main() {}"}, {"sha": "c0be8bfd79bfc09626a9058d8901140ff79344b4", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-unstable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-unstable.stderr?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'data'\n+  --> $DIR/assoc-inherent-unstable.rs:4:13\n+   |\n+LL | type Data = aux::Owner::Data;\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(data)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6b71ffc97b57a1d479d897716e2955ab798b987c", "filename": "src/test/ui/associated-inherent-types/auxiliary/assoc-inherent-unstable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fauxiliary%2Fassoc-inherent-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fauxiliary%2Fassoc-inherent-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fauxiliary%2Fassoc-inherent-unstable.rs?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -0,0 +1,11 @@\n+#![feature(staged_api)]\n+#![feature(inherent_associated_types)]\n+#![stable(feature = \"main\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"main\", since = \"1.0.0\")]\n+pub struct Owner;\n+\n+impl Owner {\n+    #[unstable(feature = \"data\", issue = \"none\")]\n+    pub type Data = ();\n+}"}, {"sha": "f137a298a7f41a533b69b22a9eddbd08853d73f7", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a8cacd7fb4e05df32bb5c94bfe650519bae993e/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=3a8cacd7fb4e05df32bb5c94bfe650519bae993e", "patch": "@@ -162,9 +162,12 @@ error[E0223]: ambiguous associated type\n LL |     let _: S::C;\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::C`\n \n-error: associated type `A` is private\n+error[E0624]: associated type `A` is private\n   --> $DIR/item-privacy.rs:119:12\n    |\n+LL |         type A = u8;\n+   |         ------ associated type defined here\n+...\n LL |     let _: T::A;\n    |            ^^^^ private associated type\n "}]}