{"sha": "0b958e74acc57b8eb7074f8c55f494b03d941656", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTU4ZTc0YWNjNTdiOGViNzA3NGY4YzU1ZjQ5NGIwM2Q5NDE2NTY=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-01-23T00:45:27Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T19:46:19Z"}, "message": "renaming to adhere to conventions", "tree": {"sha": "345980f56a4e206960fc30a0c0876a622f3f8153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345980f56a4e206960fc30a0c0876a622f3f8153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b958e74acc57b8eb7074f8c55f494b03d941656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b958e74acc57b8eb7074f8c55f494b03d941656", "html_url": "https://github.com/rust-lang/rust/commit/0b958e74acc57b8eb7074f8c55f494b03d941656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b958e74acc57b8eb7074f8c55f494b03d941656/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dbfb5da0b262e2e40b9b1d13ad4193a93ef97ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbfb5da0b262e2e40b9b1d13ad4193a93ef97ef", "html_url": "https://github.com/rust-lang/rust/commit/6dbfb5da0b262e2e40b9b1d13ad4193a93ef97ef"}], "stats": {"total": 212, "additions": 102, "deletions": 110}, "files": [{"sha": "65216e55493ce5c2209839c3a0f0b73172347179", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -33,8 +33,6 @@ macro_rules! interner_key (\n         (-3 as uint, 0u)))\n )\n \n-// FIXME(#3534): Replace with the struct-based newtype when it's been\n-// implemented.\n struct ident { repr: uint }\n \n impl<S: Encoder> ident: Encodable<S> {"}, {"sha": "a8c05296390b529a43b3650ac301f51b54e0e0ca", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -25,65 +25,65 @@ use std::map::HashMap;\n \n // new-style macro! tt code:\n //\n-//    syntax_expander_tt, syntax_expander_tt_item, mac_result,\n-//    normal_tt, item_tt\n+//    SyntaxExpanderTT, SyntaxExpanderTTItem, MacResult,\n+//    NormalTT, ItemTT\n //\n // also note that ast::mac used to have a bunch of extraneous cases and\n // is now probably a redundant AST node, can be merged with\n // ast::mac_invoc_tt.\n \n-struct macro_def {\n+struct MacroDef {\n     name: ~str,\n-    ext: syntax_extension,\n+    ext: SyntaxExtension\n }\n \n-type item_decorator =\n+type ItemDecorator =\n     fn@(ext_ctxt, span, ast::meta_item, ~[@ast::item]) -> ~[@ast::item];\n \n-struct syntax_expander_tt {\n-    expander: syntax_expander_tt_,\n-    span: Option<span>,\n+struct SyntaxExpanderTT {\n+    expander: SyntaxExpanderTTFun,\n+    span: Option<span>\n }\n \n-type syntax_expander_tt_ = fn@(ext_ctxt, span, ~[ast::token_tree])\n-    -> mac_result;\n+type SyntaxExpanderTTFun = fn@(ext_ctxt, span, ~[ast::token_tree])\n+    -> MacResult;\n \n-struct syntax_expander_tt_item {\n-    expander: syntax_expander_tt_item_,\n-    span: Option<span>,\n+struct SyntaxExpanderTTItem {\n+    expander: SyntaxExpanderTTItemFun,\n+    span: Option<span>\n }\n \n-type syntax_expander_tt_item_\n-    = fn@(ext_ctxt, span, ast::ident, ~[ast::token_tree]) -> mac_result;\n+type SyntaxExpanderTTItemFun\n+    = fn@(ext_ctxt, span, ast::ident, ~[ast::token_tree]) -> MacResult;\n \n-enum mac_result {\n-    mr_expr(@ast::expr),\n-    mr_item(@ast::item),\n-    mr_any(fn@()-> @ast::expr, fn@()-> Option<@ast::item>, fn@()->@ast::stmt),\n-    mr_def(macro_def)\n+enum MacResult {\n+    MRExpr(@ast::expr),\n+    MRItem(@ast::item),\n+    MRAny(fn@()-> @ast::expr, fn@()-> Option<@ast::item>, fn@()->@ast::stmt),\n+    MRDef(MacroDef)\n }\n \n-enum syntax_extension {\n+enum SyntaxExtension {\n \n     // #[auto_encode] and such\n-    item_decorator(item_decorator),\n+    ItemDecorator(ItemDecorator),\n \n     // Token-tree expanders\n-    normal_tt(syntax_expander_tt),\n+    NormalTT(SyntaxExpanderTT),\n \n     // perhaps macro_rules! will lose its odd special identifier argument,\n     // and this can go away also\n-    item_tt(syntax_expander_tt_item),\n+    ItemTT(SyntaxExpanderTTItem),\n }\n \n // A temporary hard-coded map of methods for expanding syntax extension\n // AST nodes into full ASTs\n-fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n-    fn builtin_normal_tt(f: syntax_expander_tt_) -> syntax_extension {\n-        normal_tt(syntax_expander_tt {expander: f, span: None})\n+fn syntax_expander_table() -> HashMap<~str, SyntaxExtension> {\n+    fn builtin_normal_tt(f: SyntaxExpanderTTFun) -> SyntaxExtension {\n+        NormalTT(SyntaxExpanderTT{expander: f, span: None})\n     }\n-    fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n-        item_tt(syntax_expander_tt_item {expander: f, span: None})\n+    fn builtin_item_tt(f: SyntaxExpanderTTItemFun) -> SyntaxExtension {\n+        ItemTT(SyntaxExpanderTTItem{expander: f, span: None})\n     }\n     let syntax_expanders = HashMap();\n     syntax_expanders.insert(~\"macro_rules\",\n@@ -93,10 +93,10 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n                             builtin_normal_tt(ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(\n         ~\"auto_encode\",\n-        item_decorator(ext::auto_encode::expand_auto_encode));\n+        ItemDecorator(ext::auto_encode::expand_auto_encode));\n     syntax_expanders.insert(\n         ~\"auto_decode\",\n-        item_decorator(ext::auto_encode::expand_auto_decode));\n+        ItemDecorator(ext::auto_encode::expand_auto_decode));\n     syntax_expanders.insert(~\"env\",\n                             builtin_normal_tt(ext::env::expand_syntax_ext));\n     syntax_expanders.insert(~\"concat_idents\",\n@@ -106,10 +106,10 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n                             builtin_normal_tt(\n                                 ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(~\"deriving_eq\",\n-                            item_decorator(\n+                            ItemDecorator(\n                                 ext::deriving::expand_deriving_eq));\n     syntax_expanders.insert(~\"deriving_iter_bytes\",\n-                            item_decorator(\n+                            ItemDecorator(\n                                 ext::deriving::expand_deriving_iter_bytes));\n \n     // Quasi-quoting expanders"}, {"sha": "3d5d0b42cd085588caa1951bb479d84901bfa21a", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -14,7 +14,7 @@ use ext::base::*;\n use ext::base;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     let mut res_str = ~\"\";\n     for tts.eachi |i, e| {\n         if i & 1 == 1 {\n@@ -48,5 +48,5 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n         ),\n         span: sp,\n     };\n-    mr_expr(e)\n+    MRExpr(e)\n }"}, {"sha": "ad827377ac4a4503a76639beb5ff529587ab2c51", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -25,7 +25,7 @@ use core::os;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n \n     let var = get_single_str_from_tts(cx, sp, tts, \"env!\");\n \n@@ -36,7 +36,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n       option::None => mk_uniq_str(cx, sp, ~\"\"),\n       option::Some(ref s) => mk_uniq_str(cx, sp, (*s))\n     };\n-    mr_expr(e)\n+    MRExpr(e)\n }\n \n //"}, {"sha": "33931fca053c69897753e6d2b15910dbb636a77f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -22,7 +22,7 @@ use core::option;\n use core::vec;\n use std::map::HashMap;\n \n-fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n+fn expand_expr(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n                e: expr_, s: span, fld: ast_fold,\n                orig: fn@(expr_, span, ast_fold) -> (expr_, span))\n     -> (expr_, span)\n@@ -46,15 +46,13 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                     cx.span_fatal(pth.span,\n                                   fmt!(\"macro undefined: '%s'\", *extname))\n                   }\n-                  Some(normal_tt(\n-                    syntax_expander_tt { expander: exp, span: exp_sp }\n-                  )) => {\n+                  Some(NormalTT(SyntaxExpanderTT{expander: exp, span: exp_sp})) => {\n                     cx.bt_push(ExpandedFrom({call_site: s,\n                                 callie: {name: *extname, span: exp_sp}}));\n \n                     let expanded = match exp(cx, (*mac).span, (*tts)) {\n-                      mr_expr(e) => e,\n-                      mr_any(expr_maker,_,_) => expr_maker(),\n+                      MRExpr(e) => e,\n+                      MRAny(expr_maker,_,_) => expr_maker(),\n                       _ => cx.span_fatal(\n                           pth.span, fmt!(\"non-expr macro in expr pos: %s\",\n                                          *extname))\n@@ -85,11 +83,11 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n // attribute prefixing an item, and are interpreted by feeding the item\n // through the named attribute _as a syntax extension_ and splicing in the\n // resulting item vec into place in favour of the decorator. Note that\n-// these do _not_ work for macro extensions, just item_decorator ones.\n+// these do _not_ work for macro extensions, just ItemDecorator ones.\n //\n // NB: there is some redundancy between this and expand_item, below, and\n // they might benefit from some amount of semantic and language-UI merger.\n-fn expand_mod_items(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n+fn expand_mod_items(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n                     module_: ast::_mod, fld: ast_fold,\n                     orig: fn@(ast::_mod, ast_fold) -> ast::_mod)\n     -> ast::_mod\n@@ -108,8 +106,8 @@ fn expand_mod_items(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n               ast::meta_list(ref n, _) => (*n)\n             };\n             match exts.find(mname) {\n-              None | Some(normal_tt(_)) | Some(item_tt(*)) => items,\n-              Some(item_decorator(dec_fn)) => {\n+              None | Some(NormalTT(_)) | Some(ItemTT(*)) => items,\n+              Some(ItemDecorator(dec_fn)) => {\n                   cx.bt_push(ExpandedFrom({call_site: attr.span,\n                                            callie: {name: copy mname,\n                                                     span: None}}));\n@@ -126,7 +124,7 @@ fn expand_mod_items(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n \n \n // When we enter a module, record it, for the sake of `module!`\n-fn expand_item(exts: HashMap<~str, syntax_extension>,\n+fn expand_item(exts: HashMap<~str, SyntaxExtension>,\n                cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n                orig: fn@(&&v: @ast::item, ast_fold) -> Option<@ast::item>)\n     -> Option<@ast::item>\n@@ -153,7 +151,7 @@ fn expand_item(exts: HashMap<~str, syntax_extension>,\n \n // Support for item-position macro invocations, exactly the same\n // logic as for expression-position macro invocations.\n-fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n+fn expand_item_mac(exts: HashMap<~str, SyntaxExtension>,\n                    cx: ext_ctxt, &&it: @ast::item,\n                    fld: ast_fold) -> Option<@ast::item> {\n \n@@ -169,7 +167,7 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n         None => cx.span_fatal(pth.span,\n                               fmt!(\"macro undefined: '%s!'\", *extname)),\n \n-        Some(normal_tt(ref expand)) => {\n+        Some(NormalTT(ref expand)) => {\n             if it.ident != parse::token::special_idents::invalid {\n                 cx.span_fatal(pth.span,\n                               fmt!(\"macro %s! expects no ident argument, \\\n@@ -181,7 +179,7 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n                                               span: (*expand).span}}));\n             ((*expand).expander)(cx, it.span, tts)\n         }\n-        Some(item_tt(ref expand)) => {\n+        Some(ItemTT(ref expand)) => {\n             if it.ident == parse::token::special_idents::invalid {\n                 cx.span_fatal(pth.span,\n                               fmt!(\"macro %s! expects an ident argument\",\n@@ -197,13 +195,13 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n     };\n \n     let maybe_it = match expanded {\n-        mr_item(it) => fld.fold_item(it),\n-        mr_expr(_) => cx.span_fatal(pth.span,\n+        MRItem(it) => fld.fold_item(it),\n+        MRExpr(_) => cx.span_fatal(pth.span,\n                                     ~\"expr macro in item position: \"\n                                     + *extname),\n-        mr_any(_, item_maker, _) =>\n+        MRAny(_, item_maker, _) =>\n             option::chain(item_maker(), |i| {fld.fold_item(i)}),\n-        mr_def(ref mdef) => {\n+        MRDef(ref mdef) => {\n             exts.insert((*mdef).name, (*mdef).ext);\n             None\n         }\n@@ -212,7 +210,7 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n     return maybe_it;\n }\n \n-fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n+fn expand_stmt(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n                && s: stmt_, sp: span, fld: ast_fold,\n                orig: fn@(&&s: stmt_, span, ast_fold) -> (stmt_, span))\n     -> (stmt_, span)\n@@ -233,16 +231,15 @@ fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n         None =>\n             cx.span_fatal(pth.span, fmt!(\"macro undefined: '%s'\", *extname)),\n \n-        Some(normal_tt(\n-            syntax_expander_tt { expander: exp, span: exp_sp }\n-        )) => {\n+        Some(NormalTT(\n+            SyntaxExpanderTT{expander: exp, span: exp_sp})) => {\n             cx.bt_push(ExpandedFrom(\n                 {call_site: sp, callie: {name: *extname, span: exp_sp}}));\n             let expanded = match exp(cx, mac.span, tts) {\n-                mr_expr(e) =>\n+                MRExpr(e) =>\n                     @ast::spanned { node: stmt_expr(e, cx.next_id()),\n                                     span: e.span},\n-                mr_any(_,_,stmt_mkr) => stmt_mkr(),\n+                MRAny(_,_,stmt_mkr) => stmt_mkr(),\n                 _ => cx.span_fatal(\n                     pth.span,\n                     fmt!(\"non-stmt macro in stmt pos: %s\", *extname))"}, {"sha": "2b7bd9ddf32dbe5eb2ad0a0bb206574efbdf45a0", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -28,7 +28,7 @@ use extfmt::ct::*;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     let args = get_exprs_from_tts(cx, copy tts);\n     if args.len() == 0 {\n         cx.span_fatal(sp, \"fmt! takes at least 1 argument.\");\n@@ -46,7 +46,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n         parse_fmt_err_(cx, fmtspan, s)\n     };\n     let pieces = parse_fmt_string(fmt, parse_fmt_err);\n-    mr_expr(pieces_to_expr(cx, sp, pieces, args))\n+    MRExpr(pieces_to_expr(cx, sp, pieces, args))\n }\n \n // FIXME (#2249): A lot of these functions for producing expressions can"}, {"sha": "b92e0b58bd5d4cb9a25117ab9053db8ff0586367", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -18,14 +18,14 @@ use core::io::WriterUtil;\n use core::option;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n \n     cx.print_backtrace();\n     io::stdout().write_line(\n         print::pprust::tt_to_str(ast::tt_delim(tt),cx.parse_sess().interner));\n \n     //trivial expression\n-    mr_expr(@ast::expr {\n+    MRExpr(@ast::expr {\n         id: cx.next_id(),\n         callee_id: cx.next_id(),\n         node: ast::expr_rec(~[], option::None),"}, {"sha": "8eef065395e06e662668ecbf8726173a5131f3c2", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -70,7 +70,7 @@ mod liveness;\n \n \n fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident,\n-                tt: ~[ast::token_tree]) -> base::mac_result\n+                tt: ~[ast::token_tree]) -> base::MacResult\n {\n     let sess = cx.parse_sess();\n     let cfg = cx.cfg();\n@@ -88,6 +88,6 @@ fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident,\n     liveness::analyze(proto, cx);\n \n     // compile\n-    base::mr_item(proto.compile(cx))\n+    base::MRItem(proto.compile(cx))\n }\n "}, {"sha": "3354d015476e54ac37000f635225fbad388b7e7b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -219,45 +219,45 @@ pub mod rt {\n \n pub fn expand_quote_tokens(cx: ext_ctxt,\n                            sp: span,\n-                           tts: ~[ast::token_tree]) -> base::mac_result {\n-    base::mr_expr(expand_tts(cx, sp, tts))\n+                           tts: ~[ast::token_tree]) -> base::MacResult {\n+    base::MRExpr(expand_tts(cx, sp, tts))\n }\n \n pub fn expand_quote_expr(cx: ext_ctxt,\n                          sp: span,\n-                         tts: ~[ast::token_tree]) -> base::mac_result {\n-    base::mr_expr(expand_parse_call(cx, sp, ~\"parse_expr\", ~[], tts))\n+                         tts: ~[ast::token_tree]) -> base::MacResult {\n+    base::MRExpr(expand_parse_call(cx, sp, ~\"parse_expr\", ~[], tts))\n }\n \n pub fn expand_quote_item(cx: ext_ctxt,\n                          sp: span,\n-                         tts: ~[ast::token_tree]) -> base::mac_result {\n+                         tts: ~[ast::token_tree]) -> base::MacResult {\n     let e_attrs = build::mk_uniq_vec_e(cx, sp, ~[]);\n-    base::mr_expr(expand_parse_call(cx, sp, ~\"parse_item\",\n+    base::MRExpr(expand_parse_call(cx, sp, ~\"parse_item\",\n                                     ~[e_attrs], tts))\n }\n \n pub fn expand_quote_pat(cx: ext_ctxt,\n                         sp: span,\n-                        tts: ~[ast::token_tree]) -> base::mac_result {\n+                        tts: ~[ast::token_tree]) -> base::MacResult {\n     let e_refutable = build::mk_lit(cx, sp, ast::lit_bool(true));\n-    base::mr_expr(expand_parse_call(cx, sp, ~\"parse_pat\",\n+    base::MRExpr(expand_parse_call(cx, sp, ~\"parse_pat\",\n                                     ~[e_refutable], tts))\n }\n \n pub fn expand_quote_ty(cx: ext_ctxt,\n                        sp: span,\n-                       tts: ~[ast::token_tree]) -> base::mac_result {\n+                       tts: ~[ast::token_tree]) -> base::MacResult {\n     let e_param_colons = build::mk_lit(cx, sp, ast::lit_bool(false));\n-    base::mr_expr(expand_parse_call(cx, sp, ~\"parse_ty\",\n+    base::MRExpr(expand_parse_call(cx, sp, ~\"parse_ty\",\n                                     ~[e_param_colons], tts))\n }\n \n pub fn expand_quote_stmt(cx: ext_ctxt,\n                          sp: span,\n-                         tts: ~[ast::token_tree]) -> base::mac_result {\n+                         tts: ~[ast::token_tree]) -> base::MacResult {\n     let e_attrs = build::mk_uniq_vec_e(cx, sp, ~[]);\n-    base::mr_expr(expand_parse_call(cx, sp, ~\"parse_stmt\",\n+    base::MRExpr(expand_parse_call(cx, sp, ~\"parse_stmt\",\n                                     ~[e_attrs], tts))\n }\n "}, {"sha": "3ade0bf86b122d4c8f0596f480851850e78b696a", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -32,56 +32,56 @@ export expand_include_bin;\n \n /* line!(): expands to the current line number */\n fn expand_line(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n     let loc = cx.codemap().lookup_char_pos(sp.lo);\n-    base::mr_expr(mk_uint(cx, sp, loc.line))\n+    base::MRExpr(mk_uint(cx, sp, loc.line))\n }\n \n /* col!(): expands to the current column number */\n fn expand_col(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"col!\");\n     let loc = cx.codemap().lookup_char_pos(sp.lo);\n-    base::mr_expr(mk_uint(cx, sp, loc.col.to_uint()))\n+    base::MRExpr(mk_uint(cx, sp, loc.col.to_uint()))\n }\n \n /* file!(): expands to the current filename */\n /* The filemap (`loc.file`) contains a bunch more information we could spit\n  * out if we wanted. */\n fn expand_file(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n     let Loc { file: @FileMap { name: filename, _ }, _ } =\n         cx.codemap().lookup_char_pos(sp.lo);\n-    base::mr_expr(mk_base_str(cx, sp, filename))\n+    base::MRExpr(mk_base_str(cx, sp, filename))\n }\n \n fn expand_stringify(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     let s = pprust::tts_to_str(tts, cx.parse_sess().interner);\n-    base::mr_expr(mk_base_str(cx, sp, s))\n+    base::MRExpr(mk_base_str(cx, sp, s))\n }\n \n fn expand_mod(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n-    base::mr_expr(mk_base_str(cx, sp,\n+    base::MRExpr(mk_base_str(cx, sp,\n                               str::connect(cx.mod_path().map(\n                                   |x| cx.str_of(*x)), ~\"::\")))\n }\n \n fn expand_include(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include!\");\n     let p = parse::new_sub_parser_from_file(\n         cx.parse_sess(), cx.cfg(),\n         &res_rel_file(cx, sp, &Path(file)), sp);\n-    base::mr_expr(p.parse_expr())\n+    base::MRExpr(p.parse_expr())\n }\n \n fn expand_include_str(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_str!\");\n     let res = io::read_whole_file_str(&res_rel_file(cx, sp, &Path(file)));\n     match res {\n@@ -91,18 +91,18 @@ fn expand_include_str(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n       }\n     }\n \n-    base::mr_expr(mk_base_str(cx, sp, result::unwrap(res)))\n+    base::MRExpr(mk_base_str(cx, sp, result::unwrap(res)))\n }\n \n fn expand_include_bin(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n-    -> base::mac_result {\n+    -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_bin!\");\n     match io::read_whole_file(&res_rel_file(cx, sp, &Path(file))) {\n       result::Ok(src) => {\n         let u8_exprs = vec::map(src, |char| {\n             mk_u8(cx, sp, *char)\n         });\n-        base::mr_expr(mk_base_vec_e(cx, sp, u8_exprs))\n+        base::MRExpr(mk_base_vec_e(cx, sp, u8_exprs))\n       }\n       result::Err(ref e) => {\n         cx.parse_sess().span_diagnostic.handler().fatal((*e))"}, {"sha": "e4ea46416d35252ca67e141ea8370eda3a60a383", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -19,7 +19,7 @@ use parse::parser::Parser;\n use core::option::None;\n \n fn expand_trace_macros(cx: ext_ctxt, sp: span,\n-                       tt: ~[ast::token_tree]) -> base::mac_result {\n+                       tt: ~[ast::token_tree]) -> base::MacResult {\n     let sess = cx.parse_sess();\n     let cfg = cx.cfg();\n     let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,\n@@ -39,5 +39,5 @@ fn expand_trace_macros(cx: ext_ctxt, sp: span,\n \n     let rust_parser = Parser(sess, cfg, rdr.dup());\n     let result = rust_parser.parse_expr();\n-    base::mr_expr(result)\n+    base::MRExpr(result)\n }"}, {"sha": "bcaa7679a5aabed0a96f8243b1f181983954710e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656", "patch": "@@ -15,7 +15,7 @@ use ast::{tt_delim};\n use ast;\n use ast_util::dummy_sp;\n use codemap::span;\n-use ext::base::{ext_ctxt, mac_result, mr_any, mr_def, normal_tt};\n+use ext::base::{ext_ctxt, MacResult, MRAny, MRDef, MacroDef, NormalTT};\n use ext::base;\n use ext::tt::macro_parser::{error};\n use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n@@ -30,7 +30,7 @@ use core::io;\n use std::map::HashMap;\n \n fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n-                     arg: ~[ast::token_tree]) -> base::mac_result {\n+                     arg: ~[ast::token_tree]) -> base::MacResult {\n     // these spans won't matter, anyways\n     fn ms(m: matcher_) -> matcher {\n         ast::spanned { node: m, span: dummy_sp() }\n@@ -73,7 +73,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n     fn generic_extension(cx: ext_ctxt, sp: span, name: ident,\n                          arg: ~[ast::token_tree],\n                          lhses: ~[@named_match], rhses: ~[@named_match])\n-    -> mac_result {\n+    -> MacResult {\n \n         if cx.trace_macros() {\n             io::println(fmt!(\"%s! { %s }\",\n@@ -119,7 +119,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n \n                     // Let the context choose how to interpret the result.\n                     // Weird, but useful for X-macros.\n-                    return mr_any(|| p.parse_expr(),\n+                    return MRAny(|| p.parse_expr(),\n                                   || p.parse_item(~[/* no attrs*/]),\n                                   || p.parse_stmt(~[/* no attrs*/]));\n                   }\n@@ -136,14 +136,11 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n         cx.span_fatal(best_fail_spot, best_fail_msg);\n     }\n \n-    let exp: @fn(ext_ctxt, span, ~[ast::token_tree]) -> mac_result =\n+    let exp: @fn(ext_ctxt, span, ~[ast::token_tree]) -> MacResult =\n         |cx, sp, arg| generic_extension(cx, sp, name, arg, lhses, rhses);\n \n-    mr_def(base::macro_def {\n+    return MRDef(MacroDef{\n         name: *cx.parse_sess().interner.get(name),\n-        ext: normal_tt(base::syntax_expander_tt {\n-            expander: exp,\n-            span: Some(sp),\n-        })\n-    })\n+        ext: NormalTT(base::SyntaxExpanderTT{expander: exp, span: Some(sp)})\n+    });\n }"}, {"sha": null, "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958e74acc57b8eb7074f8c55f494b03d941656/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=0b958e74acc57b8eb7074f8c55f494b03d941656"}]}