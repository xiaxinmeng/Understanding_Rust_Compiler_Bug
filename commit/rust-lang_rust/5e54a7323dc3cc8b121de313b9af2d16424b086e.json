{"sha": "5e54a7323dc3cc8b121de313b9af2d16424b086e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTRhNzMyM2RjM2NjOGIxMjFkZTMxM2I5YWYyZDE2NDI0YjA4NmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-10-29T10:14:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-11-09T00:45:50Z"}, "message": "Update various tests and libraries that were incorrectly\nannotated.", "tree": {"sha": "2a8070b569406dd720de9fb69ab5218cd64cd8a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a8070b569406dd720de9fb69ab5218cd64cd8a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e54a7323dc3cc8b121de313b9af2d16424b086e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e54a7323dc3cc8b121de313b9af2d16424b086e", "html_url": "https://github.com/rust-lang/rust/commit/5e54a7323dc3cc8b121de313b9af2d16424b086e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e54a7323dc3cc8b121de313b9af2d16424b086e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57a28b2dbb1823b88b5db270145a4f324820390", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57a28b2dbb1823b88b5db270145a4f324820390", "html_url": "https://github.com/rust-lang/rust/commit/f57a28b2dbb1823b88b5db270145a4f324820390"}], "stats": {"total": 264, "additions": 156, "deletions": 108}, "files": [{"sha": "f5bb3cb2ed00fcdacc16ea594ac04f11a60d005c", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -125,6 +125,7 @@ ifdef TRACE\n   CFG_RUSTC_FLAGS += -Z trace\n endif\n ifndef DEBUG_BORROWS\n+  RUSTFLAGS_STAGE0 += -Z no-debug-borrows\n   RUSTFLAGS_STAGE1 += -Z no-debug-borrows\n   RUSTFLAGS_STAGE2 += -Z no-debug-borrows\n endif"}, {"sha": "b3da9b4f16b889f270f1dacedb061d120bc2018e", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -233,10 +233,10 @@ impl<T:Send> MutexArc<T> {\n \n     /// As unsafe_access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline]\n-    pub unsafe fn unsafe_access_cond<'x, 'c, U>(&self,\n-                                         blk: &fn(x: &'x mut T,\n-                                                  c: &'c Condvar) -> U)\n-                                         -> U {\n+    pub unsafe fn unsafe_access_cond<U>(&self,\n+                                        blk: &fn(x: &mut T,\n+                                                 c: &Condvar) -> U)\n+                                        -> U {\n         let state = self.x.get();\n         do (&(*state).lock).lock_cond |cond| {\n             check_poison(true, (*state).failed);\n@@ -290,10 +290,10 @@ impl<T:Freeze + Send> MutexArc<T> {\n \n     /// As unsafe_access_cond but safe and Freeze.\n     #[inline]\n-    pub fn access_cond<'x, 'c, U>(&self,\n-                                  blk: &fn(x: &'x mut T,\n-                                           c: &'c Condvar) -> U)\n-                                  -> U {\n+    pub fn access_cond<U>(&self,\n+                          blk: &fn(x: &mut T,\n+                                   c: &Condvar) -> U)\n+                          -> U {\n         unsafe { self.unsafe_access_cond(blk) }\n     }\n }\n@@ -402,9 +402,9 @@ impl<T:Freeze + Send> RWArc<T> {\n \n     /// As write(), but with a condvar, as sync::rwlock.write_cond().\n     #[inline]\n-    pub fn write_cond<'x, 'c, U>(&self,\n-                                 blk: &fn(x: &'x mut T, c: &'c Condvar) -> U)\n-                                 -> U {\n+    pub fn write_cond<U>(&self,\n+                         blk: &fn(x: &mut T, c: &Condvar) -> U)\n+                         -> U {\n         unsafe {\n             let state = self.x.get();\n             do (*borrow_rwlock(state)).write_cond |cond| {\n@@ -554,9 +554,9 @@ impl<'self, T:Freeze + Send> RWWriteMode<'self, T> {\n     }\n \n     /// Access the pre-downgrade RWArc in write mode with a condvar.\n-    pub fn write_cond<'x, 'c, U>(&mut self,\n-                                 blk: &fn(x: &'x mut T, c: &'c Condvar) -> U)\n-                                 -> U {\n+    pub fn write_cond<U>(&mut self,\n+                         blk: &fn(x: &mut T, c: &Condvar) -> U)\n+                         -> U {\n         match *self {\n             RWWriteMode {\n                 data: &ref mut data,"}, {"sha": "6346e4856f2d1a57a310f3e96cfb7ffb96751df9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -249,10 +249,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n                         freevars::annotate_freevars(def_map, crate));\n \n     let region_map = time(time_passes, \"region resolution\", (), |_|\n-                          middle::region::resolve_crate(sess, def_map, crate));\n-\n-    let rp_set = time(time_passes, \"region parameterization inference\", (), |_|\n-                      middle::region::determine_rp_in_crate(sess, ast_map, def_map, crate));\n+                          middle::region::resolve_crate(sess, crate));\n \n     let ty_cx = ty::mk_ctxt(sess, def_map, named_region_map, ast_map, freevars,\n                             region_map, lang_items);"}, {"sha": "6e06cef55ee22b89d2cc4cb57dc70b84b3729edd", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -363,18 +363,18 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n         return ty::mk_param(st.tcx, parse_uint(st), did);\n       }\n       's' => {\n-        let did = parse_def(st, TypeParameter, conv);\n+        let did = parse_def(st, TypeParameter, |x,y| conv(x,y));\n         return ty::mk_self(st.tcx, did);\n       }\n-      '@' => return ty::mk_box(st.tcx, parse_mt(st, conv)),\n-      '~' => return ty::mk_uniq(st.tcx, parse_mt(st, conv)),\n-      '*' => return ty::mk_ptr(st.tcx, parse_mt(st, conv)),\n+      '@' => return ty::mk_box(st.tcx, parse_mt(st, |x,y| conv(x,y))),\n+      '~' => return ty::mk_uniq(st.tcx, parse_mt(st, |x,y| conv(x,y))),\n+      '*' => return ty::mk_ptr(st.tcx, parse_mt(st, |x,y| conv(x,y))),\n       '&' => {\n-        let r = parse_region(st);\n-        let mt = parse_mt(st, conv);\n+        let r = parse_region(st, |x,y| conv(x,y));\n+        let mt = parse_mt(st, |x,y| conv(x,y));\n         return ty::mk_rptr(st.tcx, r, mt);\n       }\n-      'U' => return ty::mk_unboxed_vec(st.tcx, parse_mt(st, conv)),\n+      'U' => return ty::mk_unboxed_vec(st.tcx, parse_mt(st, |x,y| conv(x,y))),\n       'V' => {\n         let mt = parse_mt(st, |x,y| conv(x,y));\n         let v = parse_vstore(st, |x,y| conv(x,y));\n@@ -392,10 +392,10 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n         return ty::mk_tup(st.tcx, params);\n       }\n       'f' => {\n-        return ty::mk_closure(st.tcx, parse_closure_ty(st, conv));\n+        return ty::mk_closure(st.tcx, parse_closure_ty(st, |x,y| conv(x,y)));\n       }\n       'F' => {\n-        return ty::mk_bare_fn(st.tcx, parse_bare_fn_ty(st, conv));\n+        return ty::mk_bare_fn(st.tcx, parse_bare_fn_ty(st, |x,y| conv(x,y)));\n       }\n       'Y' => return ty::mk_type(st.tcx),\n       'C' => {\n@@ -417,7 +417,7 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n                 pos: pos,\n                 .. *st\n             };\n-            let tt = parse_ty(&mut ps, conv);\n+            let tt = parse_ty(&mut ps, |x,y| conv(x,y));\n             st.tcx.rcache.insert(key, tt);\n             return tt;\n           }\n@@ -449,7 +449,7 @@ fn parse_mutability(st: &mut PState) -> ast::Mutability {\n \n fn parse_mt(st: &mut PState, conv: conv_did) -> ty::mt {\n     let m = parse_mutability(st);\n-    ty::mt { ty: parse_ty(st, conv), mutbl: m }\n+    ty::mt { ty: parse_ty(st, |x,y| conv(x,y)), mutbl: m }\n }\n \n fn parse_def(st: &mut PState, source: DefIdSource,"}, {"sha": "36af13d34e6565a35bb92bb50d7029d3b62c617f", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -14,6 +14,7 @@ use middle::trans::common::*;\n use middle::trans::foreign;\n use middle::ty;\n use util::ppaux;\n+use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n@@ -172,14 +173,16 @@ pub fn sizing_type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n \n // NB: If you update this, be sure to update `sizing_type_of()` as well.\n pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n-    debug!(\"type_of {:?}: {:?}\", t, ty::get(t));\n-\n     // Check the cache.\n     match cx.lltypes.find(&t) {\n-        Some(&t) => return t,\n+        Some(&llty) => {\n+            return llty;\n+        }\n         None => ()\n     }\n \n+    debug!(\"type_of {} {:?}\", t.repr(cx.tcx), t);\n+\n     // Replace any typedef'd types with their equivalent non-typedef\n     // type. This ensures that all LLVM nominal types that contain\n     // Rust types are defined as the same LLVM types.  If we don't do\n@@ -189,6 +192,12 @@ pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n \n     if t != t_norm {\n         let llty = type_of(cx, t_norm);\n+        debug!(\"--> normalized {} {:?} to {} {:?} llty={}\",\n+                t.repr(cx.tcx),\n+                t,\n+                t_norm.repr(cx.tcx),\n+                t_norm,\n+                cx.tn.type_to_str(llty));\n         cx.lltypes.insert(t, llty);\n         return llty;\n     }\n@@ -299,6 +308,10 @@ pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n       ty::ty_err(*) => cx.tcx.sess.bug(\"type_of with ty_err\")\n     };\n \n+    debug!(\"--> mapped t={} {:?} to llty={}\",\n+            t.repr(cx.tcx),\n+            t,\n+            cx.tn.type_to_str(llty));\n     cx.lltypes.insert(t, llty);\n \n     // If this was an enum or struct, fill in the type now."}, {"sha": "90d6147f0eda3416956c715d62251930a2cafd76", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -28,10 +28,11 @@ impl Trait<int> for S2 {\n     }\n }\n \n-fn main() {\n+fn foo<'a>() {\n     let _ = S::new::<int,f64>(1, 1.0);    //~ ERROR the impl referenced by this path has 1 type parameter, but 0 type parameters were supplied\n-    let _ = S::<'self,int>::new::<f64>(1, 1.0);  //~ ERROR this impl has no lifetime parameter\n+    let _ = S::<'a,int>::new::<f64>(1, 1.0);  //~ ERROR expected 0 lifetime parameter(s)\n     let _: S2 = Trait::new::<int,f64>(1, 1.0);    //~ ERROR the trait referenced by this path has 1 type parameter, but 0 type parameters were supplied\n-    let _: S2 = Trait::<'self,int>::new::<f64>(1, 1.0);   //~ ERROR this trait has no lifetime parameter\n+    let _: S2 = Trait::<'a,int>::new::<f64>(1, 1.0);   //~ ERROR expected 0 lifetime parameter(s)\n }\n \n+fn main() {}"}, {"sha": "70573ca4f180cd3ff660e85eef31d1aff9f56f66", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -13,6 +13,6 @@\n use std::local_data;\n \n local_data_key!(key: @&int)\n-//~^ ERROR only 'static is allowed\n+//~^ ERROR missing lifetime specifier\n \n fn main() {}"}, {"sha": "032b2564f4fb2d5ea3b12d827bf6ff95cb96c8e9", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -10,7 +10,7 @@\n \n fn id<T>(t: T) -> T { t }\n \n-fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cannot infer an appropriate lifetime\n \n fn main() {\n     let v = &5;"}, {"sha": "8205a6dae64704714081991b0dfd2d5f0f6f0180", "filename": "src/test/compile-fail/issue-5216.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn f() { }\n-struct S(&fn()); //~ ERROR Illegal anonymous lifetime\n-pub static C: S = S(f); //~ ERROR Illegal anonymous lifetime\n+struct S(&fn()); //~ ERROR missing lifetime specifier\n+pub static C: S = S(f);\n \n \n fn g() { }\n-type T = &fn(); //~ ERROR Illegal anonymous lifetime\n-pub static D: T = g; //~ ERROR Illegal anonymous lifetime\n+type T = &fn();  //~ ERROR missing lifetime specifier\n+pub static D: T = g;\n \n fn main() {}"}, {"sha": "5fe9b13f83befeb30a22a18d99ac7be3510fc3bb", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,29 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+trait Repeat<A> { fn get(&self) -> A; }\n \n-trait repeat<A> { fn get(&self) -> A; }\n-\n-impl<A:Clone> repeat<A> for @A {\n-    fn get(&self) -> A { **self }\n+impl<A:Clone> Repeat<A> for A {\n+    fn get(&self) -> A { self.clone() }\n }\n \n-fn repeater<A:Clone>(v: @A) -> @repeat<A> {\n-    // Note: owned kind is not necessary as A appears in the trait type\n-    @v as @repeat<A> // No\n+fn repeater<A:Clone>(v: A) -> ~Repeat:<A> {\n+    ~v as ~Repeat:<A> // No\n }\n \n fn main() {\n     // Error results because the type of is inferred to be\n-    // @repeat<&'blk int> where blk is the lifetime of the block below.\n+    // ~Repeat<&'blk int> where blk is the lifetime of the block below.\n \n-    let y = { //~ ERROR lifetime of variable does not enclose its declaration\n-        let x: &'blk int = &3;\n-        repeater(@x)\n+    let y = {\n+        let tmp0 = 3;\n+        let tmp1 = &tmp0; //~ ERROR borrowed value does not live long enough\n+        repeater(tmp1)\n     };\n     assert!(3 == *(y.get()));\n-    //~^ ERROR dereference of reference outside its lifetime\n-    //~^^ ERROR automatically borrowed pointer is not valid at the time of borrow\n-    //~^^^ ERROR lifetime of return value does not outlive the function call\n }"}, {"sha": "ff13548b4946f9417e655dc7950799fa90dbc022", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,12 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Check that taking the address of an argument yields a lifetime\n+// bounded by the current function call.\n+\n fn foo(a: int) {\n     let _p: &'static int = &a; //~ ERROR borrowed value does not live long enough\n }\n \n fn bar(a: int) {\n-    let _q: &'blk int = &a;\n+    let _q: &int = &a;\n+}\n+\n+fn zed<'a>(a: int) -> &'a int {\n+    &a //~ ERROR borrowed value does not live long enough\n }\n \n fn main() {"}, {"sha": "b7be0dd7b9b1e65365a445f8acb12cd8dd8a82f3", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -14,12 +14,12 @@ struct dog {\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        let p: &'static mut uint = &mut self.cats_chased; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+        let p: &'static mut uint = &mut self.cats_chased; //~ ERROR cannot infer an appropriate lifetime\n         *p += 1u;\n     }\n \n     pub fn chase_cat_2(&mut self) {\n-        let p: &'blk mut uint = &mut self.cats_chased;\n+        let p: &mut uint = &mut self.cats_chased;\n         *p += 1u;\n     }\n }"}, {"sha": "2f60898cfeef152e094dc9b02ad9199c14e81115", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -17,7 +17,7 @@ struct dog {\n impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n-            let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+            let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer an appropriate lifetime\n             *p = 3u;\n         };\n     }"}, {"sha": "cad73daa46b157f7806fd93a099cbc6a80f8204e", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -24,9 +24,9 @@ fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n         of::<&fn<'b>(&'b T)>());\n \n     subtype::<&fn<'b>(&'b T)>(\n-        of::<&fn<'x>(&'x T)>());\n+        of::<&fn(&'x T)>());\n \n-    subtype::<&fn<'x>(&'x T)>(\n+    subtype::<&fn(&'x T)>(\n         of::<&fn<'b>(&'b T)>());  //~ ERROR mismatched types\n \n     subtype::<&fn<'a,'b>(&'a T, &'b T)>(\n@@ -36,9 +36,9 @@ fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n         of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n \n     subtype::<&fn<'a,'b>(&'a T, &'b T)>(\n-        of::<&fn<'x,'y>(&'x T, &'y T)>());\n+        of::<&fn(&'x T, &'y T)>());\n \n-    subtype::<&fn<'x,'y>(&'x T, &'y T)>(\n+    subtype::<&fn(&'x T, &'y T)>(\n         of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n }\n "}, {"sha": "fb31e477ba279658a8e85e6a0ff73eb6aa019c3c", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -26,7 +26,7 @@ fn ordering2<'a, 'b>(x: &'a &'b uint, y: &'a uint) -> &'b uint {\n fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n     // Do not infer an ordering from the return value.\n     let z: &'b uint = &*x;\n-    //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+    //~^ ERROR cannot infer an appropriate lifetime\n     fail!();\n }\n "}, {"sha": "58fa437a6a365b2c5947005756ff1339a11d3b0a", "filename": "src/test/compile-fail/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -14,12 +14,6 @@\n \n struct Paramd<'self> { x: &'self uint }\n \n-fn call1<'a>(x: &'a uint) {\n-    let y: uint = 3;\n-    let z: &'a &'blk uint = &(&y);\n-    //~^ ERROR pointer has a longer lifetime than the data it references\n-}\n-\n fn call2<'a, 'b>(a: &'a uint, b: &'b uint) {\n     let z: Option<&'b &'a uint> = None;\n     //~^ ERROR pointer has a longer lifetime than the data it references"}, {"sha": "1408f75be896e39cbf5aa1153ed4d38ab03ffe31", "filename": "src/test/compile-fail/regions-free-region-ordering-caller1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test various ways to construct a pointer with a longer lifetime\n+// than the thing it points at and ensure that they result in\n+// errors. See also regions-free-region-ordering-callee.rs\n+\n+fn call1<'a>(x: &'a uint) {\n+    // Test that creating a pointer like\n+    // &'a &'z uint requires that 'a <= 'z:\n+    let y: uint = 3;\n+    let z: &'a & uint = &(&y);\n+    //~^ ERROR borrowed value does not live long enough\n+    //~^^ ERROR borrowed value does not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "9f2facf4e1f9f35ea91031aa66c50f42efe29af5", "filename": "src/test/compile-fail/regions-in-consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static c_x: &'blk int = &22; //~ ERROR Illegal lifetime 'blk: only 'static is allowed here\n-static c_y: &int = &22; //~ ERROR Illegal anonymous lifetime: only 'static is allowed here\n+static c_y: &int = &22; //~ ERROR missing lifetime specifier\n static c_z: &'static int = &22;\n \n fn main() {"}, {"sha": "5c7a37d0359a493d7dc1d7489d155d1a72cedb30", "filename": "src/test/compile-fail/regions-in-enums-anon.rs", "status": "renamed", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-enums-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-enums-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums-anon.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,16 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct item_ty_yes0<'self> {\n-    x: &'self uint\n-}\n-\n-struct item_ty_yes1<'self> {\n-    x: &'self uint\n-}\n+// Test that anonymous lifetimes are not permitted in enum declarations\n \n-struct item_ty_yes2 {\n-    x: &'a uint //~ ERROR only 'self is allowed\n+enum Foo {\n+    Bar(&int) //~ ERROR missing lifetime specifier\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/regions-in-type-items.rs"}, {"sha": "0a221b9a533909f563dc374dfc4a728a537e37b2", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,17 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that lifetimes must be declared for use on enums.\n+// See also regions-undeclared.rs\n+\n enum yes0<'lt> {\n-    // This will eventually be legal (and in fact the only way):\n-    X3(&'lt uint) //~ ERROR Illegal lifetime 'lt: only 'self is allowed\n+    X3(&'lt uint)\n }\n \n enum yes1<'self> {\n     X4(&'self uint)\n }\n \n-enum yes2 {\n-    X5(&'foo uint) //~ ERROR Illegal lifetime 'foo: only 'self is allowed\n+enum no0 {\n+    X5(&'foo uint) //~ ERROR use of undeclared lifetime name `'foo`\n+}\n+\n+enum no1 {\n+    X6(&'self uint) //~ ERROR use of undeclared lifetime name `'self`\n }\n \n fn main() {}"}, {"sha": "0f2036a56cdd600c244e7714c346144533e453be", "filename": "src/test/compile-fail/regions-in-structs-anon.rs", "status": "renamed", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-structs-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-structs-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-structs-anon.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,18 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(cond: bool) {\n-    let x = 5;\n-    let mut y: &'blk int = &x;\n+// Test that anonymous lifetimes are not permitted in struct declarations\n \n-    let mut z: &'blk int;\n-    if cond {\n-        z = &x; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n-    } else {\n-        let w: &'blk int = &x;\n-        z = w;\n-    }\n+struct Foo {\n+    x: &int //~ ERROR missing lifetime specifier\n }\n \n-fn main() {\n-}\n+fn main() {}", "previous_filename": "src/test/compile-fail/regions-blk.rs"}, {"sha": "1e74fa4adb9f6288229f4a0cb6d4e4c3abfe872f", "filename": "src/test/compile-fail/regions-in-structs.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -8,16 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct yes0<'self> {\n-  x: &uint, //~ ERROR Illegal anonymous lifetime: anonymous lifetimes are not permitted here\n-}\n-\n struct yes1<'self> {\n   x: &'self uint,\n }\n \n-struct yes2<'self> {\n-  x: &'foo uint, //~ ERROR Illegal lifetime 'foo: only 'self is allowed\n+struct yes2<'a> {\n+  x: &'a uint,\n }\n \n+struct StructDecl {\n+    a: &'a int, //~ ERROR use of undeclared lifetime name `'a`\n+    b: &'self int, //~ ERROR use of undeclared lifetime name `'self`\n+}\n+\n+\n fn main() {}"}, {"sha": "5c979955ec9ae4fdab6282a1232292170b27c91a", "filename": "src/test/compile-fail/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -13,7 +13,7 @@\n // contains region pointers\n struct foo(~fn(x: &int));\n \n-fn take_foo(x: foo<'static>) {} //~ ERROR no region bound is allowed on `foo`\n+fn take_foo(x: foo<'static>) {} //~ ERROR wrong number of lifetime parameters\n \n fn main() {\n }"}, {"sha": "ee6ed3b0d76f631f872a8993a91541f02a62d1af", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -12,7 +12,7 @@\n // some point regions-ret-borrowed reported an error but this file did\n // not, due to special hardcoding around the anonymous region.\n \n-fn with<'a, R>(f: &fn(x: &'a int) -> R) -> R {\n+fn with<R>(f: &fn<'a>(x: &'a int) -> R) -> R {\n     f(&3)\n }\n "}, {"sha": "fcf3a73b19f0d008008e73fc82aa8514995b20b9", "filename": "src/test/compile-fail/regions-undeclared.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-undeclared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Fregions-undeclared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-undeclared.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static c_x: &'blk int = &22; //~ ERROR use of undeclared lifetime name `'blk`\n+\n+enum EnumDecl {\n+    Foo(&'a int), //~ ERROR use of undeclared lifetime name `'a`\n+    Bar(&'self int), //~ ERROR use of undeclared lifetime name `'self`\n+}\n+\n+fn fnDecl(x: &'a int, //~ ERROR use of undeclared lifetime name `'a`\n+          y: &'self int) //~ ERROR use of undeclared lifetime name `'self`\n+{}\n+\n+fn main() {\n+}"}, {"sha": "940c1b3a237b8bbd9d20065008e60831f2c4de93", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -13,7 +13,7 @@ trait foo {\n }\n impl foo for int {\n     fn bar(&self) -> int {\n-        //~^ ERROR method `bar` has 0 parameters but the trait has 1\n+        //~^ ERROR method `bar` has 0 parameter(s) but the trait has 1\n         *self\n     }\n }"}, {"sha": "d8076f543ecc1436e9145357dd96ace3dafb29c4", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "previous_filename": "src/test/run-pass/region-dependent-addr-of.rs"}, {"sha": "bce2159cc7b9ffa314b78f28d72b517112926428", "filename": "src/test/run-pass/regions-dependent-autofn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "previous_filename": "src/test/run-pass/region-dependent-autofn.rs"}, {"sha": "dab881549c44cfda196696df0ad3b16697c81696", "filename": "src/test/run-pass/regions-dependent-autoslice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "previous_filename": "src/test/run-pass/region-dependent-autoslice.rs"}, {"sha": "6740230728c6c9692fc7007603cca8fdcc0fb5b9", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "patch": "@@ -30,7 +30,7 @@ struct Ccx {\n #[fixed_stack_segment] #[inline(never)]\n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n-        cast::transmute(libc::malloc(mem::size_of::<Bcx<'blk>>()\n+        cast::transmute(libc::malloc(mem::size_of::<Bcx<'a>>()\n             as libc::size_t))\n     }\n }"}, {"sha": "aa4630717db6c63feb058acd7f350d25028abe77", "filename": "src/test/run-pass/regions-return-interior-of-option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-return-interior-of-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e54a7323dc3cc8b121de313b9af2d16424b086e/src%2Ftest%2Frun-pass%2Fregions-return-interior-of-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-return-interior-of-option.rs?ref=5e54a7323dc3cc8b121de313b9af2d16424b086e", "previous_filename": "src/test/run-pass/region-return-interior-of-option.rs"}]}