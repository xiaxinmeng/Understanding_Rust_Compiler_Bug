{"sha": "55061b489fc36b17819c1a18f89c36078763cdfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MDYxYjQ4OWZjMzZiMTc4MTljMWExOGY4OWMzNjA3ODc2M2NkZmE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-27T04:55:58Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-31T14:20:18Z"}, "message": "Improve shutdown process", "tree": {"sha": "e9f6cef477150124196425c5acd6582f5f4497c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f6cef477150124196425c5acd6582f5f4497c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55061b489fc36b17819c1a18f89c36078763cdfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55061b489fc36b17819c1a18f89c36078763cdfa", "html_url": "https://github.com/rust-lang/rust/commit/55061b489fc36b17819c1a18f89c36078763cdfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55061b489fc36b17819c1a18f89c36078763cdfa/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8a26653f9d8734767a40af576223e267d51d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8a26653f9d8734767a40af576223e267d51d6d", "html_url": "https://github.com/rust-lang/rust/commit/1b8a26653f9d8734767a40af576223e267d51d6d"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "51fbb046a973fe12f3728e074ca93b5675c70a78", "filename": "crates/ra_proc_macro/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55061b489fc36b17819c1a18f89c36078763cdfa/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55061b489fc36b17819c1a18f89c36078763cdfa/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Flib.rs?ref=55061b489fc36b17819c1a18f89c36078763cdfa", "patch": "@@ -9,7 +9,7 @@ mod rpc;\n mod process;\n pub mod msg;\n \n-use process::ProcMacroProcessSrv;\n+use process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n use ra_tt::{SmolStr, Subtree};\n use rpc::ProcMacroKind;\n use std::{\n@@ -45,21 +45,23 @@ impl ra_tt::TokenExpander for ProcMacroProcessExpander {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug)]\n enum ProcMacroClientKind {\n-    Process { process: Arc<ProcMacroProcessSrv> },\n+    Process { process: Arc<ProcMacroProcessSrv>, thread: ProcMacroProcessThread },\n     Dummy,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug)]\n pub struct ProcMacroClient {\n     kind: ProcMacroClientKind,\n }\n \n impl ProcMacroClient {\n     pub fn extern_process(process_path: &Path) -> Result<ProcMacroClient, std::io::Error> {\n-        let process = ProcMacroProcessSrv::run(process_path)?;\n-        Ok(ProcMacroClient { kind: ProcMacroClientKind::Process { process: Arc::new(process) } })\n+        let (thread, process) = ProcMacroProcessSrv::run(process_path)?;\n+        Ok(ProcMacroClient {\n+            kind: ProcMacroClientKind::Process { process: Arc::new(process), thread },\n+        })\n     }\n \n     pub fn dummy() -> ProcMacroClient {\n@@ -72,7 +74,7 @@ impl ProcMacroClient {\n     ) -> Vec<(SmolStr, Arc<dyn ra_tt::TokenExpander>)> {\n         match &self.kind {\n             ProcMacroClientKind::Dummy => vec![],\n-            ProcMacroClientKind::Process { process } => {\n+            ProcMacroClientKind::Process { process, .. } => {\n                 let macros = match process.find_proc_macros(dylib_path) {\n                     Err(err) => {\n                         eprintln!(\"Fail to find proc macro. Error: {:#?}\", err);"}, {"sha": "d028b365c55b3719d7fc12cb65244e7502aee07d", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/55061b489fc36b17819c1a18f89c36078763cdfa/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55061b489fc36b17819c1a18f89c36078763cdfa/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=55061b489fc36b17819c1a18f89c36078763cdfa", "patch": "@@ -11,17 +11,23 @@ use std::{\n     io::{self, Write},\n     path::{Path, PathBuf},\n     process::{Child, Command, Stdio},\n-    thread::spawn,\n+    thread::{spawn, JoinHandle},\n };\n \n #[derive(Debug, Default)]\n pub(crate) struct ProcMacroProcessSrv {\n     inner: Option<Handle>,\n }\n \n-struct Task {\n-    req: Message,\n-    result_tx: Sender<Message>,\n+#[derive(Debug)]\n+pub(crate) struct ProcMacroProcessThread {\n+    handle: Option<JoinHandle<()>>,\n+    sender: Sender<Task>,\n+}\n+\n+enum Task {\n+    Request { req: Message, result_tx: Sender<Message> },\n+    Close,\n }\n \n #[derive(Debug)]\n@@ -60,16 +66,33 @@ impl Process {\n     }\n }\n \n+impl std::ops::Drop for ProcMacroProcessThread {\n+    fn drop(&mut self) {\n+        if let Some(handle) = self.handle.take() {\n+            let _ = self.sender.send(Task::Close);\n+\n+            // Join the thread, it should finish shortly. We don't really care\n+            // whether it panicked, so it is safe to ignore the result\n+            let _ = handle.join();\n+        }\n+    }\n+}\n+\n impl ProcMacroProcessSrv {\n-    pub fn run(process_path: &Path) -> Result<ProcMacroProcessSrv, io::Error> {\n+    pub fn run(\n+        process_path: &Path,\n+    ) -> Result<(ProcMacroProcessThread, ProcMacroProcessSrv), io::Error> {\n         let process = Process::run(process_path)?;\n \n         let (task_tx, task_rx) = bounded(0);\n-\n-        let _ = spawn(move || {\n+        let handle = spawn(move || {\n             client_loop(task_rx, process);\n         });\n-        Ok(ProcMacroProcessSrv { inner: Some(Handle { sender: task_tx }) })\n+\n+        let srv = ProcMacroProcessSrv { inner: Some(Handle { sender: task_tx.clone() }) };\n+        let thread = ProcMacroProcessThread { handle: Some(handle), sender: task_tx };\n+\n+        Ok((thread, srv))\n     }\n \n     pub fn find_proc_macros(\n@@ -117,7 +140,12 @@ impl ProcMacroProcessSrv {\n \n         let (result_tx, result_rx) = bounded(0);\n \n-        handle.sender.send(Task { req: req.into(), result_tx }).unwrap();\n+        handle.sender.send(Task::Request { req: req.into(), result_tx }).map_err(|err| {\n+            ra_tt::ExpansionError::Unknown(format!(\n+                \"Fail to send task in channel, reason : {:#?} \",\n+                err\n+            ))\n+        })?;\n         let response = result_rx.recv().unwrap();\n \n         match response {\n@@ -155,7 +183,12 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n             Err(_) => break,\n         };\n \n-        let res = match send_message(&mut stdin, &mut stdout, task.req) {\n+        let (req, result_tx) = match task {\n+            Task::Request { req, result_tx } => (req, result_tx),\n+            Task::Close => break,\n+        };\n+\n+        let res = match send_message(&mut stdin, &mut stdout, req) {\n             Ok(res) => res,\n             Err(_err) => {\n                 let res = Response {\n@@ -167,7 +200,7 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n                         data: None,\n                     }),\n                 };\n-                if task.result_tx.send(res.into()).is_err() {\n+                if result_tx.send(res.into()).is_err() {\n                     break;\n                 }\n                 // Restart the process\n@@ -185,7 +218,7 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n         };\n \n         if let Some(res) = res {\n-            if task.result_tx.send(res).is_err() {\n+            if result_tx.send(res).is_err() {\n                 break;\n             }\n         }"}]}