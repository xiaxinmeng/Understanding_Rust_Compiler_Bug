{"sha": "a1be65845c1a48c724961b136cf98b4d4b5e972d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYmU2NTg0NWMxYTQ4YzcyNDk2MWIxMzZjZjk4YjRkNGI1ZTk3MmQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T12:14:40Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(14): Move LTO/codegen-unit conflict check to beginning of compilation process.", "tree": {"sha": "b2719e00061483cf21841cfce3116b377bb46946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2719e00061483cf21841cfce3116b377bb46946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1be65845c1a48c724961b136cf98b4d4b5e972d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1be65845c1a48c724961b136cf98b4d4b5e972d", "html_url": "https://github.com/rust-lang/rust/commit/a1be65845c1a48c724961b136cf98b4d4b5e972d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1be65845c1a48c724961b136cf98b4d4b5e972d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b924ec1484bfca00c42a8aff68d77c41d4cd1ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b924ec1484bfca00c42a8aff68d77c41d4cd1ea6", "html_url": "https://github.com/rust-lang/rust/commit/b924ec1484bfca00c42a8aff68d77c41d4cd1ea6"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "8c4cc20deb7b9564f57072368b8cf365251d47c2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1be65845c1a48c724961b136cf98b4d4b5e972d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1be65845c1a48c724961b136cf98b4d4b5e972d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a1be65845c1a48c724961b136cf98b4d4b5e972d", "patch": "@@ -1498,6 +1498,23 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         early_error(error_format, \"Value for codegen units must be a positive nonzero integer\");\n     }\n \n+    // It's possible that we have `codegen_units > 1` but only one item in\n+    // `trans.modules`.  We could theoretically proceed and do LTO in that\n+    // case, but it would be confusing to have the validity of\n+    // `-Z lto -C codegen-units=2` depend on details of the crate being\n+    // compiled, so we complain regardless.\n+    if cg.lto && cg.codegen_units > 1 {\n+        // This case is impossible to handle because LTO expects to be able\n+        // to combine the entire crate and all its dependencies into a\n+        // single compilation unit, but each codegen unit is in a separate\n+        // LLVM context, so they can't easily be combined.\n+        early_error(error_format, \"can't perform LTO when using multiple codegen units\");\n+    }\n+\n+    if cg.lto && debugging_opts.incremental.is_some() {\n+        early_error(error_format, \"can't perform LTO when compiling incrementally\");\n+    }\n+\n     let mut prints = Vec::<PrintRequest>::new();\n     if cg.target_cpu.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::TargetCPUs);"}, {"sha": "967b7d0eb62c1c17e0e9a643db4848e95530506f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1be65845c1a48c724961b136cf98b4d4b5e972d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1be65845c1a48c724961b136cf98b4d4b5e972d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=a1be65845c1a48c724961b136cf98b4d4b5e972d", "patch": "@@ -673,19 +673,6 @@ pub fn run_passes(sess: &Session,\n                   linker_info: LinkerInfo,\n                   no_integrated_as: bool)\n                   -> OngoingCrateTranslation {\n-    // It's possible that we have `codegen_units > 1` but only one item in\n-    // `trans.modules`.  We could theoretically proceed and do LTO in that\n-    // case, but it would be confusing to have the validity of\n-    // `-Z lto -C codegen-units=2` depend on details of the crate being\n-    // compiled, so we complain regardless.\n-    if sess.lto() && sess.opts.cg.codegen_units > 1 {\n-        // This case is impossible to handle because LTO expects to be able\n-        // to combine the entire crate and all its dependencies into a\n-        // single compilation unit, but each codegen unit is in a separate\n-        // LLVM context, so they can't easily be combined.\n-        sess.fatal(\"can't perform LTO when using multiple codegen units\");\n-    }\n-\n     let output_types_override = if no_integrated_as {\n         OutputTypes::new(&[(OutputType::Assembly, None)])\n     } else {"}]}