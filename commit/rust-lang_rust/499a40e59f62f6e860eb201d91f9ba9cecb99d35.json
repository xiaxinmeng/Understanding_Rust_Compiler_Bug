{"sha": "499a40e59f62f6e860eb201d91f9ba9cecb99d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OWE0MGU1OWY2MmY2ZTg2MGViMjAxZDkxZjliYTljZWNiOTlkMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-31T06:41:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-31T06:41:30Z"}, "message": "auto merge of #16650 : ruud-v-a/rust/timespec-arithmetic, r=alexcrichton\n\nThis changes the `Add` and `Sub` implementations for `Timespec` introduced in #16573 to use `Duration` as the time span type instead of `Timespec` itself, as [suggested](https://github.com/rust-lang/rust/pull/16573#issuecomment-52593408) by @sfackler.\r\n\r\nThis depends on #16626, because is uses `Duration::seconds(i64)`, whereas currently `Duration::seconds` takes an `i32`.", "tree": {"sha": "0ad06386febee454258efd934673fce66ddebf39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad06386febee454258efd934673fce66ddebf39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/499a40e59f62f6e860eb201d91f9ba9cecb99d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/499a40e59f62f6e860eb201d91f9ba9cecb99d35", "html_url": "https://github.com/rust-lang/rust/commit/499a40e59f62f6e860eb201d91f9ba9cecb99d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/499a40e59f62f6e860eb201d91f9ba9cecb99d35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2564540de933c2dfe48cc72f947b29853ab2803", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2564540de933c2dfe48cc72f947b29853ab2803", "html_url": "https://github.com/rust-lang/rust/commit/c2564540de933c2dfe48cc72f947b29853ab2803"}, {"sha": "d20de6d5c51300763d0290585f0c3bb769c3d1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20de6d5c51300763d0290585f0c3bb769c3d1b6", "html_url": "https://github.com/rust-lang/rust/commit/d20de6d5c51300763d0290585f0c3bb769c3d1b6"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "34402d01c865dfdff6fa874b266091eca4c792cc", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/499a40e59f62f6e860eb201d91f9ba9cecb99d35/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/499a40e59f62f6e860eb201d91f9ba9cecb99d35/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=499a40e59f62f6e860eb201d91f9ba9cecb99d35", "patch": "@@ -31,6 +31,7 @@ extern crate libc;\n use std::io::BufReader;\n use std::num;\n use std::string::String;\n+use std::time::Duration;\n \n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n@@ -90,10 +91,15 @@ impl Timespec {\n     }\n }\n \n-impl Add<Timespec, Timespec> for Timespec {\n-    fn add(&self, other: &Timespec) -> Timespec {\n-        let mut sec = self.sec + other.sec;\n-        let mut nsec = self.nsec + other.nsec;\n+impl Add<Duration, Timespec> for Timespec {\n+    fn add(&self, other: &Duration) -> Timespec {\n+        let d_sec = other.num_seconds();\n+        // It is safe to unwrap the nanoseconds, because there cannot be\n+        // more than one second left, which fits in i64 and in i32.\n+        let d_nsec = (other - Duration::seconds(d_sec))\n+                     .num_nanoseconds().unwrap() as i32;\n+        let mut sec = self.sec + d_sec;\n+        let mut nsec = self.nsec + d_nsec;\n         if nsec >= NSEC_PER_SEC {\n             nsec -= NSEC_PER_SEC;\n             sec += 1;\n@@ -102,15 +108,11 @@ impl Add<Timespec, Timespec> for Timespec {\n     }\n }\n \n-impl Sub<Timespec, Timespec> for Timespec {\n-    fn sub(&self, other: &Timespec) -> Timespec {\n-        let mut sec = self.sec - other.sec;\n-        let mut nsec = self.nsec - other.nsec;\n-        if nsec < 0 {\n-            nsec += NSEC_PER_SEC;\n-            sec -= 1;\n-        }\n-        Timespec::new(sec, nsec)\n+impl Sub<Timespec, Duration> for Timespec {\n+    fn sub(&self, other: &Timespec) -> Duration {\n+        let sec = self.sec - other.sec;\n+        let nsec = self.nsec - other.nsec;\n+        Duration::seconds(sec) + Duration::nanoseconds(nsec as i64)\n     }\n }\n \n@@ -1103,6 +1105,7 @@ mod tests {\n \n     use std::f64;\n     use std::result::{Err, Ok};\n+    use std::time::Duration;\n     use self::test::Bencher;\n \n     #[cfg(windows)]\n@@ -1514,19 +1517,19 @@ mod tests {\n \n     fn test_timespec_add() {\n         let a = Timespec::new(1, 2);\n-        let b = Timespec::new(2, 3);\n+        let b = Duration::seconds(2) + Duration::nanoseconds(3);\n         let c = a + b;\n         assert_eq!(c.sec, 3);\n         assert_eq!(c.nsec, 5);\n \n         let p = Timespec::new(1, super::NSEC_PER_SEC - 2);\n-        let q = Timespec::new(2, 2);\n+        let q = Duration::seconds(2) + Duration::nanoseconds(2);\n         let r = p + q;\n         assert_eq!(r.sec, 4);\n         assert_eq!(r.nsec, 0);\n \n         let u = Timespec::new(1, super::NSEC_PER_SEC - 2);\n-        let v = Timespec::new(2, 3);\n+        let v = Duration::seconds(2) + Duration::nanoseconds(3);\n         let w = u + v;\n         assert_eq!(w.sec, 4);\n         assert_eq!(w.nsec, 1);\n@@ -1536,20 +1539,17 @@ mod tests {\n         let a = Timespec::new(2, 3);\n         let b = Timespec::new(1, 2);\n         let c = a - b;\n-        assert_eq!(c.sec, 1);\n-        assert_eq!(c.nsec, 1);\n+        assert_eq!(c.num_nanoseconds(), Some(super::NSEC_PER_SEC as i64 + 1));\n \n         let p = Timespec::new(2, 0);\n         let q = Timespec::new(1, 2);\n         let r = p - q;\n-        assert_eq!(r.sec, 0);\n-        assert_eq!(r.nsec, super::NSEC_PER_SEC - 2);\n+        assert_eq!(r.num_nanoseconds(), Some(super::NSEC_PER_SEC as i64 - 2));\n \n         let u = Timespec::new(1, 2);\n         let v = Timespec::new(2, 3);\n         let w = u - v;\n-        assert_eq!(w.sec, -2);\n-        assert_eq!(w.nsec, super::NSEC_PER_SEC - 1);\n+        assert_eq!(w.num_nanoseconds(), Some(-super::NSEC_PER_SEC as i64 - 1));\n     }\n \n     #[test]"}]}