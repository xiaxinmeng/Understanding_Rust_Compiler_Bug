{"sha": "2d3afa683386cffc7be381eb3bf8ad6e9f440649", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkM2FmYTY4MzM4NmNmZmM3YmUzODFlYjNiZjhhZDZlOWY0NDA2NDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-29T18:44:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-29T18:44:16Z"}, "message": "Auto merge of #45616 - fhartwig:ptr-docs, r=dtolnay\n\nFix references to zero_memory and copy_memory in ptr docs\n\nFixes #45606", "tree": {"sha": "ef9b4b727ae47a97a064b1cee6a1966bf1e1e445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef9b4b727ae47a97a064b1cee6a1966bf1e1e445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3afa683386cffc7be381eb3bf8ad6e9f440649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3afa683386cffc7be381eb3bf8ad6e9f440649", "html_url": "https://github.com/rust-lang/rust/commit/2d3afa683386cffc7be381eb3bf8ad6e9f440649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3afa683386cffc7be381eb3bf8ad6e9f440649/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "690ff045949ac3f3c5bd341e1584f90bc49f0596", "url": "https://api.github.com/repos/rust-lang/rust/commits/690ff045949ac3f3c5bd341e1584f90bc49f0596", "html_url": "https://github.com/rust-lang/rust/commit/690ff045949ac3f3c5bd341e1584f90bc49f0596"}, {"sha": "9e966ad3dc4d9223db9683b524f43d084909e0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e966ad3dc4d9223db9683b524f43d084909e0c6", "html_url": "https://github.com/rust-lang/rust/commit/9e966ad3dc4d9223db9683b524f43d084909e0c6"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5cd672b03ffc9d1901364eae4246ad76789547cf", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d3afa683386cffc7be381eb3bf8ad6e9f440649/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3afa683386cffc7be381eb3bf8ad6e9f440649/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2d3afa683386cffc7be381eb3bf8ad6e9f440649", "patch": "@@ -228,7 +228,7 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// moves the value out of `src` without preventing further usage of `src`.\n /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n /// The pointer must be aligned; use `read_unaligned` if that is not the case.\n@@ -264,7 +264,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// moves the value out of `src` without preventing further usage of `src`.\n /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n /// # Examples\n@@ -397,7 +397,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// moves the value out of `src` without preventing further usage of `src`.\n /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n /// # Examples\n@@ -871,7 +871,7 @@ impl<T: ?Sized> *const T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// The pointer must be aligned; use `read_unaligned` if that is not the case.\n@@ -925,7 +925,7 @@ impl<T: ?Sized> *const T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples\n@@ -961,7 +961,7 @@ impl<T: ?Sized> *const T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples\n@@ -1569,7 +1569,7 @@ impl<T: ?Sized> *mut T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// The pointer must be aligned; use `read_unaligned` if that is not the case.\n@@ -1623,7 +1623,7 @@ impl<T: ?Sized> *mut T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples\n@@ -1659,7 +1659,7 @@ impl<T: ?Sized> *mut T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples"}]}