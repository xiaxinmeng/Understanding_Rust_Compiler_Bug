{"sha": "eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYmE0YjJkMmE5ZmFmNGE5ZGZhOTUyOTkxMzQ5OWMzYTJhZTAzYmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-10T12:07:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-10T12:07:46Z"}, "message": "remove compatibility code for passing miri flags via cargo arguments", "tree": {"sha": "a6ca4359ee8569794377701f2629db894b31345b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6ca4359ee8569794377701f2629db894b31345b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb", "html_url": "https://github.com/rust-lang/rust/commit/eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccbef9c69fe68b54e717d3d227306af029433ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbef9c69fe68b54e717d3d227306af029433ba8", "html_url": "https://github.com/rust-lang/rust/commit/ccbef9c69fe68b54e717d3d227306af029433ba8"}], "stats": {"total": 42, "additions": 2, "deletions": 40}, "files": [{"sha": "151c952c390ca97c37c30d695a63a62543840680", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=eaba4b2d2a9faf4a9dfa9529913499c3a2ae03bb", "patch": "@@ -521,46 +521,8 @@ fn phase_cargo_miri(mut args: env::Args) {\n         &host\n     };\n \n-    // Forward all further arguments. We do some processing here because we want to\n-    // detect people still using the old way of passing flags to Miri\n-    // (`cargo miri -- -Zmiri-foo`).\n-    while let Some(arg) = args.next() {\n-        cmd.arg(&arg);\n-        if arg == \"--\" {\n-            // Check if the next argument starts with `-Zmiri`. If yes, we assume\n-            // this is an old-style invocation.\n-            if let Some(next_arg) = args.next() {\n-                if next_arg.starts_with(\"-Zmiri\") || next_arg == \"--\" {\n-                    eprintln!(\n-                        \"WARNING: it seems like you are setting Miri's flags in `cargo miri` the old way,\\n\\\n-                        i.e., by passing them after the first `--`. This style is deprecated; please set\\n\\\n-                        the MIRIFLAGS environment variable instead. `cargo miri run/test` now interprets\\n\\\n-                        arguments the exact same way as `cargo run/test`.\"\n-                    );\n-                    // Old-style invocation. Turn these into MIRIFLAGS, if there are any.\n-                    if next_arg != \"--\" {\n-                        let mut miriflags = env::var(\"MIRIFLAGS\").unwrap_or_default();\n-                        miriflags.push(' ');\n-                        miriflags.push_str(&next_arg);\n-                        while let Some(further_arg) = args.next() {\n-                            if further_arg == \"--\" {\n-                                // End of the Miri flags!\n-                                break;\n-                            }\n-                            miriflags.push(' ');\n-                            miriflags.push_str(&further_arg);\n-                        }\n-                        env::set_var(\"MIRIFLAGS\", miriflags);\n-                    }\n-                    // Pass the remaining flags to cargo.\n-                    cmd.args(args);\n-                    break;\n-                }\n-                // Not a Miri argument after all, make sure we pass it to cargo.\n-                cmd.arg(next_arg);\n-            }\n-        }\n-    }\n+    // Forward all further arguments to cargo.\n+    cmd.args(args);\n \n     // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}]}