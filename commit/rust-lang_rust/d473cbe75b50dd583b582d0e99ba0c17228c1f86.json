{"sha": "d473cbe75b50dd583b582d0e99ba0c17228c1f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NzNjYmU3NWI1MGRkNTgzYjU4MmQwZTk5YmEwYzE3MjI4YzFmODY=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-11-18T17:19:38Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-12-24T15:44:46Z"}, "message": "BTreeMap: test split_off (and append) more thoroughly", "tree": {"sha": "132365493f2e8a6ce62ab812609df2e572caf36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132365493f2e8a6ce62ab812609df2e572caf36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d473cbe75b50dd583b582d0e99ba0c17228c1f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d473cbe75b50dd583b582d0e99ba0c17228c1f86", "html_url": "https://github.com/rust-lang/rust/commit/d473cbe75b50dd583b582d0e99ba0c17228c1f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d473cbe75b50dd583b582d0e99ba0c17228c1f86/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "html_url": "https://github.com/rust-lang/rust/commit/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "9c0ffee84fd22ad629c8c1f2e43ff653d3718ce3", "filename": "library/alloc/src/collections/btree/append.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs?ref=d473cbe75b50dd583b582d0e99ba0c17228c1f86", "patch": "@@ -81,15 +81,18 @@ impl<K, V> Root<K, V> {\n             // the appended elements even if advancing the iterator panicks.\n             *length += 1;\n         }\n-        self.fix_right_edge();\n+        self.fix_right_border_of_plentiful();\n     }\n \n-    fn fix_right_edge(&mut self) {\n-        // Handle underfull nodes, start from the top.\n+    /// Stock up any underfull nodes on the right border of the tree.\n+    /// The other nodes, those that are not the root nor a rightmost edge,\n+    /// must have MIN_LEN elements to spare.\n+    fn fix_right_border_of_plentiful(&mut self) {\n         let mut cur_node = self.borrow_mut();\n         while let Internal(internal) = cur_node.force() {\n             // Check if right-most child is underfull.\n             let mut last_kv = internal.last_kv().consider_for_balancing();\n+            debug_assert!(last_kv.left_child_len() >= MIN_LEN * 2);\n             let right_child_len = last_kv.right_child_len();\n             if right_child_len < MIN_LEN {\n                 // We need to steal."}, {"sha": "924ab3782910a42a9ac8c5549ba538e7c3d55fab", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=d473cbe75b50dd583b582d0e99ba0c17228c1f86", "patch": "@@ -1797,7 +1797,6 @@ fn test_append_ord_chaos() {\n }\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {\n-    assert!(len * 2 <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| (rng.next(), rng.next())))\n }\n@@ -1862,6 +1861,25 @@ fn test_split_off_tiny_right_height_2() {\n     assert_eq!(*right.last_key_value().unwrap().0, last);\n }\n \n+#[test]\n+fn test_split_off_halfway() {\n+    let mut rng = DeterministicRng::new();\n+    for &len in &[NODE_CAPACITY, 25, 50, 75, 100] {\n+        let mut data = Vec::from_iter((0..len).map(|_| (rng.next(), ())));\n+        // Insertion in non-ascending order creates some variation in node length.\n+        let mut map = BTreeMap::from_iter(data.iter().copied());\n+        data.sort();\n+        let small_keys = data.iter().take(len / 2).map(|kv| kv.0);\n+        let large_keys = data.iter().skip(len / 2).map(|kv| kv.0);\n+        let split_key = large_keys.clone().next().unwrap();\n+        let right = map.split_off(&split_key);\n+        map.check();\n+        right.check();\n+        assert!(map.keys().copied().eq(small_keys));\n+        assert!(right.keys().copied().eq(large_keys));\n+    }\n+}\n+\n #[test]\n fn test_split_off_large_random_sorted() {\n     // Miri is too slow"}, {"sha": "cdb39104047f0db0472e7a08757e9cfe9a180ed2", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=d473cbe75b50dd583b582d0e99ba0c17228c1f86", "patch": "@@ -38,6 +38,7 @@ pub unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n #[cfg(test)]\n /// XorShiftRng\n struct DeterministicRng {\n+    count: usize,\n     x: u32,\n     y: u32,\n     z: u32,\n@@ -47,11 +48,13 @@ struct DeterministicRng {\n #[cfg(test)]\n impl DeterministicRng {\n     fn new() -> Self {\n-        DeterministicRng { x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n+        DeterministicRng { count: 0, x: 0x193a6754, y: 0xa8a7d469, z: 0x97830e05, w: 0x113ba7bb }\n     }\n \n-    /// Guarantees that the first 70029 results are unique.\n+    /// Guarantees that each returned number is unique.\n     fn next(&mut self) -> u32 {\n+        self.count += 1;\n+        assert!(self.count <= 70029);\n         let x = self.x;\n         let t = x ^ (x << 11);\n         self.x = self.y;"}, {"sha": "fd19c0078a7487ef4af93cf9cc7287cbf97914a8", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=d473cbe75b50dd583b582d0e99ba0c17228c1f86", "patch": "@@ -696,8 +696,10 @@ fn test_first_last() {\n     assert_eq!(a.pop_last(), None);\n }\n \n+// Unlike the function with the same name in map/tests, returns no values.\n+// Which also means it returns different predetermined pseudo-random keys,\n+// and the test cases using this function explore slightly different trees.\n fn rand_data(len: usize) -> Vec<u32> {\n-    assert!(len <= 70029); // from that point on numbers repeat\n     let mut rng = DeterministicRng::new();\n     Vec::from_iter((0..len).map(|_| rng.next()))\n }"}, {"sha": "4561c8eaf47fb135bea1bd4194ee5a234ac3440e", "filename": "library/alloc/src/collections/btree/split.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d473cbe75b50dd583b582d0e99ba0c17228c1f86/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=d473cbe75b50dd583b582d0e99ba0c17228c1f86", "patch": "@@ -53,6 +53,9 @@ impl<K, V> Root<K, V> {\n         }\n     }\n \n+    /// Stock up or merge away any underfull nodes on the right border of the\n+    /// tree. The other nodes, those that are not the root nor a rightmost edge,\n+    /// must already have at least MIN_LEN elements.\n     fn fix_right_border(&mut self) {\n         self.fix_top();\n \n@@ -72,6 +75,7 @@ impl<K, V> Root<K, V> {\n                     }\n                     cur_node = last_kv.into_right_child();\n                 }\n+                debug_assert!(cur_node.len() > MIN_LEN);\n             }\n         }\n \n@@ -98,6 +102,7 @@ impl<K, V> Root<K, V> {\n                     }\n                     cur_node = first_kv.into_left_child();\n                 }\n+                debug_assert!(cur_node.len() > MIN_LEN);\n             }\n         }\n "}]}