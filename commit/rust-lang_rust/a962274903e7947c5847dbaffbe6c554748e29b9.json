{"sha": "a962274903e7947c5847dbaffbe6c554748e29b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjIyNzQ5MDNlNzk0N2M1ODQ3ZGJhZmZiZTZjNTU0NzQ4ZTI5Yjk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-26T21:14:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-26T21:14:52Z"}, "message": "Search for incompatible universes in borrow errors\n\nIf we have a borrow that has to live for `'static` we need to check for\nany regions in incompatible universes when trying to find the cause.", "tree": {"sha": "f934e817a84f6db068cf1e1b00fe8365440951a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f934e817a84f6db068cf1e1b00fe8365440951a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a962274903e7947c5847dbaffbe6c554748e29b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a962274903e7947c5847dbaffbe6c554748e29b9", "html_url": "https://github.com/rust-lang/rust/commit/a962274903e7947c5847dbaffbe6c554748e29b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a962274903e7947c5847dbaffbe6c554748e29b9/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "597f432489f12a3f33419daa039ccef11a12c4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/597f432489f12a3f33419daa039ccef11a12c4fd", "html_url": "https://github.com/rust-lang/rust/commit/597f432489f12a3f33419daa039ccef11a12c4fd"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "00e81ee049183f255efe2ea4c0f910269a6b6d77", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a962274903e7947c5847dbaffbe6c554748e29b9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962274903e7947c5847dbaffbe6c554748e29b9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=a962274903e7947c5847dbaffbe6c554748e29b9", "patch": "@@ -674,8 +674,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n     ) -> (ConstraintCategory, bool, Span, Option<RegionName>) {\n-        let (category, from_closure, span) =\n-            self.best_blame_constraint(mir, borrow_region, |r| r == outlived_region);\n+        let (category, from_closure, span) = self.best_blame_constraint(\n+            mir,\n+            borrow_region,\n+            |r| self.provides_universal_region(r, borrow_region, outlived_region)\n+        );\n         let outlived_fr_name =\n             self.give_region_a_name(infcx, mir, upvars, mir_def_id, outlived_region, &mut 1);\n         (category, from_closure, span, outlived_fr_name)"}, {"sha": "5f1f9b3a7f2299ce9d12133785edfe5583a61802", "filename": "src/test/ui/nll/local-outlives-static-via-hrtb.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a962274903e7947c5847dbaffbe6c554748e29b9/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962274903e7947c5847dbaffbe6c554748e29b9/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.rs?ref=a962274903e7947c5847dbaffbe6c554748e29b9", "patch": "@@ -0,0 +1,26 @@\n+// Test that we handle the case when a local variable is borrowed for `'static`\n+// due to an outlives constraint involving a region in an incompatible universe\n+\n+pub trait Outlives<'this> {}\n+\n+impl<'this, T> Outlives<'this> for T where T: 'this {}\n+trait Reference {\n+    type AssociatedType;\n+}\n+\n+impl<'a, T: 'a> Reference for &'a T {\n+    type AssociatedType = &'a ();\n+}\n+\n+fn assert_static_via_hrtb<G>(_: G) where for<'a> G: Outlives<'a> {}\n+\n+fn assert_static_via_hrtb_with_assoc_type<T>(_: &'_ T)\n+where\n+    for<'a> &'a T: Reference<AssociatedType = &'a ()>,\n+{}\n+\n+fn main() {\n+    let local = 0;\n+    assert_static_via_hrtb(&local); //~ ERROR `local` does not live long enough\n+    assert_static_via_hrtb_with_assoc_type(&&local); //~ ERROR `local` does not live long enough\n+}"}, {"sha": "61009da49ffed8d5b5f0019b6f45c7865913a715", "filename": "src/test/ui/nll/local-outlives-static-via-hrtb.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a962274903e7947c5847dbaffbe6c554748e29b9/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a962274903e7947c5847dbaffbe6c554748e29b9/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr?ref=a962274903e7947c5847dbaffbe6c554748e29b9", "patch": "@@ -0,0 +1,26 @@\n+error[E0597]: `local` does not live long enough\n+  --> $DIR/local-outlives-static-via-hrtb.rs:24:28\n+   |\n+LL |     assert_static_via_hrtb(&local);\n+   |     -----------------------^^^^^^-\n+   |     |                      |\n+   |     |                      borrowed value does not live long enough\n+   |     argument requires that `local` is borrowed for `'static`\n+LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n+LL | }\n+   | - `local` dropped here while still borrowed\n+\n+error[E0597]: `local` does not live long enough\n+  --> $DIR/local-outlives-static-via-hrtb.rs:25:45\n+   |\n+LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n+   |     ----------------------------------------^^^^^^-\n+   |     |                                       |\n+   |     |                                       borrowed value does not live long enough\n+   |     argument requires that `local` is borrowed for `'static`\n+LL | }\n+   | - `local` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}