{"sha": "1c1f11e649c52135435f6ea747426568edac56a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMWYxMWU2NDljNTIxMzU0MzVmNmVhNzQ3NDI2NTY4ZWRhYzU2YTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-13T21:25:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:16Z"}, "message": "core::rt: Warnings", "tree": {"sha": "56724cd1d4a454e621130e58f0b0f290e1e266df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56724cd1d4a454e621130e58f0b0f290e1e266df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1f11e649c52135435f6ea747426568edac56a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f11e649c52135435f6ea747426568edac56a2", "html_url": "https://github.com/rust-lang/rust/commit/1c1f11e649c52135435f6ea747426568edac56a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f11e649c52135435f6ea747426568edac56a2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "390dde571ede57133f249692ab020f83fd5d22ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/390dde571ede57133f249692ab020f83fd5d22ee", "html_url": "https://github.com/rust-lang/rust/commit/390dde571ede57133f249692ab020f83fd5d22ee"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "97841f0db46c6e9afc59eea354162588c56bc572", "filename": "src/libcore/rt/io/extensions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fextensions.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -17,6 +17,7 @@ use vec;\n use rt::io::Reader;\n use option::{Option, Some, None};\n use unstable::finally::Finally;\n+use util;\n \n pub trait ReaderUtil {\n \n@@ -60,11 +61,12 @@ impl<T: Reader> ReaderUtil for T {\n     fn read_byte(&mut self) -> Option<u8> {\n         let mut buf = [0];\n         match self.read(buf) {\n-            Some(nread) if nread == 0 => {\n+            Some(0) => {\n                 debug!(\"read 0 bytes. trying again\");\n                 self.read_byte()\n             }\n-            Some(nread) => Some(buf[0]),\n+            Some(1) => Some(buf[0]),\n+            Some(_) => util::unreachable(),\n             None => None\n         }\n     }"}, {"sha": "04f4edd7e39f5123069da06deae9dedc5c496e63", "filename": "src/libcore/rt/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -243,7 +243,7 @@ mod test {\n             }\n \n             do spawntask_immediately {\n-                let stream = TcpStream::connect(addr);\n+                let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n         }"}, {"sha": "5c1a3410087c4d024e14a43c4b210e09398c16a3", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -19,10 +19,6 @@ use super::context::Context;\n use super::local_services::LocalServices;\n use cell::Cell;\n \n-#[cfg(test)] use rt::uv::uvio::UvEventLoop;\n-#[cfg(test)] use unstable::run_in_bare_thread;\n-#[cfg(test)] use int;\n-\n // A more convenient name for external callers, e.g. `local_sched::take()`\n pub mod local_sched;\n "}, {"sha": "2cf0b5c4872889d94e61e82dd1579b6eaeec1d68", "filename": "src/libcore/rt/uv/idle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fidle.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -71,7 +71,7 @@ pub impl IdleWatcher {\n             unsafe {\n                 let mut idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n                 {\n-                    let mut data = idle_watcher.get_watcher_data();\n+                    let data = idle_watcher.get_watcher_data();\n                     data.close_cb.swap_unwrap()();\n                 }\n                 idle_watcher.drop_watcher_data();"}, {"sha": "bdd5588014c01436aa4934abfe064b4115746107", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -131,7 +131,7 @@ pub impl StreamWatcher {\n         extern fn close_cb(handle: *uvll::uv_stream_t) {\n             let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(handle);\n             {\n-                let mut data = stream_watcher.get_watcher_data();\n+                let data = stream_watcher.get_watcher_data();\n                 data.close_cb.swap_unwrap()();\n             }\n             stream_watcher.drop_watcher_data();\n@@ -373,7 +373,7 @@ mod test {\n                 assert!(status.is_none());\n                 let mut server_stream_watcher = server_stream_watcher;\n                 let mut loop_ = loop_;\n-                let mut client_tcp_watcher = TcpWatcher::new(&mut loop_);\n+                let client_tcp_watcher = TcpWatcher::new(&mut loop_);\n                 let mut client_tcp_watcher = client_tcp_watcher.as_stream();\n                 server_stream_watcher.accept(client_tcp_watcher);\n                 let count_cell = Cell(0);"}, {"sha": "5557a58098751bceab944e81df1c2e6e6ff709cd", "filename": "src/libcore/rt/uv/timer.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Ftimer.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -69,7 +69,7 @@ impl TimerWatcher {\n         extern fn close_cb(handle: *uvll::uv_timer_t) {\n             let mut watcher: TimerWatcher = NativeHandle::from_native_handle(handle);\n             {\n-                let mut data = watcher.get_watcher_data();\n+                let data = watcher.get_watcher_data();\n                 data.close_cb.swap_unwrap()();\n             }\n             watcher.drop_watcher_data();\n@@ -125,7 +125,6 @@ mod test {\n                 assert!(status.is_none());\n                 unsafe { *count_ptr += 1 };\n                 do timer.start(10, 0) |timer, status| {\n-                    let mut timer = timer;\n                     assert!(status.is_none());\n                     unsafe { *count_ptr += 1 };\n                     timer.close(||());\n@@ -159,18 +158,16 @@ mod test {\n \n                         let mut loop_ = timer.event_loop();\n                         let mut timer2 = TimerWatcher::new(&mut loop_);\n-                        do timer2.start(10, 0) |timer2, status| {\n+                        do timer2.start(10, 0) |timer2, _| {\n \n                             unsafe { *count_ptr += 1; }\n \n-                            let mut timer2 = timer2;\n                             timer2.close(||());\n \n                             // Restart the original timer\n                             let mut timer = timer;\n-                            do timer.start(10, 0) |timer, status| {\n+                            do timer.start(10, 0) |timer, _| {\n                                 unsafe { *count_ptr += 1; }\n-                                let mut timer = timer;\n                                 timer.close(||());\n                             }\n                         }"}, {"sha": "ce4eb6aff870126c0ae1fc7390e5484ec414e4e3", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f11e649c52135435f6ea747426568edac56a2/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=1c1f11e649c52135435f6ea747426568edac56a2", "patch": "@@ -77,7 +77,6 @@ impl EventLoop for UvEventLoop {\n         let mut timer =  TimerWatcher::new(self.uvio.uv_loop());\n         do timer.start(ms, 0) |timer, status| {\n             assert!(status.is_none());\n-            let mut timer = timer;\n             timer.close(||());\n             f();\n         }\n@@ -235,7 +234,7 @@ impl RtioTcpListener for UvTcpListener {\n             let maybe_stream = if status.is_none() {\n                 let mut server_stream_watcher = server_stream_watcher;\n                 let mut loop_ = server_stream_watcher.event_loop();\n-                let mut client_tcp_watcher = TcpWatcher::new(&mut loop_);\n+                let client_tcp_watcher = TcpWatcher::new(&mut loop_);\n                 let client_tcp_watcher = client_tcp_watcher.as_stream();\n                 // XXX: Need's to be surfaced in interface\n                 server_stream_watcher.accept(client_tcp_watcher);"}]}