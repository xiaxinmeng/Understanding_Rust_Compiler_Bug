{"sha": "46c00a21e1e89ebbf7757dcbee35f89332575134", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YzAwYTIxZTFlODllYmJmNzc1N2RjYmVlMzVmODkzMzI1NzUxMzQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-26T11:55:11Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-03T09:20:15Z"}, "message": "Move all intrinsic whitelists into the constness check file", "tree": {"sha": "cddd9cc140b18c51a4d5c8c7c976e655178f0b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddd9cc140b18c51a4d5c8c7c976e655178f0b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46c00a21e1e89ebbf7757dcbee35f89332575134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46c00a21e1e89ebbf7757dcbee35f89332575134", "html_url": "https://github.com/rust-lang/rust/commit/46c00a21e1e89ebbf7757dcbee35f89332575134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46c00a21e1e89ebbf7757dcbee35f89332575134/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52be0b07ae4ff025e40e04d7fe8d2a530980b637", "url": "https://api.github.com/repos/rust-lang/rust/commits/52be0b07ae4ff025e40e04d7fe8d2a530980b637", "html_url": "https://github.com/rust-lang/rust/commit/52be0b07ae4ff025e40e04d7fe8d2a530980b637"}], "stats": {"total": 98, "additions": 42, "deletions": 56}, "files": [{"sha": "8ec5120d6b37d301373770fef2acb6147b7877d5", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=46c00a21e1e89ebbf7757dcbee35f89332575134", "patch": "@@ -36,12 +36,47 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if the `def_id` refers to an intrisic which we've whitelisted\n+    /// for being called from stable `const fn`s (`min_const_fn`).\n+    ///\n+    /// Adding more intrinsics requires sign-off from @rust-lang/lang.\n+    fn is_intrinsic_min_const_fn(self, def_id: DefId) -> bool {\n+        match self.item_name(def_id) {\n+            | sym::size_of\n+            | sym::min_align_of\n+            | sym::needs_drop\n+            // Arithmetic:\n+            | sym::add_with_overflow // ~> .overflowing_add\n+            | sym::sub_with_overflow // ~> .overflowing_sub\n+            | sym::mul_with_overflow // ~> .overflowing_mul\n+            | sym::wrapping_add // ~> .wrapping_add\n+            | sym::wrapping_sub // ~> .wrapping_sub\n+            | sym::wrapping_mul // ~> .wrapping_mul\n+            | sym::saturating_add // ~> .saturating_add\n+            | sym::saturating_sub // ~> .saturating_sub\n+            | sym::unchecked_shl // ~> .wrapping_shl\n+            | sym::unchecked_shr // ~> .wrapping_shr\n+            | sym::rotate_left // ~> .rotate_left\n+            | sym::rotate_right // ~> .rotate_right\n+            | sym::ctpop // ~> .count_ones\n+            | sym::ctlz // ~> .leading_zeros\n+            | sym::cttz // ~> .trailing_zeros\n+            | sym::bswap // ~> .swap_bytes\n+            | sym::bitreverse // ~> .reverse_bits\n+            => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` if this function must conform to `min_const_fn`\n     pub fn is_min_const_fn(self, def_id: DefId) -> bool {\n         // Bail out if the signature doesn't contain `const`\n         if !self.is_const_fn_raw(def_id) {\n             return false;\n         }\n+        if let Abi::RustIntrinsic = self.fn_sig(def_id).abi() {\n+            return self.is_intrinsic_min_const_fn(def_id);\n+        }\n \n         if self.features().staged_api {\n             // in order for a libstd function to be considered min_const_fn"}, {"sha": "cf04d3e975b6fccd68d04a5be591a1b023c0f0e8", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 52, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=46c00a21e1e89ebbf7757dcbee35f89332575134", "patch": "@@ -2,7 +2,6 @@ use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, Predicate, Ty, TyCtxt, adjustment::{PointerCast}};\n-use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n use syntax::symbol::{sym, Symbol};\n@@ -356,33 +355,16 @@ fn check_terminator(\n         } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(def_id, _) = fn_ty.kind {\n-\n-                // some intrinsics are waved through if called inside the\n-                // standard library. Users never need to call them directly\n-                match tcx.fn_sig(def_id).abi() {\n-                    abi::Abi::RustIntrinsic => if !is_intrinsic_whitelisted(tcx, def_id) {\n-                        return Err((\n-                            span,\n-                            \"can only call a curated list of intrinsics in `min_const_fn`\".into(),\n-                        ))\n-                    },\n-                    abi::Abi::Rust if tcx.is_min_const_fn(def_id) => {},\n-                    abi::Abi::Rust => return Err((\n+                if !tcx.is_min_const_fn(def_id) {\n+                    return Err((\n                         span,\n                         format!(\n                             \"can only call other `const fn` within a `const fn`, \\\n                              but `{:?}` is not stable as `const fn`\",\n                             func,\n                         )\n                         .into(),\n-                    )),\n-                    abi => return Err((\n-                        span,\n-                        format!(\n-                            \"cannot call functions with `{}` abi in `min_const_fn`\",\n-                            abi,\n-                        ).into(),\n-                    )),\n+                    ));\n                 }\n \n                 check_operand(tcx, func, span, def_id, body)?;\n@@ -410,34 +392,3 @@ fn check_terminator(\n     }\n }\n \n-/// Returns `true` if the `def_id` refers to an intrisic which we've whitelisted\n-/// for being called from stable `const fn`s (`min_const_fn`).\n-///\n-/// Adding more intrinsics requires sign-off from @rust-lang/lang.\n-fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    match tcx.item_name(def_id) {\n-        | sym::size_of\n-        | sym::min_align_of\n-        | sym::needs_drop\n-        // Arithmetic:\n-        | sym::add_with_overflow // ~> .overflowing_add\n-        | sym::sub_with_overflow // ~> .overflowing_sub\n-        | sym::mul_with_overflow // ~> .overflowing_mul\n-        | sym::wrapping_add // ~> .wrapping_add\n-        | sym::wrapping_sub // ~> .wrapping_sub\n-        | sym::wrapping_mul // ~> .wrapping_mul\n-        | sym::saturating_add // ~> .saturating_add\n-        | sym::saturating_sub // ~> .saturating_sub\n-        | sym::unchecked_shl // ~> .wrapping_shl\n-        | sym::unchecked_shr // ~> .wrapping_shr\n-        | sym::rotate_left // ~> .rotate_left\n-        | sym::rotate_right // ~> .rotate_right\n-        | sym::ctpop // ~> .count_ones\n-        | sym::ctlz // ~> .leading_zeros\n-        | sym::cttz // ~> .trailing_zeros\n-        | sym::bswap // ~> .swap_bytes\n-        | sym::bitreverse // ~> .reverse_bits\n-        => true,\n-        _ => false,\n-    }\n-}"}, {"sha": "6469a65700dad155a796c78c3bba5b1b71639780", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs?ref=46c00a21e1e89ebbf7757dcbee35f89332575134", "patch": "@@ -7,7 +7,7 @@ extern \"C\" {\n const extern fn bar() {\n     unsafe {\n         regular_in_block();\n-        //~^ ERROR: cannot call functions with `\"C\"` abi in `min_const_fn`\n+        //~^ ERROR: can only call other `const fn` within a `const fn`\n     }\n }\n \n@@ -16,7 +16,7 @@ extern fn regular() {}\n const extern fn foo() {\n     unsafe {\n         regular();\n-        //~^ ERROR: cannot call functions with `\"C\"` abi in `min_const_fn`\n+        //~^ ERROR: can only call other `const fn` within a `const fn`\n     }\n }\n "}, {"sha": "eed279ecf75034b036bad7e456de753d049c74fb", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46c00a21e1e89ebbf7757dcbee35f89332575134/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr?ref=46c00a21e1e89ebbf7757dcbee35f89332575134", "patch": "@@ -1,4 +1,4 @@\n-error[E0723]: cannot call functions with `\"C\"` abi in `min_const_fn`\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const regular_in_block` is not stable as `const fn`\n   --> $DIR/const-extern-fn-call-extern-fn.rs:9:9\n    |\n LL |         regular_in_block();\n@@ -7,7 +7,7 @@ LL |         regular_in_block();\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: cannot call functions with `\"C\"` abi in `min_const_fn`\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const regular` is not stable as `const fn`\n   --> $DIR/const-extern-fn-call-extern-fn.rs:18:9\n    |\n LL |         regular();"}]}