{"sha": "2e78db385831b7121b26a7efaad6eebca97fea22", "node_id": "C_kwDOAAsO6NoAKDJlNzhkYjM4NTgzMWI3MTIxYjI2YTdlZmFhZDZlZWJjYTk3ZmVhMjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-16T12:46:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-16T12:46:13Z"}, "message": "Rollup merge of #100610 - nnethercote:ast-and-parser-tweaks, r=spastorino\n\nAst and parser tweaks\n\nr? `@spastorino`", "tree": {"sha": "9170e8202e203f9bd5ce0a754bafc2d7d2c6ca29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9170e8202e203f9bd5ce0a754bafc2d7d2c6ca29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e78db385831b7121b26a7efaad6eebca97fea22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+5GVCRBK7hj4Ov3rIwAAAeQIACztEuoi+XXb+ZIvbbCDyF63\nIwQnlMw2ySmwlFAzU8btENW0ShjAkRiSb7/O2UDnw/1sjDB8Znj6MxYhCmMuCMax\n7dEE0i6rXQo4/iAve7Mvy5g5xF20Q6Lzytv3YjOjws7fS6O7jHzu0XLBfZS0G45A\nB2Pyp2T77cRC1iSGwPuF28xgXA+G7Zort3OeQ9OvOqZfDEm1ANa/yqRTyxZZ9Qyd\nGIBnq9Zio79fmXctLlgDVkGZx/mRVifqXqrs+U3Z7ibhptAbwXjOsF8BZs6Qil9+\ndBEXmWmM9WlLMmkPe9xhsOh5M1uIdWkDvWYHsmJ4JTcDyNzII/lz2/lL0z2X5MM=\n=UwaA\n-----END PGP SIGNATURE-----\n", "payload": "tree 9170e8202e203f9bd5ce0a754bafc2d7d2c6ca29\nparent cf5c7645ac7734ab9e0b4aba3f1e76abd3777167\nparent 330862701608d4d71f658863fcd6261298a28c72\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660653973 +0530\ncommitter GitHub <noreply@github.com> 1660653973 +0530\n\nRollup merge of #100610 - nnethercote:ast-and-parser-tweaks, r=spastorino\n\nAst and parser tweaks\n\nr? `@spastorino`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e78db385831b7121b26a7efaad6eebca97fea22", "html_url": "https://github.com/rust-lang/rust/commit/2e78db385831b7121b26a7efaad6eebca97fea22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e78db385831b7121b26a7efaad6eebca97fea22/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "html_url": "https://github.com/rust-lang/rust/commit/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167"}, {"sha": "330862701608d4d71f658863fcd6261298a28c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/330862701608d4d71f658863fcd6261298a28c72", "html_url": "https://github.com/rust-lang/rust/commit/330862701608d4d71f658863fcd6261298a28c72"}], "stats": {"total": 39, "additions": 14, "deletions": 25}, "files": [{"sha": "3d8eee6f5974aafce695d22f010d3a98fc136731", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -497,7 +497,6 @@ pub struct WhereRegionPredicate {\n /// E.g., `T = int`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct WhereEqPredicate {\n-    pub id: NodeId,\n     pub span: Span,\n     pub lhs_ty: P<Ty>,\n     pub rhs_ty: P<Ty>,\n@@ -3042,6 +3041,7 @@ mod size_asserts {\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 104);\n+    static_assert_size!(ExprKind, 72);\n     static_assert_size!(Fn, 192);\n     static_assert_size!(ForeignItem, 160);\n     static_assert_size!(ForeignItemKind, 72);\n@@ -3051,9 +3051,13 @@ mod size_asserts {\n     static_assert_size!(Item, 200);\n     static_assert_size!(ItemKind, 112);\n     static_assert_size!(Lit, 48);\n+    static_assert_size!(LitKind, 24);\n     static_assert_size!(Pat, 120);\n+    static_assert_size!(PatKind, 96);\n     static_assert_size!(Path, 40);\n     static_assert_size!(PathSegment, 24);\n     static_assert_size!(Stmt, 32);\n+    static_assert_size!(StmtKind, 16);\n     static_assert_size!(Ty, 96);\n+    static_assert_size!(TyKind, 72);\n }"}, {"sha": "0520319e3be14e8190aa772391a3354a3bb786a5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -935,8 +935,7 @@ pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis:\n             visit_vec(bounds, |bound| noop_visit_param_bound(bound, vis));\n         }\n         WherePredicate::EqPredicate(ep) => {\n-            let WhereEqPredicate { id, span, lhs_ty, rhs_ty } = ep;\n-            vis.visit_id(id);\n+            let WhereEqPredicate { span, lhs_ty, rhs_ty } = ep;\n             vis.visit_span(span);\n             vis.visit_ty(lhs_ty);\n             vis.visit_ty(rhs_ty);"}, {"sha": "0f1bab24f96ca8036673d4c203790376df0ea8f3", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -1498,9 +1498,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 in_where_clause: true,\n             }),\n-            WherePredicate::EqPredicate(WhereEqPredicate { id, ref lhs_ty, ref rhs_ty, span }) => {\n+            WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    hir_id: self.lower_node_id(id),\n                     lhs_ty: self\n                         .lower_ty(lhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n                     rhs_ty: self"}, {"sha": "9f3a80ea7cbdce84b935a897d593c41531131fa5", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -640,11 +640,7 @@ impl<'a> TraitDef<'a> {\n                 }\n                 ast::WherePredicate::EqPredicate(we) => {\n                     let span = we.span.with_ctxt(ctxt);\n-                    ast::WherePredicate::EqPredicate(ast::WhereEqPredicate {\n-                        id: ast::DUMMY_NODE_ID,\n-                        span,\n-                        ..we.clone()\n-                    })\n+                    ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { span, ..we.clone() })\n                 }\n             }\n         }));"}, {"sha": "ca1705f26b540dda4abf07d221ecf7727cdad45e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -778,7 +778,6 @@ impl<'hir> WhereRegionPredicate<'hir> {\n /// An equality predicate (e.g., `T = int`); currently unsupported.\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereEqPredicate<'hir> {\n-    pub hir_id: HirId,\n     pub span: Span,\n     pub lhs_ty: &'hir Ty<'hir>,\n     pub rhs_ty: &'hir Ty<'hir>,"}, {"sha": "3d5e22add7187db19a2a52c1245976c028b83bc4", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -876,10 +876,7 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n             visitor.visit_lifetime(lifetime);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        WherePredicate::EqPredicate(WhereEqPredicate {\n-            hir_id, ref lhs_ty, ref rhs_ty, ..\n-        }) => {\n-            visitor.visit_id(hir_id);\n+        WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, .. }) => {\n             visitor.visit_ty(lhs_ty);\n             visitor.visit_ty(rhs_ty);\n         }"}, {"sha": "5e5f2fd7d9f8df7faed6c3e53719c9547029f8a2", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -314,7 +314,6 @@ impl<'a> Parser<'a> {\n                 span: lo.to(self.prev_token.span),\n                 lhs_ty: ty,\n                 rhs_ty,\n-                id: ast::DUMMY_NODE_ID,\n             }))\n         } else {\n             self.maybe_recover_bounds_doubled_colon(&ty)?;"}, {"sha": "fc7fb866f110f5dd91e85fa1f0a0d79ea8a47cef", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e78db385831b7121b26a7efaad6eebca97fea22/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=2e78db385831b7121b26a7efaad6eebca97fea22", "patch": "@@ -527,7 +527,7 @@ impl<'a> Parser<'a> {\n                         Ok(ident_gen_args) => ident_gen_args,\n                         Err(()) => return Ok(Some(AngleBracketedArg::Arg(arg))),\n                     };\n-                    if binder.is_some() {\n+                    if binder {\n                         // FIXME(compiler-errors): this could be improved by suggesting lifting\n                         // this up to the trait, at least before this becomes real syntax.\n                         // e.g. `Trait<for<'a> Assoc = Ty>` -> `for<'a> Trait<Assoc = Ty>`\n@@ -720,28 +720,24 @@ impl<'a> Parser<'a> {\n \n     /// Given a arg inside of generics, we try to destructure it as if it were the LHS in\n     /// `LHS = ...`, i.e. an associated type binding.\n-    /// This returns (optionally, if they are present) any `for<'a, 'b>` binder args, the\n+    /// This returns a bool indicating if there are any `for<'a, 'b>` binder args, the\n     /// identifier, and any GAT arguments.\n     fn get_ident_from_generic_arg(\n         &self,\n         gen_arg: &GenericArg,\n-    ) -> Result<(Option<Vec<ast::GenericParam>>, Ident, Option<GenericArgs>), ()> {\n+    ) -> Result<(bool, Ident, Option<GenericArgs>), ()> {\n         if let GenericArg::Type(ty) = gen_arg {\n             if let ast::TyKind::Path(qself, path) = &ty.kind\n                 && qself.is_none()\n                 && let [seg] = path.segments.as_slice()\n             {\n-                return Ok((None, seg.ident, seg.args.as_deref().cloned()));\n+                return Ok((false, seg.ident, seg.args.as_deref().cloned()));\n             } else if let ast::TyKind::TraitObject(bounds, ast::TraitObjectSyntax::None) = &ty.kind\n                 && let [ast::GenericBound::Trait(trait_ref, ast::TraitBoundModifier::None)] =\n                     bounds.as_slice()\n                 && let [seg] = trait_ref.trait_ref.path.segments.as_slice()\n             {\n-                return Ok((\n-                    Some(trait_ref.bound_generic_params.clone()),\n-                    seg.ident,\n-                    seg.args.as_deref().cloned(),\n-                ));\n+                return Ok((true, seg.ident, seg.args.as_deref().cloned()));\n             }\n         }\n         Err(())"}]}