{"sha": "5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMThiMDNiYjk3OTFmZDc4ZjFjYTU3OTdkNjc1OGFkM2M0MmZjNzc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-22T05:00:18Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-22T05:00:18Z"}, "message": "Merge pull request #345 from Manishearth/fix-match\n\nHandle comments in match better (fixes #344)", "tree": {"sha": "3630e8c5bf9ab03047b63d073fdfbaaa68580c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3630e8c5bf9ab03047b63d073fdfbaaa68580c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "html_url": "https://github.com/rust-lang/rust/commit/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc055c522451abd5582664968381071c51e3077", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc055c522451abd5582664968381071c51e3077", "html_url": "https://github.com/rust-lang/rust/commit/1dc055c522451abd5582664968381071c51e3077"}, {"sha": "106f7251fbe68a2e4a2b483fc4793f6bcd5d49a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/106f7251fbe68a2e4a2b483fc4793f6bcd5d49a5", "html_url": "https://github.com/rust-lang/rust/commit/106f7251fbe68a2e4a2b483fc4793f6bcd5d49a5"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "7bcf613b2e53f2a1c219548fa9efa5116baa9096", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "patch": "@@ -117,7 +117,7 @@ impl Rewrite for ast::Expr {\n                               offset)\n             }\n             ast::Expr_::ExprMatch(ref cond, ref arms, _) => {\n-                rewrite_match(context, cond, arms, width, offset)\n+                rewrite_match(context, cond, arms, width, offset, self.span)\n             }\n             ast::Expr_::ExprPath(ref qself, ref path) => {\n                 rewrite_path(context, qself.as_ref(), path, width, offset)\n@@ -624,7 +624,8 @@ fn rewrite_match(context: &RewriteContext,\n                  cond: &ast::Expr,\n                  arms: &[ast::Arm],\n                  width: usize,\n-                 offset: Indent)\n+                 offset: Indent,\n+                 span: Span)\n                  -> Option<String> {\n     if arms.is_empty() {\n         return None;\n@@ -666,7 +667,11 @@ fn rewrite_match(context: &RewriteContext,\n         if !missed_str.is_empty() {\n             result.push('\\n');\n             result.push_str(&arm_indent_str);\n-            result.push_str(missed_str);\n+            result.push_str(&rewrite_comment(&missed_str,\n+                                             false,\n+                                             width,\n+                                             arm_indent,\n+                                             context.config));\n         }\n         result.push('\\n');\n         result.push_str(&arm_indent_str);\n@@ -682,11 +687,27 @@ fn rewrite_match(context: &RewriteContext,\n             result.push_str(&snippet);\n         }\n     }\n-\n-    // We'll miss any comments etc. between the last arm and the end of the\n-    // match expression, but meh.\n+    let last_comment = context.snippet(mk_sp(arm_end_pos(&arms[arms.len() - 1]), span.hi));\n+    let last_comment = match last_comment.find_uncommented(\",\") {\n+        Some(n) => &last_comment[n+1..],\n+        None => &last_comment[..],\n+    };\n+    let last_comment = match last_comment.find_uncommented(\"}\") {\n+        Some(n) => &last_comment[..n-1],\n+        None => &last_comment[..],\n+    };\n+    let last_comment = last_comment.trim();\n \n     result.push('\\n');\n+    if last_comment.len() > 0 {\n+        result.push_str(&arm_indent_str);\n+        result.push_str(&rewrite_comment(&last_comment,\n+                                         false,\n+                                         width,\n+                                         arm_indent,\n+                                         context.config));\n+        result.push('\\n');\n+    }\n     result.push_str(&(context.block_indent + context.overflow_indent).to_string(context.config));\n     result.push('}');\n     Some(result)"}, {"sha": "03265da7e1cdfb3d2e3c31c515eb3c67e7106d15", "filename": "tests/source/expr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "patch": "@@ -130,6 +130,16 @@ fn issue184(source: &str) {\n     }\n }\n \n+fn matches() {\n+    match 1 {\n+        1 => 1, // foo\n+        2 => 2,\n+        // bar\n+        3 => 3,\n+        _ => 0 // baz\n+    }\n+}\n+\n fn arrays() {\n     let x = [0,\n          1,"}, {"sha": "007d0ec7cb018d686b8affcbe2f58b06c7e7b895", "filename": "tests/target/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e18b03bb9791fd78f1ca5797d6758ad3c42fc77/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=5e18b03bb9791fd78f1ca5797d6758ad3c42fc77", "patch": "@@ -167,6 +167,18 @@ fn issue184(source: &str) {\n     }\n }\n \n+fn matches() {\n+    match 1 {\n+        1 => 1,\n+        // foo\n+        2 => 2,\n+        // bar\n+        3 => 3,\n+        _ => 0,\n+        // baz\n+    }\n+}\n+\n fn arrays() {\n     let x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 7, 8, 9, 0, 1, 2, 3, 4,\n              5, 6, 7, 8, 9, 0];"}]}