{"sha": "be9c64b0c78401358a93b66e357d3bb094ba6274", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOWM2NGIwYzc4NDAxMzU4YTkzYjY2ZTM1N2QzYmIwOTRiYTYyNzQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T05:15:33Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T05:15:33Z"}, "message": "Store generator interior in MIR literals", "tree": {"sha": "d14ba72ccf3718d444077416889de07c7a818d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14ba72ccf3718d444077416889de07c7a818d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9c64b0c78401358a93b66e357d3bb094ba6274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9c64b0c78401358a93b66e357d3bb094ba6274", "html_url": "https://github.com/rust-lang/rust/commit/be9c64b0c78401358a93b66e357d3bb094ba6274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9c64b0c78401358a93b66e357d3bb094ba6274/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91dde3eb2d886fa581a39a0968b027328b95658e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91dde3eb2d886fa581a39a0968b027328b95658e", "html_url": "https://github.com/rust-lang/rust/commit/91dde3eb2d886fa581a39a0968b027328b95658e"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "3d5de5579f0f910d0c5fafbf6e1981433d0990fc", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -442,11 +442,15 @@ for mir::AggregateKind<'tcx> {\n                 substs.hash_stable(hcx, hasher);\n                 active_field.hash_stable(hcx, hasher);\n             }\n-            mir::AggregateKind::Closure(def_id, ref substs) |\n-            mir::AggregateKind::Generator(def_id, ref substs) => {\n+            mir::AggregateKind::Closure(def_id, ref substs) => {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n+            mir::AggregateKind::Generator(def_id, ref substs, ref interior) => {\n+                def_id.hash_stable(hcx, hasher);\n+                substs.hash_stable(hcx, hasher);\n+                interior.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "0d3629a8e5feeaecc1bef7179a3f9da6bec454c2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, ClosureSubsts, Region, Ty};\n+use ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use util::ppaux;\n use rustc_back::slice;\n@@ -1260,7 +1260,7 @@ pub enum AggregateKind<'tcx> {\n     /// number and is present only for union expressions.\n     Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<usize>),\n     Closure(DefId, ClosureSubsts<'tcx>),\n-    Generator(DefId, ClosureSubsts<'tcx>),\n+    Generator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n@@ -1423,7 +1423,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }),\n \n-                    AggregateKind::Generator(def_id, _) => ty::tls::with(|tcx| {\n+                    AggregateKind::Generator(def_id, _, _) => ty::tls::with(|tcx| {\n                         if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n                             let name = format!(\"[generator@{:?}]\", tcx.hir.span(node_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n@@ -1892,8 +1892,8 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                         AggregateKind::Adt(def, v, substs.fold_with(folder), n),\n                     AggregateKind::Closure(id, substs) =>\n                         AggregateKind::Closure(id, substs.fold_with(folder)),\n-                    AggregateKind::Generator(id, substs) =>\n-                        AggregateKind::Generator(id, substs.fold_with(folder)),\n+                    AggregateKind::Generator(id, substs, interior) =>\n+                        AggregateKind::Generator(id, substs.fold_with(folder), interior.fold_with(folder)),\n                 };\n                 Aggregate(kind, fields.fold_with(folder))\n             }\n@@ -1920,7 +1920,8 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                     AggregateKind::Tuple => false,\n                     AggregateKind::Adt(_, _, substs, _) => substs.visit_with(visitor),\n                     AggregateKind::Closure(_, substs) => substs.visit_with(visitor),\n-                    AggregateKind::Generator(_, substs) => substs.visit_with(visitor),\n+                    AggregateKind::Generator(_, substs, interior) => substs.visit_with(visitor) ||\n+                        interior.visit_with(visitor),\n                 }) || fields.visit_with(visitor)\n             }\n         }"}, {"sha": "14c53ee2dd7820b2cd791405351adddc6ebc07d5", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -202,13 +202,8 @@ impl<'tcx> Rvalue<'tcx> {\n                     AggregateKind::Closure(did, substs) => {\n                         tcx.mk_closure_from_closure_substs(did, substs)\n                     }\n-                    AggregateKind::Generator(did, substs) => {\n-                        let node_id = tcx.hir.as_local_node_id(did).unwrap();\n-                        let interior = *tcx.typeck_tables_of(did)\n-                            .generator_interiors\n-                            .get(&node_id)\n-                            .unwrap();\n-                        tcx.mk_generator(did, substs, interior.subst(tcx, substs.substs))\n+                    AggregateKind::Generator(did, substs, interior) => {\n+                        tcx.mk_generator(did, substs, interior)\n                     }\n                 }\n             }"}, {"sha": "30ffa73019c960b3ee6e8b2ae753177b9d228d33", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -11,7 +11,7 @@\n use middle::const_val::ConstVal;\n use hir::def_id::DefId;\n use ty::subst::Substs;\n-use ty::{ClosureSubsts, Region, Ty};\n+use ty::{ClosureSubsts, Region, Ty, GeneratorInterior};\n use mir::*;\n use rustc_const_math::ConstUsize;\n use syntax_pos::Span;\n@@ -226,6 +226,12 @@ macro_rules! make_mir_visitor {\n                 self.super_closure_substs(substs);\n             }\n \n+            fn visit_generator_interior(&mut self,\n+                                    interior: & $($mutability)* GeneratorInterior<'tcx>,\n+                                    _: Location) {\n+                self.super_generator_interior(interior);\n+            }\n+\n             fn visit_const_val(&mut self,\n                                const_val: & $($mutability)* ConstVal,\n                                _: Location) {\n@@ -570,9 +576,11 @@ macro_rules! make_mir_visitor {\n                                 self.visit_closure_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(ref $($mutability)* def_id,\n-                                                   ref $($mutability)* closure_substs) => {\n+                                                   ref $($mutability)* closure_substs,\n+                                                   ref $($mutability)* interior) => {\n                                 self.visit_def_id(def_id, location);\n                                 self.visit_closure_substs(closure_substs, location);\n+                                self.visit_generator_interior(interior, location);\n                             }\n                         }\n \n@@ -742,6 +750,10 @@ macro_rules! make_mir_visitor {\n             fn super_substs(&mut self, _substs: & $($mutability)* &'tcx Substs<'tcx>) {\n             }\n \n+            fn super_generator_interior(&mut self,\n+                                    _interior: & $($mutability)* GeneratorInterior<'tcx>) {\n+            }\n+\n             fn super_closure_substs(&mut self,\n                                     _substs: & $($mutability)* ClosureSubsts<'tcx>) {\n             }"}, {"sha": "b2a38679240102291a755c10aba91df8e5159d8d", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -179,12 +179,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n-            ExprKind::Closure { closure_id, substs, upvars, generator } => { // see (*) above\n+            ExprKind::Closure { closure_id, substs, upvars, interior } => { // see (*) above\n                 let mut operands: Vec<_> =\n                     upvars.into_iter()\n                           .map(|upvar| unpack!(block = this.as_operand(block, scope, upvar)))\n                           .collect();\n-                let result = if generator {\n+                let result = if let Some(interior) = interior {\n                     // Add the state operand\n                     operands.push(Operand::Constant(box Constant {\n                         span: expr_span,\n@@ -193,7 +193,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             value: ConstVal::Integral(ConstInt::U32(0)),\n                         },\n                     }));\n-                    box AggregateKind::Generator(closure_id, substs)\n+                    box AggregateKind::Generator(closure_id, substs, interior)\n                 } else {\n                     box AggregateKind::Closure(closure_id, substs)\n                 };"}, {"sha": "b8b69382d7d0de32eb7e183be090f6daa92232e1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -428,11 +428,11 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        hir::ExprClosure(.., is_generator) => {\n+        hir::ExprClosure(..) => {\n             let closure_ty = cx.tables().expr_ty(expr);\n-            let (def_id, substs) = match closure_ty.sty {\n-                ty::TyClosure(def_id, substs) |\n-                ty::TyGenerator(def_id, substs, _) => (def_id, substs),\n+            let (def_id, substs, interior) = match closure_ty.sty {\n+                ty::TyClosure(def_id, substs) => (def_id, substs, None),\n+                ty::TyGenerator(def_id, substs, interior) => (def_id, substs, Some(interior)),\n                 _ => {\n                     span_bug!(expr.span, \"closure expr w/o closure type: {:?}\", closure_ty);\n                 }\n@@ -447,7 +447,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 closure_id: def_id,\n                 substs: substs,\n                 upvars: upvars,\n-                generator: is_generator,\n+                interior,\n             }\n         }\n "}, {"sha": "89d0260fb9f5dd14d92ad10a9e6a9e6b6734c322", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -19,7 +19,7 @@ use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, AdtDef, ClosureSubsts, Region, Ty};\n+use rustc::ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -239,7 +239,7 @@ pub enum ExprKind<'tcx> {\n         closure_id: DefId,\n         substs: ClosureSubsts<'tcx>,\n         upvars: Vec<ExprRef<'tcx>>,\n-        generator: bool,\n+        interior: Option<GeneratorInterior<'tcx>>,\n     },\n     Literal {\n         literal: Literal<'tcx>,"}, {"sha": "651246ab4a5e379ae176f01c9faf5736a88e5005", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c64b0c78401358a93b66e357d3bb094ba6274/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=be9c64b0c78401358a93b66e357d3bb094ba6274", "patch": "@@ -76,8 +76,8 @@ struct TransformVisitor<'a, 'tcx: 'a> {\n     // The number of generator states. 0 is unresumed, 1 is poisoned. So this is initialized to 2\n     bb_target_count: u32,\n \n-    // Map from a (which block to resume execution at, which block to use to drop the generator) to a \n-    // genrator state\n+    // Map from a (which block to resume execution at, which block to use to drop the generator)\n+    // to a generator state\n     bb_targets: HashMap<(BasicBlock, Option<BasicBlock>), u32>,\n \n     // The original RETURN_POINTER local"}]}