{"sha": "88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDk4OTk4ZTFjZmRmY2U4Y2U3ZTAyYTAyMGNjOWQxOWYzMThiZDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T11:17:40Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T11:17:40Z"}, "message": "add execution time limit", "tree": {"sha": "f5f50d5774fa6edafdec3a6e7fee9ea04a77d429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f50d5774fa6edafdec3a6e7fee9ea04a77d429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXe5dUAAoJEFbW7qD8Z6xGSH0P/3d3v3WbedfztqlGqkBDoNCH\nGN5RRcHq3tZLHczT0iD0E+8rDTL95O+dzfH1RkOv5Z0Jdm1/1oAJDE1USwxt2jFA\nt6mJPOAIxRmZo9Exc7cvMVsHubH8mLJCopzCE6n9kDyN6jaoi06w9HzocJ5/OtvS\nAaOGB4xAfvgLS6bSntMogm+rbEVaXMbELP+n+RahuiagzPc2au/QO8fwGpnP2Zp4\nT7Bvd1W9GOk7JsQtBtT1U13poh6hFkrZUbiNPSzz1S1Gwkcb0CjTkRE8X9G6PJBn\nxG5MiqzhEhlTq9ujn0nuhTlGi1El5ixHN9739wlUPZTX4YNsJmU7/ZFLDzRgwWXh\nelKOVx3aTJ656vAp0YiT74m+QtSVkxt8IsOA+iJrhjU2OhIo4dUyu5DZJKu0xKGG\nKnz5Ot0wESfx1dY3bXCuTX3AuxVZKUpBqACErGoNETKoJL0DSnIuYpV3NKXGr/jO\nIqRpnMEMT+iKMLSwogrKWl+T0i6rYqUeG11RGlnhE+oJiDeHFZCfRVGwmtgqD22a\ncWq7oDRavS6YCwC9WJdgX3DNm4oqcNcIqQG6Hzs60g0ZJ2u4Iqh9JoEl5B29zllQ\nupMSQ4aNtW/V4HmMwgyE4scnGmj2hP3CfObmNAys2VeGr6Tv/XArqCds+t3oCxRk\naeHedmSjQPLX18PccGwP\n=qVaD\n-----END PGP SIGNATURE-----", "payload": "tree f5f50d5774fa6edafdec3a6e7fee9ea04a77d429\nparent 3e5d86bb0809cdc84e565880284965f1b06cf73f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467717460 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467717460 +0200\n\nadd execution time limit"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "html_url": "https://github.com/rust-lang/rust/commit/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5d86bb0809cdc84e565880284965f1b06cf73f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5d86bb0809cdc84e565880284965f1b06cf73f", "html_url": "https://github.com/rust-lang/rust/commit/3e5d86bb0809cdc84e565880284965f1b06cf73f"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "6997bbd011df6ad58d6fe767be784301f622d32f", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "patch": "@@ -39,6 +39,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n             let krate = state.hir_crate.as_ref().unwrap();\n             let mut memory_size = 100*1024*1024; // 100MB\n+            let mut step_limit = 1000_000;\n             fn extract_str(lit: &syntax::ast::Lit) -> syntax::parse::token::InternedString {\n                 match lit.node {\n                     syntax::ast::LitKind::Str(ref s, _) => s.clone(),\n@@ -53,6 +54,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                             MetaItemKind::NameValue(ref name, ref value) => {\n                                 match &**name {\n                                     \"memory_size\" => memory_size = extract_str(value).parse::<u64>().expect(\"not a number\"),\n+                                    \"step_limit\" => step_limit = extract_str(value).parse::<u64>().expect(\"not a number\"),\n                                     _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n                                 }\n                             }\n@@ -65,7 +67,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n             let mut mir_map = MirMap { map: mir_map.map.clone() };\n             run_mir_passes(tcx, &mut mir_map);\n-            eval_main(tcx, &mir_map, node_id, memory_size);\n+            eval_main(tcx, &mir_map, node_id, memory_size, step_limit);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "5c2410ed840a66ad9c2a0e663e2a2e57a2846df5", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "patch": "@@ -33,7 +33,8 @@ pub enum EvalError<'tcx> {\n         allocation_size: u64,\n         memory_size: u64,\n         memory_usage: u64,\n-    }\n+    },\n+    ExecutionTimeLimitReached,\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -75,7 +76,9 @@ impl<'tcx> Error for EvalError<'tcx> {\n             EvalError::InvalidChar(..) =>\n                 \"tried to interpret an invalid 32-bit value as a char\",\n             EvalError::OutOfMemory{..} =>\n-                \"could not allocate more memory\"\n+                \"could not allocate more memory\",\n+            EvalError::ExecutionTimeLimitReached =>\n+                \"reached the configured maximum execution time\",\n         }\n     }\n "}, {"sha": "5b8947ec7353ee2264f0982a2f1ec826384fa378", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "patch": "@@ -929,6 +929,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     mir_map: &'a MirMap<'tcx>,\n     node_id: ast::NodeId,\n     memory_size: u64,\n+    step_limit: u64,\n ) {\n     let mir = mir_map.map.get(&node_id).expect(\"no mir for main function\");\n     let def_id = tcx.map.local_def_id(node_id);\n@@ -952,17 +953,18 @@ pub fn eval_main<'a, 'tcx: 'a>(\n         ecx.frame_mut().locals[1] = args;\n     }\n \n-    loop {\n+    for _ in 0..step_limit {\n         match ecx.step() {\n             Ok(true) => {}\n-            Ok(false) => break,\n+            Ok(false) => return,\n             // FIXME: diverging functions can end up here in some future miri\n             Err(e) => {\n                 report(tcx, &ecx, e);\n-                break;\n+                return;\n             }\n         }\n     }\n+    report(tcx, &ecx, EvalError::ExecutionTimeLimitReached);\n }\n \n fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {"}, {"sha": "bcb6c993089a72cab2bba5fbf766ab869316a48a", "filename": "tests/compile-fail/timeout.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/tests%2Fcompile-fail%2Ftimeout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7/tests%2Fcompile-fail%2Ftimeout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftimeout.rs?ref=88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "patch": "@@ -0,0 +1,9 @@\n+//error-pattern: reached the configured maximum execution time\n+#![feature(custom_attribute)]\n+#![miri(step_limit=\"1000\")]\n+\n+fn main() {\n+    for i in 0..1000000 {\n+        assert!(i < 1000);\n+    }\n+}"}]}