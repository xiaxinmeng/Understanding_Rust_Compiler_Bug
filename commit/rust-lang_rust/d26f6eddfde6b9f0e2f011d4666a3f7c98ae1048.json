{"sha": "d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNmY2ZWRkZmRlNmI5ZjBlMmYwMTFkNDY2NmEzZjdjOThhZTEwNDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-26T19:41:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-06T20:12:58Z"}, "message": "Convert region parameterization to change defaults and handle\nmethods correctly", "tree": {"sha": "1b3ba12fea7138e02d06838d14009ea1ce366971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3ba12fea7138e02d06838d14009ea1ce366971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "html_url": "https://github.com/rust-lang/rust/commit/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "html_url": "https://github.com/rust-lang/rust/commit/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec"}], "stats": {"total": 46, "additions": 9, "deletions": 37}, "files": [{"sha": "e018cf6f940ebc48cb824e8d3ba597916c284648", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "patch": "@@ -57,7 +57,7 @@ use core::prelude::*;\n use middle::ty::{arg, field, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n-use middle::typeck::rscope::{in_anon_rscope, in_binding_rscope};\n+use middle::typeck::rscope::{in_binding_rscope};\n use middle::typeck::rscope::{region_scope, type_rscope};\n use middle::typeck::{CrateCtxt, write_substs_to_tcx, write_ty_to_tcx};\n \n@@ -315,8 +315,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n       }\n       ast::ty_rptr(region, mt) => {\n         let r = ast_region_to_region(self, rscope, ast_ty.span, region);\n-        let anon_rscope = in_anon_rscope(rscope, r);\n-        mk_pointer(self, &anon_rscope, mt, ty::vstore_slice(r),\n+        mk_pointer(self, rscope, mt, ty::vstore_slice(r),\n                    |tmt| ty::mk_rptr(tcx, r, tmt))\n       }\n       ast::ty_tup(fields) => {"}, {"sha": "2cb06e783ddae39f30687c640b3697c9880b6a01", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+n// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -95,7 +95,7 @@ use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::CrateCtxt;\n use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n-use middle::typeck::rscope::{anon_rscope, binding_rscope, bound_self_region};\n+use middle::typeck::rscope::{binding_rscope, bound_self_region};\n use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n use middle::typeck::rscope;\n use middle::typeck::{isr_alist, lookup_def_ccx, method_map_entry};"}, {"sha": "77da34a31e9ae78c20fd9ba606618e1f18fec59b", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "patch": "@@ -27,7 +27,7 @@ pub trait region_scope {\n pub enum empty_rscope { empty_rscope }\n impl region_scope for empty_rscope {\n     fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        Ok(ty::re_static)\n+        result::Err(~\"only the static region is allowed here\")\n     }\n     fn self_region(&self, _span: span) -> Result<ty::Region, ~str> {\n         result::Err(~\"only the static region is allowed here\")\n@@ -62,14 +62,14 @@ impl region_scope for MethodRscope {\n pub enum type_rscope = Option<ty::region_variance>;\n impl region_scope for type_rscope {\n     fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        // if the anon or self region is used, region parameterization should\n+        result::Err(~\"anonymous region types are not permitted here\")\n+    }\n+    fn self_region(&self, _span: span) -> Result<ty::Region, ~str> {\n+        // if the self region is used, region parameterization should\n         // have inferred that this type is RP\n         assert self.is_some();\n         result::Ok(ty::re_bound(ty::br_self))\n     }\n-    fn self_region(&self, span: span) -> Result<ty::Region, ~str> {\n-        self.anon_region(span)\n-    }\n     fn named_region(&self, span: span, id: ast::ident)\n                       -> Result<ty::Region, ~str> {\n         do empty_rscope.named_region(span, id).chain_err |_e| {\n@@ -87,33 +87,6 @@ pub fn bound_self_region(rp: Option<ty::region_variance>)\n     }\n }\n \n-pub struct anon_rscope { anon: ty::Region, base: @region_scope }\n-pub fn in_anon_rscope<RS:region_scope + Copy + Durable>(\n-    self: &RS,\n-    r: ty::Region) -> anon_rscope\n-{\n-    let base = @(copy *self) as @region_scope;\n-    anon_rscope {anon: r, base: base}\n-}\n-impl region_scope for anon_rscope {\n-    fn anon_region(&self,\n-                   _span: span) -> Result<ty::Region, ~str>\n-    {\n-        result::Ok(self.anon)\n-    }\n-    fn self_region(&self,\n-                   span: span) -> Result<ty::Region, ~str>\n-    {\n-        self.base.self_region(span)\n-    }\n-    fn named_region(&self,\n-                    span: span,\n-                    id: ast::ident) -> Result<ty::Region, ~str>\n-    {\n-        self.base.named_region(span, id)\n-    }\n-}\n-\n pub struct binding_rscope {\n     base: @region_scope,\n     anon_bindings: @mut uint,"}]}