{"sha": "56504a00f2ea183653beb0a06393343c99cdf6e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTA0YTAwZjJlYTE4MzY1M2JlYjBhMDYzOTMzNDNjOTljZGY2ZTI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-11T22:59:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-11T22:59:08Z"}, "message": "Rollup merge of #80042 - sivadeilra:cold_bits, r=oli-obk\n\nSplit a func into cold/hot parts, reducing binary size\n\nI noticed that the Size::bits function is called in many places,\nand is inlined into them. On x86_64-pc-windows-msvc, this function\nis inlined 527 times, and compiled separately (non-inlined) 3 times.\n\nEach of those inlined calls contains code that panics. This commit\nmoves the `panic!` call into a separate function and marks that\nfunction with `#[cold]`.\n\nThis reduces binary size by 24 KB. Not much, but it's something.\nChanges like this often reduce pressure on instruction-caches,\nsince it reduces the amount of code that is inlined into hot code\npaths. Or more precisely, it removes cold code from hot cache lines.", "tree": {"sha": "039356279174b4cc8a439391c93563ec66d346cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039356279174b4cc8a439391c93563ec66d346cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56504a00f2ea183653beb0a06393343c99cdf6e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/Ng8CRBK7hj4Ov3rIwAAdHIIACUx3R23MQD6/hS+TBhkiSx8\n89CK4pZ932zc1JUIcWag+1pZnqZq4ctjDw0Sb06SNkHQFaM7Q++pM6d+YwbtvXO2\nocYK78MBigB4WqdSa+iY8i9QN8Tp/Xi+Z7JDw9fBPi5yMrfpPHK6ESrzC+HdhKMJ\nJNZKW7vcxu79PmFsTDBuyhmjzTaahtlJnBoJoOYmzLjw20jVzHhnUw4kMfabTaWI\nbUeLsXfnoAz/m6DHRfUSBSiS87CppFheOklAvqaZcGjkIuGpeRMJDgYUQcI9bM+c\nY6xPTV4QJOTTqYGCcxArmHfSlvXgPKB+pzSbGIfHrfIlCILayuNOpdwy8X/SWAA=\n=GV49\n-----END PGP SIGNATURE-----\n", "payload": "tree 039356279174b4cc8a439391c93563ec66d346cb\nparent edcfe7b6296aff0cf5c52f0c8bc972b0b156616d\nparent 4721b6518ce9c8e3a452af07c6dd178fbb83ab16\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610405948 +0900\ncommitter GitHub <noreply@github.com> 1610405948 +0900\n\nRollup merge of #80042 - sivadeilra:cold_bits, r=oli-obk\n\nSplit a func into cold/hot parts, reducing binary size\n\nI noticed that the Size::bits function is called in many places,\nand is inlined into them. On x86_64-pc-windows-msvc, this function\nis inlined 527 times, and compiled separately (non-inlined) 3 times.\n\nEach of those inlined calls contains code that panics. This commit\nmoves the `panic!` call into a separate function and marks that\nfunction with `#[cold]`.\n\nThis reduces binary size by 24 KB. Not much, but it's something.\nChanges like this often reduce pressure on instruction-caches,\nsince it reduces the amount of code that is inlined into hot code\npaths. Or more precisely, it removes cold code from hot cache lines.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56504a00f2ea183653beb0a06393343c99cdf6e2", "html_url": "https://github.com/rust-lang/rust/commit/56504a00f2ea183653beb0a06393343c99cdf6e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56504a00f2ea183653beb0a06393343c99cdf6e2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edcfe7b6296aff0cf5c52f0c8bc972b0b156616d", "url": "https://api.github.com/repos/rust-lang/rust/commits/edcfe7b6296aff0cf5c52f0c8bc972b0b156616d", "html_url": "https://github.com/rust-lang/rust/commit/edcfe7b6296aff0cf5c52f0c8bc972b0b156616d"}, {"sha": "4721b6518ce9c8e3a452af07c6dd178fbb83ab16", "url": "https://api.github.com/repos/rust-lang/rust/commits/4721b6518ce9c8e3a452af07c6dd178fbb83ab16", "html_url": "https://github.com/rust-lang/rust/commit/4721b6518ce9c8e3a452af07c6dd178fbb83ab16"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "93868bed9b98edc33f6f707a5b69527735179e46", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56504a00f2ea183653beb0a06393343c99cdf6e2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56504a00f2ea183653beb0a06393343c99cdf6e2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=56504a00f2ea183653beb0a06393343c99cdf6e2", "patch": "@@ -271,22 +271,38 @@ impl ToJson for Endian {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Size {\n+    // The top 3 bits are ALWAYS zero.\n     raw: u64,\n }\n \n impl Size {\n     pub const ZERO: Size = Size { raw: 0 };\n \n-    #[inline]\n+    /// Rounds `bits` up to the next-higher byte boundary, if `bits` is\n+    /// is not aligned.\n     pub fn from_bits(bits: impl TryInto<u64>) -> Size {\n         let bits = bits.try_into().ok().unwrap();\n+\n+        #[cold]\n+        fn overflow(bits: u64) -> ! {\n+            panic!(\"Size::from_bits({}) has overflowed\", bits);\n+        }\n+\n+        // This is the largest value of `bits` that does not cause overflow\n+        // during rounding, and guarantees that the resulting number of bytes\n+        // cannot cause overflow when multiplied by 8.\n+        if bits > 0xffff_ffff_ffff_fff8 {\n+            overflow(bits);\n+        }\n+\n         // Avoid potential overflow from `bits + 7`.\n-        Size::from_bytes(bits / 8 + ((bits % 8) + 7) / 8)\n+        Size { raw: bits / 8 + ((bits % 8) + 7) / 8 }\n     }\n \n     #[inline]\n     pub fn from_bytes(bytes: impl TryInto<u64>) -> Size {\n-        Size { raw: bytes.try_into().ok().unwrap() }\n+        let bytes: u64 = bytes.try_into().ok().unwrap();\n+        Size { raw: bytes }\n     }\n \n     #[inline]\n@@ -301,9 +317,7 @@ impl Size {\n \n     #[inline]\n     pub fn bits(self) -> u64 {\n-        self.bytes().checked_mul(8).unwrap_or_else(|| {\n-            panic!(\"Size::bits: {} bytes in bits doesn't fit in u64\", self.bytes())\n-        })\n+        self.raw << 3\n     }\n \n     #[inline]"}]}