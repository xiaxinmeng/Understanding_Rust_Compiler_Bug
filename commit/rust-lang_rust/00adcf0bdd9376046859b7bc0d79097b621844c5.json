{"sha": "00adcf0bdd9376046859b7bc0d79097b621844c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYWRjZjBiZGQ5Mzc2MDQ2ODU5YjdiYzBkNzkwOTdiNjIxODQ0YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T07:21:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T07:21:20Z"}, "message": "auto merge of #9863 : csainty/rust/issue-9755-once-fns-feature-directive, r=alexcrichton\n\nHello,\r\n\r\nFirst time rust contributor here, please let me know if I need to sort out the contribution agreement for this.\r\n\r\nI picked issue #9755 to dip my toe in the water, this pull request isn't quite complete though as I have not updated the documentation. The reason for this is that I haven't tracked down why this feature is gated so I don't feel I can write a justification of the same quality as the other features have been documented.\r\nIf someone would like to explain or point me at a mail thread I am happy to update with this change.\r\n\r\nHopefully I have understood the process of converting the old flag into a directive correctly.\r\n\r\nAlso just to call out what I am sure if a known quirk when adding feature directives, you can't build this code unless you have a snapshot of the compiler which knows about the feature directive. Chicken and the egg. I split the change into two commits, the first should be able to build a snapshot that can compile the second.", "tree": {"sha": "6cb9e2fea66aa804ca03764ca1e948825519ffbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb9e2fea66aa804ca03764ca1e948825519ffbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00adcf0bdd9376046859b7bc0d79097b621844c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00adcf0bdd9376046859b7bc0d79097b621844c5", "html_url": "https://github.com/rust-lang/rust/commit/00adcf0bdd9376046859b7bc0d79097b621844c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00adcf0bdd9376046859b7bc0d79097b621844c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88acb73ce5a98e707ce68f5c0579641de38b5955", "url": "https://api.github.com/repos/rust-lang/rust/commits/88acb73ce5a98e707ce68f5c0579641de38b5955", "html_url": "https://github.com/rust-lang/rust/commit/88acb73ce5a98e707ce68f5c0579641de38b5955"}, {"sha": "88ab38cf060b794f3c4c3572cee7ca25354946d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ab38cf060b794f3c4c3572cee7ca25354946d6", "html_url": "https://github.com/rust-lang/rust/commit/88ab38cf060b794f3c4c3572cee7ca25354946d6"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "f40a3e3a114c534f6d9351d2e99ea3b2ed958aef", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -2067,6 +2067,10 @@ The currently implemented features of the compiler are:\n                      For now this style of variant is hidden behind a feature\n                      flag.\n \n+* `once_fns` - Onceness guarantees a closure is only executed once. Defining a\n+               closure as `once` is unlikely to be supported going forward. So\n+               they are hidden behind this feature until they are to be removed. \n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if"}, {"sha": "6c176f04fe8f6526c1b01b203668d2b6da36f1ea", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -74,12 +74,11 @@ pub static statik:                  uint = 1 << 21;\n pub static print_link_args:         uint = 1 << 22;\n pub static no_debug_borrows:        uint = 1 << 23;\n pub static lint_llvm:               uint = 1 << 24;\n-pub static once_fns:                uint = 1 << 25;\n-pub static print_llvm_passes:       uint = 1 << 26;\n-pub static no_vectorize_loops:      uint = 1 << 27;\n-pub static no_vectorize_slp:        uint = 1 << 28;\n-pub static no_prepopulate_passes:   uint = 1 << 29;\n-pub static use_softfp:              uint = 1 << 30;\n+pub static print_llvm_passes:       uint = 1 << 25;\n+pub static no_vectorize_loops:      uint = 1 << 26;\n+pub static no_vectorize_slp:        uint = 1 << 27;\n+pub static no_prepopulate_passes:   uint = 1 << 28;\n+pub static use_softfp:              uint = 1 << 29;\n \n pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n     ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n@@ -118,9 +117,6 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n      (\"lint-llvm\",\n       \"Run the LLVM lint pass on the pre-optimization IR\",\n       lint_llvm),\n-     (\"once-fns\",\n-      \"Allow 'once fn' closures to deinitialize captured variables\",\n-      once_fns),\n      (\"print-llvm-passes\",\n       \"Prints the llvm optimization passes being run\",\n       print_llvm_passes),\n@@ -326,7 +322,6 @@ impl Session_ {\n     pub fn debug_borrows(&self) -> bool {\n         self.opts.optimize == No && !self.debugging_opt(no_debug_borrows)\n     }\n-    pub fn once_fns(&self) -> bool { self.debugging_opt(once_fns) }\n     pub fn print_llvm_passes(&self) -> bool {\n         self.debugging_opt(print_llvm_passes)\n     }"}, {"sha": "271ce6c0fd982f98124c25649ca474467fe1ee7b", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -33,6 +33,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"globs\", Active),\n     (\"macro_rules\", Active),\n     (\"struct_variant\", Active),\n+    (\"once_fns\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -126,6 +127,20 @@ impl Visitor<()> for Context {\n \n         visit::walk_item(self, i, ());\n     }\n+\n+    fn visit_ty(&mut self, t: &ast::Ty, _: ()) {\n+        match t.node {\n+            ast::ty_closure(closure) if closure.onceness == ast::Once => {\n+                self.gate_feature(\"once_fns\", t.span,\n+                                  \"once functions are \\\n+                                   experimental and likely to be removed\");\n+\n+            },\n+            _ => {}\n+        }\n+\n+        visit::walk_ty(self, t, ());\n+    }\n }\n \n pub fn check_crate(sess: Session, crate: &ast::Crate) {"}, {"sha": "7fdc248563153ca8930fa9751ce31944426a3a9f", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -102,25 +102,13 @@ fn check_is_legal_to_move_from(bccx: &BorrowckCtxt,\n     match cmt.cat {\n         mc::cat_deref(_, _, mc::region_ptr(*)) |\n         mc::cat_deref(_, _, mc::gc_ptr(*)) |\n-        mc::cat_deref(_, _, mc::unsafe_ptr(*)) => {\n-            bccx.span_err(\n-                cmt0.span,\n-                format!(\"cannot move out of {}\",\n-                     bccx.cmt_to_str(cmt)));\n-            false\n-        }\n-\n-        // These are separate from the above cases for a better error message.\n+        mc::cat_deref(_, _, mc::unsafe_ptr(*)) |\n         mc::cat_stack_upvar(*) |\n         mc::cat_copied_upvar(mc::CopiedUpvar { onceness: ast::Many, _ }) => {\n-            let once_hint = if bccx.tcx.sess.once_fns() {\n-                \" (unless the destination closure type is `once fn')\"\n-            } else {\n-                \"\"\n-            };\n             bccx.span_err(\n                 cmt0.span,\n-                format!(\"cannot move out of {}{}\", bccx.cmt_to_str(cmt), once_hint));\n+                format!(\"cannot move out of {}\",\n+                     bccx.cmt_to_str(cmt)));\n             false\n         }\n "}, {"sha": "3b8ea2c33ec90ab6d4a12e25cecbec992873329e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -508,12 +508,10 @@ impl mem_categorization_ctxt {\n                       let var_is_refd = match (closure_ty.sigil, closure_ty.onceness) {\n                           // Many-shot stack closures can never move out.\n                           (ast::BorrowedSigil, ast::Many) => true,\n-                          // 1-shot stack closures can move out with \"-Z once-fns\".\n-                          (ast::BorrowedSigil, ast::Once)\n-                              if self.tcx.sess.once_fns() => false,\n-                          (ast::BorrowedSigil, ast::Once) => true,\n+                          // 1-shot stack closures can move out.\n+                          (ast::BorrowedSigil, ast::Once) => false,\n                           // Heap closures always capture by copy/move, and can\n-                          // move out iff they are once.\n+                          // move out if they are once.\n                           (ast::OwnedSigil, _) |\n                           (ast::ManagedSigil, _) => false,\n "}, {"sha": "e53fd72439aa0df989454f3e752a1fbd814b6db7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -3645,7 +3645,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n               let fty = ty::mk_closure(ccx.tcx, ty::ClosureTy {\n                   purity: ast::impure_fn,\n                   sigil: ast::BorrowedSigil,\n-                  onceness: ast::Once,\n+                  onceness: ast::Many,\n                   region: ty::re_bound(ty::br_anon(0)),\n                   bounds: ty::EmptyBuiltinBounds(),\n                   sig: ty::FnSig {"}, {"sha": "dee21762a309b1a527e5462d8b6a771e1423203b", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -331,7 +331,8 @@ extern \"rust-intrinsic\" {\n \n     pub fn visit_tydesc(td: *TyDesc, tv: &mut TyVisitor);\n \n-    pub fn frame_address(f: &once fn(*u8));\n+    #[cfg(not(stage0))]\n+    pub fn frame_address(f: &fn(*u8));\n \n     /// Get the address of the `__morestack` stack growth function.\n     pub fn morestack_addr() -> *();"}, {"sha": "e266a56ded44b38b05d9072894f5dd2ab574ae23", "filename": "src/test/compile-fail/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -11,6 +11,7 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n+#[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n use std::util;"}, {"sha": "9469d123d18d7570f770f7fc96a202010dead3e8", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -11,7 +11,7 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n-// compile-flags:-Z once-fns\n+#[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n use std::util;"}, {"sha": "5f7393fdf8b8cad2b432428894d79174672c2df3", "filename": "src/test/compile-fail/once-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(once_fns)];\n fn main() {\n     let f: &once fn() = ||();\n     let g: &fn() = f;  //~ ERROR mismatched types"}, {"sha": "c7b23790ded7603cc678fee44331e17a7b668579", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,7 +12,7 @@\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n-        pub fn frame_address(f: &once fn(*u8));\n+        pub fn frame_address(f: &fn(*u8));\n     }\n }\n "}, {"sha": "858f8ec07c4d940532835754cfed4c0e00bbb8c9", "filename": "src/test/run-pass/once-move-out-on-heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -12,6 +12,7 @@\n \n // xfail-fast\n \n+#[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n use std::util;"}, {"sha": "8e340275d7fdea09c544370a2b480227c8707ae7", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00adcf0bdd9376046859b7bc0d79097b621844c5/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=00adcf0bdd9376046859b7bc0d79097b621844c5", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-fast\n \n-// compile-flags:-Z once-fns\n+#[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n use std::util;"}]}