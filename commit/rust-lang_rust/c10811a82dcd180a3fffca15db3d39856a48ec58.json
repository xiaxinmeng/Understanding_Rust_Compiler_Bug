{"sha": "c10811a82dcd180a3fffca15db3d39856a48ec58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDgxMWE4MmRjZDE4MGEzZmZmY2ExNWRiM2QzOTg1NmE0OGVjNTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-28T15:15:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-28T15:15:56Z"}, "message": "Merge remote-tracking branch 'origin/master' into rustup", "tree": {"sha": "873513e513c97f6fa34bfa18c0295b72974b305a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873513e513c97f6fa34bfa18c0295b72974b305a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10811a82dcd180a3fffca15db3d39856a48ec58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10811a82dcd180a3fffca15db3d39856a48ec58", "html_url": "https://github.com/rust-lang/rust/commit/c10811a82dcd180a3fffca15db3d39856a48ec58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10811a82dcd180a3fffca15db3d39856a48ec58/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3481e0906f39519a9ab74817a4e1f0a74c1a0ab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3481e0906f39519a9ab74817a4e1f0a74c1a0ab7", "html_url": "https://github.com/rust-lang/rust/commit/3481e0906f39519a9ab74817a4e1f0a74c1a0ab7"}, {"sha": "559ad2db4a543d69d2b1438cdbcc0e8c3b18484c", "url": "https://api.github.com/repos/rust-lang/rust/commits/559ad2db4a543d69d2b1438cdbcc0e8c3b18484c", "html_url": "https://github.com/rust-lang/rust/commit/559ad2db4a543d69d2b1438cdbcc0e8c3b18484c"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "9739a7a95b6dc8f17cde256124a85ba7d6a09cb3", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c10811a82dcd180a3fffca15db3d39856a48ec58/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10811a82dcd180a3fffca15db3d39856a48ec58/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c10811a82dcd180a3fffca15db3d39856a48ec58", "patch": "@@ -37,15 +37,15 @@ mod range_map;\n mod mono_hash_map;\n mod stacked_borrows;\n \n-use crate::fn_call::EvalContextExt as MissingFnsEvalContextExt;\n-use crate::operator::EvalContextExt as OperatorEvalContextExt;\n-use crate::intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n-use crate::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n+pub use crate::fn_call::EvalContextExt as MissingFnsEvalContextExt;\n+pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n+pub use crate::intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n+pub use crate::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n use crate::range_map::RangeMap;\n #[allow(unused_imports)] // FIXME rustc bug https://github.com/rust-lang/rust/issues/53682\n-use crate::helpers::{ScalarExt, EvalContextExt as HelpersEvalContextExt};\n+pub use crate::helpers::{ScalarExt, EvalContextExt as HelpersEvalContextExt};\n use crate::mono_hash_map::MonoHashMap;\n-use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt};\n+pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt};\n \n // Used by priroda\n pub use crate::stacked_borrows::{Borrow, Stack, Stacks, BorStackItem};"}, {"sha": "278bbd9cf2b13d5ead44c7b1de87f615d0542fba", "filename": "src/mono_hash_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10811a82dcd180a3fffca15db3d39856a48ec58/src%2Fmono_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10811a82dcd180a3fffca15db3d39856a48ec58/src%2Fmono_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_hash_map.rs?ref=c10811a82dcd180a3fffca15db3d39856a48ec58", "patch": "@@ -17,6 +17,12 @@ use crate::AllocMap;\n #[derive(Debug, Clone)]\n pub struct MonoHashMap<K: Hash + Eq, V>(RefCell<FxHashMap<K, Box<V>>>);\n \n+impl<K: Hash + Eq, V> MonoHashMap<K, V> {\n+    pub fn values<T>(&self, f: impl FnOnce(&mut dyn Iterator<Item=&V>) -> T) -> T {\n+        f(&mut self.0.borrow().values().map(|v| &**v))\n+    }\n+}\n+\n impl<K: Hash + Eq, V> Default for MonoHashMap<K, V> {\n     fn default() -> Self {\n         MonoHashMap(RefCell::new(Default::default()))"}]}