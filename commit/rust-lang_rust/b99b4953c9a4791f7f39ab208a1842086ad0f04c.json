{"sha": "b99b4953c9a4791f7f39ab208a1842086ad0f04c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OWI0OTUzYzlhNDc5MWY3ZjM5YWIyMDhhMTg0MjA4NmFkMGYwNGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-13T11:57:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-13T11:57:18Z"}, "message": "More concise completion tests", "tree": {"sha": "4adc45371a53cb1110b053961c0fea42d39dcfc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4adc45371a53cb1110b053961c0fea42d39dcfc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99b4953c9a4791f7f39ab208a1842086ad0f04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99b4953c9a4791f7f39ab208a1842086ad0f04c", "html_url": "https://github.com/rust-lang/rust/commit/b99b4953c9a4791f7f39ab208a1842086ad0f04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99b4953c9a4791f7f39ab208a1842086ad0f04c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef70076f1da391be8697aaf3c534e4e770561429", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef70076f1da391be8697aaf3c534e4e770561429", "html_url": "https://github.com/rust-lang/rust/commit/ef70076f1da391be8697aaf3c534e4e770561429"}], "stats": {"total": 328, "additions": 146, "deletions": 182}, "files": [{"sha": "b2f621a119c7e01578f333c9f568c73ab65fda68", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 141, "deletions": 177, "changes": 318, "blob_url": "https://github.com/rust-lang/rust/blob/b99b4953c9a4791f7f39ab208a1842086ad0f04c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99b4953c9a4791f7f39ab208a1842086ad0f04c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=b99b4953c9a4791f7f39ab208a1842086ad0f04c", "patch": "@@ -170,131 +170,119 @@ fn complete_return(\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{test_utils::get_completions, CompletionKind};\n-    use insta::assert_debug_snapshot;\n+    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use insta::assert_snapshot;\n \n-    fn get_keyword_completions(code: &str) -> Vec<String> {\n-        get_completions(code, CompletionKind::Keyword)\n+    fn get_keyword_completions(code: &str) -> String {\n+        completion_list(code, CompletionKind::Keyword)\n     }\n \n     #[test]\n     fn test_keywords_in_use_stmt() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"use <|>\"),\n             @r###\"\n-        [\n-            \"kw crate\",\n-            \"kw self\",\n-            \"kw super\",\n-        ]\n+            kw crate\n+            kw self\n+            kw super\n         \"###\n         );\n \n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"use a::<|>\"),\n             @r###\"\n-        [\n-            \"kw self\",\n-            \"kw super\",\n-        ]\n+            kw self\n+            kw super\n         \"###\n         );\n \n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"use a::{b, <|>}\"),\n             @r###\"\n-        [\n-            \"kw self\",\n-            \"kw super\",\n-        ]\n+            kw self\n+            kw super\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_at_source_file_level() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"m<|>\"),\n             @r###\"\n-        [\n-            \"kw const\",\n-            \"kw enum\",\n-            \"kw extern\",\n-            \"kw fn\",\n-            \"kw impl\",\n-            \"kw mod\",\n-            \"kw pub\",\n-            \"kw static\",\n-            \"kw struct\",\n-            \"kw trait\",\n-            \"kw type\",\n-            \"kw union\",\n-            \"kw unsafe\",\n-            \"kw use\",\n-        ]\n+            kw const\n+            kw enum\n+            kw extern\n+            kw fn\n+            kw impl\n+            kw mod\n+            kw pub\n+            kw static\n+            kw struct\n+            kw trait\n+            kw type\n+            kw union\n+            kw unsafe\n+            kw use\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_function() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn quux() { <|> }\"),\n             @r###\"\n-        [\n-            \"kw const\",\n-            \"kw extern\",\n-            \"kw fn\",\n-            \"kw if\",\n-            \"kw if let\",\n-            \"kw impl\",\n-            \"kw let\",\n-            \"kw loop\",\n-            \"kw match\",\n-            \"kw mod\",\n-            \"kw return\",\n-            \"kw static\",\n-            \"kw trait\",\n-            \"kw type\",\n-            \"kw unsafe\",\n-            \"kw use\",\n-            \"kw while\",\n-        ]\n+            kw const\n+            kw extern\n+            kw fn\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw static\n+            kw trait\n+            kw type\n+            kw unsafe\n+            kw use\n+            kw while\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_inside_block() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn quux() { if true { <|> } }\"),\n             @r###\"\n-        [\n-            \"kw const\",\n-            \"kw extern\",\n-            \"kw fn\",\n-            \"kw if\",\n-            \"kw if let\",\n-            \"kw impl\",\n-            \"kw let\",\n-            \"kw loop\",\n-            \"kw match\",\n-            \"kw mod\",\n-            \"kw return\",\n-            \"kw static\",\n-            \"kw trait\",\n-            \"kw type\",\n-            \"kw unsafe\",\n-            \"kw use\",\n-            \"kw while\",\n-        ]\n+            kw const\n+            kw extern\n+            kw fn\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw static\n+            kw trait\n+            kw type\n+            kw unsafe\n+            kw use\n+            kw while\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_after_if() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(\n                 r\"\n                 fn quux() {\n@@ -305,34 +293,32 @@ mod tests {\n                 \",\n             ),\n             @r###\"\n-        [\n-            \"kw const\",\n-            \"kw else\",\n-            \"kw else if\",\n-            \"kw extern\",\n-            \"kw fn\",\n-            \"kw if\",\n-            \"kw if let\",\n-            \"kw impl\",\n-            \"kw let\",\n-            \"kw loop\",\n-            \"kw match\",\n-            \"kw mod\",\n-            \"kw return\",\n-            \"kw static\",\n-            \"kw trait\",\n-            \"kw type\",\n-            \"kw unsafe\",\n-            \"kw use\",\n-            \"kw while\",\n-        ]\n+            kw const\n+            kw else\n+            kw else if\n+            kw extern\n+            kw fn\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw static\n+            kw trait\n+            kw type\n+            kw unsafe\n+            kw use\n+            kw while\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_match_arm() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(\n                 r\"\n                 fn quux() -> i32 {\n@@ -343,151 +329,129 @@ mod tests {\n                 \",\n             ),\n             @r###\"\n-        [\n-            \"kw if\",\n-            \"kw if let\",\n-            \"kw loop\",\n-            \"kw match\",\n-            \"kw return\",\n-            \"kw unsafe\",\n-        ]\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw return\n+            kw unsafe\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_trait_def() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"trait My { <|> }\"),\n             @r###\"\n-        [\n-            \"kw const\",\n-            \"kw fn\",\n-            \"kw type\",\n-            \"kw unsafe\",\n-        ]\n+            kw const\n+            kw fn\n+            kw type\n+            kw unsafe\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_impl_def() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"impl My { <|> }\"),\n             @r###\"\n-        [\n-            \"kw const\",\n-            \"kw fn\",\n-            \"kw pub\",\n-            \"kw type\",\n-            \"kw unsafe\",\n-        ]\n+            kw const\n+            kw fn\n+            kw pub\n+            kw type\n+            kw unsafe\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_in_loop() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn my() { loop { <|> } }\"),\n             @r###\"\n-        [\n-            \"kw break\",\n-            \"kw const\",\n-            \"kw continue\",\n-            \"kw extern\",\n-            \"kw fn\",\n-            \"kw if\",\n-            \"kw if let\",\n-            \"kw impl\",\n-            \"kw let\",\n-            \"kw loop\",\n-            \"kw match\",\n-            \"kw mod\",\n-            \"kw return\",\n-            \"kw static\",\n-            \"kw trait\",\n-            \"kw type\",\n-            \"kw unsafe\",\n-            \"kw use\",\n-            \"kw while\",\n-        ]\n+            kw break\n+            kw const\n+            kw continue\n+            kw extern\n+            kw fn\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw static\n+            kw trait\n+            kw type\n+            kw unsafe\n+            kw use\n+            kw while\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_after_unsafe_in_item_list() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"unsafe <|>\"),\n             @r###\"\n-        [\n-            \"kw fn\",\n-            \"kw impl\",\n-            \"kw trait\",\n-        ]\n+            kw fn\n+            kw impl\n+            kw trait\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_keywords_after_unsafe_in_block_expr() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn my_fn() { unsafe <|> }\"),\n             @r###\"\n-        [\n-            \"kw fn\",\n-            \"kw impl\",\n-            \"kw trait\",\n-        ]\n+            kw fn\n+            kw impl\n+            kw trait\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_mut_in_ref_and_in_fn_parameters_list() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn my_fn(&<|>) {}\"),\n             @r###\"\n-        [\n-            \"kw mut\",\n-        ]\n+            kw mut\n         \"###\n         );\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn my_fn(<|>) {}\"),\n             @r###\"\n-        [\n-            \"kw mut\",\n-        ]\n+            kw mut\n         \"###\n         );\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"fn my_fn() { let &<|> }\"),\n             @r###\"\n-        [\n-            \"kw mut\",\n-        ]\n+            kw mut\n         \"###\n         );\n     }\n \n     #[test]\n     fn test_where_keyword() {\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"trait A <|>\"),\n             @r###\"\n-        [\n-            \"kw where\",\n-        ]\n+            kw where\n         \"###\n         );\n-        assert_debug_snapshot!(\n+        assert_snapshot!(\n             get_keyword_completions(r\"impl A <|>\"),\n             @r###\"\n-        [\n-            \"kw where\",\n-        ]\n+            kw where\n         \"###\n         );\n     }"}, {"sha": "1e16a43cabe81bd676fcea5bb65f8e9a3780d7b7", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b99b4953c9a4791f7f39ab208a1842086ad0f04c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99b4953c9a4791f7f39ab208a1842086ad0f04c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=b99b4953c9a4791f7f39ab208a1842086ad0f04c", "patch": "@@ -12,8 +12,8 @@ pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionI\n     do_completion_with_options(code, kind, &CompletionConfig::default())\n }\n \n-pub(crate) fn get_completions(code: &str, kind: CompletionKind) -> Vec<String> {\n-    get_completions_with_options(code, kind, &CompletionConfig::default())\n+pub(crate) fn completion_list(code: &str, kind: CompletionKind) -> String {\n+    completion_list_with_options(code, kind, &CompletionConfig::default())\n }\n \n pub(crate) fn do_completion_with_options(\n@@ -38,19 +38,19 @@ fn get_all_completion_items(code: &str, options: &CompletionConfig) -> Vec<Compl\n     analysis.completions(options, position).unwrap().unwrap().into()\n }\n \n-pub(crate) fn get_completions_with_options(\n+pub(crate) fn completion_list_with_options(\n     code: &str,\n     kind: CompletionKind,\n     options: &CompletionConfig,\n-) -> Vec<String> {\n+) -> String {\n     let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, options)\n         .into_iter()\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n     kind_completions\n         .into_iter()\n-        .map(|it| format!(\"{} {}\", it.kind().unwrap().tag(), it.label()))\n+        .map(|it| format!(\"{} {}\\n\", it.kind().unwrap().tag(), it.label()))\n         .collect()\n }\n "}]}