{"sha": "3bde5e78aef6c05a23f6068403682df7517d5a73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZGU1ZTc4YWVmNmMwNWEyM2Y2MDY4NDAzNjgyZGY3NTE3ZDVhNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-28T10:41:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-28T10:41:47Z"}, "message": "Auto merge of #46175 - GuillaumeGomez:fix-global-search, r=QuietMisdreavus\n\nFix global search\n\nFixes #46021.\n\nr? @QuietMisdreavus", "tree": {"sha": "114e90f69747f659640fbe155f1da7a25df762e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114e90f69747f659640fbe155f1da7a25df762e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bde5e78aef6c05a23f6068403682df7517d5a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bde5e78aef6c05a23f6068403682df7517d5a73", "html_url": "https://github.com/rust-lang/rust/commit/3bde5e78aef6c05a23f6068403682df7517d5a73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bde5e78aef6c05a23f6068403682df7517d5a73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "436ac8928aa2e94f621111d6d99901713060b568", "url": "https://api.github.com/repos/rust-lang/rust/commits/436ac8928aa2e94f621111d6d99901713060b568", "html_url": "https://github.com/rust-lang/rust/commit/436ac8928aa2e94f621111d6d99901713060b568"}, {"sha": "0a1219809ddd289a92954255d369fb8e18936c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1219809ddd289a92954255d369fb8e18936c3d", "html_url": "https://github.com/rust-lang/rust/commit/0a1219809ddd289a92954255d369fb8e18936c3d"}], "stats": {"total": 454, "additions": 227, "deletions": 227}, "files": [{"sha": "fda6b8359f111ad7c43c6c6e7c833e902474bec6", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 227, "deletions": 227, "changes": 454, "blob_url": "https://github.com/rust-lang/rust/blob/3bde5e78aef6c05a23f6068403682df7517d5a73/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bde5e78aef6c05a23f6068403682df7517d5a73/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3bde5e78aef6c05a23f6068403682df7517d5a73", "patch": "@@ -352,6 +352,7 @@\n     function initSearch(rawSearchIndex) {\n         var currentResults, index, searchIndex;\n         var MAX_LEV_DISTANCE = 3;\n+        var MAX_RESULTS = 200;\n         var params = getQueryStringParams();\n \n         // Populate search bar with query string search term when provided,\n@@ -374,7 +375,7 @@\n             var valLower = query.query.toLowerCase(),\n                 val = valLower,\n                 typeFilter = itemTypeFromName(query.type),\n-                results = {},\n+                results = {}, results_in_args = {}, results_returned = {},\n                 split = valLower.split(\"::\");\n \n             for (var z = 0; z < split.length; ++z) {\n@@ -384,6 +385,126 @@\n                 }\n             }\n \n+            function transformResults(results, isType) {\n+                var out = [];\n+                for (i = 0; i < results.length; ++i) {\n+                    if (results[i].id > -1) {\n+                        var obj = searchIndex[results[i].id];\n+                        obj.lev = results[i].lev;\n+                        if (isType !== true || obj.type) {\n+                            out.push(obj);\n+                        }\n+                    }\n+                    if (out.length >= MAX_RESULTS) {\n+                        break;\n+                    }\n+                }\n+                return out;\n+            }\n+\n+            function sortResults(results, isType) {\n+                var ar = [];\n+                for (var entry in results) {\n+                    if (results.hasOwnProperty(entry)) {\n+                        ar.push(results[entry]);\n+                    }\n+                }\n+                results = ar;\n+                var nresults = results.length;\n+                for (var i = 0; i < nresults; ++i) {\n+                    results[i].word = searchWords[results[i].id];\n+                    results[i].item = searchIndex[results[i].id] || {};\n+                }\n+                // if there are no results then return to default and fail\n+                if (results.length === 0) {\n+                    return [];\n+                }\n+\n+                results.sort(function(aaa, bbb) {\n+                    var a, b;\n+\n+                    // Sort by non levenshtein results and then levenshtein results by the distance\n+                    // (less changes required to match means higher rankings)\n+                    a = (aaa.lev);\n+                    b = (bbb.lev);\n+                    if (a !== b) { return a - b; }\n+\n+                    // sort by crate (non-current crate goes later)\n+                    a = (aaa.item.crate !== window.currentCrate);\n+                    b = (bbb.item.crate !== window.currentCrate);\n+                    if (a !== b) { return a - b; }\n+\n+                    // sort by exact match (mismatch goes later)\n+                    a = (aaa.word !== valLower);\n+                    b = (bbb.word !== valLower);\n+                    if (a !== b) { return a - b; }\n+\n+                    // sort by item name length (longer goes later)\n+                    a = aaa.word.length;\n+                    b = bbb.word.length;\n+                    if (a !== b) { return a - b; }\n+\n+                    // sort by item name (lexicographically larger goes later)\n+                    a = aaa.word;\n+                    b = bbb.word;\n+                    if (a !== b) { return (a > b ? +1 : -1); }\n+\n+                    // sort by index of keyword in item name (no literal occurrence goes later)\n+                    a = (aaa.index < 0);\n+                    b = (bbb.index < 0);\n+                    if (a !== b) { return a - b; }\n+                    // (later literal occurrence, if any, goes later)\n+                    a = aaa.index;\n+                    b = bbb.index;\n+                    if (a !== b) { return a - b; }\n+\n+                    // special precedence for primitive pages\n+                    if ((aaa.item.ty === TY_PRIMITIVE) && (bbb.item.ty !== TY_PRIMITIVE)) {\n+                        return -1;\n+                    }\n+                    if ((bbb.item.ty === TY_PRIMITIVE) && (aaa.item.ty !== TY_PRIMITIVE)) {\n+                        return 1;\n+                    }\n+\n+                    // sort by description (no description goes later)\n+                    a = (aaa.item.desc === '');\n+                    b = (bbb.item.desc === '');\n+                    if (a !== b) { return a - b; }\n+\n+                    // sort by type (later occurrence in `itemTypes` goes later)\n+                    a = aaa.item.ty;\n+                    b = bbb.item.ty;\n+                    if (a !== b) { return a - b; }\n+\n+                    // sort by path (lexicographically larger goes later)\n+                    a = aaa.item.path;\n+                    b = bbb.item.path;\n+                    if (a !== b) { return (a > b ? +1 : -1); }\n+\n+                    // que sera, sera\n+                    return 0;\n+                });\n+\n+                for (var i = 0; i < results.length; ++i) {\n+                    var result = results[i];\n+\n+                    // this validation does not make sense when searching by types\n+                    if (result.dontValidate) {\n+                        continue;\n+                    }\n+                    var name = result.item.name.toLowerCase(),\n+                        path = result.item.path.toLowerCase(),\n+                        parent = result.item.parent;\n+\n+                    if (isType !== true &&\n+                        validateResult(name, path, split, parent) === false)\n+                    {\n+                        result.id = -1;\n+                    }\n+                }\n+                return transformResults(results);\n+            }\n+\n             function extractGenerics(val) {\n                 val = val.toLowerCase();\n                 if (val.indexOf('<') !== -1) {\n@@ -404,11 +525,13 @@\n                 // match as well.\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n                 if (val.generics.length > 0) {\n-                    if (obj.generics &&\n-                        obj.generics.length >= val.generics.length) {\n+                    if (obj.generics && obj.generics.length >= val.generics.length) {\n                         var elems = obj.generics.slice(0);\n+                        var total = 0;\n+                        var done = 0;\n+                        // We need to find the type that matches the most to remove it in order\n+                        // to move forward.\n                         for (var y = 0; y < val.generics.length; ++y) {\n-                            // The point here is to find the type that matches the most.\n                             var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n                             for (var x = 0; x < elems.length; ++x) {\n                                 var tmp_lev = levenshtein(elems[x], val.generics[y]);\n@@ -420,14 +543,14 @@\n                             if (lev.pos !== -1) {\n                                 elems.splice(lev.pos, 1);\n                                 lev_distance = Math.min(lev.lev, lev_distance);\n+                                total += lev.lev;\n+                                done += 1;\n                             } else {\n                                 return MAX_LEV_DISTANCE + 1;\n                             }\n                         }\n-                        return lev_distance;\n+                        return lev_distance;//Math.ceil(total / done);\n                     }\n-                } else {\n-                    return 0;\n                 }\n                 return MAX_LEV_DISTANCE + 1;\n             }\n@@ -463,9 +586,13 @@\n                     }\n                     // If the type has generics but don't match, then it won't return at this point.\n                     // Otherwise, `checkGenerics` will return 0 and it'll return.\n-                    var tmp_lev = checkGenerics(obj, val);\n-                    if (tmp_lev <= MAX_LEV_DISTANCE) {\n-                        return tmp_lev;\n+                    if (obj.generics && obj.generics.length !== 0) {\n+                        var tmp_lev = checkGenerics(obj, val);\n+                        if (tmp_lev <= MAX_LEV_DISTANCE) {\n+                            return tmp_lev;\n+                        }\n+                    } else {\n+                        return 0;\n                     }\n                 }\n                 // Names didn't match so let's check if one of the generic types could.\n@@ -479,12 +606,11 @@\n                     }\n                     return false;\n                 }\n-                var new_lev = levenshtein(obj.name, val.name);\n-                if (new_lev < lev_distance) {\n-                    if ((lev = checkGenerics(obj, val)) <= MAX_LEV_DISTANCE) {\n-                        lev_distance = Math.min(Math.min(new_lev, lev), lev_distance);\n-                    }\n+                var lev_distance = Math.min(levenshtein(obj.name, val.name), lev_distance);\n+                if (lev_distance <= MAX_LEV_DISTANCE) {\n+                    lev_distance = Math.min(checkGenerics(obj, val), lev_distance);\n                 } else if (obj.generics && obj.generics.length > 0) {\n+                    // We can check if the type we're looking for is inside the generics!\n                     for (var x = 0; x < obj.generics.length; ++x) {\n                         lev_distance = Math.min(levenshtein(obj.generics[x], val.name),\n                                                 lev_distance);\n@@ -599,7 +725,6 @@\n             if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") &&\n                 val.charAt(val.length - 1) === val.charAt(0))\n             {\n-                var results_length = 0;\n                 val = extractGenerics(val.substr(1, val.length - 2));\n                 for (var i = 0; i < nSearchWords; ++i) {\n                     var in_args = findArg(searchIndex[i], val, true);\n@@ -613,31 +738,32 @@\n                             results[fullId] === undefined)\n                         {\n                             results[fullId] = {id: i, index: -1};\n-                            results_length += 1;\n                         }\n                     } else if ((in_args === true || returned === true) &&\n                                typePassesFilter(typeFilter, searchIndex[i].ty)) {\n-                        if (results[fullId] === undefined) {\n+                        if (in_args === true || returned === true) {\n+                            if (in_args === true) {\n+                                results_in_args[fullId] = {\n+                                    id: i,\n+                                    index: -1,\n+                                    dontValidate: true,\n+                                };\n+                            }\n+                            if (returned === true) {\n+                                results_returned[fullId] = {\n+                                    id: i,\n+                                    index: -1,\n+                                    dontValidate: true,\n+                                };\n+                            }\n+                        } else {\n                             results[fullId] = {\n                                 id: i,\n                                 index: -1,\n                                 dontValidate: true,\n-                                in_args: in_args,\n-                                returned: returned,\n                             };\n-                            results_length += 1;\n-                        } else {\n-                            if (in_args === true) {\n-                                results[fullId].in_args = true;\n-                            }\n-                            if (returned === true) {\n-                                results[fullId].returned = true;\n-                            }\n                         }\n                     }\n-                    if (results_length === max) {\n-                        break;\n-                    }\n                 }\n                 query.inputs = [val];\n                 query.output = val;\n@@ -678,23 +804,26 @@\n                             }\n                             in_args = allFound;\n                         }\n-                        if (in_args === true || returned === true || module === true) {\n-                            if (results[fullId] !== undefined) {\n-                                if (returned === true) {\n-                                    results[fullId].returned = true;\n-                                }\n-                                if (in_args === true) {\n-                                    results[fullId].in_args = true;\n-                                }\n-                            } else {\n-                                results[fullId] = {\n-                                    id: i,\n-                                    index: -1,\n-                                    dontValidate: true,\n-                                    returned: returned,\n-                                    in_args: in_args,\n-                                };\n-                            }\n+                        if (in_args === true) {\n+                            results_in_args[fullId] = {\n+                                id: i,\n+                                index: -1,\n+                                dontValidate: true,\n+                            };\n+                        }\n+                        if (returned === true) {\n+                            results_returned[fullId] = {\n+                                id: i,\n+                                index: -1,\n+                                dontValidate: true,\n+                            };\n+                        }\n+                        if (module === true) {\n+                            results[fullId] = {\n+                                id: i,\n+                                index: -1,\n+                                dontValidate: true,\n+                            };\n                         }\n                     }\n                 }\n@@ -709,7 +838,6 @@\n                 // gather matching search results up to a certain maximum\n                 val = val.replace(/\\_/g, \"\");\n \n-                var results_length = 0;\n                 var valGenerics = extractGenerics(val);\n \n                 var paths = valLower.split(\"::\");\n@@ -739,177 +867,84 @@\n                         }\n                     }\n \n-                    var returned = false;\n-                    var in_args = false;\n+                    var returned = MAX_LEV_DISTANCE + 1;\n+                    var in_args = MAX_LEV_DISTANCE + 1;\n                     var index = -1;\n                     // we want lev results to go lower than others\n                     var lev = MAX_LEV_DISTANCE + 1;\n                     var fullId = itemTypes[ty.ty] + ty.path + ty.name;\n \n-                    if (searchWords[j].indexOf(val) > -1 ||\n+                    if (searchWords[j].indexOf(split[i]) > -1 ||\n+                        searchWords[j].indexOf(val) > -1 ||\n                         searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n                     {\n                         // filter type: ... queries\n-                        if (typePassesFilter(typeFilter, ty) &&\n-                            results[fullId] === undefined) {\n+                        if (typePassesFilter(typeFilter, ty) && results[fullId] === undefined) {\n                             index = searchWords[j].replace(/_/g, \"\").indexOf(val);\n                         }\n                     }\n-                    if ((lev_distance = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n-                        if (typePassesFilter(typeFilter, ty) &&\n-                            (results[fullId] === undefined ||\n-                             results[fullId].lev > lev_distance)) {\n-                            lev = Math.min(lev, lev_distance);\n-                            index = Math.max(0, index);\n+                    if ((lev = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n+                        if (typePassesFilter(typeFilter, ty) === false) {\n+                            lev = MAX_LEV_DISTANCE + 1;\n+                        } else {\n+                            lev += 1;\n                         }\n                     }\n-                    if ((lev_distance = findArg(searchIndex[j], valGenerics))\n-                        <= MAX_LEV_DISTANCE) {\n-                        if (typePassesFilter(typeFilter, ty) &&\n-                            (results[fullId] === undefined ||\n-                             results[fullId].lev > lev_distance)) {\n-                            in_args = true;\n-                            lev = Math.min(lev_distance, lev);\n-                            index = Math.max(0, index);\n+                    if ((in_args = findArg(ty, valGenerics)) <= MAX_LEV_DISTANCE) {\n+                        if (typePassesFilter(typeFilter, ty) === false) {\n+                            in_args = MAX_LEV_DISTANCE + 1;\n                         }\n                     }\n-                    if ((lev_distance = checkReturned(searchIndex[j], valGenerics)) <=\n-                        MAX_LEV_DISTANCE) {\n-                        if (typePassesFilter(typeFilter, ty) &&\n-                            (results[fullId] === undefined ||\n-                             results[fullId].lev > lev_distance)) {\n-                            returned = true;\n-                            lev = Math.min(lev_distance, lev);\n-                            index = Math.max(0, index);\n+                    if ((returned = checkReturned(ty, valGenerics)) <= MAX_LEV_DISTANCE) {\n+                        if (typePassesFilter(typeFilter, ty) === false) {\n+                            returned = MAX_LEV_DISTANCE + 1;\n                         }\n                     }\n+\n                     lev += lev_add;\n-                    if (index !== -1) {\n+                    if (in_args <= MAX_LEV_DISTANCE) {\n+                        if (results_in_args[fullId] === undefined) {\n+                            results_in_args[fullId] = {\n+                                id: j,\n+                                index: index,\n+                                lev: in_args,\n+                            };\n+                        }\n+                        results_in_args[fullId].lev =\n+                            Math.min(results_in_args[fullId].lev, in_args);\n+                    }\n+                    if (returned <= MAX_LEV_DISTANCE) {\n+                        if (results_returned[fullId] === undefined) {\n+                            results_returned[fullId] = {\n+                                id: j,\n+                                index: index,\n+                                lev: returned,\n+                            };\n+                        }\n+                        results_returned[fullId].lev =\n+                            Math.min(results_returned[fullId].lev, returned);\n+                    }\n+                    if (index !== -1 || lev <= MAX_LEV_DISTANCE) {\n+                        if (index !== -1) {\n+                            lev = 0;\n+                        }\n                         if (results[fullId] === undefined) {\n                             results[fullId] = {\n                                 id: j,\n                                 index: index,\n                                 lev: lev,\n-                                in_args: in_args,\n-                                returned: returned,\n                             };\n-                            results_length += 1;\n-                        } else {\n-                            if (results[fullId].lev > lev) {\n-                                results[fullId].lev = lev;\n-                            }\n-                            if (in_args === true) {\n-                                results[fullId].in_args = true;\n-                            }\n-                            if (returned === true) {\n-                                results[fullId].returned = true;\n-                            }\n                         }\n-                    }\n-                    if (results_length === max) {\n-                        break;\n+                        results[fullId].lev = Math.min(results[fullId].lev, lev);\n                     }\n                 }\n             }\n \n-            var ar = [];\n-            for (var entry in results) {\n-                if (results.hasOwnProperty(entry)) {\n-                    ar.push(results[entry]);\n-                }\n-            }\n-            results = ar;\n-            var nresults = results.length;\n-            for (var i = 0; i < nresults; ++i) {\n-                results[i].word = searchWords[results[i].id];\n-                results[i].item = searchIndex[results[i].id] || {};\n-            }\n-            // if there are no results then return to default and fail\n-            if (results.length === 0) {\n-                return [];\n-            }\n-\n-            results.sort(function sortResults(aaa, bbb) {\n-                var a, b;\n-\n-                // Sort by non levenshtein results and then levenshtein results by the distance\n-                // (less changes required to match means higher rankings)\n-                a = (aaa.lev);\n-                b = (bbb.lev);\n-                if (a !== b) { return a - b; }\n-\n-                // sort by crate (non-current crate goes later)\n-                a = (aaa.item.crate !== window.currentCrate);\n-                b = (bbb.item.crate !== window.currentCrate);\n-                if (a !== b) { return a - b; }\n-\n-                // sort by exact match (mismatch goes later)\n-                a = (aaa.word !== valLower);\n-                b = (bbb.word !== valLower);\n-                if (a !== b) { return a - b; }\n-\n-                // sort by item name length (longer goes later)\n-                a = aaa.word.length;\n-                b = bbb.word.length;\n-                if (a !== b) { return a - b; }\n-\n-                // sort by item name (lexicographically larger goes later)\n-                a = aaa.word;\n-                b = bbb.word;\n-                if (a !== b) { return (a > b ? +1 : -1); }\n-\n-                // sort by index of keyword in item name (no literal occurrence goes later)\n-                a = (aaa.index < 0);\n-                b = (bbb.index < 0);\n-                if (a !== b) { return a - b; }\n-                // (later literal occurrence, if any, goes later)\n-                a = aaa.index;\n-                b = bbb.index;\n-                if (a !== b) { return a - b; }\n-\n-                // special precedence for primitive pages\n-                if ((aaa.item.ty === TY_PRIMITIVE) && (bbb.item.ty !== TY_PRIMITIVE)) {\n-                    return -1;\n-                }\n-                if ((bbb.item.ty === TY_PRIMITIVE) && (aaa.item.ty !== TY_PRIMITIVE)) {\n-                    return 1;\n-                }\n-\n-                // sort by description (no description goes later)\n-                a = (aaa.item.desc === '');\n-                b = (bbb.item.desc === '');\n-                if (a !== b) { return a - b; }\n-\n-                // sort by type (later occurrence in `itemTypes` goes later)\n-                a = aaa.item.ty;\n-                b = bbb.item.ty;\n-                if (a !== b) { return a - b; }\n-\n-                // sort by path (lexicographically larger goes later)\n-                a = aaa.item.path;\n-                b = bbb.item.path;\n-                if (a !== b) { return (a > b ? +1 : -1); }\n-\n-                // que sera, sera\n-                return 0;\n-            });\n-\n-            for (var i = 0; i < results.length; ++i) {\n-                var result = results[i];\n-\n-                // this validation does not make sense when searching by types\n-                if (result.dontValidate || result.returned === true && result.param === true) {\n-                    continue;\n-                }\n-                var name = result.item.name.toLowerCase(),\n-                    path = result.item.path.toLowerCase(),\n-                    parent = result.item.parent;\n-\n-                if (validateResult(name, path, split, parent) === false) {\n-                    result.id = -1;\n-                }\n-            }\n-            return results;\n+            return {\n+                'in_args': sortResults(results_in_args, true),\n+                'returned': sortResults(results_returned, true),\n+                'others': sortResults(results),\n+            };\n         }\n \n         /**\n@@ -1187,10 +1222,8 @@\n \n         function search(e) {\n             var query,\n-                filterdata = [],\n                 obj, i, len,\n                 results = {\"in_args\": [], \"returned\": [], \"others\": []},\n-                maxResults = 200,\n                 resultIndex;\n             var params = getQueryStringParams();\n \n@@ -1216,40 +1249,7 @@\n                 }\n             }\n \n-            resultIndex = execQuery(query, 20000, index);\n-            len = resultIndex.length;\n-            for (i = 0; i < len; ++i) {\n-                if (resultIndex[i].id > -1) {\n-                    var added = false;\n-                    obj = searchIndex[resultIndex[i].id];\n-                    filterdata.push([obj.name, obj.ty, obj.path, obj.desc]);\n-                    if (obj.type) {\n-                        if (results['returned'].length < maxResults &&\n-                            resultIndex[i].returned === true)\n-                        {\n-                            results['returned'].push(obj);\n-                            added = true;\n-                        }\n-                        if (results['in_args'].length < maxResults &&\n-                            resultIndex[i].in_args === true)\n-                        {\n-                            results['in_args'].push(obj);\n-                            added = true;\n-                        }\n-                    }\n-                    if (results['others'].length < maxResults &&\n-                        (added === false ||\n-                         (query.search && obj.name.indexOf(query.search) !== -1))) {\n-                        results['others'].push(obj);\n-                    }\n-                }\n-                if (results['others'].length >= maxResults &&\n-                    results['in_args'].length >= maxResults &&\n-                    results['returned'].length >= maxResults) {\n-                    break;\n-                }\n-            }\n-\n+            results = execQuery(query, 20000, index);\n             showResults(results);\n         }\n "}]}