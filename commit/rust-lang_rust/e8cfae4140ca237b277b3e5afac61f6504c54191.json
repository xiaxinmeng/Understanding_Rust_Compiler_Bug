{"sha": "e8cfae4140ca237b277b3e5afac61f6504c54191", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2ZhZTQxNDBjYTIzN2IyNzdiM2U1YWZhYzYxZjY1MDRjNTQxOTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-15T11:42:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-15T11:42:08Z"}, "message": "Rollup merge of #57467 - JohnTitor:implement-the-check-attribute-1, r=oli-obk\n\nImplement `check_attribute` to forbid `#[allow_internal_unsafe]`\n\nFixes #56768.\n\nr? @oli-obk", "tree": {"sha": "cfe6a534d8dad10a6c8643df82e193d311df3409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe6a534d8dad10a6c8643df82e193d311df3409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cfae4140ca237b277b3e5afac61f6504c54191", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPccRCRBK7hj4Ov3rIwAAdHIIAAj0ngjlyia6W4f9FutXvmSK\n/whl3R+ubKQN/DVa6nYvCuNVb/dZMUTtyr3Zeb7wmzhtjsvxckLsulILEATZPic6\nmJ5PjH0PYf29f0L8u14lVbbgZ1f0tkoqedop9G8Lp7447RFlgjgY+gzcb862it4V\ni552M2mhxR15adLFC4M8qidlItu0Q7HLXU7W9+/aNcK6q2O4KuY5I6lMOXIrFxyG\nAweKm3Q2E/sb+FhL5ZC7TXswTmVtzeACDrFxx1ARkzn45Q5+nlp0AN6xfuexzpOB\nKvHyJFvWuA7BLzCdhvc2FGcn4JuWOWorqTn4flRdvMW1rV3l25b/sBeoWM6PbPw=\n=97K7\n-----END PGP SIGNATURE-----\n", "payload": "tree cfe6a534d8dad10a6c8643df82e193d311df3409\nparent 77727feb180493bfce998d4fcba9dfd7ca5f0637\nparent bd1551e46e4a788dc974f4aac8ba821133625663\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547552528 +0100\ncommitter GitHub <noreply@github.com> 1547552528 +0100\n\nRollup merge of #57467 - JohnTitor:implement-the-check-attribute-1, r=oli-obk\n\nImplement `check_attribute` to forbid `#[allow_internal_unsafe]`\n\nFixes #56768.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cfae4140ca237b277b3e5afac61f6504c54191", "html_url": "https://github.com/rust-lang/rust/commit/e8cfae4140ca237b277b3e5afac61f6504c54191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cfae4140ca237b277b3e5afac61f6504c54191/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77727feb180493bfce998d4fcba9dfd7ca5f0637", "url": "https://api.github.com/repos/rust-lang/rust/commits/77727feb180493bfce998d4fcba9dfd7ca5f0637", "html_url": "https://github.com/rust-lang/rust/commit/77727feb180493bfce998d4fcba9dfd7ca5f0637"}, {"sha": "bd1551e46e4a788dc974f4aac8ba821133625663", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1551e46e4a788dc974f4aac8ba821133625663", "html_url": "https://github.com/rust-lang/rust/commit/bd1551e46e4a788dc974f4aac8ba821133625663"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "ddb397b7c7ff431310820af8b2fbaf52060a967c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e8cfae4140ca237b277b3e5afac61f6504c54191", "patch": "@@ -40,9 +40,9 @@ use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::expr_to_string;\n+use syntax::visit::FnKind;\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n-use rustc::hir::intravisit::FnKind;\n \n use nonstandard_style::{MethodLateContext, method_context};\n \n@@ -216,7 +216,7 @@ impl LintPass for UnsafeCode {\n }\n \n impl UnsafeCode {\n-    fn report_unsafe(&self, cx: &LateContext, span: Span, desc: &'static str) {\n+    fn report_unsafe(&self, cx: &EarlyContext, span: Span, desc: &'static str) {\n         // This comes from a macro that has #[allow_internal_unsafe].\n         if span.allows_unsafe() {\n             return;\n@@ -226,23 +226,31 @@ impl UnsafeCode {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        if let hir::ExprKind::Block(ref blk, _) = e.node {\n+impl EarlyLintPass for UnsafeCode {\n+    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+        if attr.check_name(\"allow_internal_unsafe\") {\n+            self.report_unsafe(cx, attr.span, \"`allow_internal_unsafe` allows defining \\\n+                                               macros using unsafe without triggering \\\n+                                               the `unsafe_code` lint at their call site\");\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n+        if let ast::ExprKind::Block(ref blk, _) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n-            if blk.rules == hir::UnsafeBlock(hir::UserProvided) {\n+            if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n                 self.report_unsafe(cx, blk.span, \"usage of an `unsafe` block\");\n             }\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         match it.node {\n-            hir::ItemKind::Trait(_, hir::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Trait(_, ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n \n-            hir::ItemKind::Impl(hir::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Impl(ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"implementation of an `unsafe` trait\")\n             }\n \n@@ -251,19 +259,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     }\n \n     fn check_fn(&mut self,\n-                cx: &LateContext,\n-                fk: FnKind<'tcx>,\n-                _: &hir::FnDecl,\n-                _: &hir::Body,\n+                cx: &EarlyContext,\n+                fk: FnKind,\n+                _: &ast::FnDecl,\n                 span: Span,\n                 _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::FnHeader { unsafety: hir::Unsafety::Unsafe, .. }, ..) => {\n+            FnKind::ItemFn(_, ast::FnHeader { unsafety: ast::Unsafety::Unsafe, .. }, ..) => {\n                 self.report_unsafe(cx, span, \"declaration of an `unsafe` function\")\n             }\n \n             FnKind::Method(_, sig, ..) => {\n-                if sig.header.unsafety == hir::Unsafety::Unsafe {\n+                if sig.header.unsafety == ast::Unsafety::Unsafe {\n                     self.report_unsafe(cx, span, \"implementation of an `unsafe` method\")\n                 }\n             }\n@@ -272,9 +279,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(_)) = item.node {\n-            if sig.header.unsafety == hir::Unsafety::Unsafe {\n+    fn check_trait_item(&mut self, cx: &EarlyContext, item: &ast::TraitItem) {\n+        if let ast::TraitItemKind::Method(ref sig, None) = item.node {\n+            if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n         }"}, {"sha": "0d05cc1b2be9e0b71a2ac1592ca4d13db2bc8a39", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e8cfae4140ca237b277b3e5afac61f6504c54191", "patch": "@@ -111,6 +111,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     add_early_builtin!(sess,\n                        UnusedParens,\n                        UnusedImportBraces,\n+                       UnsafeCode,\n                        AnonymousParameters,\n                        UnusedDocComment,\n                        BadRepr,\n@@ -134,7 +135,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         NonSnakeCase: NonSnakeCase,\n         NonUpperCaseGlobals: NonUpperCaseGlobals,\n         NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n-        UnsafeCode: UnsafeCode,\n         UnusedAllocation: UnusedAllocation,\n         MissingCopyImplementations: MissingCopyImplementations,\n         UnstableFeatures: UnstableFeatures,"}, {"sha": "99ab9fbcf5fa029049ad9d156cc20a55a15c28db", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e8cfae4140ca237b277b3e5afac61f6504c54191", "patch": "@@ -853,13 +853,13 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BlockCheckMode {\n     Default,\n     Unsafe(UnsafeSource),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,"}, {"sha": "b08fbf6f845f88d2b30656db5b132104e9e0c3cd", "filename": "src/test/ui/lint/lint-forbid-internal-unsafe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.rs?ref=e8cfae4140ca237b277b3e5afac61f6504c54191", "patch": "@@ -0,0 +1,16 @@\n+#![forbid(unsafe_code)]\n+#![feature(allow_internal_unsafe)]\n+\n+#[allow_internal_unsafe]\n+//~^ ERROR: `allow_internal_unsafe` allows defining\n+macro_rules! evil {\n+    ($e:expr) => {\n+        unsafe {\n+            $e\n+        }\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", evil!(*(0 as *const u8)));\n+}"}, {"sha": "59dab119682c1a85f429094ea6a13a3c38de31c6", "filename": "src/test/ui/lint/lint-forbid-internal-unsafe.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cfae4140ca237b277b3e5afac61f6504c54191/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.stderr?ref=e8cfae4140ca237b277b3e5afac61f6504c54191", "patch": "@@ -0,0 +1,14 @@\n+error: `allow_internal_unsafe` allows defining macros using unsafe without triggering the `unsafe_code` lint at their call site\n+  --> $DIR/lint-forbid-internal-unsafe.rs:4:1\n+   |\n+LL | #[allow_internal_unsafe]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-forbid-internal-unsafe.rs:1:11\n+   |\n+LL | #![forbid(unsafe_code)]\n+   |           ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}