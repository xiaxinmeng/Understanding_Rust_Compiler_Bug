{"sha": "d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTdkYjkwMWUzMzk0MGNiMmNjZGE2YWZlMjFiOTkxNmU2NmQ5ZDI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-23T17:54:54Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-06T15:56:13Z"}, "message": "Add an unstable conversion from thread ID to u64\n\nWe see multiple cases inside rustc and ecosystem code where ThreadId is\ntransmuted to u64, exploiting the underlying detail. This is suboptimal\n(can break unexpectedly if we change things in std).\n\nIt is unlikely that ThreadId will ever need to be larger than u64 --\ncreating even 2^32 threads over the course of a program is quite hard,\n2^64 is even harder. As such, we do not choose to return a larger sized\ntype (e.g. u128). If we choose to shrink ThreadId in the future, or\notherwise change its internals, it is likely that a mapping to u64 will\nstill be applicable (though may become more complex).", "tree": {"sha": "137ba223e01c2eba567ce35e1e3374957a2c0e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137ba223e01c2eba567ce35e1e3374957a2c0e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "html_url": "https://github.com/rust-lang/rust/commit/d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a7db901e33940cb2ccda6afe21b9916e66d9d2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80e63f3fa77792e848e3b248acf4c0acda2e310", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80e63f3fa77792e848e3b248acf4c0acda2e310", "html_url": "https://github.com/rust-lang/rust/commit/a80e63f3fa77792e848e3b248acf4c0acda2e310"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "0dc43c7e6510ab6abac48de6ff4ef722b0f6514a", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9a7db901e33940cb2ccda6afe21b9916e66d9d2/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a7db901e33940cb2ccda6afe21b9916e66d9d2/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "patch": "@@ -1072,6 +1072,19 @@ impl ThreadId {\n             ThreadId(NonZeroU64::new(id).unwrap())\n         }\n     }\n+\n+    /// This returns a numeric identifier for the thread identified by this\n+    /// `ThreadId`.\n+    ///\n+    /// As noted in the documentation for the type itself, it is essentially an\n+    /// opaque ID, but is guaranteed to be unique for each thread. The returned\n+    /// value is entirely opaque -- only equality testing is stable. Note that\n+    /// it is not guaranteed which values new threads will return, and this may\n+    /// change across Rust versions.\n+    #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n+    pub fn as_u64(&self) -> u64 {\n+        self.0.get()\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}