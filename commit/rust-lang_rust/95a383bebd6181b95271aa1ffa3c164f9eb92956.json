{"sha": "95a383bebd6181b95271aa1ffa3c164f9eb92956", "node_id": "C_kwDOAAsO6NoAKDk1YTM4M2JlYmQ2MTgxYjk1MjcxYWExZmZhM2MxNjRmOWViOTI5NTY", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-11T11:55:25Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-26T08:18:53Z"}, "message": "Implement midpoint for all unsigned NonZeroU{8,16,32,64,128,size}", "tree": {"sha": "d1f81fb674881e0d0f801bbe5e87525952b09db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f81fb674881e0d0f801bbe5e87525952b09db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a383bebd6181b95271aa1ffa3c164f9eb92956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a383bebd6181b95271aa1ffa3c164f9eb92956", "html_url": "https://github.com/rust-lang/rust/commit/95a383bebd6181b95271aa1ffa3c164f9eb92956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a383bebd6181b95271aa1ffa3c164f9eb92956/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf73234d92f38f9c499282254ac8abb008b29f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf73234d92f38f9c499282254ac8abb008b29f95", "html_url": "https://github.com/rust-lang/rust/commit/bf73234d92f38f9c499282254ac8abb008b29f95"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "bfd1cfef277b3df1618082159d515e223e687538", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/95a383bebd6181b95271aa1ffa3c164f9eb92956/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a383bebd6181b95271aa1ffa3c164f9eb92956/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=95a383bebd6181b95271aa1ffa3c164f9eb92956", "patch": "@@ -493,6 +493,43 @@ macro_rules! nonzero_unsigned_operations {\n                 pub const fn ilog10(self) -> u32 {\n                     super::int_log10::$Int(self.0)\n                 }\n+\n+                /// Calculates the middle point of `self` and `rhs`.\n+                ///\n+                /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+                /// sufficiently-large signed integral type. This implies that the result is\n+                /// always rounded towards negative infinity and that no overflow will ever occur.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(num_midpoint)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let one = \", stringify!($Ty), \"::new(1)?;\")]\n+                #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n+                #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n+                ///\n+                /// assert_eq!(one.midpoint(four), two);\n+                /// assert_eq!(four.midpoint(one), two);\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+                #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+                #[rustc_allow_const_fn_unstable(const_num_midpoint)]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n+                #[inline]\n+                pub const fn midpoint(self, rhs: Self) -> Self {\n+                    // SAFETY: The only way to get `0` with midpoint is to have two opposite or\n+                    // near opposite numbers: (-5, 5), (0, 1), (0, 0) which is impossible because\n+                    // of the unsignedness of this number and also because $Ty is guaranteed to\n+                    // never being 0.\n+                    unsafe { $Ty::new_unchecked(self.get().midpoint(rhs.get())) }\n+                }\n             }\n         )+\n     }"}]}