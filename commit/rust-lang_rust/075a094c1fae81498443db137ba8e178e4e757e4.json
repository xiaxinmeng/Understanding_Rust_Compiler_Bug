{"sha": "075a094c1fae81498443db137ba8e178e4e757e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NWEwOTRjMWZhZTgxNDk4NDQzZGIxMzdiYThlMTc4ZTRlNzU3ZTQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-21T22:46:03Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-21T22:46:03Z"}, "message": "Now with more type inference.", "tree": {"sha": "1c4184d2ba58046b3cb540e7beb77450d382da01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c4184d2ba58046b3cb540e7beb77450d382da01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/075a094c1fae81498443db137ba8e178e4e757e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/075a094c1fae81498443db137ba8e178e4e757e4", "html_url": "https://github.com/rust-lang/rust/commit/075a094c1fae81498443db137ba8e178e4e757e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/075a094c1fae81498443db137ba8e178e4e757e4/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451e438ed04daca9ff20db09dc3c96339e56df99", "url": "https://api.github.com/repos/rust-lang/rust/commits/451e438ed04daca9ff20db09dc3c96339e56df99", "html_url": "https://github.com/rust-lang/rust/commit/451e438ed04daca9ff20db09dc3c96339e56df99"}], "stats": {"total": 85, "additions": 42, "deletions": 43}, "files": [{"sha": "197cd1bf9c3101956079bc78e3f1a5e91eb6018c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/075a094c1fae81498443db137ba8e178e4e757e4/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075a094c1fae81498443db137ba8e178e4e757e4/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=075a094c1fae81498443db137ba8e178e4e757e4", "patch": "@@ -1,4 +1,3 @@\n-\n import std::int;\n import std::ivec;\n import std::str;\n@@ -360,27 +359,27 @@ type node_type_table =\n     @smallintmap::smallintmap[ty::ty_param_substs_opt_and_ty];\n \n fn populate_type_store(&ctxt cx) {\n-    intern(cx, ty_nil, none[str]);\n-    intern(cx, ty_bool, none[str]);\n-    intern(cx, ty_int, none[str]);\n-    intern(cx, ty_float, none[str]);\n-    intern(cx, ty_uint, none[str]);\n-    intern(cx, ty_machine(ast::ty_i8), none[str]);\n-    intern(cx, ty_machine(ast::ty_i16), none[str]);\n-    intern(cx, ty_machine(ast::ty_i32), none[str]);\n-    intern(cx, ty_machine(ast::ty_i64), none[str]);\n-    intern(cx, ty_machine(ast::ty_u8), none[str]);\n-    intern(cx, ty_machine(ast::ty_u16), none[str]);\n-    intern(cx, ty_machine(ast::ty_u32), none[str]);\n-    intern(cx, ty_machine(ast::ty_u64), none[str]);\n-    intern(cx, ty_machine(ast::ty_f32), none[str]);\n-    intern(cx, ty_machine(ast::ty_f64), none[str]);\n-    intern(cx, ty_char, none[str]);\n-    intern(cx, ty_str, none[str]);\n-    intern(cx, ty_istr, none[str]);\n-    intern(cx, ty_task, none[str]);\n-    intern(cx, ty_type, none[str]);\n-    intern(cx, ty_bot, none[str]);\n+    intern(cx, ty_nil, none);\n+    intern(cx, ty_bool, none);\n+    intern(cx, ty_int, none);\n+    intern(cx, ty_float, none);\n+    intern(cx, ty_uint, none);\n+    intern(cx, ty_machine(ast::ty_i8), none);\n+    intern(cx, ty_machine(ast::ty_i16), none);\n+    intern(cx, ty_machine(ast::ty_i32), none);\n+    intern(cx, ty_machine(ast::ty_i64), none);\n+    intern(cx, ty_machine(ast::ty_u8), none);\n+    intern(cx, ty_machine(ast::ty_u16), none);\n+    intern(cx, ty_machine(ast::ty_u32), none);\n+    intern(cx, ty_machine(ast::ty_u64), none);\n+    intern(cx, ty_machine(ast::ty_f32), none);\n+    intern(cx, ty_machine(ast::ty_f64), none);\n+    intern(cx, ty_char, none);\n+    intern(cx, ty_str, none);\n+    intern(cx, ty_istr, none);\n+    intern(cx, ty_task, none);\n+    intern(cx, ty_type, none);\n+    intern(cx, ty_bot, none);\n     assert (ivec::len(cx.ts.vect) == idx_first_others);\n }\n \n@@ -530,7 +529,7 @@ fn gen_ty_full(&ctxt cx, &sty st, &option::t[str] cname) -> t {\n \n // These are private constructors to this module. External users should always\n // use the mk_foo() functions below.\n-fn gen_ty(&ctxt cx, &sty st) -> t { ret gen_ty_full(cx, st, none[str]); }\n+fn gen_ty(&ctxt cx, &sty st) -> t { ret gen_ty_full(cx, st, none); }\n \n fn mk_nil(&ctxt cx) -> t { ret idx_nil; }\n \n@@ -859,7 +858,7 @@ fn fold_ty(&ctxt cx, fold_mode fld, t ty_0) -> t {\n // Type utilities\n \n fn rename(&ctxt cx, t typ, str new_cname) -> t {\n-    ret gen_ty_full(cx, struct(cx, typ), some[str](new_cname));\n+    ret gen_ty_full(cx, struct(cx, typ), some(new_cname));\n }\n \n fn strip_cname(&ctxt cx, t typ) -> t {\n@@ -1270,10 +1269,10 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n \n fn type_param(&ctxt cx, &t ty) -> option::t[uint] {\n     alt (struct(cx, ty)) {\n-        case (ty_param(?id)) { ret some[uint](id); }\n+        case (ty_param(?id)) { ret some(id); }\n         case (_) {/* fall through */ }\n     }\n-    ret none[uint];\n+    ret none;\n }\n \n fn type_autoderef(&ctxt cx, &ty::t t) -> ty::t {\n@@ -1737,7 +1736,7 @@ fn eq_raw_ty(&@raw_t a, &@raw_t b) -> bool {\n     alt (a.cname) {\n         case (none) {\n             alt (b.cname) {\n-                case (none[str]) {/* ok */ }\n+                case (none) { /* ok */ }\n                 case (_) { ret false; }\n             }\n         }\n@@ -2177,10 +2176,10 @@ mod unify {\n     // Unifies two mutability flags.\n     fn unify_mut(ast::mutability expected, ast::mutability actual) ->\n        option::t[ast::mutability] {\n-        if (expected == actual) { ret some[ast::mutability](expected); }\n-        if (expected == ast::maybe_mut) { ret some[ast::mutability](actual); }\n-        if (actual == ast::maybe_mut) { ret some[ast::mutability](expected); }\n-        ret none[ast::mutability];\n+        if (expected == actual) { ret some(expected); }\n+        if (expected == ast::maybe_mut) { ret some(actual); }\n+        if (actual == ast::maybe_mut) { ret some(expected); }\n+        ret none;\n     }\n     tag fn_common_res {\n         fn_common_res_err(result);\n@@ -2332,8 +2331,8 @@ mod unify {\n                 }\n                 auto root_id = ufindivec::find(vb.sets, vid as uint);\n                 alt (smallintmap::find[t](vb.types, root_id)) {\n-                    case (none[t]) { ret fix_err(vid); }\n-                    case (some[t](?rt)) { ret fix_ok(rt); }\n+                    case (none) { ret fix_err(vid); }\n+                    case (some(?rt)) { ret fix_ok(rt); }\n                 }\n             }\n             case (_) { ret fix_ok(typ); }\n@@ -2778,8 +2777,8 @@ mod unify {\n             }\n             auto typespec;\n             alt (smallintmap::find[t](vb.types, i)) {\n-                case (none[t]) { typespec = \"\"; }\n-                case (some[t](?typ)) {\n+                case (none) { typespec = \"\"; }\n+                case (some(?typ)) {\n                     typespec = \" =\" + ty_to_str(tcx, typ);\n                 }\n             }\n@@ -2793,16 +2792,16 @@ mod unify {\n         fn subst_vars(ty_ctxt tcx, @var_bindings vb,\n                       @mutable option::t[int] unresolved, int vid) -> t {\n             if (vid as uint >= ufindivec::set_count(vb.sets)) {\n-                *unresolved = some[int](vid);\n+                *unresolved = some(vid);\n                 ret ty::mk_var(tcx, vid);\n             }\n             auto root_id = ufindivec::find(vb.sets, vid as uint);\n             alt (smallintmap::find[t](vb.types, root_id)) {\n-                case (none[t]) {\n-                    *unresolved = some[int](vid);\n+                case (none) {\n+                    *unresolved = some(vid);\n                     ret ty::mk_var(tcx, vid);\n                 }\n-                case (some[t](?rt)) {\n+                case (some(?rt)) {\n                     ret fold_ty(tcx,\n                                 fm_var(bind subst_vars(tcx, vb, unresolved,\n                                                        _)), rt);\n@@ -2815,8 +2814,8 @@ mod unify {\n                     typ);\n         auto ur = *unresolved;\n         alt (ur) {\n-            case (none[int]) { ret fix_ok(rty); }\n-            case (some[int](?var_id)) { ret fix_err(var_id); }\n+            case (none) { ret fix_ok(rty); }\n+            case (some(?var_id)) { ret fix_err(var_id); }\n         }\n     }\n     fn resolve_type_var(&ty_ctxt tcx, &@var_bindings vb, int vid) ->\n@@ -2826,8 +2825,8 @@ mod unify {\n         }\n         auto root_id = ufindivec::find(vb.sets, vid as uint);\n         alt (smallintmap::find[t](vb.types, root_id)) {\n-            case (none[t]) { ret fix_err(vid); }\n-            case (some[t](?rt)) { ret fixup_vars(tcx, vb, rt); }\n+            case (none) { ret fix_err(vid); }\n+            case (some(?rt)) { ret fixup_vars(tcx, vb, rt); }\n         }\n     }\n }"}]}