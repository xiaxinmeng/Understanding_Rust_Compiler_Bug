{"sha": "0cc35f54e87d7abab5d0299003396b3b7f44955f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzM1ZjU0ZTg3ZDdhYmFiNWQwMjk5MDAzMzk2YjNiN2Y0NDk1NWY=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-12T16:30:39Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-12T16:37:32Z"}, "message": "Don't check self type twice", "tree": {"sha": "dd505354b1f942024b734a605f0c7146fe688a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd505354b1f942024b734a605f0c7146fe688a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc35f54e87d7abab5d0299003396b3b7f44955f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc35f54e87d7abab5d0299003396b3b7f44955f", "html_url": "https://github.com/rust-lang/rust/commit/0cc35f54e87d7abab5d0299003396b3b7f44955f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc35f54e87d7abab5d0299003396b3b7f44955f/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5f4c4860d0d1ff05deba9ffb36ffdc9e4a3e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5f4c4860d0d1ff05deba9ffb36ffdc9e4a3e96", "html_url": "https://github.com/rust-lang/rust/commit/bc5f4c4860d0d1ff05deba9ffb36ffdc9e4a3e96"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "e8ae1f44a3671a159a09ab61b68e4eeae430ef19", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cc35f54e87d7abab5d0299003396b3b7f44955f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc35f54e87d7abab5d0299003396b3b7f44955f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=0cc35f54e87d7abab5d0299003396b3b7f44955f", "patch": "@@ -70,8 +70,6 @@ where\n     // Before doing expensive operations like entering an inference context, do\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify.\n-    let impl1_self = tcx.type_of(impl1_def_id);\n-    let impl2_self = tcx.type_of(impl2_def_id);\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n \n@@ -80,14 +78,13 @@ where\n         .iter()\n         .flat_map(|tref| tref.substs.types())\n         .zip(impl2_ref.iter().flat_map(|tref| tref.substs.types()))\n-        .chain(iter::once((impl1_self, impl2_self)))\n         .any(|(ty1, ty2)| {\n             let t1 = fast_reject::simplify_type(tcx, ty1, false);\n             let t2 = fast_reject::simplify_type(tcx, ty2, false);\n             if let (Some(t1), Some(t2)) = (t1, t2) {\n                 // Simplified successfully\n                 // Types cannot unify if they differ in their reference mutability or simplify to different types\n-                t1 != t2 || ty1.ref_mutability() != ty2.ref_mutability() \n+                t1 != t2 || ty1.ref_mutability() != ty2.ref_mutability()\n             } else {\n                 // Types might unify\n                 false"}]}