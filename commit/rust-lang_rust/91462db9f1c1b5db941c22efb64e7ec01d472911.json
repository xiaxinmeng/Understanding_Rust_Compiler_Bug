{"sha": "91462db9f1c1b5db941c22efb64e7ec01d472911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDYyZGI5ZjFjMWI1ZGI5NDFjMjJlZmI2NGU3ZWMwMWQ0NzI5MTE=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-04-26T03:28:22Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-04-26T03:28:22Z"}, "message": "[miri] Throw UB if target size and data size don't match\n\nIf an extern C function is defined as\n\n```\nextern \"C\" {\n    fn malloc(size: u32) -> *mut std::ffi::c_void;\n}\n```\n\non a 64-bit machine(ie. pointer sizes don't match), throw an undefined\nbehaviour.", "tree": {"sha": "1193fd124b8a4a166e44b814c2f03946a83621fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1193fd124b8a4a166e44b814c2f03946a83621fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91462db9f1c1b5db941c22efb64e7ec01d472911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91462db9f1c1b5db941c22efb64e7ec01d472911", "html_url": "https://github.com/rust-lang/rust/commit/91462db9f1c1b5db941c22efb64e7ec01d472911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91462db9f1c1b5db941c22efb64e7ec01d472911/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659951c4a0d7450e43f61c61c0e87d0ceae17087", "url": "https://api.github.com/repos/rust-lang/rust/commits/659951c4a0d7450e43f61c61c0e87d0ceae17087", "html_url": "https://github.com/rust-lang/rust/commit/659951c4a0d7450e43f61c61c0e87d0ceae17087"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "71a9382bc65c476ead6906fbcdc190349d1642dc", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91462db9f1c1b5db941c22efb64e7ec01d472911/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91462db9f1c1b5db941c22efb64e7ec01d472911/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=91462db9f1c1b5db941c22efb64e7ec01d472911", "patch": "@@ -361,6 +361,11 @@ pub enum UndefinedBehaviorInfo {\n     InvalidUndefBytes(Option<Pointer>),\n     /// Working with a local that is not currently live.\n     DeadLocal,\n+    /// Data size is not equal to target size\n+    ArgumentSizeMismatch {\n+        target_size: u64,\n+        data_size: u64,\n+    },\n }\n \n impl fmt::Debug for UndefinedBehaviorInfo {\n@@ -422,6 +427,11 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 \"using uninitialized data, but this operation requires initialized memory\"\n             ),\n             DeadLocal => write!(f, \"accessing a dead local variable\"),\n+            ArgumentSizeMismatch { target_size, data_size } => write!(\n+                f,\n+                \"argument size mismatch: expected {} bytes but got {} bytes instead\",\n+                target_size, data_size\n+            ),\n         }\n     }\n }"}, {"sha": "c11e50015087bf3010536f8ce4d1fb36db88ab24", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91462db9f1c1b5db941c22efb64e7ec01d472911/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91462db9f1c1b5db941c22efb64e7ec01d472911/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=91462db9f1c1b5db941c22efb64e7ec01d472911", "patch": "@@ -393,7 +393,12 @@ impl<'tcx, Tag> Scalar<Tag> {\n         assert_ne!(target_size.bytes(), 0, \"you should never look at the bits of a ZST\");\n         match self {\n             Scalar::Raw { data, size } => {\n-                assert_eq!(target_size.bytes(), u64::from(size));\n+                if target_size.bytes() != u64::from(size) {\n+                    throw_ub!(ArgumentSizeMismatch {\n+                        target_size: target_size.bytes(),\n+                        data_size: u64::from(size)\n+                    });\n+                }\n                 Scalar::check_data(data, size);\n                 Ok(data)\n             }"}]}