{"sha": "6f64eb1fe65f37c3895375c03374cb8680bcd09e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNjRlYjFmZTY1ZjM3YzM4OTUzNzVjMDMzNzRjYjg2ODBiY2QwOWU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-04-04T16:42:17Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-22T12:36:22Z"}, "message": "Make THIR building a stealable query", "tree": {"sha": "3f6ef973e4d64310ce07eecb7432d2ffde0f7e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6ef973e4d64310ce07eecb7432d2ffde0f7e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f64eb1fe65f37c3895375c03374cb8680bcd09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f64eb1fe65f37c3895375c03374cb8680bcd09e", "html_url": "https://github.com/rust-lang/rust/commit/6f64eb1fe65f37c3895375c03374cb8680bcd09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f64eb1fe65f37c3895375c03374cb8680bcd09e/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd80018159f6d563131ab81105d319c15d024f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd80018159f6d563131ab81105d319c15d024f07", "html_url": "https://github.com/rust-lang/rust/commit/bd80018159f6d563131ab81105d319c15d024f07"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "a89d00e26ac192c4a175aec0f0e3dd7881747187", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -14,6 +14,7 @@ macro_rules! arena_types {\n             [] layouts: rustc_target::abi::Layout,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n+            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<$tcx>>,\n             [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n             [decode] mir: rustc_middle::mir::Body<$tcx>,\n             [] steal_promoted:"}, {"sha": "8476929eaeced2b1d230e5e6f6d964e2e7d2a088", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 17);\n+static_assert_size!(DepNode, 18);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "f940cb62d9e26b43b0b3b38b32edd09890a7292a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -220,6 +220,11 @@ rustc_queries! {\n         desc { \"checking if the crate is_panic_runtime\" }\n     }\n \n+    /// Fetch the THIR for a given body.\n+    query thir_body(key: ty::WithOptConstParam<LocalDefId>) -> (&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId) {\n+        desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+    }\n+\n     /// Set of all the `DefId`s in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct\n     /// constructors."}, {"sha": "a5069113702c24db931404c2832688c587fd7a75", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -24,25 +24,29 @@ use std::fmt;\n use std::ops::Index;\n \n newtype_index! {\n+    #[derive(HashStable)]\n     pub struct ArmId {\n         DEBUG_FORMAT = \"a{}\"\n     }\n }\n \n newtype_index! {\n+    #[derive(HashStable)]\n     pub struct ExprId {\n         DEBUG_FORMAT = \"e{}\"\n     }\n }\n \n newtype_index! {\n+    #[derive(HashStable)]\n     pub struct StmtId {\n         DEBUG_FORMAT = \"s{}\"\n     }\n }\n \n macro_rules! thir_with_elements {\n     ($($name:ident: $id:ty => $value:ty,)*) => {\n+        #[derive(Debug, HashStable)]\n         pub struct Thir<'tcx> {\n             $(\n                 pub $name: IndexVec<$id, $value>,\n@@ -76,13 +80,13 @@ thir_with_elements! {\n     stmts: StmtId => Stmt<'tcx>,\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, HashStable)]\n pub enum LintLevel {\n     Inherited,\n     Explicit(hir::HirId),\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct Block {\n     pub targeted_by_break: bool,\n     pub region_scope: region::Scope,\n@@ -93,21 +97,21 @@ pub struct Block {\n     pub safety_mode: BlockSafety,\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n     ExplicitUnsafe(hir::HirId),\n     PushUnsafe,\n     PopUnsafe,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct Stmt<'tcx> {\n     pub kind: StmtKind<'tcx>,\n     pub opt_destruction_scope: Option<region::Scope>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub enum StmtKind<'tcx> {\n     Expr {\n         /// scope for this statement; may be used as lifetime of temporaries\n@@ -157,7 +161,7 @@ rustc_data_structures::static_assert_size!(Expr<'_>, 144);\n /// MIR simplifications are already done in the impl of `Thir`. For\n /// example, method calls and overloaded operators are absent: they are\n /// expected to be converted into `Expr::Call` instances.\n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct Expr<'tcx> {\n     /// type of this expression\n     pub ty: Ty<'tcx>,\n@@ -173,7 +177,7 @@ pub struct Expr<'tcx> {\n     pub kind: ExprKind<'tcx>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub enum ExprKind<'tcx> {\n     Scope {\n         region_scope: region::Scope,\n@@ -363,19 +367,19 @@ pub enum ExprKind<'tcx> {\n     },\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct FieldExpr {\n     pub name: Field,\n     pub expr: ExprId,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct FruInfo<'tcx> {\n     pub base: ExprId,\n     pub field_types: Box<[Ty<'tcx>]>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct Arm<'tcx> {\n     pub pattern: Pat<'tcx>,\n     pub guard: Option<Guard<'tcx>>,\n@@ -385,19 +389,19 @@ pub struct Arm<'tcx> {\n     pub span: Span,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub enum Guard<'tcx> {\n     If(ExprId),\n     IfLet(Pat<'tcx>, ExprId),\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, HashStable)]\n pub enum LogicalOp {\n     And,\n     Or,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub enum InlineAsmOperand<'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n@@ -431,19 +435,19 @@ pub enum InlineAsmOperand<'tcx> {\n     },\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n pub enum BindingMode {\n     ByValue,\n     ByRef(BorrowKind),\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, HashStable)]\n pub struct FieldPat<'tcx> {\n     pub field: Field,\n     pub pattern: Pat<'tcx>,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, HashStable)]\n pub struct Pat<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub span: Span,\n@@ -456,7 +460,7 @@ impl<'tcx> Pat<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n pub struct PatTyProj<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n }\n@@ -483,7 +487,7 @@ impl<'tcx> PatTyProj<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n pub struct Ascription<'tcx> {\n     pub user_ty: PatTyProj<'tcx>,\n     /// Variance to use when relating the type `user_ty` to the **type of the value being\n@@ -508,7 +512,7 @@ pub struct Ascription<'tcx> {\n     pub user_ty_span: Span,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, HashStable)]\n pub enum PatKind<'tcx> {\n     Wild,\n \n@@ -586,7 +590,7 @@ pub enum PatKind<'tcx> {\n     },\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n pub struct PatRange<'tcx> {\n     pub lo: &'tcx ty::Const<'tcx>,\n     pub hi: &'tcx ty::Const<'tcx>,"}, {"sha": "3bb6a8489a25fdd16da075fb5738ba7e128fe6b3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -13,6 +13,7 @@ use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath, ObjectLifetime\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::thir::Thir;\n use crate::traits;\n use crate::ty::query::{self, OnDiskCache, TyCtxtAt};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n@@ -1041,6 +1042,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {\n+        self.arena.alloc(Steal::new(thir))\n+    }\n+\n     pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {\n         self.arena.alloc(Steal::new(mir))\n     }"}, {"sha": "3bdb438896bf2de56865941b6c536011a74f9f39", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -18,6 +18,7 @@ use crate::mir::interpret::GlobalId;\n use crate::mir::interpret::{ConstAlloc, LitToConstError, LitToConstInput};\n use crate::mir::interpret::{ConstValue, EvalToAllocationRawResult, EvalToConstValueResult};\n use crate::mir::mono::CodegenUnit;\n+use crate::thir;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,"}, {"sha": "f35ecb4d3cd58d3390ec40771b357311f45d99c7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -669,7 +669,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     }\n }\n \n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Copy, Clone, HashStable)]\n pub enum UpvarSubsts<'tcx> {\n     Closure(SubstsRef<'tcx>),\n     Generator(SubstsRef<'tcx>),"}, {"sha": "8426b24270d668ab1d1ef24501cdd03fea31d286", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -1,8 +1,8 @@\n use crate::build::matches::ArmHasGuard;\n use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use rustc_middle::thir::*;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n use rustc_session::lint::builtin::UNSAFE_OP_IN_UNSAFE_FN;\n use rustc_session::lint::Level;\n use rustc_span::Span;"}, {"sha": "5e305ebba2ff46df57b1501d2e78ea6713baf86d", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -1,8 +1,8 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n-use rustc_middle::thir::*;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "b2a1dbf4c525dc66d09b77be04bfbc9e2edcbeea", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -2,9 +2,9 @@\n \n use crate::build::expr::category::Category;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use rustc_middle::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an operand suitable for use until the end of the current"}, {"sha": "842d7666742f65354d41988f73e45871c7610bdf", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -3,13 +3,13 @@\n use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use rustc_middle::thir::*;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind::BoundsCheck;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n use rustc_middle::ty::AdtDef;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n use rustc_span::Span;"}, {"sha": "2eb6597e81d0e9ced8949a01eb6ae1b9fd576404", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -5,11 +5,11 @@ use rustc_index::vec::Idx;\n use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use rustc_middle::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::Place;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n "}, {"sha": "45e0243c88a0a36e46582fb7fc0a8eb6a83a45e4", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -2,10 +2,10 @@\n \n use crate::build::scope::DropKind;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use rustc_middle::thir::*;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building"}, {"sha": "f2b00f0f6edaaeb0cc8e0de0f05c21518633bb00", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -2,13 +2,13 @@\n \n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use rustc_middle::thir::*;\n use rustc_ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n use std::iter;\n "}, {"sha": "b03a6bb1a2b2a510925ae79ed686219622cfa5aa", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -1,8 +1,8 @@\n use crate::build::scope::BreakableTarget;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use rustc_middle::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n+use rustc_middle::thir::*;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Builds a block of MIR statements to evaluate the THIR `expr`."}, {"sha": "153a1f6de5d4bb892857a76ffdebaaf6f79bd6f5", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -1,7 +1,6 @@\n use crate::build;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n-use crate::thir::build_thir;\n use crate::thir::pattern::pat_from_hir;\n use rustc_attr::{self as attr, UnwindAttr};\n use rustc_errors::ErrorReported;\n@@ -106,7 +105,8 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n             };\n \n             let body = tcx.hir().body(body_id);\n-            let (thir, expr) = build_thir(tcx, def, &body.value);\n+            let (thir, expr) = tcx.thir_body(def);\n+            let thir = thir.steal();\n             let ty = tcx.type_of(fn_def_id);\n             let mut abi = fn_sig.abi;\n             let implicit_argument = match ty.kind() {\n@@ -214,8 +214,8 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n \n             let return_ty = typeck_results.node_type(id);\n \n-            let ast_expr = &tcx.hir().body(body_id).value;\n-            let (thir, expr) = build_thir(tcx, def, ast_expr);\n+            let (thir, expr) = tcx.thir_body(def);\n+            let thir = thir.steal();\n \n             build::construct_const(&thir, &infcx, expr, def, id, return_ty, return_ty_span)\n         };"}, {"sha": "67455beb07ca25c02756a129389c07e84827624c", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -31,4 +31,5 @@ pub fn provide(providers: &mut Providers) {\n     providers.mir_built = build::mir_built;\n     providers.thir_check_unsafety = check_unsafety::thir_check_unsafety;\n     providers.thir_check_unsafety_for_const_arg = check_unsafety::thir_check_unsafety_for_const_arg;\n+    providers.thir_body = thir::cx::thir_body;\n }"}, {"sha": "f7f092b2037a8f30610f71329134c82e6f3ebf85", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -2,10 +2,11 @@\n //! structures into the THIR. The `builder` is generally ignorant of the tcx,\n //! etc., and instead goes through the `Cx` for most of its work.\n \n-use crate::thir::util::UserAnnotatedTyHelpers;\n use crate::thir::pattern::pat_from_hir;\n+use crate::thir::util::UserAnnotatedTyHelpers;\n \n use rustc_ast as ast;\n+use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::Node;\n@@ -15,14 +16,15 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n-pub fn build_thir<'tcx>(\n+crate fn thir_body<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n-    expr: &'tcx hir::Expr<'tcx>,\n-) -> (Thir<'tcx>, ExprId) {\n+) -> (&'tcx Steal<Thir<'tcx>>, ExprId) {\n+    let hir = tcx.hir();\n+    let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(owner_def.did)));\n     let mut cx = Cx::new(tcx, owner_def);\n-    let expr = cx.mirror_expr(expr);\n-    (cx.thir, expr)\n+    let expr = cx.mirror_expr(&body.value);\n+    (tcx.alloc_steal_thir(cx.thir), expr)\n }\n \n struct Cx<'tcx> {"}, {"sha": "e5123d8ef0c997e972d34768e5be1689b8546157", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -7,7 +7,6 @@\n crate mod constant;\n \n crate mod cx;\n-pub use cx::build_thir;\n \n crate mod pattern;\n "}, {"sha": "5d4eb75155a676cdca5b8f3e051b57b4d0aed65a", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f64eb1fe65f37c3895375c03374cb8680bcd09e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=6f64eb1fe65f37c3895375c03374cb8680bcd09e", "patch": "@@ -292,8 +292,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_arena::TypedArena;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::thir::{Pat, PatKind};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n use smallvec::{smallvec, SmallVec};"}]}