{"sha": "68d17bca4b12f514331322f938b56331f987ad68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDE3YmNhNGIxMmY1MTQzMzEzMjJmOTM4YjU2MzMxZjk4N2FkNjg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-07T00:35:11Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-08T20:19:12Z"}, "message": "clone: managed boxes need to clone by shallow copy\n\nPerforming a deep copy isn't ever desired for a persistent data\nstructure, and it requires a more complex implementation to do\ncorrectly. A deep copy needs to check for cycles to avoid an infinite\nloop.", "tree": {"sha": "2524ae351853fc3e081c2031c86d6e0d4622b6c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2524ae351853fc3e081c2031c86d6e0d4622b6c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d17bca4b12f514331322f938b56331f987ad68", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d17bca4b12f514331322f938b56331f987ad68", "html_url": "https://github.com/rust-lang/rust/commit/68d17bca4b12f514331322f938b56331f987ad68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d17bca4b12f514331322f938b56331f987ad68/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d4d6de762f3f9aae1fedcf454c66b79b3ad58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d4d6de762f3f9aae1fedcf454c66b79b3ad58d", "html_url": "https://github.com/rust-lang/rust/commit/44d4d6de762f3f9aae1fedcf454c66b79b3ad58d"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "9da970918b0d5ceaecca90071eb15bd2e6b95e1b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/68d17bca4b12f514331322f938b56331f987ad68/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d17bca4b12f514331322f938b56331f987ad68/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=68d17bca4b12f514331322f938b56331f987ad68", "patch": "@@ -14,7 +14,7 @@ In Rust, some simple types are \"implicitly copyable\" and when you\n assign them or pass them as arguments, the receiver will get a copy,\n leaving the original value in place. These types do not require\n allocation to copy and do not have finalizers (i.e. they do not\n-contain owned pointers or implement `Drop`), so the compiler considers\n+contain owned boxes or implement `Drop`), so the compiler considers\n them cheap and safe to copy and automatically implements the `Copy`\n trait for them. For other types copies must be made explicitly,\n by convention implementing the `Clone` trait and calling the\n@@ -23,32 +23,38 @@ by convention implementing the `Clone` trait and calling the\n */\n \n pub trait Clone {\n+    /// Return a deep copy of the owned object tree. Managed boxes are cloned with a shallow copy.\n     fn clone(&self) -> Self;\n }\n \n impl Clone for () {\n+    /// Return a copy of the value.\n     #[inline(always)]\n     fn clone(&self) -> () { () }\n }\n \n impl<T:Clone> Clone for ~T {\n+    /// Return a deep copy of the owned box.\n     #[inline(always)]\n     fn clone(&self) -> ~T { ~(**self).clone() }\n }\n \n-impl<T:Clone> Clone for @T {\n+impl<T> Clone for @T {\n+    /// Return a shallow copy of the managed box.\n     #[inline(always)]\n-    fn clone(&self) -> @T { @(**self).clone() }\n+    fn clone(&self) -> @T { *self }\n }\n \n-impl<T:Clone> Clone for @mut T {\n+impl<T> Clone for @mut T {\n+    /// Return a shallow copy of the managed box.\n     #[inline(always)]\n-    fn clone(&self) -> @mut T { @mut (**self).clone() }\n+    fn clone(&self) -> @mut T { *self }\n }\n \n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {\n+            /// Return a copy of the value.\n             #[inline(always)]\n             fn clone(&self) -> $t { *self }\n         }\n@@ -76,21 +82,23 @@ clone_impl!(char)\n \n #[test]\n fn test_owned_clone() {\n-    let a : ~int = ~5i;\n-    let b : ~int = a.clone();\n+    let a: ~int = ~5i;\n+    let b: ~int = a.clone();\n     assert!(a == b);\n }\n \n #[test]\n fn test_managed_clone() {\n-    let a : @int = @5i;\n-    let b : @int = a.clone();\n+    let a: @int = @5i;\n+    let b: @int = a.clone();\n     assert!(a == b);\n }\n \n #[test]\n fn test_managed_mut_clone() {\n-    let a : @int = @5i;\n-    let b : @int = a.clone();\n+    let a: @mut int = @mut 5i;\n+    let b: @mut int = a.clone();\n+    assert!(a == b);\n+    *b = 10;\n     assert!(a == b);\n }"}, {"sha": "afa312ea35e7e172a217282400d90f0c02e9efa2", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d17bca4b12f514331322f938b56331f987ad68/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d17bca4b12f514331322f938b56331f987ad68/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=68d17bca4b12f514331322f938b56331f987ad68", "patch": "@@ -13,7 +13,7 @@ fn borrow(x: &int, f: &fn(x: &int)) {\n }\n \n fn test1(x: @~int) {\n-    do borrow(&**x.clone()) |p| {\n+    do borrow(&*(*x).clone()) |p| {\n         let x_a = ptr::addr_of(&(**x));\n         assert!((x_a as uint) != ptr::to_uint(p));\n         assert!(unsafe{*x_a} == *p);"}]}