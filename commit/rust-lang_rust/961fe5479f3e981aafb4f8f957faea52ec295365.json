{"sha": "961fe5479f3e981aafb4f8f957faea52ec295365", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWZlNTQ3OWYzZTk4MWFhZmI0ZjhmOTU3ZmFlYTUyZWMyOTUzNjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-14T16:42:57Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:17:22Z"}, "message": "rustc: use indexmap instead of a plain vector for upvars.", "tree": {"sha": "f39623d330573b1f9093ef524ae1afe78e1ed3fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39623d330573b1f9093ef524ae1afe78e1ed3fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961fe5479f3e981aafb4f8f957faea52ec295365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961fe5479f3e981aafb4f8f957faea52ec295365", "html_url": "https://github.com/rust-lang/rust/commit/961fe5479f3e981aafb4f8f957faea52ec295365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961fe5479f3e981aafb4f8f957faea52ec295365/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe0052e542747ead0d8861349326d54f0c0903d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe0052e542747ead0d8861349326d54f0c0903d", "html_url": "https://github.com/rust-lang/rust/commit/9fe0052e542747ead0d8861349326d54f0c0903d"}], "stats": {"total": 313, "additions": 198, "deletions": 115}, "files": [{"sha": "0eee3461ed6a245758e7bddf1fd90b95a79c1c4e", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -1183,6 +1183,11 @@ dependencies = [\n  \"typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"indexmap\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"installer\"\n version = \"0.0.0\"\n@@ -2719,6 +2724,7 @@ dependencies = [\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2970,6 +2976,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -3236,6 +3243,7 @@ dependencies = [\n name = \"serialize\"\n version = \"0.0.0\"\n dependencies = [\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -4199,6 +4207,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum if_chain 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3360c7b59e5ffa2653671fb74b4741a5d343c03f331c0a4aeda42b5c2b0ec7d\"\n \"checksum ignore 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dc57fa12805f367736a38541ac1a9fc6a52812a0ca959b1d4d4b640a89eb002\"\n \"checksum im-rc 13.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a0197597d095c0d11107975d3175173f810ee572c2501ff4de64f4f3f119806\"\n+\"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n \"checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\n \"checksum is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e5b386aef33a1c677be65237cb9d32c3f3ef56bd035949710c4bb13083eb053\"\n \"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\""}, {"sha": "7ec24647b4d8cc10b3986ff9f8832c0590814082", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -30,6 +30,7 @@ use syntax::util::parser::ExprPrecedence;\n use crate::ty::AdtKind;\n use crate::ty::query::Providers;\n \n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable;\n@@ -2493,28 +2494,15 @@ impl ForeignItemKind {\n \n /// A variable captured by a closure.\n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct Upvar<Id = HirId> {\n-    /// The variable being captured.\n-    pub var_id: Id,\n-\n+pub struct Upvar {\n     /// Whether this is not a direct capture (comes from parent closure).\n     pub has_parent: bool,\n \n     // First span where it is accessed (there can be multiple).\n     pub span: Span\n }\n \n-impl<Id: fmt::Debug + Copy> Upvar<Id> {\n-    pub fn map_id<R>(self, map: impl FnOnce(Id) -> R) -> Upvar<R> {\n-        Upvar {\n-            var_id: map(self.var_id),\n-            has_parent: self.has_parent,\n-            span: self.span,\n-        }\n-    }\n-}\n-\n-pub type UpvarMap = NodeMap<Vec<Upvar<ast::NodeId>>>;\n+pub type UpvarMap = NodeMap<FxIndexMap<ast::NodeId, Upvar>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;\n "}, {"sha": "11faaa4df18ed929146904ac06545c76696a3e66", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -924,14 +924,15 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_expr.hir_id);\n         if let Some(upvars) = self.tcx().upvars(closure_def_id) {\n-            for upvar in upvars.iter() {\n+            for (&var_id, upvar) in upvars.iter() {\n                 let upvar_id = ty::UpvarId {\n-                    var_path: ty::UpvarPath { hir_id: upvar.var_id },\n+                    var_path: ty::UpvarPath { hir_id: var_id },\n                     closure_expr_id: closure_def_id.to_local(),\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);\n                 let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.hir_id,\n                                                                    fn_decl_span,\n+                                                                   var_id,\n                                                                    upvar));\n                 match upvar_capture {\n                     ty::UpvarCapture::ByValue => {\n@@ -957,6 +958,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     fn cat_captured_var(&mut self,\n                         closure_hir_id: hir::HirId,\n                         closure_span: Span,\n+                        var_id: hir::HirId,\n                         upvar: &hir::Upvar)\n                         -> mc::McResult<mc::cmt_<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n@@ -965,11 +967,11 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_hir_id);\n             let parent_def_id = self.tcx().parent(closure_def_id).unwrap();\n             assert!(self.tcx().is_closure(parent_def_id));\n-            let var_nid = self.tcx().hir().hir_to_node_id(upvar.var_id);\n+            let var_nid = self.tcx().hir().hir_to_node_id(var_id);\n             self.mc.cat_upvar(closure_hir_id, closure_span, var_nid, parent_def_id)\n         } else {\n-            let var_ty = self.mc.node_ty(upvar.var_id)?;\n-            self.mc.cat_res(closure_hir_id, closure_span, var_ty, Res::Local(upvar.var_id))\n+            let var_ty = self.mc.node_ty(var_id)?;\n+            self.mc.cat_res(closure_hir_id, closure_span, var_ty, Res::Local(var_id))\n         }\n     }\n }"}, {"sha": "873c2dd48056932c7424d74ec973d9b6bdc350cd", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -485,10 +485,10 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         let mut call_caps = Vec::new();\n         let closure_def_id = ir.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n         if let Some(upvars) = ir.tcx.upvars(closure_def_id) {\n-            call_caps.extend(upvars.iter().filter_map(|upvar| {\n+            call_caps.extend(upvars.iter().filter_map(|(&var_id, upvar)| {\n                 if !upvar.has_parent {\n                     let upvar_ln = ir.add_live_node(UpvarNode(upvar.span));\n-                    Some(CaptureInfo { ln: upvar_ln, var_hid: upvar.var_id })\n+                    Some(CaptureInfo { ln: upvar_ln, var_hid: var_id })\n                 } else {\n                     None\n                 }"}, {"sha": "6213eda651486424587aaedbf9d22d0555488b3f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -2562,8 +2562,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n                             if let Some(upvars) = tcx.upvars(def_id) {\n-                                for (upvar, place) in upvars.iter().zip(places) {\n-                                    let var_name = tcx.hir().name_by_hir_id(upvar.var_id);\n+                                for (&var_id, place) in upvars.keys().zip(places) {\n+                                    let var_name = tcx.hir().name_by_hir_id(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             }\n@@ -2581,8 +2581,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n                             if let Some(upvars) = tcx.upvars(def_id) {\n-                                for (upvar, place) in upvars.iter().zip(places) {\n-                                    let var_name = tcx.hir().name_by_hir_id(upvar.var_id);\n+                                for (&var_id, place) in upvars.keys().zip(places) {\n+                                    let var_name = tcx.hir().name_by_hir_id(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             }"}, {"sha": "18308f54442210d8aa3ad25106591a4afa4ebc20", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -826,7 +826,7 @@ rustc_queries! {\n             desc { \"generating a postorder list of CrateNums\" }\n         }\n \n-        query upvars(_: DefId) -> Option<&'tcx [hir::Upvar]> {\n+        query upvars(_: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n             eval_always\n         }\n         query maybe_unused_trait_import(_: DefId) -> bool {"}, {"sha": "f8f869b98429522a99c5f9a03feb07e0cc317b9c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -54,6 +54,7 @@ use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableHasher, StableHasherResult,\n                                            StableVec};\n use arena::SyncDroplessArena;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::{Lrc, Lock, WorkerLocal};\n use std::any::Any;\n@@ -1065,7 +1066,7 @@ pub struct GlobalCtxt<'tcx> {\n     // Records the captured variables referenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n-    upvars: FxHashMap<DefId, Vec<hir::Upvar>>,\n+    upvars: FxHashMap<DefId, FxIndexMap<hir::HirId, hir::Upvar>>,\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n@@ -1297,11 +1298,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }).collect();\n                 (k, exports)\n             }).collect(),\n-            upvars: resolutions.upvars.into_iter().map(|(k, v)| {\n-                let vars: Vec<_> = v.into_iter().map(|e| {\n-                    e.map_id(|id| hir.node_to_hir_id(id))\n+            upvars: resolutions.upvars.into_iter().map(|(k, upvars)| {\n+                let upvars: FxIndexMap<_, _> = upvars.into_iter().map(|(var_id, upvar)| {\n+                    (hir.node_to_hir_id(var_id), upvar)\n                 }).collect();\n-                (hir.local_def_id(k), vars)\n+                (hir.local_def_id(k), upvars)\n             }).collect(),\n             maybe_unused_trait_imports:\n                 resolutions.maybe_unused_trait_imports\n@@ -3023,7 +3024,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.arena.alloc(middle::lang_items::collect(tcx))\n     };\n-    providers.upvars = |tcx, id| tcx.gcx.upvars.get(&id).map(|v| &v[..]);\n+    providers.upvars = |tcx, id| tcx.gcx.upvars.get(&id);\n     providers.maybe_unused_trait_import = |tcx, id| {\n         tcx.maybe_unused_trait_imports.contains(&id)\n     };"}, {"sha": "c0f582d5d132b7dbe6dd6973a882faf7de7bd2dd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -51,6 +51,7 @@ use syntax::symbol::{kw, sym, Symbol, LocalInternedString, InternedString};\n use syntax_pos::Span;\n \n use smallvec;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n@@ -808,7 +809,7 @@ pub struct UpvarBorrow<'tcx> {\n     pub region: ty::Region<'tcx>,\n }\n \n-pub type UpvarListMap = FxHashMap<DefId, Vec<UpvarId>>;\n+pub type UpvarListMap = FxHashMap<DefId, FxIndexMap<hir::HirId, UpvarId>>;\n pub type UpvarCaptureMap<'tcx> = FxHashMap<UpvarId, UpvarCapture<'tcx>>;\n \n #[derive(Copy, Clone)]"}, {"sha": "a8a6bca4fd434f8e7c838550b050bf8ac43988c7", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -585,16 +585,16 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                 if let Some(hir_id) = self.tcx().hir().as_local_hir_id(did) {\n                     p!(write(\"@{:?}\", self.tcx().hir().span_by_hir_id(hir_id)));\n                     let mut sep = \" \";\n-                    for (upvar, upvar_ty) in self.tcx().upvars(did)\n+                    for (&var_id, upvar_ty) in self.tcx().upvars(did)\n                         .as_ref()\n-                        .map_or(&[][..], |v| &v[..])\n                         .iter()\n+                        .flat_map(|v| v.keys())\n                         .zip(upvar_tys)\n                     {\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name_by_hir_id(upvar.var_id)),\n+                                    self.tcx().hir().name_by_hir_id(var_id)),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }\n@@ -628,16 +628,16 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                         p!(write(\"@{:?}\", self.tcx().hir().span_by_hir_id(hir_id)));\n                     }\n                     let mut sep = \" \";\n-                    for (upvar, upvar_ty) in self.tcx().upvars(did)\n+                    for (&var_id, upvar_ty) in self.tcx().upvars(did)\n                         .as_ref()\n-                        .map_or(&[][..], |v| &v[..])\n                         .iter()\n+                        .flat_map(|v| v.keys())\n                         .zip(upvar_tys)\n                     {\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name_by_hir_id(upvar.var_id)),\n+                                    self.tcx().hir().name_by_hir_id(var_id)),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }"}, {"sha": "e595b52876f4c831a08a18df15249b5cedc098de", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -45,7 +45,7 @@ use crate::util::profiling::ProfileCategory::*;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "cd792d31187bd865d4b4257482890d3b7d1ec760", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n ena = \"0.13\"\n+indexmap = \"1\"\n log = \"0.4\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n lazy_static = \"1\""}, {"sha": "cf73fe8cf85ceeac553ff1db97a0b43fb2f3077a", "filename": "src/librustc_data_structures/fx.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_data_structures%2Ffx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_data_structures%2Ffx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffx.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -1 +1,6 @@\n+use std::hash::BuildHasherDefault;\n+\n pub use rustc_hash::{FxHasher, FxHashMap, FxHashSet};\n+\n+pub type FxIndexMap<K, V> = indexmap::IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n+pub type FxIndexSet<V> = indexmap::IndexSet<V, BuildHasherDefault<FxHasher>>;"}, {"sha": "270d9520627646e23d919014943b01677ebd477b", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -323,6 +323,37 @@ impl<T: HashStable<CTX>, CTX> HashStable<CTX> for Vec<T> {\n     }\n }\n \n+impl<K, V, R, CTX> HashStable<CTX> for indexmap::IndexMap<K, V, R>\n+    where K: HashStable<CTX> + Eq + Hash,\n+          V: HashStable<CTX>,\n+          R: BuildHasher,\n+{\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          ctx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.len().hash_stable(ctx, hasher);\n+        for kv in self {\n+            kv.hash_stable(ctx, hasher);\n+        }\n+    }\n+}\n+\n+impl<K, R, CTX> HashStable<CTX> for indexmap::IndexSet<K, R>\n+    where K: HashStable<CTX> + Eq + Hash,\n+          R: BuildHasher,\n+{\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          ctx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.len().hash_stable(ctx, hasher);\n+        for key in self {\n+            key.hash_stable(ctx, hasher);\n+        }\n+    }\n+}\n+\n impl<A, CTX> HashStable<CTX> for SmallVec<[A; 1]> where A: HashStable<CTX> {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "31af20fdb77eb2ef88974e1252cd597a7f61c49f", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -348,9 +348,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     // `tcx.upvars(def_id)` returns an `Option`, which is `None` in case\n                     // the closure comes from another crate. But in that case we wouldn't\n                     // be borrowck'ing it, so we can just unwrap:\n-                    let upvar = self.infcx.tcx.upvars(def_id).unwrap()[field.index()];\n+                    let (&var_id, _) = self.infcx.tcx.upvars(def_id).unwrap()\n+                        .get_index(field.index()).unwrap();\n \n-                    self.infcx.tcx.hir().name_by_hir_id(upvar.var_id).to_string()\n+                    self.infcx.tcx.hir().name_by_hir_id(var_id).to_string()\n                 }\n                 _ => {\n                     // Might need a revision when the fields in trait RFC is implemented\n@@ -645,12 +646,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let hir::ExprKind::Closure(\n             .., args_span, _\n         ) = expr {\n-            for (v, place) in self.infcx.tcx.upvars(def_id)?.iter().zip(places) {\n+            for (upvar, place) in self.infcx.tcx.upvars(def_id)?.values().zip(places) {\n                 match place {\n                     Operand::Copy(place) |\n                     Operand::Move(place) if target_place == place => {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n-                        return Some((*args_span, v.span));\n+                        return Some((*args_span, upvar.span));\n                     },\n                     _ => {}\n                 }"}, {"sha": "4ae4d039d60340e53a00b625c302898c78c0edef", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -149,7 +149,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         .upvar_list\n         .get(&def_id)\n         .into_iter()\n-        .flatten()\n+        .flat_map(|v| v.values())\n         .map(|upvar_id| {\n             let var_hir_id = upvar_id.var_path.hir_id;\n             let var_node_id = tcx.hir().hir_to_node_id(var_hir_id);"}, {"sha": "123b46cb04820dec34d5b106896f6eaab4ac0c7a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -651,10 +651,9 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         .get(&fn_def_id)\n         .into_iter()\n         .flatten()\n-        .map(|upvar_id| {\n-            let var_hir_id = upvar_id.var_path.hir_id;\n+        .map(|(&var_hir_id, &upvar_id)| {\n             let var_node_id = tcx_hir.hir_to_node_id(var_hir_id);\n-            let capture = hir_tables.upvar_capture(*upvar_id);\n+            let capture = hir_tables.upvar_capture(upvar_id);\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue => false,\n                 ty::UpvarCapture::ByRef(..) => true,"}, {"sha": "dc9451fefb802f70f6f5f2cb04bdbff16f021845", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -515,7 +515,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let upvars = cx.tcx.upvars(def_id).iter()\n                 .flat_map(|upvars| upvars.iter())\n                 .zip(substs.upvar_tys(def_id, cx.tcx))\n-                .map(|(upvar, ty)| capture_upvar(cx, expr, upvar, ty))\n+                .map(|((&var_hir_id, upvar), ty)| capture_upvar(cx, expr, var_hir_id, upvar, ty))\n                 .collect();\n             ExprKind::Closure {\n                 closure_id: def_id,\n@@ -964,7 +964,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         Res::Upvar(var_hir_id, closure_node_id) => {\n             let closure_def_id = cx.tcx.hir().local_def_id(closure_node_id);\n             assert_eq!(cx.body_owner, closure_def_id);\n-            assert!(cx.upvar_indices.contains_key(&var_hir_id));\n+            assert!(cx.tables().upvar_list[&cx.body_owner].contains_key(&var_hir_id));\n \n             convert_var(cx, expr, var_hir_id)\n         }\n@@ -978,7 +978,8 @@ fn convert_var(\n     expr: &'tcx hir::Expr,\n     var_hir_id: hir::HirId,\n ) -> ExprKind<'tcx> {\n-    let upvar_index = cx.upvar_indices.get(&var_hir_id).cloned();\n+    let upvar_index = cx.tables().upvar_list.get(&cx.body_owner)\n+        .and_then(|upvars| upvars.get_full(&var_hir_id).map(|(i, _, _)| i));\n \n     debug!(\"convert_var({:?}): upvar_index={:?}, body_owner={:?}\",\n            var_hir_id, upvar_index, cx.body_owner);\n@@ -1186,26 +1187,31 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n \n fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    closure_expr: &'tcx hir::Expr,\n+                                   var_hir_id: hir::HirId,\n                                    upvar: &hir::Upvar,\n                                    upvar_ty: Ty<'tcx>)\n                                    -> ExprRef<'tcx> {\n     let upvar_id = ty::UpvarId {\n-        var_path: ty::UpvarPath { hir_id: upvar.var_id },\n+        var_path: ty::UpvarPath { hir_id: var_hir_id },\n         closure_expr_id: cx.tcx.hir().local_def_id_from_hir_id(closure_expr.hir_id).to_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n-    let var_ty = cx.tables().node_type(upvar.var_id);\n+    let var_ty = cx.tables().node_type(var_hir_id);\n     if upvar.has_parent {\n         let closure_def_id = upvar_id.closure_expr_id.to_def_id();\n         assert_eq!(cx.body_owner, cx.tcx.parent(closure_def_id).unwrap());\n     }\n-    assert_eq!(upvar.has_parent, cx.upvar_indices.contains_key(&upvar.var_id));\n+    assert_eq!(\n+        upvar.has_parent,\n+        cx.tables().upvar_list.get(&cx.body_owner)\n+            .map_or(false, |upvars| upvars.contains_key(&var_hir_id)),\n+    );\n     let captured_var = Expr {\n         temp_lifetime,\n         ty: var_ty,\n         span: closure_expr.span,\n-        kind: convert_var(cx, closure_expr, upvar.var_id),\n+        kind: convert_var(cx, closure_expr, var_hir_id),\n     };\n     match upvar_capture {\n         ty::UpvarCapture::ByValue => captured_var.to_ref(),"}, {"sha": "f4a23a90dee925b6a6b9ac126d8afa7989ffa587", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -5,7 +5,6 @@\n use crate::hair::*;\n use crate::hair::util::UserAnnotatedTyHelpers;\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::DefId;\n use rustc::hir::Node;\n@@ -50,9 +49,6 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n \n     /// See field with the same name on `mir::Body`.\n     control_flow_destroyed: Vec<(Span, String)>,\n-\n-    /// Reverse map, from upvar variable `HirId`s to their indices.\n-    upvar_indices: FxHashMap<hir::HirId, usize>,\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n@@ -83,14 +79,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Constants always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n-        // Compute reverse mapping, of uvpars to their indices.\n-        let mut upvar_indices = FxHashMap::default();\n-        if let Some(upvars) = tables.upvar_list.get(&src_def_id) {\n-            upvar_indices.extend(\n-                upvars.iter().enumerate().map(|(i, upvar_id)| (upvar_id.var_path.hir_id, i)),\n-            );\n-        }\n-\n         Cx {\n             tcx,\n             infcx,\n@@ -104,7 +92,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             body_owner_kind,\n             check_overflow,\n             control_flow_destroyed: Vec::new(),\n-            upvar_indices,\n         }\n     }\n "}, {"sha": "552628ee1ceb7947f172d33ee0db8acff1ee7c97", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -174,8 +174,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> ValidityVisitor<'rt, 'a, '\n                     if let Some(upvars) = tables.upvar_list.get(&def_id) {\n                         // Sometimes the index is beyond the number of upvars (seen\n                         // for a generator).\n-                        if let Some(upvar_id) = upvars.get(field) {\n-                            let var_hir_id = upvar_id.var_path.hir_id;\n+                        if let Some((&var_hir_id, _)) = upvars.get_index(field) {\n                             let var_node_id = self.ecx.tcx.hir().hir_to_node_id(var_hir_id);\n                             if let hir::Node::Binding(pat) = self.ecx.tcx.hir().get(var_node_id) {\n                                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {"}, {"sha": "8e3359c775288f77e237b77e6904ef8dbc0d66e9", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -12,6 +12,7 @@ test = false\n \n [dependencies]\n bitflags = \"1.0\"\n+indexmap = \"1\"\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "beb36989474629347a30b81b48cc2c578ac38cc6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -1669,7 +1669,6 @@ pub struct Resolver<'a> {\n     label_res_map: NodeMap<NodeId>,\n \n     pub upvars: UpvarMap,\n-    upvars_seen: NodeMap<NodeSet>,\n     pub export_map: ExportMap<NodeId>,\n     pub trait_map: TraitMap,\n \n@@ -2033,7 +2032,6 @@ impl<'a> Resolver<'a> {\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n             upvars: Default::default(),\n-            upvars_seen: Default::default(),\n             export_map: FxHashMap::default(),\n             trait_map: Default::default(),\n             module_map,\n@@ -4055,26 +4053,18 @@ impl<'a> Resolver<'a> {\n                                 Res::Upvar(..) => true,\n                                 _ => false,\n                             };\n-\n-                            let seen = self.upvars_seen\n-                                           .entry(function_id)\n-                                           .or_default();\n-                            if seen.contains(&var_id) {\n-                                res = Res::Upvar(var_id, function_id);\n-                                continue;\n-                            }\n-                            let vec = self.upvars\n-                                          .entry(function_id)\n-                                          .or_default();\n                             res = Res::Upvar(var_id, function_id);\n \n-                            if record_used {\n-                                vec.push(Upvar {\n-                                    var_id,\n-                                    has_parent,\n-                                    span,\n-                                });\n-                                seen.insert(var_id);\n+                            match self.upvars.entry(function_id).or_default().entry(var_id) {\n+                                indexmap::map::Entry::Occupied(_) => continue,\n+                                indexmap::map::Entry::Vacant(entry) => {\n+                                    if record_used {\n+                                        entry.insert(Upvar {\n+                                            has_parent,\n+                                            span,\n+                                        });\n+                                    }\n+                                }\n                             }\n                         }\n                         ItemRibKind | FnItemRibKind | AssocItemRibKind => {"}, {"sha": "8ceca20eb07ca1e3f1ee38e3ce4f7718c334707a", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -41,6 +41,7 @@ use rustc::hir::def_id::LocalDefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::UpvarRegion;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n+use rustc_data_structures::fx::FxIndexMap;\n use syntax::ast;\n use syntax_pos::Span;\n \n@@ -122,18 +123,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if let Some(upvars) = self.tcx.upvars(closure_def_id) {\n-            let mut upvar_list: Vec<ty::UpvarId> = Vec::with_capacity(upvars.len());\n-            for upvar in upvars.iter() {\n+            let mut upvar_list: FxIndexMap<hir::HirId, ty::UpvarId> =\n+                FxIndexMap::with_capacity_and_hasher(upvars.len(), Default::default());\n+            for (&var_hir_id, _) in upvars.iter() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath {\n-                        hir_id: upvar.var_id,\n+                        hir_id: var_hir_id,\n                     },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n                 // Adding the upvar Id to the list of Upvars, which will be added\n                 // to the map for the closure at the end of the for loop.\n-                upvar_list.push(upvar_id);\n+                upvar_list.insert(var_hir_id, upvar_id);\n \n                 let capture_kind = match capture_clause {\n                     hir::CaptureByValue => ty::UpvarCapture::ByValue,\n@@ -249,17 +251,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         tcx.upvars(closure_def_id).iter().flat_map(|upvars| {\n             upvars\n                 .iter()\n-                .map(|upvar| {\n-                    let upvar_ty = self.node_ty(upvar.var_id);\n+                .map(|(&var_hir_id, _)| {\n+                    let upvar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n-                        var_path: ty::UpvarPath { hir_id: upvar.var_id },\n+                        var_path: ty::UpvarPath { hir_id: var_hir_id },\n                         closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n \n                     debug!(\n                         \"var_id={:?} upvar_ty={:?} capture={:?}\",\n-                        upvar.var_id, upvar_ty, capture\n+                        var_hir_id, upvar_ty, capture\n                     );\n \n                     match capture {"}, {"sha": "a535f776dfe602c336e9b7a3b85792a637821795", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -54,7 +54,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n         wbcx.visit_body(body);\n         wbcx.visit_upvar_capture_map();\n-        wbcx.visit_upvar_list_map();\n         wbcx.visit_closures();\n         wbcx.visit_liberated_fn_sigs();\n         wbcx.visit_fru_field_types();\n@@ -74,6 +73,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n         wbcx.tables.used_trait_imports = used_trait_imports;\n \n+        wbcx.tables.upvar_list = mem::replace(\n+            &mut self.tables.borrow_mut().upvar_list,\n+            Default::default(),\n+        );\n+\n         wbcx.tables.tainted_by_errors = self.is_tainted_by_errors();\n \n         debug!(\n@@ -343,21 +347,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Runs through the function context's upvar list map and adds the same to\n-    /// the TypeckTables. upvarlist is a hashmap of the list of upvars referred\n-    /// to in a closure..\n-    fn visit_upvar_list_map(&mut self) {\n-        for (closure_def_id, upvar_list) in self.fcx.tables.borrow().upvar_list.iter() {\n-            debug!(\n-                \"UpvarIDs captured by closure {:?} are: {:?}\",\n-                closure_def_id, upvar_list\n-            );\n-            self.tables\n-                .upvar_list\n-                .insert(*closure_def_id, upvar_list.to_vec());\n-        }\n-    }\n-\n     fn visit_closures(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);"}, {"sha": "fa31a68a75b720b0e320f4320e6465316b645661", "filename": "src/libserialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibserialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibserialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2FCargo.toml?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -10,4 +10,5 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n+indexmap = \"1\"\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "80aeecb84d72bb8720d74a89c00a8c06b0036f30", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -217,6 +217,75 @@ impl<T, S> Decodable for HashSet<T, S>\n     }\n }\n \n+impl<K, V, S> Encodable for indexmap::IndexMap<K, V, S>\n+    where K: Encodable + Hash + Eq,\n+          V: Encodable,\n+          S: BuildHasher,\n+{\n+    fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n+        e.emit_map(self.len(), |e| {\n+            let mut i = 0;\n+            for (key, val) in self {\n+                e.emit_map_elt_key(i, |e| key.encode(e))?;\n+                e.emit_map_elt_val(i, |e| val.encode(e))?;\n+                i += 1;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<K, V, S> Decodable for indexmap::IndexMap<K, V, S>\n+    where K: Decodable + Hash + Eq,\n+          V: Decodable,\n+          S: BuildHasher + Default,\n+{\n+    fn decode<D: Decoder>(d: &mut D) -> Result<indexmap::IndexMap<K, V, S>, D::Error> {\n+        d.read_map(|d, len| {\n+            let state = Default::default();\n+            let mut map = indexmap::IndexMap::with_capacity_and_hasher(len, state);\n+            for i in 0..len {\n+                let key = d.read_map_elt_key(i, |d| Decodable::decode(d))?;\n+                let val = d.read_map_elt_val(i, |d| Decodable::decode(d))?;\n+                map.insert(key, val);\n+            }\n+            Ok(map)\n+        })\n+    }\n+}\n+\n+impl<T, S> Encodable for indexmap::IndexSet<T, S>\n+    where T: Encodable + Hash + Eq,\n+          S: BuildHasher,\n+{\n+    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n+        s.emit_seq(self.len(), |s| {\n+            let mut i = 0;\n+            for e in self {\n+                s.emit_seq_elt(i, |s| e.encode(s))?;\n+                i += 1;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<T, S> Decodable for indexmap::IndexSet<T, S>\n+    where T: Decodable + Hash + Eq,\n+          S: BuildHasher + Default,\n+{\n+    fn decode<D: Decoder>(d: &mut D) -> Result<indexmap::IndexSet<T, S>, D::Error> {\n+        d.read_seq(|d, len| {\n+            let state = Default::default();\n+            let mut set = indexmap::IndexSet::with_capacity_and_hasher(len, state);\n+            for i in 0..len {\n+                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d))?);\n+            }\n+            Ok(set)\n+        })\n+    }\n+}\n+\n impl<T: Encodable> Encodable for Rc<[T]> {\n     fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n         s.emit_seq(self.len(), |s| {"}, {"sha": "7922cb14eeca8c12c980d30676fccbd1661a8157", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961fe5479f3e981aafb4f8f957faea52ec295365/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=961fe5479f3e981aafb4f8f957faea52ec295365", "patch": "@@ -92,6 +92,7 @@ const WHITELIST: &[Crate<'_>] = &[\n     Crate(\"fuchsia-zircon-sys\"),\n     Crate(\"getopts\"),\n     Crate(\"humantime\"),\n+    Crate(\"indexmap\"),\n     Crate(\"itertools\"),\n     Crate(\"jobserver\"),\n     Crate(\"kernel32-sys\"),"}]}