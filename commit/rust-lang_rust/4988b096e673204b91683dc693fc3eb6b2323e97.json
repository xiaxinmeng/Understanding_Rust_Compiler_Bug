{"sha": "4988b096e673204b91683dc693fc3eb6b2323e97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ODhiMDk2ZTY3MzIwNGI5MTY4M2RjNjkzZmMzZWI2YjIzMjNlOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-05T23:00:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-05T23:00:36Z"}, "message": "Auto merge of #56549 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #51753 (Document `From` implementations)\n - #55563 (Improve no result found sentence in doc search)\n - #55987 (Add Weak.ptr_eq)\n - #56119 (Utilize `?` instead of `return None`.)\n - #56372 (Refer to the second borrow as the \"second borrow\" in E0501.rs)\n - #56388 (More MIR borrow check cleanup)\n - #56424 (Mention raw-ident syntax)\n - #56452 (Remove redundant clones)\n - #56456 (Handle existential types in dead code analysis)\n - #56466 (data_structures: remove tuple_slice)\n - #56476 (Fix invalid line number match)\n - #56497 (cleanup: remove static lifetimes from consts in libstd)\n - #56498 (Fix line numbers display)\n - #56523 (Added a bare-bones eslint config (removing jslint))\n - #56538 (Use inner iterator may_have_side_effect for Cloned)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c63388f353229ae491e3d9b2bc04758e70a90b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c63388f353229ae491e3d9b2bc04758e70a90b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4988b096e673204b91683dc693fc3eb6b2323e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4988b096e673204b91683dc693fc3eb6b2323e97", "html_url": "https://github.com/rust-lang/rust/commit/4988b096e673204b91683dc693fc3eb6b2323e97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4988b096e673204b91683dc693fc3eb6b2323e97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14997d56a550f4aa99fe737593cd2758227afc56", "url": "https://api.github.com/repos/rust-lang/rust/commits/14997d56a550f4aa99fe737593cd2758227afc56", "html_url": "https://github.com/rust-lang/rust/commit/14997d56a550f4aa99fe737593cd2758227afc56"}, {"sha": "f8ee5ab8035ffab91a5b57e2f0d4822e4e7a64b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ee5ab8035ffab91a5b57e2f0d4822e4e7a64b9", "html_url": "https://github.com/rust-lang/rust/commit/f8ee5ab8035ffab91a5b57e2f0d4822e4e7a64b9"}], "stats": {"total": 936, "additions": 518, "deletions": 418}, "files": [{"sha": "c0a947e701108fe587a89cf43abf78598096a7a9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -1187,8 +1187,9 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Weak<U>> for Weak<T> {}\n \n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating any memory.\n-    /// Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n+    /// Calling [`upgrade`] on the return value always gives [`None`].\n     ///\n+    /// [`upgrade`]: #method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n@@ -1260,6 +1261,52 @@ impl<T: ?Sized> Weak<T> {\n             Some(unsafe { self.ptr.as_ref() })\n         }\n     }\n+\n+    /// Returns true if the two `Weak`s point to the same value (not just values\n+    /// that compare as equal).\n+    ///\n+    /// # Notes\n+    ///\n+    /// Since this compares pointers it means that `Weak::new()` will equal each\n+    /// other, even though they don't point to any value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::rc::{Rc, Weak};\n+    ///\n+    /// let first_rc = Rc::new(5);\n+    /// let first = Rc::downgrade(&first_rc);\n+    /// let second = Rc::downgrade(&first_rc);\n+    ///\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Rc::new(5);\n+    /// let third = Rc::downgrade(&third_rc);\n+    ///\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    ///\n+    /// Comparing `Weak::new`.\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::rc::{Rc, Weak};\n+    ///\n+    /// let first = Weak::new();\n+    /// let second = Weak::new();\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Rc::new(());\n+    /// let third = Rc::downgrade(&third_rc);\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        this.ptr.as_ptr() == other.ptr.as_ptr()\n+    }\n }\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]"}, {"sha": "0a397f79103dbbf5826f61b8a54322e483485fc8", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -1130,6 +1130,53 @@ impl<T: ?Sized> Weak<T> {\n             Some(unsafe { self.ptr.as_ref() })\n         }\n     }\n+\n+    /// Returns true if the two `Weak`s point to the same value (not just values\n+    /// that compare as equal).\n+    ///\n+    /// # Notes\n+    ///\n+    /// Since this compares pointers it means that `Weak::new()` will equal each\n+    /// other, even though they don't point to any value.\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::sync::{Arc, Weak};\n+    ///\n+    /// let first_rc = Arc::new(5);\n+    /// let first = Arc::downgrade(&first_rc);\n+    /// let second = Arc::downgrade(&first_rc);\n+    ///\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Arc::new(5);\n+    /// let third = Arc::downgrade(&third_rc);\n+    ///\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    ///\n+    /// Comparing `Weak::new`.\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::sync::{Arc, Weak};\n+    ///\n+    /// let first = Weak::new();\n+    /// let second = Weak::new();\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Arc::new(());\n+    /// let third = Arc::downgrade(&third_rc);\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        this.ptr.as_ptr() == other.ptr.as_ptr()\n+    }\n }\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]"}, {"sha": "de7ab8843daed266ac2c1dd4e7a110e3dcca1d89", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -602,7 +602,9 @@ unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n     }\n \n     #[inline]\n-    fn may_have_side_effect() -> bool { false }\n+    fn may_have_side_effect() -> bool {\n+        I::may_have_side_effect()\n+    }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]"}, {"sha": "5ba0e949483ae91593a434d19a893c4f9d9f4d2f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -238,6 +238,10 @@ macro_rules! debug_assert_ne {\n /// with converting downstream errors.\n ///\n /// The `?` operator was added to replace `try!` and should be used instead.\n+/// Furthermore, `try` is a reserved word in Rust 2018, so if you must use\n+/// it, you will need to use the [raw-identifier syntax][ris]: `r#try`.\n+///\n+/// [ris]: https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html\n ///\n /// `try!` matches the given [`Result`]. In case of the `Ok` variant, the\n /// expression has the value of the wrapped value."}, {"sha": "6c953d1b9a0acefb716c3a148a2817956ffe24b9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -536,10 +536,9 @@ fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\n     where I: DoubleEndedIterator<Item = &'a u8>,\n {\n     // Decode UTF-8\n-    let w = match bytes.next_back() {\n-        None => return None,\n-        Some(&next_byte) if next_byte < 128 => return Some(next_byte as u32),\n-        Some(&back_byte) => back_byte,\n+    let w = match *bytes.next_back()? {\n+        next_byte if next_byte < 128 => return Some(next_byte as u32),\n+        back_byte => back_byte,\n     };\n \n     // Multibyte case follows"}, {"sha": "19be1a07c5baa83667514499ce8d3533c4a4f65d", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -1249,6 +1249,23 @@ fn test_cloned() {\n     assert_eq!(it.next_back(), None);\n }\n \n+#[test]\n+fn test_cloned_side_effects() {\n+    let mut count = 0;\n+    {\n+        let iter = [1, 2, 3]\n+            .iter()\n+            .map(|x| {\n+                count += 1;\n+                x\n+            })\n+            .cloned()\n+            .zip(&[1]);\n+        for _ in iter {}\n+    }\n+    assert_eq!(count, 2);\n+}\n+\n #[test]\n fn test_double_ended_map() {\n     let xs = [1, 2, 3, 4, 5, 6];"}, {"sha": "bb7a6a6ee7b7245d3bceb917ae5dddfdde0d9063", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -166,6 +166,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     hir::ItemKind::Fn(..)\n                     | hir::ItemKind::Ty(..)\n                     | hir::ItemKind::Static(..)\n+                    | hir::ItemKind::Existential(..)\n                     | hir::ItemKind::Const(..) => {\n                         intravisit::walk_item(self, &item);\n                     }"}, {"sha": "3c2551f5cd436850cea49f8c99e9a1722cac4885", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -592,10 +592,7 @@ impl<'tcx> ScopeTree {\n                 return Some(scope.item_local_id());\n             }\n \n-            match self.opt_encl_scope(scope) {\n-                None => return None,\n-                Some(parent) => scope = parent,\n-            }\n+            scope = self.opt_encl_scope(scope)?;\n         }\n     }\n "}, {"sha": "6b0a8a0af2b9dcfb7a54f5993d0344e518a46441", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -67,14 +67,13 @@ impl<'a> Iterator for Iter<'a> {\n \n     fn next(&mut self) -> Option<(&'a Path, PathKind)> {\n         loop {\n-            match self.iter.next() {\n-                Some(&(kind, ref p)) if self.kind == PathKind::All ||\n-                                        kind == PathKind::All ||\n-                                        kind == self.kind => {\n+            match *self.iter.next()? {\n+                (kind, ref p) if self.kind == PathKind::All ||\n+                                  kind == PathKind::All ||\n+                                  kind == self.kind => {\n                     return Some((p, kind))\n                 }\n-                Some(..) => {}\n-                None => return None,\n+                _ => {}\n             }\n         }\n     }"}, {"sha": "e47e95afb16434690860158a6abf674e56a296f9", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -615,7 +615,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                     let new_loan_str = &new_loan.kind.to_user_str();\n                     self.bccx.cannot_reborrow_already_uniquely_borrowed(\n                         new_loan.span, \"closure\", &nl, &new_loan_msg, new_loan_str,\n-                        old_loan.span, &old_loan_msg, previous_end_span, Origin::Ast)\n+                        old_loan.span, &old_loan_msg, previous_end_span, \"\", Origin::Ast)\n                 }\n                 (..) =>\n                     self.bccx.cannot_reborrow_already_borrowed("}, {"sha": "8e0ecb70c689637b34181e2531de90e5eaa47d55", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -81,7 +81,6 @@ pub mod sync;\n pub mod tiny_list;\n pub mod thin_vec;\n pub mod transitive_relation;\n-pub mod tuple_slice;\n pub use ena::unify;\n pub mod vec_linked_list;\n pub mod work_queue;"}, {"sha": "b7c71dd366469eceaac01605efdafd1bfe33935e", "filename": "src/librustc_data_structures/tuple_slice.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/14997d56a550f4aa99fe737593cd2758227afc56/src%2Flibrustc_data_structures%2Ftuple_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14997d56a550f4aa99fe737593cd2758227afc56/src%2Flibrustc_data_structures%2Ftuple_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftuple_slice.rs?ref=14997d56a550f4aa99fe737593cd2758227afc56", "patch": "@@ -1,70 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::slice;\n-\n-/// Allows to view uniform tuples as slices\n-pub trait TupleSlice<T> {\n-    fn as_slice(&self) -> &[T];\n-    fn as_mut_slice(&mut self) -> &mut [T];\n-}\n-\n-macro_rules! impl_tuple_slice {\n-    ($tuple_type:ty, $size:expr) => {\n-        impl<T> TupleSlice<T> for $tuple_type {\n-            fn as_slice(&self) -> &[T] {\n-                unsafe {\n-                    let ptr = &self.0 as *const T;\n-                    slice::from_raw_parts(ptr, $size)\n-                }\n-            }\n-\n-            fn as_mut_slice(&mut self) -> &mut [T] {\n-                unsafe {\n-                    let ptr = &mut self.0 as *mut T;\n-                    slice::from_raw_parts_mut(ptr, $size)\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl_tuple_slice!((T, T), 2);\n-impl_tuple_slice!((T, T, T), 3);\n-impl_tuple_slice!((T, T, T, T), 4);\n-impl_tuple_slice!((T, T, T, T, T), 5);\n-impl_tuple_slice!((T, T, T, T, T, T), 6);\n-impl_tuple_slice!((T, T, T, T, T, T, T), 7);\n-impl_tuple_slice!((T, T, T, T, T, T, T, T), 8);\n-\n-#[test]\n-fn test_sliced_tuples() {\n-    let t2 = (100, 101);\n-    assert_eq!(t2.as_slice(), &[100, 101]);\n-\n-    let t3 = (102, 103, 104);\n-    assert_eq!(t3.as_slice(), &[102, 103, 104]);\n-\n-    let t4 = (105, 106, 107, 108);\n-    assert_eq!(t4.as_slice(), &[105, 106, 107, 108]);\n-\n-    let t5 = (109, 110, 111, 112, 113);\n-    assert_eq!(t5.as_slice(), &[109, 110, 111, 112, 113]);\n-\n-    let t6 = (114, 115, 116, 117, 118, 119);\n-    assert_eq!(t6.as_slice(), &[114, 115, 116, 117, 118, 119]);\n-\n-    let t7 = (120, 121, 122, 123, 124, 125, 126);\n-    assert_eq!(t7.as_slice(), &[120, 121, 122, 123, 124, 125, 126]);\n-\n-    let t8 = (127, 128, 129, 130, 131, 132, 133, 134);\n-    assert_eq!(t8.as_slice(), &[127, 128, 129, 130, 131, 132, 133, 134]);\n-\n-}"}, {"sha": "ddd28eb5393ec273c589564c3195554e904a79b9", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -29,7 +29,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n         return None\n     }\n \n-    let saved_files: Option<Vec<_>> =\n+    let saved_files =\n         files.iter()\n              .map(|&(kind, ref path)| {\n                  let extension = match kind {\n@@ -51,11 +51,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n                      }\n                  }\n              })\n-             .collect();\n-    let saved_files = match saved_files {\n-        None => return None,\n-        Some(v) => v,\n-    };\n+             .collect::<Option<Vec<_>>>()?;\n \n     let work_product = WorkProduct {\n         cgu_name: cgu_name.to_string(),"}, {"sha": "947c32df0f6a3eb5d74726156a1937f2fa2ce5b3", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 56, "deletions": 64, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::traversal;\n use rustc::mir::visit::{\n     PlaceContext, Visitor, NonUseContext, MutatingUseContext, NonMutatingUseContext\n };\n-use rustc::mir::{self, Location, Mir, Place, Local};\n+use rustc::mir::{self, Location, Mir, Local};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -41,10 +41,6 @@ crate struct BorrowSet<'tcx> {\n     /// only need to store one borrow index\n     crate activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n \n-    /// Every borrow has a region; this maps each such regions back to\n-    /// its borrow-indexes.\n-    crate region_map: FxHashMap<RegionVid, FxHashSet<BorrowIndex>>,\n-\n     /// Map from local to all the borrows on that local\n     crate local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n \n@@ -149,7 +145,6 @@ impl<'tcx> BorrowSet<'tcx> {\n             idx_vec: IndexVec::new(),\n             location_map: Default::default(),\n             activation_map: Default::default(),\n-            region_map: Default::default(),\n             local_map: Default::default(),\n             pending_activations: Default::default(),\n             locals_state_at_exit:\n@@ -164,7 +159,6 @@ impl<'tcx> BorrowSet<'tcx> {\n             borrows: visitor.idx_vec,\n             location_map: visitor.location_map,\n             activation_map: visitor.activation_map,\n-            region_map: visitor.region_map,\n             local_map: visitor.local_map,\n             locals_state_at_exit: visitor.locals_state_at_exit,\n         }\n@@ -184,7 +178,6 @@ struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,\n     activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n-    region_map: FxHashMap<RegionVid, FxHashSet<BorrowIndex>>,\n     local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n \n     /// When we encounter a 2-phase borrow statement, it will always\n@@ -229,7 +222,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n \n             self.insert_as_pending_if_two_phase(location, &assigned_place, kind, idx);\n \n-            self.region_map.entry(region).or_default().insert(idx);\n             if let Some(local) = borrowed_place.root_local() {\n                 self.local_map.entry(local).or_default().insert(idx);\n             }\n@@ -238,68 +230,68 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n         self.super_assign(block, assigned_place, rvalue, location)\n     }\n \n-    fn visit_place(\n+    fn visit_local(\n         &mut self,\n-        place: &mir::Place<'tcx>,\n+        temp: &Local,\n         context: PlaceContext<'tcx>,\n         location: Location,\n     ) {\n-        self.super_place(place, context, location);\n-\n-        // We found a use of some temporary TEMP...\n-        if let Place::Local(temp) = place {\n-            // ... check whether we (earlier) saw a 2-phase borrow like\n-            //\n-            //     TMP = &mut place\n-            if let Some(&borrow_index) = self.pending_activations.get(temp) {\n-                let borrow_data = &mut self.idx_vec[borrow_index];\n-\n-                // Watch out: the use of TMP in the borrow itself\n-                // doesn't count as an activation. =)\n-                if borrow_data.reserve_location == location &&\n-                    context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n-                {\n-                    return;\n-                }\n+        if !context.is_use() {\n+            return;\n+        }\n \n-                if let TwoPhaseActivation::ActivatedAt(other_location) =\n-                        borrow_data.activation_location {\n-                    span_bug!(\n-                        self.mir.source_info(location).span,\n-                        \"found two uses for 2-phase borrow temporary {:?}: \\\n-                         {:?} and {:?}\",\n-                        temp,\n-                        location,\n-                        other_location,\n-                    );\n-                }\n+        // We found a use of some temporary TMP\n+        // check whether we (earlier) saw a 2-phase borrow like\n+        //\n+        //     TMP = &mut place\n+        if let Some(&borrow_index) = self.pending_activations.get(temp) {\n+            let borrow_data = &mut self.idx_vec[borrow_index];\n \n-                // Otherwise, this is the unique later use\n-                // that we expect.\n-                borrow_data.activation_location = match context {\n-                    // The use of TMP in a shared borrow does not\n-                    // count as an actual activation.\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n-                        TwoPhaseActivation::NotActivated,\n-                    _ => {\n-                        // Double check: This borrow is indeed a two-phase borrow (that is,\n-                        // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n-                        // we've not found any other activations (checked above).\n-                        assert_eq!(\n-                            borrow_data.activation_location,\n-                            TwoPhaseActivation::NotActivated,\n-                            \"never found an activation for this borrow!\",\n-                        );\n-\n-                        self.activation_map\n-                            .entry(location)\n-                            .or_default()\n-                            .push(borrow_index);\n-                        TwoPhaseActivation::ActivatedAt(location)\n-                    }\n-                };\n+            // Watch out: the use of TMP in the borrow itself\n+            // doesn't count as an activation. =)\n+            if borrow_data.reserve_location == location &&\n+                context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n+            {\n+                return;\n+            }\n+\n+            if let TwoPhaseActivation::ActivatedAt(other_location) =\n+                    borrow_data.activation_location {\n+                span_bug!(\n+                    self.mir.source_info(location).span,\n+                    \"found two uses for 2-phase borrow temporary {:?}: \\\n+                     {:?} and {:?}\",\n+                    temp,\n+                    location,\n+                    other_location,\n+                );\n             }\n+\n+            // Otherwise, this is the unique later use\n+            // that we expect.\n+            borrow_data.activation_location = match context {\n+                // The use of TMP in a shared borrow does not\n+                // count as an actual activation.\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n+                    TwoPhaseActivation::NotActivated,\n+                _ => {\n+                    // Double check: This borrow is indeed a two-phase borrow (that is,\n+                    // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n+                    // we've not found any other activations (checked above).\n+                    assert_eq!(\n+                        borrow_data.activation_location,\n+                        TwoPhaseActivation::NotActivated,\n+                        \"never found an activation for this borrow!\",\n+                    );\n+\n+                    self.activation_map\n+                        .entry(location)\n+                        .or_default()\n+                        .push(borrow_index);\n+                    TwoPhaseActivation::ActivatedAt(location)\n+                }\n+            };\n         }\n     }\n "}, {"sha": "ba26ed36c20f4a6f5749592f22c0c403395cbdeb", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -344,6 +344,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let first_borrow_desc;\n \n+        let explanation = self.explain_why_borrow_contains_point(context, issued_borrow, None);\n+        let second_borrow_desc = if explanation.is_explained() {\n+            \"second \"\n+        } else {\n+            \"\"\n+        };\n+\n         // FIXME: supply non-\"\" `opt_via` when appropriate\n         let mut err = match (\n             gen_borrow_kind,\n@@ -454,6 +461,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     issued_span,\n                     \"\",\n                     None,\n+                    second_borrow_desc,\n                     Origin::Mir,\n                 )\n             }\n@@ -469,6 +477,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     issued_span,\n                     \"\",\n                     None,\n+                    second_borrow_desc,\n                     Origin::Mir,\n                 )\n             }\n@@ -513,7 +522,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             );\n         }\n \n-        self.explain_why_borrow_contains_point(context, issued_borrow, None)\n+        explanation\n             .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc);\n \n         err.buffer(&mut self.errors_buffer);"}, {"sha": "477b78926084e86d0efa701f2b66ba47519bbca3", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -52,6 +52,12 @@ pub(in borrow_check) enum LaterUseKind {\n }\n \n impl BorrowExplanation {\n+    pub(in borrow_check) fn is_explained(&self) -> bool {\n+        match self {\n+            BorrowExplanation::Unexplained => false,\n+            _ => true,\n+        }\n+    }\n     pub(in borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,"}, {"sha": "7d583b4f541915589e48cce72a029bc618bf58dc", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -87,10 +87,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n impl<'cx, 'gcx, 'tcx> Iterator for Prefixes<'cx, 'gcx, 'tcx> {\n     type Item = &'cx Place<'tcx>;\n     fn next(&mut self) -> Option<Self::Item> {\n-        let mut cursor = match self.next {\n-            None => return None,\n-            Some(place) => place,\n-        };\n+        let mut cursor = self.next?;\n \n         // Post-processing `place`: Enqueue any remaining\n         // work. Also, `place` may not be a prefix itself, but"}, {"sha": "3a9e4fc9e4ab949126bc2bfca33e69866d61cc21", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 // re-consider the current implementations of the\n                 // propagate_call_return method.\n \n-                if let mir::Rvalue::Ref(region, _, ref place) = **rhs {\n+                if let mir::Rvalue::Ref(_, _, ref place) = **rhs {\n                     if place.ignore_borrow(\n                         self.tcx,\n                         self.mir,\n@@ -258,13 +258,6 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });\n \n-                    assert!(self.borrow_set.region_map\n-                        .get(&region.to_region_vid())\n-                        .unwrap_or_else(|| {\n-                            panic!(\"could not find BorrowIndexs for RegionVid {:?}\", region);\n-                        })\n-                        .contains(&index)\n-                    );\n                     sets.gen(*index);\n \n                     // Issue #46746: Two-phase borrows handles"}, {"sha": "528942df29fee5da3fc824147aa72e837551a97f", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -585,7 +585,7 @@ fn merge_codegen_units<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     // smallest into each other) we're sure to start off with a deterministic\n     // order (sorted by name). This'll mean that if two cgus have the same size\n     // the stable sort below will keep everything nice and deterministic.\n-    codegen_units.sort_by_key(|cgu| cgu.name().clone());\n+    codegen_units.sort_by_key(|cgu| *cgu.name());\n \n     // Merge the two smallest codegen units until the target size is reached.\n     while codegen_units.len() > target_cgu_count {\n@@ -985,7 +985,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n                 let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);\n-                cgus.as_mut_slice().sort_by_cached_key(|&(ref name, _)| name.clone());\n+                cgus.sort_by_key(|(name, _)| *name);\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n                     output.push_str(\" \");"}, {"sha": "6d7fc404edbb12d7c41da7f326ef576f13a8f916", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -10,17 +10,25 @@\n \n //! This module provides two passes:\n //!\n-//!   - [CleanAscribeUserType], that replaces all\n-//!     [StatementKind::AscribeUserType] statements with [StatementKind::Nop].\n-//!   - [CleanFakeReadsAndBorrows], that replaces all [FakeRead] statements and\n-//!     borrows that are read by [FakeReadCause::ForMatchGuard] fake reads with\n-//!     [StatementKind::Nop].\n+//!   - [`CleanAscribeUserType`], that replaces all [`AscribeUserType`]\n+//!     statements with [`Nop`].\n+//!   - [`CleanFakeReadsAndBorrows`], that replaces all [`FakeRead`] statements\n+//!     and borrows that are read by [`ForMatchGuard`] fake reads with [`Nop`].\n //!\n-//! The [CleanFakeReadsAndBorrows] \"pass\" is actually implemented as two\n+//! The `CleanFakeReadsAndBorrows` \"pass\" is actually implemented as two\n //! traversals (aka visits) of the input MIR. The first traversal,\n-//! [DeleteAndRecordFakeReads], deletes the fake reads and finds the temporaries\n-//! read by [ForMatchGuard] reads, and [DeleteFakeBorrows] deletes the\n-//! initialization of those temporaries.\n+//! [`DeleteAndRecordFakeReads`], deletes the fake reads and finds the\n+//! temporaries read by [`ForMatchGuard`] reads, and [`DeleteFakeBorrows`]\n+//! deletes the initialization of those temporaries.\n+//!\n+//! [`CleanAscribeUserType`]: cleanup_post_borrowck::CleanAscribeUserType\n+//! [`CleanFakeReadsAndBorrows`]: cleanup_post_borrowck::CleanFakeReadsAndBorrows\n+//! [`DeleteAndRecordFakeReads`]: cleanup_post_borrowck::DeleteAndRecordFakeReads\n+//! [`DeleteFakeBorrows`]: cleanup_post_borrowck::DeleteFakeBorrows\n+//! [`AscribeUserType`]: rustc::mir::StatementKind::AscribeUserType\n+//! [`Nop`]: rustc::mir::StatementKind::Nop\n+//! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n+//! [`ForMatchGuard`]: rustc::mir::FakeReadCause::ForMatchGuard\n \n use rustc_data_structures::fx::FxHashSet;\n "}, {"sha": "8566f845f23e3b922e096f9ff1e73cfb17f0c1c4", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -261,6 +261,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         old_loan_span: Span,\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n+        second_borrow_desc: &str,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n@@ -274,7 +275,10 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n             kind_new,\n             OGN = o\n         );\n-        err.span_label(new_loan_span, format!(\"borrow occurs here{}\", opt_via));\n+        err.span_label(\n+            new_loan_span,\n+            format!(\"{}borrow occurs here{}\", second_borrow_desc, opt_via),\n+        );\n         err.span_label(\n             old_loan_span,\n             format!(\"{} construction occurs here{}\", container_name, old_opt_via),"}, {"sha": "da4cd73923ede1914d3cfeb96ef4903c828eca8f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         // This particular use tree\n                         &tree, id, &prefix, true,\n                         // The whole `use` item\n-                        parent_scope.clone(), item, ty::Visibility::Invisible, root_span,\n+                        parent_scope, item, ty::Visibility::Invisible, root_span,\n                     );\n                 }\n             }"}, {"sha": "1d903476f16f98467ca51b7055357ee3f451f46f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -3948,10 +3948,7 @@ pub fn path_to_def_local(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n     let mut path_it = path.iter().peekable();\n \n     loop {\n-        let segment = match path_it.next() {\n-            Some(segment) => segment,\n-            None => return None,\n-        };\n+        let segment = path_it.next()?;\n \n         for item_id in mem::replace(&mut items, HirVec::new()).iter() {\n             let item = tcx.hir.expect_item(item_id.id);\n@@ -3986,10 +3983,7 @@ pub fn path_to_def(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n         let mut path_it = path.iter().skip(1).peekable();\n \n         loop {\n-            let segment = match path_it.next() {\n-                Some(segment) => segment,\n-                None => return None,\n-            };\n+            let segment = path_it.next()?;\n \n             for item in mem::replace(&mut items, Lrc::new(vec![])).iter() {\n                 if item.ident.name == *segment {"}, {"sha": "1194df20ad6f5683147a9c3844be74b2b0c3d74d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -2220,13 +2220,13 @@ impl<'a> Item<'a> {\n                 return None;\n             }\n         } else {\n-            let (krate, src_root) = match cache.extern_locations.get(&self.item.def_id.krate) {\n-                Some(&(ref name, ref src, Local)) => (name, src),\n-                Some(&(ref name, ref src, Remote(ref s))) => {\n+            let (krate, src_root) = match *cache.extern_locations.get(&self.item.def_id.krate)? {\n+                (ref name, ref src, Local) => (name, src),\n+                (ref name, ref src, Remote(ref s)) => {\n                     root = s.to_string();\n                     (name, src)\n                 }\n-                Some(&(_, _, Unknown)) | None => return None,\n+                (_, _, Unknown) => return None,\n             };\n \n             clean_srcpath(&src_root, file, false, |component| {"}, {"sha": "c7af41ac969cef891cc598e7600c4acb7be1cf84", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -0,0 +1,21 @@\n+module.exports = {\n+    \"env\": {\n+        \"browser\": true,\n+        \"es6\": true\n+    },\n+    \"extends\": \"eslint:recommended\",\n+    \"parserOptions\": {\n+        \"ecmaVersion\": 2015,\n+        \"sourceType\": \"module\"\n+    },\n+    \"rules\": {\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"semi\": [\n+            \"error\",\n+            \"always\"\n+        ]\n+    }\n+};"}, {"sha": "125277fc5d3dac2fd2d0110546f7359b75e5ef84", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -10,8 +10,12 @@\n  * except according to those terms.\n  */\n \n-/*jslint browser: true, es5: true */\n-/*globals $: true, rootPath: true */\n+// From rust:\n+/* global ALIASES, currentCrate, rootPath */\n+\n+// Local js definitions:\n+/* global addClass, getCurrentValue, hasClass */\n+/* global isHidden onEach, removeClass, updateLocalStorage */\n \n if (!String.prototype.startsWith) {\n     String.prototype.startsWith = function(searchString, position) {\n@@ -1300,7 +1304,16 @@ if (!String.prototype.endsWith) {\n                 output = '<div class=\"search-failed\"' + extraStyle + '>No results :(<br/>' +\n                     'Try on <a href=\"https://duckduckgo.com/?q=' +\n                     encodeURIComponent('rust ' + query.query) +\n-                    '\">DuckDuckGo</a>?</div>';\n+                    '\">DuckDuckGo</a>?<br/><br/>' +\n+                    'Or try looking in one of these:<ul><li>The <a ' +\n+                    'href=\"https://doc.rust-lang.org/reference/index.html\">Rust Reference</a> for' +\n+                    ' technical details about the language.</li><li><a ' +\n+                    'href=\"https://doc.rust-lang.org/rust-by-example/index.html\">Rust By Example' +\n+                    '</a> for expository code examples.</a></li><li>The <a ' +\n+                    'href=\"https://doc.rust-lang.org/book/index.html\">Rust Book</a> for ' +\n+                    'introductions to language features and the language itself.</li><li><a ' +\n+                    'href=\"https://docs.rs\">Docs.rs</a> for documentation of crates released on ' +\n+                    '<a href=\"https://crates.io/\">crates.io</a>.</li></ul></div>';\n             }\n             return [output, length];\n         }"}, {"sha": "83129d93a681f6af8810d4e4bb70034a1f16f2ed", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -135,7 +135,6 @@ summary {\n \n code, pre {\n \tfont-family: \"Source Code Pro\", monospace;\n-\twhite-space: pre-wrap;\n }\n .docblock code, .docblock-short code {\n \tborder-radius: 3px;\n@@ -283,7 +282,7 @@ nav.sub {\n \tpadding-left: 0;\n }\n \n-:not(.source) .example-wrap {\n+.rustdoc:not(.source) .example-wrap {\n \tdisplay: inline-flex;\n \tmargin-bottom: 10px;\n }\n@@ -301,8 +300,9 @@ nav.sub {\n \ttext-align: right;\n }\n \n-:not(.source) .example-wrap > pre.rust {\n+.rustdoc:not(.source) .example-wrap > pre.rust {\n \twidth: 100%;\n+\toverflow-x: auto;\n }\n \n body:not(.source) .example-wrap > pre {\n@@ -1132,6 +1132,13 @@ pre.rust {\n \tmargin-top: 20px;\n }\n \n+.search-failed > ul {\n+\ttext-align: left;\n+\tmax-width: 570px;\n+\tmargin-left: auto;\n+\tmargin-right: auto;\n+}\n+\n #titles {\n \theight: 35px;\n }"}, {"sha": "03b0955a34c310737c754d06c4c159336bbeefe0", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -10,6 +10,12 @@\n  * except according to those terms.\n  */\n \n+// From rust:\n+/* global sourcesIndex */\n+\n+// Local js definitions:\n+/* global addClass, getCurrentValue, hasClass, removeClass, updateLocalStorage */\n+\n function getCurrentFilePath() {\n     var parts = window.location.pathname.split(\"/\");\n     var rootPathParts = window.rootPath.split(\"/\");"}, {"sha": "e8f0c03d91aa666332503a236f82db9f7cd8b1b2", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -10,6 +10,9 @@\n  * except according to those terms.\n  */\n \n+// From rust:\n+/* global resourcesSuffix */\n+\n var currentTheme = document.getElementById(\"themeStyle\");\n var mainTheme = document.getElementById(\"mainThemeStyle\");\n "}, {"sha": "29388f096ee842f3801c8cea75ed36cb51f31fcd", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -285,7 +285,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: rgba(255,142,0,1);\n }\n \n-.search-failed > a {\n+.search-failed a {\n \tcolor: #0089ff;\n }\n "}, {"sha": "d37cfa4142f75501bca29ca8cda0d283ae3754c8", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -279,7 +279,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: rgba(255,142,0,1);\n }\n \n-.search-failed > a {\n+.search-failed a {\n \tcolor: #0089ff;\n }\n "}, {"sha": "d14efa2e3c76d41816a958db480b77d4f62f564d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -828,7 +828,7 @@ pub mod consts {\n     /// - s390x\n     /// - sparc64\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const ARCH: &'static str = super::arch::ARCH;\n+    pub const ARCH: &str = super::arch::ARCH;\n \n     /// The family of the operating system. Example value is `unix`.\n     ///\n@@ -837,7 +837,7 @@ pub mod consts {\n     /// - unix\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const FAMILY: &'static str = os::FAMILY;\n+    pub const FAMILY: &str = os::FAMILY;\n \n     /// A string describing the specific operating system in use.\n     /// Example value is `linux`.\n@@ -856,7 +856,7 @@ pub mod consts {\n     /// - android\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const OS: &'static str = os::OS;\n+    pub const OS: &str = os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform. Example value is `lib`.\n@@ -866,7 +866,7 @@ pub mod consts {\n     /// - lib\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_PREFIX: &'static str = os::DLL_PREFIX;\n+    pub const DLL_PREFIX: &str = os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform. Example value is `.so`.\n@@ -877,7 +877,7 @@ pub mod consts {\n     /// - .dylib\n     /// - .dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_SUFFIX: &'static str = os::DLL_SUFFIX;\n+    pub const DLL_SUFFIX: &str = os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot. Example value is `so`.\n@@ -888,7 +888,7 @@ pub mod consts {\n     /// - dylib\n     /// - dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_EXTENSION: &'static str = os::DLL_EXTENSION;\n+    pub const DLL_EXTENSION: &str = os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform. Example value is `.exe`.\n@@ -900,7 +900,7 @@ pub mod consts {\n     /// - .pexe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const EXE_SUFFIX: &'static str = os::EXE_SUFFIX;\n+    pub const EXE_SUFFIX: &str = os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform. Example value is `exe`.\n@@ -910,72 +910,72 @@ pub mod consts {\n     /// - exe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const EXE_EXTENSION: &'static str = os::EXE_EXTENSION;\n+    pub const EXE_EXTENSION: &str = os::EXE_EXTENSION;\n }\n \n #[cfg(target_arch = \"x86\")]\n mod arch {\n-    pub const ARCH: &'static str = \"x86\";\n+    pub const ARCH: &str = \"x86\";\n }\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"x86_64\";\n+    pub const ARCH: &str = \"x86_64\";\n }\n \n #[cfg(target_arch = \"arm\")]\n mod arch {\n-    pub const ARCH: &'static str = \"arm\";\n+    pub const ARCH: &str = \"arm\";\n }\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"aarch64\";\n+    pub const ARCH: &str = \"aarch64\";\n }\n \n #[cfg(target_arch = \"mips\")]\n mod arch {\n-    pub const ARCH: &'static str = \"mips\";\n+    pub const ARCH: &str = \"mips\";\n }\n \n #[cfg(target_arch = \"mips64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"mips64\";\n+    pub const ARCH: &str = \"mips64\";\n }\n \n #[cfg(target_arch = \"powerpc\")]\n mod arch {\n-    pub const ARCH: &'static str = \"powerpc\";\n+    pub const ARCH: &str = \"powerpc\";\n }\n \n #[cfg(target_arch = \"powerpc64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"powerpc64\";\n+    pub const ARCH: &str = \"powerpc64\";\n }\n \n #[cfg(target_arch = \"s390x\")]\n mod arch {\n-    pub const ARCH: &'static str = \"s390x\";\n+    pub const ARCH: &str = \"s390x\";\n }\n \n #[cfg(target_arch = \"sparc64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"sparc64\";\n+    pub const ARCH: &str = \"sparc64\";\n }\n \n #[cfg(target_arch = \"le32\")]\n mod arch {\n-    pub const ARCH: &'static str = \"le32\";\n+    pub const ARCH: &str = \"le32\";\n }\n \n #[cfg(target_arch = \"asmjs\")]\n mod arch {\n-    pub const ARCH: &'static str = \"asmjs\";\n+    pub const ARCH: &str = \"asmjs\";\n }\n \n #[cfg(target_arch = \"wasm32\")]\n mod arch {\n-    pub const ARCH: &'static str = \"wasm32\";\n+    pub const ARCH: &str = \"wasm32\";\n }\n \n #[cfg(test)]"}, {"sha": "7c7f83967e051b206636e9700afe09cd987dfedb", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -671,7 +671,7 @@ impl fmt::Debug for CStr {\n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl<'a> Default for &'a CStr {\n     fn default() -> &'a CStr {\n-        const SLICE: &'static [c_char] = &[0];\n+        const SLICE: &[c_char] = &[0];\n         unsafe { CStr::from_ptr(SLICE.as_ptr()) }\n     }\n }\n@@ -1475,7 +1475,7 @@ mod tests {\n \n     #[test]\n     fn cstr_const_constructor() {\n-        const CSTR: &'static CStr = unsafe {\n+        const CSTR: &CStr = unsafe {\n             CStr::from_bytes_with_nul_unchecked(b\"Hello, world!\\0\")\n         };\n "}, {"sha": "c1eaf29bb44072e8dc8ea35a5c6837d36c188dd4", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -65,7 +65,7 @@ mod as_keyword { }\n /// look like this:\n ///\n /// ```rust\n-/// const WORDS: &'static str = \"hello rust!\";\n+/// const WORDS: &str = \"hello rust!\";\n /// ```\n ///\n /// Thanks to static lifetime elision, you usually don't have to explicitly use 'static:"}, {"sha": "9fad40c564944ee378f247d8db26750a532f74fb", "filename": "src/libstd/path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -1397,13 +1397,20 @@ impl<'a> From<&'a Path> for Box<Path> {\n \n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl From<Box<Path>> for PathBuf {\n+    /// Converts a `Box<Path>` into a `PathBuf`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(boxed: Box<Path>) -> PathBuf {\n         boxed.into_path_buf()\n     }\n }\n \n #[stable(feature = \"box_from_path_buf\", since = \"1.20.0\")]\n impl From<PathBuf> for Box<Path> {\n+    /// Converts a `PathBuf` into a `Box<Path>`\n+    ///\n+    /// This conversion currently should not allocate memory,\n+    /// but this behavior is not guaranteed on all platforms or in all future versions.\n     fn from(p: PathBuf) -> Box<Path> {\n         p.into_boxed_path()\n     }\n@@ -1426,20 +1433,29 @@ impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<OsString> for PathBuf {\n+    /// Converts a `OsString` into a `PathBuf`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(s: OsString) -> PathBuf {\n         PathBuf { inner: s }\n     }\n }\n \n #[stable(feature = \"from_path_buf_for_os_string\", since = \"1.14.0\")]\n impl From<PathBuf> for OsString {\n+    /// Converts a `PathBuf` into a `OsString`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(path_buf : PathBuf) -> OsString {\n         path_buf.inner\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for PathBuf {\n+    /// Converts a `String` into a `PathBuf`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(s: String) -> PathBuf {\n         PathBuf::from(OsString::from(s))\n     }\n@@ -1536,6 +1552,7 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1545,6 +1562,7 @@ impl From<PathBuf> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Arc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n@@ -1554,6 +1572,7 @@ impl<'a> From<&'a Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1563,6 +1582,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Rc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}, {"sha": "c7691e3b2df29fd85657127d0aa7dbbcbc9d03f9", "filename": "src/libstd/sys/cloudabi/shims/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"cloudabi\";\n-    pub const OS: &'static str = \"cloudabi\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"cloudabi\";\n+    pub const OS: &str = \"cloudabi\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }"}, {"sha": "75e35046fb72523b53a87f7b890cd02dbbe9289b", "filename": "src/libstd/sys/redox/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fredox%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fredox%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fenv.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"redox\";\n-    pub const OS: &'static str = \"redox\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"redox\";\n+    pub const OS: &str = \"redox\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }"}, {"sha": "b1a4ed30404c0363a22c02457c88e627ea16406f", "filename": "src/libstd/sys/redox/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -35,5 +35,5 @@ pub fn parse_prefix(path: &OsStr) -> Option<Prefix> {\n     }\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"/\";\n+pub const MAIN_SEP_STR: &str = \"/\";\n pub const MAIN_SEP: char = '/';"}, {"sha": "8f6d83c544a5417dadbb1d400ca452deadd60d9f", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -143,7 +143,7 @@ impl Command {\n \n     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n-         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+         const CLOEXEC_MSG_FOOTER: &[u8] = b\"NOEX\";\n \n          if self.saw_nul {\n              return Err(io::Error::new(ErrorKind::InvalidInput,"}, {"sha": "1b6838f0295ef3e90b3321bc5c6fda2360861d1a", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -10,176 +10,176 @@\n \n #[cfg(target_os = \"linux\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"linux\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"linux\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"macos\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"macos\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".dylib\";\n-    pub const DLL_EXTENSION: &'static str = \"dylib\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"macos\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".dylib\";\n+    pub const DLL_EXTENSION: &str = \"dylib\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"ios\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"ios\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".dylib\";\n-    pub const DLL_EXTENSION: &'static str = \"dylib\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"ios\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".dylib\";\n+    pub const DLL_EXTENSION: &str = \"dylib\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"freebsd\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"freebsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"freebsd\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"dragonfly\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"dragonfly\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"dragonfly\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"bitrig\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"bitrig\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"bitrig\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"netbsd\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"netbsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"netbsd\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"openbsd\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"openbsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"openbsd\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"android\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"android\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"android\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"solaris\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"solaris\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"solaris\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"haiku\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"haiku\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"haiku\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"emscripten\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".js\";\n-    pub const EXE_EXTENSION: &'static str = \"js\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"emscripten\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".js\";\n+    pub const EXE_EXTENSION: &str = \"js\";\n }\n \n #[cfg(all(target_os = \"emscripten\", target_arch = \"wasm32\"))]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"emscripten\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".js\";\n-    pub const EXE_EXTENSION: &'static str = \"js\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"emscripten\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".js\";\n+    pub const EXE_EXTENSION: &str = \"js\";\n }\n \n #[cfg(target_os = \"fuchsia\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"fuchsia\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"fuchsia\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"l4re\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"l4re\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"l4re\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"hermit\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"hermit\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"hermit\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }"}, {"sha": "834b4b448dc8a9300f6632a78b159cd2406d0af3", "filename": "src/libstd/sys/unix/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpath.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -25,5 +25,5 @@ pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n     None\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"/\";\n+pub const MAIN_SEP_STR: &str = \"/\";\n pub const MAIN_SEP: char = '/';"}, {"sha": "3248f4244607122c20264b74ebdfe5766744f69f", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -22,7 +22,7 @@ use sys;\n impl Command {\n     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n-        const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+        const CLOEXEC_MSG_FOOTER: &[u8] = b\"NOEX\";\n \n         let envp = self.capture_env();\n "}, {"sha": "09235a944eec083633d87d576a7efa6017c301c2", "filename": "src/libstd/sys/wasm/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwasm%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwasm%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fenv.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"\";\n-    pub const OS: &'static str = \"\";\n-    pub const DLL_PREFIX: &'static str = \"\";\n-    pub const DLL_SUFFIX: &'static str = \".wasm\";\n-    pub const DLL_EXTENSION: &'static str = \"wasm\";\n-    pub const EXE_SUFFIX: &'static str = \".wasm\";\n-    pub const EXE_EXTENSION: &'static str = \"wasm\";\n+    pub const FAMILY: &str = \"\";\n+    pub const OS: &str = \"\";\n+    pub const DLL_PREFIX: &str = \"\";\n+    pub const DLL_SUFFIX: &str = \".wasm\";\n+    pub const DLL_EXTENSION: &str = \"wasm\";\n+    pub const EXE_SUFFIX: &str = \".wasm\";\n+    pub const EXE_EXTENSION: &str = \"wasm\";\n }"}, {"sha": "fcc9d617a876acb53ec053c111c422afcbaab9f3", "filename": "src/libstd/sys/wasm/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -25,5 +25,5 @@ pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n     None\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"/\";\n+pub const MAIN_SEP_STR: &str = \"/\";\n pub const MAIN_SEP: char = '/';"}, {"sha": "4523df04f247d46a043ab2a5cb6856be2ae693b7", "filename": "src/libstd/sys/windows/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"windows\";\n-    pub const OS: &'static str = \"windows\";\n-    pub const DLL_PREFIX: &'static str = \"\";\n-    pub const DLL_SUFFIX: &'static str = \".dll\";\n-    pub const DLL_EXTENSION: &'static str = \"dll\";\n-    pub const EXE_SUFFIX: &'static str = \".exe\";\n-    pub const EXE_EXTENSION: &'static str = \"exe\";\n+    pub const FAMILY: &str = \"windows\";\n+    pub const OS: &str = \"windows\";\n+    pub const DLL_PREFIX: &str = \"\";\n+    pub const DLL_SUFFIX: &str = \".dll\";\n+    pub const DLL_EXTENSION: &str = \"dll\";\n+    pub const EXE_SUFFIX: &str = \".exe\";\n+    pub const EXE_EXTENSION: &str = \"exe\";\n }"}, {"sha": "4d7b7236c59c64b0e60dbbed5d0c7b878f593102", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -48,8 +48,8 @@ pub fn error_string(mut errnum: i32) -> String {\n         // `[MS-ERREF]`: https://msdn.microsoft.com/en-us/library/cc231198.aspx\n         if (errnum & c::FACILITY_NT_BIT as i32) != 0 {\n             // format according to https://support.microsoft.com/en-us/help/259693\n-            const NTDLL_DLL: &'static [u16] = &['N' as _, 'T' as _, 'D' as _, 'L' as _, 'L' as _,\n-                                                '.' as _, 'D' as _, 'L' as _, 'L' as _, 0];\n+            const NTDLL_DLL: &[u16] = &['N' as _, 'T' as _, 'D' as _, 'L' as _, 'L' as _,\n+                                        '.' as _, 'D' as _, 'L' as _, 'L' as _, 0];\n             module = c::GetModuleHandleW(NTDLL_DLL.as_ptr());\n \n             if module != ptr::null_mut() {"}, {"sha": "385ea8e0531674232105e6f00c695b14f0723a31", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -91,16 +91,13 @@ pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix> {\n     }\n \n     fn parse_two_comps(mut path: &[u8], f: fn(u8) -> bool) -> Option<(&[u8], &[u8])> {\n-        let first = match path.iter().position(|x| f(*x)) {\n-            None => return None,\n-            Some(x) => &path[..x],\n-        };\n+        let first = &path[..path.iter().position(|x| f(*x))?];\n         path = &path[(first.len() + 1)..];\n         let idx = path.iter().position(|x| f(*x));\n         let second = &path[..idx.unwrap_or(path.len())];\n         Some((first, second))\n     }\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"\\\\\";\n+pub const MAIN_SEP_STR: &str = \"\\\\\";\n pub const MAIN_SEP: char = '\\\\';"}, {"sha": "3530b7af9ad056b956ebd6845b835c3724732352", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -40,7 +40,7 @@ use str;\n use sync::Arc;\n use sys_common::AsInner;\n \n-const UTF8_REPLACEMENT_CHARACTER: &'static str = \"\\u{FFFD}\";\n+const UTF8_REPLACEMENT_CHARACTER: &str = \"\\u{FFFD}\";\n \n /// A Unicode code point: from U+0000 to U+10FFFF.\n ///"}, {"sha": "68d94b43dba2c8e6d0813d2bbf3b567b92646997", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -309,7 +309,7 @@ fn create_matches(len: usize) -> Box<[Rc<NamedMatchVec>]> {\n         vec![]\n     } else {\n         let empty_matches = Rc::new(SmallVec::new());\n-        vec![empty_matches.clone(); len]\n+        vec![empty_matches; len]\n     }.into_boxed_slice()\n }\n "}, {"sha": "7373828427e98adf5ff0824189794f8bc85b7024", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -753,10 +753,7 @@ where It: Iterator {\n     type Item = Vec<It::Item>;\n \n     fn next(&mut self) -> Option<Vec<It::Item>> {\n-        let first = match self.it.next() {\n-            Some(e) => e,\n-            None => return None\n-        };\n+        let first = self.it.next()?;\n \n         let mut result = Vec::with_capacity(self.n);\n         result.push(first);"}, {"sha": "8a3fce3a554ebb2a900b817a31f1f599361156d1", "filename": "src/test/ui/E0501.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.nll.stderr?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -7,7 +7,7 @@ LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n LL |     };\n LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n-   |                       ^ borrow occurs here\n+   |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);\n    |          --- first borrow later used here\n@@ -21,7 +21,7 @@ LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n ...\n LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n-   |                       ^ borrow occurs here\n+   |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);\n    |          --- first borrow later used here"}, {"sha": "8a3fce3a554ebb2a900b817a31f1f599361156d1", "filename": "src/test/ui/E0501.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2FE0501.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2FE0501.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.mir.stderr?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -7,7 +7,7 @@ LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n LL |     };\n LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n-   |                       ^ borrow occurs here\n+   |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);\n    |          --- first borrow later used here\n@@ -21,7 +21,7 @@ LL |         inside_closure(a)\n    |                        - first borrow occurs due to use of `a` in closure\n ...\n LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n-   |                       ^ borrow occurs here\n+   |                       ^ second borrow occurs here\n ...\n LL |     drop(bar);\n    |          --- first borrow later used here"}, {"sha": "84fc69465cb4a4549c28efaca11a8c53b34fceab", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -10,7 +10,7 @@ LL | |         |a| { //~ ERROR closure requires unique access to `f`\n LL | |             f.n.insert(*a);\n    | |             - first borrow occurs due to use of `f` in closure\n LL | |         })\n-   | |__________^ borrow occurs here\n+   | |__________^ second borrow occurs here\n \n error[E0500]: closure requires unique access to `f` but it is already borrowed\n   --> $DIR/borrowck-insert-during-each.rs:27:9"}, {"sha": "736d812bc0aff919086f5719e5df9ffa5767047a", "filename": "src/test/ui/existential_types/private_unused.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fexistential_types%2Fprivate_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fexistential_types%2Fprivate_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fprivate_unused.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+\n+#[deny(warnings)]\n+\n+enum Empty { }\n+trait Bar<T> {}\n+impl Bar<Empty> for () {}\n+\n+fn boo() -> impl Bar<Empty> {}\n+\n+fn main() {\n+    boo();\n+}"}, {"sha": "60163d78e78f9444b97c799c57f65d3a806a2d32", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -7,7 +7,7 @@ LL |         let a = &mut *x;\n    |                       - first borrow occurs due to use of `x` in generator\n ...\n LL |     println!(\"{}\", x); //~ ERROR\n-   |                    ^ borrow occurs here\n+   |                    ^ second borrow occurs here\n LL |     b.resume();\n    |     - first borrow later used here\n "}, {"sha": "98a261657b1e772bf9bf617752b78095a41981b8", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -126,7 +126,7 @@ LL |     let f = || *x = 0;\n    |             |\n    |             closure construction occurs here\n LL |     let y = &x; //~ ERROR\n-   |             ^^ borrow occurs here\n+   |             ^^ second borrow occurs here\n LL |     f.use_ref();\n    |     - first borrow later used here\n \n@@ -138,7 +138,7 @@ LL |     let f = || *x = 0;\n    |             |\n    |             closure construction occurs here\n LL |     let y = &mut x; //~ ERROR\n-   |             ^^^^^^ borrow occurs here\n+   |             ^^^^^^ second borrow occurs here\n LL |     f.use_ref();\n    |     - first borrow later used here\n "}, {"sha": "8d20a9e2717051dfd15ec7cd15615db737ecb858", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -119,10 +119,7 @@ fn parse_expected(\n     line: &str,\n     tag: &str,\n ) -> Option<(WhichLine, Error)> {\n-    let start = match line.find(tag) {\n-        Some(i) => i,\n-        None => return None,\n-    };\n+    let start = line.find(tag)?;\n     let (follow, adjusts) = if line[start + tag.len()..].chars().next().unwrap() == '|' {\n         (true, 0)\n     } else {"}, {"sha": "f4a82aeb307dc86410f8b4605525bd733dc918f1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -707,14 +707,8 @@ impl Config {\n \n     fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n         if self.parse_cfg_name_directive(line, prefix) == ParsedNameDirective::Match {\n-            let from = match parse_normalization_string(&mut line) {\n-                Some(s) => s,\n-                None => return None,\n-            };\n-            let to = match parse_normalization_string(&mut line) {\n-                Some(s) => s,\n-                None => return None,\n-            };\n+            let from = parse_normalization_string(&mut line)?;\n+            let to = parse_normalization_string(&mut line)?;\n             Some((from, to))\n         } else {\n             None\n@@ -873,14 +867,8 @@ fn expand_variables(mut value: String, config: &Config) -> String {\n /// ```\n fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     // FIXME support escapes in strings.\n-    let begin = match line.find('\"') {\n-        Some(i) => i + 1,\n-        None => return None,\n-    };\n-    let end = match line[begin..].find('\"') {\n-        Some(i) => i + begin,\n-        None => return None,\n-    };\n+    let begin = line.find('\"')? + 1;\n+    let end = line[begin..].find('\"')? + begin;\n     let result = line[begin..end].to_owned();\n     *line = &line[end + 1..];\n     Some(result)"}, {"sha": "e6bf9a285723b41ec3a5e594b2ca0d680ca38e37", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4988b096e673204b91683dc693fc3eb6b2323e97/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=4988b096e673204b91683dc693fc3eb6b2323e97", "patch": "@@ -332,10 +332,7 @@ fn maybe_redirect(source: &str) -> Option<String> {\n     const REDIRECT: &'static str = \"<p>Redirecting to <a href=\";\n \n     let mut lines = source.lines();\n-    let redirect_line = match lines.nth(6) {\n-        Some(l) => l,\n-        None => return None,\n-    };\n+    let redirect_line = lines.nth(6)?;\n \n     redirect_line.find(REDIRECT).map(|i| {\n         let rest = &redirect_line[(i + REDIRECT.len() + 1)..];"}]}