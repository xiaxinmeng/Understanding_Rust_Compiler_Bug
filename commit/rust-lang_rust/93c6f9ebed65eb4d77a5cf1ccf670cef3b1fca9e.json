{"sha": "93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "node_id": "C_kwDOAAsO6NoAKDkzYzZmOWViZWQ2NWViNGQ3N2E1Y2YxY2NmNjcwY2VmM2IxZmNhOWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T15:08:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T15:08:32Z"}, "message": "Auto merge of #9006 - kyoto7250:issue-8836-v2, r=Jarcho\n\nfeat(fix): ignore `todo!` and `unimplemented!` in `if_same_then_else`\n\nclose: #8836\ntake over:  #8853\n\nThis PR adds  check `todo!` and `unimplemented!` in if_same_then_else.\n( I thought `unimplemented` should not be checked as well as todo!.)\n\nThank you in advance.\n\nchangelog: ignore todo! and unimplemented! in if_same_then_else\n\nr? `@Jarcho`", "tree": {"sha": "42c135810bfe8dd6b87d1fd2ef1b65a8c1f309ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c135810bfe8dd6b87d1fd2ef1b65a8c1f309ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "html_url": "https://github.com/rust-lang/rust/commit/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d451397de3f97fa586297a7bc2d16908d3d842", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d451397de3f97fa586297a7bc2d16908d3d842", "html_url": "https://github.com/rust-lang/rust/commit/97d451397de3f97fa586297a7bc2d16908d3d842"}, {"sha": "39ffda014debd9d1d4126a8996d39af934fe8d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ffda014debd9d1d4126a8996d39af934fe8d94", "html_url": "https://github.com/rust-lang/rust/commit/39ffda014debd9d1d4126a8996d39af934fe8d94"}], "stats": {"total": 119, "additions": 107, "deletions": 12}, "files": [{"sha": "74ef2c1bebb3de8887664156b40a1fb601afd323", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "patch": "@@ -1,4 +1,5 @@\n use crate::consts::constant_simple;\n+use crate::macros::macro_backtrace;\n use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHasher;\n@@ -12,7 +13,7 @@ use rustc_hir::{\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::TypeckResults;\n-use rustc_span::Symbol;\n+use rustc_span::{sym, Symbol};\n use std::hash::{Hash, Hasher};\n \n /// Type used to check whether two ast are the same. This is different from the\n@@ -121,6 +122,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     /// Checks whether two blocks are the same.\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n+        if self.cannot_be_compared_block(left) || self.cannot_be_compared_block(right) {\n+            return false;\n+        }\n         match (left.stmts, left.expr, right.stmts, right.expr) {\n             ([], None, [], None) => {\n                 // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n@@ -171,6 +175,38 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n+    fn cannot_be_compared_block(&mut self, block: &Block<'_>) -> bool {\n+        if block.stmts.last().map_or(false, |stmt| {\n+            matches!(\n+                stmt.kind,\n+                StmtKind::Semi(semi_expr) if self.should_ignore(semi_expr)\n+            )\n+        }) {\n+            return true;\n+        }\n+\n+        if let Some(block_expr) = block.expr\n+            && self.should_ignore(block_expr)\n+        {\n+            return true\n+        }\n+\n+        false\n+    }\n+\n+    fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n+        if macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n+            matches!(\n+                &self.inner.cx.tcx.get_diagnostic_name(macro_call.def_id),\n+                Some(sym::todo_macro | sym::unimplemented_macro)\n+            )\n+        }) {\n+            return true;\n+        }\n+\n+        false\n+    }\n+\n     pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n         match (left, right) {\n             (ArrayLen::Infer(..), ArrayLen::Infer(..)) => true,"}, {"sha": "2598c2ab426d31fbf46d770da687bff9f2bcda2e", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "patch": "@@ -6,7 +6,9 @@\n     clippy::no_effect,\n     clippy::unused_unit,\n     clippy::zero_divided_by_zero,\n-    clippy::branches_sharing_code\n+    clippy::branches_sharing_code,\n+    dead_code,\n+    unreachable_code\n )]\n \n struct Foo {\n@@ -155,4 +157,61 @@ mod issue_5698 {\n     }\n }\n \n+mod issue_8836 {\n+    fn do_not_lint() {\n+        if true {\n+            todo!()\n+        } else {\n+            todo!()\n+        }\n+        if true {\n+            todo!();\n+        } else {\n+            todo!();\n+        }\n+        if true {\n+            unimplemented!()\n+        } else {\n+            unimplemented!()\n+        }\n+        if true {\n+            unimplemented!();\n+        } else {\n+            unimplemented!();\n+        }\n+\n+        if true {\n+            println!(\"FOO\");\n+            todo!();\n+        } else {\n+            println!(\"FOO\");\n+            todo!();\n+        }\n+\n+        if true {\n+            println!(\"FOO\");\n+            unimplemented!();\n+        } else {\n+            println!(\"FOO\");\n+            unimplemented!();\n+        }\n+\n+        if true {\n+            println!(\"FOO\");\n+            todo!()\n+        } else {\n+            println!(\"FOO\");\n+            todo!()\n+        }\n+\n+        if true {\n+            println!(\"FOO\");\n+            unimplemented!()\n+        } else {\n+            println!(\"FOO\");\n+            unimplemented!()\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "2cdf442486a306334ea93c052ac421fe84a6b936", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=93c6f9ebed65eb4d77a5cf1ccf670cef3b1fca9e", "patch": "@@ -1,5 +1,5 @@\n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:21:13\n+  --> $DIR/if_same_then_else.rs:23:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -13,7 +13,7 @@ LL | |     } else {\n    |\n    = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/if_same_then_else.rs:29:12\n+  --> $DIR/if_same_then_else.rs:31:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -26,7 +26,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:65:21\n+  --> $DIR/if_same_then_else.rs:67:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n@@ -35,7 +35,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else.rs:67:12\n+  --> $DIR/if_same_then_else.rs:69:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -45,7 +45,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:72:21\n+  --> $DIR/if_same_then_else.rs:74:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n@@ -54,7 +54,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else.rs:74:12\n+  --> $DIR/if_same_then_else.rs:76:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -64,7 +64,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:88:21\n+  --> $DIR/if_same_then_else.rs:90:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n@@ -73,7 +73,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else.rs:90:12\n+  --> $DIR/if_same_then_else.rs:92:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -83,7 +83,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:95:13\n+  --> $DIR/if_same_then_else.rs:97:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -96,7 +96,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else.rs:102:12\n+  --> $DIR/if_same_then_else.rs:104:12\n    |\n LL |       } else {\n    |  ____________^"}]}