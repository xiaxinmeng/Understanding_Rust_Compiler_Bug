{"sha": "c57d7788729f32e74966f67eea582ec7ec75a133", "node_id": "C_kwDOAAsO6NoAKGM1N2Q3Nzg4NzI5ZjMyZTc0OTY2ZjY3ZWVhNTgyZWM3ZWM3NWExMzM", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-05-08T03:36:12Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "define MmapMut and use it in Decodable impl", "tree": {"sha": "6adc8ea3e9963f566aa4049a94d7b8b9b0a040da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6adc8ea3e9963f566aa4049a94d7b8b9b0a040da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c57d7788729f32e74966f67eea582ec7ec75a133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c57d7788729f32e74966f67eea582ec7ec75a133", "html_url": "https://github.com/rust-lang/rust/commit/c57d7788729f32e74966f67eea582ec7ec75a133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c57d7788729f32e74966f67eea582ec7ec75a133/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c36893a14b689faadeaa06b56e53d36f526c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c36893a14b689faadeaa06b56e53d36f526c2f", "html_url": "https://github.com/rust-lang/rust/commit/47c36893a14b689faadeaa06b56e53d36f526c2f"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "917416df6b86703602d642c901aed666763a98d3", "filename": "compiler/rustc_data_structures/src/memmap.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c57d7788729f32e74966f67eea582ec7ec75a133/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57d7788729f32e74966f67eea582ec7ec75a133/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs?ref=c57d7788729f32e74966f67eea582ec7ec75a133", "patch": "@@ -1,6 +1,6 @@\n use std::fs::File;\n use std::io;\n-use std::ops::Deref;\n+use std::ops::{Deref, DerefMut};\n \n use crate::owning_ref::StableAddress;\n \n@@ -45,3 +45,64 @@ impl Deref for Mmap {\n // export any function that can cause the `Vec` to be re-allocated. As such the address of the\n // bytes inside this `Vec` is stable.\n unsafe impl StableAddress for Mmap {}\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+pub struct MmapMut(memmap2::MmapMut);\n+\n+#[cfg(target_arch = \"wasm32\")]\n+pub struct MmapMut(Vec<u8>);\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+impl MmapMut {\n+    #[inline]\n+    pub fn map_anon(len: usize) -> io::Result<Self> {\n+        let mmap = memmap2::MmapMut::map_anon(len)?;\n+        Ok(MmapMut(mmap))\n+    }\n+\n+    #[inline]\n+    pub fn flush(&mut self) -> io::Result<()> {\n+        self.0.flush()\n+    }\n+\n+    #[inline]\n+    pub fn make_read_only(self) -> std::io::Result<Mmap> {\n+        let mmap = self.0.make_read_only()?;\n+        Ok(Mmap(mmap))\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+impl MmapMut {\n+    #[inline]\n+    pub fn map_anon(len: usize) -> io::Result<Self> {\n+        let data = Vec::with_capacity(len);\n+        Ok(MmapMut(data))\n+    }\n+\n+    #[inline]\n+    pub fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+\n+    #[inline]\n+    pub fn make_read_only(self) -> std::io::Result<Mmap> {\n+        Ok(Mmap(self.0))\n+    }\n+}\n+\n+impl Deref for MmapMut {\n+    type Target = [u8];\n+\n+    #[inline]\n+    fn deref(&self) -> &[u8] {\n+        &*self.0\n+    }\n+}\n+\n+impl DerefMut for MmapMut {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut [u8] {\n+        &mut *self.0\n+    }\n+}"}, {"sha": "f3853255f7bdbed0d17865ee9fd10d56dbd13f53", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c57d7788729f32e74966f67eea582ec7ec75a133/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57d7788729f32e74966f67eea582ec7ec75a133/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c57d7788729f32e74966f67eea582ec7ec75a133", "patch": "@@ -4,7 +4,7 @@ use crate::rmeta::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_data_structures::memmap::Mmap;\n+use rustc_data_structures::memmap::{Mmap, MmapMut};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n@@ -44,7 +44,6 @@ use std::io::{Read, Seek, Write};\n use std::iter;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n-use tempfile::Builder as TempFileBuilder;\n use tracing::{debug, trace};\n \n pub(super) struct EncodeContext<'a, 'tcx> {\n@@ -2179,19 +2178,19 @@ impl<S: Encoder> Encodable<S> for EncodedMetadata {\n \n impl<D: Decoder> Decodable<D> for EncodedMetadata {\n     fn decode(d: &mut D) -> Self {\n-        let temp_dir = TempFileBuilder::new().prefix(\"decoded\").tempdir().unwrap();\n-        let temp_dir = MaybeTempDir::new(temp_dir, false);\n-        let filename = temp_dir.as_ref().join(\"decoded\");\n-        let file = std::fs::File::create(&filename).unwrap();\n-        let mut file = std::io::BufWriter::new(file);\n-\n         let len = d.read_usize();\n-        for _ in 0..len {\n-            file.write(&[d.read_u8()]).unwrap();\n-        }\n-        file.flush().unwrap();\n+        let mmap = if len > 0 {\n+            let mut mmap = MmapMut::map_anon(len).unwrap();\n+            for _ in 0..len {\n+                (&mut mmap[..]).write(&[d.read_u8()]).unwrap();\n+            }\n+            mmap.flush().unwrap();\n+            Some(mmap.make_read_only().unwrap())\n+        } else {\n+            None\n+        };\n \n-        Self::from_path(filename, Some(temp_dir)).unwrap()\n+        Self { mmap, _temp_dir: None }\n     }\n }\n "}]}