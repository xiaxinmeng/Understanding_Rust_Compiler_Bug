{"sha": "2ca8d358e55bc56755b597ea96b557232ef8bc86", "node_id": "C_kwDOAAsO6NoAKDJjYThkMzU4ZTU1YmM1Njc1NWI1OTdlYTk2YjU1NzIzMmVmOGJjODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T13:07:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T13:07:43Z"}, "message": "Auto merge of #112549 - jieyouxu:fix-tests-for-unit-bindings, r=Nilstrieb\n\nAdjust UI tests for `unit_bindings` lint\n\n- Explicitly annotate `let x: () = expr;` where `x` has unit type, or remove the unit binding to leave only `expr;` instead.\n- Use `let () = init;` or `let pat = ();` where appropriate.\n- Fix disjoint-capture-in-same-closure test which wasn't actually testing a closure: `tests/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs`.\n\nNote that unfortunately there's *a lot* of UI tests, there are a couple of places where I may have left something like `let (): ()` (this is not needed but is left over from an ealier version of the lint) which is bad style.\n\nThis PR is to help with the `unit_bindings` lint at #112380.", "tree": {"sha": "96e6dc40e7208d5fbdc581aa7ab2106b9c84fa53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e6dc40e7208d5fbdc581aa7ab2106b9c84fa53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca8d358e55bc56755b597ea96b557232ef8bc86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca8d358e55bc56755b597ea96b557232ef8bc86", "html_url": "https://github.com/rust-lang/rust/commit/2ca8d358e55bc56755b597ea96b557232ef8bc86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca8d358e55bc56755b597ea96b557232ef8bc86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd4e2ea824f4f458cae8917047ebb6b88853fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd4e2ea824f4f458cae8917047ebb6b88853fe6", "html_url": "https://github.com/rust-lang/rust/commit/4bd4e2ea824f4f458cae8917047ebb6b88853fe6"}, {"sha": "edafbaffb26d8be00f6dd8ad0dbaa57f1caf1610", "url": "https://api.github.com/repos/rust-lang/rust/commits/edafbaffb26d8be00f6dd8ad0dbaa57f1caf1610", "html_url": "https://github.com/rust-lang/rust/commit/edafbaffb26d8be00f6dd8ad0dbaa57f1caf1610"}], "stats": {"total": 234, "additions": 117, "deletions": 117}, "files": [{"sha": "9db8fb008cf2ea3315c937e1c96dc17f22dee713", "filename": "tests/ui/assign-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign-assign.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -6,7 +6,7 @@ fn test_assign() {\n     let y: () = x = 10;\n     assert_eq!(x, 10);\n     assert_eq!(y, ());\n-    let mut z = x = 11;\n+    let mut z: () = x = 11;\n     assert_eq!(x, 11);\n     assert_eq!(z, ());\n     z = x = 12;\n@@ -19,7 +19,7 @@ fn test_assign_op() {\n     let y: () = x += 10;\n     assert_eq!(x, 10);\n     assert_eq!(y, ());\n-    let mut z = x += 11;\n+    let mut z: () = x += 11;\n     assert_eq!(x, 21);\n     assert_eq!(z, ());\n     z = x += 12;"}, {"sha": "a3f4717791abd0120323db5cb3a2b40bba69fde2", "filename": "tests/ui/associated-type-bounds/dyn-impl-trait-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -59,8 +59,8 @@ fn def_et4() -> Et4 {\n pub fn use_et4() { assert_forall_tr2(def_et4().mk()); }\n \n fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n+    use_et1();\n+    use_et2();\n+    use_et3();\n+    use_et4();\n }"}, {"sha": "52199124ea3b57350b4942a90f0e8f8f1ef866a3", "filename": "tests/ui/associated-type-bounds/dyn-rpit-and-let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -66,8 +66,8 @@ fn def_et4() -> Box<dyn Tr1<As1: for<'a> Tr2<'a>>> {\n pub fn use_et4() { assert_forall_tr2(def_et4().mk()); }\n \n fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n+    use_et1();\n+    use_et2();\n+    use_et3();\n+    use_et4();\n }"}, {"sha": "59c7733fbe4ba15e4848aaf05782261298916968", "filename": "tests/ui/associated-type-bounds/rpit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Frpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Frpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Frpit.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -57,8 +57,8 @@ fn def_et4() -> impl Tr1<As1: for<'a> Tr2<'a>> {\n pub fn use_et4() { assert_forall_tr2(def_et4().mk()); }\n \n fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n+    use_et1();\n+    use_et2();\n+    use_et3();\n+    use_et4();\n }"}, {"sha": "93a44c01ce053f46c311c883be30fef05c0c4674", "filename": "tests/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -89,8 +89,8 @@ pub fn use_et4() {\n }\n \n fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n+    use_et1();\n+    use_et2();\n+    use_et3();\n+    use_et4();\n }"}, {"sha": "bd9a8fcf4925f3d8944951274d5f9e0a85de914d", "filename": "tests/ui/associated-types/normalization-debruijn-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-types%2Fnormalization-debruijn-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fassociated-types%2Fnormalization-debruijn-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fnormalization-debruijn-3.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -6,10 +6,10 @@\n \n use std::future::{Future, Ready};\n async fn read() {\n-    let _ = connect(&()).await;\n+    connect(&()).await;\n }\n async fn connect<A: ToSocketAddr>(addr: A) {\n-    let _ = addr.to_socket_addr().await;\n+    addr.to_socket_addr().await;\n }\n pub trait ToSocketAddr {\n     type Future: Future<Output = ()>;"}, {"sha": "b79d2af066a37be231f8b8f054a76ae50e1b39b8", "filename": "tests/ui/async-await/drop-track-field-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -21,7 +21,7 @@ impl Agent {\n         let mut info = self.info_result.clone();\n         info.node = Some(\"bar\".into());\n         let element = parse_info(info);\n-        let _ = send_element(element).await;\n+        send_element(element).await;\n     }\n }\n "}, {"sha": "b79d2af066a37be231f8b8f054a76ae50e1b39b8", "filename": "tests/ui/async-await/field-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Ffield-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Ffield-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -21,7 +21,7 @@ impl Agent {\n         let mut info = self.info_result.clone();\n         info.node = Some(\"bar\".into());\n         let element = parse_info(info);\n-        let _ = send_element(element).await;\n+        send_element(element).await;\n     }\n }\n "}, {"sha": "60b7551ff8ad58dd9f2c7de16744358217a2c918", "filename": "tests/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -6,13 +6,13 @@ LL | pub fn foo() -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:27:32\n+  --> $DIR/issue-64130-4-async-move.rs:27:23\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n LL |             200 => {\n-LL |                 let _x = get().await;\n-   |                                ^^^^^ await occurs here, with `client` maybe used later\n+LL |                 get().await;\n+   |                       ^^^^^ await occurs here, with `client` maybe used later\n ...\n LL |     }\n    |     - `client` is later dropped here"}, {"sha": "5d68a808b176919b08ee974d04b6db7f7cb3d112", "filename": "tests/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -24,7 +24,7 @@ pub fn foo() -> impl Future + Send {\n     async move {\n         match client.status() {\n             200 => {\n-                let _x = get().await;\n+                get().await;\n             }\n             _ => (),\n         }"}, {"sha": "258da0756de31161546c4455cf41e5ad0ae9c826", "filename": "tests/ui/async-await/non-trivial-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -7,7 +7,7 @@\n #![feature(generators)]\n \n fn main() {\n-    let _ = foo();\n+    foo();\n }\n \n fn foo() {"}, {"sha": "f9f4c98102c9903b96d05ddbadb61efccea7f3c6", "filename": "tests/ui/cfg/cfg_stmt_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fcfg%2Fcfg_stmt_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fcfg%2Fcfg_stmt_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg_stmt_expr.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -81,7 +81,7 @@ fn main() {\n     // check that lints work\n \n     #[allow(non_snake_case)]\n-    let FOOBAR = {\n+    let FOOBAR: () = {\n         fn SYLADEX() {}\n     };\n "}, {"sha": "6d4cf6fa553b798170967ace9819c5598c1aa36d", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -15,7 +15,7 @@ struct Struct {\n fn main() {\n     let mut s = Struct { x: 10, y: 10, s: String::new() };\n \n-    let mut c = {\n+    let mut c = || {\n         s.x += 10;\n         s.y += 42;\n         s.s = String::from(\"new\");"}, {"sha": "281b12458e3d90f0d056bf11ef9a0db61ddfac4c", "filename": "tests/ui/const-generics/generic_const_exprs/issue-86710.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-86710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-86710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-86710.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -7,7 +7,7 @@ use std::marker::PhantomData;\n \n fn main() {\n     let x = FooImpl::<BarImpl<1>> { phantom: PhantomData };\n-    let _ = x.foo::<BarImpl<1>>();\n+    x.foo::<BarImpl<1>>();\n }\n \n trait Foo<T>"}, {"sha": "f02ab355f9bb6f90aab7fbc78f0bfc9c94a4a087", "filename": "tests/ui/const-generics/issues/issue-70273-assoc-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-70273-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-70273-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-70273-assoc-fn.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -10,5 +10,5 @@ impl T<0usize> for S {\n }\n \n fn main() {\n-    let _err = <S as T<0usize>>::f();\n+    <S as T<0usize>>::f();\n }"}, {"sha": "ba358628d15dca6c0f5fc91871a2fbaa4d615acb", "filename": "tests/ui/consts/assoc_const_generic_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -8,7 +8,7 @@ trait ZeroSized: Sized {\n impl<T: Sized> ZeroSized for T {\n     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()]; //~ ERROR evaluation of `<u32 as ZeroSized>::I_AM_ZERO_SIZED` failed\n     fn requires_zero_size(self) {\n-        let () = Self::I_AM_ZERO_SIZED;\n+        Self::I_AM_ZERO_SIZED;\n         println!(\"requires_zero_size called\");\n     }\n }"}, {"sha": "74d44c5259a3ea269f3f1dabc6d625b017c32216", "filename": "tests/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -10,7 +10,7 @@ const fn no_codegen<T>() {\n     if false {\n         // This bad constant is only used in dead code in a no-codegen function... and yet we still\n         // must make sure that the build fails.\n-        let _ = PrintName::<T>::VOID; //~ constant\n+            PrintName::<T>::VOID; //~ constant\n     }\n }\n "}, {"sha": "770f95062ab3083732d0711f2958adbd73ae266c", "filename": "tests/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -5,10 +5,10 @@ LL |     const VOID: () = [()][2];\n    |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n \n note: erroneous constant used\n-  --> $DIR/erroneous-const.rs:13:17\n+  --> $DIR/erroneous-const.rs:13:13\n    |\n-LL |         let _ = PrintName::<T>::VOID;\n-   |                 ^^^^^^^^^^^^^^^^^^^^\n+LL |             PrintName::<T>::VOID;\n+   |             ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "61f2955f2d822ad22874af421e7b897b84ad0dac", "filename": "tests/ui/consts/const-eval/erroneous-const2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -10,7 +10,7 @@ pub static FOO: () = {\n     if false {\n         // This bad constant is only used in dead code in a static initializer... and yet we still\n         // must make sure that the build fails.\n-        let _ = PrintName::<i32>::VOID; //~ constant\n+        PrintName::<i32>::VOID; //~ constant\n     }\n };\n "}, {"sha": "082c2876575a6715ee8dec6b0437131771e05330", "filename": "tests/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -5,10 +5,10 @@ LL |     const VOID: () = [()][2];\n    |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n \n note: erroneous constant used\n-  --> $DIR/erroneous-const2.rs:13:17\n+  --> $DIR/erroneous-const2.rs:13:9\n    |\n-LL |         let _ = PrintName::<i32>::VOID;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         PrintName::<i32>::VOID;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5e67dc6f6c32ed873ee8983c46ff1316130f3d82", "filename": "tests/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -48,5 +48,5 @@ const Y: () = {\n };\n \n fn main() {\n-    let _y = Y;\n+    Y;\n }"}, {"sha": "57959e7db6ad9de4829ba9c11fa66ffd98b07898", "filename": "tests/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -8,5 +8,5 @@ const _: () = foo();\n // Ensure that the CTFE engine handles calls to `extern \"C\"` aborting gracefully\n \n fn main() {\n-    let _ = foo();\n+    foo();\n }"}, {"sha": "298ed38d180e6144a7e5618ac4a1ce58eb2aa589", "filename": "tests/ui/consts/large_const_alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Flarge_const_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fconsts%2Flarge_const_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Flarge_const_alloc.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -13,6 +13,6 @@ static FOO2: () = {\n };\n \n fn main() {\n-    let _ = FOO;\n-    let _ = FOO2;\n+    FOO;\n+    FOO2;\n }"}, {"sha": "ad0f22031067ed9549275acbb5621d2c6488959f", "filename": "tests/ui/empty-allocation-rvalue-non-null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fempty-allocation-rvalue-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fempty-allocation-rvalue-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty-allocation-rvalue-non-null.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -4,5 +4,5 @@\n // pretty-expanded FIXME #23616\n \n pub fn main() {\n-    let x = *Box::new(());\n+    let x: () = *Box::new(());\n }"}, {"sha": "be66560fd921c28244544f2b07a8b5bdbd600e3b", "filename": "tests/ui/feature-gates/feature-gate-generic_arg_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -19,5 +19,5 @@ fn bar() {\n fn main() {\n     let _x = foo::<_>([1,2]);\n     //[normal]~^ ERROR: type provided when a constant was expected\n-    let _y = bar();\n+    bar();\n }"}, {"sha": "65207fb7fb54e4807751392a53ff5f75346d9fc1", "filename": "tests/ui/for-loop-while/loop-break-value.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor-loop-while%2Floop-break-value.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -64,7 +64,7 @@ pub fn main() {\n     };\n     assert_eq!(trait_unified_3, [\"Yes\"]);\n \n-    let regular_break = loop {\n+    let regular_break: () = loop {\n         if true {\n             break;\n         } else {\n@@ -73,7 +73,7 @@ pub fn main() {\n     };\n     assert_eq!(regular_break, ());\n \n-    let regular_break_2 = loop {\n+    let regular_break_2: () = loop {\n         if true {\n             break Default::default();\n         } else {\n@@ -82,7 +82,7 @@ pub fn main() {\n     };\n     assert_eq!(regular_break_2, ());\n \n-    let regular_break_3 = loop {\n+    let regular_break_3: () = loop {\n         break if true {\n             Default::default()\n         } else {\n@@ -91,13 +91,13 @@ pub fn main() {\n     };\n     assert_eq!(regular_break_3, ());\n \n-    let regular_break_4 = loop {\n+    let regular_break_4: () = loop {\n         break ();\n         break;\n     };\n     assert_eq!(regular_break_4, ());\n \n-    let regular_break_5 = loop {\n+    let regular_break_5: () = loop {\n         break;\n         break ();\n     };"}, {"sha": "a1316688075d1851723823b1ecfd2d2a0b5cede4", "filename": "tests/ui/generics/post_monomorphization_error_backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -11,7 +11,7 @@ fn assert_zst<T>() {\n         //~| NOTE: in this expansion of assert!\n         //~| NOTE: the evaluated program panicked\n     }\n-    let _ = F::<T>::V;\n+    F::<T>::V;\n }\n \n fn foo<U>() {"}, {"sha": "0ea736deeaa84fdca8e4bcd24deb099f00da7a69", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'b, U: Unpack<'b>> Backed<'a, U> {\n     where\n         F: for<'f> FnOnce(<U as Unpack<'f>>::Unpacked) -> (),\n     {\n-        let result = f(self.1.unpack());\n+        let result: () = f(self.1.unpack());\n         Backed(self.0, result)\n     }\n }"}, {"sha": "6db2ebb9754bc82e270c22268f2390fdcbca9e1c", "filename": "tests/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -391,7 +391,7 @@ fn main() {\n         let _val = mem::zeroed::<ZeroIsValid>();\n         let _val = mem::uninitialized::<MaybeUninit<bool>>();\n         let _val = mem::uninitialized::<[!; 0]>();\n-        let _val = mem::uninitialized::<()>();\n+        let _val: () = mem::uninitialized::<()>();\n         let _val = mem::uninitialized::<ZeroSized>();\n     }\n }"}, {"sha": "7a4acea453757674ebdc3951f31800a0502725a1", "filename": "tests/ui/issues/issue-11047.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-11047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-11047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11047.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -18,8 +18,8 @@ pub mod foo {\n fn main() {\n \n     type Ham = foo::bar::baz::Qux;\n-    let foo = foo::bar::baz::Qux::new();  // invoke directly\n-    let bar = Ham::new();                 // invoke via type alias\n+    let foo: () = foo::bar::baz::Qux::new();  // invoke directly\n+    let bar: () = Ham::new();                 // invoke via type alias\n \n     type StringVec = Vec<String>;\n     let sv = StringVec::new();"}, {"sha": "2d6956649a2834bfb123b758b232f038910b3239", "filename": "tests/ui/issues/issue-11709.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11709.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -10,7 +10,7 @@ struct S {x:()}\n \n fn test(slot: &mut Option<Box<dyn FnMut() -> Box<dyn FnMut()>>>) -> () {\n   let a = slot.take();\n-  let _a = match a {\n+  let _a: () = match a {\n     // `{let .. a(); }` would break\n     Some(mut a) => { let _a = a(); },\n     None => (),\n@@ -28,7 +28,7 @@ fn not(b: bool) -> bool {\n \n pub fn main() {\n     // {} would break\n-    let _r = {};\n+    let _r: () = {};\n     let mut slot = None;\n     // `{ test(...); }` would break\n     let _s : S  = S{ x: { test(&mut slot); } };"}, {"sha": "fa80f509b3229df99b3464967ef864ad1a308b89", "filename": "tests/ui/issues/issue-11740.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-11740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-11740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11740.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -24,5 +24,5 @@ impl Element {\n \n fn main() {\n     let element = Element { attrs: Vec::new() };\n-    let _ = unsafe { element.get_attr(\"foo\") };\n+    unsafe { let () = element.get_attr(\"foo\"); };\n }"}, {"sha": "a3a9ea7405f296e84f10e18fcb27abcdcbc01927", "filename": "tests/ui/issues/issue-20644.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20644.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -26,7 +26,7 @@ fn foo() {\n     let cwd = env::current_dir().unwrap();\n     let src = cwd.clone();\n     let summary = File::open(&src.join(\"SUMMARY.md\")).unwrap();\n-    let _ = parse_summary(summary, &src);\n+    parse_summary(summary, &src);\n }\n \n fn main() {}"}, {"sha": "b10682521a4b0fe3d8c6023636b00e954cf8db31", "filename": "tests/ui/issues/issue-23808.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-23808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fissues%2Fissue-23808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-23808.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -45,14 +45,14 @@ impl_Const!(ConstStruct, ConstEnum, AliasedConstStruct, AliasedConstEnum);\n impl_StaticFn!(StaticFnStruct, StaticFnEnum, AliasedStaticFnStruct, AliasedStaticFnEnum);\n \n fn main() {\n-    let _ = ConstStruct::C;\n-    let _ = ConstEnum::C;\n+    let () = ConstStruct::C;\n+    let () = ConstEnum::C;\n \n     StaticFnStruct::sfn();\n     StaticFnEnum::sfn();\n \n-    let _ = AliasConstStruct::C;\n-    let _ = AliasConstEnum::C;\n+    let () = AliasConstStruct::C;\n+    let () = AliasConstEnum::C;\n \n     AliasStaticFnStruct::sfn();\n     AliasStaticFnEnum::sfn();"}, {"sha": "ae32ec426f23227015be62171af954bf67754304", "filename": "tests/ui/lint/lint-attr-everywhere-early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Flint-attr-everywhere-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Flint-attr-everywhere-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-attr-everywhere-early.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -147,7 +147,7 @@ fn expressions() {\n         #![deny(unsafe_code)]\n         unsafe {} //~ ERROR usage of an `unsafe` block\n     }\n-    let block_tail = {\n+    let block_tail: () = {\n         #[deny(unsafe_code)]\n         unsafe {} //~ ERROR usage of an `unsafe` block\n     };"}, {"sha": "c3acdeda43a9b178b86832812e2a37657e70a69c", "filename": "tests/ui/lint/lint-attr-everywhere-late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Flint-attr-everywhere-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Flint-attr-everywhere-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-attr-everywhere-late.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -172,7 +172,7 @@ fn expressions() {\n         #![deny(enum_intrinsics_non_enums)]\n         discriminant::<i32>(&123); //~ ERROR the return value of\n     }\n-    let block_tail = {\n+    let block_tail: () = {\n         #[deny(enum_intrinsics_non_enums)]\n         discriminant::<i32>(&123); //~ ERROR the return value of\n     };"}, {"sha": "79df58b704247dbcef4c97e0788e4c4b0a3e887e", "filename": "tests/ui/lint/unused/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-extern-crate.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -31,5 +31,5 @@ mod foo {\n \n fn main() {\n     lint_unused_extern_crate3::foo();\n-    let y = foo();\n+    foo();\n }"}, {"sha": "953992ecf7147f9f3b7981a2314a739b7c330f77", "filename": "tests/ui/lint/unused/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-imports.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -86,5 +86,5 @@ fn main() {\n     let mut b = 4;\n     swap(&mut a, &mut b);\n     test::C.b();\n-    let _a = foo();\n+    foo();\n }"}, {"sha": "621c6ef84140fc9fec2d1d7a2bb440db125fb2f4", "filename": "tests/ui/lint/unused/lint-unused-variables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -74,6 +74,6 @@ fn main() {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     | {};\n-    let _ = a(1, 2);\n-    let _ = b(1, 2);\n+    a(1, 2);\n+    b(1, 2);\n }"}, {"sha": "7aa4d4959e7a608680004edfd16b3560d48bbea7", "filename": "tests/ui/lint/unused_import_warning_issue_45268.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused_import_warning_issue_45268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Flint%2Funused_import_warning_issue_45268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused_import_warning_issue_45268.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -31,15 +31,15 @@ use test::B;        // This is used by the test2::func() through import of super\n mod test2 {\n     use super::*;\n     pub fn func() {\n-        let _ = <()>::a();\n-        let _ = ().b();\n+        <()>::a();\n+        ().b();\n         test3::inner_func();\n     }\n     mod test3 {\n         use super::*;\n         pub fn inner_func() {\n-            let _ = <()>::a();\n-            let _ = ().b();\n+            <()>::a();\n+            ().b();\n         }\n     }\n }"}, {"sha": "1ff6e3f80d6d5e58f45b14fa5f74f03047d1533f", "filename": "tests/ui/macros/format-args-temporaries.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmacros%2Fformat-args-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmacros%2Fformat-args-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fformat-args-temporaries.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -27,27 +27,27 @@ impl<'a> Display for MutexGuard<'a> {\n }\n \n fn main() {\n-    let _print = {\n+    let _print: () = {\n         let mutex = Mutex;\n         print!(\"{}\", mutex.lock()) /* no semicolon */\n     };\n \n-    let _println = {\n+    let _println: () = {\n         let mutex = Mutex;\n         println!(\"{}\", mutex.lock()) /* no semicolon */\n     };\n \n-    let _eprint = {\n+    let _eprint: () = {\n         let mutex = Mutex;\n         eprint!(\"{}\", mutex.lock()) /* no semicolon */\n     };\n \n-    let _eprintln = {\n+    let _eprintln: () = {\n         let mutex = Mutex;\n         eprintln!(\"{}\", mutex.lock()) /* no semicolon */\n     };\n \n-    let _panic = {\n+    let _panic: () = {\n         let mutex = Mutex;\n         panic!(\"{}\", mutex.lock()) /* no semicolon */\n     };"}, {"sha": "2f08ad3c343abcc47ca52c486e7a57d45d633a03", "filename": "tests/ui/macros/macro-comma-support-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -170,8 +170,8 @@ fn format_args() {\n \n #[test]\n fn include() {\n-    let _ = include!(\"auxiliary/macro-comma-support.rs\");\n-    let _ = include!(\"auxiliary/macro-comma-support.rs\",);\n+    include!(\"auxiliary/macro-comma-support.rs\");\n+    include!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]"}, {"sha": "72ceefa4f4a405e71f4d95a6503922d8ff6e7c1c", "filename": "tests/ui/mir/issue-101844.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmir%2Fissue-101844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmir%2Fissue-101844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-101844.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -67,7 +67,7 @@ where\n     MS::Item: Into<()>,\n {\n     // Error: Apparently Balance::new doesn't exist during MIR validation\n-    let _ = ImplShoulExist::<MS, ()>::access_fn(ms);\n+    ImplShoulExist::<MS, ()>::access_fn(ms);\n }\n \n fn main() {}"}, {"sha": "96b63e93a9ab88dd02038ff3576924aafd073f86", "filename": "tests/ui/mir/issue-80949.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmir%2Fissue-80949.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmir%2Fissue-80949.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-80949.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -28,7 +28,7 @@ fn may_panic<X>(_: X) { }\n fn main() {\n     let dyn_trait = make_dyn_trait(&());\n     let storage = vec![()];\n-    let _x = may_panic(());\n+    may_panic(());\n     let storage_ref = &storage;\n     diff(dyn_trait, storage_ref);\n }"}, {"sha": "f25afd5602d34be4dd3960a47f59184c414ff0e7", "filename": "tests/ui/mir/issue66339.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmir%2Fissue66339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fmir%2Fissue66339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue66339.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -5,7 +5,7 @@\n \n fn foo() {\n     let bar = |_| { };\n-    let _ = bar(\"a\");\n+    bar(\"a\");\n }\n \n fn main() {"}, {"sha": "9f6cfc7999a6a236b8ba61738419054ed11ab739", "filename": "tests/ui/never_type/diverging-fallback-control-flow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -48,37 +48,37 @@ fn assignment_rev() {\n }\n \n fn if_then_else() {\n-    let _x = if true {\n+    let _x: () = if true {\n         UnitDefault::default()\n     } else {\n         return;\n     };\n }\n \n fn if_then_else_rev() {\n-    let _x = if true {\n+    let _x: () = if true {\n         return;\n     } else {\n         UnitDefault::default()\n     };\n }\n \n fn match_arm() {\n-    let _x = match Ok(UnitDefault::default()) {\n+    let _x: () = match Ok(UnitDefault::default()) {\n         Ok(v) => v,\n         Err(()) => return,\n     };\n }\n \n fn match_arm_rev() {\n-    let _x = match Ok(UnitDefault::default()) {\n+    let _x: () = match Ok(UnitDefault::default()) {\n         Err(()) => return,\n         Ok(v) => v,\n     };\n }\n \n fn loop_break() {\n-    let _x = loop {\n+    let _x: () = loop {\n         if false {\n             break return;\n         } else {\n@@ -88,7 +88,7 @@ fn loop_break() {\n }\n \n fn loop_break_rev() {\n-    let _x = loop {\n+    let _x: () = loop {\n         if false {\n             break return;\n         } else {"}, {"sha": "24eaa8a23883d3e8fb18636030d798bd6bb433c6", "filename": "tests/ui/nll/assign-while-to-immutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fnll%2Fassign-while-to-immutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fnll%2Fassign-while-to-immutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fassign-while-to-immutable.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -4,8 +4,8 @@\n // check-pass\n \n fn main() {\n-    let x = while false {\n+    let x: () = while false {\n         break;\n     };\n-    let y = 'l: while break 'l {};\n+    let y: () = 'l: while break 'l {};\n }"}, {"sha": "348b48dbabb5b9a948444c207df7d824cc6d79be", "filename": "tests/ui/nll/issue-54943-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fnll%2Fissue-54943-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fnll%2Fissue-54943-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54943-3.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -13,7 +13,7 @@ fn foo<T: 'static + Debug>(_: T) { }\n fn bar<'a>() {\n     return;\n \n-    let _x = foo::<Vec<_>>(Vec::<&'a u32>::new());\n+    foo::<Vec<_>>(Vec::<&'a u32>::new());\n }\n \n fn main() {}"}, {"sha": "5f10d5e831cd3e6a1250e5ab223d1a3e33c20b69", "filename": "tests/ui/polymorphization/drop_shims/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fpolymorphization%2Fdrop_shims%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fpolymorphization%2Fdrop_shims%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpolymorphization%2Fdrop_shims%2Fsimple.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -14,7 +14,7 @@ fn foo<R, S: FnOnce()>(\n     let bar = || {\n         let _ = OnDrop(|| ());\n     };\n-    let _ = bar();\n+    bar();\n }\n \n fn main() {"}, {"sha": "283b8da132947cfb4c1312d1f99c951ece274e56", "filename": "tests/ui/polymorphization/drop_shims/transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fpolymorphization%2Fdrop_shims%2Ftransitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fpolymorphization%2Fdrop_shims%2Ftransitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpolymorphization%2Fdrop_shims%2Ftransitive.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -19,7 +19,7 @@ fn foo<R, S: FnOnce()>(\n     let bar = || {\n         bar(|| {})\n     };\n-    let _ = bar();\n+    bar();\n }\n \n fn main() {"}, {"sha": "0dbeb660eedea0e940e0337bce39d863856cf94a", "filename": "tests/ui/reachable/expr_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Freachable%2Fexpr_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Freachable%2Fexpr_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freachable%2Fexpr_return.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -7,7 +7,7 @@\n fn a() {\n     // Here we issue that the \"2nd-innermost\" return is unreachable,\n     // but we stop there.\n-    let x = {return {return {return;}}}; //~ ERROR unreachable\n+    let x: () = {return {return {return;}}}; //~ ERROR unreachable\n }\n \n fn main() { }"}, {"sha": "3791559f44000b98a56ff8bcbd13bc698ee92955", "filename": "tests/ui/reachable/expr_return.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freachable%2Fexpr_return.stderr?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -1,11 +1,11 @@\n error: unreachable expression\n-  --> $DIR/expr_return.rs:10:22\n+  --> $DIR/expr_return.rs:10:26\n    |\n-LL |     let x = {return {return {return;}}};\n-   |                      ^^^^^^^^------^^\n-   |                      |       |\n-   |                      |       any code following this expression is unreachable\n-   |                      unreachable expression\n+LL |     let x: () = {return {return {return;}}};\n+   |                          ^^^^^^^^------^^\n+   |                          |       |\n+   |                          |       any code following this expression is unreachable\n+   |                          unreachable expression\n    |\n note: the lint level is defined here\n   --> $DIR/expr_return.rs:4:9"}, {"sha": "b5f1d5d35b2dd7c9128d4b76eb4b7a8d05438983", "filename": "tests/ui/resolve/extern-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fresolve%2Fextern-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fresolve%2Fextern-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fextern-prelude.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -25,7 +25,7 @@ fn shadow_mod() {\n \n fn shadow_prelude() {\n     // Extern prelude shadows standard library prelude\n-    let x = Vec::new(0f32, ()); // OK\n+    let x: () = Vec::new(0f32, ()); // OK\n }\n \n fn main() {}"}, {"sha": "0ee0d0efad6c954bc0b6ce7347da925c342a580a", "filename": "tests/ui/resolve/resolve-pseudo-shadowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fresolve%2Fresolve-pseudo-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fresolve%2Fresolve-pseudo-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-pseudo-shadowing.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -3,7 +3,7 @@\n \n fn check<Clone>(_c: Clone) {\n     fn check2() {\n-        let _ = <() as std::clone::Clone>::clone(&());\n+        let () = <() as std::clone::Clone>::clone(&());\n     }\n     check2();\n }"}, {"sha": "4fc937f96a1f467d0a844e0d43d1aa2f5d8dd6f9", "filename": "tests/ui/return-nil.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Freturn-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Freturn-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn-nil.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-fn f() { let x: () = (); return x; }\n+fn f() { let x = (); return x; }\n \n-pub fn main() { let _x = f(); }\n+pub fn main() { f(); }"}, {"sha": "2de37c859c97acbd6be1fd799c13e5bc9a4ed08e", "filename": "tests/ui/rfcs/rfc-2565-param-attrs/param-attrs-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Frfcs%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Frfcs%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -97,5 +97,5 @@ fn main() {\n         #[cfg_attr(something, cfg(nothing))]\n         #[deny(unused_mut)] c: i32,\n     | {};\n-    let _ = c(1, 2);\n+    c(1, 2);\n }"}, {"sha": "14539d4b6d8fa2e289fd8d0c77468213d971db2d", "filename": "tests/ui/rfcs/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Frfcs%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Frfcs%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -116,6 +116,6 @@ fn main() {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     | {};\n-    let _ = a(1);\n-    let _ = c(1, 2);\n+    a(1);\n+    c(1, 2);\n }"}, {"sha": "2484c5a88fb3197a52d153110e0978e0bb4f42b2", "filename": "tests/ui/traits/bound/generic_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ftraits%2Fbound%2Fgeneric_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ftraits%2Fbound%2Fgeneric_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fbound%2Fgeneric_trait.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -24,7 +24,7 @@ impl connection_factory<my_connection> for my_connection_factory {\n \n pub fn main() {\n     let factory = ();\n-    let connection = factory.create();\n+    let connection: () = factory.create();\n     let result = connection.read();\n     assert_eq!(result, 43);\n }"}, {"sha": "2cf2ade65e91f2641373df1476a07b257ed0f085", "filename": "tests/ui/try-block/issue-45124.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ftry-block%2Fissue-45124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ftry-block%2Fissue-45124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry-block%2Fissue-45124.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let mut a = 0;\n     let () = {\n         let _: Result<(), ()> = try {\n-            let _ = Err(())?;\n+            let () = Err(())?;\n             return\n         };\n         a += 1;"}, {"sha": "53b025c9135b2548dde372b735cd23cf3555def9", "filename": "tests/ui/tuple/index-float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ftuple%2Findex-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Ftuple%2Findex-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Findex-float.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -3,8 +3,8 @@\n fn main() {\n     let tuple = (((),),);\n \n-    let _ = tuple. 0.0; // OK, whitespace\n-    let _ = tuple.0. 0; // OK, whitespace\n+    let () = tuple. 0.0; // OK, whitespace\n+    let () = tuple.0. 0; // OK, whitespace\n \n-    let _ = tuple./*special cases*/0.0; // OK, comment\n+    let () = tuple./*special cases*/0.0; // OK, comment\n }"}, {"sha": "59b4bb8ef8598703a8659e89f53a2889a04a17e3", "filename": "tests/ui/weird-exprs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8d358e55bc56755b597ea96b557232ef8bc86/tests%2Fui%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fweird-exprs.rs?ref=2ca8d358e55bc56755b597ea96b557232ef8bc86", "patch": "@@ -81,7 +81,7 @@ fn angrydome() {\n       break; }\n }\n \n-fn evil_lincoln() { let _evil = println!(\"lincoln\"); }\n+fn evil_lincoln() { let _evil: () = println!(\"lincoln\"); }\n \n fn dots() {\n     assert_eq!(String::from(\"..................................................\"),\n@@ -137,7 +137,7 @@ fn punch_card() -> impl std::fmt::Debug {\n }\n \n fn r#match() {\n-    let val = match match match match match () {\n+    let val: () = match match match match match () {\n         () => ()\n     } {\n         () => ()\n@@ -166,7 +166,7 @@ fn match_nested_if() {\n }\n \n fn monkey_barrel() {\n-    let val = ()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=();\n+    let val: () = ()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=()=();\n     assert_eq!(val, ());\n }\n "}]}