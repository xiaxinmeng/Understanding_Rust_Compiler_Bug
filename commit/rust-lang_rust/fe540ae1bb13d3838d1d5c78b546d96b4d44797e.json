{"sha": "fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNTQwYWUxYmIxM2QzODM4ZDFkNWM3OGI1NDZkOTZiNGQ0NDc5N2U=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-02T04:39:59Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-02T06:14:18Z"}, "message": "RustDoc: Fix bounds linking trait.Foo instead of traitalias.Foo", "tree": {"sha": "2bba7a5774aa1a34e9c90f4d27ac1983d7994851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bba7a5774aa1a34e9c90f4d27ac1983d7994851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "html_url": "https://github.com/rust-lang/rust/commit/fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae0a8e413a67b9f6c38f09b24f6179e98c1ba25", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae0a8e413a67b9f6c38f09b24f6179e98c1ba25", "html_url": "https://github.com/rust-lang/rust/commit/4ae0a8e413a67b9f6c38f09b24f6179e98c1ba25"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "4660ac17b279fabc30bb29142783aaa4d86f1be9", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "patch": "@@ -188,7 +188,7 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     if did.is_local() {\n         cx.cache.exact_paths.insert(did, fqn);\n     } else {\n-        cx.cache.external_paths.insert(did, (fqn, ItemType::from(kind)));\n+        cx.cache.external_paths.insert(did, (fqn, kind));\n     }\n }\n "}, {"sha": "2c6bade11fb951e2cc1bb1b83d226848f211506d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "patch": "@@ -157,7 +157,12 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let (trait_ref, bounds) = *self;\n-        inline::record_extern_fqn(cx, trait_ref.def_id, ItemType::Trait);\n+        let kind = match cx.tcx.def_kind(trait_ref.def_id) {\n+            DefKind::Trait => ItemType::Trait,\n+            DefKind::TraitAlias => ItemType::TraitAlias,\n+            other => bug!(\"`TraitRef` had unexpected kind {:?}\", other),\n+        };\n+        inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n         let path = external_path(\n             cx,\n             cx.tcx.item_name(trait_ref.def_id),"}, {"sha": "a023400a436fdba812e1814a3283a12e79600d1e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "patch": "@@ -340,6 +340,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::EnumItem(..)\n             | clean::TypedefItem(..)\n             | clean::TraitItem(..)\n+            | clean::TraitAliasItem(..)\n             | clean::FunctionItem(..)\n             | clean::ModuleItem(..)\n             | clean::ForeignFunctionItem(..)\n@@ -350,26 +351,43 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::ForeignTypeItem\n             | clean::MacroItem(..)\n             | clean::ProcMacroItem(..)\n-            | clean::VariantItem(..)\n-                if !self.cache.stripped_mod =>\n-            {\n-                // Re-exported items mean that the same id can show up twice\n-                // in the rustdoc ast that we're looking at. We know,\n-                // however, that a re-exported item doesn't show up in the\n-                // `public_items` map, so we can skip inserting into the\n-                // paths map if there was already an entry present and we're\n-                // not a public item.\n-                if !self.cache.paths.contains_key(&item.def_id)\n-                    || self.cache.access_levels.is_public(item.def_id)\n-                {\n-                    self.cache.paths.insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n+            | clean::VariantItem(..) => {\n+                if !self.cache.stripped_mod {\n+                    // Re-exported items mean that the same id can show up twice\n+                    // in the rustdoc ast that we're looking at. We know,\n+                    // however, that a re-exported item doesn't show up in the\n+                    // `public_items` map, so we can skip inserting into the\n+                    // paths map if there was already an entry present and we're\n+                    // not a public item.\n+                    if !self.cache.paths.contains_key(&item.def_id)\n+                        || self.cache.access_levels.is_public(item.def_id)\n+                    {\n+                        self.cache\n+                            .paths\n+                            .insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n+                    }\n                 }\n             }\n             clean::PrimitiveItem(..) => {\n                 self.cache.paths.insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n             }\n \n-            _ => {}\n+            clean::ExternCrateItem { .. }\n+            | clean::ImportItem(..)\n+            | clean::OpaqueTyItem(..)\n+            | clean::ImplItem(..)\n+            | clean::TyMethodItem(..)\n+            | clean::MethodItem(..)\n+            | clean::StructFieldItem(..)\n+            | clean::AssocConstItem(..)\n+            | clean::AssocTypeItem(..)\n+            | clean::StrippedItem(..)\n+            | clean::KeywordItem(..) => {\n+                // FIXME: Do these need handling?\n+                // The person writing this comment doesn't know.\n+                // So would rather leave them to an expert,\n+                // as at least the list is better than `_ => {}`.\n+            }\n         }\n \n         // Maintain the parent stack"}, {"sha": "dea72cdb5fbbd8159bc27b1b20c3b076cd5657d5", "filename": "src/test/rustdoc/trait-alias-mention.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs?ref=fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "patch": "@@ -0,0 +1,9 @@\n+#![feature(trait_alias)]\n+#![feature(ptr_metadata)]\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.this_never_panics.html '//a[@title=\"traitalias core::ptr::metadata::Thin\"]' 'Thin'\n+pub fn this_never_panics<T: std::ptr::Thin>() {\n+    assert_eq!(std::mem::size_of::<&T>(), std::mem::size_of::<usize>())\n+}"}, {"sha": "6cd4a1a0afa085e89f210d1c46138fda15f1194a", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe540ae1bb13d3838d1d5c78b546d96b4d44797e/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "patch": "@@ -19,3 +19,5 @@ pub trait CopyAlias = Copy;\n pub trait Alias2 = Copy + Debug;\n // @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n+// @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n+pub fn bar<T>() where T: Alias2 {}"}]}