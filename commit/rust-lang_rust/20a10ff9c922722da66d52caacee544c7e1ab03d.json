{"sha": "20a10ff9c922722da66d52caacee544c7e1ab03d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTEwZmY5YzkyMjcyMmRhNjZkNTJjYWFjZWU1NDRjN2UxYWIwM2Q=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-09-22T02:48:12Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-09-23T22:26:16Z"}, "message": "Find the cratemap at runtime on windows.", "tree": {"sha": "af654166e0a3851262248d1ff5557a5345e561d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af654166e0a3851262248d1ff5557a5345e561d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a10ff9c922722da66d52caacee544c7e1ab03d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a10ff9c922722da66d52caacee544c7e1ab03d", "html_url": "https://github.com/rust-lang/rust/commit/20a10ff9c922722da66d52caacee544c7e1ab03d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a10ff9c922722da66d52caacee544c7e1ab03d/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d22c0c8e4b32d563abf2aaf5630b089b3564f27", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d22c0c8e4b32d563abf2aaf5630b089b3564f27", "html_url": "https://github.com/rust-lang/rust/commit/2d22c0c8e4b32d563abf2aaf5630b089b3564f27"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "4034d1ef8dd94370e514b9e4ff25e48052f1d7dc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/20a10ff9c922722da66d52caacee544c7e1ab03d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a10ff9c922722da66d52caacee544c7e1ab03d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=20a10ff9c922722da66d52caacee544c7e1ab03d", "patch": "@@ -2981,7 +2981,14 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n             llvm::LLVMAddGlobal(llmod, maptype.to_ref(), buf)\n         }\n     };\n-    lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n+    // On windows we'd like to export the toplevel cratemap\n+    // such that we can find it from libstd.\n+    if targ_cfg.os == session::OsWin32 && \"toplevel\" == mapname {\n+        lib::llvm::SetLinkage(map, lib::llvm::DLLExportLinkage);\n+    } else {\n+        lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n+    }\n+\n     return map;\n }\n \n@@ -3136,6 +3143,26 @@ pub fn trans_crate(sess: session::Session,\n \n     decl_gc_metadata(ccx, llmod_id);\n     fill_crate_map(ccx, ccx.crate_map);\n+\n+    // NOTE win32: wart with exporting crate_map symbol\n+    // We set the crate map (_rust_crate_map_toplevel) to use dll_export\n+    // linkage but that ends up causing the linker to look for a\n+    // __rust_crate_map_toplevel symbol (extra underscore) which it will\n+    // subsequently fail to find. So to mitigate that we just introduce\n+    // an alias from the symbol it expects to the one that actually exists.\n+    if ccx.sess.targ_cfg.os == session::OsWin32 &&\n+       !*ccx.sess.building_library {\n+\n+        let maptype = val_ty(ccx.crate_map).to_ref();\n+\n+        do \"__rust_crate_map_toplevel\".with_c_str |buf| {\n+            unsafe {\n+                llvm::LLVMAddAlias(ccx.llmod, maptype,\n+                                   ccx.crate_map, buf);\n+            }\n+        }\n+    }\n+\n     glue::emit_tydescs(ccx);\n     write_abi_version(ccx);\n     if ccx.sess.opts.debuginfo {"}, {"sha": "f73aa1fad67dce05b1792edfa133a3fc3a88398b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/20a10ff9c922722da66d52caacee544c7e1ab03d/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a10ff9c922722da66d52caacee544c7e1ab03d/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=20a10ff9c922722da66d52caacee544c7e1ab03d", "patch": "@@ -23,8 +23,8 @@ use container::MutableSet;\n #[link_args = \"-undefined dynamic_lookup\"]\n extern {}\n \n+#[cfg(not(stage0), not(windows))]\n extern {\n-    #[cfg(not(stage0))]\n     #[weak_linkage]\n     #[link_name = \"_rust_crate_map_toplevel\"]\n     static CRATE_MAP: CrateMap;\n@@ -48,11 +48,30 @@ struct CrateMap {\n     children: [*CrateMap, ..1]\n }\n \n-#[cfg(not(stage0))]\n+#[cfg(not(stage0), not(windows))]\n pub fn get_crate_map() -> *CrateMap {\n     &'static CRATE_MAP as *CrateMap\n }\n \n+#[cfg(not(stage0), windows)]\n+#[fixed_stack_segment]\n+#[inline(never)]\n+pub fn get_crate_map() -> *CrateMap {\n+    use c_str::ToCStr;\n+    use unstable::dynamic_lib::dl;\n+\n+    let sym = unsafe {\n+        let module = dl::open_internal();\n+        let sym = do \"__rust_crate_map_toplevel\".with_c_str |buf| {\n+            dl::symbol(module, buf)\n+        };\n+        dl::close(module);\n+        sym\n+    };\n+\n+    sym as *CrateMap\n+}\n+\n unsafe fn version(crate_map: *CrateMap) -> i32 {\n     match (*crate_map).version {\n         1 => return 1,"}, {"sha": "41ff79bc8845815db4eda5382c676bb04473eb62", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a10ff9c922722da66d52caacee544c7e1ab03d/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a10ff9c922722da66d52caacee544c7e1ab03d/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=20a10ff9c922722da66d52caacee544c7e1ab03d", "patch": "@@ -138,7 +138,7 @@ mod test {\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-mod dl {\n+pub mod dl {\n     use c_str::ToCStr;\n     use libc;\n     use path;\n@@ -207,7 +207,7 @@ mod dl {\n }\n \n #[cfg(target_os = \"win32\")]\n-mod dl {\n+pub mod dl {\n     use os;\n     use libc;\n     use path;"}]}