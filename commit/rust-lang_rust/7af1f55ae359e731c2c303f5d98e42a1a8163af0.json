{"sha": "7af1f55ae359e731c2c303f5d98e42a1a8163af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjFmNTVhZTM1OWU3MzFjMmMzMDNmNWQ5OGU0MmExYTgxNjNhZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-15T21:00:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-15T21:00:11Z"}, "message": "Auto merge of #84205 - workingjubilee:more-simd-intrin, r=bjorn3\n\nAdd simd_{round,trunc} intrinsics\n\nLLVM supports many functions from math.h in its IR. Many of these\nhave SIMD instructions on various platforms. So, let's add round and\ntrunc so std::arch can use them.\n\nYes, exact comparison is intentional: rounding must always return a\nvalid integer-equal value, except for inf/NAN.", "tree": {"sha": "1f17eb3cf15e1790a83498344208544a2758aee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f17eb3cf15e1790a83498344208544a2758aee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af1f55ae359e731c2c303f5d98e42a1a8163af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af1f55ae359e731c2c303f5d98e42a1a8163af0", "html_url": "https://github.com/rust-lang/rust/commit/7af1f55ae359e731c2c303f5d98e42a1a8163af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af1f55ae359e731c2c303f5d98e42a1a8163af0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60158f4a7cf3e3063df6127d3f0d206921d285b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/60158f4a7cf3e3063df6127d3f0d206921d285b0", "html_url": "https://github.com/rust-lang/rust/commit/60158f4a7cf3e3063df6127d3f0d206921d285b0"}, {"sha": "003b8eadd7a476c51956fe447894532d6e21937e", "url": "https://api.github.com/repos/rust-lang/rust/commits/003b8eadd7a476c51956fe447894532d6e21937e", "html_url": "https://github.com/rust-lang/rust/commit/003b8eadd7a476c51956fe447894532d6e21937e"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "27fc2abedc7e97710bef585ced6dde777dd16ccc", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=7af1f55ae359e731c2c303f5d98e42a1a8163af0", "patch": "@@ -277,5 +277,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         // simd_select\n         // simd_rem\n         // simd_neg\n+        // simd_trunc\n+        // simd_floor\n     }\n }"}, {"sha": "52fab2ea17d8d7800194e32b6dbe47bdca0dcae8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=7af1f55ae359e731c2c303f5d98e42a1a8163af0", "patch": "@@ -1057,8 +1057,10 @@ fn generic_simd_intrinsic(\n             sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n@@ -1083,8 +1085,10 @@ fn generic_simd_intrinsic(\n             | sym::simd_fsin\n             | sym::simd_fcos\n             | sym::simd_fabs\n-            | sym::simd_floor\n             | sym::simd_ceil\n+            | sym::simd_floor\n+            | sym::simd_round\n+            | sym::simd_trunc\n             | sym::simd_fexp\n             | sym::simd_fexp2\n             | sym::simd_flog10"}, {"sha": "c6e822e7b4032f00c73607ffbcc8a6b52e4bb8bd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7af1f55ae359e731c2c303f5d98e42a1a8163af0", "patch": "@@ -1103,6 +1103,7 @@ symbols! {\n         simd_reduce_or,\n         simd_reduce_xor,\n         simd_rem,\n+        simd_round,\n         simd_saturating_add,\n         simd_saturating_sub,\n         simd_scatter,\n@@ -1111,6 +1112,7 @@ symbols! {\n         simd_shl,\n         simd_shr,\n         simd_sub,\n+        simd_trunc,\n         simd_xor,\n         since,\n         sinf32,"}, {"sha": "5741b6824b5d70662efa746791b3f043a05aae0b", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af1f55ae359e731c2c303f5d98e42a1a8163af0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=7af1f55ae359e731c2c303f5d98e42a1a8163af0", "patch": "@@ -407,8 +407,8 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         | sym::simd_fpow\n         | sym::simd_saturating_add\n         | sym::simd_saturating_sub => (1, vec![param(0), param(0)], param(0)),\n-        sym::simd_neg => (1, vec![param(0)], param(0)),\n-        sym::simd_fsqrt\n+        sym::simd_neg\n+        | sym::simd_fsqrt\n         | sym::simd_fsin\n         | sym::simd_fcos\n         | sym::simd_fexp\n@@ -417,8 +417,10 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         | sym::simd_flog10\n         | sym::simd_flog\n         | sym::simd_fabs\n+        | sym::simd_ceil\n         | sym::simd_floor\n-        | sym::simd_ceil => (1, vec![param(0)], param(0)),\n+        | sym::simd_round\n+        | sym::simd_trunc => (1, vec![param(0)], param(0)),\n         sym::simd_fpowi => (1, vec![param(0), tcx.types.i32], param(0)),\n         sym::simd_fma => (1, vec![param(0), param(0), param(0)], param(0)),\n         sym::simd_gather => (3, vec![param(0), param(1), param(2)], param(0)),"}, {"sha": "7a4f7466559ffdc69a7cf0b389825bcee9fa9ac0", "filename": "src/test/ui/simd/simd-intrinsic-float-math.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7af1f55ae359e731c2c303f5d98e42a1a8163af0/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af1f55ae359e731c2c303f5d98e42a1a8163af0/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-math.rs?ref=7af1f55ae359e731c2c303f5d98e42a1a8163af0", "patch": "@@ -20,16 +20,20 @@ extern \"platform-intrinsic\" {\n     fn simd_fabs<T>(x: T) -> T;\n     fn simd_fsin<T>(x: T) -> T;\n     fn simd_fcos<T>(x: T) -> T;\n-    fn simd_ceil<T>(x: T) -> T;\n     fn simd_fexp<T>(x: T) -> T;\n     fn simd_fexp2<T>(x: T) -> T;\n-    fn simd_floor<T>(x: T) -> T;\n     fn simd_fma<T>(x: T, y: T, z: T) -> T;\n     fn simd_flog<T>(x: T) -> T;\n     fn simd_flog10<T>(x: T) -> T;\n     fn simd_flog2<T>(x: T) -> T;\n     fn simd_fpow<T>(x: T, y: T) -> T;\n     fn simd_fpowi<T>(x: T, y: i32) -> T;\n+\n+    // rounding functions\n+    fn simd_ceil<T>(x: T) -> T;\n+    fn simd_floor<T>(x: T) -> T;\n+    fn simd_round<T>(x: T) -> T;\n+    fn simd_trunc<T>(x: T) -> T;\n }\n \n macro_rules! assert_approx_eq_f32 {\n@@ -64,18 +68,12 @@ fn main() {\n         let r = simd_fcos(z);\n         assert_approx_eq!(x, r);\n \n-        let r = simd_ceil(h);\n-        assert_approx_eq!(x, r);\n-\n         let r = simd_fexp(z);\n         assert_approx_eq!(x, r);\n \n         let r = simd_fexp2(z);\n         assert_approx_eq!(x, r);\n \n-        let r = simd_floor(h);\n-        assert_approx_eq!(z, r);\n-\n         let r = simd_fma(x, h, h);\n         assert_approx_eq!(x, r);\n \n@@ -99,5 +97,18 @@ fn main() {\n \n         let r = simd_fsin(z);\n         assert_approx_eq!(z, r);\n+\n+        // rounding functions\n+        let r = simd_floor(h);\n+        assert_eq!(z, r);\n+\n+        let r = simd_ceil(h);\n+        assert_eq!(x, r);\n+\n+        let r = simd_round(h);\n+        assert_eq!(x, r);\n+\n+        let r = simd_trunc(h);\n+        assert_eq!(z, r);\n     }\n }"}]}