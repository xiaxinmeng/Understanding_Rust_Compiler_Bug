{"sha": "7803955cae3dffb37c315e95764df8e949eea590", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MDM5NTVjYWUzZGZmYjM3YzMxNWU5NTc2NGRmOGU5NDllZWE1OTA=", "commit": {"author": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-06-14T12:17:53Z"}, "committer": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-06-14T12:17:53Z"}, "message": "Use `try_from_secs_*` in `Duration::from_secs_*` functions.\n\n`Duration::from_secs_{f32, f64}` now use the results from the\nnon-panicking functions and unwrap it.", "tree": {"sha": "5df4be77fb756fc09038b8070abe112a93ea3a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df4be77fb756fc09038b8070abe112a93ea3a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7803955cae3dffb37c315e95764df8e949eea590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7803955cae3dffb37c315e95764df8e949eea590", "html_url": "https://github.com/rust-lang/rust/commit/7803955cae3dffb37c315e95764df8e949eea590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7803955cae3dffb37c315e95764df8e949eea590/comments", "author": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "html_url": "https://github.com/rust-lang/rust/commit/c2c1ca071f242c3e84775bba2a05a6c924f44b1e"}], "stats": {"total": 36, "additions": 6, "deletions": 30}, "files": [{"sha": "cc37000bb14ce1f8f06ce55e579efd93c8a91ae3", "filename": "library/core/src/time.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7803955cae3dffb37c315e95764df8e949eea590/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7803955cae3dffb37c315e95764df8e949eea590/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=7803955cae3dffb37c315e95764df8e949eea590", "patch": "@@ -679,21 +679,9 @@ impl Duration {\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n-        const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f64;\n-        let nanos = secs * (NANOS_PER_SEC as f64);\n-        if !nanos.is_finite() {\n-            panic!(\"got non-finite value when converting float to duration\");\n-        }\n-        if nanos >= MAX_NANOS_F64 {\n-            panic!(\"overflow when converting float to duration\");\n-        }\n-        if nanos < 0.0 {\n-            panic!(\"underflow when converting float to duration\");\n-        }\n-        let nanos = nanos as u128;\n-        Duration {\n-            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+        match Duration::try_from_secs_f64(secs) {\n+            Ok(v) => v,\n+            Err(e) => crate::panicking::panic(e.description()),\n         }\n     }\n \n@@ -752,21 +740,9 @@ impl Duration {\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n-        const MAX_NANOS_F32: f32 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f32;\n-        let nanos = secs * (NANOS_PER_SEC as f32);\n-        if !nanos.is_finite() {\n-            panic!(\"got non-finite value when converting float to duration\");\n-        }\n-        if nanos >= MAX_NANOS_F32 {\n-            panic!(\"overflow when converting float to duration\");\n-        }\n-        if nanos < 0.0 {\n-            panic!(\"underflow when converting float to duration\");\n-        }\n-        let nanos = nanos as u128;\n-        Duration {\n-            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+        match Duration::try_from_secs_f32(secs) {\n+            Ok(v) => v,\n+            Err(e) => crate::panicking::panic(e.description()),\n         }\n     }\n "}]}