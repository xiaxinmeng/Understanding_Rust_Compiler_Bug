{"sha": "dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZThiZDEwZmU2NzYzZTBhMWQ1ZDU1ZmEyNTc0ZWNiYTI3ZDNlMmU=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-09-25T00:19:56Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-09-25T00:27:39Z"}, "message": "Move ty_align and ty_size out of most C ABI code\n\ns390x's C ABI ty_align and ty_size are not moved because the\nimplementation of ty_align varies in an atypical pattern: it calls\nty_size for the llvm::Vector type kind. ty_size then cannot be moved\nsince it indirectly calls ty_align through align.", "tree": {"sha": "b3a91a91672f7a51fd38503503cf5d25ca0d3160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a91a91672f7a51fd38503503cf5d25ca0d3160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "html_url": "https://github.com/rust-lang/rust/commit/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c2fdd64f3f4acc358b653616de6034eced49b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c2fdd64f3f4acc358b653616de6034eced49b5", "html_url": "https://github.com/rust-lang/rust/commit/05c2fdd64f3f4acc358b653616de6034eced49b5"}], "stats": {"total": 498, "additions": 103, "deletions": 395}, "files": [{"sha": "2675fa67502502c8e9544a01929a5a1a2aa10117", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::{self, ValueRef};\n+use llvm::{self, ValueRef, Integer, Pointer, Float, Double, Struct, Array, Vector};\n use base;\n use build::AllocaFcx;\n use common::{type_is_fat_ptr, BlockAndBuilder, C_uint};\n@@ -598,3 +598,73 @@ impl FnType {\n         }\n     }\n }\n+\n+pub fn align_up_to(off: usize, a: usize) -> usize {\n+    return (off + a - 1) / a * a;\n+}\n+\n+fn align(off: usize, ty: Type, pointer: usize) -> usize {\n+    let a = ty_align(ty, pointer);\n+    return align_up_to(off, a);\n+}\n+\n+pub fn ty_align(ty: Type, pointer: usize) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => pointer,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                1\n+            } else {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t, pointer)))\n+            }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt, pointer)\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            ty_align(elt, pointer) * len\n+        }\n+        _ => bug!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+pub fn ty_size(ty: Type, pointer: usize) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => pointer,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t, pointer))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| {\n+                    align(s, *t, pointer) + ty_size(*t, pointer)\n+                });\n+                align(size, ty, pointer)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt, pointer);\n+            len * eltsz\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt, pointer);\n+            len * eltsz\n+        },\n+        _ => bug!(\"ty_size: unhandled type\")\n+    }\n+}"}, {"sha": "59a84439950bad2876ab8a18dd216bdafcc02b82", "filename": "src/librustc_trans/cabi_aarch64.rs", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_aarch64.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -11,78 +11,12 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use abi::{FnType, ArgType};\n+use abi::{self, FnType, ArgType};\n use context::CrateContext;\n use type_::Type;\n \n-use std::cmp;\n-\n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n-fn align(off: usize, ty: Type) -> usize {\n-    let a = ty_align(ty);\n-    return align_up_to(off, a);\n-}\n-\n-fn ty_align(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 8,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                1\n-            } else {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n-            }\n-        }\n-        Array => {\n-            let elt = ty.element_type();\n-            ty_align(elt)\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            ty_align(elt) * len\n-        }\n-        _ => bug!(\"ty_align: unhandled type\")\n-    }\n-}\n-\n fn ty_size(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 8,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n-            } else {\n-                let str_tys = ty.field_types();\n-                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                align(size, ty)\n-            }\n-        }\n-        Array => {\n-            let len = ty.array_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        _ => bug!(\"ty_size: unhandled type\")\n-    }\n+    abi::ty_size(ty, 8)\n }\n \n fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> {"}, {"sha": "93d43f7d96116c5095fddd65f18e11d6ba92047d", "filename": "src/librustc_trans/cabi_arm.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_arm.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use abi::{FnType, ArgType};\n+use abi::{self, align_up_to, FnType, ArgType};\n use context::CrateContext;\n use type_::Type;\n \n@@ -24,40 +24,13 @@ pub enum Flavor {\n \n type TyAlignFn = fn(ty: Type) -> usize;\n \n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n fn align(off: usize, ty: Type, align_fn: TyAlignFn) -> usize {\n     let a = align_fn(ty);\n     return align_up_to(off, a);\n }\n \n fn general_ty_align(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 4,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                1\n-            } else {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(1, |a, t| cmp::max(a, general_ty_align(*t)))\n-            }\n-        }\n-        Array => {\n-            let elt = ty.element_type();\n-            general_ty_align(elt)\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            general_ty_align(elt) * len\n-        }\n-        _ => bug!(\"ty_align: unhandled type\")\n-    }\n+    abi::ty_align(ty, 4)\n }\n \n // For more information see:"}, {"sha": "25fe53e7ef40f88ab96ba44d3ed6198a9af6fd24", "filename": "src/librustc_trans/cabi_mips.rs", "status": "modified", "additions": 4, "deletions": 64, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -13,77 +13,17 @@\n use libc::c_uint;\n use std::cmp;\n use llvm;\n-use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use abi::{ArgType, FnType};\n+use llvm::{Integer, Pointer, Float, Double, Vector};\n+use abi::{self, align_up_to, ArgType, FnType};\n use context::CrateContext;\n use type_::Type;\n \n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n-fn align(off: usize, ty: Type) -> usize {\n-    let a = ty_align(ty);\n-    return align_up_to(off, a);\n-}\n-\n fn ty_align(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 4,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-          if ty.is_packed() {\n-            1\n-          } else {\n-            let str_tys = ty.field_types();\n-            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n-          }\n-        }\n-        Array => {\n-            let elt = ty.element_type();\n-            ty_align(elt)\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            ty_align(elt) * len\n-        }\n-        _ => bug!(\"ty_align: unhandled type\")\n-    }\n+    abi::ty_align(ty, 4)\n }\n \n fn ty_size(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 4,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n-            } else {\n-                let str_tys = ty.field_types();\n-                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                align(size, ty)\n-            }\n-        }\n-        Array => {\n-            let len = ty.array_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        _ => bug!(\"ty_size: unhandled type\")\n-    }\n+    abi::ty_size(ty, 4)\n }\n \n fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {"}, {"sha": "e6b500c88dc7ac1be0916491e5afb0be7ecba08f", "filename": "src/librustc_trans/cabi_mips64.rs", "status": "modified", "additions": 4, "deletions": 64, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_mips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_mips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips64.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -13,77 +13,17 @@\n use libc::c_uint;\n use std::cmp;\n use llvm;\n-use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use abi::{ArgType, FnType};\n+use llvm::{Integer, Pointer, Float, Double, Vector};\n+use abi::{self, align_up_to, ArgType, FnType};\n use context::CrateContext;\n use type_::Type;\n \n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n-fn align(off: usize, ty: Type) -> usize {\n-    let a = ty_align(ty);\n-    return align_up_to(off, a);\n-}\n-\n fn ty_align(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 8,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-          if ty.is_packed() {\n-            1\n-          } else {\n-            let str_tys = ty.field_types();\n-            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n-          }\n-        }\n-        Array => {\n-            let elt = ty.element_type();\n-            ty_align(elt)\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            ty_align(elt) * len\n-        }\n-        _ => bug!(\"ty_align: unhandled type\")\n-    }\n+    abi::ty_align(ty, 8)\n }\n \n fn ty_size(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 8,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n-            } else {\n-                let str_tys = ty.field_types();\n-                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                align(size, ty)\n-            }\n-        }\n-        Array => {\n-            let len = ty.array_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        Vector => {\n-            let len = ty.vector_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        _ => bug!(\"ty_size: unhandled type\")\n-    }\n+    abi::ty_size(ty, 8)\n }\n \n fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {"}, {"sha": "4e1d7a93378270dfb006d8113c1417ecad0dbfc0", "filename": "src/librustc_trans/cabi_powerpc.rs", "status": "modified", "additions": 10, "deletions": 51, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -10,67 +10,26 @@\n \n use libc::c_uint;\n use llvm;\n-use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n-use abi::{FnType, ArgType};\n+use llvm::{Integer, Pointer, Float, Double, Vector};\n+use abi::{self, align_up_to, FnType, ArgType};\n use context::CrateContext;\n use type_::Type;\n \n use std::cmp;\n \n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n-fn align(off: usize, ty: Type) -> usize {\n-    let a = ty_align(ty);\n-    return align_up_to(off, a);\n-}\n-\n fn ty_align(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 4,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-          if ty.is_packed() {\n-            1\n-          } else {\n-            let str_tys = ty.field_types();\n-            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n-          }\n-        }\n-        Array => {\n-            let elt = ty.element_type();\n-            ty_align(elt)\n-        }\n-        _ => bug!(\"ty_size: unhandled type\")\n+    if ty.kind() == Vector {\n+        bug!(\"ty_size: unhandled type\")\n+    } else {\n+        abi::ty_align(ty, 4)\n     }\n }\n \n fn ty_size(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 4,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n-            } else {\n-                let str_tys = ty.field_types();\n-                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                align(size, ty)\n-            }\n-        }\n-        Array => {\n-            let len = ty.array_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        _ => bug!(\"ty_size: unhandled type\")\n+    if ty.kind() == Vector {\n+        bug!(\"ty_size: unhandled type\")\n+    } else {\n+        abi::ty_size(ty, 4)\n     }\n }\n "}, {"sha": "cdc7c1fd1afb379e937c3825853d832260e5fb9e", "filename": "src/librustc_trans/cabi_powerpc64.rs", "status": "modified", "additions": 6, "deletions": 57, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_powerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_powerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc64.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -15,67 +15,16 @@\n // Alignment of 128 bit types is not currently handled, this will\n // need to be fixed when PowerPC vector support is added.\n \n-use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n-use abi::{FnType, ArgType};\n+use llvm::{Integer, Pointer, Float, Double, Struct, Vector, Array};\n+use abi::{self, FnType, ArgType};\n use context::CrateContext;\n use type_::Type;\n \n-use std::cmp;\n-\n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n-fn align(off: usize, ty: Type) -> usize {\n-    let a = ty_align(ty);\n-    return align_up_to(off, a);\n-}\n-\n-fn ty_align(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 8,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                1\n-            } else {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n-            }\n-        }\n-        Array => {\n-            let elt = ty.element_type();\n-            ty_align(elt)\n-        }\n-        _ => bug!(\"ty_align: unhandled type\")\n-    }\n-}\n-\n fn ty_size(ty: Type) -> usize {\n-    match ty.kind() {\n-        Integer => ((ty.int_width() as usize) + 7) / 8,\n-        Pointer => 8,\n-        Float => 4,\n-        Double => 8,\n-        Struct => {\n-            if ty.is_packed() {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n-            } else {\n-                let str_tys = ty.field_types();\n-                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                align(size, ty)\n-            }\n-        }\n-        Array => {\n-            let len = ty.array_length();\n-            let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n-            len * eltsz\n-        }\n-        _ => bug!(\"ty_size: unhandled type\")\n+    if ty.kind() == Vector {\n+        bug!(\"ty_size: unhandled type\")\n+    } else {\n+        abi::ty_size(ty, 8)\n     }\n }\n "}, {"sha": "5a666c6083d16f4649cc9292ea8f878a35aa3e2a", "filename": "src/librustc_trans/cabi_s390x.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_s390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_s390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_s390x.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -12,16 +12,12 @@\n // for a pre-z13 machine or using -mno-vx.\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use abi::{FnType, ArgType};\n+use abi::{align_up_to, FnType, ArgType};\n use context::CrateContext;\n use type_::Type;\n \n use std::cmp;\n \n-fn align_up_to(off: usize, a: usize) -> usize {\n-    return (off + a - 1) / a * a;\n-}\n-\n fn align(off: usize, ty: Type) -> usize {\n     let a = ty_align(ty);\n     return align_up_to(off, a);"}, {"sha": "33990148c8b7de13d4dbc1e4a39de610d9cd58f3", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 3, "deletions": 56, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=dfe8bd10fe6763e0a1d5d55fa2574ecba27d3e2e", "patch": "@@ -16,12 +16,10 @@ use self::RegClass::*;\n \n use llvm::{Integer, Pointer, Float, Double};\n use llvm::{Struct, Array, Attribute, Vector};\n-use abi::{ArgType, FnType};\n+use abi::{self, ArgType, FnType};\n use context::CrateContext;\n use type_::Type;\n \n-use std::cmp;\n-\n #[derive(Clone, Copy, PartialEq)]\n enum RegClass {\n     NoClass,\n@@ -90,62 +88,11 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n     }\n \n     fn ty_align(ty: Type) -> usize {\n-        match ty.kind() {\n-            Integer => ((ty.int_width() as usize) + 7) / 8,\n-            Pointer => 8,\n-            Float => 4,\n-            Double => 8,\n-            Struct => {\n-              if ty.is_packed() {\n-                1\n-              } else {\n-                let str_tys = ty.field_types();\n-                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n-              }\n-            }\n-            Array => {\n-                let elt = ty.element_type();\n-                ty_align(elt)\n-            }\n-            Vector => {\n-                let len = ty.vector_length();\n-                let elt = ty.element_type();\n-                ty_align(elt) * len\n-            }\n-            _ => bug!(\"ty_align: unhandled type\")\n-        }\n+        abi::ty_align(ty, 8)\n     }\n \n     fn ty_size(ty: Type) -> usize {\n-        match ty.kind() {\n-            Integer => (ty.int_width() as usize + 7) / 8,\n-            Pointer => 8,\n-            Float => 4,\n-            Double => 8,\n-            Struct => {\n-                let str_tys = ty.field_types();\n-                if ty.is_packed() {\n-                    str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n-                } else {\n-                    let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                    align(size, ty)\n-                }\n-            }\n-            Array => {\n-                let len = ty.array_length();\n-                let elt = ty.element_type();\n-                let eltsz = ty_size(elt);\n-                len * eltsz\n-            }\n-            Vector => {\n-                let len = ty.vector_length();\n-                let elt = ty.element_type();\n-                let eltsz = ty_size(elt);\n-                len * eltsz\n-            }\n-\n-            _ => bug!(\"ty_size: unhandled type\")\n-        }\n+        abi::ty_size(ty, 8)\n     }\n \n     fn all_mem(cls: &mut [RegClass]) {"}]}