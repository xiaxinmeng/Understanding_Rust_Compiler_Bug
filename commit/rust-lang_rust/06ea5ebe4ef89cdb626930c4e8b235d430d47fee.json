{"sha": "06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "node_id": "C_kwDOAAsO6NoAKDA2ZWE1ZWJlNGVmODljZGI2MjY5MzBjNGU4YjIzNWQ0MzBkNDdmZWU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:27:43Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:27:43Z"}, "message": "Move Result::expect_err and Result::unwrap_err", "tree": {"sha": "0d8338ec8c7e120060bedd5e43997ace3f6a520b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8338ec8c7e120060bedd5e43997ace3f6a520b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+h8ACgkQ+boUO5X/\nbYLAGRAArrAl/dCWgpqvMX9AneGctpKRKXbY652fRB2ecB4cuAma6nQcgdBc6j1f\nDfEBkyYuJ4n13SvEn2VRBxg9QVJnJ9YKik4zao7AiX/NnQahnJh6Dx3JflTTvUzw\nxUEMHEZ+fVPibEqV/VfccOiStOTR1Dj9Kk4D2+eYdllw2Z/sMihdrYfd6SPmV7+c\n2AHEeSF7ehnNqpAY7oL7e52Zo5e3LVa7yiUS1VEdLtyb30jhwHTVqVJESANGjlgP\nnFq5aS1v11xunRvBtHAiz5EwRMAwnx383GUkyMKkfdlXVmsNwlziPLr/xR4gfnQK\nNcFZyU2gasFCUaT18nql5Z2WDAunPtYqR1IUDDWBe2QswaNftCpgJfNNCoEnl+Y5\nwpG2nsQj9ludXfVUxR08IfHpevlrMKGakrpHKlSFRZ3HIOpQS8tZxDeN8olKJCXk\nE6K//Q6Xcs+pLlepOp5uRH1OaXCSYfL4iFdT8Dd1E+XxigvqOLCXq7yjgqNGt2gz\nUpTn8ZObA2DDDCQEtG8MK/QOwKo09Maj4BrKxXIm9DzpoFaKiR3/mhgUakYJCrt3\n3rcgP2p03yqLq+hco08MjC3ojeVlf+UDUQFn/HCaa2KPe0pRWQTYjoDNAm4fN2p2\ndpsesUjYbHVHKD4fg8NfKA3d7YU6JdGgrbVaWgs5oQZFscgXpVc=\n=ZGQO\n-----END PGP SIGNATURE-----", "payload": "tree 0d8338ec8c7e120060bedd5e43997ace3f6a520b\nparent aa2aca2c8c9b5f07318350ecebcd535d79d0deeb\nauthor David Tolnay <dtolnay@gmail.com> 1640888863 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640888863 -0800\n\nMove Result::expect_err and Result::unwrap_err\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "html_url": "https://github.com/rust-lang/rust/commit/06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ea5ebe4ef89cdb626930c4e8b235d430d47fee/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "html_url": "https://github.com/rust-lang/rust/commit/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb"}], "stats": {"total": 116, "additions": 60, "deletions": 56}, "files": [{"sha": "9cd949f7a1264660c3674a9bfed7def82bf3cac8", "filename": "library/core/src/result.rs", "status": "modified", "additions": 60, "deletions": 56, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/06ea5ebe4ef89cdb626930c4e8b235d430d47fee/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ea5ebe4ef89cdb626930c4e8b235d430d47fee/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "patch": "@@ -1114,6 +1114,66 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Returns the contained [`Err`] value, consuming the `self` value.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is an [`Ok`], with a panic message including the\n+    /// passed message, and the content of the [`Ok`].\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n+    pub fn expect_err(self, msg: &str) -> E\n+    where\n+        T: fmt::Debug,\n+    {\n+        match self {\n+            Ok(t) => unwrap_failed(msg, &t),\n+            Err(e) => e,\n+        }\n+    }\n+\n+    /// Returns the contained [`Err`] value, consuming the `self` value.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is an [`Ok`], with a custom panic message provided\n+    /// by the [`Ok`]'s value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// x.unwrap_err(); // panics with `2`\n+    /// ```\n+    ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn unwrap_err(self) -> E\n+    where\n+        T: fmt::Debug,\n+    {\n+        match self {\n+            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n+            Err(e) => e,\n+        }\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -1439,62 +1499,6 @@ impl<T: Clone, E> Result<&mut T, E> {\n     }\n }\n \n-impl<T: fmt::Debug, E> Result<T, E> {\n-    /// Returns the contained [`Err`] value, consuming the `self` value.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is an [`Ok`], with a panic message including the\n-    /// passed message, and the content of the [`Ok`].\n-    ///\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```should_panic\n-    /// let x: Result<u32, &str> = Ok(10);\n-    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n-    pub fn expect_err(self, msg: &str) -> E {\n-        match self {\n-            Ok(t) => unwrap_failed(msg, &t),\n-            Err(e) => e,\n-        }\n-    }\n-\n-    /// Returns the contained [`Err`] value, consuming the `self` value.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is an [`Ok`], with a custom panic message provided\n-    /// by the [`Ok`]'s value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```should_panic\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// x.unwrap_err(); // panics with `2`\n-    /// ```\n-    ///\n-    /// ```\n-    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_err(self) -> E {\n-        match self {\n-            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n-            Err(e) => e,\n-        }\n-    }\n-}\n-\n #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n impl<T, E: Into<!>> Result<T, E> {\n     /// Returns the contained [`Ok`] value, but never panics."}]}