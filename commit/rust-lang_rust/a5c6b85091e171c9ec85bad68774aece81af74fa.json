{"sha": "a5c6b85091e171c9ec85bad68774aece81af74fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzZiODUwOTFlMTcxYzllYzg1YmFkNjg3NzRhZWNlODFhZjc0ZmE=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-25T23:42:19Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-25T23:42:19Z"}, "message": "libstd: Implement some missing tcp methods.", "tree": {"sha": "1d87e6872d135a662cc8364686efc04eccdc74a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d87e6872d135a662cc8364686efc04eccdc74a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c6b85091e171c9ec85bad68774aece81af74fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c6b85091e171c9ec85bad68774aece81af74fa", "html_url": "https://github.com/rust-lang/rust/commit/a5c6b85091e171c9ec85bad68774aece81af74fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c6b85091e171c9ec85bad68774aece81af74fa/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005ea3b17375584f823c51d141248e3bcbc04115", "url": "https://api.github.com/repos/rust-lang/rust/commits/005ea3b17375584f823c51d141248e3bcbc04115", "html_url": "https://github.com/rust-lang/rust/commit/005ea3b17375584f823c51d141248e3bcbc04115"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "728ee4ba035f9f4867e4f1fefd02e24f95e10616", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5c6b85091e171c9ec85bad68774aece81af74fa/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c6b85091e171c9ec85bad68774aece81af74fa/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=a5c6b85091e171c9ec85bad68774aece81af74fa", "patch": "@@ -52,18 +52,18 @@ pub trait IoFactory {\n \n pub trait RtioTcpListener : RtioSocket {\n     fn accept(&mut self) -> Result<~RtioTcpStreamObject, IoError>;\n-    fn accept_simultaneously(&mut self);\n-    fn dont_accept_simultaneously(&mut self);\n+    fn accept_simultaneously(&mut self) -> Result<(), IoError>;\n+    fn dont_accept_simultaneously(&mut self) -> Result<(), IoError>;\n }\n \n pub trait RtioTcpStream : RtioSocket {\n     fn read(&mut self, buf: &mut [u8]) -> Result<uint, IoError>;\n     fn write(&mut self, buf: &[u8]) -> Result<(), IoError>;\n     fn peer_name(&mut self) -> Result<IpAddr, IoError>;\n-    fn control_congestion(&mut self);\n-    fn nodelay(&mut self);\n-    fn keepalive(&mut self, delay_in_seconds: uint);\n-    fn letdie(&mut self);\n+    fn control_congestion(&mut self) -> Result<(), IoError>;\n+    fn nodelay(&mut self) -> Result<(), IoError>;\n+    fn keepalive(&mut self, delay_in_seconds: uint) -> Result<(), IoError>;\n+    fn letdie(&mut self) -> Result<(), IoError>;\n }\n \n pub trait RtioSocket {"}, {"sha": "203248c448344c3e1a48bfae4d89dc219c94b02b", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a5c6b85091e171c9ec85bad68774aece81af74fa/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c6b85091e171c9ec85bad68774aece81af74fa/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=a5c6b85091e171c9ec85bad68774aece81af74fa", "patch": "@@ -15,7 +15,7 @@ use cell::Cell;\n use cast;\n use cast::transmute;\n use clone::Clone;\n-use libc::c_void;\n+use libc::{c_int, c_uint, c_void};\n use rt::io::IoError;\n use rt::io::net::ip::IpAddr;\n use rt::uv::*;\n@@ -404,9 +404,27 @@ impl RtioTcpListener for UvTcpListener {\n         return self.incoming_streams.recv();\n     }\n \n-    // XXX implement\n-    fn accept_simultaneously(&mut self) { fail!(); }\n-    fn dont_accept_simultaneously(&mut self) { fail!(); }\n+    fn accept_simultaneously(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::rust_uv_tcp_simultaneous_accepts(self.watcher.native_handle(), 1 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(self.watcher, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn dont_accept_simultaneously(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::rust_uv_tcp_simultaneous_accepts(self.watcher.native_handle(), 0 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(self.watcher, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n }\n \n pub struct UvTcpStream(TcpWatcher);\n@@ -507,11 +525,50 @@ impl RtioTcpStream for UvTcpStream {\n         socket_name(TcpPeer, **self)\n     }\n \n-    // XXX implement\n-    fn control_congestion(&mut self) { fail!(); }\n-    fn nodelay(&mut self) { fail!(); }\n-    fn keepalive(&mut self, _delay_in_seconds: uint) { fail!(); }\n-    fn letdie(&mut self) { fail!(); }\n+    fn control_congestion(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::rust_uv_tcp_nodelay(self.native_handle(), 0 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn nodelay(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::rust_uv_tcp_nodelay(self.native_handle(), 1 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn keepalive(&mut self, delay_in_seconds: uint) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::rust_uv_tcp_keepalive(self.native_handle(), 1 as c_int,\n+                                        delay_in_seconds as c_uint)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn letdie(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::rust_uv_tcp_keepalive(self.native_handle(), 0 as c_int, 0 as c_uint)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n }\n \n pub struct UvUdpSocket(UdpWatcher);"}]}