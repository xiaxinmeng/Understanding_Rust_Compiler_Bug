{"sha": "453e2423e6238283acae39007741e0b122fdb191", "node_id": "C_kwDOAAsO6NoAKDQ1M2UyNDIzZTYyMzgyODNhY2FlMzkwMDc3NDFlMGIxMjJmZGIxOTE", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-11-04T16:56:04Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-11-16T18:52:58Z"}, "message": "Improve suggestion for unit Option/Result at the end of a block.", "tree": {"sha": "6429508372399da58abc9bb50b9d7489db5dbb18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6429508372399da58abc9bb50b9d7489db5dbb18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/453e2423e6238283acae39007741e0b122fdb191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/453e2423e6238283acae39007741e0b122fdb191", "html_url": "https://github.com/rust-lang/rust/commit/453e2423e6238283acae39007741e0b122fdb191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/453e2423e6238283acae39007741e0b122fdb191/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "483cff7ed3a3121e6644bbcb9011a762cf871d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/483cff7ed3a3121e6644bbcb9011a762cf871d97", "html_url": "https://github.com/rust-lang/rust/commit/483cff7ed3a3121e6644bbcb9011a762cf871d97"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "fbbaf9eeef9b51d2985083a933dbbef5377fd73b", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/453e2423e6238283acae39007741e0b122fdb191/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453e2423e6238283acae39007741e0b122fdb191/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=453e2423e6238283acae39007741e0b122fdb191", "patch": "@@ -199,6 +199,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return;\n             }\n \n+            // If the expression is of type () and it's the return expression of a block,\n+            // we suggest adding a separate return expression instead.\n+            // (To avoid things like suggesting `Ok(while .. { .. })`.)\n+            if expr_ty.is_unit() {\n+                if let Some(hir::Node::Block(&hir::Block {\n+                    span: block_span, expr: Some(e), ..\n+                })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+                {\n+                    if e.hir_id == expr.hir_id {\n+                        if let Some(span) = expr.span.find_ancestor_inside(block_span) {\n+                            let return_suggestions =\n+                                if self.tcx.is_diagnostic_item(sym::Result, expected_adt.did) {\n+                                    vec![\"Ok(())\".to_string()]\n+                                } else if self.tcx.is_diagnostic_item(sym::Option, expected_adt.did)\n+                                {\n+                                    vec![\"None\".to_string(), \"Some(())\".to_string()]\n+                                } else {\n+                                    return;\n+                                };\n+                            if let Some(indent) =\n+                                self.tcx.sess.source_map().indentation_before(span.shrink_to_lo())\n+                            {\n+                                // Add a semicolon, except after `}`.\n+                                let semicolon =\n+                                    match self.tcx.sess.source_map().span_to_snippet(span) {\n+                                        Ok(s) if s.ends_with('}') => \"\",\n+                                        _ => \";\",\n+                                    };\n+                                err.multipart_suggestions(\n+                                    \"try adding an expression at the end of the block\",\n+                                    return_suggestions.into_iter().map(|r| {\n+                                        vec![(\n+                                            span.shrink_to_hi(),\n+                                            format!(\"{}\\n{}{}\", semicolon, indent, r),\n+                                        )]\n+                                    }),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+\n             let mut compatible_variants = expected_adt\n                 .variants\n                 .iter()"}]}