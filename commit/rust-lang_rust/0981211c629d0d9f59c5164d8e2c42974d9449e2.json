{"sha": "0981211c629d0d9f59c5164d8e2c42974d9449e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ODEyMTFjNjI5ZDBkOWY1OWM1MTY0ZDhlMmM0Mjk3NGQ5NDQ5ZTI=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-15T23:21:28Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-23T00:30:39Z"}, "message": "hard feature-gate for #[must_use] on functions\n\nWe'll actually want a new \"soft\" warning-only gate to maintain\nbackwards-compatibility, but it's cleaner to start out with the established,\nwell-understood gate before implementing the alternative warn-only behavior in\na later commit.\n\nThis is in the matter of #43302.", "tree": {"sha": "82a1f21fc770c75b87e22bfdaffeee07f622c257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a1f21fc770c75b87e22bfdaffeee07f622c257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0981211c629d0d9f59c5164d8e2c42974d9449e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0981211c629d0d9f59c5164d8e2c42974d9449e2", "html_url": "https://github.com/rust-lang/rust/commit/0981211c629d0d9f59c5164d8e2c42974d9449e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0981211c629d0d9f59c5164d8e2c42974d9449e2/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "url": "https://api.github.com/repos/rust-lang/rust/commits/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b", "html_url": "https://github.com/rust-lang/rust/commit/469a6f9bd9aef394c5cff6b3bc41b8c520f9515b"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "cbc4ebe90fd091070c9ec648f8b049d8905254df", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=0981211c629d0d9f59c5164d8e2c42974d9449e2", "patch": "@@ -160,21 +160,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n-        let maybe_def = match expr.node {\n-            hir::ExprCall(ref callee, _) => {\n-                match callee.node {\n-                    hir::ExprPath(ref qpath) => Some(cx.tables.qpath_def(qpath, callee.hir_id)),\n-                    _ => None\n-                }\n-            },\n-            hir::ExprMethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n-            },\n-            _ => { None }\n-        };\n-        if let Some(def) = maybe_def {\n-            let def_id = def.def_id();\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+        if cx.tcx.sess.features.borrow().fn_must_use {\n+            let maybe_def = match expr.node {\n+                hir::ExprCall(ref callee, _) => {\n+                    match callee.node {\n+                        hir::ExprPath(ref qpath) => {\n+                            Some(cx.tables.qpath_def(qpath, callee.hir_id))\n+                        },\n+                        _ => None\n+                    }\n+                },\n+                hir::ExprMethodCall(..) => {\n+                    cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                },\n+                _ => None\n+            };\n+            if let Some(def) = maybe_def {\n+                let def_id = def.def_id();\n+                fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+            }\n         }\n \n         if !(ty_warned || fn_warned) {"}, {"sha": "ee791609e8f79c285b86ab949601d30550b46f00", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0981211c629d0d9f59c5164d8e2c42974d9449e2", "patch": "@@ -372,6 +372,9 @@ declare_features! (\n \n     // #[doc(cfg(...))]\n     (active, doc_cfg, \"1.21.0\", Some(43781)),\n+\n+    // allow `#[must_use]` on functions (RFC 1940)\n+    (active, fn_must_use, \"1.21.0\", Some(43302)),\n );\n \n declare_features! (\n@@ -1014,7 +1017,7 @@ pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: Gate\n }\n \n pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                   explain: &str) -> DiagnosticBuilder<'a> {\n+                       explain: &str) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n     let issue = match issue {\n@@ -1234,6 +1237,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                         function may change over time, for now \\\n                                         a top-level `fn main()` is required\");\n                 }\n+                if attr::contains_name(&i.attrs[..], \"must_use\") {\n+                    gate_feature_post!(&self, fn_must_use, i.span,\n+                                       \"`#[must_use]` on functions is experimental\");\n+                }\n             }\n \n             ast::ItemKind::Struct(..) => {"}, {"sha": "7bb533251dc08470ec4299e6a6ef76d7fdc1df12", "filename": "src/test/compile-fail/feature-gate-fn_must_use.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs?ref=0981211c629d0d9f59c5164d8e2c42974d9449e2", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[must_use]\n+fn need_to_use_it() -> bool { true } //~ ERROR `#[must_use]` on functions is experimental\n+\n+fn main() {}"}, {"sha": "021daf88420d15af8c22a4af44003387176f8860", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=0981211c629d0d9f59c5164d8e2c42974d9449e2", "patch": "@@ -680,6 +680,7 @@ mod must_use {\n     mod inner { #![must_use=\"1400\"] }\n \n     #[must_use = \"1400\"] fn f() { }\n+    //~^ ERROR `#[must_use]` on functions is experimental\n \n     #[must_use = \"1400\"] struct S;\n "}, {"sha": "c549ded4db2188ea4d06d4cd42e16c9812a95f22", "filename": "src/test/ui/lint/fn_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs?ref=0981211c629d0d9f59c5164d8e2c42974d9449e2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n struct MyStruct {"}, {"sha": "242837793a0bf2f4acd1d92d6248189eeee9b443", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0981211c629d0d9f59c5164d8e2c42974d9449e2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=0981211c629d0d9f59c5164d8e2c42974d9449e2", "patch": "@@ -1,18 +1,18 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:30:5\n+  --> $DIR/fn_must_use.rs:31:5\n    |\n-30 |     need_to_use_this_value();\n+31 |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/fn_must_use.rs:11:9\n+  --> $DIR/fn_must_use.rs:12:9\n    |\n-11 | #![warn(unused_must_use)]\n+12 | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:33:5\n+  --> $DIR/fn_must_use.rs:34:5\n    |\n-33 |     m.need_to_use_this_method_value();\n+34 |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}]}