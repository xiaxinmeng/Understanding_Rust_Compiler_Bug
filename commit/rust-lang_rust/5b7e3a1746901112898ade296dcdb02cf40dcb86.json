{"sha": "5b7e3a1746901112898ade296dcdb02cf40dcb86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViN2UzYTE3NDY5MDExMTI4OThhZGUyOTZkY2RiMDJjZjQwZGNiODY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-24T01:49:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-24T01:49:52Z"}, "message": "Rollup merge of #52605 - estebank:str-plus-eq, r=oli-obk\n\nDo not suggest using `to_owned()` on `&str += &str`\n\n - Don't provide incorrect suggestion for `&str += &str` (fix #52410)\n - On `&str + String` suggest `&str.to_owned() + &String` as a single suggestion", "tree": {"sha": "b5a912706220ed4cb6444d4da658efc1c1739a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a912706220ed4cb6444d4da658efc1c1739a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7e3a1746901112898ade296dcdb02cf40dcb86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbVoXACRBK7hj4Ov3rIwAAdHIIAE6j5Kzx7GBVAImabvXc0okk\nBMzj7KhQcBRoWHFSMemP/y6Pgaf5E15ZGzADhhwiCdZYrIZQnGn++Snn+i+pRwsW\neB20RSF5xuLCXmFu/EU4FBwwXykhRbeUz6Y2nMC1A35TfPC81OxJfAVG5AYTi2hq\nrbnA0B97RLZaa/mOaeto3jCgCp7JHnO+TUJKJ6StDMWPp/d9EG0SZEMmG+O2a1QW\nSArVichU0YYLNuzkRcaXV+6jKibHzSfgncObDmjyg+i/cwhzY2RkogbyL8JPPvsU\nsNjixrKYUNpfOpwcgpls1iI363h5Lo29WN78L1spc0E4/TqqXL6jnxtqp3cn+D0=\n=kfxo\n-----END PGP SIGNATURE-----\n", "payload": "tree b5a912706220ed4cb6444d4da658efc1c1739a5f\nparent a98c19e24be2d8a332b416c301006066d3cb1f5c\nparent 9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c\nauthor kennytm <kennytm@gmail.com> 1532396992 +0800\ncommitter GitHub <noreply@github.com> 1532396992 +0800\n\nRollup merge of #52605 - estebank:str-plus-eq, r=oli-obk\n\nDo not suggest using `to_owned()` on `&str += &str`\n\n - Don't provide incorrect suggestion for `&str += &str` (fix #52410)\n - On `&str + String` suggest `&str.to_owned() + &String` as a single suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7e3a1746901112898ade296dcdb02cf40dcb86", "html_url": "https://github.com/rust-lang/rust/commit/5b7e3a1746901112898ade296dcdb02cf40dcb86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7e3a1746901112898ade296dcdb02cf40dcb86/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a98c19e24be2d8a332b416c301006066d3cb1f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98c19e24be2d8a332b416c301006066d3cb1f5c", "html_url": "https://github.com/rust-lang/rust/commit/a98c19e24be2d8a332b416c301006066d3cb1f5c"}, {"sha": "9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c", "html_url": "https://github.com/rust-lang/rust/commit/9369b52b0ff48eeb2bbc51f033fcfe2bb55e537c"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "259311408dece4d32d09eaba4502fc90a64578e1", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5b7e3a1746901112898ade296dcdb02cf40dcb86/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7e3a1746901112898ade296dcdb02cf40dcb86/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5b7e3a1746901112898ade296dcdb02cf40dcb86", "patch": "@@ -307,9 +307,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err) {\n+                                                            rhs_ty, &mut err, true) {\n                                     // This has nothing here because it means we did string\n-                                    // concatenation (e.g. \"Hello \" + \"World!\"). This means\n+                                    // concatenation (e.g. \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::TyParam(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n@@ -381,7 +381,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err) {\n+                                                            rhs_ty, &mut err, false) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -410,13 +410,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         (lhs_ty, rhs_ty, return_ty)\n     }\n \n-    fn check_str_addition(&self,\n-                          expr: &'gcx hir::Expr,\n-                          lhs_expr: &'gcx hir::Expr,\n-                          rhs_expr: &'gcx hir::Expr,\n-                          lhs_ty: Ty<'tcx>,\n-                          rhs_ty: Ty<'tcx>,\n-                          err: &mut errors::DiagnosticBuilder) -> bool {\n+    fn check_str_addition(\n+        &self,\n+        expr: &'gcx hir::Expr,\n+        lhs_expr: &'gcx hir::Expr,\n+        rhs_expr: &'gcx hir::Expr,\n+        lhs_ty: Ty<'tcx>,\n+        rhs_ty: Ty<'tcx>,\n+        err: &mut errors::DiagnosticBuilder,\n+        is_assign: bool,\n+    ) -> bool {\n         let codemap = self.tcx.sess.codemap();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n                    from a string reference. String concatenation \\\n@@ -428,34 +431,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match (&lhs_ty.sty, &rhs_ty.sty) {\n             (&TyRef(_, l_ty, _), &TyRef(_, r_ty, _))\n             if l_ty.sty == TyStr && r_ty.sty == TyStr => {\n-                err.span_label(expr.span,\n-                    \"`+` can't be used to concatenate two `&str` strings\");\n-                match codemap.span_to_snippet(lhs_expr.span) {\n-                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                       msg,\n-                                                       format!(\"{}.to_owned()\", lstring)),\n-                    _ => err.help(msg),\n-                };\n+                if !is_assign {\n+                    err.span_label(expr.span,\n+                                   \"`+` can't be used to concatenate two `&str` strings\");\n+                    match codemap.span_to_snippet(lhs_expr.span) {\n+                        Ok(lstring) => err.span_suggestion(lhs_expr.span,\n+                                                           msg,\n+                                                           format!(\"{}.to_owned()\", lstring)),\n+                        _ => err.help(msg),\n+                    };\n+                }\n                 true\n             }\n             (&TyRef(_, l_ty, _), &TyAdt(..))\n             if l_ty.sty == TyStr && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n                 err.span_label(expr.span,\n                     \"`+` can't be used to concatenate a `&str` with a `String`\");\n-                match codemap.span_to_snippet(lhs_expr.span) {\n-                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                       msg,\n-                                                       format!(\"{}.to_owned()\", lstring)),\n-                    _ => err.help(msg),\n-                };\n-                match codemap.span_to_snippet(rhs_expr.span) {\n-                    Ok(rstring) => {\n-                        err.span_suggestion(rhs_expr.span,\n-                                            \"you also need to borrow the `String` on the right to \\\n-                                             get a `&str`\",\n-                                            format!(\"&{}\", rstring));\n+                match (\n+                    codemap.span_to_snippet(lhs_expr.span),\n+                    codemap.span_to_snippet(rhs_expr.span),\n+                    is_assign,\n+                ) {\n+                    (Ok(l), Ok(r), false) => {\n+                        err.multipart_suggestion(msg, vec![\n+                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                            (rhs_expr.span, format!(\"&{}\", r)),\n+                        ]);\n+                    }\n+                    _ => {\n+                        err.help(msg);\n                     }\n-                    _ => {}\n                 };\n                 true\n             }"}, {"sha": "94d13d5f26858b24cd9c32945afddb3498a6e574", "filename": "src/test/ui/issue-10401.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b7e3a1746901112898ade296dcdb02cf40dcb86/src%2Ftest%2Fui%2Fissue-10401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7e3a1746901112898ade296dcdb02cf40dcb86/src%2Ftest%2Fui%2Fissue-10401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10401.stderr?ref=5b7e3a1746901112898ade296dcdb02cf40dcb86", "patch": "@@ -5,11 +5,6 @@ LL |     a += { \"b\" };\n    |     -^^^^^^^^^^^\n    |     |\n    |     cannot use `+=` on type `&str`\n-   |     `+` can't be used to concatenate two `&str` strings\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n-   |\n-LL |     a.to_owned() += { \"b\" };\n-   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bd4e7cf574f62836c2b97dc50896384da63af585", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b7e3a1746901112898ade296dcdb02cf40dcb86/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b7e3a1746901112898ade296dcdb02cf40dcb86/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=5b7e3a1746901112898ade296dcdb02cf40dcb86", "patch": "@@ -23,12 +23,8 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-LL |     let x = \"Hello \".to_owned() + \"World!\".to_owned();\n-   |             ^^^^^^^^^^^^^^^^^^^\n-help: you also need to borrow the `String` on the right to get a `&str`\n-   |\n-LL |     let x = \"Hello \" + &\"World!\".to_owned();\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}