{"sha": "5a484a1aed9265f44980a748ebca41037b2eb923", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNDg0YTFhZWQ5MjY1ZjQ0OTgwYTc0OGViY2E0MTAzN2IyZWI5MjM=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-03-20T03:46:15Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-03-20T03:46:15Z"}, "message": "gave unused_fn WeakAnyLinkage; moved create_pgo_func_name_var\n\nThe sample json5format tests produce coverage results again (and work\nwith opt-level 3!)", "tree": {"sha": "f03ef4f977513c914c6c8f9e94cf22f1ef64b015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f03ef4f977513c914c6c8f9e94cf22f1ef64b015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a484a1aed9265f44980a748ebca41037b2eb923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a484a1aed9265f44980a748ebca41037b2eb923", "html_url": "https://github.com/rust-lang/rust/commit/5a484a1aed9265f44980a748ebca41037b2eb923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a484a1aed9265f44980a748ebca41037b2eb923/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6", "html_url": "https://github.com/rust-lang/rust/commit/bcf755562a1e7c2ed4f6a292b3c82afc9b5b5fe6"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "2854717bb6e7455ed58eac9f7804a097b9b2a863", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5a484a1aed9265f44980a748ebca41037b2eb923/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a484a1aed9265f44980a748ebca41037b2eb923/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=5a484a1aed9265f44980a748ebca41037b2eb923", "patch": "@@ -67,25 +67,12 @@ impl CoverageInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             let mut pgo_func_name_var_map = coverage_context.pgo_func_name_var_map.borrow_mut();\n             pgo_func_name_var_map\n                 .entry(instance)\n-                .or_insert_with(|| self.create_pgo_func_name_var(instance))\n+                .or_insert_with(|| create_pgo_func_name_var(self, instance))\n         } else {\n             bug!(\"Could not get the `coverage_context`\");\n         }\n     }\n \n-    /// Calls llvm::createPGOFuncNameVar() with the given function instance's\n-    /// mangled function name. The LLVM API returns an llvm::GlobalVariable\n-    /// containing the function name, with the specific variable name and\n-    /// linkage required by LLVM InstrProf source-based coverage\n-    /// instrumentation. Use `bx.get_pgo_func_name_var()` to ensure the variable\n-    /// is only created once per `Instance`.\n-    fn create_pgo_func_name_var(&self, instance: Instance<'tcx>) -> &'ll llvm::Value {\n-        let mangled_fn_name = CString::new(self.tcx.symbol_name(instance).name)\n-            .expect(\"error converting function name to C string\");\n-        let llfn = self.get_fn(instance);\n-        unsafe { llvm::LLVMRustCoverageCreatePGOFuncNameVar(llfn, mangled_fn_name.as_ptr()) }\n-    }\n-\n     fn define_unused_fn(&self, def_id: DefId) {\n         let instance = declare_unused_fn(self, &def_id);\n         codegen_unused_fn_and_counter(self, instance);\n@@ -210,10 +197,8 @@ fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx\n         ),\n     );\n \n-    unsafe {\n-        llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n-        llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n-    }\n+    llvm::set_linkage(llfn, llvm::Linkage::WeakAnyLinkage);\n+    llvm::set_visibility(llfn, llvm::Visibility::Hidden);\n \n     cx.instances.borrow_mut().insert(instance, llfn);\n \n@@ -261,6 +246,22 @@ fn add_function_coverage(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>, de\n     }\n }\n \n+/// Calls llvm::createPGOFuncNameVar() with the given function instance's\n+/// mangled function name. The LLVM API returns an llvm::GlobalVariable\n+/// containing the function name, with the specific variable name and linkage\n+/// required by LLVM InstrProf source-based coverage instrumentation. Use\n+/// `bx.get_pgo_func_name_var()` to ensure the variable is only created once per\n+/// `Instance`.\n+fn create_pgo_func_name_var(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    instance: Instance<'tcx>,\n+) -> &'ll llvm::Value {\n+    let mangled_fn_name = CString::new(cx.tcx.symbol_name(instance).name)\n+        .expect(\"error converting function name to C string\");\n+    let llfn = cx.get_fn(instance);\n+    unsafe { llvm::LLVMRustCoverageCreatePGOFuncNameVar(llfn, mangled_fn_name.as_ptr()) }\n+}\n+\n pub(crate) fn write_filenames_section_to_buffer<'a>(\n     filenames: impl IntoIterator<Item = &'a CString>,\n     buffer: &RustString,"}, {"sha": "b2b0b9eac91790661b45811e670ead922dfcc224", "filename": "compiler/rustc_codegen_ssa/src/traits/coverageinfo.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a484a1aed9265f44980a748ebca41037b2eb923/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a484a1aed9265f44980a748ebca41037b2eb923/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs?ref=5a484a1aed9265f44980a748ebca41037b2eb923", "patch": "@@ -29,10 +29,6 @@ pub trait CoverageInfoMethods<'tcx>: BackendTypes {\n     /// `instrprof.increment()`. The `Value` is only created once per instance.\n     /// Multiple invocations with the same instance return the same `Value`.\n     fn get_pgo_func_name_var(&self, instance: Instance<'tcx>) -> Self::Value;\n-\n-    /// Creates a new PGO function name variable. This should only be called\n-    /// to fill in the unused function names array.\n-    fn create_pgo_func_name_var(&self, instance: Instance<'tcx>) -> Self::Value;\n }\n \n pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {"}]}