{"sha": "2e9788b2986e6bc5f007374136548c5c68240dd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOTc4OGIyOTg2ZTZiYzVmMDA3Mzc0MTM2NTQ4YzVjNjgyNDBkZDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-07T17:06:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-07T17:06:09Z"}, "message": "Rollup merge of #80660 - max-heller:issue-80559-fix, r=jyn514\n\nProperly handle primitive disambiguators in rustdoc\n\nFixes #80559\n\nr? ``@jyn514``\n\nIs there a way to test that the generated intra-doc link is what I expect?", "tree": {"sha": "d2a7176cdd4062964a93cf5b371d4664cbbe2ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a7176cdd4062964a93cf5b371d4664cbbe2ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e9788b2986e6bc5f007374136548c5c68240dd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9z+CCRBK7hj4Ov3rIwAAdHIIAH0/Svi5RRdGodQaiKGtzo3G\nNnPvtxWoFUNpjA4aii3Nxth3PkTKYf2aIF97ytKtHemLn/EMUNr2eRNVhBkRXpPy\n5ydk/Lb0EHnOILxXS6Ikxab1mY0wAy5vXROD7khhLqBsl3Jj+3Ce5h99X2JO6Lxl\nx5fCHxoN4psLO1TbSu/7JqYiefCZEHWrOtO/e2b/T7QS4m1UiEtLZ9IsTrknvsXE\nUVeSgwMn25eRSuN1vzjSFVeQZX1/gqVJTQ2LCU1+a+ABbIGLhuHVv3LX9EVYdnjO\nYp4khGpWqlbnt1g8l6N3M4lZ5yUk5gqwUHZ05bnwogZ7sPeso6RpuzzF3rkssgQ=\n=QkuY\n-----END PGP SIGNATURE-----\n", "payload": "tree d2a7176cdd4062964a93cf5b371d4664cbbe2ba8\nparent d02b31ca3c2c438d88ff8f029791e80050508dcd\nparent 2bdbb0d1b4a8be7e8fef6d1e35856190f5c91e0f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610039169 +0900\ncommitter GitHub <noreply@github.com> 1610039169 +0900\n\nRollup merge of #80660 - max-heller:issue-80559-fix, r=jyn514\n\nProperly handle primitive disambiguators in rustdoc\n\nFixes #80559\n\nr? ``@jyn514``\n\nIs there a way to test that the generated intra-doc link is what I expect?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9788b2986e6bc5f007374136548c5c68240dd8", "html_url": "https://github.com/rust-lang/rust/commit/2e9788b2986e6bc5f007374136548c5c68240dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e9788b2986e6bc5f007374136548c5c68240dd8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02b31ca3c2c438d88ff8f029791e80050508dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d02b31ca3c2c438d88ff8f029791e80050508dcd", "html_url": "https://github.com/rust-lang/rust/commit/d02b31ca3c2c438d88ff8f029791e80050508dcd"}, {"sha": "2bdbb0d1b4a8be7e8fef6d1e35856190f5c91e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdbb0d1b4a8be7e8fef6d1e35856190f5c91e0f", "html_url": "https://github.com/rust-lang/rust/commit/2bdbb0d1b4a8be7e8fef6d1e35856190f5c91e0f"}], "stats": {"total": 138, "additions": 92, "deletions": 46}, "files": [{"sha": "11ee59b2401c8592c5c1264338dcc478cb37e132", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 70, "deletions": 46, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2e9788b2986e6bc5f007374136548c5c68240dd8", "patch": "@@ -394,10 +394,14 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ns,\n                         impl_,\n                     )\n-                    .map(|item| match item.kind {\n-                        ty::AssocKind::Fn => \"method\",\n-                        ty::AssocKind::Const => \"associatedconstant\",\n-                        ty::AssocKind::Type => \"associatedtype\",\n+                    .map(|item| {\n+                        let kind = item.kind;\n+                        self.kind_side_channel.set(Some((kind.as_def_kind(), item.def_id)));\n+                        match kind {\n+                            ty::AssocKind::Fn => \"method\",\n+                            ty::AssocKind::Const => \"associatedconstant\",\n+                            ty::AssocKind::Type => \"associatedtype\",\n+                        }\n                     })\n                     .map(|out| {\n                         (\n@@ -1142,55 +1146,75 @@ impl LinkCollector<'_, '_> {\n                 callback,\n             );\n         };\n-        match res {\n-            Res::Primitive(_) => match disambiguator {\n-                Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {\n-                    Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n-                }\n-                Some(other) => {\n-                    report_mismatch(other, Disambiguator::Primitive);\n-                    None\n-                }\n-            },\n-            Res::Def(kind, id) => {\n-                debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n-\n-                // Disallow e.g. linking to enums with `struct@`\n-                debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n-                match (self.kind_side_channel.take().map(|(kind, _)| kind).unwrap_or(kind), disambiguator) {\n-                    | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n-                    // NOTE: this allows 'method' to mean both normal functions and associated functions\n-                    // This can't cause ambiguity because both are in the same namespace.\n-                    | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n-                    // These are namespaces; allow anything in the namespace to match\n-                    | (_, Some(Disambiguator::Namespace(_)))\n-                    // If no disambiguator given, allow anything\n-                    | (_, None)\n-                    // All of these are valid, so do nothing\n-                    => {}\n-                    (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n-                    (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n-                        report_mismatch(specified, Disambiguator::Kind(kind));\n-                        return None;\n-                    }\n+\n+        let verify = |kind: DefKind, id: DefId| {\n+            debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n+\n+            // Disallow e.g. linking to enums with `struct@`\n+            debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n+            match (self.kind_side_channel.take().map(|(kind, _)| kind).unwrap_or(kind), disambiguator) {\n+                | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n+                // NOTE: this allows 'method' to mean both normal functions and associated functions\n+                // This can't cause ambiguity because both are in the same namespace.\n+                | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n+                // These are namespaces; allow anything in the namespace to match\n+                | (_, Some(Disambiguator::Namespace(_)))\n+                // If no disambiguator given, allow anything\n+                | (_, None)\n+                // All of these are valid, so do nothing\n+                => {}\n+                (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n+                (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n+                    report_mismatch(specified, Disambiguator::Kind(kind));\n+                    return None;\n                 }\n+            }\n+\n+            // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+            if let Some((src_id, dst_id)) = id\n+                .as_local()\n+                .and_then(|dst_id| item.def_id.as_local().map(|src_id| (src_id, dst_id)))\n+            {\n+                use rustc_hir::def_id::LOCAL_CRATE;\n \n-                // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n-                if let Some((src_id, dst_id)) = id\n-                    .as_local()\n-                    .and_then(|dst_id| item.def_id.as_local().map(|src_id| (src_id, dst_id)))\n+                let hir_src = self.cx.tcx.hir().local_def_id_to_hir_id(src_id);\n+                let hir_dst = self.cx.tcx.hir().local_def_id_to_hir_id(dst_id);\n+\n+                if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n+                    && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n                 {\n-                    use rustc_hir::def_id::LOCAL_CRATE;\n+                    privacy_error(cx, &item, &path_str, dox, &ori_link);\n+                }\n+            }\n \n-                    let hir_src = self.cx.tcx.hir().local_def_id_to_hir_id(src_id);\n-                    let hir_dst = self.cx.tcx.hir().local_def_id_to_hir_id(dst_id);\n+            Some((kind, id))\n+        };\n \n-                    if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n-                        && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n-                    {\n-                        privacy_error(cx, &item, &path_str, dox, &ori_link);\n+        match res {\n+            Res::Primitive(_) => {\n+                if let Some((kind, id)) = self.kind_side_channel.take() {\n+                    // We're actually resolving an associated item of a primitive, so we need to\n+                    // verify the disambiguator (if any) matches the type of the associated item.\n+                    // This case should really follow the same flow as the `Res::Def` branch below,\n+                    // but attempting to add a call to `clean::register_res` causes an ICE. @jyn514\n+                    // thinks `register_res` is only needed for cross-crate re-exports, but Rust\n+                    // doesn't allow statements like `use str::trim;`, making this a (hopefully)\n+                    // valid omission. See https://github.com/rust-lang/rust/pull/80660#discussion_r551585677\n+                    // for discussion on the matter.\n+                    verify(kind, id)?;\n+                } else {\n+                    match disambiguator {\n+                        Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {}\n+                        Some(other) => {\n+                            report_mismatch(other, Disambiguator::Primitive);\n+                            return None;\n+                        }\n                     }\n                 }\n+                Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n+            }\n+            Res::Def(kind, id) => {\n+                let (kind, id) = verify(kind, id)?;\n                 let id = clean::register_res(cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink { link: ori_link.link, link_text, did: Some(id), fragment })\n             }"}, {"sha": "0d1d5d1134b7b73e05b69075652f0c5a57790ab4", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs?ref=2e9788b2986e6bc5f007374136548c5c68240dd8", "patch": "@@ -0,0 +1,3 @@\n+#![deny(broken_intra_doc_links)]\n+//! [static@u8::MIN]\n+//~^ ERROR incompatible link kind"}, {"sha": "ed1c10f9e0cb803eabe1be99d3b7792a8a064d6f", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr?ref=2e9788b2986e6bc5f007374136548c5c68240dd8", "patch": "@@ -0,0 +1,15 @@\n+error: incompatible link kind for `u8::MIN`\n+  --> $DIR/incompatible-primitive-disambiguator.rs:2:6\n+   |\n+LL | //! [static@u8::MIN]\n+   |      ^^^^^^^^^^^^^^ help: to link to the associated constant, prefix with `const@`: `const@u8::MIN`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/incompatible-primitive-disambiguator.rs:1:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this link resolved to an associated constant, which is not a static\n+\n+error: aborting due to previous error\n+"}, {"sha": "acdd07566c94d145540b0a4d19152916841ff535", "filename": "src/test/rustdoc/intra-doc/primitive-disambiguators.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9788b2986e6bc5f007374136548c5c68240dd8/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs?ref=2e9788b2986e6bc5f007374136548c5c68240dd8", "patch": "@@ -0,0 +1,4 @@\n+#![deny(broken_intra_doc_links)]\n+// @has primitive_disambiguators/index.html\n+// @has - '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim'\n+//! [str::trim()]"}]}