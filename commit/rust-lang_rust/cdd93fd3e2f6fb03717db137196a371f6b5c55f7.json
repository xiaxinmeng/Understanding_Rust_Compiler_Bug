{"sha": "cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDkzZmQzZTJmNmZiMDM3MTdkYjEzNzE5NmEzNzFmNmI1YzU1Zjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-17T22:51:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T22:51:18Z"}, "message": "Rollup merge of #81972 - matthewjasper:hrtb-error-cleanup, r=nikomatsakis\n\nPlaceholder lifetime error cleanup\n\n- Remove note of trait definition\n- Avoid repeating the same self type\n- Use original region names when possible\n- Use this error kind more often\n- Print closure signatures when they are suppose to implement `Fn*` traits\n\nWorks towards #57374\n\nr? ```@nikomatsakis```", "tree": {"sha": "d444cd5b34cafeb6c60bd8addf309ac33ca51255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d444cd5b34cafeb6c60bd8addf309ac33ca51255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLZ3nCRBK7hj4Ov3rIwAAdHIIAH2qYM8VsipKrhpghxeEc1GT\nyHos5O071VyT2XGLU0fiUmaALqzKvekMQFm6CNEPKJkANOeCPVYso6MXgtbkhYFU\n7tj/joxahv5BZ6+g6ipQekBQyU0w4oEq6xOHfzFV750ZWRIqf7wjtZL8wRy6fNZ6\nez50U4VNfRK76m0N+zy1ptTjLWzAP0qs4t16HOsp+8ews8bcInNd6c2aRsCexEU1\nYCVbnqCNwWpPlV4sieXxdXk25/NZFIuBlsSRb+1KeHSwAmNd1ETUBdNDN/7AmDAW\ntpqroUyMohi7Kl0x6Hc3ct9WcdxWBFY0pSVdLMOrCN6cLYVv6amK7AFZ+XgUcyM=\n=j/s1\n-----END PGP SIGNATURE-----\n", "payload": "tree d444cd5b34cafeb6c60bd8addf309ac33ca51255\nparent f79be2c6de6a2f1b002d3f1f3fd7d9ca2aa8905a\nparent f852160a99721f89a6bc206bae337291c485069e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613602278 +0100\ncommitter GitHub <noreply@github.com> 1613602278 +0100\n\nRollup merge of #81972 - matthewjasper:hrtb-error-cleanup, r=nikomatsakis\n\nPlaceholder lifetime error cleanup\n\n- Remove note of trait definition\n- Avoid repeating the same self type\n- Use original region names when possible\n- Use this error kind more often\n- Print closure signatures when they are suppose to implement `Fn*` traits\n\nWorks towards #57374\n\nr? ```@nikomatsakis```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "html_url": "https://github.com/rust-lang/rust/commit/cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f79be2c6de6a2f1b002d3f1f3fd7d9ca2aa8905a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79be2c6de6a2f1b002d3f1f3fd7d9ca2aa8905a", "html_url": "https://github.com/rust-lang/rust/commit/f79be2c6de6a2f1b002d3f1f3fd7d9ca2aa8905a"}, {"sha": "f852160a99721f89a6bc206bae337291c485069e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f852160a99721f89a6bc206bae337291c485069e", "html_url": "https://github.com/rust-lang/rust/commit/f852160a99721f89a6bc206bae337291c485069e"}], "stats": {"total": 734, "additions": 283, "deletions": 451}, "files": [{"sha": "0599c78ebfd079295788debc9d11bf4123a2a54a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -43,7 +43,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'cx>> {\n+    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'tcx>> {\n         // Due to the improved diagnostics returned by the MIR borrow checker, only a subset of\n         // the nice region errors are required when running under the MIR borrow checker.\n         self.try_report_named_anon_conflict().or_else(|| self.try_report_placeholder_conflict())"}, {"sha": "2f622231a081ed07a562725b4e4baa6902388e07", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty;\n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n-    pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'a>> {\n+    pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'tcx>> {\n         let (span, sub, sup) = self.regions()?;\n \n         debug!("}, {"sha": "4aecc2f40b8741599ee61e8966ff1de700dd8344", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 126, "deletions": 106, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -16,7 +16,7 @@ use std::fmt::{self, Write};\n impl NiceRegionError<'me, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit a descriptive diagnostic error.\n-    pub(super) fn try_report_placeholder_conflict(&self) -> Option<DiagnosticBuilder<'me>> {\n+    pub(super) fn try_report_placeholder_conflict(&self) -> Option<DiagnosticBuilder<'tcx>> {\n         match &self.error {\n             ///////////////////////////////////////////////////////////////////////////\n             // NB. The ordering of cases in this match is very\n@@ -30,157 +30,153 @@ impl NiceRegionError<'me, 'tcx> {\n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 Some(sub_placeholder),\n                 Some(sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 Some(sub_placeholder),\n                 None,\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n                 _,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::UpperBoundUniverseConflict(\n                 vid,\n                 _,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 None,\n                 cause,\n                 Some(*sub_region),\n                 Some(*sup_region),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region,\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n-                Some(sup_region),\n+            )) => self.try_report_trait_placeholder_mismatch(\n+                (!sup_region.has_name()).then_some(sup_region),\n                 cause,\n-                Some(*sub_region),\n+                Some(sub_region),\n                 None,\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region,\n                 sup_region @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n-                Some(sub_region),\n+            )) => self.try_report_trait_placeholder_mismatch(\n+                (!sub_region.has_name()).then_some(sub_region),\n                 cause,\n                 None,\n-                Some(*sup_region),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                Some(sup_region),\n+                values,\n+            ),\n \n             _ => None,\n         }\n     }\n \n+    fn try_report_trait_placeholder_mismatch(\n+        &self,\n+        vid: Option<ty::Region<'tcx>>,\n+        cause: &ObligationCause<'tcx>,\n+        sub_placeholder: Option<ty::Region<'tcx>>,\n+        sup_placeholder: Option<ty::Region<'tcx>>,\n+        value_pairs: &ValuePairs<'tcx>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        let (expected_substs, found_substs, trait_def_id) = match value_pairs {\n+            ValuePairs::TraitRefs(ExpectedFound { expected, found })\n+                if expected.def_id == found.def_id =>\n+            {\n+                (expected.substs, found.substs, expected.def_id)\n+            }\n+            ValuePairs::PolyTraitRefs(ExpectedFound { expected, found })\n+                if expected.def_id() == found.def_id() =>\n+            {\n+                // It's possible that the placeholders come from a binder\n+                // outside of this value pair. Use `no_bound_vars` as a\n+                // simple heuristic for that.\n+                (expected.no_bound_vars()?.substs, found.no_bound_vars()?.substs, expected.def_id())\n+            }\n+            _ => return None,\n+        };\n+\n+        Some(self.report_trait_placeholder_mismatch(\n+            vid,\n+            cause,\n+            sub_placeholder,\n+            sup_placeholder,\n+            trait_def_id,\n+            expected_substs,\n+            found_substs,\n+        ))\n+    }\n+\n     // error[E0308]: implementation of `Foo` does not apply to enough lifetimes\n     //   --> /home/nmatsakis/tmp/foo.rs:12:5\n     //    |\n@@ -190,7 +186,8 @@ impl NiceRegionError<'me, 'tcx> {\n     //    = note: Due to a where-clause on the function `all`,\n     //    = note: `T` must implement `...` for any two lifetimes `'1` and `'2`.\n     //    = note: However, the type `T` only implements `...` for some specific lifetime `'2`.\n-    fn try_report_placeholders_trait(\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn report_trait_placeholder_mismatch(\n         &self,\n         vid: Option<ty::Region<'tcx>>,\n         cause: &ObligationCause<'tcx>,\n@@ -199,28 +196,13 @@ impl NiceRegionError<'me, 'tcx> {\n         trait_def_id: DefId,\n         expected_substs: SubstsRef<'tcx>,\n         actual_substs: SubstsRef<'tcx>,\n-    ) -> DiagnosticBuilder<'me> {\n-        debug!(\n-            \"try_report_placeholders_trait(\\\n-             vid={:?}, \\\n-             sub_placeholder={:?}, \\\n-             sup_placeholder={:?}, \\\n-             trait_def_id={:?}, \\\n-             expected_substs={:?}, \\\n-             actual_substs={:?})\",\n-            vid, sub_placeholder, sup_placeholder, trait_def_id, expected_substs, actual_substs\n-        );\n-\n+    ) -> DiagnosticBuilder<'tcx> {\n         let span = cause.span(self.tcx());\n         let msg = format!(\n             \"implementation of `{}` is not general enough\",\n             self.tcx().def_path_str(trait_def_id),\n         );\n         let mut err = self.tcx().sess.struct_span_err(span, &msg);\n-        err.span_label(\n-            self.tcx().def_span(trait_def_id),\n-            format!(\"trait `{}` defined here\", self.tcx().def_path_str(trait_def_id)),\n-        );\n \n         let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id) = cause.code {\n             err.span_label(span, \"doesn't satisfy where-clause\");\n@@ -285,17 +267,13 @@ impl NiceRegionError<'me, 'tcx> {\n \n         let any_self_ty_has_vid = actual_self_ty_has_vid || expected_self_ty_has_vid;\n \n-        debug!(\"try_report_placeholders_trait: actual_has_vid={:?}\", actual_has_vid);\n-        debug!(\"try_report_placeholders_trait: expected_has_vid={:?}\", expected_has_vid);\n-        debug!(\"try_report_placeholders_trait: has_sub={:?}\", has_sub);\n-        debug!(\"try_report_placeholders_trait: has_sup={:?}\", has_sup);\n         debug!(\n-            \"try_report_placeholders_trait: actual_self_ty_has_vid={:?}\",\n-            actual_self_ty_has_vid\n-        );\n-        debug!(\n-            \"try_report_placeholders_trait: expected_self_ty_has_vid={:?}\",\n-            expected_self_ty_has_vid\n+            ?actual_has_vid,\n+            ?expected_has_vid,\n+            ?has_sub,\n+            ?has_sup,\n+            ?actual_self_ty_has_vid,\n+            ?expected_self_ty_has_vid,\n         );\n \n         self.explain_actual_impl_that_was_found(\n@@ -388,6 +366,8 @@ impl NiceRegionError<'me, 'tcx> {\n             value: trait_ref,\n         };\n \n+        let same_self_type = actual_trait_ref.self_ty() == expected_trait_ref.self_ty();\n+\n         let mut expected_trait_ref = highlight_trait_ref(expected_trait_ref);\n         expected_trait_ref.highlight.maybe_highlighting_region(sub_placeholder, has_sub);\n         expected_trait_ref.highlight.maybe_highlighting_region(sup_placeholder, has_sup);\n@@ -403,7 +383,42 @@ impl NiceRegionError<'me, 'tcx> {\n                 }\n             };\n \n-            let mut note = if passive_voice {\n+            let mut note = if same_self_type {\n+                let mut self_ty = expected_trait_ref.map(|tr| tr.self_ty());\n+                self_ty.highlight.maybe_highlighting_region(vid, actual_has_vid);\n+\n+                if self_ty.value.is_closure()\n+                    && self\n+                        .tcx()\n+                        .fn_trait_kind_from_lang_item(expected_trait_ref.value.def_id)\n+                        .is_some()\n+                {\n+                    let closure_sig = self_ty.map(|closure| {\n+                        if let ty::Closure(_, substs) = closure.kind() {\n+                            self.tcx().signature_unclosure(\n+                                substs.as_closure().sig(),\n+                                rustc_hir::Unsafety::Normal,\n+                            )\n+                        } else {\n+                            bug!(\"type is not longer closure\");\n+                        }\n+                    });\n+\n+                    format!(\n+                        \"{}closure with signature `{}` must implement `{}`\",\n+                        if leading_ellipsis { \"...\" } else { \"\" },\n+                        closure_sig,\n+                        expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                    )\n+                } else {\n+                    format!(\n+                        \"{}`{}` must implement `{}`\",\n+                        if leading_ellipsis { \"...\" } else { \"\" },\n+                        self_ty,\n+                        expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                    )\n+                }\n+            } else if passive_voice {\n                 format!(\n                     \"{}`{}` would have to be implemented for the type `{}`\",\n                     if leading_ellipsis { \"...\" } else { \"\" },\n@@ -449,7 +464,12 @@ impl NiceRegionError<'me, 'tcx> {\n                 None => true,\n             };\n \n-            let mut note = if passive_voice {\n+            let mut note = if same_self_type {\n+                format!(\n+                    \"...but it actually implements `{}`\",\n+                    actual_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                )\n+            } else if passive_voice {\n                 format!(\n                     \"...but `{}` is actually implemented for the type `{}`\",\n                     actual_trait_ref.map(|tr| tr.print_only_trait_path()),"}, {"sha": "6897b31fe46857dd89de03866b7719553126c631", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 15, "deletions": 50, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -31,82 +31,47 @@ LL |     bar::<IntStruct>();\n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:112:5\n    |\n-LL | / pub trait TheTrait<T> {\n-LL | |     type A;\n-LL | |\n-LL | |     fn get(&self, t: T) -> Self::A;\n-LL | | }\n-   | |_- trait `TheTrait` defined here\n-...\n-LL |       tuple_four::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+LL |     tuple_four::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "da3d3249f0e7ee157cef94630c21f310d70dfb1a", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,33 +1,24 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:31:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:31:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:50:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n@@ -37,9 +28,6 @@ LL |     assert_foo(gen);\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:50:5\n    |\n-LL | auto trait Foo {}\n-   | ----------------- trait `Foo` defined here\n-...\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |"}, {"sha": "520938a633514b6c41bdf929605ab24a2f061843", "filename": "src/test/ui/hrtb/due-to-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -3,9 +3,6 @@ error: implementation of `Foo` is not general enough\n    |\n LL |     test::<FooS>(&mut 42);\n    |     ^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-...\n-LL | trait Foo<'a> {}\n-   | ---------------- trait `Foo` defined here\n    |\n    = note: `FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n    = note: ...but `FooS<'_>` actually implements `Foo<'1>`, for some specific lifetime `'1`"}, {"sha": "f014eab8601fa4a728a6411304841a81553f5eeb", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Deserialize` is not general enough\n   --> $DIR/hrtb-cache-issue-54302.rs:19:5\n    |\n-LL | trait Deserialize<'de> {}\n-   | ------------------------- trait `Deserialize` defined here\n-...\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Deserialize` is not general enough\n    |"}, {"sha": "b1d4c0bf375059018da73037ace6791a091c262a", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,16 +1,11 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |   fn b() { want_foo2::<SomeStruct>(); }\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL | fn b() { want_foo2::<SomeStruct>(); }\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+   = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "613f4dc4951ec3f16ced03fdcb9f1b0ed25e7e8e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,14 +1,11 @@\n error: implementation of `Trait` is not general enough\n   --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n-LL | trait Trait<T> {}\n-   | ----------------- trait `Trait` defined here\n-...\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n    = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n-   = note: ...but `()` actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n+   = note: ...but it actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "b487ce3e0ffa1ce09b5f4dc8771a12e03c162217", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,14 +1,11 @@\n error: implementation of `Trait` is not general enough\n   --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n-LL | trait Trait<T> {}\n-   | ----------------- trait `Trait` defined here\n-...\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n    = note: `()` must implement `Trait<for<'b> fn(Cell<&'b u32>)>`\n-   = note: ...but `()` actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n+   = note: ...but it actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "ffc83aab4af4d03dd35344ded3eba490c6b73323", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,27 +1,17 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       want_hrtb::<StaticInt>()\n-   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     want_hrtb::<StaticInt>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n+   = note: ...but it actually implements `Foo<&'static isize>`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       want_hrtb::<&'a u32>()\n-   |       ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     want_hrtb::<&'a u32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`...\n    = note: ...but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`"}, {"sha": "c3dd794957540ccfd50f1d5228f23b63d1e12014", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,11 +1,11 @@\n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:22:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:16:1\n    |\n-LL | / fn no_hrtb<'b,T>(mut t: T)\n-LL | |     where T : Bar<&'b isize>\n+LL | / fn no_hrtb<'b, T>(mut t: T)\n+LL | | where\n+LL | |     T: Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n-LL | |     // `&mut T : Bar<&'b isize>`.\n+...  |\n LL | |     no_hrtb(&mut t);\n    | |     --------------- recursive call site\n LL | | }\n@@ -15,12 +15,12 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:30:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:25:1\n    |\n LL | / fn bar_hrtb<T>(mut t: T)\n-LL | |     where T : for<'b> Bar<&'b isize>\n+LL | | where\n+LL | |     T: for<'b> Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n ...  |\n LL | |     bar_hrtb(&mut t);\n    | |     ---------------- recursive call site\n@@ -30,25 +30,26 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:35:1\n    |\n-LL | / fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+LL | | where\n+LL | |     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n LL | | {\n-LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n LL | |\n+LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n    |                     -- lifetime `'b` defined here\n ...\n LL |     foo_hrtb_bar_not(&mut t);\n@@ -57,18 +58,19 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = help: consider replacing `'b` with `'static`\n \n error: higher-ranked subtype error\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:50:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:48:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+LL | | where\n+LL | |     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+LL | |     // OK -- now we have `T : for<'b> Bar<&'b isize>`.\n LL | |     foo_hrtb_bar_hrtb(&mut t);\n    | |     ------------------------- recursive call site\n LL | | }"}, {"sha": "441a788359e0345a0ce8f41d667fe24f5ff38b07", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -2,56 +2,55 @@\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n trait Foo<X> {\n-    fn foo(&mut self, x: X) { }\n+    fn foo(&mut self, x: X) {}\n }\n \n trait Bar<X> {\n-    fn bar(&mut self, x: X) { }\n+    fn bar(&mut self, x: X) {}\n }\n \n-impl<'a,X,F> Foo<X> for &'a mut F\n-    where F : Foo<X> + Bar<X>\n-{\n-}\n+impl<'a, X, F> Foo<X> for &'a mut F where F: Foo<X> + Bar<X> {}\n \n-impl<'a,X,F> Bar<X> for &'a mut F\n-    where F : Bar<X>\n-{\n-}\n+impl<'a, X, F> Bar<X> for &'a mut F where F: Bar<X> {}\n \n-fn no_hrtb<'b,T>(mut t: T)\n-    where T : Bar<&'b isize>\n+fn no_hrtb<'b, T>(mut t: T)\n+where\n+    T: Bar<&'b isize>,\n {\n     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n     // `&mut T : Bar<&'b isize>`.\n     no_hrtb(&mut t);\n }\n \n fn bar_hrtb<T>(mut t: T)\n-    where T : for<'b> Bar<&'b isize>\n+where\n+    T: for<'b> Bar<&'b isize>,\n {\n     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n     // ensures that `&mut T : for<'b> Bar<&'b isize>`.  This is an\n     // example of a \"perfect forwarding\" impl.\n     bar_hrtb(&mut t);\n }\n \n-fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-    where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+where\n+    T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n {\n     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n     // be implemented. Thus to satisfy `&mut T : for<'a> Foo<&'a\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n-    foo_hrtb_bar_not(&mut t); //~ ERROR mismatched types\n-                              //~| ERROR mismatched types\n+    foo_hrtb_bar_not(&mut t);\n+    //~^ ERROR implementation of `Bar` is not general enough\n+    //~| ERROR implementation of `Bar` is not general enough\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)\n-    where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+where\n+    T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n {\n-    // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+    // OK -- now we have `T : for<'b> Bar<&'b isize>`.\n     foo_hrtb_bar_hrtb(&mut t);\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "07ff9b96e44ff807d28eaa9571396338558acdda", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,41 +1,20 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n    |\n-   = note: expected type `Bar<&'a isize>`\n-              found type `Bar<&'b isize>`\n-note: the required lifetime does not necessarily outlive the lifetime `'b` as defined on the function body at 39:21\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n-   |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-   |                     ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n-   |\n-LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<&'b isize>`\n \n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `Bar<&'a isize>`\n-              found type `Bar<&'b isize>`\n-note: the lifetime `'b` as defined on the function body at 39:21 doesn't meet the lifetime requirements\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n-   |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-   |                     ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n+   |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n    |\n-LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<&'b isize>`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "f3d906cae4cc3c43c939b51befe8c4d9568045e0", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-46989.rs:38:5\n    |\n-LL | trait Foo {}\n-   | ------------ trait `Foo` defined here\n-...\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |"}, {"sha": "baa75f28d37f32c39cef43b2226a9a8b23f94837", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,55 +1,35 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:63:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <u32 as RefFoo<u32>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <i32 as RefFoo<i32>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <u64 as RefFoo<u64>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n-LL | / trait Foo<'x, T> {\n-LL | |     fn foo(self) -> &'x T;\n-LL | | }\n-   | |_- trait `Foo` defined here\n-...\n-LL |       <i64 as RefFoo<i64>>::ref_foo(a)\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`...\n    = note: ...but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`"}, {"sha": "26c46571f9cb232d8155abcfc30a47d74d98a216", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,9 +1,6 @@\n error: implementation of `Deserialize` is not general enough\n   --> $DIR/issue-54302.rs:13:5\n    |\n-LL | trait Deserialize<'de> {}\n-   | ------------------------- trait `Deserialize` defined here\n-...\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Deserialize` is not general enough\n    |"}, {"sha": "de327cd3cc23cc87a79129f2d39cf7465ea87fb1", "filename": "src/test/ui/issues/issue-55731.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,13 +1,8 @@\n error: implementation of `DistributedIteratorMulti` is not general enough\n   --> $DIR/issue-55731.rs:48:5\n    |\n-LL | / trait DistributedIteratorMulti<Source> {\n-LL | |     type Item;\n-LL | | }\n-   | |_- trait `DistributedIteratorMulti` defined here\n-...\n-LL |       multi(Map {\n-   |       ^^^^^ implementation of `DistributedIteratorMulti` is not general enough\n+LL |     multi(Map {\n+   |     ^^^^^ implementation of `DistributedIteratorMulti` is not general enough\n    |\n    = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`...\n    = note: ...but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`"}, {"sha": "70d16cc9a1da66c97e16292faa5647d4b5bf5f98", "filename": "src/test/ui/issues/issue-57843.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,5 +1,5 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57843.rs:23:9\n+  --> $DIR/issue-57843.rs:25:9\n    |\n LL |     Foo(Box::new(|_| ()));\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "11629690ecc5e27ac51880a80e699b529ab2a68e", "filename": "src/test/ui/issues/issue-57843.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-57843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-57843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -11,7 +11,9 @@ trait ClonableFn<T> {\n }\n \n impl<T, F: 'static> ClonableFn<T> for F\n-where F: Fn(T) + Clone {\n+where\n+    F: Fn(T) + Clone,\n+{\n     fn clone(&self) -> Box<dyn Fn(T)> {\n         Box::new(self.clone())\n     }\n@@ -20,5 +22,5 @@ where F: Fn(T) + Clone {\n struct Foo(Box<dyn for<'a> ClonableFn<&'a bool>>);\n \n fn main() {\n-    Foo(Box::new(|_| ())); //~ ERROR mismatched types\n+    Foo(Box::new(|_| ())); //~ ERROR implementation of `FnOnce` is not general enough\n }"}, {"sha": "2ab49ec61cf597ef187b72d897312e9ffd112962", "filename": "src/test/ui/issues/issue-57843.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,17 +1,11 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57843.rs:23:9\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57843.rs:25:9\n    |\n LL |     Foo(Box::new(|_| ()));\n-   |         ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |         ^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&'a bool,)>`\n-              found type `FnOnce<(&bool,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57843.rs:23:18\n-   |\n-LL |     Foo(Box::new(|_| ()));\n-   |                  ^^^^^^\n+   = note: closure with signature `fn(&'2 bool)` must implement `FnOnce<(&'1 bool,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 bool,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "2ee69ee2234eefbe9bc9b3bec3b4834061dc424c", "filename": "src/test/ui/lifetimes/issue-79187.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -2,5 +2,5 @@ fn thing(x: impl FnOnce(&u32)) {}\n \n fn main() {\n     let f = |_| ();\n-    thing(f); //~ERROR mismatched types\n+    thing(f); //~ERROR implementation of `FnOnce` is not general enough\n }"}, {"sha": "3c0439fb660e501c7bde75e61c948e1c41f1255d", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,22 +1,11 @@\n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-79187.rs:5:5\n    |\n LL |     thing(f);\n-   |     ^^^^^ lifetime mismatch\n+   |     ^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&u32,)>`\n-              found type `FnOnce<(&u32,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187.rs:4:13\n-   |\n-LL |     let f = |_| ();\n-   |             ^^^^^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187.rs:1:18\n-   |\n-LL | fn thing(x: impl FnOnce(&u32)) {}\n-   |                  ^^^^^^^^^^^^\n+   = note: closure with signature `fn(&'2 u32)` must implement `FnOnce<(&'1 u32,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 u32,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "2d485d14a8d6b8fd963213f100da8727257c96a2", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -8,8 +8,8 @@ fn main() {\n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n     baz(f);\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n }"}, {"sha": "521de3742b03f510782842b8028ff6bdba5c5dcf", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -41,24 +41,14 @@ note: the lifetime requirement is introduced here\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    |           ^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ lifetime mismatch\n-   |\n-   = note: expected type `FnOnce<(*mut &u32,)>`\n-              found type `FnOnce<(*mut &'a u32,)>`\n-note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |     ^^^ implementation of `FnOnce` is not general enough\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |           ^^^^^^^^^^^^^\n+   = note: `fn(*mut &'a u32)` must implement `FnOnce<(*mut &'0 u32,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(*mut &'a u32,)>`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n@@ -79,24 +69,14 @@ note: the lifetime requirement is introduced here\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    |           ^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ lifetime mismatch\n-   |\n-   = note: expected type `FnOnce<(*mut &u32,)>`\n-              found type `FnOnce<(*mut &'a u32,)>`\n-note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |     ^^^ implementation of `FnOnce` is not general enough\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |           ^^^^^^^^^^^^^\n+   = note: `fn(*mut &'a u32)` must implement `FnOnce<(*mut &'0 u32,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(*mut &'a u32,)>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9ff4813d11286e860c0daf2a9f35dcd2c6c78789", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -22,7 +22,7 @@ static SOME_STRUCT: &SomeStruct = &SomeStruct {\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR mismatched types\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "e95e68c8e6d26c92669d517b9e78f9d6d95ae2eb", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,12 +1,11 @@\n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:24:8\n    |\n LL |     f: &id,\n-   |        ^^^ one type is more general than the other\n+   |        ^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&'a Foo<'b>,)>`\n-              found type `FnOnce<(&Foo<'_>,)>`\n+   = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'b>,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "998e178966a22a30a31f43f8dc54f056043b9942", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -24,19 +24,14 @@ note: this closure does not fulfill the lifetime requirements\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&'static X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "561528c2abbd5fe2691f63c778ce06d846463abd", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -15,9 +15,9 @@ struct X;\n \n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n "}, {"sha": "91c9d459ad8ce5ccdcb27d44bdb93cfe32f3f12c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,16 +1,11 @@\n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -26,19 +21,14 @@ note: this closure does not fulfill the lifetime requirements\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -54,19 +44,14 @@ note: this closure does not fulfill the lifetime requirements\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2db392e8b8b9f8b7f25a8a0ce2eaaa97f299597b", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,5 +1,5 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-30906.rs:15:5\n+  --> $DIR/issue-30906.rs:18:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e2d219e470384700bdf2e95eb2c3f6a681ee5626", "filename": "src/test/ui/unboxed-closures/issue-30906.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -2,17 +2,21 @@\n \n fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n \n-struct Compose<F,G>(F,G);\n-impl<T,F,G> FnOnce<(T,)> for Compose<F,G>\n-where F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n+struct Compose<F, G>(F, G);\n+impl<T, F, G> FnOnce<(T,)> for Compose<F, G>\n+where\n+    F: FnOnce<(T,)>,\n+    G: FnOnce<(F::Output,)>,\n+{\n     type Output = G::Output;\n     extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n         (self.1)((self.0)(x))\n     }\n }\n \n fn bad<T>(f: fn(&'static str) -> T) {\n-    test(Compose(f, |_| {})); //~ ERROR: mismatched types\n+    test(Compose(f, |_| {}));\n+    //~^ ERROR: implementation of `FnOnce` is not general enough\n }\n \n fn main() {}"}, {"sha": "35b1e454c02b4caf219ff4719994c9f4672beca7", "filename": "src/test/ui/unboxed-closures/issue-30906.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,17 +1,11 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-30906.rs:15:5\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-30906.rs:18:5\n    |\n LL |     test(Compose(f, |_| {}));\n-   |     ^^^^ lifetime mismatch\n+   |     ^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&'x str,)>`\n-              found type `FnOnce<(&str,)>`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/issue-30906.rs:3:12\n-   |\n-LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `fn(&'2 str) -> T` must implement `FnOnce<(&'1 str,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 str,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "6da46e20c09c0116b3c75818cfae55d82107f78a", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd93fd3e2f6fb03717db137196a371f6b5c55f7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=cdd93fd3e2f6fb03717db137196a371f6b5c55f7", "patch": "@@ -1,16 +1,11 @@\n error: implementation of `Bar` is not general enough\n   --> $DIR/where-for-self-2.rs:23:5\n    |\n-LL | / trait Bar {\n-LL | |     fn bar(&self);\n-LL | | }\n-   | |_- trait `Bar` defined here\n-...\n-LL |       foo(&X);\n-   |       ^^^ implementation of `Bar` is not general enough\n+LL |     foo(&X);\n+   |     ^^^ implementation of `Bar` is not general enough\n    |\n-   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n-   = note: ...but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n+   = note: `&'0 u32` must implement `Bar`, for any lifetime `'0`...\n+   = note: ...but `Bar` is actually implemented for the type `&'static u32`\n \n error: aborting due to previous error\n "}]}