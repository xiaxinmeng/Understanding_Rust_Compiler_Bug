{"sha": "88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "node_id": "C_kwDOAAsO6NoAKDg4ZDVmN2Y0Y2U3MmUzNDg5MTkzZmI0MWU2ODdjNTM4MDliNWM2YmQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:02:14Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:02:14Z"}, "message": "Make `#[custom_encodable]` an attribute for `newtype_index`\n\nMakes the syntax a little more rusty.", "tree": {"sha": "7db76b11fa1b3b9621793929691bac32d86d0116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7db76b11fa1b3b9621793929691bac32d86d0116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "html_url": "https://github.com/rust-lang/rust/commit/88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d739ef1285bc983383ec726314d9455f6bfb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d739ef1285bc983383ec726314d9455f6bfb77", "html_url": "https://github.com/rust-lang/rust/commit/b4d739ef1285bc983383ec726314d9455f6bfb77"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "49649188f5856c1f70c6b5d17bdb0c25bd0da4e7", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "patch": "@@ -2554,8 +2554,8 @@ pub enum AttrStyle {\n }\n \n rustc_index::newtype_index! {\n+    #[custom_encodable]\n     pub struct AttrId {\n-        ENCODABLE = custom\n         DEBUG_FORMAT = \"AttrId({})\"\n     }\n }"}, {"sha": "6531e55c577ab8d36b704ded3dd154a108cc0252", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "patch": "@@ -198,8 +198,8 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n             // entire graph when there are many connected regions.\n \n             rustc_index::newtype_index! {\n+                #[custom_encodable]\n                 pub struct RegionId {\n-                    ENCODABLE = custom\n                 }\n             }\n             struct ConnectedRegion {"}, {"sha": "7fed40b201b681a6a736718a71b8c4fd21000109", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "patch": "@@ -39,8 +39,8 @@ struct LintLevelSets {\n }\n \n rustc_index::newtype_index! {\n+    #[custom_encodable] // we don't need encoding\n     struct LintStackIndex {\n-        ENCODABLE = custom, // we don't need encoding\n         const COMMAND_LINE = 0,\n     }\n }"}, {"sha": "2e28e9fb49d42e805033e6c1214ff84b96c47132", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "patch": "@@ -6,7 +6,6 @@ use syn::*;\n mod kw {\n     syn::custom_keyword!(DEBUG_FORMAT);\n     syn::custom_keyword!(MAX);\n-    syn::custom_keyword!(ENCODABLE);\n     syn::custom_keyword!(custom);\n     syn::custom_keyword!(ORD_IMPL);\n }\n@@ -27,7 +26,7 @@ struct Newtype(TokenStream);\n \n impl Parse for Newtype {\n     fn parse(input: ParseStream<'_>) -> Result<Self> {\n-        let attrs = input.call(Attribute::parse_outer)?;\n+        let mut attrs = input.call(Attribute::parse_outer)?;\n         let vis: Visibility = input.parse()?;\n         input.parse::<Token![struct]>()?;\n         let name: Ident = input.parse()?;\n@@ -51,6 +50,17 @@ impl Parse for Newtype {\n             Ok(())\n         };\n \n+        attrs.retain(|attr| match attr.path.get_ident() {\n+            Some(ident) => match &*ident.to_string() {\n+                \"custom_encodable\" => {\n+                    encodable = false;\n+                    false\n+                }\n+                _ => true,\n+            },\n+            _ => true,\n+        });\n+\n         if body.lookahead1().peek(Token![..]) {\n             body.parse::<Token![..]>()?;\n         } else {\n@@ -81,14 +91,6 @@ impl Parse for Newtype {\n                     }\n                     continue;\n                 }\n-                if body.lookahead1().peek(kw::ENCODABLE) {\n-                    body.parse::<kw::ENCODABLE>()?;\n-                    body.parse::<Token![=]>()?;\n-                    body.parse::<kw::custom>()?;\n-                    try_comma()?;\n-                    encodable = false;\n-                    continue;\n-                }\n                 if body.lookahead1().peek(kw::ORD_IMPL) {\n                     body.parse::<kw::ORD_IMPL>()?;\n                     body.parse::<Token![=]>()?;"}, {"sha": "326dce7838db301c03dafbcaf1a60b0c45871aee", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "patch": "@@ -10,8 +10,8 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n \n rustc_index::newtype_index! {\n+    #[custom_encodable]\n     pub struct CrateNum {\n-        ENCODABLE = custom\n         DEBUG_FORMAT = \"crate{}\"\n     }\n }\n@@ -194,9 +194,8 @@ rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned\n     /// shorthand for a particular DefPath.\n+    #[custom_encodable] // (only encodable in metadata)\n     pub struct DefIndex {\n-        ENCODABLE = custom // (only encodable in metadata)\n-\n         DEBUG_FORMAT = \"DefIndex({})\",\n         /// The crate root is always assigned index 0 by the AST Map code,\n         /// thanks to `NodeCollector::new`."}, {"sha": "4fb56dac856f29beb96955da44b950015efa34d8", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d5f7f4ce72e3489193fb41e687c53809b5c6bd/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=88d5f7f4ce72e3489193fb41e687c53809b5c6bd", "patch": "@@ -61,8 +61,8 @@ pub struct SyntaxContextData {\n \n rustc_index::newtype_index! {\n     /// A unique ID associated with a macro invocation and expansion.\n+    #[custom_encodable]\n     pub struct ExpnIndex {\n-        ENCODABLE = custom\n     }\n }\n \n@@ -82,8 +82,8 @@ impl fmt::Debug for ExpnId {\n \n rustc_index::newtype_index! {\n     /// A unique ID associated with a macro invocation and expansion.\n+    #[custom_encodable]\n     pub struct LocalExpnId {\n-        ENCODABLE = custom\n         ORD_IMPL = custom\n         DEBUG_FORMAT = \"expn{}\"\n     }"}]}