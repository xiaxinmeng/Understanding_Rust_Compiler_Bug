{"sha": "a1119fd6999aa034d026d1d97d4acff8a2662f18", "node_id": "C_kwDOAAsO6NoAKGExMTE5ZmQ2OTk5YWEwMzRkMDI2ZDFkOTdkNGFjZmY4YTI2NjJmMTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-07T05:44:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-07T05:44:05Z"}, "message": "Rollup merge of #94684 - compiler-errors:gat-anon-late-bound, r=notriddle\n\nFix rustdoc for GATs with with anonymous bound regions\n\nJust use the logic that already worked for cleaning trait refs.\n\nFixes #94683", "tree": {"sha": "ab72562b7c99a7f4f1d2096e975988c6b2c1d41d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab72562b7c99a7f4f1d2096e975988c6b2c1d41d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1119fd6999aa034d026d1d97d4acff8a2662f18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJZulCRBK7hj4Ov3rIwAATukIAAI2F8Xx7AIFycKeOrcqJeMK\ng/5DktdM77bLqDCkob0M875LSyemmPjDicFCiisscYILFjBcIQxCf5XBY2aMrUhA\nv2BEcc5eTkRfsPd404+3gZ7pgvVcdc8NRqc1MYFtONe4558wdQblF5T35f3LAObV\nr4OPgO2FzG+xNbDSgEVxDnWD87nTa5DIvtcFTD09FVe9Pvgcpr5rh8jn5v0k44sB\n0A8hJHoNnOAz0/n6RdGUjDWGL5iFa0AL+QKnIkDTvPCsLv1Bid4bphM5G9GOw2eM\n6Uat91xKoUOODELokDc6jsYSvOhMbq3vAVRqGCI0g/llxyEeNm1mSC9mkuTkF9Q=\n=SHFO\n-----END PGP SIGNATURE-----\n", "payload": "tree ab72562b7c99a7f4f1d2096e975988c6b2c1d41d\nparent f7eb3830df557c66512bf2424cc03fa8de888c9c\nparent 890a44f66b355d40a284349a22ac82aea82f0520\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646631845 +0100\ncommitter GitHub <noreply@github.com> 1646631845 +0100\n\nRollup merge of #94684 - compiler-errors:gat-anon-late-bound, r=notriddle\n\nFix rustdoc for GATs with with anonymous bound regions\n\nJust use the logic that already worked for cleaning trait refs.\n\nFixes #94683\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1119fd6999aa034d026d1d97d4acff8a2662f18", "html_url": "https://github.com/rust-lang/rust/commit/a1119fd6999aa034d026d1d97d4acff8a2662f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1119fd6999aa034d026d1d97d4acff8a2662f18/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7eb3830df557c66512bf2424cc03fa8de888c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eb3830df557c66512bf2424cc03fa8de888c9c", "html_url": "https://github.com/rust-lang/rust/commit/f7eb3830df557c66512bf2424cc03fa8de888c9c"}, {"sha": "890a44f66b355d40a284349a22ac82aea82f0520", "url": "https://api.github.com/repos/rust-lang/rust/commits/890a44f66b355d40a284349a22ac82aea82f0520", "html_url": "https://github.com/rust-lang/rust/commit/890a44f66b355d40a284349a22ac82aea82f0520"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "29c11c7b28a5f43431c15b54f8a3b0906a5f4698", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1119fd6999aa034d026d1d97d4acff8a2662f18/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1119fd6999aa034d026d1d97d4acff8a2662f18/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a1119fd6999aa034d026d1d97d4acff8a2662f18", "patch": "@@ -402,16 +402,7 @@ fn projection_to_path_segment(ty: ty::ProjectionTy<'_>, cx: &mut DocContext<'_>)\n     PathSegment {\n         name: item.name,\n         args: GenericArgs::AngleBracketed {\n-            args: ty.substs[generics.parent_count..]\n-                .iter()\n-                .map(|ty| match ty.unpack() {\n-                    ty::subst::GenericArgKind::Lifetime(lt) => {\n-                        GenericArg::Lifetime(lt.clean(cx).unwrap())\n-                    }\n-                    ty::subst::GenericArgKind::Type(ty) => GenericArg::Type(ty.clean(cx)),\n-                    ty::subst::GenericArgKind::Const(c) => GenericArg::Const(Box::new(c.clean(cx))),\n-                })\n-                .collect(),\n+            args: substs_to_args(cx, &ty.substs[generics.parent_count..], false),\n             bindings: Default::default(),\n         },\n     }\n@@ -1379,11 +1370,7 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n                 });\n                 if let Some(lt) = lifetime.cloned() {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned = if !lt.is_elided() {\n-                        lt.clean(cx)\n-                    } else {\n-                        self::types::Lifetime::elided()\n-                    };\n+                    let cleaned = if !lt.is_elided() { lt.clean(cx) } else { Lifetime::elided() };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;"}, {"sha": "7861b915e9627668edd0e9be6f388f4270f229b7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a1119fd6999aa034d026d1d97d4acff8a2662f18/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1119fd6999aa034d026d1d97d4acff8a2662f18/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a1119fd6999aa034d026d1d97d4acff8a2662f18", "patch": "@@ -77,16 +77,12 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     Crate { module, primitives, external_traits: cx.external_traits.clone() }\n }\n \n-fn external_generic_args(\n+crate fn substs_to_args(\n     cx: &mut DocContext<'_>,\n-    did: DefId,\n-    has_self: bool,\n-    bindings: Vec<TypeBinding>,\n-    substs: SubstsRef<'_>,\n-) -> GenericArgs {\n-    let mut skip_self = has_self;\n-    let mut ty_kind = None;\n-    let args: Vec<_> = substs\n+    substs: &[ty::subst::GenericArg<'_>],\n+    mut skip_first: bool,\n+) -> Vec<GenericArg> {\n+    substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n             GenericArgKind::Lifetime(lt) => match *lt {\n@@ -95,23 +91,32 @@ fn external_generic_args(\n                 }\n                 _ => lt.clean(cx).map(GenericArg::Lifetime),\n             },\n-            GenericArgKind::Type(_) if skip_self => {\n-                skip_self = false;\n+            GenericArgKind::Type(_) if skip_first => {\n+                skip_first = false;\n                 None\n             }\n-            GenericArgKind::Type(ty) => {\n-                ty_kind = Some(ty.kind());\n-                Some(GenericArg::Type(ty.clean(cx)))\n-            }\n+            GenericArgKind::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n             GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(ct.clean(cx)))),\n         })\n-        .collect();\n+        .collect()\n+}\n+\n+fn external_generic_args(\n+    cx: &mut DocContext<'_>,\n+    did: DefId,\n+    has_self: bool,\n+    bindings: Vec<TypeBinding>,\n+    substs: SubstsRef<'_>,\n+) -> GenericArgs {\n+    let args = substs_to_args(cx, &substs, has_self);\n \n     if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n-        let inputs = match ty_kind.unwrap() {\n-            ty::Tuple(tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n-            _ => return GenericArgs::AngleBracketed { args, bindings: bindings.into() },\n-        };\n+        let inputs =\n+            // The trait's first substitution is the one after self, if there is one.\n+            match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {\n+                ty::Tuple(tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                _ => return GenericArgs::AngleBracketed { args, bindings: bindings.into() },\n+            };\n         let output = None;\n         // FIXME(#20299) return type comes from a projection now\n         // match types[1].kind {"}, {"sha": "38ecf5283108f047462a5832192b6001e4689b30", "filename": "src/test/rustdoc/generic-associated-types/issue-94683.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1119fd6999aa034d026d1d97d4acff8a2662f18/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1119fd6999aa034d026d1d97d4acff8a2662f18/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs?ref=a1119fd6999aa034d026d1d97d4acff8a2662f18", "patch": "@@ -0,0 +1,13 @@\n+#![crate_name = \"foo\"]\n+#![feature(generic_associated_types)]\n+\n+pub trait Trait {\n+    type Gat<'a>;\n+}\n+\n+// Make sure that the elided lifetime shows up\n+\n+// @has foo/type.T.html\n+// @has - \"pub type T = \"\n+// @has - \"&lt;'_&gt;\"\n+pub type T = fn(&<() as Trait>::Gat<'_>);"}]}