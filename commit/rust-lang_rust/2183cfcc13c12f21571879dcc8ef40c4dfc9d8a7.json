{"sha": "2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODNjZmNjMTNjMTJmMjE1NzE4NzlkY2M4ZWY0MGM0ZGZjOWQ4YTc=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2019-01-20T12:45:22Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2019-01-20T12:45:22Z"}, "message": "Fix `implicit_return` false positives.", "tree": {"sha": "d3c85160b03efbf41f28d6ccf1e7d6874fe30d6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c85160b03efbf41f28d6ccf1e7d6874fe30d6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJWBAABCABAFiEEtfVYniVMfR+YKQUSxyLctqGR7qsFAlxEbWYiHGRheHBlZGRh\nQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbQAKCRDHIty2oZHuq0VjD/9aGRsORK7U\nGtlcr7pCid3ZFIbof/EWOvP+OKsFldTtt1xa46tbYSg03jwJ3maH0RtxIp889FuF\n5CJQl1ABtKIeYpNdbr2mBe0hRxi9ihNNACJ+o1qTf7FCTey5KeXgCXwixdL/Fovy\nHBh0o7se8n6UtSZO8sW8leHW0o2WgAMGiBzRmG6Zv2y14F4CCbJks0vWWS/rkzCg\nf3OOL5Gdku4acQ+M2vKt8d8A7c9Ud+q3/4qfs4I7Sj+8SidKVoOpJuFehRP/4udt\nOPGos96cEXWDB3pJi1yA0v9jsIihgko4rG3i5e0pRm2O5OzQXiYBmxkcOX3Gr14t\nvJLm9Ay0+r46/FAgf9pIkpmjmeoMi6Zj4atsdiMHBUHNPqkZCwP3dwSsHhm4lWLE\nWlm7K18WX64Hg9pnFhJLADMq/fnzRK4izNO4P9yiIqfUd1oGa6Qjpj+r+9sLpgUy\nFmT7VVz9mUUReLWwRoM3QF8BHM3vSIZ1HImK2lzxNXrwGzAaPmpyimAIz60z9rrT\nASVe7T0Y13DMo5ocf+Zlbzr9qvKYKpYf0oK83UTjHoXSkGI+fiDlLqJd7Cdh4gZ8\nSSp5WyAdtSd4QNyHykRbWo9SD5yotyUNeswnpYUtyZHrZgo5T+cTKdn7m9fH689J\nyGO5WCtN20YLIZXigo6s9iJBj4ZPEUQg1g==\n=fVZz\n-----END PGP SIGNATURE-----", "payload": "tree d3c85160b03efbf41f28d6ccf1e7d6874fe30d6e\nparent e648adf0866a1cea7db6ce2d33ea86e442f25377\nauthor daxpedda <daxpedda@users.noreply.github.com> 1547988322 +0100\ncommitter daxpedda <daxpedda@users.noreply.github.com> 1547988322 +0100\n\nFix `implicit_return` false positives.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "html_url": "https://github.com/rust-lang/rust/commit/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e648adf0866a1cea7db6ce2d33ea86e442f25377", "url": "https://api.github.com/repos/rust-lang/rust/commits/e648adf0866a1cea7db6ce2d33ea86e442f25377", "html_url": "https://github.com/rust-lang/rust/commit/e648adf0866a1cea7db6ce2d33ea86e442f25377"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "073c37eefc5a969cf4d32bf5c24ae2b3f9e4b891", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n-use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n+use crate::utils::{in_macro, is_expn_of, snippet_opt, span_lint_and_then};\n+use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, MatchSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n@@ -81,15 +81,31 @@ impl Pass {\n                     Self::expr_match(cx, else_expr);\n                 }\n             },\n-            ExprKind::Match(_, arms, ..) => {\n-                for arm in arms {\n-                    Self::expr_match(cx, &arm.body);\n+            ExprKind::Match(.., arms, source) => {\n+                let check_all_arms = match source {\n+                    MatchSource::IfLetDesugar {\n+                        contains_else_clause: has_else,\n+                    } => *has_else,\n+                    _ => true,\n+                };\n+\n+                if check_all_arms {\n+                    for arm in arms {\n+                        Self::expr_match(cx, &arm.body);\n+                    }\n+                } else {\n+                    Self::expr_match(cx, &arms.first().expect(\"if let doesn't have a single arm\").body);\n                 }\n             },\n             // skip if it already has a return statement\n             ExprKind::Ret(..) => (),\n             // everything else is missing `return`\n-            _ => Self::lint(cx, expr.span, expr.span, \"add `return` as shown\"),\n+            _ => {\n+                // make sure it's not just an unreachable expression\n+                if is_expn_of(expr.span, \"unreachable\").is_none() {\n+                    Self::lint(cx, expr.span, expr.span, \"add `return` as shown\")\n+                }\n+            },\n         }\n     }\n }"}, {"sha": "d1c63ca1697c3f9e1a4a2b2b1a5a9d29df1ec91d", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "patch": "@@ -26,6 +26,14 @@ fn test_match(x: bool) -> bool {\n     }\n }\n \n+#[allow(clippy::match_bool, clippy::needless_return)]\n+fn test_match_with_unreachable(x: bool) -> bool {\n+    match x {\n+        true => return false,\n+        false => unreachable!(),\n+    }\n+}\n+\n #[allow(clippy::never_loop)]\n fn test_loop() -> bool {\n     loop {\n@@ -53,6 +61,15 @@ fn test_loop_with_nests() -> bool {\n     }\n }\n \n+#[allow(clippy::redundant_pattern_matching)]\n+fn test_loop_with_if_let() -> bool {\n+    loop {\n+        if let Some(x) = Some(true) {\n+            return x;\n+        }\n+    }\n+}\n+\n fn test_closure() {\n     #[rustfmt::skip]\n     let _ = || { true };\n@@ -63,8 +80,10 @@ fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_if_block();\n     let _ = test_match(true);\n+    let _ = test_match_with_unreachable(true);\n     let _ = test_loop();\n     let _ = test_loop_with_block();\n     let _ = test_loop_with_nests();\n+    let _ = test_loop_with_if_let();\n     test_closure();\n }"}, {"sha": "98b588f1a74a72fb10c35817f4538d6449666e97", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=2183cfcc13c12f21571879dcc8ef40c4dfc9d8a7", "patch": "@@ -31,31 +31,31 @@ LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:32:9\n+  --> $DIR/implicit_return.rs:40:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:40:13\n+  --> $DIR/implicit_return.rs:48:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:49:13\n+  --> $DIR/implicit_return.rs:57:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:58:18\n+  --> $DIR/implicit_return.rs:75:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:59:16\n+  --> $DIR/implicit_return.rs:76:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`"}]}