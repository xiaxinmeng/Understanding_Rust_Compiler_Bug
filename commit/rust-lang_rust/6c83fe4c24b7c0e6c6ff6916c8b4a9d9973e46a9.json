{"sha": "6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjODNmZTRjMjRiN2MwZTZjNmZmNjkxNmM4YjRhOWQ5OTczZTQ2YTk=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakubw@jakubw.net", "date": "2012-12-15T23:13:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T00:50:40Z"}, "message": "Add more tests", "tree": {"sha": "344273e18b909fa5f985d0c856ab2fe956d0e603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344273e18b909fa5f985d0c856ab2fe956d0e603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "html_url": "https://github.com/rust-lang/rust/commit/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6530fd340119362e346f28c03e1efc772c18fbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6530fd340119362e346f28c03e1efc772c18fbba", "html_url": "https://github.com/rust-lang/rust/commit/6530fd340119362e346f28c03e1efc772c18fbba"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "70c7c33f691f18d20dd388e33c4793d5e6ba0a8a", "filename": "src/test/compile-fail/alt-vec-illegal-tail-element-loan.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Fcompile-fail%2Falt-vec-illegal-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Fcompile-fail%2Falt-vec-illegal-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-vec-illegal-tail-element-loan.rs?ref=6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "patch": "@@ -0,0 +1,13 @@\n+fn a() -> &int {\n+    let vec = [1, 2, 3, 4];\n+    let tail = match vec {\n+        [a, ..tail] => &tail[0], //~ ERROR illegal borrow\n+        _ => fail ~\"foo\"\n+    };\n+    move tail\n+}\n+\n+fn main() {\n+    let fifth = a();\n+    io::println(fmt!(\"%d\", *fifth));\n+}"}, {"sha": "fc7d663713195796fa7d3b3f61cd7856ba2b9c1f", "filename": "src/test/compile-fail/alt-vec-tail-move.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs?ref=6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let a = [mut 1, 2, 3, 4];\n+    let _ = match a {\n+        [1, 2, ..move tail] => tail,\n+        _ => core::util::unreachable()\n+    };\n+    a[0] = 0; //~ ERROR: use of moved variable\n+}"}, {"sha": "badb0245b8174f5e9ed3b5858064348f011f54d7", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "patch": "@@ -0,0 +1,22 @@\n+fn main() {\n+    let x = @[1, 2, 3];\n+    match x {\n+        [2, .._] => core::util::unreachable(),\n+        [1, ..tail] => {\n+            assert tail == [2, 3];\n+        }\n+        [_] => core::util::unreachable(),\n+        [] => core::util::unreachable()\n+    }\n+\n+    let y = (~[(1, true), (2, false)], 0.5);\n+    match y {\n+        ([_, _, _], 0.5) => core::util::unreachable(),\n+        ([(1, a), (b, false), ..tail], _) => {\n+            assert a == true;\n+            assert b == 2;\n+            assert tail.is_empty();\n+        }\n+        ([..tail], _) => core::util::unreachable()\n+    }\n+}"}, {"sha": "ea21408788e880d5bf1b25b941a32c0c3710f3e7", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=6c83fe4c24b7c0e6c6ff6916c8b4a9d9973e46a9", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let x = &[1, 2, 3, 4, 5];\n+    if !x.is_empty() {\n+        let el = match x {\n+            [1, ..ref tail] => &tail[0], \n+            _ => core::util::unreachable()\n+        };\n+        io::println(fmt!(\"%d\", *el));\n+    }\n+}"}]}