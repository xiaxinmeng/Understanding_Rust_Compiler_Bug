{"sha": "e38dfe55365cfbc787db917b2c423942d607775e", "node_id": "C_kwDOAAsO6NoAKGUzOGRmZTU1MzY1Y2ZiYzc4N2RiOTE3YjJjNDIzOTQyZDYwNzc3NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T12:09:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T12:09:57Z"}, "message": "Auto merge of #13186 - enomado:master, r=Veykril\n\nFilter imports on find-all-references\n\nAttempt to #13184", "tree": {"sha": "ba8a08cdebc9675d8168d1cf1359a5c01ce19bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8a08cdebc9675d8168d1cf1359a5c01ce19bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38dfe55365cfbc787db917b2c423942d607775e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38dfe55365cfbc787db917b2c423942d607775e", "html_url": "https://github.com/rust-lang/rust/commit/e38dfe55365cfbc787db917b2c423942d607775e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38dfe55365cfbc787db917b2c423942d607775e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352a5b86251625eed09668f5281b097b30d164c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/352a5b86251625eed09668f5281b097b30d164c0", "html_url": "https://github.com/rust-lang/rust/commit/352a5b86251625eed09668f5281b097b30d164c0"}, {"sha": "f7f4792f4f4492e62a9439bdf214acee797e0341", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4792f4f4492e62a9439bdf214acee797e0341", "html_url": "https://github.com/rust-lang/rust/commit/f7f4792f4f4492e62a9439bdf214acee797e0341"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "ba4c330bf3d5749049b29117c6f8c5c44de5af10", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -158,6 +158,7 @@ pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation)\n                 &Semantics::new(db),\n                 FilePosition { file_id, offset: annotation.range.start() },\n                 None,\n+                false,\n             )\n             .map(|result| {\n                 result"}, {"sha": "065b48378b8852e59d30e4f8615d15357e708a5c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -425,8 +425,11 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n+        exclude_imports: bool,\n     ) -> Cancellable<Option<Vec<ReferenceSearchResult>>> {\n-        self.with_db(|db| references::find_all_refs(&Semantics::new(db), position, search_scope))\n+        self.with_db(|db| {\n+            references::find_all_refs(&Semantics::new(db), position, search_scope, exclude_imports)\n+        })\n     }\n \n     /// Finds all methods and free functions for the file. Does not return tests!"}, {"sha": "5b410c454d9d5495275b87e960adf3403c00be42", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -54,6 +54,7 @@ pub(crate) fn find_all_refs(\n     sema: &Semantics<'_, RootDatabase>,\n     position: FilePosition,\n     search_scope: Option<SearchScope>,\n+    exclude_imports: bool,\n ) -> Option<Vec<ReferenceSearchResult>> {\n     let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n@@ -79,6 +80,10 @@ pub(crate) fn find_all_refs(\n                 retain_adt_literal_usages(&mut usages, def, sema);\n             }\n \n+            if exclude_imports {\n+                filter_import_references(&mut usages);\n+            }\n+\n             let references = usages\n                 .into_iter()\n                 .map(|(file_id, refs)| {\n@@ -112,6 +117,17 @@ pub(crate) fn find_all_refs(\n     }\n }\n \n+fn filter_import_references(usages: &mut UsageSearchResult) {\n+    for (_file_id, refs) in &mut usages.references {\n+        refs.retain(|it| match it.name.as_name_ref() {\n+            Some(name_ref) => {\n+                !name_ref.syntax().ancestors().any(|it_ref| matches!(it_ref.kind(), USE))\n+            }\n+            None => true,\n+        });\n+    }\n+}\n+\n pub(crate) fn find_defs<'a>(\n     sema: &'a Semantics<'_, RootDatabase>,\n     syntax: &SyntaxNode,\n@@ -1094,7 +1110,7 @@ impl Foo {\n \n     fn check_with_scope(ra_fixture: &str, search_scope: Option<SearchScope>, expect: Expect) {\n         let (analysis, pos) = fixture::position(ra_fixture);\n-        let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, search_scope, false).unwrap().unwrap();\n \n         let mut actual = String::new();\n         for refs in refs {"}, {"sha": "e0384e67d4668b58005fe5a9eb16e0d4b760405a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -219,7 +219,6 @@ config_data! {\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n-\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -361,6 +360,9 @@ config_data! {\n         /// this is rust-analyzer itself, but we override this in tests).\n         procMacro_server: Option<PathBuf>          = \"null\",\n \n+        /// Exclude imports from find-all-references.\n+        references_excludeImports: bool = \"false\",\n+\n         /// Command to be executed instead of 'cargo' for runnables.\n         runnables_command: Option<String> = \"null\",\n         /// Additional arguments to be passed to cargo for runnables such as\n@@ -1151,6 +1153,10 @@ impl Config {\n         }\n     }\n \n+    pub fn find_all_refs_exclude_imports(&self) -> bool {\n+        self.data.references_excludeImports\n+    }\n+\n     pub fn snippet_cap(&self) -> bool {\n         self.experimental(\"snippetTextEdit\")\n     }"}, {"sha": "7b486744da52d5d510c291264570bd52ebd686ca", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -1012,7 +1012,9 @@ pub(crate) fn handle_references(\n     let _p = profile::span(\"handle_references\");\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n \n-    let refs = match snap.analysis.find_all_refs(position, None)? {\n+    let exclude_imports = snap.config.find_all_refs_exclude_imports();\n+\n+    let refs = match snap.analysis.find_all_refs(position, None, exclude_imports)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };\n@@ -1652,7 +1654,9 @@ fn show_ref_command_link(\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover_actions().references && snap.config.client_commands().show_reference {\n-        if let Some(ref_search_res) = snap.analysis.find_all_refs(*position, None).unwrap_or(None) {\n+        if let Some(ref_search_res) =\n+            snap.analysis.find_all_refs(*position, None, false).unwrap_or(None)\n+        {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n             let position = to_proto::position(&line_index, position.offset);"}, {"sha": "2b02c64b66f08a71fd89e2f05c1276ab5f114f46", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -551,6 +551,11 @@ This config takes a map of crate names with the exported proc-macro names to ign\n Internal config, path to proc-macro server executable (typically,\n this is rust-analyzer itself, but we override this in tests).\n --\n+[[rust-analyzer.references.excludeImports]]rust-analyzer.references.excludeImports (default: `false`)::\n++\n+--\n+Exclude imports from find-all-references.\n+--\n [[rust-analyzer.runnables.command]]rust-analyzer.runnables.command (default: `null`)::\n +\n --"}, {"sha": "2ffed7595afabb1ed0de4653bd1adb1cf71112cb", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e38dfe55365cfbc787db917b2c423942d607775e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e38dfe55365cfbc787db917b2c423942d607775e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e38dfe55365cfbc787db917b2c423942d607775e", "patch": "@@ -1041,6 +1041,11 @@\n                         \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.references.excludeImports\": {\n+                    \"markdownDescription\": \"Exclude imports from find-all-references.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.runnables.command\": {\n                     \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n                     \"default\": null,"}]}