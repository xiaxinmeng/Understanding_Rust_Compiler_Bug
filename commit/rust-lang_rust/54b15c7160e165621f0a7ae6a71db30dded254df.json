{"sha": "54b15c7160e165621f0a7ae6a71db30dded254df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjE1YzcxNjBlMTY1NjIxZjBhN2FlNmE3MWRiMzBkZGVkMjU0ZGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-25T09:14:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-10T11:50:13Z"}, "message": "the type hint given during a cast operation is just a soft hint", "tree": {"sha": "0f84e8a7c183abb499f1a0edf1db70e75c41867c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f84e8a7c183abb499f1a0edf1db70e75c41867c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b15c7160e165621f0a7ae6a71db30dded254df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b15c7160e165621f0a7ae6a71db30dded254df", "html_url": "https://github.com/rust-lang/rust/commit/54b15c7160e165621f0a7ae6a71db30dded254df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b15c7160e165621f0a7ae6a71db30dded254df/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee60037f9cee27d9de70195d7e63d4946465a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee60037f9cee27d9de70195d7e63d4946465a2f", "html_url": "https://github.com/rust-lang/rust/commit/6ee60037f9cee27d9de70195d7e63d4946465a2f"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "f4c5196d0cdb5145f7735b20d6308df90e67b29a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54b15c7160e165621f0a7ae6a71db30dded254df/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b15c7160e165621f0a7ae6a71db30dded254df/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=54b15c7160e165621f0a7ae6a71db30dded254df", "patch": "@@ -743,7 +743,21 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n             }\n         };\n \n-        let val = try!(eval_const_expr_partial(tcx, &base, base_hint, fn_args));\n+        let val = match eval_const_expr_partial(tcx, &base, base_hint, fn_args) {\n+            Ok(val) => val,\n+            Err(ConstEvalErr { kind: InferredWrongType(val), .. }) => {\n+                // Something like `5i8 as usize` doesn't need a type hint for the base\n+                // instead take the type hint from the inner value\n+                let hint = match val.int_type() {\n+                    Some(IntType::UnsignedInt(ty)) => ty_hint.checked_or(tcx.mk_mach_uint(ty)),\n+                    Some(IntType::SignedInt(ty)) => ty_hint.checked_or(tcx.mk_mach_int(ty)),\n+                    // we had a type hint, so we can't have an unknown type\n+                    None => unreachable!(),\n+                };\n+                try!(eval_const_expr_partial(tcx, &base, hint, fn_args))\n+            },\n+            Err(e) => return Err(e),\n+        };\n         match cast_const(tcx, val, ety) {\n             Ok(val) => val,\n             Err(kind) => return Err(ConstEvalErr { span: e.span, kind: kind }),"}, {"sha": "bb72711379eaa35ff6e124b22eea4a31580f7d80", "filename": "src/librustc_const_eval/int.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54b15c7160e165621f0a7ae6a71db30dded254df/src%2Flibrustc_const_eval%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b15c7160e165621f0a7ae6a71db30dded254df/src%2Flibrustc_const_eval%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fint.rs?ref=54b15c7160e165621f0a7ae6a71db30dded254df", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n use std::cmp::Ordering;\n+use syntax::attr::IntType;\n+use syntax::ast::{IntTy, UintTy};\n \n use super::is::*;\n use super::us::*;\n@@ -258,6 +260,22 @@ impl ConstInt {\n             ConstInt::Infer(_) | ConstInt::InferSigned(_) => panic!(\"no type info for const int\"),\n         }\n     }\n+\n+    pub fn int_type(self) -> Option<IntType> {\n+        match self {\n+            ConstInt::I8(_) => Some(IntType::SignedInt(IntTy::I8)),\n+            ConstInt::I16(_) => Some(IntType::SignedInt(IntTy::I16)),\n+            ConstInt::I32(_) => Some(IntType::SignedInt(IntTy::I32)),\n+            ConstInt::I64(_) => Some(IntType::SignedInt(IntTy::I64)),\n+            ConstInt::Isize(_) => Some(IntType::SignedInt(IntTy::Is)),\n+            ConstInt::U8(_) => Some(IntType::UnsignedInt(UintTy::U8)),\n+            ConstInt::U16(_) => Some(IntType::UnsignedInt(UintTy::U16)),\n+            ConstInt::U32(_) => Some(IntType::UnsignedInt(UintTy::U32)),\n+            ConstInt::U64(_) => Some(IntType::UnsignedInt(UintTy::U64)),\n+            ConstInt::Usize(_) => Some(IntType::UnsignedInt(UintTy::Us)),\n+            _ => None,\n+        }\n+    }\n }\n \n impl ::std::cmp::PartialOrd for ConstInt {"}]}