{"sha": "a17234ca542f45028d846c7ec95c0a19d96df743", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzIzNGNhNTQyZjQ1MDI4ZDg0NmM3ZWM5NWMwYTE5ZDk2ZGY3NDM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T00:30:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T02:15:26Z"}, "message": "Add `SourceInfo::outermost`.", "tree": {"sha": "894b0e2bdf185c7621a548cfb81ab02c0953d42f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894b0e2bdf185c7621a548cfb81ab02c0953d42f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17234ca542f45028d846c7ec95c0a19d96df743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17234ca542f45028d846c7ec95c0a19d96df743", "html_url": "https://github.com/rust-lang/rust/commit/a17234ca542f45028d846c7ec95c0a19d96df743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17234ca542f45028d846c7ec95c0a19d96df743/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c61a904482129989f5c1e5cb9f1008efb76f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "html_url": "https://github.com/rust-lang/rust/commit/a0c61a904482129989f5c1e5cb9f1008efb76f7f"}], "stats": {"total": 98, "additions": 45, "deletions": 53}, "files": [{"sha": "e5f70d7ef9984361ee8c8a13c18d3499dc027870", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -474,6 +474,13 @@ pub struct SourceInfo {\n     pub scope: SourceScope,\n }\n \n+impl SourceInfo {\n+    #[inline]\n+    pub fn outermost(span: Span) -> Self {\n+        SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Borrow kinds\n \n@@ -944,7 +951,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability,\n             ty,\n             user_ty: UserTypeProjections::none(),\n-            source_info: SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE },\n+            source_info: SourceInfo::outermost(span),\n             internal,\n             local_info: LocalInfo::Other,\n             is_block_tail: None,\n@@ -960,7 +967,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n             user_ty: UserTypeProjections::none(),\n-            source_info: SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE },\n+            source_info: SourceInfo::outermost(span),\n             internal: false,\n             is_block_tail: None,\n             local_info: LocalInfo::Other,\n@@ -1406,10 +1413,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n         let mut gap = self.statements.len()..self.statements.len() + extra_stmts;\n         self.statements.resize(\n             gap.end,\n-            Statement {\n-                source_info: SourceInfo { span: DUMMY_SP, scope: OUTERMOST_SOURCE_SCOPE },\n-                kind: StatementKind::Nop,\n-            },\n+            Statement { source_info: SourceInfo::outermost(DUMMY_SP), kind: StatementKind::Nop },\n         );\n         for (splice_start, new_stmts) in splices.into_iter().rev() {\n             let splice_end = splice_start + new_stmts.size_hint().0;"}, {"sha": "2b6d44984bf530349879736fd723437fadc563ef", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -242,10 +242,10 @@ macro_rules! make_mir_visitor {\n             ) {\n                 let span = body.span;\n                 if let Some(yield_ty) = &$($mutability)? body.yield_ty {\n-                    self.visit_ty(yield_ty, TyContext::YieldTy(SourceInfo {\n-                        span,\n-                        scope: OUTERMOST_SOURCE_SCOPE,\n-                    }));\n+                    self.visit_ty(\n+                        yield_ty,\n+                        TyContext::YieldTy(SourceInfo::outermost(span))\n+                    );\n                 }\n \n                 // for best performance, we want to use an iterator rather\n@@ -263,10 +263,10 @@ macro_rules! make_mir_visitor {\n                     self.visit_source_scope_data(scope);\n                 }\n \n-                self.visit_ty(&$($mutability)? body.return_ty(), TyContext::ReturnTy(SourceInfo {\n-                    span: body.span,\n-                    scope: OUTERMOST_SOURCE_SCOPE,\n-                }));\n+                self.visit_ty(\n+                    &$($mutability)? body.return_ty(),\n+                    TyContext::ReturnTy(SourceInfo::outermost(body.span))\n+                );\n \n                 for local in body.local_decls.indices() {\n                     self.visit_local_decl(local, & $($mutability)? body.local_decls[local]);"}, {"sha": "3ed0a9594e7d5e57592ed53abeaa1caa39705b12", "filename": "src/librustc_mir/dataflow/framework/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Ftests.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -16,7 +16,7 @@ use crate::dataflow::BottomValue;\n /// This is the `Body` that will be used by the `MockAnalysis` below. The shape of its CFG is not\n /// important.\n fn mock_body() -> mir::Body<'static> {\n-    let source_info = mir::SourceInfo { scope: mir::OUTERMOST_SOURCE_SCOPE, span: DUMMY_SP };\n+    let source_info = mir::SourceInfo::outermost(DUMMY_SP);\n \n     let mut blocks = IndexVec::new();\n     let mut block = |n, kind| {"}, {"sha": "a58ac7cfe18af45b94f14f50a0801125d22b0adb", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -146,12 +146,11 @@ enum CallKind {\n }\n \n fn temp_decl(mutability: Mutability, ty: Ty<'_>, span: Span) -> LocalDecl<'_> {\n-    let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability,\n         ty,\n         user_ty: UserTypeProjections::none(),\n-        source_info,\n+        source_info: SourceInfo::outermost(span),\n         internal: false,\n         local_info: LocalInfo::Other,\n         is_block_tail: None,\n@@ -185,7 +184,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     let sig = tcx.erase_late_bound_regions(&sig);\n     let span = tcx.def_span(def_id);\n \n-    let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n+    let source_info = SourceInfo::outermost(span);\n \n     let return_block = BasicBlock::new(1);\n     let mut blocks = IndexVec::with_capacity(2);\n@@ -374,7 +373,7 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn source_info(&self) -> SourceInfo {\n-        SourceInfo { span: self.span, scope: OUTERMOST_SOURCE_SCOPE }\n+        SourceInfo::outermost(self.span)\n     }\n \n     fn block(\n@@ -687,7 +686,7 @@ fn build_call_shim<'tcx>(\n     debug!(\"build_call_shim: sig={:?}\", sig);\n \n     let mut local_decls = local_decls_for_sig(&sig, span);\n-    let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n+    let source_info = SourceInfo::outermost(span);\n \n     let rcvr_place = || {\n         assert!(rcvr_adjustment.is_some());\n@@ -849,7 +848,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n \n     let local_decls = local_decls_for_sig(&sig, span);\n \n-    let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n+    let source_info = SourceInfo::outermost(span);\n \n     let variant_index = if adt_def.is_enum() {\n         adt_def.variant_index_with_ctor_id(ctor_id)"}, {"sha": "baa3e5e1581c5c2f2f90652690de56cf5c16a6da", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -77,11 +77,9 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         // PART 1\n         // Retag arguments at the beginning of the start block.\n         {\n-            let source_info = SourceInfo {\n-                scope: OUTERMOST_SOURCE_SCOPE,\n-                span, // FIXME: Consider using just the span covering the function\n-                      // argument declaration.\n-            };\n+            // FIXME: Consider using just the span covering the function\n+            // argument declaration.\n+            let source_info = SourceInfo::outermost(span);\n             // Gather all arguments, skip return value.\n             let places = local_decls\n                 .iter_enumerated()"}, {"sha": "35726dde602da794823e5df048ad7c1e0d1f3b3f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             const_context,\n             min_const_fn,\n             violations: vec![],\n-            source_info: SourceInfo { span: body.span, scope: OUTERMOST_SOURCE_SCOPE },\n+            source_info: SourceInfo::outermost(body.span),\n             tcx,\n             param_env,\n             used_unsafe: Default::default(),"}, {"sha": "a9d566c92e935f5008c04b39d7ff0bba88a80a42", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -261,7 +261,7 @@ impl TransformVisitor<'tcx> {\n \n         let self_place = Place::from(SELF_ARG);\n         let assign = Statement {\n-            source_info: source_info(body),\n+            source_info: SourceInfo::outermost(body.span),\n             kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n         };\n         (assign, temp)\n@@ -395,7 +395,7 @@ fn replace_local<'tcx>(\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n-    let source_info = source_info(body);\n+    let source_info = SourceInfo::outermost(body.span);\n     let new_decl = LocalDecl {\n         mutability: Mutability::Mut,\n         ty,\n@@ -784,7 +784,7 @@ fn insert_switch<'tcx>(\n         targets: cases.iter().map(|&(_, d)| d).chain(iter::once(default_block)).collect(),\n     };\n \n-    let source_info = source_info(body);\n+    let source_info = SourceInfo::outermost(body.span);\n     body.basic_blocks_mut().raw.insert(\n         0,\n         BasicBlockData {\n@@ -858,7 +858,7 @@ fn create_generator_drop_shim<'tcx>(\n     let mut body = body.clone();\n     body.arg_count = 1; // make sure the resume argument is not included here\n \n-    let source_info = source_info(&body);\n+    let source_info = SourceInfo::outermost(body.span);\n \n     let mut cases = create_cases(&mut body, transform, Operation::Drop);\n \n@@ -922,7 +922,7 @@ fn create_generator_drop_shim<'tcx>(\n }\n \n fn insert_term_block<'tcx>(body: &mut Body<'tcx>, kind: TerminatorKind<'tcx>) -> BasicBlock {\n-    let source_info = source_info(body);\n+    let source_info = SourceInfo::outermost(body.span);\n     body.basic_blocks_mut().push(BasicBlockData {\n         statements: Vec::new(),\n         terminator: Some(Terminator { source_info, kind }),\n@@ -948,7 +948,7 @@ fn insert_panic_block<'tcx>(\n         cleanup: None,\n     };\n \n-    let source_info = source_info(body);\n+    let source_info = SourceInfo::outermost(body.span);\n     body.basic_blocks_mut().push(BasicBlockData {\n         statements: Vec::new(),\n         terminator: Some(Terminator { source_info, kind: term }),\n@@ -1025,7 +1025,7 @@ fn create_generator_resume_function<'tcx>(\n \n     // Poison the generator when it unwinds\n     if can_unwind {\n-        let source_info = source_info(body);\n+        let source_info = SourceInfo::outermost(body.span);\n         let poison_block = body.basic_blocks_mut().push(BasicBlockData {\n             statements: vec![transform.set_discr(VariantIdx::new(POISONED), source_info)],\n             terminator: Some(Terminator { source_info, kind: TerminatorKind::Resume }),\n@@ -1092,10 +1092,6 @@ fn create_generator_resume_function<'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, body, |_, _| Ok(()));\n }\n \n-fn source_info(body: &Body<'_>) -> SourceInfo {\n-    SourceInfo { span: body.span, scope: OUTERMOST_SOURCE_SCOPE }\n-}\n-\n fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n@@ -1104,7 +1100,7 @@ fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n         target: return_block,\n         unwind: None,\n     };\n-    let source_info = source_info(body);\n+    let source_info = SourceInfo::outermost(body.span);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     body.basic_blocks_mut().push(BasicBlockData {\n@@ -1135,7 +1131,7 @@ fn create_cases<'tcx>(\n     transform: &TransformVisitor<'tcx>,\n     operation: Operation,\n ) -> Vec<(usize, BasicBlock)> {\n-    let source_info = source_info(body);\n+    let source_info = SourceInfo::outermost(body.span);\n \n     transform\n         .suspension_points\n@@ -1241,7 +1237,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             replace_local(resume_local, body.local_decls[resume_local].ty, body, tcx);\n \n         // When first entering the generator, move the resume argument into its new local.\n-        let source_info = source_info(body);\n+        let source_info = SourceInfo::outermost(body.span);\n         let stmts = &mut body.basic_blocks_mut()[BasicBlock::new(0)].statements;\n         stmts.insert(\n             0,"}, {"sha": "8559e0a20eafbc98f24100d35c487e080fc53db6", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -775,7 +775,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         self.promoted.basic_blocks_mut().push(BasicBlockData {\n             statements: vec![],\n             terminator: Some(Terminator {\n-                source_info: SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE },\n+                source_info: SourceInfo::outermost(span),\n                 kind: TerminatorKind::Return,\n             }),\n             is_cleanup: false,\n@@ -786,7 +786,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let last = self.promoted.basic_blocks().last().unwrap();\n         let data = &mut self.promoted[last];\n         data.statements.push(Statement {\n-            source_info: SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE },\n+            source_info: SourceInfo::outermost(span),\n             kind: StatementKind::Assign(box (Place::from(dest), rvalue)),\n         });\n     }"}, {"sha": "c1c97909b3c4f5869457ff2a124efe88b88c50ea", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> MirPatch<'tcx> {\n             result.new_block(BasicBlockData {\n                 statements: vec![],\n                 terminator: Some(Terminator {\n-                    source_info: SourceInfo { span: body.span, scope: OUTERMOST_SOURCE_SCOPE },\n+                    source_info: SourceInfo::outermost(body.span),\n                     kind: TerminatorKind::Resume,\n                 }),\n                 is_cleanup: true,"}, {"sha": "9a02b92145cd364c744b463e576175e2cb8b6f77", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -804,10 +804,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> BlockAnd<()> {\n         // Allocate locals for the function arguments\n         for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n-            let source_info = SourceInfo {\n-                scope: OUTERMOST_SOURCE_SCOPE,\n-                span: arg_opt.map_or(self.fn_span, |arg| arg.pat.span),\n-            };\n+            let source_info =\n+                SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n             let arg_local = self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n@@ -885,10 +883,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     self.var_debug_info.push(VarDebugInfo {\n                         name,\n-                        source_info: SourceInfo {\n-                            scope: OUTERMOST_SOURCE_SCOPE,\n-                            span: tcx_hir.span(var_id),\n-                        },\n+                        source_info: SourceInfo::outermost(tcx_hir.span(var_id)),\n                         place: Place {\n                             local: closure_env_arg,\n                             projection: tcx.intern_place_elems(&projs),"}, {"sha": "4daf567d7d451497682ce5618fa9e840bff8747b", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17234ca542f45028d846c7ec95c0a19d96df743/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=a17234ca542f45028d846c7ec95c0a19d96df743", "patch": "@@ -989,7 +989,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let resumeblk = self.cfg.start_new_cleanup_block();\n             self.cfg.terminate(\n                 resumeblk,\n-                SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span: self.fn_span },\n+                SourceInfo::outermost(self.fn_span),\n                 TerminatorKind::Resume,\n             );\n             self.cached_resume_block = Some(resumeblk);"}]}