{"sha": "451cc7e5c07ec50ff35b9447999cb3e990cef340", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWNjN2U1YzA3ZWM1MGZmMzViOTQ0Nzk5OWNiM2U5OTBjZWYzNDA=", "commit": {"author": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-03T04:59:24Z"}, "committer": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-05T23:00:24Z"}, "message": "Add doctests for union, diff, sym_diff, and intersection.\n\nAdd a rustdoc test for union to exhibit how it is used.\n\nThere is already a test for union in the test namespace, but this commit\nadds a doctest that will appear in the rustdocs.\n\nAdd a doctest for the difference function.\n\nAdd a doctest for the symmetric_difference function.\n\nAdd a doctest for the intersection function.\n\nUpdate the union et al. doctests based on @Gankro's comments.\n\nMake the union et al. doctests a bit more readable.", "tree": {"sha": "c3fc4671c8e9d67dbb61572c2311b6e0f29fbfff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3fc4671c8e9d67dbb61572c2311b6e0f29fbfff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451cc7e5c07ec50ff35b9447999cb3e990cef340", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451cc7e5c07ec50ff35b9447999cb3e990cef340", "html_url": "https://github.com/rust-lang/rust/commit/451cc7e5c07ec50ff35b9447999cb3e990cef340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451cc7e5c07ec50ff35b9447999cb3e990cef340/comments", "author": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a325c666d2cb7e297bf3057ff2442f96a79428b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a325c666d2cb7e297bf3057ff2442f96a79428b", "html_url": "https://github.com/rust-lang/rust/commit/3a325c666d2cb7e297bf3057ff2442f96a79428b"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "3973b4774b3ae9bbfcb3fa08bfe40df4387ea2fe", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/451cc7e5c07ec50ff35b9447999cb3e990cef340/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451cc7e5c07ec50ff35b9447999cb3e990cef340/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=451cc7e5c07ec50ff35b9447999cb3e990cef340", "patch": "@@ -94,26 +94,92 @@ impl<T> BTreeSet<T> {\n \n impl<T: Ord> BTreeSet<T> {\n     /// Visits the values representing the difference, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    /// a.insert(2u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    /// b.insert(3u);\n+    ///\n+    /// let diff: Vec<uint> = a.difference(&b).cloned().collect();\n+    /// assert_eq!(diff, vec![1u]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> DifferenceItems<'a, T> {\n         DifferenceItems{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n     /// Visits the values representing the symmetric difference, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    /// a.insert(2u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    /// b.insert(3u);\n+    ///\n+    /// let sym_diff: Vec<uint> = a.symmetric_difference(&b).cloned().collect();\n+    /// assert_eq!(sym_diff, vec![1u,3]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn symmetric_difference<'a>(&'a self, other: &'a BTreeSet<T>)\n         -> SymDifferenceItems<'a, T> {\n         SymDifferenceItems{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n     /// Visits the values representing the intersection, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    /// a.insert(2u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    /// b.insert(3u);\n+    ///\n+    /// let intersection: Vec<uint> = a.intersection(&b).cloned().collect();\n+    /// assert_eq!(intersection, vec![2u]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn intersection<'a>(&'a self, other: &'a BTreeSet<T>)\n         -> IntersectionItems<'a, T> {\n         IntersectionItems{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n     /// Visits the values representing the union, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    ///\n+    /// let union: Vec<uint> = a.union(&b).cloned().collect();\n+    /// assert_eq!(union, vec![1u,2]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> UnionItems<'a, T> {\n         UnionItems{a: self.iter().peekable(), b: other.iter().peekable()}"}]}