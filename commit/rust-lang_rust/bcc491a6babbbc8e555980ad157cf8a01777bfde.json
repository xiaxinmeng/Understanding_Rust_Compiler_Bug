{"sha": "bcc491a6babbbc8e555980ad157cf8a01777bfde", "node_id": "C_kwDOAAsO6NoAKGJjYzQ5MWE2YmFiYmJjOGU1NTU5ODBhZDE1N2NmOGEwMTc3N2JmZGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-04T11:40:54Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-04T15:10:32Z"}, "message": "clippy fixes\n\nclippy::redundant_closure\nclippy::unnecessary_mut_passed\nclippy::single_char_pattern\nclippy::clone_on_copy\nclippy::into_iter_on_ref\nclippy::extra_unused_lifetimes", "tree": {"sha": "34ff332bebd1b954737d893548e299b0bf94145e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34ff332bebd1b954737d893548e299b0bf94145e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc491a6babbbc8e555980ad157cf8a01777bfde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc491a6babbbc8e555980ad157cf8a01777bfde", "html_url": "https://github.com/rust-lang/rust/commit/bcc491a6babbbc8e555980ad157cf8a01777bfde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc491a6babbbc8e555980ad157cf8a01777bfde/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8840e683ec465ff4349799a3e36ff498e88c9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8840e683ec465ff4349799a3e36ff498e88c9a5", "html_url": "https://github.com/rust-lang/rust/commit/f8840e683ec465ff4349799a3e36ff498e88c9a5"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "9a68a69e800f1ba17ba823f9660120aba2e20cd8", "filename": "benches/fibonacci.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/benches%2Ffibonacci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/benches%2Ffibonacci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -7,7 +7,7 @@ use crate::helpers::*;\n \n #[bench]\n fn fib(bencher: &mut Bencher) {\n-    bencher.iter(|| fibonacci_helper::main())\n+    bencher.iter(fibonacci_helper::main)\n }\n \n #[bench]\n@@ -17,7 +17,7 @@ fn fib_miri(bencher: &mut Bencher) {\n \n #[bench]\n fn fib_iter(bencher: &mut Bencher) {\n-    bencher.iter(|| fibonacci_helper_iterative::main())\n+    bencher.iter(fibonacci_helper_iterative::main)\n }\n \n #[bench]"}, {"sha": "372cd0b22b7ae7d6a1a844a3340a7b3cd78fb887", "filename": "benches/smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/benches%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/benches%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fsmoke.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -7,7 +7,7 @@ use crate::helpers::*;\n \n #[bench]\n fn noop(bencher: &mut Bencher) {\n-    bencher.iter(|| smoke_helper::main())\n+    bencher.iter(smoke_helper::main)\n }\n \n /*"}, {"sha": "ace521f1bed02338ba5c1211421ed4d6ad0f4fbc", "filename": "src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -166,32 +166,32 @@ pub fn report_error<'tcx, 'mir>(\n                     match history {\n                         Some(TagHistory::Tagged {tag, created: (created_range, created_span), invalidated, protected }) => {\n                             let msg = format!(\"{:?} was created by a retag at offsets {}\", tag, HexRange(*created_range));\n-                            helps.push((Some(created_span.clone()), msg));\n+                            helps.push((Some(*created_span), msg));\n                             if let Some((invalidated_range, invalidated_span)) = invalidated {\n                                 let msg = format!(\"{:?} was later invalidated at offsets {}\", tag, HexRange(*invalidated_range));\n-                                helps.push((Some(invalidated_span.clone()), msg));\n+                                helps.push((Some(*invalidated_span), msg));\n                             }\n                             if let Some((protecting_tag, protecting_tag_span, protection_span)) = protected {\n-                                helps.push((Some(protecting_tag_span.clone()), format!(\"{:?} was protected due to {:?} which was created here\", tag, protecting_tag)));\n-                                helps.push((Some(protection_span.clone()), \"this protector is live for this call\".to_string()));\n+                                helps.push((Some(*protecting_tag_span), format!(\"{:?} was protected due to {:?} which was created here\", tag, protecting_tag)));\n+                                helps.push((Some(*protection_span), \"this protector is live for this call\".to_string()));\n                             }\n                         }\n                         Some(TagHistory::Untagged{ recently_created, recently_invalidated, matching_created, protected }) => {\n                             if let Some((range, span)) = recently_created {\n                                 let msg = format!(\"tag was most recently created at offsets {}\", HexRange(*range));\n-                                helps.push((Some(span.clone()), msg));\n+                                helps.push((Some(*span), msg));\n                             }\n                             if let Some((range, span)) = recently_invalidated {\n                                 let msg = format!(\"tag was later invalidated at offsets {}\", HexRange(*range));\n-                                helps.push((Some(span.clone()), msg));\n+                                helps.push((Some(*span), msg));\n                             }\n                             if let Some((range, span)) = matching_created {\n                                 let msg = format!(\"this tag was also created here at offsets {}\", HexRange(*range));\n-                                helps.push((Some(span.clone()), msg));\n+                                helps.push((Some(*span), msg));\n                             }\n                             if let Some((protecting_tag, protecting_tag_span, protection_span)) = protected {\n-                                helps.push((Some(protecting_tag_span.clone()), format!(\"{:?} was protected due to a tag which was created here\", protecting_tag)));\n-                                helps.push((Some(protection_span.clone()), \"this protector is live for this call\".to_string()));\n+                                helps.push((Some(*protecting_tag_span), format!(\"{:?} was protected due to a tag which was created here\", protecting_tag)));\n+                                helps.push((Some(*protection_span), \"this protector is live for this call\".to_string()));\n                             }\n                         }\n                         None => {}"}, {"sha": "a782dfa3fce17d9d7859f7e8172f1812316d2be7", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -491,6 +491,6 @@ mod tests {\n         let cmd = String::from_utf16_lossy(&args_to_utf16_command_string(\n             [r\"C:\\Program Files\\\", \"arg1\", \"arg 2\", \"arg \\\" 3\"].iter(),\n         ));\n-        assert_eq!(cmd.trim_end_matches(\"\\0\"), r#\"\"C:\\Program Files\\\" arg1 \"arg 2\" \"arg \\\" 3\"\"#);\n+        assert_eq!(cmd.trim_end_matches('\\0'), r#\"\"C:\\Program Files\\\" arg1 \"arg 2\" \"arg \\\" 3\"\"#);\n     }\n }"}, {"sha": "cb4c3c293e9391be485a335e61d66d5b263be058", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -817,15 +817,15 @@ pub struct CurrentSpan<'a, 'mir, 'tcx> {\n \n impl<'a, 'mir, 'tcx> CurrentSpan<'a, 'mir, 'tcx> {\n     pub fn get(&mut self) -> Span {\n-        *self.span.get_or_insert_with(|| Self::current_span(&self.machine))\n+        *self.span.get_or_insert_with(|| Self::current_span(self.machine))\n     }\n \n     #[inline(never)]\n     fn current_span(machine: &Evaluator<'_, '_>) -> Span {\n         machine\n             .threads\n             .active_thread_stack()\n-            .into_iter()\n+            .iter()\n             .rev()\n             .find(|frame| {\n                 let def_id = frame.instance.def_id();"}, {"sha": "d02410664bd42a895c2790555609ac9c41136aef", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -304,7 +304,7 @@ pub struct FileHandler {\n     handles: BTreeMap<i32, Box<dyn FileDescriptor>>,\n }\n \n-impl<'tcx> FileHandler {\n+impl FileHandler {\n     pub(crate) fn new(mute_stdout_stderr: bool) -> FileHandler {\n         let mut handles: BTreeMap<_, Box<dyn FileDescriptor>> = BTreeMap::new();\n         handles.insert(0i32, Box::new(io::stdin()));"}, {"sha": "a19e30b113e32c0023127544851df93739235a0d", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc491a6babbbc8e555980ad157cf8a01777bfde/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=bcc491a6babbbc8e555980ad157cf8a01777bfde", "patch": "@@ -684,9 +684,9 @@ impl Stacks {\n         state: &GlobalState,\n     ) -> InterpResult<'tcx> {\n         trace!(\"deallocation with tag {:?}: {:?}, size {}\", tag, alloc_id, range.size.bytes());\n-        let mut state = state.borrow_mut();\n+        let state = state.borrow();\n         self.for_each_mut(range, |offset, stack, history| {\n-            stack.dealloc(tag, (alloc_id, range, offset), &mut state, history)\n+            stack.dealloc(tag, (alloc_id, range, offset), &state, history)\n         })?;\n         Ok(())\n     }"}]}