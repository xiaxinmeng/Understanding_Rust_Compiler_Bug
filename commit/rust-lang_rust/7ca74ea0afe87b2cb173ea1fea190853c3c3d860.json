{"sha": "7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "node_id": "C_kwDOAAsO6NoAKDdjYTc0ZWEwYWZlODdiMmNiMTczZWExZmVhMTkwODUzYzNjM2Q4NjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-14T04:29:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-14T04:29:54Z"}, "message": "Auto merge of #91680 - saethlin:spare_capacity_mut-in-join, r=dtolnay\n\nUse spare_capacity_mut instead of invalid unchecked indexing when joining str\n\nThis is a fix for https://github.com/rust-lang/rust/issues/91574\n\nI think in general I'd prefer to see this code implemented with raw pointers or `MaybeUninit::write_slice`, but there's existing code in here based on copying from slice to slice, so converting everything from `&[T]` to `&[MaybeUninit<T>]` is less disruptive.", "tree": {"sha": "0d6701ed0d157a9b1d717d47cbcca2e7e0779ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6701ed0d157a9b1d717d47cbcca2e7e0779ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "html_url": "https://github.com/rust-lang/rust/commit/7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca74ea0afe87b2cb173ea1fea190853c3c3d860/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d25b4ff71b3d8ec49dc6a384e65e6a3ea33116", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d25b4ff71b3d8ec49dc6a384e65e6a3ea33116", "html_url": "https://github.com/rust-lang/rust/commit/a2d25b4ff71b3d8ec49dc6a384e65e6a3ea33116"}, {"sha": "14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "html_url": "https://github.com/rust-lang/rust/commit/14f4ffae3224a7846c6bab33f9ca8593ec7416cf"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "69495f31c32ca4d59e80037f74204b806a74b3cc", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ca74ea0afe87b2cb173ea1fea190853c3c3d860/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca74ea0afe87b2cb173ea1fea190853c3c3d860/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "patch": "@@ -178,12 +178,20 @@ where\n \n     unsafe {\n         let pos = result.len();\n-        let target = result.get_unchecked_mut(pos..reserved_len);\n+        let target = result.spare_capacity_mut().get_unchecked_mut(..reserved_len - pos);\n+\n+        // Convert the separator and slices to slices of MaybeUninit\n+        // to simplify implementation in specialize_for_lengths\n+        let sep_uninit = core::slice::from_raw_parts(sep.as_ptr().cast(), sep.len());\n+        let iter_uninit = iter.map(|it| {\n+            let it = it.borrow().as_ref();\n+            core::slice::from_raw_parts(it.as_ptr().cast(), it.len())\n+        });\n \n         // copy separator and slices over without bounds checks\n         // generate loops with hardcoded offsets for small separators\n         // massive improvements possible (~ x2)\n-        let remain = specialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n+        let remain = specialize_for_lengths!(sep_uninit, target, iter_uninit; 0, 1, 2, 3, 4);\n \n         // A weird borrow implementation may return different\n         // slices for the length calculation and the actual copy."}]}