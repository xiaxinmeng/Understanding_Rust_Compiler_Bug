{"sha": "7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYzZjZTlkYjJiZDY5NzM4YWNjN2ZlY2U4YzlmNmI5YjFhZTUwNWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-10-23T08:14:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-23T08:14:40Z"}, "message": "Rollup merge of #65681 - sunfishcode:followup, r=Centril\n\nCode cleanups following up on #65576.\n\nThis makes a few code cleanups to follow up on the review comments in\nhttps://github.com/rust-lang/rust/pull/65576.\n\nr? @Centril", "tree": {"sha": "b328e3a44391600334a1a487f1b2a87df5805359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b328e3a44391600334a1a487f1b2a87df5805359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsAvwCRBK7hj4Ov3rIwAAdHIIAG2pdIpkK6gTf8hR+G9wGOdN\nTEmCJ4xiIXxvjI2+E29b6zdz7qwSK3gKthnw1hR/I8LAi7I0QXJeC/ojOOe317LT\ntR18zOvhgmrVwzxoqUfI2mD1xqRQ03IxYaOxzbeFvZbfergM0qzRfG3CWU/R3X2W\naU2XAQ0xWsb8hfOawThAFEgUbMpIGPr0x0adtFmR5ibnFBZXgKuZeEB4zWHOPxf8\nC84cVhGI7ksvbVhoPdCNJDFv9KndQ+DIR5v+eSATa9tErsYFzkL5K2RHQaoubhWv\nuipO3lLCCehR98U3xwBlp+wnXnl6fQks+DrBLWsc3la+zSgapNGK4iejJn9m6n4=\n=+UdW\n-----END PGP SIGNATURE-----\n", "payload": "tree b328e3a44391600334a1a487f1b2a87df5805359\nparent b7994653a1a3652068bb0997917bd25c195354b1\nparent 3f1af9056d8b2bf7b90a657503cd03f8c0c2b538\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1571818480 +0900\ncommitter GitHub <noreply@github.com> 1571818480 +0900\n\nRollup merge of #65681 - sunfishcode:followup, r=Centril\n\nCode cleanups following up on #65576.\n\nThis makes a few code cleanups to follow up on the review comments in\nhttps://github.com/rust-lang/rust/pull/65576.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e", "html_url": "https://github.com/rust-lang/rust/commit/7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7994653a1a3652068bb0997917bd25c195354b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7994653a1a3652068bb0997917bd25c195354b1", "html_url": "https://github.com/rust-lang/rust/commit/b7994653a1a3652068bb0997917bd25c195354b1"}, {"sha": "3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "html_url": "https://github.com/rust-lang/rust/commit/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "e8ffe868231a6a87e4d2618b7e5cfd2f556d168a", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=7fc6ce9db2bd69738acc7fece8c9f6b9b1ae505e", "patch": "@@ -406,6 +406,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n+        // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,\n+        // depending on whether the target needs `argc` and `argv` to be passed in.\n         let llfty = if cx.sess().target.target.options.main_needs_argc_argv {\n             cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n         } else {\n@@ -440,19 +442,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n-        let (arg_argc, arg_argv) = if cx.sess().target.target.options.main_needs_argc_argv {\n-            // Params from native main() used as args for rust start function\n-            let param_argc = bx.get_param(0);\n-            let param_argv = bx.get_param(1);\n-            let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n-            let arg_argv = param_argv;\n-            (arg_argc, arg_argv)\n-        } else {\n-            // The Rust start function doesn't need argc and argv, so just pass zeros.\n-            let arg_argc = bx.const_int(cx.type_int(), 0);\n-            let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n-            (arg_argc, arg_argv)\n-        };\n+        let (arg_argc, arg_argv) = get_argc_argv(cx, &mut bx);\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n@@ -477,6 +467,27 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n     }\n }\n \n+/// Obtain the `argc` and `argv` values to pass to the rust start function.\n+fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    cx: &'a Bx::CodegenCx,\n+    bx: &mut Bx\n+) -> (Bx::Value, Bx::Value)\n+{\n+    if cx.sess().target.target.options.main_needs_argc_argv {\n+        // Params from native `main()` used as args for rust start function\n+        let param_argc = bx.get_param(0);\n+        let param_argv = bx.get_param(1);\n+        let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n+        let arg_argv = param_argv;\n+        (arg_argc, arg_argv)\n+    } else {\n+        // The Rust start function doesn't need `argc` and `argv`, so just pass zeros.\n+        let arg_argc = bx.const_int(cx.type_int(), 0);\n+        let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n+        (arg_argc, arg_argv)\n+    }\n+}\n+\n pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n \n pub fn codegen_crate<B: ExtraBackendMethods>("}]}