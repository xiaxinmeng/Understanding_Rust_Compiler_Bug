{"sha": "760a6654fbddea5d7a9beefe100f0fb784e96928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MGE2NjU0ZmJkZGVhNWQ3YTliZWVmZTEwMGYwZmI3ODRlOTY5Mjg=", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2020-11-30T08:24:54Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-02-04T15:20:58Z"}, "message": "lowering of generic args in AssocTyConstraint", "tree": {"sha": "6f3eaa89959819913f79bbca21d1bfa097a286ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f3eaa89959819913f79bbca21d1bfa097a286ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760a6654fbddea5d7a9beefe100f0fb784e96928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760a6654fbddea5d7a9beefe100f0fb784e96928", "html_url": "https://github.com/rust-lang/rust/commit/760a6654fbddea5d7a9beefe100f0fb784e96928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760a6654fbddea5d7a9beefe100f0fb784e96928/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16af7bf3d9a3d86f6315bd86200d71de85e18a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/16af7bf3d9a3d86f6315bd86200d71de85e18a2d", "html_url": "https://github.com/rust-lang/rust/commit/16af7bf3d9a3d86f6315bd86200d71de85e18a2d"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "f076dca5cf5f178d06f835d53681b9b7489e654d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/760a6654fbddea5d7a9beefe100f0fb784e96928/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760a6654fbddea5d7a9beefe100f0fb784e96928/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=760a6654fbddea5d7a9beefe100f0fb784e96928", "patch": "@@ -1076,16 +1076,40 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocTyConstraint,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n-        if let Some(ref gen_args) = constraint.gen_args {\n-            self.sess.span_fatal(\n-                gen_args.span(),\n-                \"generic associated types in trait paths are currently not implemented\",\n-            );\n-        }\n+        // lower generic arguments of identifier in constraint\n+        let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n+            let gen_args_ctor = match gen_args {\n+                GenericArgs::AngleBracketed(ref data) => {\n+                    self.lower_angle_bracketed_parameter_data(\n+                        data,\n+                        ParamMode::Explicit,\n+                        itctx.reborrow(),\n+                    )\n+                    .0\n+                }\n+                GenericArgs::Parenthesized(ref data) => {\n+                    let mut err = self.sess.struct_span_err(\n+                        gen_args.span(),\n+                        \"parenthesized generic arguments cannot be used in associated type constraints\"\n+                    );\n+                    // FIXME: try to write a suggestion here\n+                    err.emit();\n+                    self.lower_angle_bracketed_parameter_data(\n+                        &data.as_angle_bracketed_args(),\n+                        ParamMode::Explicit,\n+                        itctx.reborrow(),\n+                    )\n+                    .0\n+                }\n+            };\n+            self.arena.alloc(gen_args_ctor.into_generic_args(&self.arena))\n+        } else {\n+            self.arena.alloc(hir::GenericArgs::none())\n+        };\n \n         let kind = match constraint.kind {\n             AssocTyConstraintKind::Equality { ref ty } => {\n@@ -1182,6 +1206,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TypeBinding {\n             hir_id: self.lower_node_id(constraint.id),\n             ident: constraint.ident,\n+            gen_args,\n             kind,\n             span: constraint.span,\n         }"}, {"sha": "cb4d5ea6ee650fa0c9f38ae9a001a076741f8042", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/760a6654fbddea5d7a9beefe100f0fb784e96928/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760a6654fbddea5d7a9beefe100f0fb784e96928/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=760a6654fbddea5d7a9beefe100f0fb784e96928", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_angle_bracketed_parameter_data(\n+    pub(crate) fn lower_angle_bracketed_parameter_data(\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n@@ -426,6 +426,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::TypeBinding<'hir> {\n         let ident = Ident::with_dummy_span(hir::FN_OUTPUT_NAME);\n         let kind = hir::TypeBindingKind::Equality { ty };\n-        hir::TypeBinding { hir_id: self.next_id(), span, ident, kind }\n+        let args = arena_vec![self;];\n+        let bindings = arena_vec![self;];\n+        let gen_args = self.arena.alloc(hir::GenericArgs { args, bindings, parenthesized: false });\n+        hir::TypeBinding { hir_id: self.next_id(), gen_args, span, ident, kind }\n     }\n }"}]}