{"sha": "9d21cf3b6188133759eab3e588555a9389a38ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjFjZjNiNjE4ODEzMzc1OWVhYjNlNTg4NTU1YTkzODlhMzhmZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-02T22:28:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-02T22:28:59Z"}, "message": "rustc: Allocate tydescs on the stack when it's safe to do so. 60% compile speed increase.", "tree": {"sha": "e8807e19a49d7ca63e4555c425a9883847c45012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8807e19a49d7ca63e4555c425a9883847c45012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d21cf3b6188133759eab3e588555a9389a38ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d21cf3b6188133759eab3e588555a9389a38ff5", "html_url": "https://github.com/rust-lang/rust/commit/9d21cf3b6188133759eab3e588555a9389a38ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d21cf3b6188133759eab3e588555a9389a38ff5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa25f22f197682de3b18fc4c8ba068d1feda220f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa25f22f197682de3b18fc4c8ba068d1feda220f", "html_url": "https://github.com/rust-lang/rust/commit/aa25f22f197682de3b18fc4c8ba068d1feda220f"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "2c639c4cd6e12b94672c9330f170f31275ebdcff", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9d21cf3b6188133759eab3e588555a9389a38ff5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d21cf3b6188133759eab3e588555a9389a38ff5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9d21cf3b6188133759eab3e588555a9389a38ff5", "patch": "@@ -417,12 +417,6 @@ fn T_tydesc(type_names tn) -> TypeRef {\n     ret t;\n }\n \n-// A \"fat tydesc\" is a type descriptor plus an array of extra type descriptors\n-// following it.\n-fn T_fat_tydesc(type_names tn, uint n_subdescs) -> TypeRef {\n-    ret T_struct(vec(T_tydesc(tn), T_array(T_tydesc(tn), n_subdescs)));\n-}\n-\n fn T_array(TypeRef t, uint n) -> TypeRef {\n     ret llvm.LLVMArrayType(t, n);\n }\n@@ -1589,6 +1583,27 @@ fn linearize_ty_params(@block_ctxt cx, ty.t t) ->\n     ret tup(x.defs, x.vals);\n }\n \n+fn trans_stack_local_derived_tydesc(@block_ctxt cx, ValueRef llsz,\n+        ValueRef llalign, ValueRef lltydescs) -> result {\n+    auto lltydesc = alloca(cx, T_tydesc(cx.fcx.lcx.ccx.tn));\n+\n+    // By convention, desc 0 is the root descriptor.\n+    auto llroottydesc = cx.build.Load(cx.build.GEP(lltydescs,\n+                                                   vec(C_int(0), C_int(0))));\n+    llroottydesc = cx.build.Load(llroottydesc);\n+    cx.build.Store(llroottydesc, lltydesc);\n+\n+    // Store a pointer to the rest of the descriptors.\n+    auto llfirstparam = cx.build.GEP(lltydescs, vec(C_int(0), C_int(1)));\n+    cx.build.Store(llfirstparam,\n+                   cx.build.GEP(lltydesc, vec(C_int(0), C_int(0))));\n+\n+    cx.build.Store(llsz, cx.build.GEP(lltydesc, vec(C_int(0), C_int(1))));\n+    cx.build.Store(llalign, cx.build.GEP(lltydesc, vec(C_int(0), C_int(2))));\n+\n+    ret res(cx, lltydesc);\n+}\n+\n fn get_tydesc(&@block_ctxt cx, ty.t t, bool escapes) -> result {\n     // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt (ty.type_param(cx.fcx.lcx.ccx.tcx, t)) {\n@@ -1627,12 +1642,18 @@ fn get_tydesc(&@block_ctxt cx, ty.t t, bool escapes) -> result {\n         auto align = align_of(bcx, t);\n         bcx = align.bcx;\n \n-        auto v = trans_upcall(bcx, \"upcall_get_type_desc\",\n-                              vec(p2i(bcx.fcx.lcx.ccx.crate_ptr),\n-                                  sz.val,\n-                                  align.val,\n-                                  C_int((1u + n_params) as int),\n-                                  vp2i(bcx, tydescs)), true);\n+        auto v;\n+        if (escapes) {\n+            v = trans_upcall(bcx, \"upcall_get_type_desc\",\n+                             vec(p2i(bcx.fcx.lcx.ccx.crate_ptr),\n+                                 sz.val,\n+                                 align.val,\n+                                 C_int((1u + n_params) as int),\n+                                 vp2i(bcx, tydescs)), true);\n+        } else {\n+            v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val,\n+                                                 tydescs);\n+        }\n \n         ret res(v.bcx, vi2p(v.bcx, v.val,\n                             T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn))));"}]}