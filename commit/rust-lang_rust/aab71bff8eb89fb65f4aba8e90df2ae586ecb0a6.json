{"sha": "aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYjcxYmZmOGViODlmYjY1ZjRhYmE4ZTkwZGYyYWU1ODZlY2IwYTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T20:36:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T20:36:53Z"}, "message": "move to method", "tree": {"sha": "3056841cd667b971942c57be6b8822c4c1ce89e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3056841cd667b971942c57be6b8822c4c1ce89e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6", "html_url": "https://github.com/rust-lang/rust/commit/aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc8163439f65138c0945c37d6bddc64ced2d2143", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8163439f65138c0945c37d6bddc64ced2d2143", "html_url": "https://github.com/rust-lang/rust/commit/cc8163439f65138c0945c37d6bddc64ced2d2143"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "44059e5c321ffa3e188bc5448e2e7513d2a003ed", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=aab71bff8eb89fb65f4aba8e90df2ae586ecb0a6", "patch": "@@ -209,9 +209,9 @@ impl ModuleItem {\n \n struct Resolver<'a, DB> {\n     db: &'a DB,\n+    input: &'a FxHashMap<ModuleId, InputModuleItems>,\n     source_root: SourceRootId,\n     module_tree: Arc<ModuleTree>,\n-    input: FxHashMap<ModuleId, InputModuleItems>,\n     result: ItemMap,\n }\n \n@@ -221,47 +221,44 @@ where\n {\n     fn resolve(&mut self) {\n         for (&module_id, items) in self.input.iter() {\n-            populate_module(\n-                self.db,\n-                self.source_root,\n-                &*self.module_tree,\n-                &mut self.result,\n+            self.populate_module(\n                 module_id,\n                 items,\n             )\n         }\n     }\n-}\n \n-fn populate_module(\n-    db: &impl DescriptorDatabase,\n-    source_root: SourceRootId,\n-    module_tree: &ModuleTree,\n-    item_map: &mut ItemMap,\n-    module_id: ModuleId,\n-    input: &InputModuleItems,\n-) {\n-    let file_id = module_id.source(module_tree).file_id();\n+    fn populate_module(\n+        &mut self,\n+        module_id: ModuleId,\n+        input: &InputModuleItems,\n+    ) {\n+        let file_id = module_id.source(&self.module_tree).file_id();\n \n-    let mut module_items = ModuleItems::default();\n+        let mut module_items = ModuleItems::default();\n \n-    for item in input.items.iter() {\n-        if item.kind == MODULE {\n-            // handle submodules separatelly\n-            continue;\n+        for item in input.items.iter() {\n+            if item.kind == MODULE {\n+                // handle submodules separatelly\n+                continue;\n+            }\n+            let ptr = item.ptr.into_global(file_id);\n+            let def_loc = DefLoc::Item { ptr };\n+            let def_id = self.db.id_maps().def_id(def_loc);\n+            module_items.items.insert(item.name.clone(), def_id);\n         }\n-        let ptr = item.ptr.into_global(file_id);\n-        let def_loc = DefLoc::Item { ptr };\n-        let def_id = db.id_maps().def_id(def_loc);\n-        module_items.items.insert(item.name.clone(), def_id);\n-    }\n \n-    for (name, mod_id) in module_id.children(module_tree) {\n-        let def_loc = DefLoc::Module {\n-            id: mod_id,\n-            source_root,\n-        };\n-    }\n+        for (name, mod_id) in module_id.children(&self.module_tree) {\n+            let def_loc = DefLoc::Module {\n+                id: mod_id,\n+                source_root: self.source_root,\n+            };\n+            let def_id = self.db.id_maps().def_id(def_loc);\n+            module_items.items.insert(name, def_id);\n+        }\n \n-    item_map.per_module.insert(module_id, module_items);\n+        self.result.per_module.insert(module_id, module_items);\n+    }\n }\n+\n+"}]}