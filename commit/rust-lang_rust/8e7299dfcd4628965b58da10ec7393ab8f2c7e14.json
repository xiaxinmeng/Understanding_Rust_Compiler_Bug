{"sha": "8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNzI5OWRmY2Q0NjI4OTY1YjU4ZGExMGVjNzM5M2FiOGYyYzdlMTQ=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-08T07:02:12Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-08T07:02:16Z"}, "message": "Support as casts in abstract consts", "tree": {"sha": "8f0c7f3507f40652edc1971ef3fa7a35141e6815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0c7f3507f40652edc1971ef3fa7a35141e6815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "html_url": "https://github.com/rust-lang/rust/commit/8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda4a881e006c808093543eece098565c3142c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda4a881e006c808093543eece098565c3142c46", "html_url": "https://github.com/rust-lang/rust/commit/dda4a881e006c808093543eece098565c3142c46"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "1ef10241143b83ed0ca19f0c51abff8f84ff0419", "filename": "compiler/rustc_middle/src/mir/abstract_const.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -1,6 +1,6 @@\n //! A subset of a mir body used for const evaluatability checking.\n-use crate::mir;\n-use crate::ty;\n+use crate::mir::{self, CastKind};\n+use crate::ty::{self, Ty};\n \n rustc_index::newtype_index! {\n     /// An index into an `AbstractConst`.\n@@ -17,6 +17,7 @@ pub enum Node<'tcx> {\n     Binop(mir::BinOp, NodeId, NodeId),\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),\n+    Cast(CastKind, NodeId, Ty<'tcx>),\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]"}, {"sha": "05139b9404f42c79ea24dce18aa6e18f0e271d2e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -156,9 +156,10 @@ where\n                 let leaf = leaf.subst(tcx, ct.substs);\n                 self.visit_const(leaf)\n             }\n-            ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n-                ControlFlow::CONTINUE\n-            }\n+            ACNode::Binop(..)\n+            | ACNode::UnaryOp(..)\n+            | ACNode::FunctionCall(_, _)\n+            | ACNode::Cast(_, _, _) => ControlFlow::CONTINUE,\n         })\n     }\n "}, {"sha": "8954918b43c7f3a702290541bef59a04509ea224", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -97,9 +97,10 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                         ControlFlow::CONTINUE\n                     }\n-                    Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n-                        ControlFlow::CONTINUE\n-                    }\n+                    Node::Binop(_, _, _)\n+                    | Node::UnaryOp(_, _)\n+                    | Node::FunctionCall(_, _)\n+                    | Node::Cast(_, _, _) => ControlFlow::CONTINUE,\n                 });\n \n                 match failure_kind {\n@@ -304,6 +305,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 self.nodes[func].used = true;\n                 nodes.iter().for_each(|&n| self.nodes[n].used = true);\n             }\n+            Node::Cast(_, operand, _) => {\n+                self.nodes[operand].used = true;\n+            }\n         }\n \n         // Nodes start as unused.\n@@ -408,6 +412,12 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                         self.locals[local] = self.add_node(Node::UnaryOp(op, operand), span);\n                         Ok(())\n                     }\n+                    Rvalue::Cast(cast_kind, ref operand, ty) => {\n+                        let operand = self.operand_to_node(span, operand)?;\n+                        self.locals[local] =\n+                            self.add_node(Node::Cast(cast_kind, operand, ty), span);\n+                        Ok(())\n+                    }\n                     _ => self.error(Some(span), \"unsupported rvalue\")?,\n                 }\n             }\n@@ -594,6 +604,7 @@ where\n                 recurse(tcx, ct.subtree(func), f)?;\n                 args.iter().try_for_each(|&arg| recurse(tcx, ct.subtree(arg), f))\n             }\n+            Node::Cast(_, operand, _) => recurse(tcx, ct.subtree(operand), f),\n         }\n     }\n \n@@ -676,6 +687,11 @@ pub(super) fn try_unify<'tcx>(\n                 && iter::zip(a_args, b_args)\n                     .all(|(&an, &bn)| try_unify(tcx, a.subtree(an), b.subtree(bn)))\n         }\n+        (Node::Cast(a_cast_kind, a_operand, a_ty), Node::Cast(b_cast_kind, b_operand, b_ty))\n+            if (a_ty == b_ty) && (a_cast_kind == b_cast_kind) =>\n+        {\n+            try_unify(tcx, a.subtree(a_operand), b.subtree(b_operand))\n+        }\n         _ => false,\n     }\n }"}, {"sha": "ac63f2e25dbac1e498319154d8d518e39dc449d4", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -838,9 +838,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n                         self.visit_const(leaf)\n                     }\n-                    Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                        ControlFlow::CONTINUE\n-                    }\n+                    Node::Binop(..)\n+                    | Node::UnaryOp(..)\n+                    | Node::FunctionCall(_, _)\n+                    | Node::Cast(_, _, _) => ControlFlow::CONTINUE,\n                 })\n             } else {\n                 ControlFlow::CONTINUE\n@@ -859,9 +860,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                             let leaf = leaf.subst(self.tcx, ct.substs);\n                             self.visit_const(leaf)\n                         }\n-                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                            ControlFlow::CONTINUE\n-                        }\n+                        Node::Binop(..)\n+                        | Node::UnaryOp(..)\n+                        | Node::FunctionCall(_, _)\n+                        | Node::Cast(_, _, _) => ControlFlow::CONTINUE,\n                     })\n                 } else {\n                     ControlFlow::CONTINUE"}, {"sha": "a8f5b89d229abeaf711499958bafebbd99ecf9f9", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Evaluatable<const N: u128> {}\n+impl<const N: u128> Evaluatable<N> for () {}\n+\n+struct Foo<const N: u8>([u8; N as usize])\n+//~^ Error: unconstrained generic constant\n+//~| help: try adding a `where` bound using this expression: `where [(); N as usize]:`\n+where\n+    (): Evaluatable<{N as u128}>;\n+\n+fn main() {}"}, {"sha": "167e116f55709e7408ee9b64d6f94ab413c93e7d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-2.rs:7:25\n+   |\n+LL | struct Foo<const N: u8>([u8; N as usize])\n+   |                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); N as usize]:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "33146d95536e4b74b6caaf99085266ccf3416029", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7299dfcd4628965b58da10ec7393ab8f2c7e14/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast.rs?ref=8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: u8>([u8; N as usize])\n+where\n+    [(); N as usize]:;\n+\n+fn main() {}"}]}