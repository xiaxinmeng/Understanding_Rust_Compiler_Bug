{"sha": "c8da5697e0721641856c8e38b666a9798e9f761d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZGE1Njk3ZTA3MjE2NDE4NTZjOGUzOGI2NjZhOTc5OGU5Zjc2MWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2015-09-07T17:08:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2015-09-07T17:08:57Z"}, "message": "libsyntax: remove dead code from parser.rs\n\nBoth `parse_tuple_struct_body` and `parse_item_struct` handled the case\nof unit like struct. The redundancy is removed,\n`parse_tuple_struct_body` now handles only real tuple structs.", "tree": {"sha": "071db8b0772bc89f0a55083460bde5d59d193eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071db8b0772bc89f0a55083460bde5d59d193eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8da5697e0721641856c8e38b666a9798e9f761d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8da5697e0721641856c8e38b666a9798e9f761d", "html_url": "https://github.com/rust-lang/rust/commit/c8da5697e0721641856c8e38b666a9798e9f761d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8da5697e0721641856c8e38b666a9798e9f761d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0762f58c1143b4ff0ae5d0cdda9cdd8249512e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/0762f58c1143b4ff0ae5d0cdda9cdd8249512e77", "html_url": "https://github.com/rust-lang/rust/commit/0762f58c1143b4ff0ae5d0cdda9cdd8249512e77"}], "stats": {"total": 59, "additions": 24, "deletions": 35}, "files": [{"sha": "b13522af82d91f3398662691333b022393ba1a15", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c8da5697e0721641856c8e38b666a9798e9f761d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8da5697e0721641856c8e38b666a9798e9f761d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c8da5697e0721641856c8e38b666a9798e9f761d", "patch": "@@ -4769,43 +4769,32 @@ impl<'a> Parser<'a> {\n                                    generics: &mut ast::Generics)\n                                    -> PResult<Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n-        if self.check(&token::OpenDelim(token::Paren)) {\n-            let fields = try!(self.parse_unspanned_seq(\n-                &token::OpenDelim(token::Paren),\n-                &token::CloseDelim(token::Paren),\n-                seq_sep_trailing_allowed(token::Comma),\n-                |p| {\n-                    let attrs = p.parse_outer_attributes();\n-                    let lo = p.span.lo;\n-                    let struct_field_ = ast::StructField_ {\n-                        kind: UnnamedField(try!(p.parse_visibility())),\n-                        id: ast::DUMMY_NODE_ID,\n-                        ty: try!(p.parse_ty_sum()),\n-                        attrs: attrs,\n-                    };\n-                    Ok(spanned(lo, p.span.hi, struct_field_))\n-                }));\n-\n-            if fields.is_empty() {\n-                return Err(self.fatal(&format!(\"unit-like struct definition should be \\\n-                    written as `struct {};`\",\n-                    class_name)));\n-            }\n+        // Unit like structs are handled in parse_item_struct function\n+        let fields = try!(self.parse_unspanned_seq(\n+            &token::OpenDelim(token::Paren),\n+            &token::CloseDelim(token::Paren),\n+            seq_sep_trailing_allowed(token::Comma),\n+            |p| {\n+                let attrs = p.parse_outer_attributes();\n+                let lo = p.span.lo;\n+                let struct_field_ = ast::StructField_ {\n+                    kind: UnnamedField(try!(p.parse_visibility())),\n+                    id: ast::DUMMY_NODE_ID,\n+                    ty: try!(p.parse_ty_sum()),\n+                    attrs: attrs,\n+                };\n+                Ok(spanned(lo, p.span.hi, struct_field_))\n+            }));\n \n-            generics.where_clause = try!(self.parse_where_clause());\n-            try!(self.expect(&token::Semi));\n-            Ok(fields)\n-        // This is the case where we just see struct Foo<T> where T: Copy;\n-        } else if self.token.is_keyword(keywords::Where) {\n-            generics.where_clause = try!(self.parse_where_clause());\n-            try!(self.expect(&token::Semi));\n-            Ok(Vec::new())\n-        // This case is where we see: `struct Foo<T>;`\n-        } else {\n-            let token_str = self.this_token_to_string();\n-            Err(self.fatal(&format!(\"expected `where`, `{}`, `(`, or `;` after struct \\\n-                name, found `{}`\", \"{\", token_str)))\n+        if fields.is_empty() {\n+            return Err(self.fatal(&format!(\"unit-like struct definition should be \\\n+                                            written as `struct {};`\",\n+                                           class_name)));\n         }\n+\n+        generics.where_clause = try!(self.parse_where_clause());\n+        try!(self.expect(&token::Semi));\n+        Ok(fields)\n     }\n \n     /// Parse a structure field declaration"}]}