{"sha": "b0455e9ab470ef49ee3e23b4bc8a15c55aad1742", "node_id": "C_kwDOAAsO6NoAKGIwNDU1ZTlhYjQ3MGVmNDllZTNlMjNiNGJjOGExNWM1NWFhZDE3NDI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-10T13:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-10T13:26:10Z"}, "message": "Rollup merge of #101635 - jyn514:queries-new-derived, r=cjgillot\n\nMove `Queries::new` out of the macro\n\nSplit out from https://github.com/rust-lang/rust/pull/101178 to make sure it's not contributing to the perf impact.\n\nr? `@cjgillot`", "tree": {"sha": "636c8176cca8d9714824ce26c882bf89e2aa8cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636c8176cca8d9714824ce26c882bf89e2aa8cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHJByCRBK7hj4Ov3rIwAAsrcIAHZKR9b0kkIOG27smTvkKbHp\nG1W2JkDtyhUSNesv/EzxuB9ks1jN/AMrsFamxjm0DfTVIlJwbtsOMFh36rxufb2B\n8KkdHD5tDbvRrGm/sT8DZeA+czvyssOGnb6RICgxu2/oEtgLAMSgE/g+1g6n6Mhm\nu5H/tF0lx9fejoT9LzTmoLitS8EOl9y5V2bz5BL50SSubuNjL4ISPCVyud0kVzQT\nBBVCQGuH3FheFomrSjp8AwWilwVWOyUEOEfB1Uf8l5mGIh0Q2NhX+7s9AE9F74Zd\nGoODYxZUC456UayilZzatx28HuK9rqjIfOyXeOlg2rRSxe8AfZjqmGBCC2Pq/vk=\n=RK2o\n-----END PGP SIGNATURE-----\n", "payload": "tree 636c8176cca8d9714824ce26c882bf89e2aa8cbb\nparent 6afbe3eca92da175a197cdd3d75cf9c623bf53eb\nparent d2c53caee218296482c11a56354688a9a7e9636f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662816370 +0530\ncommitter GitHub <noreply@github.com> 1662816370 +0530\n\nRollup merge of #101635 - jyn514:queries-new-derived, r=cjgillot\n\nMove `Queries::new` out of the macro\n\nSplit out from https://github.com/rust-lang/rust/pull/101178 to make sure it's not contributing to the perf impact.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742", "html_url": "https://github.com/rust-lang/rust/commit/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afbe3eca92da175a197cdd3d75cf9c623bf53eb", "html_url": "https://github.com/rust-lang/rust/commit/6afbe3eca92da175a197cdd3d75cf9c623bf53eb"}, {"sha": "d2c53caee218296482c11a56354688a9a7e9636f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c53caee218296482c11a56354688a9a7e9636f", "html_url": "https://github.com/rust-lang/rust/commit/d2c53caee218296482c11a56354688a9a7e9636f"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "9c0fb8265cff71da9557cdad785c662156f79fc2", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=b0455e9ab470ef49ee3e23b4bc8a15c55aad1742", "patch": "@@ -48,7 +48,7 @@ cfg_if! {\n         /// the native atomic types.\n         /// You should use this type through the `AtomicU64`, `AtomicUsize`, etc, type aliases\n         /// as it's not intended to be used separately.\n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct Atomic<T: Copy>(Cell<T>);\n \n         impl<T: Copy> Atomic<T> {"}, {"sha": "96679281f07ec6c73335d4a516916f3583b849b3", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0455e9ab470ef49ee3e23b4bc8a15c55aad1742/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b0455e9ab470ef49ee3e23b4bc8a15c55aad1742", "patch": "@@ -5,7 +5,7 @@\n use crate::keys::Key;\n use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::Lock;\n+use rustc_data_structures::sync::{AtomicU64, Lock};\n use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{\n     self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n@@ -499,9 +499,28 @@ macro_rules! define_queries {\n     }\n }\n \n+use crate::{ExternProviders, OnDiskCache, Providers};\n+\n+impl<'tcx> Queries<'tcx> {\n+    pub fn new(\n+        local_providers: Providers,\n+        extern_providers: ExternProviders,\n+        on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    ) -> Self {\n+        Queries {\n+            local_providers: Box::new(local_providers),\n+            extern_providers: Box::new(extern_providers),\n+            on_disk_cache,\n+            jobs: AtomicU64::new(1),\n+            ..Queries::default()\n+        }\n+    }\n+}\n+\n macro_rules! define_queries_struct {\n     (\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n+        #[derive(Default)]\n         pub struct Queries<'tcx> {\n             local_providers: Box<Providers>,\n             extern_providers: Box<ExternProviders>,\n@@ -514,20 +533,6 @@ macro_rules! define_queries_struct {\n         }\n \n         impl<'tcx> Queries<'tcx> {\n-            pub fn new(\n-                local_providers: Providers,\n-                extern_providers: ExternProviders,\n-                on_disk_cache: Option<OnDiskCache<'tcx>>,\n-            ) -> Self {\n-                Queries {\n-                    local_providers: Box::new(local_providers),\n-                    extern_providers: Box::new(extern_providers),\n-                    on_disk_cache,\n-                    jobs: AtomicU64::new(1),\n-                    $($name: Default::default()),*\n-                }\n-            }\n-\n             pub(crate) fn try_collect_active_jobs(\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,"}]}