{"sha": "638ee23fcf656b8af6612b75ea0401318a7e6470", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOGVlMjNmY2Y2NTZiOGFmNjYxMmI3NWVhMDQwMTMxOGE3ZTY0NzA=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-07-08T04:43:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T05:27:00Z"}, "message": "Add improvements suggested by erickt and bblum", "tree": {"sha": "967f35a3709f2b63b5aee91c1fce34a424d7fc13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967f35a3709f2b63b5aee91c1fce34a424d7fc13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/638ee23fcf656b8af6612b75ea0401318a7e6470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/638ee23fcf656b8af6612b75ea0401318a7e6470", "html_url": "https://github.com/rust-lang/rust/commit/638ee23fcf656b8af6612b75ea0401318a7e6470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/638ee23fcf656b8af6612b75ea0401318a7e6470/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd482ef11936560981bb2399640a9a1bfc6106a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd482ef11936560981bb2399640a9a1bfc6106a", "html_url": "https://github.com/rust-lang/rust/commit/2bd482ef11936560981bb2399640a9a1bfc6106a"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "9b44f42ee372913a544afbc672a5fe3873d40a73", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/638ee23fcf656b8af6612b75ea0401318a7e6470/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638ee23fcf656b8af6612b75ea0401318a7e6470/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=638ee23fcf656b8af6612b75ea0401318a7e6470", "patch": "@@ -17,9 +17,7 @@ fn print_complements() {\n     }\n }\n \n-// can I combine these two lines?\n-enum color_e { Red, Yellow, Blue }\n-type color = color_e;\n+enum color { Red, Yellow, Blue }\n \n type creature_info = { name: uint, color: color };\n \n@@ -125,49 +123,38 @@ fn creature(\n }\n \n fn rendezvous(nn: uint, set: ~[color]) {\n+    // these ports will allow us to hear from the creatures\n     let from_creatures:     comm::port<creature_info> = comm::port();\n     let from_creatures_log: comm::port<str> = comm::port();\n+\n+    // these channels will be passed to the creatures so they can talk to us\n     let to_rendezvous     = comm::chan(from_creatures);\n     let to_rendezvous_log = comm::chan(from_creatures_log);\n+\n+    // these channels will allow us to talk to each creature by 'name'/index\n     let to_creature: ~[comm::chan<option<creature_info>>] =\n         vec::mapi(set,\n             fn@(ii: uint, col: color) -> comm::chan<option<creature_info>> {\n+                // create each creature as a listener with a port, and\n+                // give us a channel to talk to each\n                 ret do task::spawn_listener |from_rendezvous| {\n                     creature(ii, col, from_rendezvous, to_rendezvous,\n                              to_rendezvous_log);\n                 };\n             }\n         );\n \n-    let mut meetings = 0;\n     let mut creatures_met = 0;\n-    let mut creatures_present = 0;\n-\n-    // use option type instead of initializing to junk?\n-    let mut first_creature  = { name: 0, color: Red };\n-    let mut second_creature = { name: 0, color: Red };\n \n     // set up meetings...\n-    while meetings < nn {\n-        let creature_req: creature_info = comm::recv(from_creatures);\n-        creatures_met += 1;\n-\n-        alt creatures_present {\n-            0 {\n-                first_creature = creature_req;\n-                creatures_present = 1;\n-              }\n-            1 {\n-                second_creature = creature_req;\n-                comm::send(to_creature[first_creature.name],\n-                           some(second_creature));\n-                comm::send(to_creature[second_creature.name],\n-                           some(first_creature));\n-                creatures_present = 0;\n-                meetings += 1;\n-              }\n-            _ { fail \"too many creatures are here!\" }\n-        }\n+    for nn.times {\n+        let fst_creature: creature_info = comm::recv(from_creatures);\n+        let snd_creature: creature_info = comm::recv(from_creatures);\n+\n+        creatures_met += 2;\n+\n+        comm::send(to_creature[fst_creature.name], some(snd_creature));\n+        comm::send(to_creature[snd_creature.name], some(fst_creature));\n     }\n \n     // tell each creature to stop"}]}