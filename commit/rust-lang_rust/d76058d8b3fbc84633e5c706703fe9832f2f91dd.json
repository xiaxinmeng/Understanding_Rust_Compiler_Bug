{"sha": "d76058d8b3fbc84633e5c706703fe9832f2f91dd", "node_id": "C_kwDOAAsO6NoAKGQ3NjA1OGQ4YjNmYmM4NDYzM2U1YzcwNjcwM2ZlOTgzMmYyZjkxZGQ", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-14T02:49:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-14T02:49:26Z"}, "message": "Rollup merge of #104181 - jackh726:known-bug-tests, r=Mark-Simulacrum\n\nAdd a few known-bug tests\n\nThe labels of these tests should be changed from `S-bug-has-mcve` to `S-bug-has-test` once this is merged.\n\ncc:\n#101518\n#99492\n#90950\n#89196\n#104034\n#101350\n#103705\n#103899\n\nI couldn't reproduce the failures in #101962 and #100772 (so either these have started passing, or I didn't repro properly), so leaving those out for now.\n\n#102065 was a bit more complicated, since it uses `rustc_private` and I didn't want to mess with that.", "tree": {"sha": "cc73dd1f3ca359c8fb6eb5a72f61b0c95792284f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc73dd1f3ca359c8fb6eb5a72f61b0c95792284f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d76058d8b3fbc84633e5c706703fe9832f2f91dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcay2CRBK7hj4Ov3rIwAAhz0IACBb1ffjzagXDNHGChz0RaGX\nnIKqhcIMQrPcCeZNxfIQfl8WBvt5Jaa+cLN00doQC5wRHL9njbXegGcXJyXx4CfU\nDYfPqVjuTObdLhUr5Sm78T/yG2Kv7Jv6q9bOPAro1jypgDtS4rQsDFKIwnx6fhq6\n80ZGDuzaq5XX7DpEHpm7Lg4KzI3mECMO9jwB4b6CL4mqOiIYGzmKnqeIBOnJuPD/\nt5kkx3lpMz0mCJUw5UU3cISehR9ccy77PpKFJ1J0y/+uXP4VwdnZXNzM7WaQQDwK\nw8yvGbGpYgZliY5dimG9k4AQg4MS0LYurAqtgdT6irzArmlLpSqtcrv/EI0LWdQ=\n=TN6e\n-----END PGP SIGNATURE-----\n", "payload": "tree cc73dd1f3ca359c8fb6eb5a72f61b0c95792284f\nparent 7c67cb230064f89a7b553136c778caecb06b18e2\nparent 1bf8f87b08fe946ecc93da6f5731d0f1d7d3f0a9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668394166 -0500\ncommitter GitHub <noreply@github.com> 1668394166 -0500\n\nRollup merge of #104181 - jackh726:known-bug-tests, r=Mark-Simulacrum\n\nAdd a few known-bug tests\n\nThe labels of these tests should be changed from `S-bug-has-mcve` to `S-bug-has-test` once this is merged.\n\ncc:\n#101518\n#99492\n#90950\n#89196\n#104034\n#101350\n#103705\n#103899\n\nI couldn't reproduce the failures in #101962 and #100772 (so either these have started passing, or I didn't repro properly), so leaving those out for now.\n\n#102065 was a bit more complicated, since it uses `rustc_private` and I didn't want to mess with that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d76058d8b3fbc84633e5c706703fe9832f2f91dd", "html_url": "https://github.com/rust-lang/rust/commit/d76058d8b3fbc84633e5c706703fe9832f2f91dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d76058d8b3fbc84633e5c706703fe9832f2f91dd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c67cb230064f89a7b553136c778caecb06b18e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c67cb230064f89a7b553136c778caecb06b18e2", "html_url": "https://github.com/rust-lang/rust/commit/7c67cb230064f89a7b553136c778caecb06b18e2"}, {"sha": "1bf8f87b08fe946ecc93da6f5731d0f1d7d3f0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf8f87b08fe946ecc93da6f5731d0f1d7d3f0a9", "html_url": "https://github.com/rust-lang/rust/commit/1bf8f87b08fe946ecc93da6f5731d0f1d7d3f0a9"}], "stats": {"total": 373, "additions": 373, "deletions": 0}, "files": [{"sha": "501be175fce50446798de3b5e663ce65c8cbe94f", "filename": "src/test/incremental/issue-101518.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fincremental%2Fissue-101518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fincremental%2Fissue-101518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-101518.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,31 @@\n+// revisions: cfail1\n+// should-ice\n+// error-pattern: forcing query\n+// known-bug: #101518\n+\n+#[derive(PartialEq, Eq)]\n+struct Id<'a> {\n+    ns: &'a str,\n+}\n+fn visit_struct() {\n+    let id = Id { ns: \"random1\" };\n+    const FLAG: Id<'static> = Id {\n+        ns: \"needs_to_be_the_same\",\n+    };\n+    match id {\n+        FLAG => {}\n+        _ => {}\n+    }\n+}\n+fn visit_struct2() {\n+    let id = Id { ns: \"random2\" };\n+    const FLAG: Id<'static> = Id {\n+        ns: \"needs_to_be_the_same\",\n+    };\n+    match id {\n+        FLAG => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "487d1ac81bfc63bac06ff7da8944d4c9006e8482", "filename": "src/test/ui/borrowck/async-reference-generality.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,35 @@\n+// check-fail\n+// known-bug: #99492\n+// edition: 2021\n+\n+use std::marker::PhantomData;\n+\n+pub struct Struct<I, T>(PhantomData<fn() -> <Self as It>::Item>)\n+where\n+    Self: It;\n+\n+impl<I> It for Struct<I, I::Item>\n+where\n+    I: It,\n+{\n+    type Item = ();\n+}\n+\n+pub trait It {\n+    type Item;\n+}\n+\n+fn f() -> impl Send {\n+    async {\n+        let _x = Struct::<Empty<&'static ()>, _>(PhantomData);\n+        async {}.await;\n+    }\n+}\n+\n+pub struct Empty<T>(PhantomData<fn() -> T>);\n+\n+impl<T> It for Empty<T> {\n+    type Item = T;\n+}\n+\n+fn main() {}"}, {"sha": "af720ad29314f6818447dfbaf00d93f0f6fc5966", "filename": "src/test/ui/borrowck/async-reference-generality.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.stderr?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/async-reference-generality.rs:23:5\n+   |\n+LL | /     async {\n+LL | |         let _x = Struct::<Empty<&'static ()>, _>(PhantomData);\n+LL | |         async {}.await;\n+LL | |     }\n+   | |_____^ one type is more general than the other\n+   |\n+   = note: expected reference `&()`\n+              found reference `&()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-reference-generality.rs:23:5\n+   |\n+LL | /     async {\n+LL | |         let _x = Struct::<Empty<&'static ()>, _>(PhantomData);\n+LL | |         async {}.await;\n+LL | |     }\n+   | |_____^ one type is more general than the other\n+   |\n+   = note: expected reference `&()`\n+              found reference `&()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ab9d9a7ce6f0855ac27d07f9a589d77e5bfb64c5", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,53 @@\n+// check-fail\n+// known-bug: #90950\n+\n+trait Yokeable<'a>: 'static {\n+    type Output: 'a;\n+}\n+\n+\n+trait IsCovariant<'a> {}\n+\n+struct Yoke<Y: for<'a> Yokeable<'a>> {\n+    data: Y,\n+}\n+\n+\n+// impl<Y: for<'a> Yokeable<'a>> Yoke<Y> {\n+//     fn project<Y2: for<'a> Yokeable<'a>>(\n+//         &self,\n+//         f: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a (),\n+//     ) -> <Y2 as Yokeable<'a>>::Output) -> Yoke<Y2> {\n+//         unimplemented!()\n+//     }\n+// }\n+\n+fn upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n+    Y: for<'a> Yokeable<'a>,\n+    for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n+    {\n+    // x.project(|data, _| {\n+    //     Box::new(data)\n+    // })\n+    unimplemented!()\n+}\n+\n+\n+impl<'a> Yokeable<'a> for Box<dyn IsCovariant<'static> + 'static> {\n+    type Output = Box<dyn IsCovariant<'a> + 'a>;\n+}\n+\n+// this impl is mostly an example and unnecessary for the pure repro\n+use std::borrow::*;\n+impl<'a, T: ToOwned + ?Sized> Yokeable<'a> for Cow<'static, T> {\n+    type Output = Cow<'a, T>;\n+}\n+impl<'a, T: ToOwned + ?Sized> IsCovariant<'a> for Cow<'a, T> {}\n+\n+\n+\n+fn upcast_yoke(y: Yoke<Cow<'static, str>>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> {\n+    upcast(y)\n+}\n+\n+fn main() {}"}, {"sha": "6206b167b0b8db3db9c7bf3dcfa01323f0bee7d0", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `for<'a> <_ as Yokeable<'a>>::Output: IsCovariant<'a>` is not satisfied\n+  --> $DIR/issue-90950.rs:50:12\n+   |\n+LL |     upcast(y)\n+   |     ------ ^ the trait `for<'a> IsCovariant<'a>` is not implemented for `<_ as Yokeable<'a>>::Output`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `IsCovariant<'a>` is implemented for `std::borrow::Cow<'a, T>`\n+note: required by a bound in `upcast`\n+  --> $DIR/issue-90950.rs:27:42\n+   |\n+LL | fn upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n+   |    ------ required by a bound in this\n+LL |     Y: for<'a> Yokeable<'a>,\n+LL |     for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n+   |                                          ^^^^^^^^^^^^^^^ required by this bound in `upcast`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7693b118247621c24eba60b14f1830031a9a6768", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,23 @@\n+// check-fail\n+// known-bug: #89196\n+\n+// Should pass, but we normalize and check bounds before we resolve the generics\n+// of the function (which we know because of the return type).\n+\n+trait Trait<'a> {\n+    type Out;\n+}\n+\n+impl<'a, T> Trait<'a> for T {\n+    type Out = T;\n+}\n+\n+fn weird_bound<X>() -> X\n+    where\n+        for<'a> X: Trait<'a>,\n+        for<'a> <X as Trait<'a>>::Out: Copy\n+{ todo!() }\n+\n+fn main() {\n+    let _: () = weird_bound();\n+}"}, {"sha": "51c9646004afa4a7f0c462567bb3e6378b0db408", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'a> <_ as Trait<'a>>::Out: Copy` is not satisfied\n+  --> $DIR/norm-before-method-resolution.rs:22:17\n+   |\n+LL |     let _: () = weird_bound();\n+   |                 ^^^^^^^^^^^ the trait `for<'a> Copy` is not implemented for `<_ as Trait<'a>>::Out`\n+   |\n+note: required by a bound in `weird_bound`\n+  --> $DIR/norm-before-method-resolution.rs:18:40\n+   |\n+LL | fn weird_bound<X>() -> X\n+   |    ----------- required by a bound in this\n+...\n+LL |         for<'a> <X as Trait<'a>>::Out: Copy\n+   |                                        ^^^^ required by this bound in `weird_bound`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2e23fa1828091b38b2264cab404d59140042ff7c", "filename": "src/test/ui/never_type/exhaustive_patterns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,21 @@\n+// check-fail\n+// known-bug: #104034\n+\n+#![feature(exhaustive_patterns, never_type)]\n+\n+mod inner {\n+    pub struct Wrapper<T>(T);\n+}\n+\n+enum Either<A, B> {\n+    A(A),\n+    B(inner::Wrapper<B>),\n+}\n+\n+fn foo() -> Either<(), !> {\n+    Either::A(())\n+}\n+\n+fn main() {\n+    let Either::A(()) = foo();\n+}"}, {"sha": "e41baf862180d97103f5a39461db13ccf760ffeb", "filename": "src/test/ui/never_type/exhaustive_patterns.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,25 @@\n+error[E0005]: refutable pattern in local binding: `Either::B(_)` not covered\n+  --> $DIR/exhaustive_patterns.rs:20:9\n+   |\n+LL |     let Either::A(()) = foo();\n+   |         ^^^^^^^^^^^^^ pattern `Either::B(_)` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+note: `Either<(), !>` defined here\n+  --> $DIR/exhaustive_patterns.rs:12:5\n+   |\n+LL | enum Either<A, B> {\n+   |      ------\n+LL |     A(A),\n+LL |     B(inner::Wrapper<B>),\n+   |     ^ not covered\n+   = note: the matched value is of type `Either<(), !>`\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let Either::A(()) = foo() { todo!() }\n+   |     ++                           ~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "14460dea5b5270a03e3e4f69071be2929c477260", "filename": "src/test/ui/nll/user-annotations/ascribed-type-wf.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fascribed-type-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fascribed-type-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fascribed-type-wf.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// known-bug: #101350\n+\n+trait Trait {\n+    type Ty;\n+}\n+\n+impl Trait for &'static () {\n+    type Ty = ();\n+}\n+\n+fn extend<'a>() {\n+    None::<<&'a () as Trait>::Ty>;\n+}\n+\n+fn main() {}"}, {"sha": "c077921c0bdd20f0d8556627ca849e802a2f0d9d", "filename": "src/test/ui/traits/suggest-fully-qualified-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,24 @@\n+// check-fail\n+// known-bug: #103705\n+// normalize-stderr-test \"\\[closure@.*\\]\" -> \"[closure@]\"\n+// normalize-stderr-test \"\\+* ~\" -> \"+++ ~\"\n+\n+// The output of this currently suggests writing a closure in the qualified path.\n+\n+trait MyTrait<T> {\n+   fn lol<F:FnOnce()>(&self, f:F) -> u16;\n+}\n+\n+struct Qqq;\n+\n+impl MyTrait<u32> for Qqq{\n+   fn lol<F:FnOnce()>(&self, _f:F) -> u16 { 5 }\n+}\n+impl MyTrait<u64> for Qqq{\n+   fn lol<F:FnOnce()>(&self, _f:F) -> u16 { 6 }\n+}\n+\n+fn main() {\n+    let q = Qqq;\n+    q.lol(||());\n+}"}, {"sha": "3df623c14c3d6c8324253791a4b296e6b9a4ed9b", "filename": "src/test/ui/traits/suggest-fully-qualified-closure.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.stderr?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,34 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-closure.rs:23:7\n+   |\n+LL |     q.lol(||());\n+   |       ^^^\n+   |\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <Qqq as MyTrait<T>>::lol::<[closure@]>(&q, ||());\n+   |     +++ ~\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-closure.rs:23:7\n+   |\n+LL |     q.lol(||());\n+   |       ^^^\n+   |\n+note: multiple `impl`s satisfying `Qqq: MyTrait<_>` found\n+  --> $DIR/suggest-fully-qualified-closure.rs:14:1\n+   |\n+LL | impl MyTrait<u32> for Qqq{\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl MyTrait<u64> for Qqq{\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <Qqq as MyTrait<T>>::lol::<[closure@]>(&q, ||());\n+   |     +++ ~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "9d5341dab42f3a416722b225498e43e30c210664", "filename": "src/test/ui/typeck/issue-103899.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,33 @@\n+// check-fail\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \" .*\\n\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+// known-bug: #103899\n+\n+trait BaseWithAssoc {\n+    type Assoc;\n+}\n+\n+trait WrapperWithAssoc {\n+    type BaseAssoc: BaseWithAssoc;\n+}\n+\n+struct Wrapper<B> {\n+    inner: B,\n+}\n+\n+struct ProjectToBase<T: BaseWithAssoc> {\n+    data_type_h: T::Assoc,\n+}\n+\n+struct DoubleProject<L: WrapperWithAssoc> {\n+    buffer: Wrapper<ProjectToBase<L::BaseAssoc>>,\n+}\n+\n+fn trigger<L: WrapperWithAssoc<BaseAssoc = ()>>() -> DoubleProject<L> {\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "836c6ee486f513902f852131fd571f1a623bd40e", "filename": "src/test/ui/typeck/issue-103899.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76058d8b3fbc84633e5c706703fe9832f2f91dd/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr?ref=d76058d8b3fbc84633e5c706703fe9832f2f91dd", "patch": "@@ -0,0 +1,12 @@\n+\n+stack\n+error:\n+\n+\n+\n+\n+\n+\n+\n+\n+query#0#1end\n\\ No newline at end of file"}]}