{"sha": "110f7206e6e08b75dfa1f3d1b45c562a19dc9e20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGY3MjA2ZTZlMDhiNzVkZmExZjNkMWI0NWM1NjJhMTlkYzllMjA=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-16T19:52:32Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-18T20:31:33Z"}, "message": "Split formatting function from side effects\n\nThis makes rustfmt more usable as a library.", "tree": {"sha": "8e73e2a1d3f881dd33cbaf5b7666c7384486f98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e73e2a1d3f881dd33cbaf5b7666c7384486f98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110f7206e6e08b75dfa1f3d1b45c562a19dc9e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110f7206e6e08b75dfa1f3d1b45c562a19dc9e20", "html_url": "https://github.com/rust-lang/rust/commit/110f7206e6e08b75dfa1f3d1b45c562a19dc9e20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110f7206e6e08b75dfa1f3d1b45c562a19dc9e20/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5dc294160bfd5edfa532295bf8cf0befb16b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5dc294160bfd5edfa532295bf8cf0befb16b78", "html_url": "https://github.com/rust-lang/rust/commit/9c5dc294160bfd5edfa532295bf8cf0befb16b78"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "c5ff601e109acaafeadc6d499af660257e898989", "filename": "src/lib.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/110f7206e6e08b75dfa1f3d1b45c562a19dc9e20/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110f7206e6e08b75dfa1f3d1b45c562a19dc9e20/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=110f7206e6e08b75dfa1f3d1b45c562a19dc9e20", "patch": "@@ -49,6 +49,8 @@ use std::collections::HashMap;\n use std::fmt;\n use std::mem::swap;\n use std::str::FromStr;\n+use std::rc::Rc;\n+use std::cell::RefCell;\n \n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n@@ -310,8 +312,9 @@ fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n }\n \n struct RustFmtCalls {\n-    write_mode: WriteMode,\n     config: Option<Box<config::Config>>,\n+    // FIXME: there's likely a better type for the job.\n+    result: Rc<RefCell<Option<FileMap>>>,\n }\n \n impl<'a> CompilerCalls<'a> for RustFmtCalls {\n@@ -326,11 +329,10 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n     }\n \n     fn build_controller(&mut self, _: &Session) -> driver::CompileController<'a> {\n-        let write_mode = self.write_mode;\n-\n         let mut config_option = None;\n         swap(&mut self.config, &mut config_option);\n         let config = config_option.unwrap();\n+        let result = self.result.clone();\n \n         let mut control = driver::CompileController::basic();\n         control.after_parse.stop = Compilation::Stop;\n@@ -341,29 +343,44 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n             // For some reason, the codemap does not include terminating\n             // newlines so we must add one on for each file. This is sad.\n             filemap::append_newlines(&mut file_map);\n-            println!(\"{}\", fmt_lines(&mut file_map, &*config));\n-\n-            let result = filemap::write_all_files(&file_map, write_mode, &*config);\n \n-            match result {\n-                Err(msg) => println!(\"Error writing files: {}\", msg),\n-                Ok(result) => {\n-                    if let WriteMode::Return(callback) = write_mode {\n-                        callback(result);\n-                    }\n-                }\n-            }\n+            *result.borrow_mut() = Some(file_map);\n         });\n \n         control\n     }\n }\n \n+pub fn format(args: Vec<String>, config: Box<Config>) -> FileMap {\n+    let result = Rc::new(RefCell::new(None));\n+    {\n+        let mut call_ctxt = RustFmtCalls { config: Some(config), result: result.clone() };\n+        rustc_driver::run_compiler(&args, &mut call_ctxt);\n+    }\n+\n+    // Peel the union.\n+    Rc::try_unwrap(result).ok().unwrap().into_inner().unwrap()\n+}\n+\n // args are the arguments passed on the command line, generally passed through\n // to the compiler.\n // write_mode determines what happens to the result of running rustfmt, see\n // WriteMode.\n pub fn run(args: Vec<String>, write_mode: WriteMode, config: Box<Config>) {\n-    let mut call_ctxt = RustFmtCalls { write_mode: write_mode, config: Some(config) };\n-    rustc_driver::run_compiler(&args, &mut call_ctxt);\n+    // FIXME: we probs don't need a full clone\n+    let config_clone = (&config).clone();\n+    let mut result = format(args, config);\n+\n+    println!(\"{}\", fmt_lines(&mut result, &config_clone));\n+\n+    let write_result = filemap::write_all_files(&result, write_mode, &config_clone);\n+\n+    match write_result {\n+        Err(msg) => println!(\"Error writing files: {}\", msg),\n+        Ok(result) => {\n+            if let WriteMode::Return(callback) = write_mode {\n+                callback(result);\n+            }\n+        }\n+    }\n }"}]}