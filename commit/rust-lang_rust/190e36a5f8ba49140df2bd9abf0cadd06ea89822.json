{"sha": "190e36a5f8ba49140df2bd9abf0cadd06ea89822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MGUzNmE1ZjhiYTQ5MTQwZGYyYmQ5YWJmMGNhZGQwNmVhODk4MjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-11T09:02:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-11T09:02:23Z"}, "message": "Make everything in example.rs public", "tree": {"sha": "ebef0d22ff744427b53752307aa8e9e37fa38c65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebef0d22ff744427b53752307aa8e9e37fa38c65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190e36a5f8ba49140df2bd9abf0cadd06ea89822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190e36a5f8ba49140df2bd9abf0cadd06ea89822", "html_url": "https://github.com/rust-lang/rust/commit/190e36a5f8ba49140df2bd9abf0cadd06ea89822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190e36a5f8ba49140df2bd9abf0cadd06ea89822/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73b9d2e868cf1514db92f613a4b41b5de866074", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73b9d2e868cf1514db92f613a4b41b5de866074", "html_url": "https://github.com/rust-lang/rust/commit/c73b9d2e868cf1514db92f613a4b41b5de866074"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "d5c122bf681fff187472cb48db55b7bc52d3a7bc", "filename": "example/example.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/190e36a5f8ba49140df2bd9abf0cadd06ea89822/example%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190e36a5f8ba49140df2bd9abf0cadd06ea89822/example%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fexample.rs?ref=190e36a5f8ba49140df2bd9abf0cadd06ea89822", "patch": "@@ -6,96 +6,96 @@ extern crate mini_core;\n \n use mini_core::*;\n \n-fn abc(a: u8) -> u8 {\n+pub fn abc(a: u8) -> u8 {\n     a * 2\n }\n \n-fn bcd(b: bool, a: u8) -> u8 {\n+pub fn bcd(b: bool, a: u8) -> u8 {\n     if b {\n         a * 2\n     } else {\n         a * 3\n     }\n }\n \n-fn call() {\n+pub fn call() {\n     abc(42);\n }\n \n-fn indirect_call() {\n+pub fn indirect_call() {\n     let f: fn() = call;\n     f();\n }\n \n-enum BoolOption {\n+pub enum BoolOption {\n     Some(bool),\n     None,\n }\n \n-fn option_unwrap_or(o: BoolOption, d: bool) -> bool {\n+pub fn option_unwrap_or(o: BoolOption, d: bool) -> bool {\n     match o {\n         BoolOption::Some(b) => b,\n         BoolOption::None => d,\n     }\n }\n \n-fn ret_42() -> u8 {\n+pub fn ret_42() -> u8 {\n     42\n }\n \n-fn return_str() -> &'static str {\n+pub fn return_str() -> &'static str {\n     \"hello world\"\n }\n \n-fn promoted_val() -> &'static u8 {\n+pub fn promoted_val() -> &'static u8 {\n     &(1 * 2)\n }\n \n-fn cast_ref_to_raw_ptr(abc: &u8) -> *const u8 {\n+pub fn cast_ref_to_raw_ptr(abc: &u8) -> *const u8 {\n     abc as *const u8\n }\n \n-fn cmp_raw_ptr(a: *const u8, b: *const u8) -> bool {\n+pub fn cmp_raw_ptr(a: *const u8, b: *const u8) -> bool {\n     a == b\n }\n \n-fn int_cast(a: u16, b: i16) -> (u8, u16, u32, usize, i8, i16, i32, isize, u8, u32) {\n+pub fn int_cast(a: u16, b: i16) -> (u8, u16, u32, usize, i8, i16, i32, isize, u8, u32) {\n     (\n         a as u8, a as u16, a as u32, a as usize, a as i8, a as i16, a as i32, a as isize, b as u8,\n         b as u32,\n     )\n }\n \n-fn char_cast(c: char) -> u8 {\n+pub fn char_cast(c: char) -> u8 {\n     c as u8\n }\n \n pub struct DebugTuple(());\n \n-fn debug_tuple() -> DebugTuple {\n+pub fn debug_tuple() -> DebugTuple {\n     DebugTuple(())\n }\n \n-fn size_of<T>() -> usize {\n+pub fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n \n-fn use_size_of() -> usize {\n+pub fn use_size_of() -> usize {\n     size_of::<u64>()\n }\n \n-unsafe fn use_copy_intrinsic(src: *const u8, dst: *mut u8) {\n+pub unsafe fn use_copy_intrinsic(src: *const u8, dst: *mut u8) {\n     intrinsics::copy::<u8>(src, dst, 1);\n }\n \n-unsafe fn use_copy_intrinsic_ref(src: *const u8, dst: *mut u8) {\n+pub unsafe fn use_copy_intrinsic_ref(src: *const u8, dst: *mut u8) {\n     let copy2 = &intrinsics::copy::<u8>;\n     copy2(src, dst, 1);\n }\n \n-const ABC: u8 = 6 * 7;\n+pub const ABC: u8 = 6 * 7;\n \n-fn use_const() -> u8 {\n+pub fn use_const() -> u8 {\n     ABC\n }\n \n@@ -107,7 +107,7 @@ pub fn call_closure_2arg() {\n     (|_, _| {})(0u8, 42u16)\n }\n \n-struct IsNotEmpty;\n+pub struct IsNotEmpty;\n \n impl<'a, 'b> FnOnce<(&'a &'b [u16],)> for IsNotEmpty {\n     type Output = (u8, u8);\n@@ -129,77 +129,77 @@ pub fn call_is_not_empty() {\n     IsNotEmpty.call_once((&(&[0u16] as &[_]),));\n }\n \n-fn eq_char(a: char, b: char) -> bool {\n+pub fn eq_char(a: char, b: char) -> bool {\n     a == b\n }\n \n-unsafe fn transmute(c: char) -> u32 {\n+pub unsafe fn transmute(c: char) -> u32 {\n     intrinsics::transmute(c)\n }\n \n-unsafe fn deref_str_ptr(s: *const str) -> &'static str {\n+pub unsafe fn deref_str_ptr(s: *const str) -> &'static str {\n     &*s\n }\n \n-fn use_array(arr: [u8; 3]) -> u8 {\n+pub fn use_array(arr: [u8; 3]) -> u8 {\n     arr[1]\n }\n \n-fn repeat_array() -> [u8; 3] {\n+pub fn repeat_array() -> [u8; 3] {\n     [0; 3]\n }\n \n-fn array_as_slice(arr: &[u8; 3]) -> &[u8] {\n+pub fn array_as_slice(arr: &[u8; 3]) -> &[u8] {\n     arr\n }\n \n-unsafe fn use_ctlz_nonzero(a: u16) -> u16 {\n+pub unsafe fn use_ctlz_nonzero(a: u16) -> u16 {\n     intrinsics::ctlz_nonzero(a)\n }\n \n-fn ptr_as_usize(ptr: *const u8) -> usize {\n+pub fn ptr_as_usize(ptr: *const u8) -> usize {\n     ptr as usize\n }\n \n-fn float_cast(a: f32, b: f64) -> (f64, f32) {\n+pub fn float_cast(a: f32, b: f64) -> (f64, f32) {\n     (a as f64, b as f32)\n }\n \n-fn int_to_float(a: u8, b: i32) -> (f64, f32) {\n+pub fn int_to_float(a: u8, b: i32) -> (f64, f32) {\n     (a as f64, b as f32)\n }\n \n-fn make_array() -> [u8; 3] {\n+pub fn make_array() -> [u8; 3] {\n     [42, 0, 5]\n }\n \n-fn some_promoted_tuple() -> &'static (&'static str, &'static str) {\n+pub fn some_promoted_tuple() -> &'static (&'static str, &'static str) {\n     &(\"abc\", \"some\")\n }\n \n-fn index_slice(s: &[u8]) -> u8 {\n+pub fn index_slice(s: &[u8]) -> u8 {\n     s[2]\n }\n \n pub struct StrWrapper {\n     s: str,\n }\n \n-fn str_wrapper_get(w: &StrWrapper) -> &str {\n+pub fn str_wrapper_get(w: &StrWrapper) -> &str {\n     &w.s\n }\n \n-fn i16_as_i8(a: i16) -> i8 {\n+pub fn i16_as_i8(a: i16) -> i8 {\n     a as i8\n }\n \n-struct Unsized(u8, str);\n+pub struct Unsized(u8, str);\n \n-fn get_sized_field_ref_from_unsized_type(u: &Unsized) -> &u8 {\n+pub fn get_sized_field_ref_from_unsized_type(u: &Unsized) -> &u8 {\n     &u.0\n }\n \n-fn get_unsized_field_ref_from_unsized_type(u: &Unsized) -> &str {\n+pub fn get_unsized_field_ref_from_unsized_type(u: &Unsized) -> &str {\n     &u.1\n }\n "}]}