{"sha": "5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTJmMDFkZWU3Nzk0ZGMzMGFlZTdjZWFiZjJiOWUzZmJhMjVjY2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-02T18:04:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-03T17:53:07Z"}, "message": "Temporary patch to accept arbitrary lifetimes (behind feature gate) in bound lists. This is needed to bootstrap fix for #5723.", "tree": {"sha": "c07b6374681ccbaadc6d1330bd2fa6d5783b6426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c07b6374681ccbaadc6d1330bd2fa6d5783b6426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "html_url": "https://github.com/rust-lang/rust/commit/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e97d4e6c190764de1240c2e8a5ac253a60faac6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97d4e6c190764de1240c2e8a5ac253a60faac6b", "html_url": "https://github.com/rust-lang/rust/commit/e97d4e6c190764de1240c2e8a5ac253a60faac6b"}], "stats": {"total": 107, "additions": 90, "deletions": 17}, "files": [{"sha": "925d9430ede8c32d9d6f3fd64fe6fa1a7b5c0ae6", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -59,6 +59,10 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n \n     (\"quad_precision_float\", Active),\n \n+    // A temporary feature gate used to enable parser extensions needed\n+    // to bootstrap fix for #5723.\n+    (\"issue_5723_bootstrap\", Active),\n+\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n     (\"test_accepted_feature\", Accepted),\n@@ -80,14 +84,16 @@ enum Status {\n /// A set of features to be used by later passes.\n pub struct Features {\n     pub default_type_params: Cell<bool>,\n-    pub quad_precision_float: Cell<bool>\n+    pub quad_precision_float: Cell<bool>,\n+    pub issue_5723_bootstrap: Cell<bool>,\n }\n \n impl Features {\n     pub fn new() -> Features {\n         Features {\n             default_type_params: Cell::new(false),\n-            quad_precision_float: Cell::new(false)\n+            quad_precision_float: Cell::new(false),\n+            issue_5723_bootstrap: Cell::new(false),\n         }\n     }\n }\n@@ -367,4 +373,5 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n \n     sess.features.default_type_params.set(cx.has_feature(\"default_type_params\"));\n     sess.features.quad_precision_float.set(cx.has_feature(\"quad_precision_float\"));\n+    sess.features.issue_5723_bootstrap.set(cx.has_feature(\"issue_5723_bootstrap\"));\n }"}, {"sha": "38aa64b92daca96c44e10b274e41df7dbb42e786", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -3828,7 +3828,8 @@ impl<'a> Resolver<'a> {\n             TraitTyParamBound(ref tref) => {\n                 self.resolve_trait_reference(id, tref, TraitBoundingTypeParameter)\n             }\n-            RegionTyParamBound => {}\n+            StaticRegionTyParamBound => {}\n+            OtherRegionTyParamBound(_) => {}\n         }\n     }\n "}, {"sha": "cc8aab3a87ceb54c0679a498ad45397a23f1501a", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -818,9 +818,17 @@ fn conv_builtin_bounds(tcx: &ty::ctxt, ast_bounds: &Option<OwnedSlice<ast::TyPar\n                             format!(\"only the builtin traits can be used \\\n                                   as closure or object bounds\"));\n                     }\n-                    ast::RegionTyParamBound => {\n+                    ast::StaticRegionTyParamBound => {\n                         builtin_bounds.add(ty::BoundStatic);\n                     }\n+                    ast::OtherRegionTyParamBound(span) => {\n+                        if !tcx.sess.features.issue_5723_bootstrap.get() {\n+                            tcx.sess.span_err(\n+                                span,\n+                                format!(\"only the 'static lifetime is \\\n+                                         accepted here.\"));\n+                        }\n+                    }\n                 }\n             }\n             builtin_bounds"}, {"sha": "bb829a114522875fb1e04127ae8cf8721b5c4bf3", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -50,7 +50,8 @@ use std::rc::Rc;\n use collections::{HashMap, HashSet};\n \n use syntax::abi;\n-use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n+use syntax::ast::{StaticRegionTyParamBound, OtherRegionTyParamBound,\n+                  TraitTyParamBound};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, split_trait_methods};\n@@ -1109,9 +1110,18 @@ fn ty_generics(ccx: &CrateCtxt,\n                     }\n                 }\n \n-                RegionTyParamBound => {\n+                StaticRegionTyParamBound => {\n                     param_bounds.builtin_bounds.add(ty::BoundStatic);\n                 }\n+\n+                OtherRegionTyParamBound(span) => {\n+                    if !ccx.tcx.sess.features.issue_5723_bootstrap.get() {\n+                        ccx.tcx.sess.span_err(\n+                            span,\n+                            format!(\"only the 'static lifetime is \\\n+                                     accepted here.\"));\n+                    }\n+                }\n             }\n         }\n "}, {"sha": "b87b6988a3a6085eb00d4e9609418a51b387c583", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -893,7 +893,8 @@ impl<'a> Rebuilder<'a> {\n                                -> OwnedSlice<ast::TyParamBound> {\n         ty_param_bounds.map(|tpb| {\n             match tpb {\n-                &ast::RegionTyParamBound => ast::RegionTyParamBound,\n+                &ast::StaticRegionTyParamBound => ast::StaticRegionTyParamBound,\n+                &ast::OtherRegionTyParamBound(s) => ast::OtherRegionTyParamBound(s),\n                 &ast::TraitTyParamBound(ref tr) => {\n                     let last_seg = tr.path.segments.last().unwrap();\n                     let mut insert = Vec::new();"}, {"sha": "d904a0ce6a207396385af8ff46c103a172bc7149", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -350,7 +350,8 @@ pub enum TyParamBound {\n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self) -> TyParamBound {\n         match *self {\n-            ast::RegionTyParamBound => RegionBound,\n+            ast::StaticRegionTyParamBound => RegionBound,\n+            ast::OtherRegionTyParamBound(_) => RegionBound,\n             ast::TraitTyParamBound(ref t) => TraitBound(t.clean()),\n         }\n     }"}, {"sha": "b65215e71a6d47045b0ec5c79661e8e97d55cec6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -173,7 +173,8 @@ pub static DUMMY_NODE_ID: NodeId = -1;\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),\n-    RegionTyParamBound\n+    StaticRegionTyParamBound,\n+    OtherRegionTyParamBound(Span) // FIXME -- just here until work for #5723 lands\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]"}, {"sha": "685e08dd91819d1f1b43b380138ec9f6c9805cc2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -437,7 +437,8 @@ fn fold_ty_param_bound<T: Folder>(tpb: &TyParamBound, fld: &mut T)\n                                     -> TyParamBound {\n     match *tpb {\n         TraitTyParamBound(ref ty) => TraitTyParamBound(fold_trait_ref(ty, fld)),\n-        RegionTyParamBound => RegionTyParamBound\n+        StaticRegionTyParamBound => StaticRegionTyParamBound,\n+        OtherRegionTyParamBound(s) => OtherRegionTyParamBound(s)\n     }\n }\n "}, {"sha": "1917ea2dafb0165347c77c46ee6d3abd50cc9f1f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -12,7 +12,7 @@\n \n use abi;\n use ast::{BareFnTy, ClosureTy};\n-use ast::{RegionTyParamBound, TraitTyParamBound};\n+use ast::{StaticRegionTyParamBound, OtherRegionTyParamBound, TraitTyParamBound};\n use ast::{Provided, Public, FnStyle};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, Block};\n@@ -3351,7 +3351,7 @@ impl<'a> Parser<'a> {\n                 token::LIFETIME(lifetime) => {\n                     let lifetime_interned_string = token::get_ident(lifetime);\n                     if lifetime_interned_string.equiv(&(\"static\")) {\n-                        result.push(RegionTyParamBound);\n+                        result.push(StaticRegionTyParamBound);\n                         if allow_any_lifetime && ret_lifetime.is_none() {\n                             ret_lifetime = Some(ast::Lifetime {\n                                 id: ast::DUMMY_NODE_ID,\n@@ -3366,8 +3366,7 @@ impl<'a> Parser<'a> {\n                             name: lifetime.name\n                         });\n                     } else {\n-                        self.span_err(self.span,\n-                                      \"`'static` is the only permissible region bound here\");\n+                        result.push(OtherRegionTyParamBound(self.span));\n                     }\n                     self.bump();\n                 }"}, {"sha": "09e0684ba293b84fd6b994d55150a2fd7456dc71", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use abi;\n-use ast::{P, RegionTyParamBound, TraitTyParamBound, Required, Provided};\n+use ast::{P, StaticRegionTyParamBound, OtherRegionTyParamBound,\n+          TraitTyParamBound, Required, Provided};\n use ast;\n use ast_util;\n use owned_slice::OwnedSlice;\n@@ -1882,7 +1883,8 @@ impl<'a> State<'a> {\n \n                 try!(match *bound {\n                     TraitTyParamBound(ref tref) => self.print_trait_ref(tref),\n-                    RegionTyParamBound => word(&mut self.s, \"'static\"),\n+                    StaticRegionTyParamBound => word(&mut self.s, \"'static\"),\n+                    OtherRegionTyParamBound(_) => Ok(())\n                 })\n             }\n             Ok(())"}, {"sha": "f715b3a68aee906248abbdc74bfeb1b8bba96fb7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -472,7 +472,8 @@ pub fn walk_ty_param_bounds<E: Clone, V: Visitor<E>>(visitor: &mut V,\n             TraitTyParamBound(ref typ) => {\n                 walk_trait_ref_helper(visitor, typ, env.clone())\n             }\n-            RegionTyParamBound => {}\n+            StaticRegionTyParamBound => {}\n+            OtherRegionTyParamBound(..) => {}\n         }\n     }\n }"}, {"sha": "05050b72e5e8d7478d352177ac7747c489aec408", "filename": "src/test/compile-fail/regions-bound-lists-feature-gate.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo { }\n+\n+fn foo<'a>(x: ~Foo:'a) { //~ ERROR only the 'static lifetime is accepted here\n+}\n+\n+fn bar<'a, T:'a>() { //~ ERROR only the 'static lifetime is accepted here\n+}\n+\n+fn main() { }"}, {"sha": "e2ac9e4c79e0ce884fc7d39a47a2548e6f38bef2", "filename": "src/test/run-pass/regions-bound-lists-feature-gate.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs?ref=5fe2f01dee7794dc30aee7ceabf2b9e3fba25cca", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(issue_5723_bootstrap)]\n+\n+trait Foo { }\n+\n+fn foo<'a>(x: ~Foo:'a) {\n+}\n+\n+fn bar<'a, T:'a>() {\n+}\n+\n+pub fn main() { }"}]}