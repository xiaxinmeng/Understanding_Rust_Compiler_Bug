{"sha": "b02f2982e72ceca83965ac0bd19ffed196110758", "node_id": "C_kwDOAAsO6NoAKGIwMmYyOTgyZTcyY2VjYTgzOTY1YWMwYmQxOWZmZWQxOTYxMTA3NTg", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-09-25T11:49:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-18T15:50:56Z"}, "message": "Remove regionck member constraint handling and leave it to mir borrowck", "tree": {"sha": "ce259019f6b3750f4911fcba6421ff51bc915f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce259019f6b3750f4911fcba6421ff51bc915f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02f2982e72ceca83965ac0bd19ffed196110758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02f2982e72ceca83965ac0bd19ffed196110758", "html_url": "https://github.com/rust-lang/rust/commit/b02f2982e72ceca83965ac0bd19ffed196110758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02f2982e72ceca83965ac0bd19ffed196110758/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "html_url": "https://github.com/rust-lang/rust/commit/38b9e6a393ee62733e7d7d98629a46ebff3f3a63"}], "stats": {"total": 559, "additions": 77, "deletions": 482}, "files": [{"sha": "d7e1b4545b8c103df790817c19c144cb899668e1", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 162, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -2,7 +2,6 @@\n \n use crate::infer::region_constraints::Constraint;\n use crate::infer::region_constraints::GenericKind;\n-use crate::infer::region_constraints::MemberConstraint;\n use crate::infer::region_constraints::RegionConstraintData;\n use crate::infer::region_constraints::VarInfos;\n use crate::infer::region_constraints::VerifyBound;\n@@ -150,12 +149,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n         let graph = self.construct_graph();\n         self.expand_givens(&graph);\n-        loop {\n-            self.expansion(&mut var_data);\n-            if !self.enforce_member_constraints(&graph, &mut var_data) {\n-                break;\n-            }\n-        }\n+        self.expansion(&mut var_data);\n         self.collect_errors(&mut var_data, errors);\n         self.collect_var_errors(&var_data, &graph, errors);\n         var_data\n@@ -233,133 +227,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    /// Enforce all member constraints and return true if anything\n-    /// changed. See `enforce_member_constraint` for more details.\n-    fn enforce_member_constraints(\n-        &self,\n-        graph: &RegionGraph<'tcx>,\n-        var_values: &mut LexicalRegionResolutions<'tcx>,\n-    ) -> bool {\n-        // Note: we don't use the `any` combinator because we don't\n-        // want to stop at the first constraint that makes a change.\n-        let mut any_changed = false;\n-        for member_constraint in &self.data.member_constraints {\n-            any_changed |= self.enforce_member_constraint(graph, member_constraint, var_values);\n-        }\n-        any_changed\n-    }\n-\n-    /// Enforce a constraint like\n-    ///\n-    /// ```\n-    /// 'r member of ['c...]\n-    /// ```\n-    ///\n-    /// We look for all choice regions from the list `'c...` that:\n-    ///\n-    /// (a) are greater than the current value of `'r` (which is a lower bound)\n-    ///\n-    /// and\n-    ///\n-    /// (b) are compatible with the upper bounds of `'r` that we can\n-    /// find by traversing the graph.\n-    ///\n-    /// From that list, we look for a *minimal* option `'c_min`. If we\n-    /// find one, then we can enforce that `'r: 'c_min`.\n-    #[instrument(level = \"debug\", skip(self, graph, member_constraint, var_values))]\n-    fn enforce_member_constraint(\n-        &self,\n-        graph: &RegionGraph<'tcx>,\n-        member_constraint: &MemberConstraint<'tcx>,\n-        var_values: &mut LexicalRegionResolutions<'tcx>,\n-    ) -> bool {\n-        debug!(\"member_constraint={:#?}\", member_constraint);\n-\n-        // The constraint is some inference variable (`vid`) which\n-        // must be equal to one of the options.\n-        let member_vid = match member_constraint.member_region {\n-            ty::ReVar(vid) => *vid,\n-            _ => return false,\n-        };\n-\n-        // The current value of `vid` is a lower bound LB -- i.e., we\n-        // know that `LB <= vid` must be true.\n-        let member_lower_bound: ty::Region<'tcx> = match var_values.value(member_vid) {\n-            VarValue::ErrorValue => return false,\n-            VarValue::Value(r) => r,\n-        };\n-\n-        // Find all the \"upper bounds\" -- that is, each region `b` such that\n-        // `r0 <= b` must hold.\n-        let (member_upper_bounds, ..) =\n-            self.collect_bounding_regions(graph, member_vid, OUTGOING, None);\n-\n-        // Get an iterator over the *available choice* -- that is,\n-        // each choice region `c` where `lb <= c` and `c <= ub` for all the\n-        // upper bounds `ub`.\n-        debug!(\"upper_bounds={:#?}\", member_upper_bounds);\n-        let mut options = member_constraint\n-            .choice_regions\n-            .iter()\n-            // If any of the regions are inference vars, resolve them, as far\n-            // as possible.\n-            .filter_map(|option| match option {\n-                ty::ReVar(vid) => match var_values.value(*vid) {\n-                    VarValue::ErrorValue => None,\n-                    VarValue::Value(r) => Some(r),\n-                },\n-                r => Some(r),\n-            })\n-            .filter(|option| {\n-                self.sub_concrete_regions(member_lower_bound, option)\n-                    && member_upper_bounds\n-                        .iter()\n-                        .all(|upper_bound| self.sub_concrete_regions(option, upper_bound.region))\n-            });\n-\n-        // If there is more than one option, we only make a choice if\n-        // there is a single *least* choice -- i.e., some available\n-        // region that is `<=` all the others.\n-        let mut least_choice: ty::Region<'tcx> = match options.next() {\n-            Some(&r) => r,\n-            None => return false,\n-        };\n-        debug!(?least_choice);\n-        for &option in options {\n-            debug!(?option);\n-            if !self.sub_concrete_regions(least_choice, option) {\n-                if self.sub_concrete_regions(option, least_choice) {\n-                    debug!(\"new least choice\");\n-                    least_choice = option;\n-                } else {\n-                    debug!(\"no least choice\");\n-                    return false;\n-                }\n-            }\n-        }\n-\n-        // (#72087) Different `ty::Regions` can be known to be equal, for\n-        // example, we know that `'a` and `'static` are equal in a function\n-        // with a parameter of type `&'static &'a ()`.\n-        //\n-        // When we have two equal regions like this `expansion` will use\n-        // `lub_concrete_regions` to pick a canonical representative. The same\n-        // choice is needed here so that we don't end up in a cycle of\n-        // `expansion` changing the region one way and the code here changing\n-        // it back.\n-        let lub = self.lub_concrete_regions(least_choice, member_lower_bound);\n-        debug!(\n-            \"enforce_member_constraint: final least choice = {:?}\\nlub = {:?}\",\n-            least_choice, lub\n-        );\n-        if lub != member_lower_bound {\n-            *var_values.value_mut(member_vid) = VarValue::Value(least_choice);\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-\n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n         let mut constraints = IndexVec::from_elem_n(Vec::new(), var_values.values.len());\n         let mut changes = Vec::new();\n@@ -632,34 +499,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n         }\n \n-        // Check that all member constraints are satisfied.\n-        for member_constraint in &self.data.member_constraints {\n-            let member_region = var_data.normalize(self.tcx(), member_constraint.member_region);\n-            let choice_regions = member_constraint\n-                .choice_regions\n-                .iter()\n-                .map(|&choice_region| var_data.normalize(self.tcx(), choice_region));\n-            let fr = &self.region_rels.free_regions;\n-            let sub = |a, b| {\n-                fr.is_free_or_static(a)\n-                    && fr.is_free_or_static(b)\n-                    && fr.sub_free_regions(self.tcx(), a, b)\n-            };\n-            if !choice_regions.clone().any(|choice_region| {\n-                // This is really checking if the regions are equal. After member constraint\n-                // resolution, one region must be equal, or a lifetime has been leaked into\n-                // the hidden type, but does not appear in the corresponding impl trait.\n-                sub(member_region, choice_region) && sub(choice_region, member_region)\n-            }) {\n-                let span = self.tcx().def_span(member_constraint.opaque_type_def_id);\n-                errors.push(RegionResolutionError::MemberConstraintFailure {\n-                    span,\n-                    hidden_ty: member_constraint.hidden_ty,\n-                    member_region,\n-                });\n-            }\n-        }\n-\n         for verify in &self.data.verifys {\n             debug!(\"collect_errors: verify={:?}\", verify);\n             let sub = var_data.normalize(self.tcx(), verify.region);"}, {"sha": "4f32489014d53715c66e648b890026ce5a4d5aad", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -15,7 +15,6 @@ async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> +\n // Only `'a` permitted in return type, not `'b`.\n async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n     //~^ ERROR captures lifetime that does not appear in bounds\n-    //~| ERROR captures lifetime that does not appear in bounds\n     (a, b)\n }\n "}, {"sha": "bcd96367e2fae41dd78fb7e0f4146fc8949bbbcd", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -14,27 +14,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |                                    --                           ^^^^^^^^^^^^^^\n    |                                    |\n-   |                                    hidden type `(&u8, &u8)` captures the lifetime `'b` as defined here\n+   |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n    |\n help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                                                ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:16:65\n-   |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                    --                           ^^^^^^^^^^^^^^\n-   |                                    |\n-   |                                    hidden type `(&u8, &u8)` captures the lifetime `'b` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n-   |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-   |                                                                                ++++\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0623, E0700.\n For more information about an error, try `rustc --explain E0623`."}, {"sha": "60d3409a8accf14989cdca1a5cfe5971c2eac7b9", "filename": "src/test/ui/impl-trait/hidden-lifetimes.nll.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.nll.stderr?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -1,29 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/hidden-lifetimes.rs:28:54\n-   |\n-LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n-   |                 --                                   ^^^^^^^^^^^^^^\n-   |                 |\n-   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n-   |                                                                     ++++\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/hidden-lifetimes.rs:45:70\n-   |\n-LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n-   |                        --                                            ^^^^^^^^^^^^^^\n-   |                        |\n-   |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a + 'b {\n-   |                                                                                     ++++\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "60d3409a8accf14989cdca1a5cfe5971c2eac7b9", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n    |                 --                                   ^^^^^^^^^^^^^^\n    |                 |\n-   |                 hidden type `&mut &'b T` captures the lifetime `'b` as defined here\n+   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n    |\n help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |"}, {"sha": "bfe656c7e2b491ae5f380e880b95f2562d532a95", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -1,16 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n-   |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                     --                                                   ^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n-   |                                                                                             ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "bfe656c7e2b491ae5f380e880b95f2562d532a95", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -2,13 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                                                                          ^^^^^^^^^^^^^^^^^^\n+   |                     --                                                   ^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n-  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                                                                          ^^^^^^^^^^^^^^^^^^\n+LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n+   |                                                                                             ++++\n \n error: aborting due to previous error\n "}, {"sha": "75c2dd8e9d39edea0a964b8582c13032e588b45b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -1,16 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n-   |\n-LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                     --                                       ^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n-   |                                                                                 ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "75c2dd8e9d39edea0a964b8582c13032e588b45b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -2,13 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                                                              ^^^^^^^^^^^^^^^^^^\n+   |                     --                                       ^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n-  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                                                              ^^^^^^^^^^^^^^^^^^\n+LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n+   |                                                                                 ++++\n \n error: aborting due to previous error\n "}, {"sha": "eaf341248a180039bfa806f597de7f692c598a22", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -59,28 +59,28 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               let's call the lifetime of this reference `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n    |                              --                             ^^^^^^^^^^^^^^^^\n    |                              |\n-   |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:37:5: 37:31]` captures the lifetime `'b` as defined here\n+   |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:35:5: 35:31]` captures the lifetime `'b` as defined here\n    |\n help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:40:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "69d2843ff3f01b0f5184ee1c15209d638ad71a53", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -22,7 +22,6 @@ fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n \n fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) } //~ ERROR E0759\n-//~^ ERROR: captures lifetime that does not appear in bounds\n \n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n@@ -33,7 +32,6 @@ fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x } //~ ERRO\n // only 'a was expected.\n fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n     //~^ ERROR: captures lifetime that does not appear in bounds\n-    //~| ERROR: captures lifetime that does not appear in bounds\n     move |_| println!(\"{}\", y)\n }\n "}, {"sha": "d65dea7adc90b40f5f4501382f67d2820162eb52", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -2,25 +2,27 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |                       ^^^^^^^^^\n+   |              ----     ^^^^^^^^^\n+   |              |\n+   |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-note: hidden type `&i32` captures lifetime smaller than the function body\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n-LL | fn elided(x: &i32) -> impl Copy { x }\n-   |                       ^^^^^^^^^\n+LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n+   |                                 ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |                                ^^^^^^^^^\n+   |             --                 ^^^^^^^^^\n+   |             |\n+   |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-note: hidden type `&i32` captures lifetime smaller than the function body\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n    |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |                                ^^^^^^^^^\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n+   |                                          ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n@@ -74,18 +76,6 @@ LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:41\n-   |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |                                         ^^^^^^^^^^\n-   |\n-note: hidden type `&i32` captures lifetime smaller than the function body\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:41\n-   |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |                                         ^^^^^^^^^^\n-\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n    |\n@@ -102,13 +92,13 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:34\n+  --> $DIR/must_outlive_least_region_or_bound.rs:29:34\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -122,31 +112,20 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ~~~~~~~~~~~~\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                                                             ^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:37:5: 37:31]` captures lifetime smaller than the function body\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+   |                              --                             ^^^^^^^^^^^^^^^^\n+   |                              |\n+   |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:35:5: 35:31]` captures the lifetime `'b` as defined here\n    |\n-LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                                                             ^^^^^^^^^^^^^^^^\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                                                             ^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:37:5: 37:31]` captures lifetime smaller than the function body\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n-   |\n-LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                                                             ^^^^^^^^^^^^^^^^\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n+   |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:40:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n@@ -211,7 +190,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ~~~~~~~~~~~~\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0310, E0621, E0700, E0759.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "3d435bd1c3ffd2b2ecc5fbf511f5a123967b7747", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -1,55 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -----     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                         |\n-   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures the anonymous lifetime defined here\n-   |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                                           ++++\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -----     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                         |\n-   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures the anonymous lifetime defined here\n-   |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                                           ++++\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures the lifetime `'a` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                                             ++++\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures the lifetime `'a` as defined here\n-   |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                                             ++++\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "d792c6eafb32f27ea889552ea03bea1b7fbfa288", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -6,15 +6,11 @@ impl A {\n     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n         //~^ ERROR: captures lifetime that does not appear in bounds\n         //~| ERROR: captures lifetime that does not appear in bounds\n-        //~| ERROR: captures lifetime that does not appear in bounds\n-        //~| ERROR: captures lifetime that does not appear in bounds\n         self.x.iter().map(|a| a.0)\n     }\n     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n         //~^ ERROR: captures lifetime that does not appear in bounds\n         //~| ERROR: captures lifetime that does not appear in bounds\n-        //~| ERROR: captures lifetime that does not appear in bounds\n-        //~| ERROR: captures lifetime that does not appear in bounds\n         self.x.iter().map(|a| a.0)\n     }\n }"}, {"sha": "0d68f8c825f70ee87c5b1f7f0b12db64b919ae4e", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 27, "deletions": 71, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -2,98 +2,54 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/static-return-lifetime-infered.rs:6:35\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         -----     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:9:27: 9:34]>` captures the anonymous lifetime defined here\n    |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n+   |                                                           ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:6:35\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         -----     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:9:27: 9:34]>` captures the anonymous lifetime defined here\n    |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:6:35\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n+   |                                                           ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n+  --> $DIR/static-return-lifetime-infered.rs:11:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:14:27: 14:34]>` captures the lifetime `'a` as defined here\n    |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n+help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n+   |                                                             ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n+  --> $DIR/static-return-lifetime-infered.rs:11:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n+   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:14:27: 14:34]>` captures the lifetime `'a` as defined here\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n    |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n-  --> $DIR/static-return-lifetime-infered.rs:13:37\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n+   |                                                             ++++\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0700`."}, {"sha": "953d7cd6a07692630c827bdf67d6e05670579ddc", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -1,16 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -          ^^^^^^^^^^\n-   |                          |\n-   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n-   |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                                ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "a1e7f4aa875eeb749821b7101543863b576081a9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -7,7 +7,6 @@ struct Foo;\n impl Foo {\n     async fn f(self: Pin<&Self>) -> impl Clone { self }\n     //~^ ERROR: captures lifetime that does not appear in bounds\n-    //~| ERROR: captures lifetime that does not appear in bounds\n }\n \n fn main() {"}, {"sha": "953d7cd6a07692630c827bdf67d6e05670579ddc", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -11,19 +11,6 @@ help: to declare that the `impl Trait` captures '_, you can add an explicit `'_`\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                                ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -          ^^^^^^^^^^\n-   |                          |\n-   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n-   |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                                ++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0700`."}, {"sha": "faa1233ffde634335590e0f5730a39c3bd668112", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -1,16 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n-   |\n-LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                    -----      ^^^^^^^^^^\n-   |                    |\n-   |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n-   |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                          ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "faa1233ffde634335590e0f5730a39c3bd668112", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02f2982e72ceca83965ac0bd19ffed196110758/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=b02f2982e72ceca83965ac0bd19ffed196110758", "patch": "@@ -2,13 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                               ^^^^^^^^^^\n+   |                    -----      ^^^^^^^^^^\n+   |                    |\n+   |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n-note: hidden type `Pin<&Foo>` captures lifetime smaller than the function body\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n-LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                               ^^^^^^^^^^\n+LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                          ++++\n \n error: aborting due to previous error\n "}]}