{"sha": "7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNmQ1YzAwZDNmYjRmNTk2M2MzNjhmMzYxYThjNGFmMWQyZDk3MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T16:58:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T16:58:51Z"}, "message": "Auto merge of #4006 - phansch:fix_module_name_repetitions_fp, r=flip1995\n\nFix false positive in module_name_repetitions lint\n\nThis lint was triggering on modules inside expanded attrs, like\nfor example `#[cfg(test)]` and possibly more.\n\nIt was not reporting a location in #3892 because `span.lo()` and `span.hi()` both were 0.\n\nFixes #3892\n\nchangelog: Fix false positive in `module_name_repetitions` lint", "tree": {"sha": "98626be23429b0c7677001fee76e14dbc675d63b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98626be23429b0c7677001fee76e14dbc675d63b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "html_url": "https://github.com/rust-lang/rust/commit/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafbe7f2d9bdf9e94946e3f6f62b781b05b7d556", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafbe7f2d9bdf9e94946e3f6f62b781b05b7d556", "html_url": "https://github.com/rust-lang/rust/commit/cafbe7f2d9bdf9e94946e3f6f62b781b05b7d556"}, {"sha": "850c24edd3a97d0b2e905fdc4aab079b17c9bb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/850c24edd3a97d0b2e905fdc4aab079b17c9bb71", "html_url": "https://github.com/rust-lang/rust/commit/850c24edd3a97d0b2e905fdc4aab079b17c9bb71"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "3f62a02b4573003cc98cb95394f2aa4f30793516", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "patch": "@@ -2,8 +2,8 @@\n \n use crate::reexport::*;\n use crate::utils::{\n-    in_macro, last_line_of_span, paths, snippet_opt, span_lint, span_lint_and_sugg, span_lint_and_then,\n-    without_block_comments,\n+    in_macro, is_present_in_source, last_line_of_span, paths, snippet_opt, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n@@ -481,20 +481,6 @@ fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n     }\n }\n \n-// If the snippet is empty, it's an attribute that was inserted during macro\n-// expansion and we want to ignore those, because they could come from external\n-// sources that the user has no control over.\n-// For some reason these attributes don't have any expansion info on them, so\n-// we have to check it this way until there is a better way.\n-fn is_present_in_source(cx: &LateContext<'_, '_>, span: Span) -> bool {\n-    if let Some(snippet) = snippet_opt(cx, span) {\n-        if snippet.is_empty() {\n-            return false;\n-        }\n-    }\n-    true\n-}\n-\n declare_lint_pass!(DeprecatedCfgAttribute => [DEPRECATED_CFG_ATTR]);\n \n impl EarlyLintPass for DeprecatedCfgAttribute {"}, {"sha": "27229710641dfbad7d0ecd5dc325435fd369112f", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "patch": "@@ -1,6 +1,6 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use crate::utils::{camel_case, in_macro};\n+use crate::utils::{camel_case, in_macro, is_present_in_source};\n use crate::utils::{span_help_and_lint, span_lint};\n use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n@@ -244,7 +244,7 @@ impl EarlyLintPass for EnumVariantNames {\n         let item_name = item.ident.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n-        if !in_macro(item.span) {\n+        if !in_macro(item.span) && is_present_in_source(cx, item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n                 if !mod_camel.is_empty() {"}, {"sha": "31f6658b4e8ba43e8e738d1b2aa3cac3b941b011", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "patch": "@@ -93,6 +93,20 @@ pub fn in_macro(span: Span) -> bool {\n     span.ctxt().outer().expn_info().is_some()\n }\n \n+// If the snippet is empty, it's an attribute that was inserted during macro\n+// expansion and we want to ignore those, because they could come from external\n+// sources that the user has no control over.\n+// For some reason these attributes don't have any expansion info on them, so\n+// we have to check it this way until there is a better way.\n+pub fn is_present_in_source<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n+    if let Some(snippet) = snippet_opt(cx, span) {\n+        if snippet.is_empty() {\n+            return false;\n+        }\n+    }\n+    true\n+}\n+\n /// Checks if type is struct, enum or union type with the given def path.\n pub fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.sty {"}, {"sha": "669bf01a84c1067f0eb9222c286abc64fb3f7fcf", "filename": "tests/ui/module_name_repetitions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/tests%2Fui%2Fmodule_name_repetitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/tests%2Fui%2Fmodule_name_repetitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_name_repetitions.rs?ref=7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: --test\n+\n #![warn(clippy::module_name_repetitions)]\n #![allow(dead_code)]\n \n@@ -13,4 +15,12 @@ mod foo {\n     pub struct Foobar;\n }\n \n+#[cfg(test)]\n+mod test {\n+    #[test]\n+    fn it_works() {\n+        assert_eq!(2 + 2, 4);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "bdd217a969c05acfcee5efe23b2e111b72451b62", "filename": "tests/ui/module_name_repetitions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/tests%2Fui%2Fmodule_name_repetitions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c/tests%2Fui%2Fmodule_name_repetitions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_name_repetitions.stderr?ref=7a6d5c00d3fb4f5963c368f361a8c4af1d2d970c", "patch": "@@ -1,31 +1,31 @@\n error: item name starts with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:6:5\n+  --> $DIR/module_name_repetitions.rs:8:5\n    |\n LL |     pub fn foo_bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::module-name-repetitions` implied by `-D warnings`\n \n error: item name ends with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:7:5\n+  --> $DIR/module_name_repetitions.rs:9:5\n    |\n LL |     pub fn bar_foo() {}\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: item name starts with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:8:5\n+  --> $DIR/module_name_repetitions.rs:10:5\n    |\n LL |     pub struct FooCake {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: item name ends with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:9:5\n+  --> $DIR/module_name_repetitions.rs:11:5\n    |\n LL |     pub enum CakeFoo {}\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: item name starts with its containing module's name\n-  --> $DIR/module_name_repetitions.rs:10:5\n+  --> $DIR/module_name_repetitions.rs:12:5\n    |\n LL |     pub struct Foo7Bar;\n    |     ^^^^^^^^^^^^^^^^^^^"}]}