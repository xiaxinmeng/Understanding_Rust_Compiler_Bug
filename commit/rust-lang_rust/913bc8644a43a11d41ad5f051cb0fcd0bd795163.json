{"sha": "913bc8644a43a11d41ad5f051cb0fcd0bd795163", "node_id": "C_kwDOAAsO6NoAKDkxM2JjODY0NGE0M2ExMWQ0MWFkNWYwNTFjYjBmY2QwYmQ3OTUxNjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-01T09:48:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T09:48:57Z"}, "message": "Rollup merge of #92460 - dwrensha:fix-92267, r=petrochenkov\n\n[rustc_builtin_macros] add indices to format_foreign::printf::Substitution::Escape\n\nFixes #92267.\n\nThe problem was that the escape string \"%%\" does not need to appear at the very beginning of the format string, but\nthe iterator implementation assumed that it did.\n\nThe solution follows the pattern used by `format_foregin::shell::Subtitution::Escape`: https://github.com/rust-lang/rust/blob/8ed935e92dfb09ae388344b12284bf5110cf9265/compiler/rustc_builtin_macros/src/format_foreign.rs#L629", "tree": {"sha": "a9b1ad6dd4fbbf085ad1dd35de1d2c76ec09f771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9b1ad6dd4fbbf085ad1dd35de1d2c76ec09f771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913bc8644a43a11d41ad5f051cb0fcd0bd795163", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0COKCRBK7hj4Ov3rIwAAPS4IAJGHPFemfvXNW6TtcHj3YnuJ\nYKkNgqTGAIHWS4M7QZCh2oScSvoC0mY1QCcaTmoxve2L+JoEEOv/nCV4+T/fLs5z\n+iomxru/Y9lUkUJuAaEP2QwDwWl2r75dMRZVeV9e98r3NrgBlqCOJsYqyUs3wS6R\nL3pN5hvDx7k4/s7thqPiHpFE7Ir/OPv/Qt1BvoymnV65s+w5A9TTHr/t4kJ480wH\nh5X93u5HBNJ3yn+PvTtghJuJE2xQNRjUEL6Yctrii5fvJhAuj2QRf08rxDlUBpKG\nxbhH8NaEIwIbfnqWaQiuw9j5ykF8hGLXeTyScA3lW/Qvw/EeHNOIKrS2rZestMo=\n=rtcL\n-----END PGP SIGNATURE-----\n", "payload": "tree a9b1ad6dd4fbbf085ad1dd35de1d2c76ec09f771\nparent a76128b365f59511447a86268b0fde57d5d4d0df\nparent 4a7f276cb67673ad2550ee7ef91caa0706565679\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641030537 +0100\ncommitter GitHub <noreply@github.com> 1641030537 +0100\n\nRollup merge of #92460 - dwrensha:fix-92267, r=petrochenkov\n\n[rustc_builtin_macros] add indices to format_foreign::printf::Substitution::Escape\n\nFixes #92267.\n\nThe problem was that the escape string \"%%\" does not need to appear at the very beginning of the format string, but\nthe iterator implementation assumed that it did.\n\nThe solution follows the pattern used by `format_foregin::shell::Subtitution::Escape`: https://github.com/rust-lang/rust/blob/8ed935e92dfb09ae388344b12284bf5110cf9265/compiler/rustc_builtin_macros/src/format_foreign.rs#L629\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913bc8644a43a11d41ad5f051cb0fcd0bd795163", "html_url": "https://github.com/rust-lang/rust/commit/913bc8644a43a11d41ad5f051cb0fcd0bd795163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913bc8644a43a11d41ad5f051cb0fcd0bd795163/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76128b365f59511447a86268b0fde57d5d4d0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76128b365f59511447a86268b0fde57d5d4d0df", "html_url": "https://github.com/rust-lang/rust/commit/a76128b365f59511447a86268b0fde57d5d4d0df"}, {"sha": "4a7f276cb67673ad2550ee7ef91caa0706565679", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7f276cb67673ad2550ee7ef91caa0706565679", "html_url": "https://github.com/rust-lang/rust/commit/4a7f276cb67673ad2550ee7ef91caa0706565679"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "ecd16736e7c302e4a518113e20d0c29604b5d718", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/913bc8644a43a11d41ad5f051cb0fcd0bd795163/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913bc8644a43a11d41ad5f051cb0fcd0bd795163/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=913bc8644a43a11d41ad5f051cb0fcd0bd795163", "patch": "@@ -7,28 +7,29 @@ pub(crate) mod printf {\n     pub enum Substitution<'a> {\n         /// A formatted output substitution with its internal byte offset.\n         Format(Format<'a>),\n-        /// A literal `%%` escape.\n-        Escape,\n+        /// A literal `%%` escape, with its start and end indices.\n+        Escape((usize, usize)),\n     }\n \n     impl<'a> Substitution<'a> {\n         pub fn as_str(&self) -> &str {\n             match *self {\n                 Substitution::Format(ref fmt) => fmt.span,\n-                Substitution::Escape => \"%%\",\n+                Substitution::Escape(_) => \"%%\",\n             }\n         }\n \n         pub fn position(&self) -> Option<InnerSpan> {\n             match *self {\n                 Substitution::Format(ref fmt) => Some(fmt.position),\n-                _ => None,\n+                Substitution::Escape((start, end)) => Some(InnerSpan::new(start, end)),\n             }\n         }\n \n         pub fn set_position(&mut self, start: usize, end: usize) {\n-            if let Substitution::Format(ref mut fmt) = self {\n-                fmt.position = InnerSpan::new(start, end);\n+            match self {\n+                Substitution::Format(ref mut fmt) => fmt.position = InnerSpan::new(start, end),\n+                Substitution::Escape(ref mut pos) => *pos = (start, end),\n             }\n         }\n \n@@ -39,7 +40,7 @@ pub(crate) mod printf {\n         pub fn translate(&self) -> Result<String, Option<String>> {\n             match *self {\n                 Substitution::Format(ref fmt) => fmt.translate(),\n-                Substitution::Escape => Err(None),\n+                Substitution::Escape(_) => Err(None),\n             }\n         }\n     }\n@@ -304,14 +305,9 @@ pub(crate) mod printf {\n         fn next(&mut self) -> Option<Self::Item> {\n             let (mut sub, tail) = parse_next_substitution(self.s)?;\n             self.s = tail;\n-            match sub {\n-                Substitution::Format(_) => {\n-                    if let Some(inner_span) = sub.position() {\n-                        sub.set_position(inner_span.start + self.pos, inner_span.end + self.pos);\n-                        self.pos += inner_span.end;\n-                    }\n-                }\n-                Substitution::Escape => self.pos += 2,\n+            if let Some(InnerSpan { start, end }) = sub.position() {\n+                sub.set_position(start + self.pos, end + self.pos);\n+                self.pos += end;\n             }\n             Some(sub)\n         }\n@@ -340,7 +336,7 @@ pub(crate) mod printf {\n         let at = {\n             let start = s.find('%')?;\n             if let '%' = s[start + 1..].chars().next()? {\n-                return Some((Substitution::Escape, &s[start + 2..]));\n+                return Some((Substitution::Escape((start, start + 2)), &s[start + 2..]));\n             }\n \n             Cur::new_at(s, start)"}, {"sha": "fc7442470ac82a85ada490cd9555bc3be920017d", "filename": "compiler/rustc_builtin_macros/src/format_foreign/printf/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913bc8644a43a11d41ad5f051cb0fcd0bd795163/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913bc8644a43a11d41ad5f051cb0fcd0bd795163/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs?ref=913bc8644a43a11d41ad5f051cb0fcd0bd795163", "patch": "@@ -13,9 +13,9 @@ macro_rules! assert_eq_pnsat {\n fn test_escape() {\n     assert_eq!(pns(\"has no escapes\"), None);\n     assert_eq!(pns(\"has no escapes, either %\"), None);\n-    assert_eq!(pns(\"*so* has a %% escape\"), Some((S::Escape, \" escape\")));\n-    assert_eq!(pns(\"%% leading escape\"), Some((S::Escape, \" leading escape\")));\n-    assert_eq!(pns(\"trailing escape %%\"), Some((S::Escape, \"\")));\n+    assert_eq!(pns(\"*so* has a %% escape\"), Some((S::Escape((11, 13)), \" escape\")));\n+    assert_eq!(pns(\"%% leading escape\"), Some((S::Escape((0, 2)), \" leading escape\")));\n+    assert_eq!(pns(\"trailing escape %%\"), Some((S::Escape((16, 18)), \"\")));\n }\n \n #[test]"}, {"sha": "f1daaeb743e83ec8e93b83e489d2f0da426d3d97", "filename": "src/test/ui/macros/issue-92267.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/913bc8644a43a11d41ad5f051cb0fcd0bd795163/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913bc8644a43a11d41ad5f051cb0fcd0bd795163/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.rs?ref=913bc8644a43a11d41ad5f051cb0fcd0bd795163", "patch": "@@ -0,0 +1,3 @@\n+// check-fail\n+\n+pub fn main() { println!(\"\ud83e\udd80%%%\", 0) } //~ ERROR argument never used"}, {"sha": "d2d66c81198ec71d429632c4ebb0d3e690cf7f86", "filename": "src/test/ui/macros/issue-92267.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/913bc8644a43a11d41ad5f051cb0fcd0bd795163/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913bc8644a43a11d41ad5f051cb0fcd0bd795163/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr?ref=913bc8644a43a11d41ad5f051cb0fcd0bd795163", "patch": "@@ -0,0 +1,16 @@\n+error: argument never used\n+  --> $DIR/issue-92267.rs:3:34\n+   |\n+LL | pub fn main() { println!(\"\ud83e\udd80%%%\", 0) }\n+   |                                   ^ argument never used\n+   |\n+note: format specifiers use curly braces, and the conversion specifier `\n+      ` is unknown or unsupported\n+  --> $DIR/issue-92267.rs:3:30\n+   |\n+LL | pub fn main() { println!(\"\ud83e\udd80%%%\", 0) }\n+   |                               ^^\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+\n+error: aborting due to previous error\n+"}]}