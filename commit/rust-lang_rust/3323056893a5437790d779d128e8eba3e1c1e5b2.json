{"sha": "3323056893a5437790d779d128e8eba3e1c1e5b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjMwNTY4OTNhNTQzNzc5MGQ3NzlkMTI4ZThlYmEzZTFjMWU1YjI=", "commit": {"author": {"name": "Igor Gnatenko", "email": "ignatenko@redhat.com", "date": "2017-02-26T14:09:09Z"}, "committer": {"name": "Igor Gnatenko", "email": "ignatenko@redhat.com", "date": "2017-02-26T14:09:31Z"}, "message": "bump regex to 0.2\n\nSigned-off-by: Igor Gnatenko <ignatenko@redhat.com>", "tree": {"sha": "9f1f2466da56441b8042e1159f3b2632568984cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1f2466da56441b8042e1159f3b2632568984cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3323056893a5437790d779d128e8eba3e1c1e5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3323056893a5437790d779d128e8eba3e1c1e5b2", "html_url": "https://github.com/rust-lang/rust/commit/3323056893a5437790d779d128e8eba3e1c1e5b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3323056893a5437790d779d128e8eba3e1c1e5b2/comments", "author": null, "committer": null, "parents": [{"sha": "b9dfd29ce656565fba8905bad8decb804300fcbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9dfd29ce656565fba8905bad8decb804300fcbb", "html_url": "https://github.com/rust-lang/rust/commit/b9dfd29ce656565fba8905bad8decb804300fcbb"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "049f85134d641cf87976d44416ae3845417d5b27", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3323056893a5437790d779d128e8eba3e1c1e5b2/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3323056893a5437790d779d128e8eba3e1c1e5b2/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3323056893a5437790d779d128e8eba3e1c1e5b2", "patch": "@@ -19,7 +19,7 @@ cargo-fmt = []\n toml = \"0.2.1\"\n rustc-serialize = \"0.3\"\n unicode-segmentation = \"1.0.0\"\n-regex = \"0.1\"\n+regex = \"0.2\"\n term = \"0.4\"\n strings = \"0.0.1\"\n diff = \"0.1\""}, {"sha": "8f51b09b6cc067240e85857121ad9cd950e5bad5", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3323056893a5437790d779d128e8eba3e1c1e5b2/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3323056893a5437790d779d128e8eba3e1c1e5b2/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=3323056893a5437790d779d128e8eba3e1c1e5b2", "patch": "@@ -32,7 +32,7 @@ pub struct StringFormat<'a> {\n // FIXME: simplify this!\n pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String> {\n     // Strip line breaks.\n-    let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][:space:]*\").unwrap();\n+    let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*\").unwrap();\n     let stripped_str = re.replace_all(orig, \"$1\");\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();"}, {"sha": "257b1ec46bf9640051318d21382e08eb2fccb5cf", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3323056893a5437790d779d128e8eba3e1c1e5b2/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3323056893a5437790d779d128e8eba3e1c1e5b2/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=3323056893a5437790d779d128e8eba3e1c1e5b2", "patch": "@@ -300,8 +300,8 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n                         regex.captures_iter(&line).next().map(|capture| {\n-                (capture.at(1).expect(\"Couldn't unwrap capture\").to_owned(),\n-                 capture.at(2).expect(\"Couldn't unwrap capture\").to_owned())\n+                (capture.get(1).expect(\"Couldn't unwrap capture\").as_str().to_owned(),\n+                 capture.get(2).expect(\"Couldn't unwrap capture\").as_str().to_owned())\n             })\n                     })\n         .collect()"}]}