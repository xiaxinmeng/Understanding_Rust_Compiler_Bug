{"sha": "d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c", "node_id": "C_kwDOAAsO6NoAKGQ2ZDhhMWMxOGYyOWFkNjQwMmY5NTk0ZTM5MDhjYmI2ZDgwYWEzMWM", "commit": {"author": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-04T13:28:25Z"}, "committer": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-04T13:28:25Z"}, "message": "Shortened fixup for match, added cases for for\n\nPreviously added a blank _ => {} for match statements", "tree": {"sha": "ecb2ccc7292b237d4e49ca5e0ad50533f9d1b880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb2ccc7292b237d4e49ca5e0ad50533f9d1b880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c", "html_url": "https://github.com/rust-lang/rust/commit/d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c/comments", "author": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef2eabbfa84fb11deda705df724b28ef3431256c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2eabbfa84fb11deda705df724b28ef3431256c", "html_url": "https://github.com/rust-lang/rust/commit/ef2eabbfa84fb11deda705df724b28ef3431256c"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "58d73f2d6c0168d8910e7d2afdb4a8d1c9f15572", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=d6d8a1c18f29ad6402f9594e3908cbb6d80aa31c", "patch": "@@ -211,30 +211,6 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                     if it.match_arm_list().is_none() {\n                         // No match arms\n                         append.insert(node.clone().into(), vec![\n-                            SyntheticToken {\n-                                kind: SyntaxKind::L_CURLY,\n-                                text: \"{\".into(),\n-                                range: end_range,\n-                                id: EMPTY_ID,\n-                            },\n-                            SyntheticToken {\n-                                kind: SyntaxKind::UNDERSCORE,\n-                                text: \"_\".into(),\n-                                range: end_range,\n-                                id: EMPTY_ID\n-                            },\n-                            SyntheticToken {\n-                                kind: SyntaxKind::EQ,\n-                                text: \"=\".into(),\n-                                range: end_range,\n-                                id: EMPTY_ID\n-                            },\n-                            SyntheticToken {\n-                                kind: SyntaxKind::R_ANGLE,\n-                                text: \">\".into(),\n-                                range: end_range,\n-                                id: EMPTY_ID\n-                            },\n                             SyntheticToken {\n                                 kind: SyntaxKind::L_CURLY,\n                                 text: \"{\".into(),\n@@ -247,12 +223,6 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                                 range: end_range,\n                                 id: EMPTY_ID,\n                             },\n-                            SyntheticToken {\n-                                kind: SyntaxKind::R_CURLY,\n-                                text: \"}\".into(),\n-                                range: end_range,\n-                                id: EMPTY_ID,\n-                            },\n                         ]);\n                     }\n                 },\n@@ -270,11 +240,12 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n \n                     if it.pat().is_none() && it.in_token().is_none() && it.iterable().is_none() {\n                         append.insert(for_token.into(), vec![pat, in_token, iter]);\n+                    } else if it.pat().is_none() {\n+                        append.insert(for_token.into(), vec![pat]);\n+                    } else if it.pat().is_none() && it.in_token().is_none() {\n+                        append.insert(for_token.into(), vec![pat, in_token]);\n                     }\n \n-                    // Tricky: add logic to add in just a pattern or iterable if not all\n-                    // the pieces are missing\n-\n                     if it.loop_body().is_none() {\n                         append.insert(node.clone().into(), vec![\n                             SyntheticToken {\n@@ -398,6 +369,18 @@ fn foo () {for _ in __ra_fixup {}}\n         )\n     }\n \n+    fn for_no_iter_no_in() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for _ {}\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for _ in __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n     #[test]\n     fn for_no_iter() {\n         check(\n@@ -435,7 +418,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-fn foo () {match __ra_fixup {_ => {}}}\n+fn foo () {match __ra_fixup {}}\n \"#]],\n         )\n     }\n@@ -467,7 +450,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-fn foo () {match __ra_fixup {_ => {}}}\n+fn foo () {match __ra_fixup {}}\n \"#]],\n         )\n     }"}]}