{"sha": "f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Zjc2ZTYwYjNjNGIwZjUyY2FlY2M1ZTUyZjllZTdmMjRiN2QwNTA=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-01T21:56:48Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-06-01T20:28:59Z"}, "message": "Reland - Report coverage `0` of dead blocks\n\nFixes: #84018\n\nWith `-Z instrument-coverage`, coverage reporting of dead blocks\n(for example, blocks dropped because a conditional branch is dropped,\nbased on const evaluation) is now supported.\n\nNote, this PR relands an earlier, reverted PR that failed when compiling\ngenerators. The prior issues with generators has been resolved and a new\ntest was added to prevent future regressions.\n\nCheck out the resulting changes to test coverage of dead blocks in the\ntest coverage reports in this PR.", "tree": {"sha": "bf984cee99db1780fe335bcd6b4ef71a5a704dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf984cee99db1780fe335bcd6b4ef71a5a704dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "html_url": "https://github.com/rust-lang/rust/commit/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9ab0300cd66f6f616e03ea90b2d71af474bf28", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9ab0300cd66f6f616e03ea90b2d71af474bf28", "html_url": "https://github.com/rust-lang/rust/commit/7f9ab0300cd66f6f616e03ea90b2d71af474bf28"}], "stats": {"total": 281, "additions": 216, "deletions": 65}, "files": [{"sha": "c1dfe1ef85600d63dd9441a1bd2e49094c4af13d", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -28,6 +28,7 @@ pub struct Expression {\n /// only whitespace or comments). According to LLVM Code Coverage Mapping documentation, \"A count\n /// for a gap area is only used as the line execution count if there are no other regions on a\n /// line.\"\n+#[derive(Debug)]\n pub struct FunctionCoverage<'tcx> {\n     instance: Instance<'tcx>,\n     source_hash: u64,\n@@ -113,6 +114,14 @@ impl<'tcx> FunctionCoverage<'tcx> {\n             expression_id, lhs, op, rhs, region\n         );\n         let expression_index = self.expression_index(u32::from(expression_id));\n+        debug_assert!(\n+            expression_index.as_usize() < self.expressions.len(),\n+            \"expression_index {} is out of range for expressions.len() = {}\n+            for {:?}\",\n+            expression_index.as_usize(),\n+            self.expressions.len(),\n+            self,\n+        );\n         if let Some(previous_expression) = self.expressions[expression_index].replace(Expression {\n             lhs,\n             op,"}, {"sha": "ba10b54c5ae2e37fa579dc694bcfb35a79d50e1f", "filename": "compiler/rustc_mir/src/transform/const_goto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_goto.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> MirPass<'tcx> for ConstGoto {\n         // if we applied optimizations, we potentially have some cfg to cleanup to\n         // make it easier for further passes\n         if should_simplify {\n-            simplify_cfg(body);\n+            simplify_cfg(tcx, body);\n             simplify_locals(body, tcx);\n         }\n     }"}, {"sha": "912505c65983edb8f06df2ef6fe0016035ef90db", "filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -26,7 +26,7 @@ impl<'tcx> MirPass<'tcx> for DeduplicateBlocks {\n         if has_opts_to_apply {\n             let mut opt_applier = OptApplier { tcx, duplicates };\n             opt_applier.visit_body(body);\n-            simplify_cfg(body);\n+            simplify_cfg(tcx, body);\n         }\n     }\n }"}, {"sha": "07127042fa41e82b31ba7b35d7718b6e45480729", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n         // Since this optimization adds new basic blocks and invalidates others,\n         // clean up the cfg to make it nicer for other passes\n         if should_cleanup {\n-            simplify_cfg(body);\n+            simplify_cfg(tcx, body);\n         }\n     }\n }"}, {"sha": "3560b4b1e8645e77ed17488ac8ba954b9ea4c28c", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -964,7 +964,7 @@ fn create_generator_drop_shim<'tcx>(\n \n     // Make sure we remove dead blocks to remove\n     // unrelated code from the resume part of the function\n-    simplify::remove_dead_blocks(&mut body);\n+    simplify::remove_dead_blocks(tcx, &mut body);\n \n     dump_mir(tcx, None, \"generator_drop\", &0, &body, |_, _| Ok(()));\n \n@@ -1137,7 +1137,7 @@ fn create_generator_resume_function<'tcx>(\n \n     // Make sure we remove dead blocks to remove\n     // unrelated code from the drop part of the function\n-    simplify::remove_dead_blocks(body);\n+    simplify::remove_dead_blocks(tcx, body);\n \n     dump_mir(tcx, None, \"generator_resume\", &0, body, |_, _| Ok(()));\n }"}, {"sha": "f1c95a84ade85a04800a9af36440ba28429fbe6d", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MirPass<'tcx> for Inline {\n         if inline(tcx, body) {\n             debug!(\"running simplify cfg on {:?}\", body.source);\n             CfgSimplifier::new(body).simplify();\n-            remove_dead_blocks(body);\n+            remove_dead_blocks(tcx, body);\n         }\n     }\n }"}, {"sha": "21b208a08c2dca13cad206c4c28bf986187f3e43", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -167,7 +167,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n         }\n \n         if should_cleanup {\n-            simplify_cfg(body);\n+            simplify_cfg(tcx, body);\n         }\n     }\n }"}, {"sha": "cd2db180552868c681f5bf862da1b988b43f9375", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -38,6 +38,6 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n             }\n         }\n \n-        simplify::remove_dead_blocks(body)\n+        simplify::remove_dead_blocks(tcx, body)\n     }\n }"}, {"sha": "02e45021a0aaf343fe3f73173934dbbead3e9f0d", "filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n         // if we applied optimizations, we potentially have some cfg to cleanup to\n         // make it easier for further passes\n         if should_simplify {\n-            simplify_cfg(body);\n+            simplify_cfg(tcx, body);\n         }\n     }\n }"}, {"sha": "7aebca77e6f2090562816b78a0ab8ee2c1ea4c91", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 80, "deletions": 5, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -29,6 +29,7 @@\n \n use crate::transform::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n@@ -46,9 +47,9 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(body: &mut Body<'_>) {\n+pub fn simplify_cfg(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n     CfgSimplifier::new(body).simplify();\n-    remove_dead_blocks(body);\n+    remove_dead_blocks(tcx, body);\n \n     // FIXME: Should probably be moved into some kind of pass manager\n     body.basic_blocks_mut().raw.shrink_to_fit();\n@@ -59,9 +60,9 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body.source);\n-        simplify_cfg(body);\n+        simplify_cfg(tcx, body);\n     }\n }\n \n@@ -286,7 +287,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(body: &mut Body<'_>) {\n+pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n     let reachable = traversal::reachable_as_bitset(body);\n     let num_blocks = body.basic_blocks().len();\n     if num_blocks == reachable.count() {\n@@ -306,6 +307,11 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n         }\n         used_blocks += 1;\n     }\n+\n+    if tcx.sess.instrument_coverage() {\n+        save_unreachable_coverage(basic_blocks, used_blocks);\n+    }\n+\n     basic_blocks.raw.truncate(used_blocks);\n \n     for block in basic_blocks {\n@@ -315,6 +321,75 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n     }\n }\n \n+/// Some MIR transforms can determine at compile time that a sequences of\n+/// statements will never be executed, so they can be dropped from the MIR.\n+/// For example, an `if` or `else` block that is guaranteed to never be executed\n+/// because its condition can be evaluated at compile time, such as by const\n+/// evaluation: `if false { ... }`.\n+///\n+/// Those statements are bypassed by redirecting paths in the CFG around the\n+/// `dead blocks`; but with `-Z instrument-coverage`, the dead blocks usually\n+/// include `Coverage` statements representing the Rust source code regions to\n+/// be counted at runtime. Without these `Coverage` statements, the regions are\n+/// lost, and the Rust source code will show no coverage information.\n+///\n+/// What we want to show in a coverage report is the dead code with coverage\n+/// counts of `0`. To do this, we need to save the code regions, by injecting\n+/// `Unreachable` coverage statements. These are non-executable statements whose\n+/// code regions are still recorded in the coverage map, representing regions\n+/// with `0` executions.\n+fn save_unreachable_coverage(\n+    basic_blocks: &mut IndexVec<BasicBlock, BasicBlockData<'_>>,\n+    first_dead_block: usize,\n+) {\n+    let has_live_counters = basic_blocks.raw[0..first_dead_block].iter().any(|live_block| {\n+        live_block.statements.iter().any(|statement| {\n+            if let StatementKind::Coverage(coverage) = &statement.kind {\n+                matches!(coverage.kind, CoverageKind::Counter { .. })\n+            } else {\n+                false\n+            }\n+        })\n+    });\n+    if !has_live_counters {\n+        // If there are no live `Counter` `Coverage` statements anymore, don't\n+        // move dead coverage to the `START_BLOCK`. Just allow the dead\n+        // `Coverage` statements to be dropped with the dead blocks.\n+        //\n+        // The `generator::StateTransform` MIR pass can create atypical\n+        // conditions, where all live `Counter`s are dropped from the MIR.\n+        //\n+        // At least one Counter per function is required by LLVM (and necessary,\n+        // to add the `function_hash` to the counter's call to the LLVM\n+        // intrinsic `instrprof.increment()`).\n+        return;\n+    }\n+\n+    // Retain coverage info for dead blocks, so coverage reports will still\n+    // report `0` executions for the uncovered code regions.\n+    let mut dropped_coverage = Vec::new();\n+    for dead_block in basic_blocks.raw[first_dead_block..].iter() {\n+        for statement in dead_block.statements.iter() {\n+            if let StatementKind::Coverage(coverage) = &statement.kind {\n+                if let Some(code_region) = &coverage.code_region {\n+                    dropped_coverage.push((statement.source_info, code_region.clone()));\n+                }\n+            }\n+        }\n+    }\n+\n+    let start_block = &mut basic_blocks[START_BLOCK];\n+    for (source_info, code_region) in dropped_coverage {\n+        start_block.statements.push(Statement {\n+            source_info,\n+            kind: StatementKind::Coverage(box Coverage {\n+                kind: CoverageKind::Unreachable,\n+                code_region: Some(code_region),\n+            }),\n+        })\n+    }\n+}\n+\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {"}, {"sha": "dd2ec39c066ab31844b9b031ed34428375290fb0", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -558,7 +558,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n \n         if did_remove_blocks {\n             // We have dead blocks now, so remove those.\n-            simplify::remove_dead_blocks(body);\n+            simplify::remove_dead_blocks(tcx, body);\n         }\n     }\n }"}, {"sha": "e7fb6b4f6b4ade858cf5210480c5a4aece8647d9", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -60,7 +60,7 @@ impl MirPass<'_> for UnreachablePropagation {\n         }\n \n         if replaced {\n-            simplify::remove_dead_blocks(body);\n+            simplify::remove_dead_blocks(tcx, body);\n         }\n     }\n }"}, {"sha": "dc06a485a8fc124bd26a7779b81c9bd0ebd1dbef", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async2.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async2.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async2.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async2.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -12,6 +12,7 @@\n    12|      1|    if b {\n    13|      1|        println!(\"non_async_func println in block\");\n    14|      1|    }\n+                   ^0\n    15|      1|}\n    16|       |\n    17|       |"}, {"sha": "2d8a98a5d0c92f6a19ebc1c7b3fa63a63515f57c", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.conditions.txt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.conditions.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -5,6 +5,7 @@\n     5|      1|    if true {\n     6|      1|        countdown = 10;\n     7|      1|    }\n+                   ^0\n     8|       |\n     9|       |    const B: u32 = 100;\n    10|      1|    let x = if countdown > 7 {\n@@ -24,6 +25,7 @@\n    24|      1|    if true {\n    25|      1|        countdown = 10;\n    26|      1|    }\n+                   ^0\n    27|       |\n    28|      1|    if countdown > 7 {\n    29|      1|        countdown -= 4;\n@@ -42,6 +44,7 @@\n    41|      1|        if true {\n    42|      1|            countdown = 10;\n    43|      1|        }\n+                       ^0\n    44|       |\n    45|      1|        if countdown > 7 {\n    46|      1|            countdown -= 4;\n@@ -54,13 +57,14 @@\n    53|       |        } else {\n    54|      0|            return;\n    55|       |        }\n-   56|       |    } // Note: closing brace shows uncovered (vs. `0` for implicit else) because condition literal\n-   57|       |      // `true` was const-evaluated. The compiler knows the `if` block will be executed.\n+   56|      0|    }\n+   57|       |\n    58|       |\n    59|      1|    let mut countdown = 0;\n    60|      1|    if true {\n    61|      1|        countdown = 1;\n    62|      1|    }\n+                   ^0\n    63|       |\n    64|      1|    let z = if countdown > 7 {\n                       ^0"}, {"sha": "7ae0e978808e7e7c717422a44ed141ae1e43b37d", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.doctest.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -9,7 +9,7 @@\n     8|      1|//!     assert_eq!(1, 1);\n     9|       |//! } else {\n    10|       |//!     // this is not!\n-   11|       |//!     assert_eq!(1, 2);\n+   11|      0|//!     assert_eq!(1, 2);\n    12|       |//! }\n    13|      1|//! ```\n    14|       |//!\n@@ -84,7 +84,7 @@\n    74|      1|    if true {\n    75|      1|        assert_eq!(1, 1);\n    76|       |    } else {\n-   77|       |        assert_eq!(1, 2);\n+   77|      0|        assert_eq!(1, 2);\n    78|       |    }\n    79|      1|}\n    80|       |"}, {"sha": "fe6a9e93cbf710ab516bdc1e2b283ed7ffae99eb", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.drop_trait.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.drop_trait.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -19,11 +19,11 @@\n    19|      1|    if true {\n    20|      1|        println!(\"Exiting with error...\");\n    21|      1|        return Err(1);\n-   22|       |    }\n-   23|       |\n-   24|       |    let _ = Firework { strength: 1000 };\n-   25|       |\n-   26|       |    Ok(())\n+   22|      0|    }\n+   23|      0|\n+   24|      0|    let _ = Firework { strength: 1000 };\n+   25|      0|\n+   26|      0|    Ok(())\n    27|      1|}\n    28|       |\n    29|       |// Expected program output:"}, {"sha": "0fb3808ff2e30d33359a29183fc59ec2dc1fb937", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.generator.txt", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generator.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generator.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generator.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -0,0 +1,32 @@\n+    1|       |#![feature(generators, generator_trait)]\n+    2|       |\n+    3|       |use std::ops::{Generator, GeneratorState};\n+    4|       |use std::pin::Pin;\n+    5|       |\n+    6|       |// The following implementation of a function called from a `yield` statement\n+    7|       |// (apparently requiring the Result and the `String` type or constructor)\n+    8|       |// creates conditions where the `generator::StateTransform` MIR transform will\n+    9|       |// drop all `Counter` `Coverage` statements from a MIR. `simplify.rs` has logic\n+   10|       |// to handle this condition, and still report dead block coverage.\n+   11|      1|fn get_u32(val: bool) -> Result<u32, String> {\n+   12|      1|    if val { Ok(1) } else { Err(String::from(\"some error\")) }\n+                                          ^0\n+   13|      1|}\n+   14|       |\n+   15|      1|fn main() {\n+   16|      1|    let is_true = std::env::args().len() == 1;\n+   17|      1|    let mut generator = || {\n+   18|      1|        yield get_u32(is_true);\n+   19|      1|        return \"foo\";\n+   20|      1|    };\n+   21|       |\n+   22|      1|    match Pin::new(&mut generator).resume(()) {\n+   23|      1|        GeneratorState::Yielded(Ok(1)) => {}\n+   24|      0|        _ => panic!(\"unexpected return from resume\"),\n+   25|       |    }\n+   26|      1|    match Pin::new(&mut generator).resume(()) {\n+   27|      1|        GeneratorState::Complete(\"foo\") => {}\n+   28|      0|        _ => panic!(\"unexpected return from resume\"),\n+   29|       |    }\n+   30|      1|}\n+"}, {"sha": "8e8bc0fd1894338f3f7b0579ee35ca6c02baf744", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.generics.txt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -52,15 +52,15 @@\n    30|      1|    if true {\n    31|      1|        println!(\"Exiting with error...\");\n    32|      1|        return Err(1);\n-   33|       |    } // The remaining lines below have no coverage because `if true` (with the constant literal\n-   34|       |      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.\n-   35|       |      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown\n-   36|       |      // in other tests, the lines below would have coverage (which would show they had `0`\n-   37|       |      // executions, assuming the condition still evaluated to `true`).\n-   38|       |\n-   39|       |    let _ = Firework { strength: 1000 };\n-   40|       |\n-   41|       |    Ok(())\n+   33|      0|    }\n+   34|      0|\n+   35|      0|\n+   36|      0|\n+   37|      0|\n+   38|      0|\n+   39|      0|    let _ = Firework { strength: 1000 };\n+   40|      0|\n+   41|      0|    Ok(())\n    42|      1|}\n    43|       |\n    44|       |// Expected program output:"}, {"sha": "5d572db7cc60da3b6b90c2a9dd799c7eda9143ed", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.loops_branches.txt", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -9,23 +9,23 @@\n     9|      1|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n    10|      1|        if true {\n    11|      1|            if false {\n-   12|       |                while true {\n-   13|       |                }\n+   12|      0|                while true {\n+   13|      0|                }\n    14|      1|            }\n-   15|      1|            write!(f, \"error\")?;\n-                                            ^0\n-   16|       |        } else {\n-   17|       |        }\n+   15|      1|            write!(f, \"cool\")?;\n+                                           ^0\n+   16|      0|        } else {\n+   17|      0|        }\n    18|       |\n    19|     10|        for i in 0..10 {\n    20|     10|            if true {\n    21|     10|                if false {\n-   22|       |                    while true {}\n+   22|      0|                    while true {}\n    23|     10|                }\n-   24|     10|                write!(f, \"error\")?;\n-                                                ^0\n-   25|       |            } else {\n-   26|       |            }\n+   24|     10|                write!(f, \"cool\")?;\n+                                               ^0\n+   25|      0|            } else {\n+   26|      0|            }\n    27|       |        }\n    28|      1|        Ok(())\n    29|      1|    }\n@@ -36,21 +36,21 @@\n    34|       |impl std::fmt::Display for DisplayTest {\n    35|      1|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n    36|      1|        if false {\n-   37|       |        } else {\n+   37|      0|        } else {\n    38|      1|            if false {\n-   39|       |                while true {}\n+   39|      0|                while true {}\n    40|      1|            }\n-   41|      1|            write!(f, \"error\")?;\n-                                            ^0\n+   41|      1|            write!(f, \"cool\")?;\n+                                           ^0\n    42|       |        }\n    43|     10|        for i in 0..10 {\n    44|     10|            if false {\n-   45|       |            } else {\n+   45|      0|            } else {\n    46|     10|                if false {\n-   47|       |                    while true {}\n+   47|      0|                    while true {}\n    48|     10|                }\n-   49|     10|                write!(f, \"error\")?;\n-                                                ^0\n+   49|     10|                write!(f, \"cool\")?;\n+                                               ^0\n    50|       |            }\n    51|       |        }\n    52|      1|        Ok(())"}, {"sha": "2d4c57f451a2de3871bb0223d6cfbd72b71d2dac", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.tight_inf_loop.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.tight_inf_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.tight_inf_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.tight_inf_loop.txt?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -1,6 +1,6 @@\n     1|      1|fn main() {\n     2|      1|    if false {\n-    3|       |        loop {}\n+    3|      0|        loop {}\n     4|      1|    }\n     5|      1|}\n "}, {"sha": "057599d1b471ab2e12a63f6a4a0b5b2fc9a3f654", "filename": "src/test/run-make-fulldeps/coverage/conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -53,8 +53,8 @@ fn main() {\n         } else {\n             return;\n         }\n-    } // Note: closing brace shows uncovered (vs. `0` for implicit else) because condition literal\n-      // `true` was const-evaluated. The compiler knows the `if` block will be executed.\n+    }\n+\n \n     let mut countdown = 0;\n     if true {"}, {"sha": "4319991021e78dac6c8a9ea07138c518f95811a7", "filename": "src/test/run-make-fulldeps/coverage/generator.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerator.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -0,0 +1,30 @@\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+\n+// The following implementation of a function called from a `yield` statement\n+// (apparently requiring the Result and the `String` type or constructor)\n+// creates conditions where the `generator::StateTransform` MIR transform will\n+// drop all `Counter` `Coverage` statements from a MIR. `simplify.rs` has logic\n+// to handle this condition, and still report dead block coverage.\n+fn get_u32(val: bool) -> Result<u32, String> {\n+    if val { Ok(1) } else { Err(String::from(\"some error\")) }\n+}\n+\n+fn main() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut generator = || {\n+        yield get_u32(is_true);\n+        return \"foo\";\n+    };\n+\n+    match Pin::new(&mut generator).resume(()) {\n+        GeneratorState::Yielded(Ok(1)) => {}\n+        _ => panic!(\"unexpected return from resume\"),\n+    }\n+    match Pin::new(&mut generator).resume(()) {\n+        GeneratorState::Complete(\"foo\") => {}\n+        _ => panic!(\"unexpected return from resume\"),\n+    }\n+}"}, {"sha": "18b38868496d4bc10a699e6fe68035adaf2690e2", "filename": "src/test/run-make-fulldeps/coverage/generics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fgenerics.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -30,11 +30,11 @@ fn main() -> Result<(),u8> {\n     if true {\n         println!(\"Exiting with error...\");\n         return Err(1);\n-    } // The remaining lines below have no coverage because `if true` (with the constant literal\n-      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.\n-      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown\n-      // in other tests, the lines below would have coverage (which would show they had `0`\n-      // executions, assuming the condition still evaluated to `true`).\n+    }\n+\n+\n+\n+\n \n     let _ = Firework { strength: 1000 };\n "}, {"sha": "7116ce47f4b9dcdf28bbd8fd161509f0e74faa6a", "filename": "src/test/run-make-fulldeps/coverage/loops_branches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs?ref=f4f76e60b3c4b0f52caecc5e52f9ee7f24b7d050", "patch": "@@ -12,7 +12,7 @@ impl std::fmt::Debug for DebugTest {\n                 while true {\n                 }\n             }\n-            write!(f, \"error\")?;\n+            write!(f, \"cool\")?;\n         } else {\n         }\n \n@@ -21,7 +21,7 @@ impl std::fmt::Debug for DebugTest {\n                 if false {\n                     while true {}\n                 }\n-                write!(f, \"error\")?;\n+                write!(f, \"cool\")?;\n             } else {\n             }\n         }\n@@ -38,15 +38,15 @@ impl std::fmt::Display for DisplayTest {\n             if false {\n                 while true {}\n             }\n-            write!(f, \"error\")?;\n+            write!(f, \"cool\")?;\n         }\n         for i in 0..10 {\n             if false {\n             } else {\n                 if false {\n                     while true {}\n                 }\n-                write!(f, \"error\")?;\n+                write!(f, \"cool\")?;\n             }\n         }\n         Ok(())"}]}