{"sha": "dd288d27de23e2f2180e71b6e9b36789ba388e6f", "node_id": "C_kwDOAAsO6NoAKGRkMjg4ZDI3ZGUyM2UyZjIxODBlNzFiNmU5YjM2Nzg5YmEzODhlNmY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-03T11:13:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-03T11:13:41Z"}, "message": "Fix vector types containing an array field with mir opts enabled", "tree": {"sha": "1a0f9b0a2eecc049ba2e74b6a43e93af08550bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0f9b0a2eecc049ba2e74b6a43e93af08550bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd288d27de23e2f2180e71b6e9b36789ba388e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd288d27de23e2f2180e71b6e9b36789ba388e6f", "html_url": "https://github.com/rust-lang/rust/commit/dd288d27de23e2f2180e71b6e9b36789ba388e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd288d27de23e2f2180e71b6e9b36789ba388e6f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516b478c8161c7a90e604f96d0f5878990550f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/516b478c8161c7a90e604f96d0f5878990550f21", "html_url": "https://github.com/rust-lang/rust/commit/516b478c8161c7a90e604f96d0f5878990550f21"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "d5c7e2cc297bc8633717b83a1b1eb8caf23f4e5f", "filename": "src/value_and_place.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dd288d27de23e2f2180e71b6e9b36789ba388e6f/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd288d27de23e2f2180e71b6e9b36789ba388e6f/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=dd288d27de23e2f2180e71b6e9b36789ba388e6f", "patch": "@@ -510,6 +510,26 @@ impl<'tcx> CPlace<'tcx> {\n         let dst_layout = self.layout();\n         let to_ptr = match self.inner {\n             CPlaceInner::Var(_local, var) => {\n+                if let ty::Array(element, len) = dst_layout.ty.kind() {\n+                    // Can only happen for vector types\n+                    let len =\n+                        u16::try_from(len.eval_usize(fx.tcx, ParamEnv::reveal_all())).unwrap();\n+                    let vector_ty = fx.clif_type(element).unwrap().by(len).unwrap();\n+\n+                    let data = match from.0 {\n+                        CValueInner::ByRef(ptr, None) => {\n+                            let mut flags = MemFlags::new();\n+                            flags.set_notrap();\n+                            ptr.load(fx, vector_ty, flags)\n+                        }\n+                        CValueInner::ByVal(_)\n+                        | CValueInner::ByValPair(_, _)\n+                        | CValueInner::ByRef(_, Some(_)) => bug!(\"array should be ByRef\"),\n+                    };\n+\n+                    fx.bcx.def_var(var, data);\n+                    return;\n+                }\n                 let data = CValue(from.0, dst_layout).load_scalar(fx);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n                 transmute_value(fx, var, data, dst_ty);\n@@ -603,14 +623,39 @@ impl<'tcx> CPlace<'tcx> {\n         let layout = self.layout();\n \n         match self.inner {\n-            CPlaceInner::Var(local, var) => {\n-                if let Abi::Vector { .. } = layout.abi {\n+            CPlaceInner::Var(local, var) => match layout.ty.kind() {\n+                ty::Array(_, _) => {\n+                    // Can only happen for vector types\n                     return CPlace {\n                         inner: CPlaceInner::VarLane(local, var, field.as_u32().try_into().unwrap()),\n                         layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n                     };\n                 }\n-            }\n+                ty::Adt(adt_def, substs) if layout.ty.is_simd() => {\n+                    let f0_ty = adt_def.non_enum_variant().fields[0].ty(fx.tcx, substs);\n+\n+                    match f0_ty.kind() {\n+                        ty::Array(_, _) => {\n+                            assert_eq!(field.as_u32(), 0);\n+                            return CPlace {\n+                                inner: CPlaceInner::Var(local, var),\n+                                layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n+                            };\n+                        }\n+                        _ => {\n+                            return CPlace {\n+                                inner: CPlaceInner::VarLane(\n+                                    local,\n+                                    var,\n+                                    field.as_u32().try_into().unwrap(),\n+                                ),\n+                                layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n+                            };\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            },\n             CPlaceInner::VarPair(local, var1, var2) => {\n                 let layout = layout.field(&*fx, field.index());\n "}]}