{"sha": "9f241b3a26b9344e061094052ecd67a3bde4b2e1", "node_id": "C_kwDOAAsO6NoAKDlmMjQxYjNhMjZiOTM0NGUwNjEwOTQwNTJlY2Q2N2EzYmRlNGIyZTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-21T12:49:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-22T15:37:42Z"}, "message": "abort immediately on bad mem::zeroed/uninit", "tree": {"sha": "369899a6bb95f1d8f6bfaa5eaf7af1f1cd7ce804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/369899a6bb95f1d8f6bfaa5eaf7af1f1cd7ce804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f241b3a26b9344e061094052ecd67a3bde4b2e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f241b3a26b9344e061094052ecd67a3bde4b2e1", "html_url": "https://github.com/rust-lang/rust/commit/9f241b3a26b9344e061094052ecd67a3bde4b2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f241b3a26b9344e061094052ecd67a3bde4b2e1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8651a92761421b0437ffb44ba5670bea5ee1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8651a92761421b0437ffb44ba5670bea5ee1df", "html_url": "https://github.com/rust-lang/rust/commit/2d8651a92761421b0437ffb44ba5670bea5ee1df"}], "stats": {"total": 89, "additions": 55, "deletions": 34}, "files": [{"sha": "978aff511bfa74d07f2ecbcc4a20aa3155d2e62d", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -637,7 +637,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.set_debug_loc(bx, terminator.source_info);\n \n         // Obtain the panic entry point.\n-        let (fn_abi, llfn) = common::build_langcall(bx, Some(span), LangItem::PanicNoUnwind);\n+        let (fn_abi, llfn) = common::build_langcall(bx, Some(span), LangItem::PanicCannotUnwind);\n \n         // Codegen the actual panic invoke/call.\n         let merging_succ = helper.do_call(self, bx, fn_abi, llfn, &[], None, None, &[], false);\n@@ -698,19 +698,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     })\n                 });\n                 let msg = bx.const_str(&msg_str);\n-                let location = self.get_caller_location(bx, source_info).immediate();\n \n                 // Obtain the panic entry point.\n                 let (fn_abi, llfn) =\n-                    common::build_langcall(bx, Some(source_info.span), LangItem::Panic);\n+                    common::build_langcall(bx, Some(source_info.span), LangItem::PanicNounwind);\n \n                 // Codegen the actual panic invoke/call.\n                 helper.do_call(\n                     self,\n                     bx,\n                     fn_abi,\n                     llfn,\n-                    &[msg.0, msg.1, location],\n+                    &[msg.0, msg.1],\n                     target.as_ref().map(|bb| (ReturnDest::Nothing, *bb)),\n                     cleanup,\n                     &[],\n@@ -1665,7 +1664,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let llpersonality = self.cx.eh_personality();\n             bx.cleanup_landing_pad(llpersonality);\n \n-            let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicNoUnwind);\n+            let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicCannotUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n             let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &[], None);"}, {"sha": "3474fab34f00b1e70bb777ac1f43adaf783369ad", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -146,7 +146,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n }\n \n language_item_table! {\n-//  Variant name,            Name,                     Method name,                Target                  Generic requirements;\n+//  Variant name,            Name,                     Getter method name,         Target                  Generic requirements;\n     Sized,                   sym::sized,               sized_trait,                Target::Trait,          GenericRequirement::Exact(0);\n     Unsize,                  sym::unsize,              unsize_trait,               Target::Trait,          GenericRequirement::Minimum(1);\n     /// Trait injected by `#[derive(PartialEq)]`, (i.e. \"Partial EQ\").\n@@ -232,14 +232,15 @@ language_item_table! {\n     // is required to define it somewhere. Additionally, there are restrictions on crates that use\n     // a weak lang item, but do not have it defined.\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n+    PanicNounwind,           sym::panic_nounwind,      panic_nounwind,             Target::Fn,             GenericRequirement::Exact(0);\n     PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n     PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n     ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n-    PanicNoUnwind,           sym::panic_no_unwind,     panic_no_unwind,            Target::Fn,             GenericRequirement::Exact(0);\n+    PanicCannotUnwind,       sym::panic_cannot_unwind, panic_cannot_unwind,        Target::Fn,             GenericRequirement::Exact(0);\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n "}, {"sha": "59cc500a99da7267f91fa56cadd0fb131246f2eb", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -843,7 +843,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Abort { .. } => {\n                 let instance = Instance::mono(\n                     tcx,\n-                    tcx.require_lang_item(LangItem::PanicNoUnwind, Some(source)),\n+                    tcx.require_lang_item(LangItem::PanicCannotUnwind, Some(source)),\n                 );\n                 if should_codegen_locally(tcx, &instance) {\n                     self.output.push(create_fn_mono_item(tcx, instance, source));"}, {"sha": "90f654c68ecbf1d9969144c5e3c59631309fbfad", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -1041,14 +1041,15 @@ symbols! {\n         panic_2021,\n         panic_abort,\n         panic_bounds_check,\n+        panic_cannot_unwind,\n         panic_display,\n         panic_fmt,\n         panic_handler,\n         panic_impl,\n         panic_implementation,\n         panic_info,\n         panic_location,\n-        panic_no_unwind,\n+        panic_nounwind,\n         panic_runtime,\n         panic_str,\n         panic_unwind,"}, {"sha": "6eeaef5ab0129d195f09aba1d025b90190ef7922", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -2281,7 +2281,7 @@ macro_rules! assert_unsafe_precondition {\n             fn runtime$(<$($tt)*>)?($($i:$ty),*) {\n                 if !$e {\n                     // don't unwind to reduce impact on code size\n-                    ::core::panicking::panic_str_nounwind(\n+                    ::core::panicking::panic_nounwind(\n                         concat!(\"unsafe precondition(s) violated: \", $name)\n                     );\n                 }"}, {"sha": "9fce78d076bf3e800b5113b9aeaf377393cc0850", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -64,12 +64,13 @@ pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     unsafe { panic_impl(&pi) }\n }\n \n-/// Like panic_fmt, but without unwinding and track_caller to reduce the impact on codesize.\n-/// Also just works on `str`, as a `fmt::Arguments` needs more space to be passed.\n+/// Like `panic`, but without unwinding and track_caller to reduce the impact on codesize.\n+/// (No `fmt` variant as a `fmt::Arguments` needs more space to be passed.)\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[cfg_attr(not(bootstrap), lang = \"panic_nounwind\")] // needed by codegen for non-unwinding panics\n #[rustc_nounwind]\n-pub fn panic_str_nounwind(msg: &'static str) -> ! {\n+pub fn panic_nounwind(msg: &'static str) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n     }\n@@ -153,10 +154,11 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n /// any extra arguments (including those synthesized by track_caller).\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n+#[cfg_attr(bootstrap, lang = \"panic_no_unwind\")] // needed by codegen for panic in nounwind function\n+#[cfg_attr(not(bootstrap), lang = \"panic_cannot_unwind\")] // needed by codegen for panic in nounwind function\n #[rustc_nounwind]\n-fn panic_no_unwind() -> ! {\n-    panic_str_nounwind(\"panic in a function that cannot unwind\")\n+fn panic_cannot_unwind() -> ! {\n+    panic_nounwind(\"panic in a function that cannot unwind\")\n }\n \n /// This function is used instead of panic_fmt in const eval."}, {"sha": "ea5bae18e23373142d238d871900e3a79d285c52", "filename": "src/test/codegen/unwind-abis/c-unwind-abi-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -10,7 +10,7 @@\n #[no_mangle]\n pub unsafe extern \"C-unwind\" fn rust_item_that_can_unwind() {\n     // Handle both legacy and v0 symbol mangling.\n-    // CHECK: call void @{{.*core9panicking15panic_no_unwind}}\n+    // CHECK: call void @{{.*core9panicking19panic_cannot_unwind}}\n     may_unwind();\n }\n "}, {"sha": "e43e73b96b9965a08efeb1f337a2391410019844", "filename": "src/test/codegen/unwind-and-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -10,7 +10,7 @@ extern \"C-unwind\" {\n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: define{{.*}}void @foo\n // Handle both legacy and v0 symbol mangling.\n-// CHECK: call void @{{.*core9panicking15panic_no_unwind}}\n+// CHECK: call void @{{.*core9panicking19panic_cannot_unwind}}\n #[no_mangle]\n pub unsafe extern \"C\" fn foo() {\n     bar();"}, {"sha": "142c0fc81b4abbc63bb9b2322f07e48e68d204d4", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9f241b3a26b9344e061094052ecd67a3bde4b2e1/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f241b3a26b9344e061094052ecd67a3bde4b2e1/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=9f241b3a26b9344e061094052ecd67a3bde4b2e1", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n-// needs-unwind\n-// revisions: mir thir strict\n-// [thir]compile-flags: -Zthir-unsafeck\n+// revisions: default strict\n // [strict]compile-flags: -Zstrict-init-checks\n // ignore-tidy-linelength\n \n@@ -12,7 +10,6 @@\n \n use std::{\n     mem::{self, MaybeUninit, ManuallyDrop},\n-    panic,\n     ptr::NonNull,\n     num,\n };\n@@ -70,21 +67,42 @@ enum ZeroIsValid {\n }\n \n #[track_caller]\n-fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n-    let err = panic::catch_unwind(op).err();\n-    assert_eq!(\n-        err.as_ref().and_then(|a| a.downcast_ref::<&str>()),\n-        Some(&msg)\n-    );\n+fn test_panic_msg<T, F: (FnOnce() -> T) + 'static>(op: F, msg: &str) {\n+    use std::{panic, env, process};\n+\n+    // The tricky part is that we can't just run `op`, as that would *abort* the process.\n+    // So instead, we reinvoke this process with the caller location as argument.\n+    // For the purpose of this test, the line number is unique enough.\n+    // If we are running in such a re-invocation, we skip all the tests *except* for the one with that type name.\n+    let our_loc = panic::Location::caller().line().to_string();\n+    let mut args = env::args();\n+    let this = args.next().unwrap();\n+    if let Some(loc) = args.next() {\n+        if loc == our_loc {\n+            op();\n+            panic!(\"we did not abort\");\n+        } else {\n+            // Nothing, we are running another test.\n+        }\n+    } else {\n+        // Invoke new process for actual test, and check result.\n+        let mut cmd = process::Command::new(this);\n+        cmd.arg(our_loc);\n+        let res = cmd.output().unwrap();\n+        assert!(!res.status.success(), \"test did not fail\");\n+        let stderr = String::from_utf8_lossy(&res.stderr);\n+        assert!(stderr.contains(msg), \"test did not contain expected output: looking for {:?}, output:\\n{}\", msg, stderr);\n+    }\n }\n \n #[track_caller]\n-fn test_panic_msg_only_if_strict<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n-    let err = panic::catch_unwind(op).err();\n-    assert_eq!(\n-        err.as_ref().and_then(|a| a.downcast_ref::<&str>()),\n-        if cfg!(strict) { Some(&msg) } else { None },\n-    );\n+fn test_panic_msg_only_if_strict<T>(op: impl (FnOnce() -> T) + 'static, msg: &str) {\n+    if !cfg!(strict) {\n+        // Just run it.\n+        op();\n+    } else {\n+        test_panic_msg(op, msg);\n+    }\n }\n \n fn main() {"}]}