{"sha": "1757d6b34d25fa543d97058a1a32d34e9a9f0d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NTdkNmIzNGQyNWZhNTQzZDk3MDU4YTFhMzJkMzRlOWE5ZjBkOGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T07:26:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T07:26:58Z"}, "message": "Rollup merge of #87583 - tmiasko:compression-cache, r=wesleywiser\n\nRefactor compression cache in v0 symbol mangler\n\n* Remove redundant option around compression caches (they are always present).\n* Flatten compression caches into symbol mangler to avoid dynamic memory allocation.\n* Implement printer for `&mut SymbolMangler` instead of `SymbolMangler` to avoid passing now slightly larger symbol mangler by value.", "tree": {"sha": "808e1dc7a700bbc24a8e400ca4dad7021e8b4850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808e1dc7a700bbc24a8e400ca4dad7021e8b4850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1757d6b34d25fa543d97058a1a32d34e9a9f0d8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhA6nDCRBK7hj4Ov3rIwAAJO8IAJQI4kl0NW48sxPGW49CAdRu\nZjrKE5yC7uW5gHfRuypwJRHc1S1XWFoq2b5HUQvFz5/qHoZsWpPcTmltu+w0UlYD\n0sAru9LMBr6Us8g31uQBYL9N4a7SSyc8Fs6TssdUJT4caQ8mGqiQNl5CyjdlCn5s\nKqSJKVdUxq07HnAWXkmeC5jNcaiayH8gFmqxDM9fIJjOmCSmomTRk/QFzq8Lddsl\nhVoG7DJsOtqD81a4pccptJZE0s2V8qcctSnhQap3ryeExgafL6hmem8/kx+Yl5U6\nan9DgzesA6TkK89gRAH4CdxLxhSr7DB4xvQzVqeVrOq4XgIpPijWCGQxkh0cqe8=\n=deH1\n-----END PGP SIGNATURE-----\n", "payload": "tree 808e1dc7a700bbc24a8e400ca4dad7021e8b4850\nparent 3bc6c28376e334014c1d2980e9e30f4d1b9abb1b\nparent 0eabbf84babbf9302285a4cb2ea54a9d67f13945\nauthor Yuki Okushi <jtitor@2k36.org> 1627630018 +0900\ncommitter GitHub <noreply@github.com> 1627630018 +0900\n\nRollup merge of #87583 - tmiasko:compression-cache, r=wesleywiser\n\nRefactor compression cache in v0 symbol mangler\n\n* Remove redundant option around compression caches (they are always present).\n* Flatten compression caches into symbol mangler to avoid dynamic memory allocation.\n* Implement printer for `&mut SymbolMangler` instead of `SymbolMangler` to avoid passing now slightly larger symbol mangler by value.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1757d6b34d25fa543d97058a1a32d34e9a9f0d8d", "html_url": "https://github.com/rust-lang/rust/commit/1757d6b34d25fa543d97058a1a32d34e9a9f0d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1757d6b34d25fa543d97058a1a32d34e9a9f0d8d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc6c28376e334014c1d2980e9e30f4d1b9abb1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc6c28376e334014c1d2980e9e30f4d1b9abb1b", "html_url": "https://github.com/rust-lang/rust/commit/3bc6c28376e334014c1d2980e9e30f4d1b9abb1b"}, {"sha": "0eabbf84babbf9302285a4cb2ea54a9d67f13945", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eabbf84babbf9302285a4cb2ea54a9d67f13945", "html_url": "https://github.com/rust-lang/rust/commit/0eabbf84babbf9302285a4cb2ea54a9d67f13945"}], "stats": {"total": 77, "additions": 32, "deletions": 45}, "files": [{"sha": "c4c1ec8ce4e0a2ca109d6aa669dc4802a9dec415", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 32, "deletions": 45, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1757d6b34d25fa543d97058a1a32d34e9a9f0d8d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1757d6b34d25fa543d97058a1a32d34e9a9f0d8d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=1757d6b34d25fa543d97058a1a32d34e9a9f0d8d", "patch": "@@ -23,15 +23,12 @@ pub(super) fn mangle(\n     let substs = tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), instance.substs);\n \n     let prefix = \"_R\";\n-    let mut cx = SymbolMangler {\n+    let mut cx = &mut SymbolMangler {\n         tcx,\n-        compress: Some(Box::new(CompressionCaches {\n-            start_offset: prefix.len(),\n-\n-            paths: FxHashMap::default(),\n-            types: FxHashMap::default(),\n-            consts: FxHashMap::default(),\n-        })),\n+        start_offset: prefix.len(),\n+        paths: FxHashMap::default(),\n+        types: FxHashMap::default(),\n+        consts: FxHashMap::default(),\n         binders: vec![],\n         out: String::from(prefix),\n     };\n@@ -52,17 +49,7 @@ pub(super) fn mangle(\n     if let Some(instantiating_crate) = instantiating_crate {\n         cx = cx.print_def_path(instantiating_crate.as_def_id(), &[]).unwrap();\n     }\n-    cx.out\n-}\n-\n-struct CompressionCaches<'tcx> {\n-    // The length of the prefix in `out` (e.g. 2 for `_R`).\n-    start_offset: usize,\n-\n-    // The values are start positions in `out`, in bytes.\n-    paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n-    types: FxHashMap<Ty<'tcx>, usize>,\n-    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n+    std::mem::take(&mut cx.out)\n }\n \n struct BinderLevel {\n@@ -81,9 +68,15 @@ struct BinderLevel {\n \n struct SymbolMangler<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    compress: Option<Box<CompressionCaches<'tcx>>>,\n     binders: Vec<BinderLevel>,\n     out: String,\n+\n+    /// The length of the prefix in `out` (e.g. 2 for `_R`).\n+    start_offset: usize,\n+    /// The values are start positions in `out`, in bytes.\n+    paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n+    types: FxHashMap<Ty<'tcx>, usize>,\n+    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n }\n \n impl SymbolMangler<'tcx> {\n@@ -160,13 +153,13 @@ impl SymbolMangler<'tcx> {\n         self.push(ident);\n     }\n \n-    fn path_append_ns(\n-        mut self,\n-        print_prefix: impl FnOnce(Self) -> Result<Self, !>,\n+    fn path_append_ns<'a>(\n+        mut self: &'a mut Self,\n+        print_prefix: impl FnOnce(&'a mut Self) -> Result<&'a mut Self, !>,\n         ns: char,\n         disambiguator: u64,\n         name: &str,\n-    ) -> Result<Self, !> {\n+    ) -> Result<&'a mut Self, !> {\n         self.push(\"N\");\n         self.out.push(ns);\n         self = print_prefix(self)?;\n@@ -175,17 +168,17 @@ impl SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_backref(mut self, i: usize) -> Result<Self, !> {\n+    fn print_backref(&mut self, i: usize) -> Result<&mut Self, !> {\n         self.push(\"B\");\n-        self.push_integer_62((i - self.compress.as_ref().unwrap().start_offset) as u64);\n+        self.push_integer_62((i - self.start_offset) as u64);\n         Ok(self)\n     }\n \n-    fn in_binder<T>(\n-        mut self,\n+    fn in_binder<'a, T>(\n+        mut self: &'a mut Self,\n         value: &ty::Binder<'tcx, T>,\n-        print_value: impl FnOnce(Self, &T) -> Result<Self, !>,\n-    ) -> Result<Self, !>\n+        print_value: impl FnOnce(&'a mut Self, &T) -> Result<&'a mut Self, !>,\n+    ) -> Result<&'a mut Self, !>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -218,7 +211,7 @@ impl SymbolMangler<'tcx> {\n     }\n }\n \n-impl Printer<'tcx> for SymbolMangler<'tcx> {\n+impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     type Error = !;\n \n     type Path = Self;\n@@ -236,7 +229,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         def_id: DefId,\n         substs: &'tcx [GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error> {\n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.paths.get(&(def_id, substs))) {\n+        if let Some(&i) = self.paths.get(&(def_id, substs)) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -246,9 +239,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache paths that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !substs.iter().any(|k| k.has_escaping_bound_vars()) {\n-            if let Some(c) = &mut self.compress {\n-                c.paths.insert((def_id, substs), start);\n-            }\n+            self.paths.insert((def_id, substs), start);\n         }\n         Ok(self)\n     }\n@@ -312,7 +303,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_region(mut self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n+    fn print_region(self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n         let i = match *region {\n             // Erased lifetimes use the index 0, for a\n             // shorter mangling of `L_`.\n@@ -367,7 +358,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             return Ok(self);\n         }\n \n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.types.get(&ty)) {\n+        if let Some(&i) = self.types.get(&ty) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -476,9 +467,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache types that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ty.has_escaping_bound_vars() {\n-            if let Some(c) = &mut self.compress {\n-                c.types.insert(ty, start);\n-            }\n+            self.types.insert(ty, start);\n         }\n         Ok(self)\n     }\n@@ -545,7 +534,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.consts.get(&ct)) {\n+        if let Some(&i) = self.consts.get(&ct) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -583,14 +572,12 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache consts that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ct.has_escaping_bound_vars() {\n-            if let Some(c) = &mut self.compress {\n-                c.consts.insert(ct, start);\n-            }\n+            self.consts.insert(ct, start);\n         }\n         Ok(self)\n     }\n \n-    fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n+    fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n         self.push_disambiguator(stable_crate_id.to_u64());"}]}