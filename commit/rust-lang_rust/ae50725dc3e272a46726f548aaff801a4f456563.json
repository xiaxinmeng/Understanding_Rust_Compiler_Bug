{"sha": "ae50725dc3e272a46726f548aaff801a4f456563", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNTA3MjVkYzNlMjcyYTQ2NzI2ZjU0OGFhZmY4MDFhNGY0NTY1NjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-23T08:57:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-23T08:57:43Z"}, "message": "Rollup merge of #69361 - Centril:free-ty-alias, r=petrochenkov\n\nparse: allow `type Foo: Ord` syntactically\n\nThis addresses:\n> (Work still remains to fuse this with free type aliases, but this can be done later.)\n\nin https://github.com/rust-lang/rust/pull/69194.\n\nr? @petrochenkov", "tree": {"sha": "9e831818289723cfa6bdedc9f19243f3dba41434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e831818289723cfa6bdedc9f19243f3dba41434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae50725dc3e272a46726f548aaff801a4f456563", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeUj6HCRBK7hj4Ov3rIwAAdHIIAAJ7tO74GqGGuBEsXi8NHPvG\nTYx+nkGtYuAn66nzJeRdRMa0EePo0LPec9Hbk4h2KvzaGZYCsecvRtPGpT4IJNCP\nZeilPgrQHTsAQGCzBhGWrmKvLDTtIdlQSynlIHERObXLHHN2ThSlZQhz1Demg+9h\nfL6OfBZS9mx3u3ux7mvqu4yZeWrzz5UObApA+Ff4waZZ2G1vzMqLBBLuPLtTFarC\na61oWNbdw0fjqH3+bTUZAilgF2gF3f4ETrimswVUXbUdjGqX6MKsvzLJkwXP0EB6\n7VckAB+RvZWoRCtLmc8WfimO1O5hpc/Zbr7pHsh6GSkbkpqvlr1bYoUQcYHaiU0=\n=fhE4\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e831818289723cfa6bdedc9f19243f3dba41434\nparent cec00033a78d46df814728bcd831e71355a0efb0\nparent 9f3dfd29a21f1bdc26720703f79d3fabdc7471de\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582448263 +0100\ncommitter GitHub <noreply@github.com> 1582448263 +0100\n\nRollup merge of #69361 - Centril:free-ty-alias, r=petrochenkov\n\nparse: allow `type Foo: Ord` syntactically\n\nThis addresses:\n> (Work still remains to fuse this with free type aliases, but this can be done later.)\n\nin https://github.com/rust-lang/rust/pull/69194.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae50725dc3e272a46726f548aaff801a4f456563", "html_url": "https://github.com/rust-lang/rust/commit/ae50725dc3e272a46726f548aaff801a4f456563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae50725dc3e272a46726f548aaff801a4f456563/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec00033a78d46df814728bcd831e71355a0efb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec00033a78d46df814728bcd831e71355a0efb0", "html_url": "https://github.com/rust-lang/rust/commit/cec00033a78d46df814728bcd831e71355a0efb0"}, {"sha": "9f3dfd29a21f1bdc26720703f79d3fabdc7471de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3dfd29a21f1bdc26720703f79d3fabdc7471de", "html_url": "https://github.com/rust-lang/rust/commit/9f3dfd29a21f1bdc26720703f79d3fabdc7471de"}], "stats": {"total": 358, "additions": 242, "deletions": 116}, "files": [{"sha": "1a19fab0265e677f7f6e15722294981f209f0728", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -297,28 +297,28 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(ref ty, ref generics) => match ty.kind.opaque_top_hack() {\n+            ItemKind::TyAlias(ref generics, _, Some(ref ty)) => match ty.kind.opaque_top_hack() {\n                 None => {\n                     let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                     let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                     hir::ItemKind::TyAlias(ty, generics)\n                 }\n                 Some(bounds) => {\n+                    let ctx = || ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc);\n                     let ty = hir::OpaqueTy {\n-                        generics: self.lower_generics(\n-                            generics,\n-                            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc),\n-                        ),\n-                        bounds: self.lower_param_bounds(\n-                            bounds,\n-                            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc),\n-                        ),\n+                        generics: self.lower_generics(generics, ctx()),\n+                        bounds: self.lower_param_bounds(bounds, ctx()),\n                         impl_trait_fn: None,\n                         origin: hir::OpaqueTyOrigin::TypeAlias,\n                     };\n                     hir::ItemKind::OpaqueTy(ty)\n                 }\n             },\n+            ItemKind::TyAlias(ref generics, _, None) => {\n+                let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n+                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                hir::ItemKind::TyAlias(ty, generics)\n+            }\n             ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemKind::Enum(\n                 hir::EnumDef {\n                     variants: self.arena.alloc_from_iter("}, {"sha": "9bb46009fe64b25ed4b64a38ad3545b9a1f12c01", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ItemKind::Struct(_, ref generics)\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::TyAlias(_, ref generics)\n+                    | ItemKind::TyAlias(ref generics, ..)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics"}, {"sha": "a9844a7059e552f1fa9c2d7f629013cfc744d85f", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -969,6 +969,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 let msg = \"free static item without body\";\n                 self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n             }\n+            ItemKind::TyAlias(_, ref bounds, ref body) => {\n+                if body.is_none() {\n+                    let msg = \"free type alias without body\";\n+                    self.error_item_without_body(item.span, \"type\", msg, \" = <type>;\");\n+                }\n+                self.check_type_no_bounds(bounds, \"this context\");\n+            }\n             _ => {}\n         }\n "}, {"sha": "5bddae0d49e7d83840e581059dbc37c638814f09", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -372,7 +372,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::TyAlias(ref ty, ..) => self.check_impl_trait(&ty),\n+            ast::ItemKind::TyAlias(_, _, Some(ref ty)) => self.check_impl_trait(&ty),\n \n             _ => {}\n         }"}, {"sha": "9b7bb57494685f03ec3c5ad5db0868bab2da447f", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -2,7 +2,7 @@ use crate::pp::Breaks::{Consistent, Inconsistent};\n use crate::pp::{self, Breaks};\n \n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{dummy_spanned, SourceMap, Spanned};\n+use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, FileName, Span};\n use syntax::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n@@ -1026,27 +1026,26 @@ impl<'a> State<'a> {\n         span: Span,\n         ident: ast::Ident,\n         attrs: &[Attribute],\n-        defaultness: ast::Defaultness,\n+        def: ast::Defaultness,\n         kind: &ast::AssocItemKind,\n         vis: &ast::Visibility,\n     ) {\n         self.ann.pre(self, AnnNode::SubItem(id));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n-        self.print_defaultness(defaultness);\n         match kind {\n             ast::ForeignItemKind::Fn(sig, gen, body) => {\n-                self.print_fn_full(sig, ident, gen, vis, body.as_deref(), attrs);\n+                self.print_fn_full(sig, ident, gen, vis, def, body.as_deref(), attrs);\n             }\n             ast::ForeignItemKind::Const(ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis);\n+                self.print_item_const(ident, None, ty, body.as_deref(), vis, def);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n-                self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis);\n+                self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n             }\n             ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n-                self.print_associated_type(ident, generics, bounds, ty.as_deref());\n+                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, def);\n             }\n             ast::ForeignItemKind::Macro(m) => {\n                 self.print_mac(m);\n@@ -1065,13 +1064,17 @@ impl<'a> State<'a> {\n         ty: &ast::Ty,\n         body: Option<&ast::Expr>,\n         vis: &ast::Visibility,\n+        defaultness: ast::Defaultness,\n     ) {\n+        self.head(\"\");\n+        self.print_visibility(vis);\n+        self.print_defaultness(defaultness);\n         let leading = match mutbl {\n             None => \"const\",\n             Some(ast::Mutability::Not) => \"static\",\n             Some(ast::Mutability::Mut) => \"static mut\",\n         };\n-        self.head(visibility_qualified(vis, leading));\n+        self.word_space(leading);\n         self.print_ident(ident);\n         self.word_space(\":\");\n         self.print_type(ty);\n@@ -1091,7 +1094,12 @@ impl<'a> State<'a> {\n         generics: &ast::Generics,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n+        vis: &ast::Visibility,\n+        defaultness: ast::Defaultness,\n     ) {\n+        self.head(\"\");\n+        self.print_visibility(vis);\n+        self.print_defaultness(defaultness);\n         self.word_space(\"type\");\n         self.print_ident(ident);\n         self.print_generic_params(&generics.params);\n@@ -1102,7 +1110,9 @@ impl<'a> State<'a> {\n             self.word_space(\"=\");\n             self.print_type(ty);\n         }\n-        self.s.word(\";\")\n+        self.s.word(\";\");\n+        self.end(); // end inner head-block\n+        self.end(); // end outer head-block\n     }\n \n     /// Pretty-prints an item.\n@@ -1133,13 +1143,17 @@ impl<'a> State<'a> {\n                 self.end(); // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, mutbl, ref body) => {\n-                self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis);\n+                let def = ast::Defaultness::Final;\n+                self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis, def);\n             }\n             ast::ItemKind::Const(ref ty, ref body) => {\n-                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis);\n+                let def = ast::Defaultness::Final;\n+                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, def);\n             }\n             ast::ItemKind::Fn(ref sig, ref gen, ref body) => {\n-                self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n+                let def = ast::Defaultness::Final;\n+                let body = body.as_deref();\n+                self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n             }\n             ast::ItemKind::Mod(ref _mod) => {\n                 self.head(visibility_qualified(&item.vis, \"mod\"));\n@@ -1171,18 +1185,10 @@ impl<'a> State<'a> {\n                 self.s.word(ga.asm.to_string());\n                 self.end();\n             }\n-            ast::ItemKind::TyAlias(ref ty, ref generics) => {\n-                self.head(visibility_qualified(&item.vis, \"type\"));\n-                self.print_ident(item.ident);\n-                self.print_generic_params(&generics.params);\n-                self.end(); // end the inner ibox\n-\n-                self.print_where_clause(&generics.where_clause);\n-                self.s.space();\n-                self.word_space(\"=\");\n-                self.print_type(ty);\n-                self.s.word(\";\");\n-                self.end(); // end the outer ibox\n+            ast::ItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+                let def = ast::Defaultness::Final;\n+                let ty = ty.as_deref();\n+                self.print_associated_type(item.ident, generics, bounds, ty, &item.vis, def);\n             }\n             ast::ItemKind::Enum(ref enum_definition, ref params) => {\n                 self.print_enum_def(enum_definition, params, item.ident, item.span, &item.vis);\n@@ -2370,13 +2376,16 @@ impl<'a> State<'a> {\n         name: ast::Ident,\n         generics: &ast::Generics,\n         vis: &ast::Visibility,\n+        defaultness: ast::Defaultness,\n         body: Option<&ast::Block>,\n         attrs: &[ast::Attribute],\n     ) {\n         if body.is_some() {\n             self.head(\"\");\n         }\n-        self.print_fn(&sig.decl, sig.header, Some(name), generics, vis);\n+        self.print_visibility(vis);\n+        self.print_defaultness(defaultness);\n+        self.print_fn(&sig.decl, sig.header, Some(name), generics);\n         if let Some(body) = body {\n             self.nbsp();\n             self.print_block_with_attrs(body, attrs);\n@@ -2391,10 +2400,8 @@ impl<'a> State<'a> {\n         header: ast::FnHeader,\n         name: Option<ast::Ident>,\n         generics: &ast::Generics,\n-        vis: &ast::Visibility,\n     ) {\n-        self.print_fn_header_info(header, vis);\n-\n+        self.print_fn_header_info(header);\n         if let Some(name) = name {\n             self.nbsp();\n             self.print_ident(name);\n@@ -2672,8 +2679,7 @@ impl<'a> State<'a> {\n             span: rustc_span::DUMMY_SP,\n         };\n         let header = ast::FnHeader { unsafety, ext, ..ast::FnHeader::default() };\n-        let vis = dummy_spanned(ast::VisibilityKind::Inherited);\n-        self.print_fn(decl, header, name, &generics, &vis);\n+        self.print_fn(decl, header, name, &generics);\n         self.end();\n     }\n \n@@ -2700,9 +2706,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_fn_header_info(&mut self, header: ast::FnHeader, vis: &ast::Visibility) {\n-        self.s.word(visibility_qualified(vis, \"\"));\n-\n+    crate fn print_fn_header_info(&mut self, header: ast::FnHeader) {\n         self.print_constness(header.constness);\n         self.print_asyncness(header.asyncness);\n         self.print_unsafety(header.unsafety);"}, {"sha": "4531c7392a9d5e6c30794818ca287b7013bb9622", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n use rustc_span;\n-use rustc_span::source_map::{dummy_spanned, respan};\n+use rustc_span::source_map::respan;\n use syntax::ast;\n use syntax::with_default_globals;\n \n@@ -13,13 +13,7 @@ fn fun_to_string(\n ) -> String {\n     to_string(|s| {\n         s.head(\"\");\n-        s.print_fn(\n-            decl,\n-            header,\n-            Some(name),\n-            generics,\n-            &dummy_spanned(ast::VisibilityKind::Inherited),\n-        );\n+        s.print_fn(decl, header, Some(name), generics);\n         s.end(); // Close the head box.\n         s.end(); // Close the outer box.\n     })"}, {"sha": "328cf11c53247fc47669ed45b3d3e6516f1eee34", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -156,8 +156,7 @@ impl<'a> Parser<'a> {\n             self.parse_item_mod(attrs)?\n         } else if self.eat_keyword(kw::Type) {\n             // TYPE ITEM\n-            let (ident, ty, generics) = self.parse_type_alias()?;\n-            (ident, ItemKind::TyAlias(ty, generics))\n+            self.parse_type_alias()?\n         } else if self.eat_keyword(kw::Enum) {\n             // ENUM ITEM\n             self.parse_item_enum()?\n@@ -676,7 +675,10 @@ impl<'a> Parser<'a> {\n         vis: &Visibility,\n     ) -> PResult<'a, (Ident, AssocItemKind)> {\n         if self.eat_keyword(kw::Type) {\n-            self.parse_assoc_ty()\n+            match self.parse_type_alias()? {\n+                (ident, ItemKind::TyAlias(a, b, c)) => Ok((ident, AssocItemKind::TyAlias(a, b, c))),\n+                _ => unreachable!(),\n+            }\n         } else if self.check_fn_front_matter() {\n             let (ident, sig, generics, body) = self.parse_fn(at_end, attrs, req_name)?;\n             Ok((ident, AssocItemKind::Fn(sig, generics, body)))\n@@ -700,10 +702,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parses the following grammar:\n-    ///\n-    ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n-    fn parse_assoc_ty(&mut self) -> PResult<'a, (Ident, AssocItemKind)> {\n+    /// Parses a `type` alias with the following grammar:\n+    /// ```\n+    /// TypeAlias = \"type\" Ident Generics {\":\" GenericBounds}? {\"=\" Ty}? \";\" ;\n+    /// ```\n+    /// The `\"type\"` has already been eaten.\n+    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, ItemKind)> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n \n@@ -715,7 +719,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, AssocItemKind::TyAlias(generics, bounds, default)))\n+        Ok((ident, ItemKind::TyAlias(generics, bounds, default)))\n     }\n \n     /// Parses a `UseTree`.\n@@ -989,18 +993,6 @@ impl<'a> Parser<'a> {\n         P(Ty { kind: TyKind::Infer, span: id.span, id: ast::DUMMY_NODE_ID })\n     }\n \n-    /// Parses the grammar:\n-    ///     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\"\n-    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, P<Ty>, Generics)> {\n-        let ident = self.parse_ident()?;\n-        let mut tps = self.parse_generics()?;\n-        tps.where_clause = self.parse_where_clause()?;\n-        self.expect(&token::Eq)?;\n-        let ty = self.parse_ty()?;\n-        self.expect_semi()?;\n-        Ok((ident, ty, tps))\n-    }\n-\n     /// Parses an enum declaration.\n     fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> {\n         let id = self.parse_ident()?;"}, {"sha": "383bfe18fd00b6f74105697f6111e4ae307bd4bd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -718,8 +718,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in the type namespace.\n-            ItemKind::TyAlias(ref ty, _) => {\n-                let def_kind = match ty.kind.opaque_top_hack() {\n+            ItemKind::TyAlias(_, _, ref ty) => {\n+                let def_kind = match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                     None => DefKind::TyAlias,\n                     Some(_) => DefKind::OpaqueTy,\n                 };"}, {"sha": "74628e6e5a03ee1603993c4305b9ce4dd18d5fbe", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -797,7 +797,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.kind);\n \n         match item.kind {\n-            ItemKind::TyAlias(_, ref generics) | ItemKind::Fn(_, ref generics, _) => {\n+            ItemKind::TyAlias(ref generics, _, _) | ItemKind::Fn(_, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });"}, {"sha": "53dd6d28f891bb6fd9f19079eca9dc4db77c949c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -1311,12 +1311,15 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.process_mod(item);\n                 visit::walk_mod(self, m);\n             }\n-            TyAlias(ref ty, ref ty_params) => {\n+            TyAlias(ref ty_params, _, ref ty) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n                 );\n-                let value = ty_to_string(&ty);\n+                let value = match ty {\n+                    Some(ty) => ty_to_string(&ty),\n+                    None => \"_\".to_string(),\n+                };\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n                     let id = id_from_node_id(item.id, &self.save_ctxt);\n@@ -1341,7 +1344,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n \n-                self.visit_ty(&ty);\n+                walk_list!(self, visit_ty, ty);\n                 self.process_generic_params(ty_params, &qualname, item.id);\n             }\n             Mac(_) => (),"}, {"sha": "2c07ed0571bded679dfe65a0fe4a79ac7aac2946", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -423,12 +423,15 @@ impl Sig for ast::Item {\n \n                 Ok(Signature { text, defs, refs: vec![] })\n             }\n-            ast::ItemKind::TyAlias(ref ty, ref generics) => {\n+            ast::ItemKind::TyAlias(ref generics, _, ref ty) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n \n                 sig.text.push_str(\" = \");\n-                let ty = ty.make(offset + sig.text.len(), id, scx)?;\n+                let ty = match ty {\n+                    Some(ty) => ty.make(offset + sig.text.len(), id, scx)?,\n+                    None => Err(\"Ty\")?,\n+                };\n                 sig.text.push_str(&ty.text);\n                 sig.text.push(';');\n "}, {"sha": "849950e939a02c8c94e6ebf9a93acaf2920a83bb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -2524,7 +2524,7 @@ pub enum ItemKind {\n     /// A type alias (`type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n-    TyAlias(P<Ty>, Generics),\n+    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n     /// An enum definition (`enum`).\n     ///\n     /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.\n@@ -2594,7 +2594,7 @@ impl ItemKind {\n     pub fn generics(&self) -> Option<&Generics> {\n         match self {\n             Self::Fn(_, generics, _)\n-            | Self::TyAlias(_, generics)\n+            | Self::TyAlias(generics, ..)\n             | Self::Enum(_, generics)\n             | Self::Struct(_, generics)\n             | Self::Union(_, generics)"}, {"sha": "02f790dfbb4e97a41f614052bd9ac59e39a3958c", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -902,9 +902,10 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n         ItemKind::Mod(m) => vis.visit_mod(m),\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(_ga) => {}\n-        ItemKind::TyAlias(ty, generics) => {\n-            vis.visit_ty(ty);\n+        ItemKind::TyAlias(generics, bounds, ty) => {\n             vis.visit_generics(generics);\n+            visit_bounds(bounds, vis);\n+            visit_opt(ty, |ty| vis.visit_ty(ty));\n         }\n         ItemKind::Enum(EnumDef { variants }, generics) => {\n             variants.flat_map_in_place(|variant| vis.flat_map_variant(variant));"}, {"sha": "bd35918dba72888345f59f10bd6110e1051b4be3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -312,9 +312,10 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::TyAlias(ref typ, ref generics) => {\n-            visitor.visit_ty(typ);\n-            visitor.visit_generics(generics)\n+        ItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_ty, ty);\n         }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);"}, {"sha": "0c95add490110babd0de86c8bd6d85714cf1ca0d", "filename": "src/test/pretty/gat-bounds.pp", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cec00033a78d46df814728bcd831e71355a0efb0/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "raw_url": "https://github.com/rust-lang/rust/raw/cec00033a78d46df814728bcd831e71355a0efb0/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.pp?ref=cec00033a78d46df814728bcd831e71355a0efb0", "patch": "@@ -1,25 +0,0 @@\n-// Check that associated types print generic parameters and where clauses.\n-// See issue #67509.\n-\n-// pretty-compare-only\n-// pp-exact:gat-bounds.pp\n-\n-#![feature(generic_associated_types)]\n-\n-trait X {\n-    type\n-    Y<T>: Trait\n-    where\n-    Self: Sized;\n-}\n-\n-impl X for () {\n-    type\n-    Y<T>\n-    where\n-    Self: Sized\n-    =\n-    u32;\n-}\n-\n-fn main() { }"}, {"sha": "789e4bc80ace90d079cc1c59e5a4a37e420eb017", "filename": "src/test/pretty/gat-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -2,7 +2,6 @@\n // See issue #67509.\n \n // pretty-compare-only\n-// pp-exact:gat-bounds.pp\n \n #![feature(generic_associated_types)]\n "}, {"sha": "0a3f2a10c8549ab24fa354baaad7361acc9865d0", "filename": "src/test/pretty/nested-item-vis-defaultness.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -0,0 +1,47 @@\n+// Check that nested items have their visibility and `default`nesses in the right order.\n+\n+// pp-exact\n+\n+fn main() { }\n+\n+#[cfg(FALSE)]\n+extern \"C\" {\n+    static X: u8 ;\n+    type X;\n+    fn foo();\n+    pub static X: u8 ;\n+    pub type X;\n+    pub fn foo();\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    const X: u8 ;\n+    type X;\n+    fn foo();\n+    default const X: u8 ;\n+    default type X;\n+    default fn foo();\n+    pub const X: u8 ;\n+    pub type X;\n+    pub fn foo();\n+    pub default const X: u8 ;\n+    pub default type X;\n+    pub default fn foo();\n+}\n+\n+#[cfg(FALSE)]\n+impl T for S {\n+    const X: u8 ;\n+    type X;\n+    fn foo();\n+    default const X: u8 ;\n+    default type X;\n+    default fn foo();\n+    pub const X: u8 ;\n+    pub type X;\n+    pub fn foo();\n+    pub default const X: u8 ;\n+    pub default type X;\n+    pub default fn foo();\n+}"}, {"sha": "e60cc153e670fbe0103316d217aacc470b2f4937", "filename": "src/test/ui/parser/bounds-lifetime-where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -5,6 +5,6 @@ type A where 'a:, = u8; // OK\n type A where 'a: 'b + 'c = u8; // OK\n type A where = u8; // OK\n type A where 'a: 'b + = u8; // OK\n-type A where , = u8; //~ ERROR expected one of `=`, lifetime, or type, found `,`\n+type A where , = u8; //~ ERROR expected one of `;`, `=`, lifetime, or type, found `,`\n \n fn main() {}"}, {"sha": "950fa46c66b7e3bd38722b31bfb0771fb57ecb77", "filename": "src/test/ui/parser/bounds-lifetime-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `=`, lifetime, or type, found `,`\n+error: expected one of `;`, `=`, lifetime, or type, found `,`\n   --> $DIR/bounds-lifetime-where.rs:8:14\n    |\n LL | type A where , = u8;\n-   |              ^ expected one of `=`, lifetime, or type\n+   |              ^ expected one of `;`, `=`, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "9db4111fbabd9167f28cdd21544f2a4192b70787", "filename": "src/test/ui/parser/item-free-type-bounds-semantic-fail.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-semantic-fail.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -0,0 +1,20 @@\n+fn main() {}\n+\n+fn semantics() {\n+    type A: Ord;\n+    //~^ ERROR bounds on `type`s in this context have no effect\n+    //~| ERROR free type alias without body\n+    type B: Ord = u8;\n+    //~^ ERROR bounds on `type`s in this context have no effect\n+    type C: Ord where 'static: 'static = u8;\n+    //~^ ERROR bounds on `type`s in this context have no effect\n+    type D<_T>: Ord;\n+    //~^ ERROR bounds on `type`s in this context have no effect\n+    //~| ERROR free type alias without body\n+    type E<_T>: Ord = u8;\n+    //~^ ERROR bounds on `type`s in this context have no effect\n+    //~| ERROR type parameter `_T` is unused\n+    type F<_T>: Ord where 'static: 'static = u8;\n+    //~^ ERROR bounds on `type`s in this context have no effect\n+    //~| ERROR type parameter `_T` is unused\n+}"}, {"sha": "1b086512891f21a9b3b40af542ce1ec0bcb8bc6c", "filename": "src/test/ui/parser/item-free-type-bounds-semantic-fail.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-semantic-fail.stderr?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -0,0 +1,67 @@\n+error: free type alias without body\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:4:5\n+   |\n+LL |     type A: Ord;\n+   |     ^^^^^^^^^^^-\n+   |                |\n+   |                help: provide a definition for the type: `= <type>;`\n+\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:4:13\n+   |\n+LL |     type A: Ord;\n+   |             ^^^\n+\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:7:13\n+   |\n+LL |     type B: Ord = u8;\n+   |             ^^^\n+\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:9:13\n+   |\n+LL |     type C: Ord where 'static: 'static = u8;\n+   |             ^^^\n+\n+error: free type alias without body\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:11:5\n+   |\n+LL |     type D<_T>: Ord;\n+   |     ^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    help: provide a definition for the type: `= <type>;`\n+\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:11:17\n+   |\n+LL |     type D<_T>: Ord;\n+   |                 ^^^\n+\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:14:17\n+   |\n+LL |     type E<_T>: Ord = u8;\n+   |                 ^^^\n+\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:17:17\n+   |\n+LL |     type F<_T>: Ord where 'static: 'static = u8;\n+   |                 ^^^\n+\n+error[E0091]: type parameter `_T` is unused\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:14:12\n+   |\n+LL |     type E<_T>: Ord = u8;\n+   |            ^^ unused type parameter\n+\n+error[E0091]: type parameter `_T` is unused\n+  --> $DIR/item-free-type-bounds-semantic-fail.rs:17:12\n+   |\n+LL |     type F<_T>: Ord where 'static: 'static = u8;\n+   |            ^^ unused type parameter\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0091`."}, {"sha": "58fc926d08f3e55975be5a4ae66efa60ba04bd79", "filename": "src/test/ui/parser/item-free-type-bounds-syntactic-pass.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae50725dc3e272a46726f548aaff801a4f456563/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-type-bounds-syntactic-pass.rs?ref=ae50725dc3e272a46726f548aaff801a4f456563", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn syntax() {\n+    type A: Ord;\n+    type B: Ord = u8;\n+    type C: Ord where 'static: 'static = u8;\n+    type D<_T>: Ord;\n+    type E<_T>: Ord = u8;\n+    type F<_T>: Ord where 'static: 'static = u8;\n+}"}]}