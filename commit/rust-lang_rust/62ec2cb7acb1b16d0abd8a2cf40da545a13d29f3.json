{"sha": "62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZWMyY2I3YWNiMWIxNmQwYWJkOGEyY2Y0MGRhNTQ1YTEzZDI5ZjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T22:58:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T23:40:01Z"}, "message": "Remove some more `cfg(test)`s", "tree": {"sha": "7692fc594e177ae978e2b3951600e8a0edc41a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7692fc594e177ae978e2b3951600e8a0edc41a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "html_url": "https://github.com/rust-lang/rust/commit/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0d6ee271a34d2329235b9a04cf4a421d9026cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0d6ee271a34d2329235b9a04cf4a421d9026cd", "html_url": "https://github.com/rust-lang/rust/commit/3d0d6ee271a34d2329235b9a04cf4a421d9026cd"}], "stats": {"total": 105, "additions": 45, "deletions": 60}, "files": [{"sha": "53071df855297e30f17598f8dd03d159f412a151", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -266,8 +266,10 @@ impl Cache {\n                         .expect(\"invalid type mapped\");\n         stepcache.get(step).cloned()\n     }\n+}\n \n-    #[cfg(test)]\n+#[cfg(test)]\n+impl Cache {\n     pub fn all<S: Ord + Copy + Step>(&mut self) -> Vec<(S, S::Output)> {\n         let cache = self.0.get_mut();\n         let type_id = TypeId::of::<S>();\n@@ -279,7 +281,6 @@ impl Cache {\n         v\n     }\n \n-    #[cfg(test)]\n     pub fn contains<S: Step>(&self) -> bool {\n         self.0.borrow().contains_key(&TypeId::of::<S>())\n     }"}, {"sha": "9a6c57d286970d997a9ca4612f30b0cab3bd6383", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -201,7 +201,6 @@ fn test_split_off() {\n     }\n }\n \n-#[cfg(test)]\n fn fuzz_test(sz: i32) {\n     let mut m: LinkedList<_> = LinkedList::new();\n     let mut v = vec![];"}, {"sha": "8a26454c389d7c6855b661199084f7e386ebd97b", "filename": "src/liballoc/tests/linked_list.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fliballoc%2Ftests%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fliballoc%2Ftests%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flinked_list.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -40,12 +40,10 @@ fn test_basic() {\n     assert_eq!(n.pop_front(), Some(1));\n }\n \n-#[cfg(test)]\n fn generate_test() -> LinkedList<i32> {\n     list_from(&[0, 1, 2, 3, 4, 5, 6])\n }\n \n-#[cfg(test)]\n fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> {\n     v.iter().cloned().collect()\n }"}, {"sha": "1bbcca97b3c78056ee0a8d818d09eae5d4538ee6", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -44,7 +44,6 @@ fn test_simple() {\n     assert_eq!(d[3], 4);\n }\n \n-#[cfg(test)]\n fn test_parameterized<T: Clone + PartialEq + Debug>(a: T, b: T, c: T, d: T) {\n     let mut deq = VecDeque::new();\n     assert_eq!(deq.len(), 0);"}, {"sha": "41e6b72953e83211d8dbe9d4ba61c815f071e89a", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -127,11 +127,6 @@ impl<Node: Idx> Dominators<Node> {\n         // FIXME -- could be optimized by using post-order-rank\n         self.dominators(node).any(|n| n == dom)\n     }\n-\n-    #[cfg(test)]\n-    fn all_immediate_dominators(&self) -> &IndexVec<Node, Option<Node>> {\n-        &self.immediate_dominators\n-    }\n }\n \n pub struct Iter<'dom, Node: Idx> {"}, {"sha": "92301ff6526d107dd454b3aae881b7c9a2671fd5", "filename": "src/librustc_data_structures/graph/dominators/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Ftests.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -1,13 +1,13 @@\n-use super::super::tests::TestGraph;\n-\n use super::*;\n \n+use super::super::tests::TestGraph;\n+\n #[test]\n fn diamond() {\n     let graph = TestGraph::new(0, &[(0, 1), (0, 2), (1, 3), (2, 3)]);\n \n     let dominators = dominators(&graph);\n-    let immediate_dominators = dominators.all_immediate_dominators();\n+    let immediate_dominators = &dominators.immediate_dominators;\n     assert_eq!(immediate_dominators[0], Some(0));\n     assert_eq!(immediate_dominators[1], Some(0));\n     assert_eq!(immediate_dominators[2], Some(0));\n@@ -22,7 +22,7 @@ fn paper() {\n                                  (2, 1)]);\n \n     let dominators = dominators(&graph);\n-    let immediate_dominators = dominators.all_immediate_dominators();\n+    let immediate_dominators = &dominators.immediate_dominators;\n     assert_eq!(immediate_dominators[0], None); // <-- note that 0 is not in graph\n     assert_eq!(immediate_dominators[1], Some(6));\n     assert_eq!(immediate_dominators[2], Some(6));"}, {"sha": "e20466572a26f43d1c4785954022e6fda610b0f4", "filename": "src/librustc_data_structures/obligation_forest/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftests.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -1,6 +1,4 @@\n-#![cfg(test)]\n-\n-use super::{Error, DoCompleted, ObligationForest, ObligationProcessor, Outcome, ProcessResult};\n+use super::*;\n \n use std::fmt;\n use std::marker::PhantomData;"}, {"sha": "3645ab88d552f35c32c2748d9be9214131d73255", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -384,21 +384,6 @@ pub fn vis_to_string(v: &ast::Visibility) -> String {\n     to_string(|s| s.print_visibility(v))\n }\n \n-#[cfg(test)]\n-fn fun_to_string(decl: &ast::FnDecl,\n-                     header: ast::FnHeader,\n-                     name: ast::Ident,\n-                     generics: &ast::Generics)\n-                     -> String {\n-    to_string(|s| {\n-        s.head(\"\");\n-        s.print_fn(decl, header, Some(name),\n-                   generics, &source_map::dummy_spanned(ast::VisibilityKind::Inherited));\n-        s.end(); // Close the head box\n-        s.end(); // Close the outer box\n-    })\n-}\n-\n fn block_to_string(blk: &ast::Block) -> String {\n     to_string(|s| {\n         // containing cbox, will be closed by print-block at }\n@@ -421,11 +406,6 @@ pub fn attribute_to_string(attr: &ast::Attribute) -> String {\n     to_string(|s| s.print_attribute(attr))\n }\n \n-#[cfg(test)]\n-fn variant_to_string(var: &ast::Variant) -> String {\n-    to_string(|s| s.print_variant(var))\n-}\n-\n pub fn arg_to_string(arg: &ast::Arg) -> String {\n     to_string(|s| s.print_arg(arg, false))\n }"}, {"sha": "082a430e0ede1714345fc441b39362e8e19081ab", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -5,6 +5,22 @@ use crate::source_map;\n use crate::with_default_globals;\n use syntax_pos;\n \n+fn fun_to_string(\n+    decl: &ast::FnDecl, header: ast::FnHeader, name: ast::Ident, generics: &ast::Generics\n+) -> String {\n+    to_string(|s| {\n+        s.head(\"\");\n+        s.print_fn(decl, header, Some(name),\n+                   generics, &source_map::dummy_spanned(ast::VisibilityKind::Inherited));\n+        s.end(); // Close the head box\n+        s.end(); // Close the outer box\n+    })\n+}\n+\n+fn variant_to_string(var: &ast::Variant) -> String {\n+    to_string(|s| s.print_variant(var))\n+}\n+\n #[test]\n fn test_fun_to_string() {\n     with_default_globals(|| {"}, {"sha": "ef66c4df99da7a7ceb859723972af870e525c9f0", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -380,28 +380,6 @@ pub struct TestOpts {\n     pub options: Options,\n }\n \n-impl TestOpts {\n-    #[cfg(test)]\n-    fn new() -> TestOpts {\n-        TestOpts {\n-            list: false,\n-            filter: None,\n-            filter_exact: false,\n-            exclude_should_panic: false,\n-            run_ignored: RunIgnored::No,\n-            run_tests: false,\n-            bench_benchmarks: false,\n-            logfile: None,\n-            nocapture: false,\n-            color: AutoColor,\n-            format: OutputFormat::Pretty,\n-            test_threads: None,\n-            skip: vec![],\n-            options: Options::new(),\n-        }\n-    }\n-}\n-\n /// Result of parsing the options.\n pub type OptRes = Result<TestOpts, String>;\n "}, {"sha": "f574743e4b6698c5f16fdbdd1c4ee8054dd5c89e", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=62ec2cb7acb1b16d0abd8a2cf40da545a13d29f3", "patch": "@@ -7,6 +7,27 @@ use crate::test::{\n };\n use std::sync::mpsc::channel;\n \n+impl TestOpts {\n+    fn new() -> TestOpts {\n+        TestOpts {\n+            list: false,\n+            filter: None,\n+            filter_exact: false,\n+            exclude_should_panic: false,\n+            run_ignored: RunIgnored::No,\n+            run_tests: false,\n+            bench_benchmarks: false,\n+            logfile: None,\n+            nocapture: false,\n+            color: AutoColor,\n+            format: OutputFormat::Pretty,\n+            test_threads: None,\n+            skip: vec![],\n+            options: Options::new(),\n+        }\n+    }\n+}\n+\n fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n     vec![\n         TestDescAndFn {"}]}