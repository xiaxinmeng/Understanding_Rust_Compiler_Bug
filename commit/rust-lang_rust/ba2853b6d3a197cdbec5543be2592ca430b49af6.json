{"sha": "ba2853b6d3a197cdbec5543be2592ca430b49af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMjg1M2I2ZDNhMTk3Y2RiZWM1NTQzYmUyNTkyY2E0MzBiNDlhZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-12T03:20:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-12T03:20:16Z"}, "message": "Auto merge of #58246 - pmccarter:master, r=oli-obk\n\nMake `saturating_add` and `saturating_sub` `const` functions\n\nFixes #58030", "tree": {"sha": "69790b3a32094e64097afa41697decf4cfdf578d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69790b3a32094e64097afa41697decf4cfdf578d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2853b6d3a197cdbec5543be2592ca430b49af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2853b6d3a197cdbec5543be2592ca430b49af6", "html_url": "https://github.com/rust-lang/rust/commit/ba2853b6d3a197cdbec5543be2592ca430b49af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2853b6d3a197cdbec5543be2592ca430b49af6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ca0b9f6335db824e44629be1cafb6e3fcc4628", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ca0b9f6335db824e44629be1cafb6e3fcc4628", "html_url": "https://github.com/rust-lang/rust/commit/16ca0b9f6335db824e44629be1cafb6e3fcc4628"}, {"sha": "b04d8aa7744ac797736a543a3a425a279a58ad56", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04d8aa7744ac797736a543a3a425a279a58ad56", "html_url": "https://github.com/rust-lang/rust/commit/b04d8aa7744ac797736a543a3a425a279a58ad56"}], "stats": {"total": 198, "additions": 177, "deletions": 21}, "files": [{"sha": "d34173dafb3513f33018d39ba54ca2ae2a3c0297", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 95, "deletions": 20, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ba2853b6d3a197cdbec5543be2592ca430b49af6", "patch": "@@ -882,17 +882,38 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_add(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_add(rhs) {\n                     Some(x) => x,\n                     None if rhs >= 0 => Self::max_value(),\n                     None => Self::min_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_add(self, rhs)\n-                }\n+            }\n+\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at the numeric\n+bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n+assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n+\"::max_value());\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_add(self, rhs: Self) -> Self {\n+                intrinsics::saturating_add(self, rhs)\n             }\n         }\n \n@@ -912,17 +933,36 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_sub(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_sub(rhs) {\n                     Some(x) => x,\n                     None if rhs >= 0 => Self::min_value(),\n                     None => Self::max_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_sub(self, rhs)\n-                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n+numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n+assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n+\"::min_value());\",\n+$EndFeature, \"\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_sub(self, rhs: Self) -> Self {\n+                intrinsics::saturating_sub(self, rhs)\n             }\n         }\n \n@@ -2753,16 +2793,34 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_add(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_add(rhs) {\n                     Some(x) => x,\n                     None => Self::max_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_add(self, rhs)\n-                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at\n+the numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n+assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n+```\"),\n+\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_add(self, rhs: Self) -> Self {\n+                intrinsics::saturating_add(self, rhs)\n             }\n         }\n \n@@ -2780,16 +2838,33 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_sub(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_sub(rhs) {\n                     Some(x) => x,\n                     None => Self::min_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_sub(self, rhs)\n-                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n+at the numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(27), 73);\n+assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_sub(self, rhs: Self) -> Self {\n+                intrinsics::saturating_sub(self, rhs)\n             }\n         }\n "}, {"sha": "dcbf6a52ba9f5fc033dda40caff245626e1c2c77", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=ba2853b6d3a197cdbec5543be2592ca430b49af6", "patch": "@@ -4,7 +4,7 @@\n \n use syntax::symbol::Symbol;\n use rustc::ty;\n-use rustc::ty::layout::{LayoutOf, Primitive};\n+use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n     EvalResult, EvalErrorKind, Scalar,\n@@ -122,6 +122,49 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n                 }\n             }\n+            \"saturating_add\" | \"saturating_sub\" => {\n+                let l = self.read_immediate(args[0])?;\n+                let r = self.read_immediate(args[1])?;\n+                let is_add = intrinsic_name == \"saturating_add\";\n+                let (val, overflowed) = self.binary_op_imm(if is_add {\n+                    BinOp::Add\n+                } else {\n+                    BinOp::Sub\n+                }, l, r)?;\n+                let val = if overflowed {\n+                    let num_bits = l.layout.size.bits();\n+                    if l.layout.abi.is_signed() {\n+                        // For signed ints the saturated value depends on the sign of the first\n+                        // term since the sign of the second term can be inferred from this and\n+                        // the fact that the operation has overflowed (if either is 0 no\n+                        // overflow can occur)\n+                        let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n+                        let first_term_positive = first_term & (1 << (num_bits-1)) == 0;\n+                        if first_term_positive {\n+                            // Negative overflow not possible since the positive first term\n+                            // can only increase an (in range) negative term for addition\n+                            // or corresponding negated positive term for subtraction\n+                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1,  // max positive\n+                                Size::from_bits(num_bits))\n+                        } else {\n+                            // Positive overflow not possible for similar reason\n+                            // max negative\n+                            Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n+                        }\n+                    } else {  // unsigned\n+                        if is_add {\n+                            // max unsigned\n+                            Scalar::from_uint(u128::max_value() >> (128 - num_bits),\n+                                Size::from_bits(num_bits))\n+                        } else {  // underflow to 0\n+                            Scalar::from_uint(0u128, Size::from_bits(num_bits))\n+                        }\n+                    }\n+                } else {\n+                    val\n+                };\n+                self.write_scalar(val, dest)?;\n+            }\n             \"unchecked_shl\" | \"unchecked_shr\" => {\n                 let l = self.read_immediate(args[0])?;\n                 let r = self.read_immediate(args[1])?;"}, {"sha": "b116c327f5bab3bb66e7d8a3e68fd69d9d14bde1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ba2853b6d3a197cdbec5543be2592ca430b49af6", "patch": "@@ -836,6 +836,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 | \"add_with_overflow\"\n                                 | \"sub_with_overflow\"\n                                 | \"mul_with_overflow\"\n+                                | \"saturating_add\"\n+                                | \"saturating_sub\"\n                                 // no need to check feature gates, intrinsics are only callable\n                                 // from the libstd or with forever unstable feature gates\n                                 => is_const_fn = true,"}, {"sha": "d8dc6c2845b28f62dc3439afcd9f676eb55af589", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ba2853b6d3a197cdbec5543be2592ca430b49af6", "patch": "@@ -374,6 +374,8 @@ fn is_intrinsic_whitelisted(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool\n         | \"overflowing_add\" // ~> .wrapping_add\n         | \"overflowing_sub\" // ~> .wrapping_sub\n         | \"overflowing_mul\" // ~> .wrapping_mul\n+        | \"saturating_add\" // ~> .saturating_add\n+        | \"saturating_sub\" // ~> .saturating_sub\n         | \"unchecked_shl\" // ~> .wrapping_shl\n         | \"unchecked_shr\" // ~> .wrapping_shr\n         | \"rotate_left\" // ~> .rotate_left"}, {"sha": "dae4c7216b2c03c61005621d3cecc7b898ea32a8", "filename": "src/test/run-pass/const-int-saturating-arith.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2853b6d3a197cdbec5543be2592ca430b49af6/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs?ref=ba2853b6d3a197cdbec5543be2592ca430b49af6", "patch": "@@ -0,0 +1,34 @@\n+// ignore-emscripten no i128 support\n+#![feature(const_saturating_int_methods)]\n+\n+const INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n+const INT_U32: u32 = u32::max_value().saturating_add(1);\n+const INT_U128: u128 = u128::max_value().saturating_add(1);\n+const INT_I128: i128 = i128::max_value().saturating_add(1);\n+const INT_I128_NEG: i128 = i128::min_value().saturating_add(-1);\n+\n+const INT_U32_NO_SUB: u32 = (42 as u32).saturating_sub(2);\n+const INT_U32_SUB: u32 = (1 as u32).saturating_sub(2);\n+const INT_I32_NO_SUB: i32 = (-42 as i32).saturating_sub(2);\n+const INT_I32_NEG_SUB: i32 = i32::min_value().saturating_sub(1);\n+const INT_I32_POS_SUB: i32 = i32::max_value().saturating_sub(-1);\n+const INT_U128_SUB: u128 = (0 as u128).saturating_sub(1);\n+const INT_I128_NEG_SUB: i128 = i128::min_value().saturating_sub(1);\n+const INT_I128_POS_SUB: i128 = i128::max_value().saturating_sub(-1);\n+\n+fn main() {\n+    assert_eq!(INT_U32_NO, 44);\n+    assert_eq!(INT_U32, u32::max_value());\n+    assert_eq!(INT_U128, u128::max_value());\n+    assert_eq!(INT_I128, i128::max_value());\n+    assert_eq!(INT_I128_NEG, i128::min_value());\n+\n+    assert_eq!(INT_U32_NO_SUB, 40);\n+    assert_eq!(INT_U32_SUB, 0);\n+    assert_eq!(INT_I32_NO_SUB, -44);\n+    assert_eq!(INT_I32_NEG_SUB, i32::min_value());\n+    assert_eq!(INT_I32_POS_SUB, i32::max_value());\n+    assert_eq!(INT_U128_SUB, 0);\n+    assert_eq!(INT_I128_NEG_SUB, i128::min_value());\n+    assert_eq!(INT_I128_POS_SUB, i128::max_value());\n+}"}]}