{"sha": "fd2448b5fc9908ba5bdde152540e4935c48a7a86", "node_id": "C_kwDOAAsO6NoAKGZkMjQ0OGI1ZmM5OTA4YmE1YmRkZTE1MjU0MGU0OTM1YzQ4YTdhODY", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T05:31:46Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T05:38:32Z"}, "message": "Use a let-chain in _session::output (nfc)", "tree": {"sha": "0d181d2d2115ac62f1dcbe5e9d0e1d923db86387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d181d2d2115ac62f1dcbe5e9d0e1d923db86387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd2448b5fc9908ba5bdde152540e4935c48a7a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2448b5fc9908ba5bdde152540e4935c48a7a86", "html_url": "https://github.com/rust-lang/rust/commit/fd2448b5fc9908ba5bdde152540e4935c48a7a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd2448b5fc9908ba5bdde152540e4935c48a7a86/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ca9ba123de53e15df69197fb7f123d97cb9532", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca9ba123de53e15df69197fb7f123d97cb9532", "html_url": "https://github.com/rust-lang/rust/commit/d3ca9ba123de53e15df69197fb7f123d97cb9532"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "bd4e37f1ab794847b699b47bba63429fdc3d4254", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd2448b5fc9908ba5bdde152540e4935c48a7a86/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2448b5fc9908ba5bdde152540e4935c48a7a86/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=fd2448b5fc9908ba5bdde152540e4935c48a7a86", "patch": "@@ -1,5 +1,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(derive_default_enum)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "e5e6579d75b10604d584089f2a2f970c34eb9a78", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd2448b5fc9908ba5bdde152540e4935c48a7a86/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2448b5fc9908ba5bdde152540e4935c48a7a86/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=fd2448b5fc9908ba5bdde152540e4935c48a7a86", "patch": "@@ -183,24 +183,18 @@ pub fn default_output_for_target(sess: &Session) -> CrateType {\n \n /// Checks if target supports crate_type as output\n pub fn invalid_output_for_target(sess: &Session, crate_type: CrateType) -> bool {\n-    match crate_type {\n-        CrateType::Cdylib | CrateType::Dylib | CrateType::ProcMacro => {\n-            if !sess.target.dynamic_linking {\n-                return true;\n-            }\n-            if sess.crt_static(Some(crate_type)) && !sess.target.crt_static_allows_dylibs {\n-                return true;\n-            }\n+    if let CrateType::Cdylib | CrateType::Dylib | CrateType::ProcMacro = crate_type {\n+        if !sess.target.dynamic_linking {\n+            return true;\n         }\n-        _ => {}\n-    }\n-    if sess.target.only_cdylib {\n-        match crate_type {\n-            CrateType::ProcMacro | CrateType::Dylib => return true,\n-            _ => {}\n+        if sess.crt_static(Some(crate_type)) && !sess.target.crt_static_allows_dylibs {\n+            return true;\n         }\n     }\n-    if !sess.target.executables && crate_type == CrateType::Executable {\n+    if let CrateType::ProcMacro | CrateType::Dylib = crate_type && sess.target.only_cdylib {\n+        return true;\n+    }\n+    if let CrateType::Executable = crate_type && !sess.target.executables {\n         return true;\n     }\n "}]}