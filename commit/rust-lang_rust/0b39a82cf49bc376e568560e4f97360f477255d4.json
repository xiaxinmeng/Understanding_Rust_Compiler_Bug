{"sha": "0b39a82cf49bc376e568560e4f97360f477255d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMzlhODJjZjQ5YmMzNzZlNTY4NTYwZTRmOTczNjBmNDc3MjU1ZDQ=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-06-23T23:57:23Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-06-24T05:57:37Z"}, "message": "in which the trivial-casts word to the wise is tucked into a help note\n\nThe top level message shouldn't be too long; the\nreplaced-by-coercion/temporary-variable advice can live in a note. Also,\ndon't mention type ascription when it's not actually available as a real\nthing. (The current state of discussion on the type ascription tracking\nissue #23416 makes one rather suspect it will never be a stable thing in\nits current form, but that's not for us to adjudicate in this commit.)\n\nWhile we're here, yank out the differentiating parts of the\nnumeric/other conditional and only have one codepath emitting the\ndiagnostic.", "tree": {"sha": "c0c236f114ac1bcbf55b099a33eec403feb39d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c236f114ac1bcbf55b099a33eec403feb39d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b39a82cf49bc376e568560e4f97360f477255d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b39a82cf49bc376e568560e4f97360f477255d4", "html_url": "https://github.com/rust-lang/rust/commit/0b39a82cf49bc376e568560e4f97360f477255d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b39a82cf49bc376e568560e4f97360f477255d4/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a417518173bae739d1aef50c6cf1a1e3bd4c4319", "url": "https://api.github.com/repos/rust-lang/rust/commits/a417518173bae739d1aef50c6cf1a1e3bd4c4319", "html_url": "https://github.com/rust-lang/rust/commit/a417518173bae739d1aef50c6cf1a1e3bd4c4319"}], "stats": {"total": 136, "additions": 115, "deletions": 21}, "files": [{"sha": "07e19c84a95073dff0b4734812dd885ea28667c8", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=0b39a82cf49bc376e568560e4f97360f477255d4", "patch": "@@ -365,28 +365,27 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     fn trivial_cast_lint(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {\n         let t_cast = self.cast_ty;\n         let t_expr = self.expr_ty;\n-        if t_cast.is_numeric() && t_expr.is_numeric() {\n-            fcx.tcx.lint_node(\n-                lint::builtin::TRIVIAL_NUMERIC_CASTS,\n-                self.expr.id,\n-                self.span,\n-                &format!(\"trivial numeric cast: `{}` as `{}`. Cast can be \\\n-                          replaced by coercion, this might require type \\\n-                          ascription or a temporary variable\",\n-                         fcx.ty_to_string(t_expr),\n-                         fcx.ty_to_string(t_cast)));\n+        let type_asc_or = if fcx.tcx.features().type_ascription {\n+            \"type ascription or \"\n         } else {\n-            fcx.tcx.lint_node(\n-                lint::builtin::TRIVIAL_CASTS,\n-                self.expr.id,\n-                self.span,\n-                &format!(\"trivial cast: `{}` as `{}`. Cast can be \\\n-                          replaced by coercion, this might require type \\\n-                          ascription or a temporary variable\",\n-                         fcx.ty_to_string(t_expr),\n-                         fcx.ty_to_string(t_cast)));\n-        }\n-\n+            \"\"\n+        };\n+        let (adjective, lint) = if t_cast.is_numeric() && t_expr.is_numeric() {\n+            (\"numeric \", lint::builtin::TRIVIAL_NUMERIC_CASTS)\n+        } else {\n+            (\"\", lint::builtin::TRIVIAL_CASTS)\n+        };\n+        let mut err = fcx.tcx.struct_span_lint_node(\n+            lint,\n+            self.expr.id,\n+            self.span,\n+            &format!(\"trivial {}cast: `{}` as `{}`\",\n+                     adjective,\n+                     fcx.ty_to_string(t_expr),\n+                     fcx.ty_to_string(t_cast)));\n+        err.help(&format!(\"cast can be replaced by coercion; this might \\\n+                           require {}a temporary variable\", type_asc_or));\n+        err.emit();\n     }\n \n     pub fn check(mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {"}, {"sha": "fba3724ae49076702b2488fb9bf9cf15df59f720", "filename": "src/test/ui/lint/trivial-casts-featuring-type-ascription.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.rs?ref=0b39a82cf49bc376e568560e4f97360f477255d4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(trivial_casts, trivial_numeric_casts)]\n+#![feature(type_ascription)]\n+\n+fn main() {\n+    let lugubrious = 12i32 as i32;\n+    //~^ ERROR trivial numeric cast\n+    let haunted: &u32 = &99;\n+    let _ = haunted as *const u32;\n+    //~^ ERROR trivial cast\n+}"}, {"sha": "a77135c875d795b27cd79ea78d82a62f58bfb9b5", "filename": "src/test/ui/lint/trivial-casts-featuring-type-ascription.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr?ref=0b39a82cf49bc376e568560e4f97360f477255d4", "patch": "@@ -0,0 +1,28 @@\n+error: trivial numeric cast: `i32` as `i32`\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:15:22\n+   |\n+LL |     let lugubrious = 12i32 as i32;\n+   |                      ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:11:24\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n+\n+error: trivial cast: `&u32` as `*const u32`\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:18:13\n+   |\n+LL |     let _ = haunted as *const u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:11:9\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |         ^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "759b282c0da928dbd4feb247d9f33f8bb48d914d", "filename": "src/test/ui/lint/trivial-casts.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.rs?ref=0b39a82cf49bc376e568560e4f97360f477255d4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(trivial_casts, trivial_numeric_casts)]\n+\n+fn main() {\n+    let lugubrious = 12i32 as i32;\n+    //~^ ERROR trivial numeric cast\n+    let haunted: &u32 = &99;\n+    let _ = haunted as *const u32;\n+    //~^ ERROR trivial cast\n+}"}, {"sha": "d52869f4bed61372b3806e52b472682cfe90142c", "filename": "src/test/ui/lint/trivial-casts.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b39a82cf49bc376e568560e4f97360f477255d4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr?ref=0b39a82cf49bc376e568560e4f97360f477255d4", "patch": "@@ -0,0 +1,28 @@\n+error: trivial numeric cast: `i32` as `i32`\n+  --> $DIR/trivial-casts.rs:14:22\n+   |\n+LL |     let lugubrious = 12i32 as i32;\n+   |                      ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts.rs:11:24\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n+\n+error: trivial cast: `&u32` as `*const u32`\n+  --> $DIR/trivial-casts.rs:17:13\n+   |\n+LL |     let _ = haunted as *const u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts.rs:11:9\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |         ^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n+\n+error: aborting due to 2 previous errors\n+"}]}