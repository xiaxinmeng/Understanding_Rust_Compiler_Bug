{"sha": "2c6f137d9a2ee2d53149876317ea9775ee23dd30", "node_id": "C_kwDOAAsO6NoAKDJjNmYxMzdkOWEyZWUyZDUzMTQ5ODc2MzE3ZWE5Nzc1ZWUyM2RkMzA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T19:10:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-01T21:41:58Z"}, "message": "Add loop tests.", "tree": {"sha": "01be888c708e4c31dd054d34601cbbce98cc78f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01be888c708e4c31dd054d34601cbbce98cc78f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6f137d9a2ee2d53149876317ea9775ee23dd30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6f137d9a2ee2d53149876317ea9775ee23dd30", "html_url": "https://github.com/rust-lang/rust/commit/2c6f137d9a2ee2d53149876317ea9775ee23dd30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6f137d9a2ee2d53149876317ea9775ee23dd30/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6f97c43d0462272d7701a6ccfcf89b6ceafc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6f97c43d0462272d7701a6ccfcf89b6ceafc1f", "html_url": "https://github.com/rust-lang/rust/commit/ae6f97c43d0462272d7701a6ccfcf89b6ceafc1f"}], "stats": {"total": 1585, "additions": 1585, "deletions": 0}, "files": [{"sha": "78e5502f39d6487ff2c74f3f7907eb83ef3e9bf7", "filename": "tests/mir-opt/pre-codegen/loops.int_range.PreCodegen.after.mir", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir?ref=2c6f137d9a2ee2d53149876317ea9775ee23dd30", "patch": "@@ -0,0 +1,70 @@\n+// MIR for `int_range` after PreCodegen\n+\n+fn int_range(_1: usize, _2: usize) -> () {\n+    debug start => _1;                   // in scope 0 at $DIR/loops.rs:+0:18: +0:23\n+    debug end => _2;                     // in scope 0 at $DIR/loops.rs:+0:32: +0:35\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:44: +0:44\n+    let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _6: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _7: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _9: ();                          // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    scope 1 {\n+        debug iter => _4;                // in scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        let _8: usize;                   // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug i => _8;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:7:14: 7:24\n+            debug self => _5;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        }\n+    }\n+    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:7:14: 7:24\n+        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        _3 = std::ops::Range::<usize> { start: _1, end: _2 }; // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        StorageLive(_4);                 // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        _4 = move _3;                    // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb1: {\n+        StorageLive(_6);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        _5 = &mut _4;                    // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        _6 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_5) -> bb2; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _7 = discriminant(_6);           // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb6]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+\n+    bb3: {\n+        StorageDead(_6);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n+    }\n+\n+    bb4: {\n+        _8 = ((_6 as Some).0: usize);    // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _9 = opaque::<usize>(_8) -> bb5; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:8:9: 8:15\n+                                         // + literal: Const { ty: fn(usize) {opaque::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        StorageDead(_6);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb6: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+}"}, {"sha": "a09fcd9c990ed3988b9ad22f9bb88011881fe552", "filename": "tests/mir-opt/pre-codegen/loops.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs?ref=2c6f137d9a2ee2d53149876317ea9775ee23dd30", "patch": "@@ -0,0 +1,54 @@\n+// compile-flags: -O -Zmir-opt-level=2 -g\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn int_range(start: usize, end: usize) {\n+    for i in start..end {\n+        opaque(i)\n+    }\n+}\n+\n+pub fn vec_range(mut v: Vec<impl Sized>) {\n+    for i in 0..v.len() {\n+        let x = &mut v[i];\n+        opaque((i, x))\n+    }\n+    for i in 0..v.len() {\n+        let x = &v[i];\n+        opaque((i, x))\n+    }\n+}\n+\n+pub fn vec_iter(mut v: Vec<impl Sized>) {\n+    for x in v.iter_mut() {\n+        opaque(x)\n+    }\n+    for x in v.iter() {\n+        opaque(x)\n+    }\n+}\n+\n+pub fn vec_iter_enumerate(mut v: Vec<impl Sized>) {\n+    for (i, x) in v.iter_mut().enumerate() {\n+        opaque((i, x))\n+    }\n+    for (i, x) in v.iter().enumerate() {\n+        opaque((i, x))\n+    }\n+}\n+\n+pub fn vec_move(mut v: Vec<impl Sized>) {\n+    for x in v {\n+        opaque(x)\n+    }\n+}\n+\n+#[inline(never)]\n+fn opaque(_: impl Sized) {}\n+\n+// EMIT_MIR loops.int_range.PreCodegen.after.mir\n+// EMIT_MIR loops.vec_range.PreCodegen.after.mir\n+// EMIT_MIR loops.vec_iter.PreCodegen.after.mir\n+// EMIT_MIR loops.vec_iter_enumerate.PreCodegen.after.mir\n+// EMIT_MIR loops.vec_move.PreCodegen.after.mir"}, {"sha": "5fdd0363f3c9ba17c8482eb4e15182ffc83c215b", "filename": "tests/mir-opt/pre-codegen/loops.vec_iter.PreCodegen.after.mir", "status": "added", "additions": 570, "deletions": 0, "changes": 570, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_iter.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_iter.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_iter.PreCodegen.after.mir?ref=2c6f137d9a2ee2d53149876317ea9775ee23dd30", "patch": "@@ -0,0 +1,570 @@\n+// MIR for `vec_iter` after PreCodegen\n+\n+fn vec_iter(_1: Vec<impl Sized>) -> () {\n+    debug v => _1;                       // in scope 0 at $DIR/loops.rs:+0:17: +0:22\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:41: +0:41\n+    let mut _2: &mut std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    let mut _14: &mut [impl Sized];      // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    let mut _26: std::slice::IterMut<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    let mut _27: std::slice::IterMut<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    let mut _28: &mut std::slice::IterMut<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    let mut _29: std::option::Option<&mut impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    let mut _30: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let mut _31: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let _43: &[impl Sized];              // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let mut _54: std::slice::Iter<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let mut _55: std::slice::Iter<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let mut _56: &mut std::slice::Iter<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let mut _57: std::option::Option<&impl Sized>; // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let mut _58: isize;                  // in scope 0 at $DIR/loops.rs:+4:5: +6:6\n+    let _60: ();                         // in scope 0 at $DIR/loops.rs:+4:14: +4:22\n+    let _62: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:26\n+    scope 1 {\n+        debug iter => _27;               // in scope 1 at $DIR/loops.rs:+1:14: +1:26\n+        let _61: &mut impl Sized;        // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _61;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+    }\n+    scope 3 {\n+        debug iter => _55;               // in scope 3 at $DIR/loops.rs:+4:14: +4:22\n+        let _59: &impl Sized;            // in scope 3 at $DIR/loops.rs:+4:9: +4:10\n+        scope 4 {\n+            debug x => _59;              // in scope 4 at $DIR/loops.rs:+4:9: +4:10\n+        }\n+    }\n+    scope 5 (inlined <Vec<impl Sized> as DerefMut>::deref_mut) { // at $DIR/loops.rs:24:14: 24:26\n+        debug self => _2;                // in scope 5 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _7: *mut impl Sized;     // in scope 5 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _8: usize;               // in scope 5 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        scope 6 {\n+            scope 7 (inlined Vec::<impl Sized>::as_mut_ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug self => _2;        // in scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                let mut _3: &alloc::raw_vec::RawVec<impl Sized>; // in scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                scope 8 (inlined alloc::raw_vec::RawVec::<impl Sized>::ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                    debug self => _3;    // in scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    let mut _4: std::ptr::Unique<impl Sized>; // in scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    scope 9 (inlined Unique::<impl Sized>::as_ptr) { // at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                        debug self => _4; // in scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        let mut _5: std::ptr::NonNull<impl Sized>; // in scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        scope 10 (inlined NonNull::<impl Sized>::as_ptr) { // at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                            debug self => _5; // in scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _6: *const impl Sized; // in scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+            scope 11 (inlined std::slice::from_raw_parts_mut::<'_, impl Sized>) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug data => _7;        // in scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                debug len => _8;         // in scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let mut _13: *mut [impl Sized]; // in scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let mut _63: *mut impl Sized; // in scope 11 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _64: usize;      // in scope 11 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 12 {\n+                    scope 13 (inlined std::slice::from_raw_parts_mut::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug data => _63; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug len => _64; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        scope 14 (inlined intrinsics::is_valid_allocation_size::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                            debug len => _64; // in scope 14 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 15 {\n+                                debug max_len => const _; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                    scope 16 (inlined slice_from_raw_parts_mut::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                        debug data => _7; // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        debug len => _8; // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        let mut _9: *mut (); // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 17 (inlined ptr::mut_ptr::<impl *mut impl Sized>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug self => _7; // in scope 17 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                        }\n+                        scope 18 (inlined std::ptr::from_raw_parts_mut::<[impl Sized]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug data_address => _9; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            debug metadata => _8; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _10: *const (); // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _11: std::ptr::metadata::PtrComponents<[impl Sized]>; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _12: std::ptr::metadata::PtrRepr<[impl Sized]>; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            scope 19 {\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    scope 20 (inlined core::slice::<impl [impl Sized]>::iter_mut) { // at $DIR/loops.rs:24:16: 24:26\n+        debug self => _14;               // in scope 20 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 21 (inlined std::slice::IterMut::<'_, impl Sized>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _14;          // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _16: *mut impl Sized;    // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _17: bool;           // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _18: &[impl Sized];  // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _19: usize;          // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _21: &[impl Sized];  // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _22: usize;          // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _24: std::ptr::NonNull<impl Sized>; // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _25: *mut impl Sized; // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 22 {\n+                debug ptr => _16;        // in scope 22 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 23 {\n+                    let _20: *mut impl Sized; // in scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 24 {\n+                        debug end => _20; // in scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 30 (inlined NonNull::<impl Sized>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _16; // in scope 30 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _23: *const impl Sized; // in scope 30 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _65: *mut impl Sized; // in scope 30 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 31 {\n+                                scope 32 (inlined NonNull::<T>::new_unchecked::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _65; // in scope 32 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 33 (inlined ptr::mut_ptr::<impl *mut impl Sized>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _65; // in scope 33 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _66: *mut u8; // in scope 33 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 34 {\n+                                            scope 35 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _66; // in scope 35 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 36 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _66; // in scope 36 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 37 {\n+                                                        scope 38 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _66; // in scope 38 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 26 (inlined invalid_mut::<impl Sized>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _22; // in scope 26 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 27 {\n+                        }\n+                    }\n+                    scope 28 (inlined ptr::mut_ptr::<impl *mut impl Sized>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _16; // in scope 28 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                        debug count => _19; // in scope 28 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                        scope 29 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 25 (inlined core::slice::<impl [impl Sized]>::as_mut_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _14;       // in scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _15: *mut [impl Sized]; // in scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n+    }\n+    scope 39 (inlined <std::slice::IterMut<'_, impl Sized> as IntoIterator>::into_iter) { // at $DIR/loops.rs:24:14: 24:26\n+        debug self => _26;               // in scope 39 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+    scope 40 (inlined <Vec<impl Sized> as Deref>::deref) { // at $DIR/loops.rs:27:14: 27:22\n+        debug self => _31;               // in scope 40 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _37: *const impl Sized;  // in scope 40 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _38: usize;              // in scope 40 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        scope 41 {\n+            scope 42 (inlined Vec::<impl Sized>::as_ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug self => _31;       // in scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                let mut _32: &alloc::raw_vec::RawVec<impl Sized>; // in scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                let mut _36: *mut impl Sized; // in scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                scope 43 (inlined alloc::raw_vec::RawVec::<impl Sized>::ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                    debug self => _32;   // in scope 43 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    let mut _33: std::ptr::Unique<impl Sized>; // in scope 43 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    scope 44 (inlined Unique::<impl Sized>::as_ptr) { // at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                        debug self => _33; // in scope 44 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        let mut _34: std::ptr::NonNull<impl Sized>; // in scope 44 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        scope 45 (inlined NonNull::<impl Sized>::as_ptr) { // at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                            debug self => _34; // in scope 45 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _35: *const impl Sized; // in scope 45 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+            scope 46 (inlined std::slice::from_raw_parts::<'_, impl Sized>) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug data => _37;       // in scope 46 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                debug len => _38;        // in scope 46 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let _42: *const [impl Sized]; // in scope 46 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let mut _67: *const impl Sized; // in scope 46 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _68: usize;      // in scope 46 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 47 {\n+                    scope 48 (inlined std::slice::from_raw_parts::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug data => _67; // in scope 48 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug len => _68; // in scope 48 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        scope 49 (inlined intrinsics::is_valid_allocation_size::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                            debug len => _68; // in scope 49 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 50 {\n+                                debug max_len => const _; // in scope 50 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                    scope 51 (inlined slice_from_raw_parts::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                        debug data => _37; // in scope 51 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        debug len => _38; // in scope 51 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        let mut _39: *const (); // in scope 51 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 52 (inlined ptr::const_ptr::<impl *const impl Sized>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug self => _37; // in scope 52 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        }\n+                        scope 53 (inlined std::ptr::from_raw_parts::<[impl Sized]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug data_address => _39; // in scope 53 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            debug metadata => _38; // in scope 53 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _40: std::ptr::metadata::PtrComponents<[impl Sized]>; // in scope 53 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _41: std::ptr::metadata::PtrRepr<[impl Sized]>; // in scope 53 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            scope 54 {\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    scope 55 (inlined core::slice::<impl [impl Sized]>::iter) { // at $DIR/loops.rs:27:16: 27:22\n+        debug self => _43;               // in scope 55 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 56 (inlined std::slice::Iter::<'_, impl Sized>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _43;          // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _45: *const impl Sized;  // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _46: bool;           // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _47: usize;          // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _49: usize;          // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _50: *mut impl Sized; // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _52: std::ptr::NonNull<impl Sized>; // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _53: *const impl Sized; // in scope 56 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 57 {\n+                debug ptr => _45;        // in scope 57 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 58 {\n+                    let _48: *const impl Sized; // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 59 {\n+                        debug end => _48; // in scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 65 (inlined NonNull::<impl Sized>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _50; // in scope 65 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _51: *const impl Sized; // in scope 65 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _69: *mut impl Sized; // in scope 65 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 66 {\n+                                scope 67 (inlined NonNull::<T>::new_unchecked::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _69; // in scope 67 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 68 (inlined ptr::mut_ptr::<impl *mut impl Sized>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _69; // in scope 68 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _70: *mut u8; // in scope 68 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 69 {\n+                                            scope 70 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _70; // in scope 70 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 71 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _70; // in scope 71 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 72 {\n+                                                        scope 73 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _70; // in scope 73 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 61 (inlined invalid::<impl Sized>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _49; // in scope 61 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 62 {\n+                        }\n+                    }\n+                    scope 63 (inlined ptr::const_ptr::<impl *const impl Sized>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _45; // in scope 63 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _47; // in scope 63 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        scope 64 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 60 (inlined core::slice::<impl [impl Sized]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _43;       // in scope 60 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _44: *const [impl Sized]; // in scope 60 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n+    }\n+    scope 74 (inlined <std::slice::Iter<'_, impl Sized> as IntoIterator>::into_iter) { // at $DIR/loops.rs:27:14: 27:22\n+        debug self => _54;               // in scope 74 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:14: +1:26\n+        _2 = &mut _1;                    // scope 0 at $DIR/loops.rs:+1:14: +1:26\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _3 = &((*_2).0: alloc::raw_vec::RawVec<impl Sized>); // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        _4 = ((*_3).0: std::ptr::Unique<impl Sized>); // scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        StorageLive(_5);                 // scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        _5 = (_4.0: std::ptr::NonNull<impl Sized>); // scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageLive(_6);                 // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _6 = (_5.0: *const impl Sized);  // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _7 = move _6 as *mut impl Sized (PtrToPtr); // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_6);                 // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_5);                 // scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageDead(_4);                 // scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        StorageDead(_3);                 // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _8 = ((*_2).1: usize);           // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_63);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_64);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 12 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageLive(_9);                 // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _9 = _7 as *mut () (PtrToPtr);   // scope 17 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageLive(_12);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_11);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_10);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _10 = _9 as *const () (Pointer(MutToConstPointer)); // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _11 = ptr::metadata::PtrComponents::<[impl Sized]> { data_address: move _10, metadata: _8 }; // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_10);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _12 = ptr::metadata::PtrRepr::<[impl Sized]> { const_ptr: move _11 }; // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_11);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _13 = (_12.1: *mut [impl Sized]); // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_12);                // scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_9);                 // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _14 = &mut (*_13);               // scope 12 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_13);                // scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_64);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_63);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_2);                 // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        StorageLive(_16);                // scope 20 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_15);                // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _15 = &raw mut (*_14);           // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _16 = move _15 as *mut impl Sized (PtrToPtr); // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_15);                // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_20);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_17);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _17 = const _;                   // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _17) -> [0: bb1, otherwise: bb2]; // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb1: {\n+        StorageLive(_19);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_18);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _18 = &(*_14);                   // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _19 = Len((*_18));               // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_18);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _20 = Offset(_16, _19);          // scope 29 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageDead(_19);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageLive(_22);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_21);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _21 = &(*_14);                   // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _22 = Len((*_21));               // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_21);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _20 = _22 as *mut impl Sized (Transmute); // scope 27 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_22);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_17);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_24);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_23);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_65);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_66);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _23 = _16 as *const impl Sized (Pointer(MutToConstPointer)); // scope 31 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _24 = NonNull::<impl Sized> { pointer: _23 }; // scope 31 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_66);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_65);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_23);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_25);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _25 = _20;                       // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _26 = std::slice::IterMut::<'_, impl Sized> { ptr: move _24, end: move _25, _marker: const ZeroSized: PhantomData<&mut impl Sized> }; // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&mut impl Sized>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_25);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_24);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_20);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_16);                // scope 20 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_27);                // scope 0 at $DIR/loops.rs:+1:14: +1:26\n+        _27 = move _26;                  // scope 0 at $DIR/loops.rs:+1:14: +1:26\n+        goto -> bb4;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb4: {\n+        StorageLive(_29);                // scope 1 at $DIR/loops.rs:+1:14: +1:26\n+        _28 = &mut _27;                  // scope 1 at $DIR/loops.rs:+1:14: +1:26\n+        _29 = <std::slice::IterMut<'_, impl Sized> as Iterator>::next(_28) -> [return: bb5, unwind: bb19]; // scope 1 at $DIR/loops.rs:+1:14: +1:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:24:14: 24:26\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, impl Sized>) -> Option<<std::slice::IterMut<'_, impl Sized> as Iterator>::Item> {<std::slice::IterMut<'_, impl Sized> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        _30 = discriminant(_29);         // scope 1 at $DIR/loops.rs:+1:14: +1:26\n+        switchInt(move _30) -> [0: bb6, 1: bb16, otherwise: bb18]; // scope 1 at $DIR/loops.rs:+1:14: +1:26\n+    }\n+\n+    bb6: {\n+        StorageDead(_29);                // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_27);                // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        StorageLive(_31);                // scope 0 at $DIR/loops.rs:+4:14: +4:22\n+        _31 = &_1;                       // scope 0 at $DIR/loops.rs:+4:14: +4:22\n+        StorageLive(_37);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_36);                // scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_32);                // scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _32 = &((*_31).0: alloc::raw_vec::RawVec<impl Sized>); // scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_33);                // scope 43 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        _33 = ((*_32).0: std::ptr::Unique<impl Sized>); // scope 43 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        StorageLive(_34);                // scope 44 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        _34 = (_33.0: std::ptr::NonNull<impl Sized>); // scope 44 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageLive(_35);                // scope 45 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _35 = (_34.0: *const impl Sized); // scope 45 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _36 = move _35 as *mut impl Sized (PtrToPtr); // scope 45 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_35);                // scope 45 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_34);                // scope 44 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageDead(_33);                // scope 43 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        _37 = move _36 as *const impl Sized (Pointer(MutToConstPointer)); // scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_32);                // scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_36);                // scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_38);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _38 = ((*_31).1: usize);         // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_67);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_68);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_42);                // scope 47 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageLive(_39);                // scope 51 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _39 = _37 as *const () (PtrToPtr); // scope 52 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageLive(_41);                // scope 54 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_40);                // scope 54 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _40 = ptr::metadata::PtrComponents::<[impl Sized]> { data_address: _39, metadata: _38 }; // scope 54 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _41 = ptr::metadata::PtrRepr::<[impl Sized]> { const_ptr: move _40 }; // scope 54 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_40);                // scope 54 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _42 = (_41.0: *const [impl Sized]); // scope 54 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_41);                // scope 53 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_39);                // scope 51 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _43 = &(*_42);                   // scope 47 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_42);                // scope 46 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_68);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_67);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_38);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_37);                // scope 41 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_31);                // scope 0 at $DIR/loops.rs:+4:14: +4:15\n+        StorageLive(_45);                // scope 55 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_44);                // scope 60 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _44 = &raw const (*_43);         // scope 60 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _45 = move _44 as *const impl Sized (PtrToPtr); // scope 60 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_44);                // scope 60 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_48);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_46);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _46 = const _;                   // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _46) -> [0: bb7, otherwise: bb8]; // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        StorageLive(_47);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _47 = Len((*_43));               // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _48 = Offset(_45, _47);          // scope 64 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_47);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb9;                     // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        StorageLive(_49);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _49 = Len((*_43));               // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _48 = _49 as *const impl Sized (Transmute); // scope 62 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_49);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb9;                     // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        StorageDead(_46);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_52);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_50);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _50 = _45 as *mut impl Sized (PtrToPtr); // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_51);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_69);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_70);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _51 = _50 as *const impl Sized (Pointer(MutToConstPointer)); // scope 66 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _52 = NonNull::<impl Sized> { pointer: _51 }; // scope 66 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_70);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_69);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_51);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_50);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_53);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _53 = _48;                       // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _54 = std::slice::Iter::<'_, impl Sized> { ptr: move _52, end: move _53, _marker: const ZeroSized: PhantomData<&impl Sized> }; // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&impl Sized>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_53);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_52);                // scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_48);                // scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_45);                // scope 55 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_55);                // scope 0 at $DIR/loops.rs:+4:14: +4:22\n+        _55 = move _54;                  // scope 0 at $DIR/loops.rs:+4:14: +4:22\n+        goto -> bb10;                    // scope 3 at $DIR/loops.rs:+4:5: +6:6\n+    }\n+\n+    bb10: {\n+        StorageLive(_57);                // scope 3 at $DIR/loops.rs:+4:14: +4:22\n+        _56 = &mut _55;                  // scope 3 at $DIR/loops.rs:+4:14: +4:22\n+        _57 = <std::slice::Iter<'_, impl Sized> as Iterator>::next(_56) -> [return: bb11, unwind: bb19]; // scope 3 at $DIR/loops.rs:+4:14: +4:22\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:27:14: 27:22\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, impl Sized>) -> Option<<std::slice::Iter<'_, impl Sized> as Iterator>::Item> {<std::slice::Iter<'_, impl Sized> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb11: {\n+        _58 = discriminant(_57);         // scope 3 at $DIR/loops.rs:+4:14: +4:22\n+        switchInt(move _58) -> [0: bb12, 1: bb14, otherwise: bb18]; // scope 3 at $DIR/loops.rs:+4:14: +4:22\n+    }\n+\n+    bb12: {\n+        StorageDead(_57);                // scope 3 at $DIR/loops.rs:+6:5: +6:6\n+        StorageDead(_55);                // scope 0 at $DIR/loops.rs:+6:5: +6:6\n+        drop(_1) -> bb13;                // scope 0 at $DIR/loops.rs:+7:1: +7:2\n+    }\n+\n+    bb13: {\n+        return;                          // scope 0 at $DIR/loops.rs:+7:2: +7:2\n+    }\n+\n+    bb14: {\n+        _59 = ((_57 as Some).0: &impl Sized); // scope 3 at $DIR/loops.rs:+4:9: +4:10\n+        _60 = opaque::<&impl Sized>(_59) -> [return: bb15, unwind: bb19]; // scope 4 at $DIR/loops.rs:+5:9: +5:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:28:9: 28:15\n+                                         // + literal: Const { ty: fn(&impl Sized) {opaque::<&impl Sized>}, val: Value(<ZST>) }\n+    }\n+\n+    bb15: {\n+        StorageDead(_57);                // scope 3 at $DIR/loops.rs:+6:5: +6:6\n+        goto -> bb10;                    // scope 3 at $DIR/loops.rs:+4:5: +6:6\n+    }\n+\n+    bb16: {\n+        _61 = move ((_29 as Some).0: &mut impl Sized); // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _62 = opaque::<&mut impl Sized>(move _61) -> [return: bb17, unwind: bb19]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:25:9: 25:15\n+                                         // + literal: Const { ty: fn(&mut impl Sized) {opaque::<&mut impl Sized>}, val: Value(<ZST>) }\n+    }\n+\n+    bb17: {\n+        StorageDead(_29);                // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb18: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:26\n+    }\n+\n+    bb19 (cleanup): {\n+        drop(_1) -> [return: bb20, unwind terminate]; // scope 0 at $DIR/loops.rs:+7:1: +7:2\n+    }\n+\n+    bb20 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +7:2\n+    }\n+}"}, {"sha": "7cc982bfea00a6ce6e042d0cb380ebedd1b46adb", "filename": "tests/mir-opt/pre-codegen/loops.vec_iter_enumerate.PreCodegen.after.mir", "status": "added", "additions": 604, "deletions": 0, "changes": 604, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_iter_enumerate.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_iter_enumerate.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_iter_enumerate.PreCodegen.after.mir?ref=2c6f137d9a2ee2d53149876317ea9775ee23dd30", "patch": "@@ -0,0 +1,604 @@\n+// MIR for `vec_iter_enumerate` after PreCodegen\n+\n+fn vec_iter_enumerate(_1: Vec<impl Sized>) -> () {\n+    debug v => _1;                       // in scope 0 at $DIR/loops.rs:+0:27: +0:32\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:51: +0:51\n+    let mut _2: &mut std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:19: +1:31\n+    let mut _14: &mut [impl Sized];      // in scope 0 at $DIR/loops.rs:+1:19: +1:31\n+    let mut _26: std::slice::IterMut<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+1:19: +1:31\n+    let mut _27: std::iter::Enumerate<std::slice::IterMut<'_, impl Sized>>; // in scope 0 at $DIR/loops.rs:+1:19: +1:43\n+    let mut _28: std::iter::Enumerate<std::slice::IterMut<'_, impl Sized>>; // in scope 0 at $DIR/loops.rs:+1:19: +1:43\n+    let mut _29: &mut std::iter::Enumerate<std::slice::IterMut<'_, impl Sized>>; // in scope 0 at $DIR/loops.rs:+1:19: +1:43\n+    let mut _30: std::option::Option<(usize, &mut impl Sized)>; // in scope 0 at $DIR/loops.rs:+1:19: +1:43\n+    let mut _31: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let mut _32: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+4:19: +4:27\n+    let _44: &[impl Sized];              // in scope 0 at $DIR/loops.rs:+4:19: +4:27\n+    let mut _55: std::slice::Iter<'_, impl Sized>; // in scope 0 at $DIR/loops.rs:+4:19: +4:27\n+    let mut _56: std::iter::Enumerate<std::slice::Iter<'_, impl Sized>>; // in scope 0 at $DIR/loops.rs:+4:19: +4:39\n+    let mut _57: std::iter::Enumerate<std::slice::Iter<'_, impl Sized>>; // in scope 0 at $DIR/loops.rs:+4:19: +4:39\n+    let mut _58: &mut std::iter::Enumerate<std::slice::Iter<'_, impl Sized>>; // in scope 0 at $DIR/loops.rs:+4:19: +4:39\n+    let mut _59: std::option::Option<(usize, &impl Sized)>; // in scope 0 at $DIR/loops.rs:+4:19: +4:39\n+    let mut _60: isize;                  // in scope 0 at $DIR/loops.rs:+4:5: +6:6\n+    let mut _63: (usize, &impl Sized);   // in scope 0 at $DIR/loops.rs:+5:16: +5:22\n+    let _64: ();                         // in scope 0 at $DIR/loops.rs:+4:19: +4:39\n+    let mut _67: (usize, &mut impl Sized); // in scope 0 at $DIR/loops.rs:+2:16: +2:22\n+    let _68: ();                         // in scope 0 at $DIR/loops.rs:+1:19: +1:43\n+    scope 1 {\n+        debug iter => _28;               // in scope 1 at $DIR/loops.rs:+1:19: +1:43\n+        let _65: usize;                  // in scope 1 at $DIR/loops.rs:+1:10: +1:11\n+        let _66: &mut impl Sized;        // in scope 1 at $DIR/loops.rs:+1:13: +1:14\n+        scope 2 {\n+            debug i => _65;              // in scope 2 at $DIR/loops.rs:+1:10: +1:11\n+            debug x => _66;              // in scope 2 at $DIR/loops.rs:+1:13: +1:14\n+        }\n+    }\n+    scope 3 {\n+        debug iter => _57;               // in scope 3 at $DIR/loops.rs:+4:19: +4:39\n+        let _61: usize;                  // in scope 3 at $DIR/loops.rs:+4:10: +4:11\n+        let _62: &impl Sized;            // in scope 3 at $DIR/loops.rs:+4:13: +4:14\n+        scope 4 {\n+            debug i => _61;              // in scope 4 at $DIR/loops.rs:+4:10: +4:11\n+            debug x => _62;              // in scope 4 at $DIR/loops.rs:+4:13: +4:14\n+        }\n+    }\n+    scope 5 (inlined <Vec<impl Sized> as DerefMut>::deref_mut) { // at $DIR/loops.rs:33:19: 33:31\n+        debug self => _2;                // in scope 5 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _7: *mut impl Sized;     // in scope 5 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _8: usize;               // in scope 5 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        scope 6 {\n+            scope 7 (inlined Vec::<impl Sized>::as_mut_ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug self => _2;        // in scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                let mut _3: &alloc::raw_vec::RawVec<impl Sized>; // in scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                scope 8 (inlined alloc::raw_vec::RawVec::<impl Sized>::ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                    debug self => _3;    // in scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    let mut _4: std::ptr::Unique<impl Sized>; // in scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    scope 9 (inlined Unique::<impl Sized>::as_ptr) { // at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                        debug self => _4; // in scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        let mut _5: std::ptr::NonNull<impl Sized>; // in scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        scope 10 (inlined NonNull::<impl Sized>::as_ptr) { // at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                            debug self => _5; // in scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _6: *const impl Sized; // in scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+            scope 11 (inlined std::slice::from_raw_parts_mut::<'_, impl Sized>) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug data => _7;        // in scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                debug len => _8;         // in scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let mut _13: *mut [impl Sized]; // in scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let mut _69: *mut impl Sized; // in scope 11 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _70: usize;      // in scope 11 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 12 {\n+                    scope 13 (inlined std::slice::from_raw_parts_mut::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug data => _69; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug len => _70; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        scope 14 (inlined intrinsics::is_valid_allocation_size::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                            debug len => _70; // in scope 14 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 15 {\n+                                debug max_len => const _; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                    scope 16 (inlined slice_from_raw_parts_mut::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                        debug data => _7; // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        debug len => _8; // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        let mut _9: *mut (); // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 17 (inlined ptr::mut_ptr::<impl *mut impl Sized>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug self => _7; // in scope 17 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                        }\n+                        scope 18 (inlined std::ptr::from_raw_parts_mut::<[impl Sized]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug data_address => _9; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            debug metadata => _8; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _10: *const (); // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _11: std::ptr::metadata::PtrComponents<[impl Sized]>; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _12: std::ptr::metadata::PtrRepr<[impl Sized]>; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            scope 19 {\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    scope 20 (inlined core::slice::<impl [impl Sized]>::iter_mut) { // at $DIR/loops.rs:33:21: 33:31\n+        debug self => _14;               // in scope 20 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 21 (inlined std::slice::IterMut::<'_, impl Sized>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _14;          // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _16: *mut impl Sized;    // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _17: bool;           // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _18: &[impl Sized];  // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _19: usize;          // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _21: &[impl Sized];  // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _22: usize;          // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _24: std::ptr::NonNull<impl Sized>; // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _25: *mut impl Sized; // in scope 21 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 22 {\n+                debug ptr => _16;        // in scope 22 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 23 {\n+                    let _20: *mut impl Sized; // in scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 24 {\n+                        debug end => _20; // in scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 30 (inlined NonNull::<impl Sized>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _16; // in scope 30 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _23: *const impl Sized; // in scope 30 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _71: *mut impl Sized; // in scope 30 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 31 {\n+                                scope 32 (inlined NonNull::<T>::new_unchecked::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _71; // in scope 32 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 33 (inlined ptr::mut_ptr::<impl *mut impl Sized>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _71; // in scope 33 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _72: *mut u8; // in scope 33 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 34 {\n+                                            scope 35 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _72; // in scope 35 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 36 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _72; // in scope 36 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 37 {\n+                                                        scope 38 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _72; // in scope 38 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 26 (inlined invalid_mut::<impl Sized>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _22; // in scope 26 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 27 {\n+                        }\n+                    }\n+                    scope 28 (inlined ptr::mut_ptr::<impl *mut impl Sized>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _16; // in scope 28 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                        debug count => _19; // in scope 28 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                        scope 29 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 25 (inlined core::slice::<impl [impl Sized]>::as_mut_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _14;       // in scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _15: *mut [impl Sized]; // in scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n+    }\n+    scope 39 (inlined <std::slice::IterMut<'_, impl Sized> as Iterator>::enumerate) { // at $DIR/loops.rs:33:32: 33:43\n+        debug self => _26;               // in scope 39 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+        scope 40 (inlined Enumerate::<std::slice::IterMut<'_, impl Sized>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+            debug iter => _26;           // in scope 40 at $SRC_DIR/core/src/iter/adapters/enumerate.rs:LL:COL\n+        }\n+    }\n+    scope 41 (inlined <Enumerate<std::slice::IterMut<'_, impl Sized>> as IntoIterator>::into_iter) { // at $DIR/loops.rs:33:19: 33:43\n+        debug self => _27;               // in scope 41 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+    scope 42 (inlined <Vec<impl Sized> as Deref>::deref) { // at $DIR/loops.rs:36:19: 36:27\n+        debug self => _32;               // in scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _38: *const impl Sized;  // in scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        let mut _39: usize;              // in scope 42 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        scope 43 {\n+            scope 44 (inlined Vec::<impl Sized>::as_ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug self => _32;       // in scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                let mut _33: &alloc::raw_vec::RawVec<impl Sized>; // in scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                let mut _37: *mut impl Sized; // in scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                scope 45 (inlined alloc::raw_vec::RawVec::<impl Sized>::ptr) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                    debug self => _33;   // in scope 45 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    let mut _34: std::ptr::Unique<impl Sized>; // in scope 45 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                    scope 46 (inlined Unique::<impl Sized>::as_ptr) { // at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+                        debug self => _34; // in scope 46 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        let mut _35: std::ptr::NonNull<impl Sized>; // in scope 46 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                        scope 47 (inlined NonNull::<impl Sized>::as_ptr) { // at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+                            debug self => _35; // in scope 47 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _36: *const impl Sized; // in scope 47 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+            scope 48 (inlined std::slice::from_raw_parts::<'_, impl Sized>) { // at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                debug data => _38;       // in scope 48 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                debug len => _39;        // in scope 48 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let _43: *const [impl Sized]; // in scope 48 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                let mut _73: *const impl Sized; // in scope 48 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _74: usize;      // in scope 48 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 49 {\n+                    scope 50 (inlined std::slice::from_raw_parts::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug data => _73; // in scope 50 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug len => _74; // in scope 50 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        scope 51 (inlined intrinsics::is_valid_allocation_size::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                            debug len => _74; // in scope 51 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 52 {\n+                                debug max_len => const _; // in scope 52 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                    scope 53 (inlined slice_from_raw_parts::<impl Sized>) { // at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+                        debug data => _38; // in scope 53 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        debug len => _39; // in scope 53 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        let mut _40: *const (); // in scope 53 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 54 (inlined ptr::const_ptr::<impl *const impl Sized>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug self => _38; // in scope 54 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        }\n+                        scope 55 (inlined std::ptr::from_raw_parts::<[impl Sized]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                            debug data_address => _40; // in scope 55 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            debug metadata => _39; // in scope 55 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _41: std::ptr::metadata::PtrComponents<[impl Sized]>; // in scope 55 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            let mut _42: std::ptr::metadata::PtrRepr<[impl Sized]>; // in scope 55 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                            scope 56 {\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    scope 57 (inlined core::slice::<impl [impl Sized]>::iter) { // at $DIR/loops.rs:36:21: 36:27\n+        debug self => _44;               // in scope 57 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 58 (inlined std::slice::Iter::<'_, impl Sized>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _44;          // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _46: *const impl Sized;  // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _47: bool;           // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _48: usize;          // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _50: usize;          // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _51: *mut impl Sized; // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _53: std::ptr::NonNull<impl Sized>; // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _54: *const impl Sized; // in scope 58 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 59 {\n+                debug ptr => _46;        // in scope 59 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 60 {\n+                    let _49: *const impl Sized; // in scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 61 {\n+                        debug end => _49; // in scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 67 (inlined NonNull::<impl Sized>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _51; // in scope 67 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _52: *const impl Sized; // in scope 67 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _75: *mut impl Sized; // in scope 67 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            scope 68 {\n+                                scope 69 (inlined NonNull::<T>::new_unchecked::runtime::<impl Sized>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _75; // in scope 69 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 70 (inlined ptr::mut_ptr::<impl *mut impl Sized>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _75; // in scope 70 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _76: *mut u8; // in scope 70 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 71 {\n+                                            scope 72 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _76; // in scope 72 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 73 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _76; // in scope 73 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 74 {\n+                                                        scope 75 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _76; // in scope 75 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 63 (inlined invalid::<impl Sized>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _50; // in scope 63 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 64 {\n+                        }\n+                    }\n+                    scope 65 (inlined ptr::const_ptr::<impl *const impl Sized>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _46; // in scope 65 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _48; // in scope 65 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        scope 66 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 62 (inlined core::slice::<impl [impl Sized]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _44;       // in scope 62 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _45: *const [impl Sized]; // in scope 62 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n+    }\n+    scope 76 (inlined <std::slice::Iter<'_, impl Sized> as Iterator>::enumerate) { // at $DIR/loops.rs:36:28: 36:39\n+        debug self => _55;               // in scope 76 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+        scope 77 (inlined Enumerate::<std::slice::Iter<'_, impl Sized>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+            debug iter => _55;           // in scope 77 at $SRC_DIR/core/src/iter/adapters/enumerate.rs:LL:COL\n+        }\n+    }\n+    scope 78 (inlined <Enumerate<std::slice::Iter<'_, impl Sized>> as IntoIterator>::into_iter) { // at $DIR/loops.rs:36:19: 36:39\n+        debug self => _56;               // in scope 78 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_26);                // scope 0 at $DIR/loops.rs:+1:19: +1:31\n+        StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:19: +1:31\n+        _2 = &mut _1;                    // scope 0 at $DIR/loops.rs:+1:19: +1:31\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _3 = &((*_2).0: alloc::raw_vec::RawVec<impl Sized>); // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        _4 = ((*_3).0: std::ptr::Unique<impl Sized>); // scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        StorageLive(_5);                 // scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        _5 = (_4.0: std::ptr::NonNull<impl Sized>); // scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageLive(_6);                 // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _6 = (_5.0: *const impl Sized);  // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _7 = move _6 as *mut impl Sized (PtrToPtr); // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_6);                 // scope 10 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_5);                 // scope 9 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageDead(_4);                 // scope 8 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        StorageDead(_3);                 // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _8 = ((*_2).1: usize);           // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_69);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_70);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 12 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageLive(_9);                 // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _9 = _7 as *mut () (PtrToPtr);   // scope 17 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageLive(_12);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_11);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_10);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _10 = _9 as *const () (Pointer(MutToConstPointer)); // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _11 = ptr::metadata::PtrComponents::<[impl Sized]> { data_address: move _10, metadata: _8 }; // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_10);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _12 = ptr::metadata::PtrRepr::<[impl Sized]> { const_ptr: move _11 }; // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_11);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _13 = (_12.1: *mut [impl Sized]); // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_12);                // scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_9);                 // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _14 = &mut (*_13);               // scope 12 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_13);                // scope 11 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_70);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_69);                // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_2);                 // scope 0 at $DIR/loops.rs:+1:19: +1:20\n+        StorageLive(_16);                // scope 20 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_15);                // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _15 = &raw mut (*_14);           // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _16 = move _15 as *mut impl Sized (PtrToPtr); // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_15);                // scope 25 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_20);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_17);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _17 = const _;                   // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _17) -> [0: bb1, otherwise: bb2]; // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb1: {\n+        StorageLive(_19);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_18);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _18 = &(*_14);                   // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _19 = Len((*_18));               // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_18);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _20 = Offset(_16, _19);          // scope 29 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageDead(_19);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageLive(_22);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_21);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _21 = &(*_14);                   // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _22 = Len((*_21));               // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_21);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _20 = _22 as *mut impl Sized (Transmute); // scope 27 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_22);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_17);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_24);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_23);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_71);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_72);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _23 = _16 as *const impl Sized (Pointer(MutToConstPointer)); // scope 31 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _24 = NonNull::<impl Sized> { pointer: _23 }; // scope 31 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_72);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_71);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_23);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_25);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _25 = _20;                       // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _26 = std::slice::IterMut::<'_, impl Sized> { ptr: move _24, end: move _25, _marker: const ZeroSized: PhantomData<&mut impl Sized> }; // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&mut impl Sized>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_25);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_24);                // scope 24 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_20);                // scope 23 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_16);                // scope 20 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _27 = Enumerate::<std::slice::IterMut<'_, impl Sized>> { iter: move _26, count: const 0_usize }; // scope 40 at $SRC_DIR/core/src/iter/adapters/enumerate.rs:LL:COL\n+        StorageDead(_26);                // scope 0 at $DIR/loops.rs:+1:42: +1:43\n+        StorageLive(_28);                // scope 0 at $DIR/loops.rs:+1:19: +1:43\n+        _28 = move _27;                  // scope 0 at $DIR/loops.rs:+1:19: +1:43\n+        goto -> bb4;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb4: {\n+        StorageLive(_30);                // scope 1 at $DIR/loops.rs:+1:19: +1:43\n+        _29 = &mut _28;                  // scope 1 at $DIR/loops.rs:+1:19: +1:43\n+        _30 = <Enumerate<std::slice::IterMut<'_, impl Sized>> as Iterator>::next(_29) -> [return: bb5, unwind: bb19]; // scope 1 at $DIR/loops.rs:+1:19: +1:43\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:33:19: 33:43\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::IterMut<'_, impl Sized>>) -> Option<<Enumerate<std::slice::IterMut<'_, impl Sized>> as Iterator>::Item> {<Enumerate<std::slice::IterMut<'_, impl Sized>> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        _31 = discriminant(_30);         // scope 1 at $DIR/loops.rs:+1:19: +1:43\n+        switchInt(move _31) -> [0: bb6, 1: bb16, otherwise: bb18]; // scope 1 at $DIR/loops.rs:+1:19: +1:43\n+    }\n+\n+    bb6: {\n+        StorageDead(_30);                // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_28);                // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        StorageLive(_55);                // scope 0 at $DIR/loops.rs:+4:19: +4:27\n+        StorageLive(_32);                // scope 0 at $DIR/loops.rs:+4:19: +4:27\n+        _32 = &_1;                       // scope 0 at $DIR/loops.rs:+4:19: +4:27\n+        StorageLive(_38);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_37);                // scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_33);                // scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _33 = &((*_32).0: alloc::raw_vec::RawVec<impl Sized>); // scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_34);                // scope 45 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        _34 = ((*_33).0: std::ptr::Unique<impl Sized>); // scope 45 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        StorageLive(_35);                // scope 46 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        _35 = (_34.0: std::ptr::NonNull<impl Sized>); // scope 46 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageLive(_36);                // scope 47 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _36 = (_35.0: *const impl Sized); // scope 47 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _37 = move _36 as *mut impl Sized (PtrToPtr); // scope 47 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_36);                // scope 47 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_35);                // scope 46 at $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+        StorageDead(_34);                // scope 45 at $SRC_DIR/alloc/src/raw_vec.rs:LL:COL\n+        _38 = move _37 as *const impl Sized (Pointer(MutToConstPointer)); // scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_33);                // scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_37);                // scope 44 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_39);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        _39 = ((*_32).1: usize);         // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_73);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_74);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageLive(_43);                // scope 49 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageLive(_40);                // scope 53 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _40 = _38 as *const () (PtrToPtr); // scope 54 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageLive(_42);                // scope 56 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_41);                // scope 56 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _41 = ptr::metadata::PtrComponents::<[impl Sized]> { data_address: _40, metadata: _39 }; // scope 56 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _42 = ptr::metadata::PtrRepr::<[impl Sized]> { const_ptr: move _41 }; // scope 56 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_41);                // scope 56 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _43 = (_42.0: *const [impl Sized]); // scope 56 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_42);                // scope 55 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_40);                // scope 53 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _44 = &(*_43);                   // scope 49 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_43);                // scope 48 at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+        StorageDead(_74);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_73);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_39);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_38);                // scope 43 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_32);                // scope 0 at $DIR/loops.rs:+4:19: +4:20\n+        StorageLive(_46);                // scope 57 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_45);                // scope 62 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _45 = &raw const (*_44);         // scope 62 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _46 = move _45 as *const impl Sized (PtrToPtr); // scope 62 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_45);                // scope 62 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_49);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_47);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _47 = const _;                   // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _47) -> [0: bb7, otherwise: bb8]; // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        StorageLive(_48);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _48 = Len((*_44));               // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _49 = Offset(_46, _48);          // scope 66 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_48);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb9;                     // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        StorageLive(_50);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _50 = Len((*_44));               // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _49 = _50 as *const impl Sized (Transmute); // scope 64 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_50);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb9;                     // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        StorageDead(_47);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_53);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_51);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _51 = _46 as *mut impl Sized (PtrToPtr); // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_52);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_75);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_76);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _52 = _51 as *const impl Sized (Pointer(MutToConstPointer)); // scope 68 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _53 = NonNull::<impl Sized> { pointer: _52 }; // scope 68 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_76);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_75);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_52);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_51);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_54);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _54 = _49;                       // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _55 = std::slice::Iter::<'_, impl Sized> { ptr: move _53, end: move _54, _marker: const ZeroSized: PhantomData<&impl Sized> }; // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&impl Sized>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_54);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_53);                // scope 61 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_49);                // scope 60 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_46);                // scope 57 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _56 = Enumerate::<std::slice::Iter<'_, impl Sized>> { iter: move _55, count: const 0_usize }; // scope 77 at $SRC_DIR/core/src/iter/adapters/enumerate.rs:LL:COL\n+        StorageDead(_55);                // scope 0 at $DIR/loops.rs:+4:38: +4:39\n+        StorageLive(_57);                // scope 0 at $DIR/loops.rs:+4:19: +4:39\n+        _57 = move _56;                  // scope 0 at $DIR/loops.rs:+4:19: +4:39\n+        goto -> bb10;                    // scope 3 at $DIR/loops.rs:+4:5: +6:6\n+    }\n+\n+    bb10: {\n+        StorageLive(_59);                // scope 3 at $DIR/loops.rs:+4:19: +4:39\n+        _58 = &mut _57;                  // scope 3 at $DIR/loops.rs:+4:19: +4:39\n+        _59 = <Enumerate<std::slice::Iter<'_, impl Sized>> as Iterator>::next(_58) -> [return: bb11, unwind: bb19]; // scope 3 at $DIR/loops.rs:+4:19: +4:39\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:36:19: 36:39\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, impl Sized>>) -> Option<<Enumerate<std::slice::Iter<'_, impl Sized>> as Iterator>::Item> {<Enumerate<std::slice::Iter<'_, impl Sized>> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb11: {\n+        _60 = discriminant(_59);         // scope 3 at $DIR/loops.rs:+4:19: +4:39\n+        switchInt(move _60) -> [0: bb12, 1: bb14, otherwise: bb18]; // scope 3 at $DIR/loops.rs:+4:19: +4:39\n+    }\n+\n+    bb12: {\n+        StorageDead(_59);                // scope 3 at $DIR/loops.rs:+6:5: +6:6\n+        StorageDead(_57);                // scope 0 at $DIR/loops.rs:+6:5: +6:6\n+        drop(_1) -> bb13;                // scope 0 at $DIR/loops.rs:+7:1: +7:2\n+    }\n+\n+    bb13: {\n+        return;                          // scope 0 at $DIR/loops.rs:+7:2: +7:2\n+    }\n+\n+    bb14: {\n+        _61 = (((_59 as Some).0: (usize, &impl Sized)).0: usize); // scope 3 at $DIR/loops.rs:+4:10: +4:11\n+        _62 = (((_59 as Some).0: (usize, &impl Sized)).1: &impl Sized); // scope 3 at $DIR/loops.rs:+4:13: +4:14\n+        StorageLive(_63);                // scope 4 at $DIR/loops.rs:+5:16: +5:22\n+        _63 = (_61, _62);                // scope 4 at $DIR/loops.rs:+5:16: +5:22\n+        _64 = opaque::<(usize, &impl Sized)>(move _63) -> [return: bb15, unwind: bb19]; // scope 4 at $DIR/loops.rs:+5:9: +5:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:37:9: 37:15\n+                                         // + literal: Const { ty: fn((usize, &impl Sized)) {opaque::<(usize, &impl Sized)>}, val: Value(<ZST>) }\n+    }\n+\n+    bb15: {\n+        StorageDead(_63);                // scope 4 at $DIR/loops.rs:+5:22: +5:23\n+        StorageDead(_59);                // scope 3 at $DIR/loops.rs:+6:5: +6:6\n+        goto -> bb10;                    // scope 3 at $DIR/loops.rs:+4:5: +6:6\n+    }\n+\n+    bb16: {\n+        _65 = (((_30 as Some).0: (usize, &mut impl Sized)).0: usize); // scope 1 at $DIR/loops.rs:+1:10: +1:11\n+        _66 = move (((_30 as Some).0: (usize, &mut impl Sized)).1: &mut impl Sized); // scope 1 at $DIR/loops.rs:+1:13: +1:14\n+        StorageLive(_67);                // scope 2 at $DIR/loops.rs:+2:16: +2:22\n+        _67 = (_65, move _66);           // scope 2 at $DIR/loops.rs:+2:16: +2:22\n+        _68 = opaque::<(usize, &mut impl Sized)>(move _67) -> [return: bb17, unwind: bb19]; // scope 2 at $DIR/loops.rs:+2:9: +2:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:34:9: 34:15\n+                                         // + literal: Const { ty: fn((usize, &mut impl Sized)) {opaque::<(usize, &mut impl Sized)>}, val: Value(<ZST>) }\n+    }\n+\n+    bb17: {\n+        StorageDead(_67);                // scope 2 at $DIR/loops.rs:+2:22: +2:23\n+        StorageDead(_30);                // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb18: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:19: +1:43\n+    }\n+\n+    bb19 (cleanup): {\n+        drop(_1) -> [return: bb20, unwind terminate]; // scope 0 at $DIR/loops.rs:+7:1: +7:2\n+    }\n+\n+    bb20 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +7:2\n+    }\n+}"}, {"sha": "a73736291e28d8f7bb9adc67da467b0cceca8cd9", "filename": "tests/mir-opt/pre-codegen/loops.vec_move.PreCodegen.after.mir", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir?ref=2c6f137d9a2ee2d53149876317ea9775ee23dd30", "patch": "@@ -0,0 +1,83 @@\n+// MIR for `vec_move` after PreCodegen\n+\n+fn vec_move(_1: Vec<impl Sized>) -> () {\n+    debug v => _1;                       // in scope 0 at $DIR/loops.rs:+0:17: +0:22\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:41: +0:41\n+    let mut _2: std::vec::IntoIter<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _3: std::vec::IntoIter<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _4: &mut std::vec::IntoIter<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _5: std::option::Option<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _6: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _8: ();                          // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    scope 1 {\n+        debug iter => _3;                // in scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        let _7: impl Sized;              // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _7;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        _2 = <Vec<impl Sized> as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:42:14: 42:15\n+                                         // + literal: Const { ty: fn(Vec<impl Sized>) -> <Vec<impl Sized> as IntoIterator>::IntoIter {<Vec<impl Sized> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        _3 = move _2;                    // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb2: {\n+        StorageLive(_5);                 // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        _4 = &mut _3;                    // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        _5 = <std::vec::IntoIter<impl Sized> as Iterator>::next(_4) -> [return: bb3, unwind: bb9]; // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:42:14: 42:15\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<impl Sized>) -> Option<<std::vec::IntoIter<impl Sized> as Iterator>::Item> {<std::vec::IntoIter<impl Sized> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        _6 = discriminant(_5);           // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        switchInt(move _6) -> [0: bb4, 1: bb6, otherwise: bb8]; // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+    }\n+\n+    bb4: {\n+        StorageDead(_5);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        drop(_3) -> bb5;                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_2);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n+    }\n+\n+    bb6: {\n+        _7 = move ((_5 as Some).0: impl Sized); // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _8 = opaque::<impl Sized>(move _7) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:43:9: 43:15\n+                                         // + literal: Const { ty: fn(impl Sized) {opaque::<impl Sized>}, val: Value(<ZST>) }\n+    }\n+\n+    bb7: {\n+        StorageDead(_5);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb8: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+    }\n+\n+    bb9 (cleanup): {\n+        drop(_3) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +4:2\n+    }\n+}"}, {"sha": "020d69a2ef3b400858cc2351c1b10d6d4607e119", "filename": "tests/mir-opt/pre-codegen/loops.vec_range.PreCodegen.after.mir", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f137d9a2ee2d53149876317ea9775ee23dd30/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_range.PreCodegen.after.mir?ref=2c6f137d9a2ee2d53149876317ea9775ee23dd30", "patch": "@@ -0,0 +1,204 @@\n+// MIR for `vec_range` after PreCodegen\n+\n+fn vec_range(_1: Vec<impl Sized>) -> () {\n+    debug v => _1;                       // in scope 0 at $DIR/loops.rs:+0:18: +0:23\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:42: +0:42\n+    let mut _2: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:17: +1:24\n+    let mut _3: usize;                   // in scope 0 at $DIR/loops.rs:+1:17: +1:24\n+    let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _8: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +4:6\n+    let mut _9: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+5:17: +5:24\n+    let mut _10: usize;                  // in scope 0 at $DIR/loops.rs:+5:17: +5:24\n+    let mut _11: std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24\n+    let mut _12: std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24\n+    let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24\n+    let mut _14: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+5:14: +5:24\n+    let mut _15: isize;                  // in scope 0 at $DIR/loops.rs:+5:5: +8:6\n+    let mut _17: &std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+6:18: +6:19\n+    let _18: &impl Sized;                // in scope 0 at $DIR/loops.rs:+6:18: +6:22\n+    let mut _20: (usize, &impl Sized);   // in scope 0 at $DIR/loops.rs:+7:16: +7:22\n+    let _21: ();                         // in scope 0 at $DIR/loops.rs:+5:14: +5:24\n+    let mut _23: &mut std::vec::Vec<impl Sized>; // in scope 0 at $DIR/loops.rs:+2:22: +2:23\n+    let mut _24: &mut impl Sized;        // in scope 0 at $DIR/loops.rs:+2:22: +2:26\n+    let mut _26: (usize, &mut impl Sized); // in scope 0 at $DIR/loops.rs:+3:16: +3:22\n+    let _27: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        let _22: usize;                  // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug i => _22;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+            let _25: &mut impl Sized;    // in scope 2 at $DIR/loops.rs:+2:13: +2:14\n+            scope 3 {\n+                debug x => _25;          // in scope 3 at $DIR/loops.rs:+2:13: +2:14\n+            }\n+        }\n+        scope 9 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:13:14: 13:24\n+            debug self => _6;            // in scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        }\n+    }\n+    scope 4 {\n+        debug iter => _12;               // in scope 4 at $DIR/loops.rs:+5:14: +5:24\n+        let _16: usize;                  // in scope 4 at $DIR/loops.rs:+5:9: +5:10\n+        scope 5 {\n+            debug i => _16;              // in scope 5 at $DIR/loops.rs:+5:9: +5:10\n+            let _19: &impl Sized;        // in scope 5 at $DIR/loops.rs:+6:13: +6:14\n+            scope 6 {\n+                debug x => _19;          // in scope 6 at $DIR/loops.rs:+6:13: +6:14\n+            }\n+        }\n+        scope 12 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:17:14: 17:24\n+            debug self => _13;           // in scope 12 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        }\n+    }\n+    scope 7 (inlined Vec::<impl Sized>::len) { // at $DIR/loops.rs:13:19: 13:24\n+        debug self => _2;                // in scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+    }\n+    scope 8 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:13:14: 13:24\n+        debug self => _4;                // in scope 8 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+    scope 10 (inlined Vec::<impl Sized>::len) { // at $DIR/loops.rs:17:19: 17:24\n+        debug self => _9;                // in scope 10 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+    }\n+    scope 11 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:17:14: 17:24\n+        debug self => _11;               // in scope 11 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:17: +1:24\n+        StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:17: +1:24\n+        _2 = &_1;                        // scope 0 at $DIR/loops.rs:+1:17: +1:24\n+        _3 = ((*_2).1: usize);           // scope 7 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_2);                 // scope 0 at $DIR/loops.rs:+1:23: +1:24\n+        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _3 }; // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+1:23: +1:24\n+        StorageLive(_5);                 // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        _5 = move _4;                    // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +4:6\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        _6 = &mut _5;                    // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        _7 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb15]; // scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _8 = discriminant(_7);           // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        switchInt(move _8) -> [0: bb3, 1: bb11, otherwise: bb14]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+\n+    bb3: {\n+        StorageDead(_7);                 // scope 1 at $DIR/loops.rs:+4:5: +4:6\n+        StorageDead(_5);                 // scope 0 at $DIR/loops.rs:+4:5: +4:6\n+        StorageLive(_10);                // scope 0 at $DIR/loops.rs:+5:17: +5:24\n+        StorageLive(_9);                 // scope 0 at $DIR/loops.rs:+5:17: +5:24\n+        _9 = &_1;                        // scope 0 at $DIR/loops.rs:+5:17: +5:24\n+        _10 = ((*_9).1: usize);          // scope 10 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 0 at $DIR/loops.rs:+5:23: +5:24\n+        _11 = std::ops::Range::<usize> { start: const 0_usize, end: move _10 }; // scope 0 at $DIR/loops.rs:+5:14: +5:24\n+        StorageDead(_10);                // scope 0 at $DIR/loops.rs:+5:23: +5:24\n+        StorageLive(_12);                // scope 0 at $DIR/loops.rs:+5:14: +5:24\n+        _12 = move _11;                  // scope 0 at $DIR/loops.rs:+5:14: +5:24\n+        goto -> bb4;                     // scope 4 at $DIR/loops.rs:+5:5: +8:6\n+    }\n+\n+    bb4: {\n+        StorageLive(_14);                // scope 4 at $DIR/loops.rs:+5:14: +5:24\n+        _13 = &mut _12;                  // scope 4 at $DIR/loops.rs:+5:14: +5:24\n+        _14 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_13) -> [return: bb5, unwind: bb15]; // scope 12 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        _15 = discriminant(_14);         // scope 4 at $DIR/loops.rs:+5:14: +5:24\n+        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb14]; // scope 4 at $DIR/loops.rs:+5:14: +5:24\n+    }\n+\n+    bb6: {\n+        StorageDead(_14);                // scope 4 at $DIR/loops.rs:+8:5: +8:6\n+        StorageDead(_12);                // scope 0 at $DIR/loops.rs:+8:5: +8:6\n+        drop(_1) -> bb7;                 // scope 0 at $DIR/loops.rs:+9:1: +9:2\n+    }\n+\n+    bb7: {\n+        return;                          // scope 0 at $DIR/loops.rs:+9:2: +9:2\n+    }\n+\n+    bb8: {\n+        _16 = ((_14 as Some).0: usize);  // scope 4 at $DIR/loops.rs:+5:9: +5:10\n+        StorageLive(_18);                // scope 5 at $DIR/loops.rs:+6:18: +6:22\n+        StorageLive(_17);                // scope 5 at $DIR/loops.rs:+6:18: +6:19\n+        _17 = &_1;                       // scope 5 at $DIR/loops.rs:+6:18: +6:19\n+        _18 = <Vec<impl Sized> as Index<usize>>::index(move _17, _16) -> [return: bb9, unwind: bb15]; // scope 5 at $DIR/loops.rs:+6:18: +6:22\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:18:18: 18:22\n+                                         // + literal: Const { ty: for<'a> fn(&'a Vec<impl Sized>, usize) -> &'a <Vec<impl Sized> as Index<usize>>::Output {<Vec<impl Sized> as Index<usize>>::index}, val: Value(<ZST>) }\n+    }\n+\n+    bb9: {\n+        StorageDead(_17);                // scope 5 at $DIR/loops.rs:+6:21: +6:22\n+        _19 = _18;                       // scope 5 at $DIR/loops.rs:+6:17: +6:22\n+        StorageLive(_20);                // scope 6 at $DIR/loops.rs:+7:16: +7:22\n+        _20 = (_16, _19);                // scope 6 at $DIR/loops.rs:+7:16: +7:22\n+        _21 = opaque::<(usize, &impl Sized)>(move _20) -> [return: bb10, unwind: bb15]; // scope 6 at $DIR/loops.rs:+7:9: +7:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:19:9: 19:15\n+                                         // + literal: Const { ty: fn((usize, &impl Sized)) {opaque::<(usize, &impl Sized)>}, val: Value(<ZST>) }\n+    }\n+\n+    bb10: {\n+        StorageDead(_20);                // scope 6 at $DIR/loops.rs:+7:22: +7:23\n+        StorageDead(_18);                // scope 5 at $DIR/loops.rs:+8:5: +8:6\n+        StorageDead(_14);                // scope 4 at $DIR/loops.rs:+8:5: +8:6\n+        goto -> bb4;                     // scope 4 at $DIR/loops.rs:+5:5: +8:6\n+    }\n+\n+    bb11: {\n+        _22 = ((_7 as Some).0: usize);   // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        StorageLive(_24);                // scope 2 at $DIR/loops.rs:+2:22: +2:26\n+        StorageLive(_23);                // scope 2 at $DIR/loops.rs:+2:22: +2:23\n+        _23 = &mut _1;                   // scope 2 at $DIR/loops.rs:+2:22: +2:23\n+        _24 = <Vec<impl Sized> as IndexMut<usize>>::index_mut(move _23, _22) -> [return: bb12, unwind: bb15]; // scope 2 at $DIR/loops.rs:+2:22: +2:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:14:22: 14:26\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<impl Sized>, usize) -> &'a mut <Vec<impl Sized> as Index<usize>>::Output {<Vec<impl Sized> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }\n+    }\n+\n+    bb12: {\n+        StorageDead(_23);                // scope 2 at $DIR/loops.rs:+2:25: +2:26\n+        _25 = _24;                       // scope 2 at $DIR/loops.rs:+2:17: +2:26\n+        StorageLive(_26);                // scope 3 at $DIR/loops.rs:+3:16: +3:22\n+        _26 = (_22, move _25);           // scope 3 at $DIR/loops.rs:+3:16: +3:22\n+        _27 = opaque::<(usize, &mut impl Sized)>(move _26) -> [return: bb13, unwind: bb15]; // scope 3 at $DIR/loops.rs:+3:9: +3:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:15:9: 15:15\n+                                         // + literal: Const { ty: fn((usize, &mut impl Sized)) {opaque::<(usize, &mut impl Sized)>}, val: Value(<ZST>) }\n+    }\n+\n+    bb13: {\n+        StorageDead(_26);                // scope 3 at $DIR/loops.rs:+3:22: +3:23\n+        StorageDead(_24);                // scope 2 at $DIR/loops.rs:+4:5: +4:6\n+        StorageDead(_7);                 // scope 1 at $DIR/loops.rs:+4:5: +4:6\n+        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +4:6\n+    }\n+\n+    bb14: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+\n+    bb15 (cleanup): {\n+        drop(_1) -> [return: bb16, unwind terminate]; // scope 0 at $DIR/loops.rs:+9:1: +9:2\n+    }\n+\n+    bb16 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +9:2\n+    }\n+}"}]}