{"sha": "202dd5a359ce60ff51208da5566260dc43d82551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMmRkNWEzNTljZTYwZmY1MTIwOGRhNTU2NjI2MGRjNDNkODI1NTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-21T12:59:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-21T12:59:58Z"}, "message": "Remove unused `IntoValTyPair` hack", "tree": {"sha": "b8967b5d2a30672f163fc97320568639b64d8c91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8967b5d2a30672f163fc97320568639b64d8c91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202dd5a359ce60ff51208da5566260dc43d82551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202dd5a359ce60ff51208da5566260dc43d82551", "html_url": "https://github.com/rust-lang/rust/commit/202dd5a359ce60ff51208da5566260dc43d82551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202dd5a359ce60ff51208da5566260dc43d82551/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6143ef03c3b425583afad44b5b2e8e7401cdf40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6143ef03c3b425583afad44b5b2e8e7401cdf40e", "html_url": "https://github.com/rust-lang/rust/commit/6143ef03c3b425583afad44b5b2e8e7401cdf40e"}], "stats": {"total": 52, "additions": 12, "deletions": 40}, "files": [{"sha": "2f529dcbf488b78d523bc7bbb7d00ea284751c66", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 40, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/202dd5a359ce60ff51208da5566260dc43d82551/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202dd5a359ce60ff51208da5566260dc43d82551/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=202dd5a359ce60ff51208da5566260dc43d82551", "patch": "@@ -426,21 +426,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    pub fn assign_discr_and_fields<\n-        V: IntoValTyPair<'tcx>,\n-        J: IntoIterator<Item = V>,\n-    >(\n+    pub fn assign_discr_and_fields(\n         &mut self,\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n         discr_offset: u64,\n-        operands: J,\n+        operands: &[mir::Operand<'tcx>],\n         discr_val: u128,\n         variant_idx: usize,\n         discr_size: u64,\n-    ) -> EvalResult<'tcx>\n-        where J::IntoIter: ExactSizeIterator,\n-    {\n+    ) -> EvalResult<'tcx> {\n         // FIXME(solson)\n         let dest_ptr = self.force_allocation(dest)?.to_ptr()?;\n \n@@ -456,29 +451,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.assign_fields(dest, dest_ty, operands)\n     }\n \n-    pub fn assign_fields<\n-        V: IntoValTyPair<'tcx>,\n-        J: IntoIterator<Item = V>,\n-    >(\n+    pub fn assign_fields(\n         &mut self,\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n-        operands: J,\n-    ) -> EvalResult<'tcx>\n-        where J::IntoIter: ExactSizeIterator,\n-    {\n+        operands: &[mir::Operand<'tcx>],\n+    ) -> EvalResult<'tcx> {\n         if self.type_size(dest_ty)? == Some(0) {\n             // zst assigning is a nop\n             return Ok(());\n         }\n         if self.ty_to_primval_kind(dest_ty).is_ok() {\n-            let mut iter = operands.into_iter();\n-            assert_eq!(iter.len(), 1);\n-            let (value, value_ty) = iter.next().unwrap().into_val_ty_pair(self)?;\n+            assert_eq!(operands.len(), 1);\n+            let value = self.eval_operand(&operands[0])?;\n+            let value_ty = self.operand_ty(&operands[0]);\n             return self.write_value(value, dest, value_ty);\n         }\n-        for (field_index, operand) in operands.into_iter().enumerate() {\n-            let (value, value_ty) = operand.into_val_ty_pair(self)?;\n+        for (field_index, operand) in operands.iter().enumerate() {\n+            let value = self.eval_operand(operand)?;\n+            let value_ty = self.operand_ty(operand);\n             let field_dest = self.lvalue_field(dest, field_index, dest_ty, value_ty)?;\n             self.write_value(value, field_dest, value_ty)?;\n         }\n@@ -1802,25 +1793,6 @@ pub fn is_inhabited<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) ->\n     ty.uninhabited_from(&mut HashMap::default(), tcx).is_empty()\n }\n \n-pub trait IntoValTyPair<'tcx> {\n-    fn into_val_ty_pair<'a>(self, ecx: &mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, (Value, Ty<'tcx>)> where 'tcx: 'a;\n-}\n-\n-impl<'tcx> IntoValTyPair<'tcx> for (Value, Ty<'tcx>) {\n-    fn into_val_ty_pair<'a>(self, _: &mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, (Value, Ty<'tcx>)> where 'tcx: 'a {\n-        Ok(self)\n-    }\n-}\n-\n-impl<'b, 'tcx: 'b> IntoValTyPair<'tcx> for &'b mir::Operand<'tcx> {\n-    fn into_val_ty_pair<'a>(self, ecx: &mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, (Value, Ty<'tcx>)> where 'tcx: 'a {\n-        let value = ecx.eval_operand(self)?;\n-        let value_ty = ecx.operand_ty(self);\n-        Ok((value, value_ty))\n-    }\n-}\n-\n-\n /// FIXME: expose trans::monomorphize::resolve_closure\n pub fn resolve_closure<'a, 'tcx> (\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}