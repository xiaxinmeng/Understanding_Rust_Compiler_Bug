{"sha": "8359898c09e83df958d052ed5ac6722d4955cb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTk4OThjMDllODNkZjk1OGQwNTJlZDVhYzY3MjJkNDk1NWNiMGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T15:28:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-19T15:28:27Z"}, "message": "Merge pull request #578 from RalfJung/misc\n\nTest cargo-miri on Windows", "tree": {"sha": "35785c3c2ad989c327a63377f21bda5cf36dd1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35785c3c2ad989c327a63377f21bda5cf36dd1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8359898c09e83df958d052ed5ac6722d4955cb0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGmObCRBK7hj4Ov3rIwAAdHIIADoy+nMCi5IU9kFGMacqXCAi\nBqFmNSGATo7/r3wlcXb9vswgjr6YcltFrkK+rhimOpK+zyx3XdcleO0TGMUHR2hQ\nqqaUJGLFTV2plcyyoKLhqt6nr0oUUZo/aX3xHGMu1l5H6w2WZL+tk9HU3pK7Z83e\nouDpU5Iu//9U4Xe+TtMzZsYsgtM+4AtrzICJiYtkj/3YudSJESoRPVDicPpHz9Nz\neCwsKcjolZ1UjqGohRN8IjQEW9f4yR5AdLuLaLVf26CIdU9sr/Gm4xF3G0H7P9d/\ncDwSn36aVWRiau7efZiI6BbZbvOdpiL8Br5D1qO5o8RsDIUNceCFncPu6bmb8DA=\n=sjWS\n-----END PGP SIGNATURE-----\n", "payload": "tree 35785c3c2ad989c327a63377f21bda5cf36dd1d6\nparent d8956f0a293e835b69e0a57cbb238d234b6d5f3a\nparent 750cd442beb0009df6ee3dc80b88582f3b8730d9\nauthor Ralf Jung <post@ralfj.de> 1545233307 +0100\ncommitter GitHub <noreply@github.com> 1545233307 +0100\n\nMerge pull request #578 from RalfJung/misc\n\nTest cargo-miri on Windows"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8359898c09e83df958d052ed5ac6722d4955cb0a", "html_url": "https://github.com/rust-lang/rust/commit/8359898c09e83df958d052ed5ac6722d4955cb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8359898c09e83df958d052ed5ac6722d4955cb0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "html_url": "https://github.com/rust-lang/rust/commit/d8956f0a293e835b69e0a57cbb238d234b6d5f3a"}, {"sha": "750cd442beb0009df6ee3dc80b88582f3b8730d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/750cd442beb0009df6ee3dc80b88582f3b8730d9", "html_url": "https://github.com/rust-lang/rust/commit/750cd442beb0009df6ee3dc80b88582f3b8730d9"}], "stats": {"total": 175, "additions": 141, "deletions": 34}, "files": [{"sha": "a46214a3c45c61b42f71005f5651942a6fcc5590", "filename": "appveyor.yml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -27,13 +27,17 @@ build: false\n test_script:\n     - set RUST_TEST_NOCAPTURE=1\n     - set RUST_BACKTRACE=1\n-    # Build miri\n+    # Build and install miri\n     - cargo build --release --all-features --all-targets\n+    - cargo install --all-features --force --path .\n     # Get ourselves a MIR-full libstd, and use it henceforth\n-    - cargo run --release --all-features --bin cargo-miri -- miri setup\n+    - cargo miri setup\n     - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\miri\\miri\\cache\\HOST\n     # Test miri\n     - cargo test --release --all-features\n+    # Test cargo integration\n+    - cd test-cargo-miri\n+    - python3 run-test.py\n \n notifications:\n     - provider: Email"}, {"sha": "16d18dbfe6dc29652687826a3d72054412c99701", "filename": "src/fn_call.rs", "status": "modified", "additions": 82, "deletions": 10, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -562,27 +562,50 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             },\n \n             // Windows API stubs\n+            \"SetLastError\" => {\n+                let err = this.read_scalar(args[0])?.to_u32()?;\n+                this.machine.last_error = err;\n+            }\n+            \"GetLastError\" => {\n+                this.write_scalar(Scalar::from_uint(this.machine.last_error, Size::from_bits(32)), dest)?;\n+            }\n+\n             \"AddVectoredExceptionHandler\" => {\n                 // any non zero value works for the stdlib. This is just used for stackoverflows anyway\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n             },\n             \"InitializeCriticalSection\" |\n             \"EnterCriticalSection\" |\n             \"LeaveCriticalSection\" |\n-            \"DeleteCriticalSection\" |\n-            \"SetLastError\" => {\n-                // Function does not return anything, nothing to do\n+            \"DeleteCriticalSection\" => {\n+                // Nothing to do, not even a return value\n             },\n             \"GetModuleHandleW\" |\n             \"GetProcAddress\" |\n-            \"TryEnterCriticalSection\" => {\n+            \"TryEnterCriticalSection\" |\n+            \"GetConsoleScreenBufferInfo\" |\n+            \"SetConsoleTextAttribute\" => {\n                 // pretend these do not exist/nothing happened, by returning zero\n                 this.write_null(dest)?;\n             },\n-            \"GetLastError\" => {\n-                // this is c::ERROR_CALL_NOT_IMPLEMENTED\n-                this.write_scalar(Scalar::from_int(120, dest.layout.size), dest)?;\n-            },\n+            \"GetSystemInfo\" => {\n+                let system_info = this.deref_operand(args[0])?;\n+                let system_info_ptr = system_info.ptr.to_ptr()?;\n+                // initialize with 0\n+                this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n+                    .write_repeat(tcx, system_info_ptr, 0, system_info.layout.size)?;\n+                // set number of processors to 1\n+                let dword_size = Size::from_bytes(4);\n+                let offset = 2*dword_size + 3*tcx.pointer_size();\n+                this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n+                    .write_scalar(\n+                        tcx,\n+                        system_info_ptr.offset(offset, tcx)?,\n+                        Scalar::from_int(1, dword_size).into(),\n+                        dword_size,\n+                    )?;\n+            }\n+\n             \"TlsAlloc\" => {\n                 // This just creates a key; Windows does not natively support TLS dtors.\n \n@@ -596,18 +619,67 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n                 let ptr = this.machine.tls.load_tls(key)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n                 this.machine.tls.store_tls(key, new_ptr)?;\n \n                 // Return success (1)\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n             }\n+            \"GetStdHandle\" => {\n+                let which = this.read_scalar(args[0])?.to_i32()?;\n+                // We just make this the identity function, so we know later in \"WriteFile\"\n+                // which one it is.\n+                this.write_scalar(Scalar::from_int(which, this.pointer_size()), dest)?;\n+            }\n+            \"WriteFile\" => {\n+                let handle = this.read_scalar(args[0])?.to_isize(this)?;\n+                let buf = this.read_scalar(args[1])?.not_undef()?;\n+                let n = this.read_scalar(args[2])?.to_u32()?;\n+                let written_place = this.deref_operand(args[3])?;\n+                this.write_null(written_place.into())?; // spec says we always write 0 first\n+                let written = if handle == -11 || handle == -12 {\n+                    // stdout/stderr\n+                    use std::io::{self, Write};\n+\n+                    let buf_cont = this.memory().read_bytes(buf, Size::from_bytes(u64::from(n)))?;\n+                    let res = if handle == -11 {\n+                        io::stdout().write(buf_cont)\n+                    } else {\n+                        io::stderr().write(buf_cont)\n+                    };\n+                    res.ok().map(|n| n as u32)\n+                } else {\n+                    eprintln!(\"Miri: Ignored output to handle {}\", handle);\n+                    Some(n) // pretend it all went well\n+                };\n+                // If there was no error, write back how much was written\n+                if let Some(n) = written {\n+                    this.write_scalar(Scalar::from_uint(n, Size::from_bits(32)), written_place.into())?;\n+                }\n+                // Return whether this was a success\n+                this.write_scalar(\n+                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n+                    dest,\n+                )?;\n+            }\n+            \"GetConsoleMode\" => {\n+                // Everything is a pipe\n+                this.write_null(dest)?;\n+            }\n+            \"GetEnvironmentVariableW\" => {\n+                // This is not the env var you are looking for\n+                this.machine.last_error = 203; // ERROR_ENVVAR_NOT_FOUND\n+                this.write_null(dest)?;\n+            }\n+            \"GetCommandLineW\" => {\n+                this.write_scalar(Scalar::Ptr(this.machine.cmd_line.unwrap()), dest)?;\n+            }\n \n             // We can't execute anything else\n             _ => {"}, {"sha": "cf2c39f61ef8abbfd15126b9c4b52d0127f26de3", "filename": "src/lib.rs", "status": "modified", "additions": 52, "deletions": 15, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n use std::env;\n \n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n-use rustc::ty::layout::{TyLayout, LayoutOf, Size};\n+use rustc::ty::layout::{TyLayout, LayoutOf, Size, Align};\n use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n \n@@ -123,24 +123,54 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n     let argc = Scalar::from_int(1, dest.layout.size);\n     ecx.write_scalar(argc, dest)?;\n-    let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n-    ecx.write_scalar(argc, argc_place.into())?;\n-    ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n+    // Store argc for macOS _NSGetArgc\n+    {\n+        let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+        ecx.write_scalar(argc, argc_place.into())?;\n+        ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n+    }\n \n     // FIXME: extract main source file path\n     // Third argument (argv): &[b\"foo\"]\n+    const CMD: &str = \"running-in-miri\\0\";\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    let foo = ecx.memory_mut().allocate_static_bytes(b\"foo\\0\").with_default_tag();\n-    let foo_ty = ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8);\n-    let foo_layout = ecx.layout_of(foo_ty)?;\n-    let foo_place = ecx.allocate(foo_layout, MiriMemoryKind::Env.into())?;\n-    ecx.write_scalar(Scalar::Ptr(foo), foo_place.into())?;\n-    ecx.memory_mut().mark_immutable(foo_place.to_ptr()?.alloc_id)?;\n-    let argv = foo_place.ptr;\n-    ecx.write_scalar(argv, dest)?;\n-    let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n-    ecx.write_scalar(argv, argv_place.into())?;\n-    ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n+    let cmd = ecx.memory_mut().allocate_static_bytes(CMD.as_bytes()).with_default_tag();\n+    let raw_str_layout = ecx.layout_of(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8))?;\n+    let cmd_place = ecx.allocate(raw_str_layout, MiriMemoryKind::Env.into())?;\n+    ecx.write_scalar(Scalar::Ptr(cmd), cmd_place.into())?;\n+    ecx.memory_mut().mark_immutable(cmd_place.to_ptr()?.alloc_id)?;\n+    // Store argv for macOS _NSGetArgv\n+    {\n+        let argv = cmd_place.ptr;\n+        ecx.write_scalar(argv, dest)?;\n+        let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+        ecx.write_scalar(argv, argv_place.into())?;\n+        ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n+    }\n+    // Store cmdline as UTF-16 for Windows GetCommandLineW\n+    {\n+        let tcx = &{ecx.tcx.tcx};\n+        let cmd_utf16: Vec<u16> = CMD.encode_utf16().collect();\n+        let cmd_ptr = ecx.memory_mut().allocate(\n+            Size::from_bytes(cmd_utf16.len() as u64 * 2),\n+            Align::from_bytes(2).unwrap(),\n+            MiriMemoryKind::Env.into(),\n+        )?.with_default_tag();\n+        ecx.machine.cmd_line = Some(cmd_ptr);\n+        // store the UTF-16 string\n+        let char_size = Size::from_bytes(2);\n+        let cmd_alloc = ecx.memory_mut().get_mut(cmd_ptr.alloc_id)?;\n+        let mut cur_ptr = cmd_ptr;\n+        for &c in cmd_utf16.iter() {\n+            cmd_alloc.write_scalar(\n+                tcx,\n+                cur_ptr,\n+                Scalar::from_uint(c, char_size).into(),\n+                char_size,\n+            )?;\n+            cur_ptr = cur_ptr.offset(char_size, tcx)?;\n+        }\n+    }\n \n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n@@ -263,8 +293,13 @@ pub struct Evaluator<'tcx> {\n \n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n+    /// We also need the full cmdline as one string because Window.\n     pub(crate) argc: Option<Pointer<Borrow>>,\n     pub(crate) argv: Option<Pointer<Borrow>>,\n+    pub(crate) cmd_line: Option<Pointer<Borrow>>,\n+\n+    /// Last OS error\n+    pub(crate) last_error: u32,\n \n     /// TLS state\n     pub(crate) tls: TlsData<'tcx>,\n@@ -282,6 +317,8 @@ impl<'tcx> Evaluator<'tcx> {\n             env_vars: HashMap::default(),\n             argc: None,\n             argv: None,\n+            cmd_line: None,\n+            last_error: 0,\n             tls: TlsData::default(),\n             validate,\n             stacked_borrows: stacked_borrows::State::default(),"}, {"sha": "353afb9d32100b81179f460dc8d5204f8c46dfa8", "filename": "tests/run-pass/box-pair-to-vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fbox-pair-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fbox-pair-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox-pair-to-vec.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -1,5 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n-\n #[repr(C)]\n #[derive(Debug)]\n struct PairFoo {"}, {"sha": "5fd65f138aaf92055195e96638a4660febde5c89", "filename": "tests/run-pass/catch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcatch.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -1,4 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n fn main() {"}, {"sha": "78729b915613af908634833702f458b9e3fe2521", "filename": "tests/run-pass/format.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fformat.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -1,4 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n fn main() {\n     println!(\"Hello {}\", 13);\n }"}, {"sha": "e7a11a969c037e00a796aafeff6258501ec15e9a", "filename": "tests/run-pass/hello.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhello.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -1,4 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n fn main() {\n     println!(\"Hello, world!\");\n }"}, {"sha": "91d17683e39e85ff2d10c7cbff55f3843a15bb4d", "filename": "tests/run-pass/issue-17877.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-17877.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //ignore-windows: Causes a stack overflow?!? Likely a rustc bug: https://github.com/rust-lang/rust/issues/53820\n-//Once that bug is fixed, increase the size to 16*1024 and enable on all platforms.\n+//FIXME: Once that bug is fixed, increase the size to 16*1024 and enable on all platforms.\n \n #![feature(slice_patterns)]\n "}, {"sha": "badb833ee800bca94c2420c3dbf2b66e97d3fe29", "filename": "tests/run-pass/issue-3794.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8359898c09e83df958d052ed5ac6722d4955cb0a/tests%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-3794.rs?ref=8359898c09e83df958d052ed5ac6722d4955cb0a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//ignore-msvc: Stdout not implemented on Windows\n #![feature(box_syntax)]\n \n trait T {"}]}