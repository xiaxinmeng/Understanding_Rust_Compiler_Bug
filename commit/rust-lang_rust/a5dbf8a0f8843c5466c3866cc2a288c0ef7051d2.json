{"sha": "a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGJmOGEwZjg4NDNjNTQ2NmMzODY2Y2MyYTI4OGMwZWY3MDUxZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-08T05:30:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-08T05:30:48Z"}, "message": "Auto merge of #36310 - jstnlef:remove-extraneous-not-equal-impl, r=sfackler\n\nRemoving the extraneous not_equal implementation for slices\n\nHappened to stumble upon this one awhile back. Seemed a bit silly to have both the equals and not equals implementation when they're so similar.", "tree": {"sha": "2153a43147c0c62b5bb8112320d2c3c25b051dcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2153a43147c0c62b5bb8112320d2c3c25b051dcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "html_url": "https://github.com/rust-lang/rust/commit/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a262862167899ae33e65af19fa4e34f787e4b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a262862167899ae33e65af19fa4e34f787e4b8c", "html_url": "https://github.com/rust-lang/rust/commit/4a262862167899ae33e65af19fa4e34f787e4b8c"}, {"sha": "a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "html_url": "https://github.com/rust-lang/rust/commit/a77b55d58f9b173b1e4fb96bb6935fadbfda3240"}], "stats": {"total": 21, "additions": 2, "deletions": 19}, "files": [{"sha": "b22bdb43414fd751e591dcbae835dd6741a9e3e7", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "patch": "@@ -1821,7 +1821,8 @@ impl<T: PartialOrd> PartialOrd for [T] {\n // intermediate trait for specialization of slice's PartialEq\n trait SlicePartialEq<B> {\n     fn equal(&self, other: &[B]) -> bool;\n-    fn not_equal(&self, other: &[B]) -> bool;\n+\n+    fn not_equal(&self, other: &[B]) -> bool { !self.equal(other) }\n }\n \n // Generic slice equality\n@@ -1841,20 +1842,6 @@ impl<A, B> SlicePartialEq<B> for [A]\n \n         true\n     }\n-\n-    default fn not_equal(&self, other: &[B]) -> bool {\n-        if self.len() != other.len() {\n-            return true;\n-        }\n-\n-        for i in 0..self.len() {\n-            if self[i].ne(&other[i]) {\n-                return true;\n-            }\n-        }\n-\n-        false\n-    }\n }\n \n // Use memcmp for bytewise equality when the types allow\n@@ -1874,10 +1861,6 @@ impl<A> SlicePartialEq<A> for [A]\n                    other.as_ptr() as *const u8, size) == 0\n         }\n     }\n-\n-    fn not_equal(&self, other: &[A]) -> bool {\n-        !self.equal(other)\n-    }\n }\n \n #[doc(hidden)]"}]}