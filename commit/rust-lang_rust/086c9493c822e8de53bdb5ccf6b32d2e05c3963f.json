{"sha": "086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NmM5NDkzYzgyMmU4ZGU1M2JkYjVjY2Y2YjMyZDJlMDVjMzk2M2Y=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-05T14:45:46Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-11T18:38:11Z"}, "message": "Fix ICE when a struct variant enum contains multiple fields\n\nFixes the second case of #19340.", "tree": {"sha": "fbb4e02af196c30babcbe6b15043b32f8cb08915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb4e02af196c30babcbe6b15043b32f8cb08915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "html_url": "https://github.com/rust-lang/rust/commit/086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086c9493c822e8de53bdb5ccf6b32d2e05c3963f/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "html_url": "https://github.com/rust-lang/rust/commit/418d1bfc9a3a71ce1beaced9ec6592ad614646b0"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "056d4f9d732a67fadb9a7d8291aa74b6621ae46f", "filename": "src/librustc/middle/borrowck/fragments.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/086c9493c822e8de53bdb5ccf6b32d2e05c3963f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086c9493c822e8de53bdb5ccf6b32d2e05c3963f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs?ref=086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "patch": "@@ -346,9 +346,10 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                                                                         Rc<LoanPath<'tcx>>)>) {\n     let parent_ty = parent_lp.to_type();\n \n-    let add_fragment_sibling_local = |field_name| {\n+    let add_fragment_sibling_local = |field_name, variant_did| {\n         add_fragment_sibling_core(\n-            this, tcx, gathered_fragments, parent_lp.clone(), mc, field_name, origin_lp);\n+            this, tcx, gathered_fragments, parent_lp.clone(), mc, field_name, origin_lp,\n+            variant_did);\n     };\n \n     match (&parent_ty.sty, enum_variant_info) {\n@@ -363,7 +364,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n             for i in range(0, tuple_len) {\n                 if i == tuple_idx { continue }\n                 let field_name = mc::PositionalField(i);\n-                add_fragment_sibling_local(field_name);\n+                add_fragment_sibling_local(field_name, None);\n             }\n         }\n \n@@ -376,7 +377,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue;\n                         }\n                         let field_name = mc::NamedField(f.name);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, None);\n                     }\n                 }\n                 mc::PositionalField(tuple_idx) => {\n@@ -385,7 +386,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue\n                         }\n                         let field_name = mc::PositionalField(i);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, None);\n                     }\n                 }\n             }\n@@ -414,7 +415,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue;\n                         }\n                         let field_name = mc::NamedField(variant_arg_ident.name);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, Some(variant_info.id));\n                     }\n                 }\n                 mc::PositionalField(tuple_idx) => {\n@@ -424,7 +425,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue;\n                         }\n                         let field_name = mc::PositionalField(i);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, None);\n                     }\n                 }\n             }\n@@ -447,10 +448,11 @@ fn add_fragment_sibling_core<'tcx>(this: &MoveData<'tcx>,\n                                    parent: Rc<LoanPath<'tcx>>,\n                                    mc: mc::MutabilityCategory,\n                                    new_field_name: mc::FieldName,\n-                                   origin_lp: &Rc<LoanPath<'tcx>>) -> MovePathIndex {\n+                                   origin_lp: &Rc<LoanPath<'tcx>>,\n+                                   enum_variant_did: Option<ast::DefId>) -> MovePathIndex {\n     let opt_variant_did = match parent.kind {\n         LpDowncast(_, variant_did) => Some(variant_did),\n-        LpVar(..) | LpUpvar(..) | LpExtend(..) => None,\n+        LpVar(..) | LpUpvar(..) | LpExtend(..) => enum_variant_did,\n     };\n \n     let loan_path_elem = LpInterior(mc::InteriorField(new_field_name));"}, {"sha": "5179c1e2acb7580e354e3317d2b01615799cb741", "filename": "src/test/run-pass/issue-19340-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/086c9493c822e8de53bdb5ccf6b32d2e05c3963f/src%2Ftest%2Frun-pass%2Fissue-19340-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086c9493c822e8de53bdb5ccf6b32d2e05c3963f/src%2Ftest%2Frun-pass%2Fissue-19340-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19340-2.rs?ref=086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Homura {\n+    Madoka {\n+        name: String,\n+        age: u32,\n+    },\n+}\n+\n+fn main() {\n+    let homura = Homura::Madoka {\n+        name: \"Akemi\".into_string(),\n+        age: 14,\n+    };\n+\n+    match homura {\n+        Homura::Madoka {\n+            name,\n+            age,\n+        } => (),\n+    };\n+}"}]}