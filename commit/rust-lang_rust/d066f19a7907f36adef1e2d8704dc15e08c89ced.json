{"sha": "d066f19a7907f36adef1e2d8704dc15e08c89ced", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjZmMTlhNzkwN2YzNmFkZWYxZTJkODcwNGRjMTVlMDhjODljZWQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-29T13:57:12Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-30T17:19:28Z"}, "message": "Improve error messages for boxed trait objects in tuples", "tree": {"sha": "46a6d7165bffb98d5c1507f2cd1d2d2be5bc6762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a6d7165bffb98d5c1507f2cd1d2d2be5bc6762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d066f19a7907f36adef1e2d8704dc15e08c89ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d066f19a7907f36adef1e2d8704dc15e08c89ced", "html_url": "https://github.com/rust-lang/rust/commit/d066f19a7907f36adef1e2d8704dc15e08c89ced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d066f19a7907f36adef1e2d8704dc15e08c89ced/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b613ef143641382f7474f9ef2260e276514f3862", "url": "https://api.github.com/repos/rust-lang/rust/commits/b613ef143641382f7474f9ef2260e276514f3862", "html_url": "https://github.com/rust-lang/rust/commit/b613ef143641382f7474f9ef2260e276514f3862"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "3fbd7db765b706b74c91061e59f1471afd7403cf", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d066f19a7907f36adef1e2d8704dc15e08c89ced/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d066f19a7907f36adef1e2d8704dc15e08c89ced/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d066f19a7907f36adef1e2d8704dc15e08c89ced", "patch": "@@ -145,8 +145,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             match ty.sty {\n                 ty::Adt(..) if ty.is_box() => {\n                     let boxed_ty = ty.boxed_ty();\n-                    let descr_pre_path = format!(\"{}boxed \", descr_pre_path);\n-                    check_must_use_ty(cx, boxed_ty, expr, span, &descr_pre_path, descr_post_path)\n+                    let descr_pre_path = &format!(\"{}boxed \", descr_pre_path);\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre_path, descr_post_path)\n                 }\n                 ty::Adt(def, _) => {\n                     check_must_use_def(cx, def.did, span, descr_pre_path, descr_post_path)\n@@ -157,8 +157,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;\n-                            let descr_pre = format!(\"{}implementer of \", descr_pre_path);\n-                            if check_must_use_def(cx, def_id, span, &descr_pre, descr_post_path) {\n+                            let descr_pre = &format!(\"{}implementer of \", descr_pre_path);\n+                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post_path) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for predicate in binder.skip_binder().iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n                             let def_id = trait_ref.def_id;\n-                            let descr_post = \" trait object\";\n+                            let descr_post = &format!(\" trait object{}\", descr_post_path);\n                             if check_must_use_def(cx, def_id, span, descr_pre_path, descr_post) {\n                                 has_emitted = true;\n                                 break;"}, {"sha": "0aa751443a0804f482881df0108e432a7915f466", "filename": "src/test/ui/lint/must_use-trait.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d066f19a7907f36adef1e2d8704dc15e08c89ced/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d066f19a7907f36adef1e2d8704dc15e08c89ced/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs?ref=d066f19a7907f36adef1e2d8704dc15e08c89ced", "patch": "@@ -21,7 +21,19 @@ fn get_boxed_critical() -> Box<dyn Critical> {\n     Box::new(Anon {})\n }\n \n+fn get_nested_boxed_critical() -> Box<Box<dyn Critical>> {\n+    Box::new(Box::new(Anon {}))\n+}\n+\n+fn get_critical_tuple() -> (u32, Box<dyn Critical>, impl Critical, ()) {\n+    (0, get_boxed_critical(), get_critical(), ())\n+}\n+\n fn main() {\n     get_critical(); //~ ERROR unused implementer of `Critical` that must be used\n     get_boxed_critical(); //~ ERROR unused boxed `Critical` trait object that must be used\n+    get_nested_boxed_critical();\n+    //~^ ERROR unused boxed boxed `Critical` trait object that must be used\n+    get_critical_tuple(); //~ ERROR unused boxed `Critical` trait object in tuple element 1\n+    //~^ ERROR unused implementer of `Critical` in tuple element 2\n }"}, {"sha": "be74362e29d62b720dad2da64460f01c15bb1128", "filename": "src/test/ui/lint/must_use-trait.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d066f19a7907f36adef1e2d8704dc15e08c89ced/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d066f19a7907f36adef1e2d8704dc15e08c89ced/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr?ref=d066f19a7907f36adef1e2d8704dc15e08c89ced", "patch": "@@ -1,5 +1,5 @@\n error: unused implementer of `Critical` that must be used\n-  --> $DIR/must_use-trait.rs:25:5\n+  --> $DIR/must_use-trait.rs:33:5\n    |\n LL |     get_critical();\n    |     ^^^^^^^^^^^^^^^\n@@ -11,10 +11,28 @@ LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n error: unused boxed `Critical` trait object that must be used\n-  --> $DIR/must_use-trait.rs:26:5\n+  --> $DIR/must_use-trait.rs:34:5\n    |\n LL |     get_boxed_critical();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: unused boxed boxed `Critical` trait object that must be used\n+  --> $DIR/must_use-trait.rs:35:5\n+   |\n+LL |     get_nested_boxed_critical();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused boxed `Critical` trait object in tuple element 1 that must be used\n+  --> $DIR/must_use-trait.rs:37:5\n+   |\n+LL |     get_critical_tuple();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused implementer of `Critical` in tuple element 2 that must be used\n+  --> $DIR/must_use-trait.rs:37:5\n+   |\n+LL |     get_critical_tuple();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}