{"sha": "ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "node_id": "C_kwDOAAsO6NoAKGFlODBjNzY0ZDQ2YTNjMjUwYTZjYzQxZTVkMmRlNWI4ZWQ0ODU2N2U", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-02T15:10:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T16:35:04Z"}, "message": "Add an always-ambiguous predicate to make sure that we don't accidentlally allow trait resolution to prove false things during coherence", "tree": {"sha": "33d45438def2000f3accc145225bc4268e8da38d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d45438def2000f3accc145225bc4268e8da38d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "html_url": "https://github.com/rust-lang/rust/commit/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fe30ff2fa39a912325121846074a659e8ec420", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fe30ff2fa39a912325121846074a659e8ec420", "html_url": "https://github.com/rust-lang/rust/commit/94fe30ff2fa39a912325121846074a659e8ec420"}], "stats": {"total": 119, "additions": 102, "deletions": 17}, "files": [{"sha": "45c6405d03ad6afa0841521ddd278a46980e9d36", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -2,7 +2,6 @@ use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRe\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n-use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_span::Span;\n@@ -156,10 +155,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         true\n     }\n \n-    fn register_opaque_type_obligations(\n-        &mut self,\n-        obligations: PredicateObligations<'tcx>,\n-    ) -> Result<(), TypeError<'tcx>> {\n+    fn register_opaque_type_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.type_checker\n             .fully_perform_op(\n                 self.locations,\n@@ -172,6 +168,5 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n                 },\n             )\n             .unwrap();\n-        Ok(())\n     }\n }"}, {"sha": "e0b465bab16d9bb0f8790ab2c414a3a95f3d5fcc", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -260,6 +260,10 @@ impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n         true\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,"}, {"sha": "bae43138b4d520ef56765809865e6def7565f589", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -517,6 +517,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n     }\n }"}, {"sha": "f0381353551c2b1a0ed5c0b58db47048a85631ed", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -59,6 +59,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::Coerce(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n                     | ty::PredicateKind::ConstEquate(..)\n+                    | ty::PredicateKind::Ambiguous\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => (),\n                 }\n             }"}, {"sha": "efce33bfe4724e06881f3c1177daef3114e1cdcf", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -702,6 +702,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // code is looking for a self type of an unresolved\n                 // inference variable.\n                 | ty::PredicateKind::ClosureKind(..)\n+                | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             },\n         )"}, {"sha": "44c3edf06a8837a492959696d9beb06aebd15dbe", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -803,6 +803,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::TypeOutlives(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             }\n         });"}, {"sha": "fb86fad84583df38e4d906bc5530c6f533edd78c", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -23,7 +23,6 @@ use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::mir::ConstraintCategory;\n-use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n@@ -741,11 +740,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         true\n     }\n \n-    fn register_opaque_type_obligations(\n-        &mut self,\n-        obligations: PredicateObligations<'tcx>,\n-    ) -> Result<(), TypeError<'tcx>> {\n+    fn register_opaque_type_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.obligations.extend(obligations);\n-        Ok(())\n     }\n }"}, {"sha": "53a19f8e4ec55aa38d58bf2635df9162fec68072", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -450,6 +450,15 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             ty::Binder::dummy(predicate),\n         ));\n     }\n+\n+    pub fn mark_ambiguous(&mut self) {\n+        self.obligations.push(Obligation::new(\n+            self.tcx(),\n+            self.trace.cause.clone(),\n+            self.param_env,\n+            ty::Binder::dummy(ty::PredicateKind::Ambiguous),\n+        ));\n+    }\n }\n \n struct Generalizer<'cx, 'tcx> {\n@@ -538,6 +547,11 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         true\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        // The generalizer always compares types against themselves,\n+        // and thus doesn't really take part in coherence.\n+    }\n+\n     fn binders<T>(\n         &mut self,\n         a: ty::Binder<'tcx, T>,\n@@ -820,6 +834,10 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         true\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _variance: ty::Variance,"}, {"sha": "8682f4d3b7aed970783395d50e8ca09a8b648d64", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -44,6 +44,10 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        self.fields.mark_ambiguous();\n+    }\n+\n     fn relate_item_substs(\n         &mut self,\n         _item_def_id: DefId,"}, {"sha": "41e21efb212bbd94b70d13762727df5cf241550a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -2954,6 +2954,10 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n         true\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     fn relate_with_variance<T: relate::Relate<'tcx>>(\n         &mut self,\n         _variance: ty::Variance,"}, {"sha": "67f3e67e963223aa5838d6e9b5b9ca756e9286b3", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -46,6 +46,10 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        self.fields.mark_ambiguous();\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,"}, {"sha": "1aaae714345c1ee4626109e7cf9976e56c8cbcb4", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -46,6 +46,10 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        self.fields.mark_ambiguous();\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,"}, {"sha": "be7b0bc60329dd079107bf7122f5dfbe810d7ba3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -93,10 +93,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n     );\n \n     fn const_equate(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n-    fn register_opaque_type_obligations(\n-        &mut self,\n-        obligations: Vec<PredicateObligation<'tcx>>,\n-    ) -> Result<(), TypeError<'tcx>>;\n+    fn register_opaque_type_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n@@ -419,7 +416,7 @@ where\n             .infcx\n             .handle_opaque_type(a, b, true, &cause, self.delegate.param_env())?\n             .obligations;\n-        self.delegate.register_opaque_type_obligations(obligations)?;\n+        self.delegate.register_opaque_type_obligations(obligations);\n         trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n         Ok(a)\n     }\n@@ -547,6 +544,10 @@ where\n         true\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     #[instrument(skip(self, info), level = \"trace\", ret)]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n@@ -918,6 +919,10 @@ where\n         true\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,"}, {"sha": "8f7805794513d7cd0056c29c1a5f4ca709cb0ae8", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -29,6 +29,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n             | ty::PredicateKind::TypeOutlives(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r_a, r_b)) => {\n                 Some(OutlivesBound::RegionSubRegion(r_b, r_a))"}, {"sha": "5d204dd70ed0cb2c838aba7b53971cdd83d313ad", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -151,6 +151,10 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         true\n     } // irrelevant\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,"}, {"sha": "2c6987cc3f45670d5290b6ba8d04ecc9d3d0aae2", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -52,6 +52,10 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n         self.a_is_expected\n     }\n \n+    fn mark_ambiguous(&mut self) {\n+        self.fields.mark_ambiguous()\n+    }\n+\n     fn with_cause<F, R>(&mut self, cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,"}, {"sha": "b2a31ac7e6f1af2dda0c165198532f377c834a6d", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -285,6 +285,7 @@ impl<'tcx> Elaborator<'tcx> {\n             ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                 // Nothing to elaborate\n             }\n+            ty::PredicateKind::Ambiguous => {}\n         }\n     }\n }"}, {"sha": "01a5ba65d8fcdcd4f96007b3e82b14c27ad10106", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -1659,6 +1659,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     Coerce(..) |\n                     ConstEvaluatable(..) |\n                     ConstEquate(..) |\n+                    Ambiguous |\n                     TypeWellFormedFromEnv(..) => continue,\n                 };\n                 if predicate.is_global() {"}, {"sha": "cd147d7e55813d5b4aaec1ab09461a4fd6405abd", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -48,6 +48,10 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         true\n     } // irrelevant\n \n+    fn mark_ambiguous(&mut self) {\n+        bug!()\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,"}, {"sha": "ee4b8f91c54873a075d1ed9712359e231b02fa86", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -259,6 +259,7 @@ impl FlagComputation {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 self.add_ty(ty);\n             }\n+            ty::PredicateKind::Ambiguous => {}\n         }\n     }\n "}, {"sha": "a4dddc17b6ff1b8d3aed823b221ba2e2a017e2e6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -619,6 +619,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Coerce(_)\n             | PredicateKind::ConstEvaluatable(_)\n             | PredicateKind::ConstEquate(_, _)\n+            | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(_) => true,\n         }\n     }\n@@ -701,6 +702,10 @@ pub enum PredicateKind<'tcx> {\n     ///\n     /// Only used for Chalk.\n     TypeWellFormedFromEnv(Ty<'tcx>),\n+\n+    /// A marker predicate that is always ambiguous.\n+    /// Used for coherence to mark opaque types as possibly equal to each other but ambiguous.\n+    Ambiguous,\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -1181,6 +1186,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::TypeOutlives(..)\n             | PredicateKind::ConstEvaluatable(..)\n             | PredicateKind::ConstEquate(..)\n+            | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n         }\n     }\n@@ -1199,6 +1205,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::TypeOutlives(..)\n             | PredicateKind::ConstEvaluatable(..)\n             | PredicateKind::ConstEquate(..)\n+            | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n         }\n     }\n@@ -1217,6 +1224,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::ConstEvaluatable(..)\n             | PredicateKind::ConstEquate(..)\n+            | PredicateKind::Ambiguous\n             | PredicateKind::TypeWellFormedFromEnv(..) => None,\n         }\n     }"}, {"sha": "4db4d57e26f8d6d2d37ce8b2df6b59b64945dcec", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -2703,6 +2703,7 @@ define_print_and_forward_display! {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 p!(\"the type `\", print(ty), \"` is found in the environment\")\n             }\n+            ty::PredicateKind::Ambiguous => p!(\"ambiguous\"),\n         }\n     }\n "}, {"sha": "3461ae870e4afd8169653b66cb26f8b0699f79d6", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -34,6 +34,9 @@ pub trait TypeRelation<'tcx>: Sized {\n     /// relation. Just affects error messages.\n     fn a_is_expected(&self) -> bool;\n \n+    /// Used during coherence. If called, must emit an always-ambiguous obligation.\n+    fn mark_ambiguous(&mut self);\n+\n     fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n@@ -567,6 +570,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             if relation.intercrate() {\n                 // During coherence, opaque types should be treated as equal to each other, even if their generic params\n                 // differ, as they could resolve to the same hidden type, even for different generic params.\n+                relation.mark_ambiguous();\n                 Ok(a)\n             } else {\n                 let opt_variances = tcx.variances_of(a_def_id);"}, {"sha": "18da620b298575ff77f9a6ebc4ff06bfb4e3c5a4", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -173,6 +173,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                 write!(f, \"TypeWellFormedFromEnv({:?})\", ty)\n             }\n+            ty::PredicateKind::Ambiguous => write!(f, \"Ambiguous\"),\n         }\n     }\n }"}, {"sha": "0cd6ed88f0082641d7141b4573a4eb319a8dc42f", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -843,6 +843,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n+                ty::PredicateKind::Ambiguous => return false,\n             };\n         }\n         true"}, {"sha": "e4734d3d982e203f9810437ccb3217a4a6042830", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -1176,6 +1176,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         )\n                     }\n \n+                    ty::PredicateKind::Ambiguous => span_bug!(span, \"ambiguous\"),\n+\n                     ty::PredicateKind::TypeWellFormedFromEnv(..) => span_bug!(\n                         span,\n                         \"TypeWellFormedFromEnv predicate should only exist in the environment\""}, {"sha": "d238e7556aea33a45c5a27a947db829e89594ad3", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![obligation.with(infcx.tcx, pred)]))\n                 }\n+                ty::PredicateKind::Ambiguous => ProcessResult::Unchanged,\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n@@ -569,6 +570,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         }\n                     }\n                 }\n+                ty::PredicateKind::Ambiguous => ProcessResult::Unchanged,\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }"}, {"sha": "db6f59ceebe0aa0792a3812f63b704b5f1ca23f6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -319,6 +319,7 @@ fn predicate_references_self<'tcx>(\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n     }\n }\n@@ -350,6 +351,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateKind::TypeOutlives(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => false,\n         }\n     })"}, {"sha": "ab9a0d57a4de1924f5ed0ebf46089569d6a6592f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -717,6 +717,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n                 }\n+                ty::PredicateKind::Ambiguous => Ok(EvaluatedToAmbig),\n             }\n         })\n     }"}, {"sha": "38bd3bc4322f5be287e3c0e6c623eb04a860a2bc", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -155,6 +155,7 @@ pub fn predicate_obligations<'tcx>(\n             wf.compute(c1.into());\n             wf.compute(c2.into());\n         }\n+        ty::PredicateKind::Ambiguous => {}\n         ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n             bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n         }\n@@ -878,6 +879,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::RegionOutlives(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n                 ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ref t, ref r)) => {\n                     // Search for a bound of the form `erased_self_ty"}, {"sha": "3e8bb9e575b32d26cbc439f52a792e9f4372d4fc", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -121,6 +121,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::Ambiguous\n                 | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", predicate),\n             };\n             let value = chalk_ir::ProgramClauseImplication {\n@@ -212,6 +213,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n+            | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::ConstEquate(..) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n             }\n@@ -625,6 +627,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                 bug!(\"unexpected predicate {}\", &self)\n             }\n@@ -754,6 +757,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                 bug!(\"unexpected predicate {}\", &self)\n             }"}, {"sha": "2d1a386992617260d52a5313dba1f60dad4d2b54", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -97,6 +97,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n                     | ty::PredicateKind::ConstEquate(..)\n+                    | ty::PredicateKind::Ambiguous\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n                     ty::PredicateKind::WellFormed(arg) => {\n                         wf_args.push(arg);"}, {"sha": "5200908527a1610f9d072b4cd8a041bc4d1c41e8", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -66,6 +66,7 @@ fn not_outlives_predicate<'tcx>(p: ty::Predicate<'tcx>) -> bool {\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => true,\n     }\n }"}, {"sha": "a49c631035b6d172a6cfe7d890af4e66d869c376", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -318,6 +318,7 @@ pub(crate) fn clean_predicate<'tcx>(\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => panic!(\"not user writable\"),\n     }\n }"}, {"sha": "b48bacb9ace6ffbe93943e8fee8db999937742f5", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80c764d46a3c250a6cc41e5d2de5b8ed48567e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=ae80c764d46a3c250a6cc41e5d2de5b8ed48567e", "patch": "@@ -37,6 +37,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::Ambiguous => panic!(\"ambiguous predicate on function: {predicate:#?}\"),\n             }\n         }\n         match predicates.parent {"}]}