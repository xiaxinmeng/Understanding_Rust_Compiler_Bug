{"sha": "6708558c341d0c4fd467636ee2b2695c125ae4d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDg1NThjMzQxZDBjNGZkNDY3NjM2ZWUyYjI2OTVjMTI1YWU0ZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-16T04:36:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-16T04:36:48Z"}, "message": "auto merge of #11548 : bjz/rust/bitwise, r=alexcrichton\n\nOne less trait in `std::num` and three less exported in the prelude.\r\n\r\ncc. #10387", "tree": {"sha": "749c0f4101e416ca51e7a454be00d6ed4f180baa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749c0f4101e416ca51e7a454be00d6ed4f180baa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6708558c341d0c4fd467636ee2b2695c125ae4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6708558c341d0c4fd467636ee2b2695c125ae4d3", "html_url": "https://github.com/rust-lang/rust/commit/6708558c341d0c4fd467636ee2b2695c125ae4d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6708558c341d0c4fd467636ee2b2695c125ae4d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2ab22cd0eda8e019cb243916e6c127708739cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2ab22cd0eda8e019cb243916e6c127708739cf", "html_url": "https://github.com/rust-lang/rust/commit/bf2ab22cd0eda8e019cb243916e6c127708739cf"}, {"sha": "1dd6906db2e6749bc3f113068e7493070b276feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd6906db2e6749bc3f113068e7493070b276feb", "html_url": "https://github.com/rust-lang/rust/commit/1dd6906db2e6749bc3f113068e7493070b276feb"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "fdb978ae7e12b2cf25f9ee539a4cd60be2dbb657", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -83,8 +83,7 @@ syn keyword rustTrait OrdIterator MutableDoubleEndedIterator ExactSize\n syn keyword rustTrait Times\n \n syn keyword rustTrait Algebraic Trigonometric Exponential Hyperbolic\n-syn keyword rustTrait Bitwise BitCount Bounded\n-syn keyword rustTrait Integer Fractional Real RealExt\n+syn keyword rustTrait Bitwise Bounded Integer Fractional Real RealExt\n syn keyword rustTrait Num NumCast CheckedAdd CheckedSub CheckedMul\n syn keyword rustTrait Orderable Signed Unsigned Round\n syn keyword rustTrait Primitive Int Float ToStrRadix ToPrimitive FromPrimitive"}, {"sha": "e04617780758be3f796dfd6d7e96a28c40637369", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -13,6 +13,8 @@\n //! This module defines a container which uses an efficient bit mask\n //! representation to hold C-like enum variants.\n \n+use std::num::Bitwise;\n+\n #[deriving(Clone, Eq, IterBytes, ToStr, Encodable, Decodable)]\n /// A specialized Set implementation to use enum types.\n pub struct EnumSet<E> {"}, {"sha": "8f491e836b8f2a0e9a6463751f674f5157de3d51", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -22,7 +22,7 @@ A `BigInt` is a combination of `BigUint` and `Sign`.\n use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use std::num;\n use std::num::{Zero, One, ToStrRadix, FromStrRadix, Orderable};\n-use std::num::{ToPrimitive, FromPrimitive};\n+use std::num::{Bitwise, ToPrimitive, FromPrimitive};\n use std::rand::Rng;\n use std::str;\n use std::uint;"}, {"sha": "ee2f7638be988734fa9f26ee967d0bdf139eb5aa", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -523,6 +523,7 @@ static H256: [u32, ..8] = [\n #[cfg(test)]\n mod tests {\n     use super::{Digest, Sha256, FixedBuffer};\n+    use std::num::Bounded;\n     use std::vec;\n     use std::rand::isaac::IsaacRng;\n     use std::rand::Rng;"}, {"sha": "909b25fe7563b2151e49f4bc974ac46c39181c6c", "filename": "src/librustpkg/sha1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibrustpkg%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibrustpkg%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsha1.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -445,6 +445,7 @@ impl Digest for Sha1 {\n \n #[cfg(test)]\n mod tests {\n+    use std::num::Bounded;\n     use std::rand::{IsaacRng, Rng};\n     use std::vec;\n     use extra::hex::FromHex;"}, {"sha": "a8eaa895650844d02364e8d6ca9ddd143e689234", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -17,7 +17,7 @@ use cmath;\n use default::Default;\n use libc::{c_float, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n-use num::{Zero, One, strconv};\n+use num::{Zero, One, Bounded, strconv};\n use num;\n use to_str;\n use unstable::intrinsics;"}, {"sha": "fe51cb07646ec54e142ddadfbd1f07aab5a09347", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -18,7 +18,7 @@ use cmath;\n use default::Default;\n use libc::{c_double, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n-use num::{Zero, One, strconv};\n+use num::{Zero, One, Bounded, strconv};\n use num;\n use to_str;\n use unstable::intrinsics;"}, {"sha": "e19e7c6c3b8bd2109c75c6c931f09d70e058d06d", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n@@ -24,7 +24,7 @@ use unstable::intrinsics;\n \n int_module!(i16, 16)\n \n-impl BitCount for i16 {\n+impl Bitwise for i16 {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> i16 { unsafe { intrinsics::ctpop16(*self) } }"}, {"sha": "372d9f680d72e7501429d3220813cc32cf5d2dec", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n@@ -24,7 +24,7 @@ use unstable::intrinsics;\n \n int_module!(i32, 32)\n \n-impl BitCount for i32 {\n+impl Bitwise for i32 {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> i32 { unsafe { intrinsics::ctpop32(*self) } }"}, {"sha": "2a91ee4dd71cc383efd91c5328aaac6470d1cb04", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -17,7 +17,7 @@ use prelude::*;\n use default::Default;\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n-use num::{BitCount, CheckedAdd, CheckedSub};\n+use num::{Bitwise, Bounded, CheckedAdd, CheckedSub};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n@@ -26,7 +26,7 @@ use unstable::intrinsics;\n \n int_module!(i64, 64)\n \n-impl BitCount for i64 {\n+impl Bitwise for i64 {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> i64 { unsafe { intrinsics::ctpop64(*self) } }"}, {"sha": "66162ce350269b07942c13575c20114a3533789e", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n@@ -24,7 +24,7 @@ use unstable::intrinsics;\n \n int_module!(i8, 8)\n \n-impl BitCount for i8 {\n+impl Bitwise for i8 {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> i8 { unsafe { intrinsics::ctpop8(*self) } }"}, {"sha": "8068d4a74cbf8ae5e978fe4bd97d29e600fed96d", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n@@ -26,7 +26,7 @@ use unstable::intrinsics;\n #[cfg(target_word_size = \"64\")] int_module!(int, 64)\n \n #[cfg(target_word_size = \"32\")]\n-impl BitCount for int {\n+impl Bitwise for int {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> int { (*self as i32).population_count() as int }\n@@ -41,7 +41,7 @@ impl BitCount for int {\n }\n \n #[cfg(target_word_size = \"64\")]\n-impl BitCount for int {\n+impl Bitwise for int {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> int { (*self as i64).population_count() as int }"}, {"sha": "add0991f7afb9b76c285bb1c2e06b9bebea3c8b3", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -315,8 +315,6 @@ impl Integer for $T {\n     fn is_odd(&self) -> bool { !self.is_even() }\n }\n \n-impl Bitwise for $T {}\n-\n #[cfg(not(test))]\n impl BitOr<$T,$T> for $T {\n     #[inline]\n@@ -446,6 +444,7 @@ mod tests {\n     use i32;\n     use num;\n     use num::CheckedDiv;\n+    use num::Bitwise;\n     use mem;\n \n     #[test]"}, {"sha": "05f21c7d44804ed2d984b0ea926d55b270ac39e6", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -324,21 +324,27 @@ pub trait Real: Signed\n /// Inverse hyperbolic tangent function.\n #[inline(always)] pub fn atanh<T: Real>(value: T) -> T { value.atanh() }\n \n-/// Collects the bitwise operators under one trait.\n-pub trait Bitwise: Not<Self>\n+pub trait Bounded {\n+    // FIXME (#5527): These should be associated constants\n+    fn min_value() -> Self;\n+    fn max_value() -> Self;\n+}\n+\n+/// Numbers with a fixed binary representation.\n+pub trait Bitwise: Bounded\n+                 + Not<Self>\n                  + BitAnd<Self,Self>\n                  + BitOr<Self,Self>\n                  + BitXor<Self,Self>\n                  + Shl<Self,Self>\n-                 + Shr<Self,Self> {}\n-\n-/// A trait for common counting operations on bits.\n-pub trait BitCount {\n+                 + Shr<Self,Self> {\n     /// Returns the number of bits set in the number.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Bitwise;\n+    ///\n     /// let n = 0b0101000u16;\n     /// assert_eq!(n.population_count(), 2);\n     /// ```\n@@ -348,6 +354,8 @@ pub trait BitCount {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Bitwise;\n+    ///\n     /// let n = 0b0101000u16;\n     /// assert_eq!(n.leading_zeros(), 10);\n     /// ```\n@@ -357,18 +365,14 @@ pub trait BitCount {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Bitwise;\n+    ///\n     /// let n = 0b0101000u16;\n     /// assert_eq!(n.trailing_zeros(), 3);\n     /// ```\n     fn trailing_zeros(&self) -> Self;\n }\n \n-pub trait Bounded {\n-    // FIXME (#5527): These should be associated constants\n-    fn min_value() -> Self;\n-    fn max_value() -> Self;\n-}\n-\n /// Specifies the available operations common to all of Rust's core numeric primitives.\n /// These may not always make sense from a purely mathematical point of view, but\n /// may be useful for systems programming.\n@@ -394,8 +398,7 @@ pub trait Primitive: Clone\n /// A collection of traits relevant to primitive signed and unsigned integers\n pub trait Int: Integer\n              + Primitive\n-             + Bitwise\n-             + BitCount {}\n+             + Bitwise {}\n \n /// Used for representing the classification of floating point numbers\n #[deriving(Eq)]"}, {"sha": "770db889af55f1cd915462089780275beb4378a7", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::BitCount;\n+use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "9e08ffed3b70bbd3c7d80e649f360f7c24bad179", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::BitCount;\n+use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "a579e7ebbbe4af52eb72a96df3e20d69179abd13", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::BitCount;\n+use num::{Bitwise, Bounded};\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n use num::{CheckedAdd, CheckedSub};"}, {"sha": "4aa34b6d880444a08b14e75ac08c91158bf25c70", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use default::Default;\n-use num::BitCount;\n+use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "d304f947542143c8f8e48a10019af03a60ee2673", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -16,7 +16,7 @@ use prelude::*;\n \n use default::Default;\n use mem;\n-use num::BitCount;\n+use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "97e547a2d42802beaf5de1173cdab525f85eb82f", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -176,8 +176,6 @@ impl Integer for $T {\n     fn is_odd(&self) -> bool { !self.is_even() }\n }\n \n-impl Bitwise for $T {}\n-\n #[cfg(not(test))]\n impl BitOr<$T,$T> for $T {\n     #[inline]\n@@ -298,7 +296,7 @@ impl Primitive for $T {\n     fn is_signed(_: Option<$T>) -> bool { false }\n }\n \n-impl BitCount for $T {\n+impl Bitwise for $T {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n     #[inline]\n     fn population_count(&self) -> $T {\n@@ -325,6 +323,7 @@ mod tests {\n \n     use num;\n     use num::CheckedDiv;\n+    use num::Bitwise;\n     use mem;\n     use u16;\n "}, {"sha": "2f5f3e8f4568d0b045d055cfe690921f4b20bd2a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6708558c341d0c4fd467636ee2b2695c125ae4d3/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=6708558c341d0c4fd467636ee2b2695c125ae4d3", "patch": "@@ -58,8 +58,7 @@ pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::Times;\n-pub use num::{Bitwise, BitCount, Bounded, Integer, Real};\n-pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n+pub use num::{Integer, Real, Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Primitive, Int, Float, ToStrRadix, ToPrimitive, FromPrimitive};\n pub use path::{GenericPath, Path, PosixPath, WindowsPath};"}]}