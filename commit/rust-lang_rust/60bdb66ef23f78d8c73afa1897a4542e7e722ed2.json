{"sha": "60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYmRiNjZlZjIzZjc4ZDhjNzNhZmExODk3YTQ1NDJlN2U3MjJlZDI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T12:31:43Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T12:31:43Z"}, "message": "Lower bounds on trait definition, and resolve assoc types from super traits", "tree": {"sha": "cc5dc599d3c369a4769c792a2c440749ed4b7771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5dc599d3c369a4769c792a2c440749ed4b7771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "html_url": "https://github.com/rust-lang/rust/commit/60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae4d9c311084e3092eb4c2d35e98f6c2c70315b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae4d9c311084e3092eb4c2d35e98f6c2c70315b", "html_url": "https://github.com/rust-lang/rust/commit/4ae4d9c311084e3092eb4c2d35e98f6c2c70315b"}], "stats": {"total": 140, "additions": 102, "deletions": 38}, "files": [{"sha": "7f7de3bf4ae3d3f127c9e2bb019078c053516348", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -1007,6 +1007,7 @@ dependencies = [\n  \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git)\",\n  \"ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "e89b97dafca4890d30f43ed3a1f8d709d0d41b19", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -12,6 +12,7 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.9.0\"\n ena = \"0.13\"\n once_cell = \"1.0.1\"\n+itertools = \"0.8.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "4739246cb10af07ac203a5f29a7593e9a951576a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -1,8 +1,11 @@\n pub(crate) mod src;\n pub(crate) mod docs;\n \n+use std::iter;\n use std::sync::Arc;\n \n+use itertools::Itertools;\n+\n use ra_db::{CrateId, Edition, FileId, SourceRootId};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n@@ -820,7 +823,43 @@ impl Trait {\n         self.trait_data(db).items().to_vec()\n     }\n \n-    pub fn associated_type_by_name(self, db: &impl DefDatabase, name: Name) -> Option<TypeAlias> {\n+    fn direct_super_traits(self, db: &impl HirDatabase) -> Vec<Trait> {\n+        let resolver = self.resolver(db);\n+        // returning the iterator directly doesn't easily work because of\n+        // lifetime problems, but since there usually shouldn't be more than a\n+        // few direct traits this should be fine (we could even use some kind of\n+        // SmallVec if performance is a concern)\n+        self.generic_params(db)\n+            .where_predicates\n+            .iter()\n+            .filter_map(|pred| match &pred.type_ref {\n+                TypeRef::Path(p) if p.as_ident() == Some(&crate::name::SELF_TYPE) => {\n+                    pred.bound.as_path()\n+                }\n+                _ => None,\n+            })\n+            .filter_map(|path| {\n+                match resolver.resolve_path_without_assoc_items(db, path).take_types() {\n+                    Some(crate::Resolution::Def(ModuleDef::Trait(t))) => Some(t),\n+                    _ => None,\n+                }\n+            })\n+            .collect()\n+    }\n+\n+    /// Returns an iterator over the whole super trait hierarchy (not including\n+    /// the trait itself). (This iterator may be infinite in case of circular\n+    /// super trait dependencies, which are possible in malformed code.)\n+    pub fn all_super_traits<'a>(\n+        self,\n+        db: &'a impl HirDatabase,\n+    ) -> impl Iterator<Item = Trait> + 'a {\n+        self.direct_super_traits(db).into_iter().flat_map(move |t| {\n+            iter::once(t).chain(Box::new(t.all_super_traits(db)) as Box<dyn Iterator<Item = Trait>>)\n+        })\n+    }\n+\n+    pub fn associated_type_by_name(self, db: &impl DefDatabase, name: &Name) -> Option<TypeAlias> {\n         let trait_data = self.trait_data(db);\n         trait_data\n             .items()\n@@ -829,7 +868,18 @@ impl Trait {\n                 TraitItem::TypeAlias(t) => Some(*t),\n                 _ => None,\n             })\n-            .find(|t| t.name(db) == name)\n+            .find(|t| &t.name(db) == name)\n+    }\n+\n+    pub fn associated_type_by_name_including_super_traits(\n+        self,\n+        db: &impl HirDatabase,\n+        name: &Name,\n+    ) -> Option<TypeAlias> {\n+        iter::once(self)\n+            .chain(self.all_super_traits(db))\n+            .unique()\n+            .find_map(|t| t.associated_type_by_name(db, name))\n     }\n \n     pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {"}, {"sha": "c76df0698c4a2e10e495531b7da449fbca7548d3", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -87,11 +87,15 @@ impl GenericParams {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.push(GenericParam { idx: start, name: SELF_TYPE, default: None });\n                 generics.fill(&it.source(db).ast, start + 1);\n+                // add super traits as bounds on Self\n+                // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n+                let self_param = TypeRef::Path(SELF_TYPE.into());\n+                generics.fill_bounds(&it.source(db).ast, self_param);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&it.source(db).ast, start),\n             // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n             // type-parameter, but rather is a type-alias for impl's target\n-            // type, so this is handled by the resovler.\n+            // type, so this is handled by the resolver.\n             GenericDef::ImplBlock(it) => generics.fill(&it.source(db).ast, start),\n             GenericDef::EnumVariant(_) => {}\n         }\n@@ -108,6 +112,14 @@ impl GenericParams {\n         }\n     }\n \n+    fn fill_bounds(&mut self, node: &impl ast::TypeBoundsOwner, type_ref: TypeRef) {\n+        for bound in\n+            node.type_bound_list().iter().flat_map(|type_bound_list| type_bound_list.bounds())\n+        {\n+            self.add_where_predicate_from_bound(bound, type_ref.clone());\n+        }\n+    }\n+\n     fn fill_params(&mut self, params: ast::TypeParamList, start: u32) {\n         for (idx, type_param) in params.type_params().enumerate() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n@@ -117,13 +129,7 @@ impl GenericParams {\n             self.params.push(param);\n \n             let type_ref = TypeRef::Path(name.into());\n-            for bound in type_param\n-                .type_bound_list()\n-                .iter()\n-                .flat_map(|type_bound_list| type_bound_list.bounds())\n-            {\n-                self.add_where_predicate_from_bound(bound, type_ref.clone());\n-            }\n+            self.fill_bounds(&type_param, type_ref);\n         }\n     }\n "}, {"sha": "13bc901bc9f1a58fbfe6f60ae4d6cf4dbac81afb", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -38,11 +38,6 @@ impl Name {\n         Name::new(idx.to_string().into())\n     }\n \n-    // Needed for Deref\n-    pub(crate) fn target() -> Name {\n-        Name::new(\"Target\".into())\n-    }\n-\n     // There's should be no way to extract a string out of `Name`: `Name` in the\n     // future, `Name` will include hygiene information, and you can't encode\n     // hygiene into a String.\n@@ -123,6 +118,7 @@ pub(crate) const FUTURE_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6,\n pub(crate) const RESULT_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"result\"));\n pub(crate) const RESULT_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Result\"));\n pub(crate) const OUTPUT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n+pub(crate) const TARGET: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Target\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {\n     let raw_start = \"r#\";"}, {"sha": "caa17f64eac36625e32ecd944136976cd9d315cb", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -8,7 +8,7 @@ use std::iter::successors;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Ty, TypeWalk};\n-use crate::{HasGenericParams, HirDatabase, Name, Resolver};\n+use crate::{name, HasGenericParams, HirDatabase, Resolver};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n \n@@ -42,7 +42,7 @@ fn deref_by_trait(\n         crate::lang_item::LangItemTarget::Trait(t) => t,\n         _ => return None,\n     };\n-    let target = deref_trait.associated_type_by_name(db, Name::target())?;\n+    let target = deref_trait.associated_type_by_name(db, &name::TARGET)?;\n \n     if target.generic_params(db).count_params_including_parent() != 1 {\n         // the Target type + Deref trait should only have one generic parameter,"}, {"sha": "0e6ebd3652c525b8f04a1697ae61ab2c0c58fefa", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -1453,7 +1453,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         match self.resolver.resolve_path_segments(self.db, &into_iter_path).into_fully_resolved() {\n             PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, name::ITEM)?)\n+                Some(trait_.associated_type_by_name(self.db, &name::ITEM)?)\n             }\n             _ => None,\n         }\n@@ -1471,7 +1471,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         match self.resolver.resolve_path_segments(self.db, &ops_try_path).into_fully_resolved() {\n             PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, name::OK)?)\n+                Some(trait_.associated_type_by_name(self.db, &name::OK)?)\n             }\n             _ => None,\n         }\n@@ -1493,7 +1493,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             .into_fully_resolved()\n         {\n             PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, name::OUTPUT)?)\n+                Some(trait_.associated_type_by_name(self.db, &name::OUTPUT)?)\n             }\n             _ => None,\n         }"}, {"sha": "480bae7401e6d57272a3ad2c2d9f6c6f40e81efa", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -132,14 +132,16 @@ impl Ty {\n             if let Some(remaining_index) = remaining_index {\n                 if remaining_index == path.segments.len() - 1 {\n                     let segment = &path.segments[remaining_index];\n-                    let associated_ty =\n-                        match trait_ref.trait_.associated_type_by_name(db, segment.name.clone()) {\n-                            Some(t) => t,\n-                            None => {\n-                                // associated type not found\n-                                return Ty::Unknown;\n-                            }\n-                        };\n+                    let associated_ty = match trait_ref\n+                        .trait_\n+                        .associated_type_by_name_including_super_traits(db, &segment.name)\n+                    {\n+                        Some(t) => t,\n+                        None => {\n+                            // associated type not found\n+                            return Ty::Unknown;\n+                        }\n+                    };\n                     // FIXME handle type parameters on the segment\n                     Ty::Projection(ProjectionTy { associated_ty, parameters: trait_ref.substs })\n                 } else {\n@@ -387,10 +389,11 @@ fn assoc_type_bindings_from_type_bound<'a>(\n         .flat_map(|segment| segment.args_and_bindings.iter())\n         .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n         .map(move |(name, type_ref)| {\n-            let associated_ty = match trait_ref.trait_.associated_type_by_name(db, name.clone()) {\n-                None => return GenericPredicate::Error,\n-                Some(t) => t,\n-            };\n+            let associated_ty =\n+                match trait_ref.trait_.associated_type_by_name_including_super_traits(db, &name) {\n+                    None => return GenericPredicate::Error,\n+                    Some(t) => t,\n+                };\n             let projection_ty =\n                 ProjectionTy { associated_ty, parameters: trait_ref.substs.clone() };\n             let ty = Ty::from_hir(db, resolver, type_ref);"}, {"sha": "17c4e3556f90ee2c84deb992cf8b83d1ba265544", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -3720,11 +3720,11 @@ fn test() {\n     [157; 160) '{t}': T\n     [158; 159) 't': T\n     [259; 280) '{     ...S)); }': ()\n-    [265; 269) 'get2': fn get2<{unknown}, S<{unknown}>>(T) -> U\n-    [265; 277) 'get2(set(S))': {unknown}\n-    [270; 273) 'set': fn set<S<{unknown}>>(T) -> T\n-    [270; 276) 'set(S)': S<{unknown}>\n-    [274; 275) 'S': S<{unknown}>\n+    [265; 269) 'get2': fn get2<u64, S<u64>>(T) -> U\n+    [265; 277) 'get2(set(S))': u64\n+    [270; 273) 'set': fn set<S<u64>>(T) -> T\n+    [270; 276) 'set(S)': S<u64>\n+    [274; 275) 'S': S<u64>\n     \"###\n     );\n }"}, {"sha": "cfe0cab16f22d498ec68e712bce6544346015a4e", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -636,7 +636,7 @@ pub(crate) fn impl_datum_query(\n             _ => None,\n         })\n         .filter_map(|t| {\n-            let assoc_ty = trait_.associated_type_by_name(db, t.name(db))?;\n+            let assoc_ty = trait_.associated_type_by_name(db, &t.name(db))?;\n             let ty = db.type_for_def(t.into(), crate::Namespace::Types).subst(&bound_vars);\n             Some(chalk_rust_ir::AssociatedTyValue {\n                 impl_id,"}, {"sha": "bc8acc7eede3e600ede249c9fd3d02c2bb78621f", "filename": "crates/ra_hir/src/type_ref.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bdb66ef23f78d8c73afa1897a4542e7e722ed2/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "patch": "@@ -150,4 +150,11 @@ impl TypeBound {\n             ast::TypeBoundKind::ForType(_) | ast::TypeBoundKind::Lifetime(_) => TypeBound::Error,\n         }\n     }\n+\n+    pub fn as_path(&self) -> Option<&Path> {\n+        match self {\n+            TypeBound::Path(p) => Some(p),\n+            _ => None,\n+        }\n+    }\n }"}]}