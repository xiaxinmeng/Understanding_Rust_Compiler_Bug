{"sha": "d665acbbec39ffd26eb56b1194653459a0c495e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NjVhY2JiZWMzOWZmZDI2ZWI1NmIxMTk0NjUzNDU5YTBjNDk1ZTc=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-13T13:46:36Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-16T14:35:06Z"}, "message": "Implement array inference", "tree": {"sha": "b3c271849eefa4cb35ed1d737d1977613ecf86d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c271849eefa4cb35ed1d737d1977613ecf86d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d665acbbec39ffd26eb56b1194653459a0c495e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d665acbbec39ffd26eb56b1194653459a0c495e7", "html_url": "https://github.com/rust-lang/rust/commit/d665acbbec39ffd26eb56b1194653459a0c495e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d665acbbec39ffd26eb56b1194653459a0c495e7/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4729a1b05427aa7d63b1dcb9ee6dceef2cfc613e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4729a1b05427aa7d63b1dcb9ee6dceef2cfc613e", "html_url": "https://github.com/rust-lang/rust/commit/4729a1b05427aa7d63b1dcb9ee6dceef2cfc613e"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "6e98ebc697694d15764ab1c26962492993024bfb", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d665acbbec39ffd26eb56b1194653459a0c495e7/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d665acbbec39ffd26eb56b1194653459a0c495e7/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=d665acbbec39ffd26eb56b1194653459a0c495e7", "patch": "@@ -197,6 +197,9 @@ pub enum Expr {\n     Tuple {\n         exprs: Vec<ExprId>,\n     },\n+    Array {\n+        exprs: Vec<ExprId>,\n+    },\n     Literal(Literal),\n }\n \n@@ -312,7 +315,7 @@ impl Expr {\n             | Expr::UnaryOp { expr, .. } => {\n                 f(*expr);\n             }\n-            Expr::Tuple { exprs } => {\n+            Expr::Tuple { exprs } | Expr::Array { exprs } => {\n                 for expr in exprs {\n                     f(*expr);\n                 }\n@@ -649,6 +652,10 @@ impl ExprCollector {\n                 let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n+            ast::ExprKind::ArrayExpr(e) => {\n+                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                self.alloc_expr(Expr::Array { exprs }, syntax_ptr)\n+            }\n             ast::ExprKind::Literal(e) => {\n                 let child = if let Some(child) = e.literal_expr() {\n                     child\n@@ -691,7 +698,6 @@ impl ExprCollector {\n             // TODO implement HIR for these:\n             ast::ExprKind::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::IndexExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::ExprKind::ArrayExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::ExprKind::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n         }\n     }"}, {"sha": "676ed3ac9947414e6b97b9d68033e244f17d671c", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d665acbbec39ffd26eb56b1194653459a0c495e7/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d665acbbec39ffd26eb56b1194653459a0c495e7/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d665acbbec39ffd26eb56b1194653459a0c495e7", "patch": "@@ -227,6 +227,9 @@ pub enum Ty {\n     /// A tuple type.  For example, `(i32, bool)`.\n     Tuple(Arc<[Ty]>),\n \n+    /// A array type.  For example, `[i32]`.\n+    Array(Arc<[Ty]>),\n+\n     // The projection of an associated type.  For example,\n     // `<T as Trait<..>>::N`.pub\n     // Projection(ProjectionTy),\n@@ -414,6 +417,16 @@ impl fmt::Display for Ty {\n                         .to_fmt(f)\n                 }\n             }\n+            Ty::Array(ts) => {\n+                if ts.len() == 1 {\n+                    write!(f, \"[{},]\", ts[0])\n+                } else {\n+                    join(ts.iter())\n+                        .surround_with(\"[\", \"]\")\n+                        .separator(\", \")\n+                        .to_fmt(f)\n+                }\n+            }\n             Ty::FnPtr(sig) => {\n                 join(sig.input.iter())\n                     .surround_with(\"fn(\", \")\")\n@@ -1101,7 +1114,15 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n \n                 Ty::Tuple(Arc::from(ty_vec))\n-            }\n+            },\n+            Expr::Array { exprs } => {\n+                let mut ty_vec = Vec::with_capacity(exprs.len());\n+                for arg in exprs.iter() {\n+                    ty_vec.push(self.infer_expr(*arg, &Expectation::none()));\n+                }\n+\n+                Ty::Array(Arc::from(ty_vec))\n+            },\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => Ty::Bool,\n                 Literal::String(..) => Ty::Ref(Arc::new(Ty::Str), Mutability::Shared),"}]}