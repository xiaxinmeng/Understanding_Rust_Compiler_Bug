{"sha": "c9595faa2850b01966c64682d2bb8b32e0955625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NTk1ZmFhMjg1MGIwMTk2NmM2NDY4MmQyYmI4YjMyZTA5NTU2MjU=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-24T10:42:04Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-24T10:42:04Z"}, "message": "Make Vec::dedup panicking test actually detect double panics", "tree": {"sha": "27adf2478d18ad08d356d44beb98215226e03e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27adf2478d18ad08d356d44beb98215226e03e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9595faa2850b01966c64682d2bb8b32e0955625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9595faa2850b01966c64682d2bb8b32e0955625", "html_url": "https://github.com/rust-lang/rust/commit/c9595faa2850b01966c64682d2bb8b32e0955625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9595faa2850b01966c64682d2bb8b32e0955625/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c97196724d82335ee0dbb07cb3f3166f91c009", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c97196724d82335ee0dbb07cb3f3166f91c009", "html_url": "https://github.com/rust-lang/rust/commit/e0c97196724d82335ee0dbb07cb3f3166f91c009"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "36c81b49709735cb3a126faf27733355b261ccbb", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c9595faa2850b01966c64682d2bb8b32e0955625/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9595faa2850b01966c64682d2bb8b32e0955625/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=c9595faa2850b01966c64682d2bb8b32e0955625", "patch": "@@ -2234,48 +2234,50 @@ fn test_vec_dedup() {\n #[test]\n fn test_vec_dedup_panicking() {\n     #[derive(Debug)]\n-    struct Panic {\n-        drop_counter: &'static AtomicU32,\n+    struct Panic<'a> {\n+        drop_counter: &'a Cell<u32>,\n         value: bool,\n         index: usize,\n     }\n \n-    impl PartialEq for Panic {\n+    impl<'a> PartialEq for Panic<'a> {\n         fn eq(&self, other: &Self) -> bool {\n             self.value == other.value\n         }\n     }\n \n-    impl Drop for Panic {\n+    impl<'a> Drop for Panic<'a> {\n         fn drop(&mut self) {\n-            let x = self.drop_counter.fetch_add(1, Ordering::SeqCst);\n-            assert!(x != 4);\n+            self.drop_counter.set(self.drop_counter.get() + 1);\n+            if !std::thread::panicking() {\n+                assert!(self.index != 4);\n+            }\n         }\n     }\n \n-    static DROP_COUNTER: AtomicU32 = AtomicU32::new(0);\n+    let drop_counter = &Cell::new(0);\n     let expected = [\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 0 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 5 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 6 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 7 },\n+        Panic { drop_counter, value: false, index: 0 },\n+        Panic { drop_counter, value: false, index: 5 },\n+        Panic { drop_counter, value: true, index: 6 },\n+        Panic { drop_counter, value: true, index: 7 },\n     ];\n     let mut vec = vec![\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 0 },\n+        Panic { drop_counter, value: false, index: 0 },\n         // these elements get deduplicated\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 1 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 2 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 3 },\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 4 },\n-        // here it panics\n-        Panic { drop_counter: &DROP_COUNTER, value: false, index: 5 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 6 },\n-        Panic { drop_counter: &DROP_COUNTER, value: true, index: 7 },\n+        Panic { drop_counter, value: false, index: 1 },\n+        Panic { drop_counter, value: false, index: 2 },\n+        Panic { drop_counter, value: false, index: 3 },\n+        Panic { drop_counter, value: false, index: 4 },\n+        // here it panics while dropping the item with index==4\n+        Panic { drop_counter, value: false, index: 5 },\n+        Panic { drop_counter, value: true, index: 6 },\n+        Panic { drop_counter, value: true, index: 7 },\n     ];\n \n-    let _ = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {\n-        vec.dedup();\n-    }));\n+    let _ = catch_unwind(AssertUnwindSafe(|| vec.dedup())).unwrap_err();\n+\n+    assert_eq!(drop_counter.get(), 4);\n \n     let ok = vec.iter().zip(expected.iter()).all(|(x, y)| x.index == y.index);\n "}]}