{"sha": "60ce411b5310c8af09de2d552e67b0593f3f1d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwY2U0MTFiNTMxMGM4YWYwOWRlMmQ1NTJlNjdiMDU5M2YzZjFkNGI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-07-09T14:20:53Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-07-09T14:20:53Z"}, "message": "Format async closure", "tree": {"sha": "5c798fc1369c19cf6742b328a0188ac96e0b7165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c798fc1369c19cf6742b328a0188ac96e0b7165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ce411b5310c8af09de2d552e67b0593f3f1d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ce411b5310c8af09de2d552e67b0593f3f1d4b", "html_url": "https://github.com/rust-lang/rust/commit/60ce411b5310c8af09de2d552e67b0593f3f1d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ce411b5310c8af09de2d552e67b0593f3f1d4b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2c6a6692f4a442c09242f0a5a0ae15878589de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2c6a6692f4a442c09242f0a5a0ae15878589de", "html_url": "https://github.com/rust-lang/rust/commit/ae2c6a6692f4a442c09242f0a5a0ae15878589de"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "5e2f01053f111131cf31639cb221ad95c7b44e38", "filename": "src/closures.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=60ce411b5310c8af09de2d552e67b0593f3f1d4b", "patch": "@@ -31,9 +31,9 @@ use utils::{last_line_width, left_most_sub_expr, stmt_expr};\n //     statement without needing a semi-colon), then adding or removing braces\n //     can change whether it is treated as an expression or statement.\n \n-// FIXME(topecongiro) Format async closures (#2813).\n pub fn rewrite_closure(\n     capture: ast::CaptureBy,\n+    asyncness: ast::IsAsync,\n     movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n@@ -43,8 +43,9 @@ pub fn rewrite_closure(\n ) -> Option<String> {\n     debug!(\"rewrite_closure {:?}\", body);\n \n-    let (prefix, extra_offset) =\n-        rewrite_closure_fn_decl(capture, movability, fn_decl, body, span, context, shape)?;\n+    let (prefix, extra_offset) = rewrite_closure_fn_decl(\n+        capture, asyncness, movability, fn_decl, body, span, context, shape,\n+    )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n \n@@ -198,19 +199,20 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     capture: ast::CaptureBy,\n+    asyncness: ast::IsAsync,\n     movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<(String, usize)> {\n+    let is_async = if asyncness.is_async() { \"async \" } else { \"\" };\n     let mover = if capture == ast::CaptureBy::Value {\n         \"move \"\n     } else {\n         \"\"\n     };\n-\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -219,7 +221,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(mover.len() + immovable.len())?\n+        .shrink_left(is_async.len() + mover.len() + immovable.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -265,7 +267,7 @@ fn rewrite_closure_fn_decl(\n         config: context.config,\n     };\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}|{}|\", immovable, mover, list_str);\n+    let mut prefix = format!(\"{}{}{}|{}|\", is_async, immovable, mover, list_str);\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -289,7 +291,9 @@ pub fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, _, movability, ref fn_decl, ref body, _) = expr.node {\n+    if let ast::ExprKind::Closure(capture, asyncness, movability, ref fn_decl, ref body, _) =\n+        expr.node\n+    {\n         let body = match body.node {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n@@ -300,7 +304,7 @@ pub fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            capture, movability, fn_decl, body, expr.span, context, shape,\n+            capture, asyncness, movability, fn_decl, body, expr.span, context, shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "fcda529ea893ba8ec9cb1301aafaa7e86e72af24", "filename": "src/config/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=60ce411b5310c8af09de2d552e67b0593f3f1d4b", "patch": "@@ -104,14 +104,15 @@ create_config! {\n         \"Maximum number of blank lines which can be put between items.\";\n     blank_lines_lower_bound: usize, 0, false,\n         \"Minimum number of blank lines which must be put between items.\";\n+    edition: Edition, Edition::Edition2015, false, \"The edition of the parser. (RFC 2052)\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";\n     use_try_shorthand: bool, false, true, \"Replace uses of the try! macro by the ? shorthand\";\n     use_field_init_shorthand: bool, false, true, \"Use field initialization shorthand if possible\";\n     force_explicit_abi: bool, true, true, \"Always print the abi for extern items\";\n     condense_wildcard_suffixes: bool, false, false, \"Replace strings of _ wildcards by a single .. \\\n-                                              in tuple patterns\";\n+                                                     in tuple patterns\";\n \n     // Control options (changes the operation of rustfmt, rather than the formatting)\n     color: Color, Color::Auto, false,"}, {"sha": "5fa0a0483136936a0c68ba907eb3c54cfea89da4", "filename": "src/config/options.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=60ce411b5310c8af09de2d552e67b0593f3f1d4b", "patch": "@@ -340,3 +340,18 @@ pub trait CliOptions {\n     fn apply_to(self, config: &mut Config);\n     fn config_path(&self) -> Option<&Path>;\n }\n+\n+/// The edition of the compiler (RFC 2052)\n+configuration_option_enum!{ Edition:\n+    Edition2015,\n+    Edition2018,\n+}\n+\n+impl Edition {\n+    pub(crate) fn to_libsyntax_pos_edition(&self) -> syntax_pos::edition::Edition {\n+        match self {\n+            Edition::Edition2015 => syntax_pos::edition::Edition::Edition2015,\n+            Edition::Edition2018 => syntax_pos::edition::Edition::Edition2018,\n+        }\n+    }\n+}"}, {"sha": "6928b77f36039d4853ddab7b6079162f03c9ec78", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=60ce411b5310c8af09de2d552e67b0593f3f1d4b", "patch": "@@ -183,9 +183,9 @@ pub fn format_expr(\n         } else {\n             Some(\"yield\".to_string())\n         },\n-        ast::ExprKind::Closure(capture, _, movability, ref fn_decl, ref body, _) => {\n+        ast::ExprKind::Closure(capture, asyncness, movability, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(\n-                capture, movability, fn_decl, body, expr.span, context, shape,\n+                capture, asyncness, movability, fn_decl, body, expr.span, context, shape,\n             )\n         }\n         ast::ExprKind::Try(..) | ast::ExprKind::Field(..) | ast::ExprKind::MethodCall(..) => {"}, {"sha": "817ed426e5226cca2681be1927f394c09525f282", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ce411b5310c8af09de2d552e67b0593f3f1d4b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=60ce411b5310c8af09de2d552e67b0593f3f1d4b", "patch": "@@ -33,6 +33,7 @@ extern crate serde;\n extern crate serde_derive;\n extern crate serde_json;\n extern crate syntax;\n+extern crate syntax_pos;\n extern crate toml;\n extern crate unicode_segmentation;\n \n@@ -793,6 +794,7 @@ fn format_input_inner<T: Write>(\n     config: &Config,\n     mut out: Option<&mut T>,\n ) -> Result<(Summary, FileMap, FormatReport), (ErrorKind, Summary)> {\n+    syntax_pos::hygiene::set_default_edition(config.edition().to_libsyntax_pos_edition());\n     let mut summary = Summary::default();\n     if config.disable_all_formatting() {\n         // When the input is from stdin, echo back the input."}]}