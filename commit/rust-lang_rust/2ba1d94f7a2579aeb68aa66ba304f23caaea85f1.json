{"sha": "2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTFkOTRmN2EyNTc5YWViNjhhYTY2YmEzMDRmMjNjYWFlYTg1ZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-16T04:05:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-16T04:05:18Z"}, "message": "Rollup merge of #61866 - sinkuu:redundant_clone, r=petrochenkov\n\nRemove redundant `clone()`s", "tree": {"sha": "7f0ae2f1a858ffad74bf937b80bbfa46a7182daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f0ae2f1a858ffad74bf937b80bbfa46a7182daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdBb/+CRBK7hj4Ov3rIwAAdHIIABs9Cf1HSj3X544SLZvR9iJ6\n0tKzwUFGSOqyDVgbhOBMocUsRGhngpXP//hx8UUD6XjnlMKFDKaGFj7qPXd77g0i\n/dJcoW/hTzUKtKvQUs1n8e7MJMcm1qKE4t6MDqysKbG0ycVNu3slN2WN/AqrTbBh\nxnHkKRNomCd+g4kNJbhuOpEs6Fn3Kk+yIKC116MVpfMASyLXWQXT5i2Y100lCA0E\ntc5XsfnMfJnOD3L6yEi0MponXVlKLqluny4wqIAzH53zJZkp0i5Kod/qHxA8aTTx\nDn7cTWFjgSI+97j0ceu1F7vgZSsKBebhGa8bmJd5+oP3ILhpTGeNhpAO2c2sKiI=\n=9wrc\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f0ae2f1a858ffad74bf937b80bbfa46a7182daa\nparent af561116516bd1d5ed4a830e08dc5e74293f78fb\nparent 6a0abd60486d7301dea849e7107bc92380e6045e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560657918 +0200\ncommitter GitHub <noreply@github.com> 1560657918 +0200\n\nRollup merge of #61866 - sinkuu:redundant_clone, r=petrochenkov\n\nRemove redundant `clone()`s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "html_url": "https://github.com/rust-lang/rust/commit/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af561116516bd1d5ed4a830e08dc5e74293f78fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/af561116516bd1d5ed4a830e08dc5e74293f78fb", "html_url": "https://github.com/rust-lang/rust/commit/af561116516bd1d5ed4a830e08dc5e74293f78fb"}, {"sha": "6a0abd60486d7301dea849e7107bc92380e6045e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0abd60486d7301dea849e7107bc92380e6045e", "html_url": "https://github.com/rust-lang/rust/commit/6a0abd60486d7301dea849e7107bc92380e6045e"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "1c52b5775a0ccca83222e55ec30759458e7f2f08", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             let required_region_bounds = tcx.required_region_bounds(\n                 opaque_type,\n-                bounds.predicates.clone(),\n+                bounds.predicates,\n             );\n             debug_assert!(!required_region_bounds.is_empty());\n "}, {"sha": "29c624575c3c2328af0f0f0997bbcbe156bc1190", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -1617,7 +1617,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     self.ir.tcx.lint_hir_note(\n                         lint::builtin::UNUSED_VARIABLES,\n                         hir_id,\n-                        spans.clone(),\n+                        spans,\n                         &format!(\"variable `{}` is assigned to, but never used\", name),\n                         &format!(\"consider using `_{}` instead\", name),\n                     );"}, {"sha": "54989db46c1c5d10eb1e03692d97b572b17310fc", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -36,7 +36,7 @@ fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<\n \n     return match helper(loan_path) {\n         Some(new_loan_path) => new_loan_path,\n-        None => loan_path.clone()\n+        None => loan_path,\n     };\n \n     fn helper<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> Option<&'a LoanPath<'tcx>> {"}, {"sha": "5d3cc0c0a255f63e39763ea4aaaf4581d0ce9ea2", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -279,7 +279,7 @@ fn fat_lto(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             }\n         }));\n         serialized_modules.extend(cached_modules.into_iter().map(|(buffer, wp)| {\n-            (buffer, CString::new(wp.cgu_name.clone()).unwrap())\n+            (buffer, CString::new(wp.cgu_name).unwrap())\n         }));\n \n         // For all serialized bitcode files we parse them and link them in as we did"}, {"sha": "588f7481cc06092adba92f262ec062835d9caa4f", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -459,7 +459,7 @@ impl CodegenCx<'b, 'tcx> {\n         };\n         let f = self.declare_cfn(name, fn_ty);\n         llvm::SetUnnamedAddr(f, false);\n-        self.intrinsics.borrow_mut().insert(name, f.clone());\n+        self.intrinsics.borrow_mut().insert(name, f);\n         f\n     }\n "}, {"sha": "fbeda43af42b0aef48fa2cff6a4fed28e2651e13", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -1609,7 +1609,7 @@ impl<'tcx> VariantInfo<'tcx> {\n                 // with every variant, make each variant name be just the value\n                 // of the discriminant. The struct name for the variant includes\n                 // the actual variant description.\n-                format!(\"{}\", variant_index.as_usize()).to_string()\n+                format!(\"{}\", variant_index.as_usize())\n             }\n         }\n     }"}, {"sha": "7ed2fddf72d23a3b49c9c59a9ebe62acf9e7c14e", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -194,7 +194,7 @@ impl AnnotateSnippetEmitterWriter {\n         let converter = DiagnosticConverter {\n             source_map: self.source_map.clone(),\n             level: level.clone(),\n-            message: message.clone(),\n+            message,\n             code: code.clone(),\n             msp: msp.clone(),\n             children,"}, {"sha": "5fef8e53e1d0c4dd18f927483b49b2c0e8779ceb", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -236,7 +236,7 @@ impl<'a> CrateLoader<'a> {\n                 let host_lib = host_lib.unwrap();\n                 self.load_derive_macros(\n                     &host_lib.metadata.get_root(),\n-                    host_lib.dylib.clone().map(|p| p.0),\n+                    host_lib.dylib.map(|p| p.0),\n                     span\n                 )\n             } else {"}, {"sha": "f9e503ee69b1278061ca6c6ffd642d7587f50651", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -1737,7 +1737,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 pat_span,\n             }))),\n         };\n-        let for_arm_body = self.local_decls.push(local.clone());\n+        let for_arm_body = self.local_decls.push(local);\n         let locals = if has_guard.0 {\n             let ref_for_guard = self.local_decls.push(LocalDecl::<'tcx> {\n                 // This variable isn't mutated but has a name, so has to be"}, {"sha": "bf64643e5a74583675173fb0baa463d902e191fb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -922,7 +922,7 @@ fn receiver_is_valid<'fcx, 'tcx>(\n         };\n \n         let obligation = traits::Obligation::new(\n-            cause.clone(),\n+            cause,\n             fcx.param_env,\n             trait_ref.to_predicate()\n         );"}, {"sha": "20a4f86aedb902e10de0fd8f69af97c68068f609", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -317,7 +317,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,\n-        debugging_opts: debugging_options.clone(),\n+        debugging_opts: debugging_options,\n         error_format,\n         edition,\n         describe_lints,"}, {"sha": "baf99bacb8ee6cc234260002d649837d23dbfe25", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -740,7 +740,7 @@ impl Tester for Collector {\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n-                name: testing::DynTestName(name.clone()),\n+                name: testing::DynTestName(name),\n                 ignore: config.ignore,\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,"}, {"sha": "22745a1a76d536eb55745cd729bddb8fbf6fbeca", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -23,6 +23,7 @@ use log::debug;\n use rustc_data_structures::fx::{FxHashMap};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n+use std::slice;\n \n use rustc_data_structures::sync::Lrc;\n use errors::Applicability;\n@@ -359,10 +360,10 @@ pub fn compile(\n \n     // don't abort iteration early, so that errors for multiple lhses can be reported\n     for lhs in &lhses {\n-        valid &= check_lhs_no_empty_seq(sess, &[lhs.clone()]);\n+        valid &= check_lhs_no_empty_seq(sess, slice::from_ref(lhs));\n         valid &= check_lhs_duplicate_matcher_bindings(\n             sess,\n-            &[lhs.clone()],\n+            slice::from_ref(lhs),\n             &mut FxHashMap::default(),\n             def.id\n         );"}, {"sha": "f44a6e7efa4f18e47b795eb94dcc6aecd55e8513", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -887,7 +887,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt<'_>,\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();  // for the suggestions below\n-    let mut parser = parse::Parser::new(fmt_str, str_style, skips.clone(), append_newline);\n+    let mut parser = parse::Parser::new(fmt_str, str_style, skips, append_newline);\n \n     let mut unverified_pieces = Vec::new();\n     while let Some(piece) = parser.next() {"}, {"sha": "b5d5a38ce5b3872872d06fba9ab68c57e2883024", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1d94f7a2579aeb68aa66ba304f23caaea85f1/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=2ba1d94f7a2579aeb68aa66ba304f23caaea85f1", "patch": "@@ -409,7 +409,7 @@ impl server::TokenStream for Rustc<'_> {\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n         parse::parse_stream_from_source_str(\n-            FileName::proc_macro_source_code(src.clone()),\n+            FileName::proc_macro_source_code(src),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),"}]}