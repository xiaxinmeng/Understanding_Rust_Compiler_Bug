{"sha": "7e98ec507932a250b421257f2200c457949b4c99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOThlYzUwNzkzMmEyNTBiNDIxMjU3ZjIyMDBjNDU3OTQ5YjRjOTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-09T15:42:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-09T15:42:24Z"}, "message": "Rollup merge of #64121 - timvermeulen:iter_step_by_internal, r=scottmcm\n\nOverride `StepBy::{try_fold, try_rfold}`\n\nPrevious PR: https://github.com/rust-lang/rust/pull/51435\n\nThe previous PR was closed in favor of https://github.com/rust-lang/rust/pull/51601, which was later reverted. I don't think these implementations will make it harder to specialize `StepBy<Range<_>>` later, so we should be able to land this without any consequences.\n\nThis should fix https://github.com/rust-lang/rust/issues/57517 \u2013 in my benchmarks `iter` and `iter.step_by(1)` now perform equally well, provided internal iteration is used.", "tree": {"sha": "de759fc4d6d2168b72dd2c35f432048e41c50db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de759fc4d6d2168b72dd2c35f432048e41c50db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e98ec507932a250b421257f2200c457949b4c99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddnLhCRBK7hj4Ov3rIwAAdHIIAER1kjrgc18D8V3r648YOHBe\nprinoj8TGZvZiJbackuc5wOju5vm/wk7CMITTKiEazDkgMquyeO489WJXLdXVo9t\n0qvXJZlKu0glRx7K8ByShEc1XTx724mG+hoK4RwBY35FTBGsJMLjqJf5hoqo9ZPD\nw6zbEynXwu1vkQ7TMgSK7+0idK1AHXslDRm8nEYyDENVFQM+uXKBSb6hMczt1rvR\nFjEQ9HMKAh2YsqToHrkgzGfspJtbA3JUb07k8EQk6xGrx1c8bP88eoxsQVf3/JzE\n7O5Ec6l3nYvZSTIpJYcQhEU+4cIWyQ8V0x2Tznmw3ByK4QoCg/3gm0iYjXxItmY=\n=As8N\n-----END PGP SIGNATURE-----\n", "payload": "tree de759fc4d6d2168b72dd2c35f432048e41c50db3\nparent 457a23fabe4caecb5b18c0d6a801f1393a4dac80\nparent 78908f2e0963ceed461e9961020226d3e12c5978\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568043744 +0200\ncommitter GitHub <noreply@github.com> 1568043744 +0200\n\nRollup merge of #64121 - timvermeulen:iter_step_by_internal, r=scottmcm\n\nOverride `StepBy::{try_fold, try_rfold}`\n\nPrevious PR: https://github.com/rust-lang/rust/pull/51435\n\nThe previous PR was closed in favor of https://github.com/rust-lang/rust/pull/51601, which was later reverted. I don't think these implementations will make it harder to specialize `StepBy<Range<_>>` later, so we should be able to land this without any consequences.\n\nThis should fix https://github.com/rust-lang/rust/issues/57517 \u2013 in my benchmarks `iter` and `iter.step_by(1)` now perform equally well, provided internal iteration is used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e98ec507932a250b421257f2200c457949b4c99", "html_url": "https://github.com/rust-lang/rust/commit/7e98ec507932a250b421257f2200c457949b4c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e98ec507932a250b421257f2200c457949b4c99/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457a23fabe4caecb5b18c0d6a801f1393a4dac80", "url": "https://api.github.com/repos/rust-lang/rust/commits/457a23fabe4caecb5b18c0d6a801f1393a4dac80", "html_url": "https://github.com/rust-lang/rust/commit/457a23fabe4caecb5b18c0d6a801f1393a4dac80"}, {"sha": "78908f2e0963ceed461e9961020226d3e12c5978", "url": "https://api.github.com/repos/rust-lang/rust/commits/78908f2e0963ceed461e9961020226d3e12c5978", "html_url": "https://github.com/rust-lang/rust/commit/78908f2e0963ceed461e9961020226d3e12c5978"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "3b8edc2ad61770aa786c86a4ce6b3b00e77abd06", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e98ec507932a250b421257f2200c457949b4c99/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e98ec507932a250b421257f2200c457949b4c99/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=7e98ec507932a250b421257f2200c457949b4c99", "patch": "@@ -5,7 +5,7 @@ use crate::usize;\n use crate::intrinsics;\n \n use super::{Iterator, DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen};\n-use super::LoopState;\n+use super::{LoopState, from_fn};\n \n mod chain;\n mod flatten;\n@@ -534,6 +534,26 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n             self.iter.nth(nth - 1);\n         }\n     }\n+\n+    fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n+    where\n+        F: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        #[inline]\n+        fn nth<I: Iterator>(iter: &mut I, step: usize) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth(step)\n+        }\n+\n+        if self.first_take {\n+            self.first_take = false;\n+            match self.iter.next() {\n+                None => return Try::from_ok(acc),\n+                Some(x) => acc = f(acc, x)?,\n+            }\n+        }\n+        from_fn(nth(&mut self.iter, self.step)).try_fold(acc, f)\n+    }\n }\n \n impl<I> StepBy<I> where I: ExactSizeIterator {\n@@ -567,6 +587,28 @@ impl<I> DoubleEndedIterator for StepBy<I> where I: DoubleEndedIterator + ExactSi\n             .saturating_add(self.next_back_index());\n         self.iter.nth_back(n)\n     }\n+\n+    fn try_rfold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R\n+    where\n+        F: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        #[inline]\n+        fn nth_back<I: DoubleEndedIterator>(\n+            iter: &mut I,\n+            step: usize,\n+        ) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth_back(step)\n+        }\n+\n+        match self.next_back() {\n+            None => Try::from_ok(init),\n+            Some(x) => {\n+                let acc = f(init, x)?;\n+                from_fn(nth_back(&mut self.iter, self.step)).try_fold(acc, f)\n+            }\n+        }\n+    }\n }\n \n // StepBy can only make the iterator shorter, so the len will still fit."}, {"sha": "c9096b713f20ec42b532913a6eba398888140b4e", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7e98ec507932a250b421257f2200c457949b4c99/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e98ec507932a250b421257f2200c457949b4c99/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=7e98ec507932a250b421257f2200c457949b4c99", "patch": "@@ -385,6 +385,23 @@ fn test_iterator_step_by_nth_overflow() {\n     assert_eq!(it.0, (usize::MAX as Bigger) * 1);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth_try_fold() {\n+    let mut it = (0..).step_by(10);\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it.next(), Some(60));\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it.next(), Some(90));\n+\n+    let mut it = (100..).step_by(10);\n+    assert_eq!(it.try_fold(50, i8::checked_add), None);\n+    assert_eq!(it.next(), Some(110));\n+\n+    let mut it = (100..=100).step_by(10);\n+    assert_eq!(it.next(), Some(100));\n+    assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n+}\n+\n #[test]\n fn test_iterator_step_by_nth_back() {\n     let mut it = (0..16).step_by(5);\n@@ -410,6 +427,24 @@ fn test_iterator_step_by_nth_back() {\n     assert_eq!(it().nth_back(42), None);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth_try_rfold() {\n+    let mut it = (0..100).step_by(10);\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it.next_back(), Some(70));\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it.next_back(), Some(30));\n+\n+    let mut it = (0..100).step_by(10);\n+    assert_eq!(it.try_rfold(50, i8::checked_add), None);\n+    assert_eq!(it.next_back(), Some(80));\n+\n+    let mut it = (100..=100).step_by(10);\n+    assert_eq!(it.next_back(), Some(100));\n+    assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n+}\n+\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {"}]}