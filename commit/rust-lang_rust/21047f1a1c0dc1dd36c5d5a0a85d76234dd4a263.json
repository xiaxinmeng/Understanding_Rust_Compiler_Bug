{"sha": "21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "node_id": "C_kwDOAAsO6NoAKDIxMDQ3ZjFhMWMwZGMxZGQzNmM1ZDVhMGE4NWQ3NjIzNGRkNGEyNjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-11T07:42:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T02:45:01Z"}, "message": "Support default-body trait functions with RPITIT", "tree": {"sha": "cd7a6f6380bf8db2d0edffa51ddd5b56637f763e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7a6f6380bf8db2d0edffa51ddd5b56637f763e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "html_url": "https://github.com/rust-lang/rust/commit/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4846f9d03659704af1f6b56bb4278bf843a4627", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4846f9d03659704af1f6b56bb4278bf843a4627", "html_url": "https://github.com/rust-lang/rust/commit/d4846f9d03659704af1f6b56bb4278bf843a4627"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "08a58f4fed801b4b37515656d0f30acedebcfb82", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "patch": "@@ -340,10 +340,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     ..\n                 }) => {\n                     if in_trait {\n-                        span_bug!(item.span, \"impl-trait in trait has no default\")\n-                    } else {\n-                        find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n+                        assert!(tcx.impl_defaultness(owner).has_value());\n                     }\n+                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)"}, {"sha": "99953be48853d20198842eaff9d2950cd1459b29", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "patch": "@@ -71,7 +71,15 @@ enum ProjectionCandidate<'tcx> {\n     /// From an \"impl\" (or a \"pseudo-impl\" returned by select)\n     Select(Selection<'tcx>),\n \n-    ImplTraitInTrait(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n+    ImplTraitInTrait(ImplTraitInTraitCandidate<'tcx>),\n+}\n+\n+#[derive(PartialEq, Eq, Debug)]\n+enum ImplTraitInTraitCandidate<'tcx> {\n+    // The `impl Trait` from a trait function's default body\n+    Trait,\n+    // A concrete type provided from a trait's `impl Trait` from an impl\n+    Impl(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n }\n \n enum ProjectionCandidateSet<'tcx> {\n@@ -1317,6 +1325,17 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n+        // If we are trying to project an RPITIT with the _identity_ substs,\n+        // then we must be within a default trait body.\n+        if obligation.predicate.substs\n+            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.item_def_id)\n+        {\n+            candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n+                ImplTraitInTraitCandidate::Trait,\n+            ));\n+            return;\n+        }\n+\n         let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -1329,7 +1348,9 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ =\n             selcx.infcx().commit_if_ok(|_| match selcx.select(&obligation.with(trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n+                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n+                        ImplTraitInTraitCandidate::Impl(data),\n+                    ));\n                     Ok(())\n                 }\n                 Ok(None) => {\n@@ -1792,9 +1813,18 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, impl_source)\n         }\n-        ProjectionCandidate::ImplTraitInTrait(data) => {\n+        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Impl(data)) => {\n             confirm_impl_trait_in_trait_candidate(selcx, obligation, data)\n         }\n+        // If we're projecting an RPITIT for a default trait body, that's just\n+        // the same def-id, but as an opaque type (with regular RPIT semantics).\n+        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Trait) => Progress {\n+            term: selcx\n+                .tcx()\n+                .mk_opaque(obligation.predicate.item_def_id, obligation.predicate.substs)\n+                .into(),\n+            obligations: vec![],\n+        },\n     };\n \n     // When checking for cycle during evaluation, we compare predicates with\n@@ -2212,6 +2242,16 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         return Progress { term: tcx.ty_error().into(), obligations };\n     }\n \n+    // Use the default `impl Trait` for the trait, e.g., for a default trait body\n+    if leaf_def.item.container == ty::AssocItemContainer::TraitContainer {\n+        return Progress {\n+            term: tcx\n+                .mk_opaque(obligation.predicate.item_def_id, obligation.predicate.substs)\n+                .into(),\n+            obligations,\n+        };\n+    }\n+\n     let impl_fn_def_id = leaf_def.item.def_id;\n     let impl_fn_substs = obligation.predicate.substs.rebase_onto(tcx, trait_fn_def_id, data.substs);\n "}, {"sha": "effc4b1d951ad2727c44902fd2101a0c5216743c", "filename": "src/test/ui/impl-trait/in-trait/default-body.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=21047f1a1c0dc1dd36c5d5a0a85d76234dd4a263", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    async fn baz() -> impl Debug {\n+        Self::baz().await\n+    }\n+}\n+\n+fn main() {}"}]}