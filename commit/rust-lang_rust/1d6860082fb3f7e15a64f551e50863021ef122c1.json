{"sha": "1d6860082fb3f7e15a64f551e50863021ef122c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjg2MDA4MmZiM2Y3ZTE1YTY0ZjU1MWU1MDg2MzAyMWVmMTIyYzE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-22T00:02:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T00:02:30Z"}, "message": "Revert \"Compare tagged/niche-filling layout and pick the best one\"", "tree": {"sha": "02d550f0896b357ec2a4c0b9e4a926a4bdf8dda5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d550f0896b357ec2a4c0b9e4a926a4bdf8dda5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d6860082fb3f7e15a64f551e50863021ef122c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfF4IWCRBK7hj4Ov3rIwAAdHIIAAeFTCie2E8+UG2p8amTeCIx\nq7jTZF4PBVDr46w3D6wnuryzvgbPinauuHgWY2LMP8EK2hJNid2CsRcQ5t+HwXsx\nhPnNnOYSQv93c5hQ1C8OZhXMyCx6AP4z9VzFKQe8TJx+AjipO9rQejPzsA197uq0\n2SRJfTBizbZxTe+g0kayT1h5Ol/KXgQW6SlhrlygAWKGrolk2y46c9+u0xwqLOrF\nuadnYdTSTTQ/tsokHeHWswCQ678Bm1RuXMb0TD3Qupxgu3nL76i46wbxoRgVobkl\nxsaZQSWxEUH/L4OBJsMa+M6l6AoAO7MjcoZxUCB/afEGtdOD4AOgBFzS7MOALDM=\n=0Vbs\n-----END PGP SIGNATURE-----\n", "payload": "tree 02d550f0896b357ec2a4c0b9e4a926a4bdf8dda5\nparent 8ad7bc3f428300aee6764f6e23527e19eb235e81\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1595376150 -0400\ncommitter GitHub <noreply@github.com> 1595376150 -0400\n\nRevert \"Compare tagged/niche-filling layout and pick the best one\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6860082fb3f7e15a64f551e50863021ef122c1", "html_url": "https://github.com/rust-lang/rust/commit/1d6860082fb3f7e15a64f551e50863021ef122c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d6860082fb3f7e15a64f551e50863021ef122c1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad7bc3f428300aee6764f6e23527e19eb235e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7bc3f428300aee6764f6e23527e19eb235e81", "html_url": "https://github.com/rust-lang/rust/commit/8ad7bc3f428300aee6764f6e23527e19eb235e81"}], "stats": {"total": 58, "additions": 7, "deletions": 51}, "files": [{"sha": "b7dccb8d8ce6d3ef3aab403891855949f17bae76", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=1d6860082fb3f7e15a64f551e50863021ef122c1", "patch": "@@ -27,7 +27,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(cmp_min_max_by)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(const_fn_transmute)]"}, {"sha": "3ffe2a6ccbd00ccb9fddf08e3228590a54512a29", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=1d6860082fb3f7e15a64f551e50863021ef122c1", "patch": "@@ -876,8 +876,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     .iter_enumerated()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));\n \n-                let mut niche_filling_layout = None;\n-\n                 // Niche-filling enum optimization.\n                 if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {\n                     let mut dataful_variant = None;\n@@ -974,7 +972,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let largest_niche =\n                                 Niche::from_scalar(dl, offset, niche_scalar.clone());\n \n-                            niche_filling_layout = Some(Layout {\n+                            return Ok(tcx.intern_layout(Layout {\n                                 variants: Variants::Multiple {\n                                     tag: niche_scalar,\n                                     tag_encoding: TagEncoding::Niche {\n@@ -993,7 +991,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 largest_niche,\n                                 size,\n                                 align,\n-                            });\n+                            }));\n                         }\n                     }\n                 }\n@@ -1216,7 +1214,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag.clone());\n \n-                let tagged_layout = Layout {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Multiple {\n                         tag,\n                         tag_encoding: TagEncoding::Direct,\n@@ -1231,23 +1229,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     abi,\n                     align,\n                     size,\n-                };\n-\n-                let best_layout = match (tagged_layout, niche_filling_layout) {\n-                    (tagged_layout, Some(niche_filling_layout)) => {\n-                        // Pick the smaller layout; otherwise,\n-                        // pick the layout with the larger niche; otherwise,\n-                        // pick tagged as it has simpler codegen.\n-                        cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {\n-                            let niche_size =\n-                                layout.largest_niche.as_ref().map_or(0, |n| n.available(dl));\n-                            (layout.size, cmp::Reverse(niche_size))\n-                        })\n-                    }\n-                    (tagged_layout, None) => tagged_layout,\n-                };\n-\n-                tcx.intern_layout(best_layout)\n+                })\n             }\n \n             // Types with no meaningful known layout."}, {"sha": "301edc0d086b11fee1b251fd47b5ab7ebba36190", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=1d6860082fb3f7e15a64f551e50863021ef122c1", "patch": "@@ -8,12 +8,12 @@ print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n-print-type-size     discriminant: 1 bytes\n print-type-size     variant `Record`: 7 bytes\n-print-type-size         field `.pre`: 1 bytes\n-print-type-size         field `.post`: 2 bytes\n print-type-size         field `.val`: 4 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.pre`: 1 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 4 bytes\n print-type-size     variant `Some`: 4 bytes"}, {"sha": "6a3f3c98f127a96d1b5e0a3c93e7d1e1f95b0018", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6860082fb3f7e15a64f551e50863021ef122c1/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=1d6860082fb3f7e15a64f551e50863021ef122c1", "patch": "@@ -5,7 +5,6 @@\n #![feature(never_type)]\n \n use std::mem::size_of;\n-use std::num::NonZeroU8;\n \n struct t {a: u8, b: i8}\n struct u {a: u8, b: i8, c: u8}\n@@ -103,23 +102,6 @@ enum Option2<A, B> {\n     None\n }\n \n-// Two layouts are considered for `CanBeNicheFilledButShouldnt`:\n-//   Niche-filling:\n-//     { u32 (4 bytes), NonZeroU8 + tag in niche (1 byte), padding (3 bytes) }\n-//   Tagged:\n-//     { tag (1 byte), NonZeroU8 (1 byte), padding (2 bytes), u32 (4 bytes) }\n-// Both are the same size (due to padding),\n-// but the tagged layout is better as the tag creates a niche with 254 invalid values,\n-// allowing types like `Option<Option<CanBeNicheFilledButShouldnt>>` to fit into 8 bytes.\n-pub enum CanBeNicheFilledButShouldnt {\n-    A(NonZeroU8, u32),\n-    B\n-}\n-pub enum AlwaysTaggedBecauseItHasNoNiche {\n-    A(u8, u32),\n-    B\n-}\n-\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -163,11 +145,4 @@ pub fn main() {\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n-\n-    assert_eq!(size_of::<CanBeNicheFilledButShouldnt>(), 8);\n-    assert_eq!(size_of::<Option<CanBeNicheFilledButShouldnt>>(), 8);\n-    assert_eq!(size_of::<Option<Option<CanBeNicheFilledButShouldnt>>>(), 8);\n-    assert_eq!(size_of::<AlwaysTaggedBecauseItHasNoNiche>(), 8);\n-    assert_eq!(size_of::<Option<AlwaysTaggedBecauseItHasNoNiche>>(), 8);\n-    assert_eq!(size_of::<Option<Option<AlwaysTaggedBecauseItHasNoNiche>>>(), 8);\n }"}]}