{"sha": "f7f2d83eda99c6020c825a048739b476b0214104", "node_id": "C_kwDOAAsO6NoAKGY3ZjJkODNlZGE5OWM2MDIwYzgyNWEwNDg3MzliNDc2YjAyMTQxMDQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-03T21:21:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-03T21:21:43Z"}, "message": "Rollup merge of #95617 - saethlin:swap-test-invalidation, r=Dylan-DPC\n\nFix &mut invalidation in ptr::swap doctest\n\nUnder Stacked Borrows with raw pointer tagging, the previous code was UB\nbecause the code which creates the the second pointer borrows the array\nthrough a tag in the borrow stacks below the Unique tag that our first\npointer is based on, thus invalidating the first pointer.\n\nThis is not definitely a bug and may never be real UB, but I desperately\nwant people to write code that conforms to SB with raw pointer tagging\nso that I can write good diagnostics. The alternative aliasing models\naren't possible to diagnose well due to state space explosion.\nTherefore, it would be super cool if the standard library nudged people\ntowards writing code that is valid with respect to SB with raw pointer\ntagging.\n\nThe diagnostics that I want to write are implemented in a branch of Miri and the one for this case is below:\n```\nerror: Undefined Behavior: attempting a read access using <2170> at alloc1068[0x0], but that tag does not exist in the borrow stack for this location\n    --> /home/ben/rust/library/core/src/intrinsics.rs:2103:14\n     |\n2103 |     unsafe { copy_nonoverlapping(src, dst, count) }\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |              |\n     |              attempting a read access using <2170> at alloc1068[0x0], but that tag does not exist in the borrow stack for this location\n     |              this error occurs as part of an access at alloc1068[0x0..0x8]\n     |\n     = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n     = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\nhelp: <2170> was created due to a retag at offsets [0x0..0x10]\n    --> ../libcore/src/ptr/mod.rs:640:9\n     |\n8    | let x = array[0..].as_mut_ptr() as *mut [u32; 2]; // this is `array[0..2]`\n     |         ^^^^^^^^^^^^^^^^^^^^^^^\nhelp: <2170> was later invalidated due to a retag at offsets [0x0..0x10]\n    --> ../libcore/src/ptr/mod.rs:641:9\n     |\n9    | let y = array[2..].as_mut_ptr() as *mut [u32; 2]; // this is `array[2..4]`\n     |         ^^^^^\n     = note: inside `std::intrinsics::copy_nonoverlapping::<[u32; 2]>` at /home/ben/rust/library/core/src/intrinsics.rs:2103:14\n     = note: inside `std::ptr::swap::<[u32; 2]>` at /home/ben/rust/library/core/src/ptr/mod.rs:685:9\nnote: inside `main::_doctest_main____libcore_src_ptr_mod_rs_635_0` at ../libcore/src/ptr/mod.rs:12:5\n    --> ../libcore/src/ptr/mod.rs:644:5\n     |\n12   |     ptr::swap(x, y);\n     |     ^^^^^^^^^^^^^^^\nnote: inside `main` at ../libcore/src/ptr/mod.rs:15:3\n    --> ../libcore/src/ptr/mod.rs:647:3\n     |\n15   | } _doctest_main____libcore_src_ptr_mod_rs_635_0() }\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to previous error\n```", "tree": {"sha": "b2ee49d81b4637617e529d515b5d0763ff5ccf6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ee49d81b4637617e529d515b5d0763ff5ccf6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f2d83eda99c6020c825a048739b476b0214104", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSg/oCRBK7hj4Ov3rIwAAGMAIADufMG9fjfExd59uU/rkFlr1\nFWzvVoJMZBkppdebWQEafH9IgIiiYJbum1qCHvuMcge3pEZsXtNWOGIj10asX4nD\n+HahdB0OUyKQ927WL6t3PCYhfOSoo1dbw18pSzIQG8ZfW1tVOSMto4TvU0/9QUXW\nR/MdCSmx5srovSkWD37ghnv9jJ0q3jmJ/IgE2s4pZUQiONOlJXQPtqPK20/i+Wcs\nZuayqTEgSoQpz27rjJt2yVbpee5npIrsILip7NM9fFrep7sDqhFlaMqDo8cZrYg3\niC+rTRyLZcO9tkUMlLoft5fo9hMIaRt1LxhVtvJTthTh4yJypI4gWYQjYWC/PmI=\n=1yVx\n-----END PGP SIGNATURE-----\n", "payload": "tree b2ee49d81b4637617e529d515b5d0763ff5ccf6f\nparent 5925c8ee7987fdd0c07c1d1bd179c6b2f466e9fb\nparent f4a7ed433834e8ea2775097a9bf433880d6e34a3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649020903 +0200\ncommitter GitHub <noreply@github.com> 1649020903 +0200\n\nRollup merge of #95617 - saethlin:swap-test-invalidation, r=Dylan-DPC\n\nFix &mut invalidation in ptr::swap doctest\n\nUnder Stacked Borrows with raw pointer tagging, the previous code was UB\nbecause the code which creates the the second pointer borrows the array\nthrough a tag in the borrow stacks below the Unique tag that our first\npointer is based on, thus invalidating the first pointer.\n\nThis is not definitely a bug and may never be real UB, but I desperately\nwant people to write code that conforms to SB with raw pointer tagging\nso that I can write good diagnostics. The alternative aliasing models\naren't possible to diagnose well due to state space explosion.\nTherefore, it would be super cool if the standard library nudged people\ntowards writing code that is valid with respect to SB with raw pointer\ntagging.\n\nThe diagnostics that I want to write are implemented in a branch of Miri and the one for this case is below:\n```\nerror: Undefined Behavior: attempting a read access using <2170> at alloc1068[0x0], but that tag does not exist in the borrow stack for this location\n    --> /home/ben/rust/library/core/src/intrinsics.rs:2103:14\n     |\n2103 |     unsafe { copy_nonoverlapping(src, dst, count) }\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |              |\n     |              attempting a read access using <2170> at alloc1068[0x0], but that tag does not exist in the borrow stack for this location\n     |              this error occurs as part of an access at alloc1068[0x0..0x8]\n     |\n     = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n     = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\nhelp: <2170> was created due to a retag at offsets [0x0..0x10]\n    --> ../libcore/src/ptr/mod.rs:640:9\n     |\n8    | let x = array[0..].as_mut_ptr() as *mut [u32; 2]; // this is `array[0..2]`\n     |         ^^^^^^^^^^^^^^^^^^^^^^^\nhelp: <2170> was later invalidated due to a retag at offsets [0x0..0x10]\n    --> ../libcore/src/ptr/mod.rs:641:9\n     |\n9    | let y = array[2..].as_mut_ptr() as *mut [u32; 2]; // this is `array[2..4]`\n     |         ^^^^^\n     = note: inside `std::intrinsics::copy_nonoverlapping::<[u32; 2]>` at /home/ben/rust/library/core/src/intrinsics.rs:2103:14\n     = note: inside `std::ptr::swap::<[u32; 2]>` at /home/ben/rust/library/core/src/ptr/mod.rs:685:9\nnote: inside `main::_doctest_main____libcore_src_ptr_mod_rs_635_0` at ../libcore/src/ptr/mod.rs:12:5\n    --> ../libcore/src/ptr/mod.rs:644:5\n     |\n12   |     ptr::swap(x, y);\n     |     ^^^^^^^^^^^^^^^\nnote: inside `main` at ../libcore/src/ptr/mod.rs:15:3\n    --> ../libcore/src/ptr/mod.rs:647:3\n     |\n15   | } _doctest_main____libcore_src_ptr_mod_rs_635_0() }\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to previous error\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f2d83eda99c6020c825a048739b476b0214104", "html_url": "https://github.com/rust-lang/rust/commit/f7f2d83eda99c6020c825a048739b476b0214104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f2d83eda99c6020c825a048739b476b0214104/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5925c8ee7987fdd0c07c1d1bd179c6b2f466e9fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5925c8ee7987fdd0c07c1d1bd179c6b2f466e9fb", "html_url": "https://github.com/rust-lang/rust/commit/5925c8ee7987fdd0c07c1d1bd179c6b2f466e9fb"}, {"sha": "f4a7ed433834e8ea2775097a9bf433880d6e34a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a7ed433834e8ea2775097a9bf433880d6e34a3", "html_url": "https://github.com/rust-lang/rust/commit/f4a7ed433834e8ea2775097a9bf433880d6e34a3"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "b93c2ea961565dcfbd72597890633c680890ae4a", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7f2d83eda99c6020c825a048739b476b0214104/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f2d83eda99c6020c825a048739b476b0214104/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=f7f2d83eda99c6020c825a048739b476b0214104", "patch": "@@ -640,8 +640,9 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n ///\n /// let mut array = [0, 1, 2, 3];\n ///\n-/// let x = array[0..].as_mut_ptr() as *mut [u32; 2]; // this is `array[0..2]`\n-/// let y = array[2..].as_mut_ptr() as *mut [u32; 2]; // this is `array[2..4]`\n+/// let (x, y) = array.split_at_mut(2);\n+/// let x = x.as_mut_ptr().cast::<[u32; 2]>(); // this is `array[0..2]`\n+/// let y = y.as_mut_ptr().cast::<[u32; 2]>(); // this is `array[2..4]`\n ///\n /// unsafe {\n ///     ptr::swap(x, y);"}]}