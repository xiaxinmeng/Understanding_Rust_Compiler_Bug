{"sha": "3583d613b9c81855feb067aeeebb525cf8a4184c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODNkNjEzYjljODE4NTVmZWIwNjdhZWVlYmI1MjVjZjhhNDE4NGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-22T20:56:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-22T23:17:26Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "931437f34b35af7d9f74b9fa5e335ddcfed35184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931437f34b35af7d9f74b9fa5e335ddcfed35184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3583d613b9c81855feb067aeeebb525cf8a4184c", "comment_count": 11, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3583d613b9c81855feb067aeeebb525cf8a4184c", "html_url": "https://github.com/rust-lang/rust/commit/3583d613b9c81855feb067aeeebb525cf8a4184c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3583d613b9c81855feb067aeeebb525cf8a4184c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8824c39945cf8cbdd0e1a07824e3d2f4823b8e7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8824c39945cf8cbdd0e1a07824e3d2f4823b8e7b", "html_url": "https://github.com/rust-lang/rust/commit/8824c39945cf8cbdd0e1a07824e3d2f4823b8e7b"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "430d7210bf69b105be1a6ef4032974562548213b", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -88,14 +88,14 @@ use core::fmt;\n use core::iter::{Cloned, Chain, Enumerate, Repeat, Skip, Take};\n use core::iter;\n use core::num::Int;\n-use core::slice::{Items, MutItems};\n+use core::slice::{Iter, IterMut};\n use core::{u8, u32, uint};\n \n use core::hash;\n use Vec;\n \n-type Blocks<'a> = Cloned<Items<'a, u32>>;\n-type MutBlocks<'a> = MutItems<'a, u32>;\n+type Blocks<'a> = Cloned<Iter<'a, u32>>;\n+type MutBlocks<'a> = IterMut<'a, u32>;\n type MatchWords<'a> = Chain<Enumerate<Blocks<'a>>, Skip<Take<Enumerate<Repeat<u32>>>>>;\n \n fn reverse_bits(byte: u8) -> u8 {"}, {"sha": "204ffae6cbd54818ac21e2b4296fc0c43af590d4", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -336,7 +336,7 @@ impl<'a> DoubleEndedIterator<(uint, char)> for CharIndices<'a> {\n #[stable]\n #[deriving(Clone)]\n pub struct Bytes<'a> {\n-    inner: Map<&'a u8, u8, slice::Items<'a, u8>, BytesFn>,\n+    inner: Map<&'a u8, u8, slice::Iter<'a, u8>, BytesFn>,\n }\n \n /// A temporary new type wrapper that ensures that the `Bytes` iterator"}, {"sha": "6629f6620d4847e28996d88795cc8a863bf6be3d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -743,13 +743,12 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                              assumed.\", \"NAME[:KIND]\"),\n         opt::multi(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n-                 \"[bin|lib|rlib|dylib|staticlib]\"),\n+                   \"[bin|lib|rlib|dylib|staticlib]\"),\n         opt::opt(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n                \"NAME\"),\n         opt::multi(\"\", \"emit\", \"Comma separated list of types of output for \\\n                               the compiler to emit\",\n                  \"[asm|llvm-bc|llvm-ir|obj|link|dep-info]\"),\n-                 \"[asm|llvm-bc|llvm-ir|obj|link]\"),\n         opt::multi(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\",\n                  \"[crate-name|output-file-names|sysroot]\"),"}, {"sha": "0ae9de8c89183b83d993deac8baa830ddec2f597", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -606,17 +606,6 @@ pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                          fn_ptr: ValueRef,\n                                          is_local: bool) -> ValueRef {\n \n-    let def_id = match def {\n-        def::DefFn(did, _) | def::DefStaticMethod(did, _) |\n-        def::DefVariant(_, did, _) | def::DefStruct(did) => did,\n-        _ => {\n-            ccx.sess().bug(format!(\"get_wrapper_for_bare_fn: \\\n-                                    expected a statically resolved fn, got \\\n-                                    {}\",\n-                                    def)[]);\n-        }\n-    };\n-\n     match ccx.closure_bare_wrapper_cache().borrow().get(&fn_ptr) {\n         Some(&llval) => return llval,\n         None => {}"}, {"sha": "8380ed349cb3d470a934ceb57fe902fd677e692d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -219,7 +219,7 @@ pub fn get_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ast::TupleVariantKind(ref args) if args.len() > 0 => {\n                 let rs = ExplicitRscope;\n                 let input_tys: Vec<_> = args.iter().map(|va| ccx.to_ty(&rs, &*va.ty)).collect();\n-                ty::mk_ctor_fn(tcx, input_tys[], enum_ty)\n+                ty::mk_ctor_fn(tcx, variant_def_id, input_tys[], enum_ty)\n             }\n \n             ast::TupleVariantKind(_) => {\n@@ -1282,6 +1282,7 @@ pub fn convert_struct<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         |field| (*tcx.tcache.borrow())[\n                             local_def(field.node.id)].ty).collect();\n                 let ctor_fn_ty = ty::mk_ctor_fn(tcx,\n+                                                local_def(ctor_id),\n                                                 inputs[],\n                                                 selfty);\n                 write_ty_to_tcx(tcx, ctor_id, ctor_fn_ty);"}, {"sha": "7d10188c437e245701f602553f7acd48ffc67e3b", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -827,8 +827,12 @@ impl Path {\n         let s = if self.has_nonsemantic_trailing_slash() {\n                     self.repr[0..self.repr.len()-1]\n                 } else { self.repr[] };\n-        let idx = s.rfind(if !prefix_is_verbatim(self.prefix) { is_sep }\n-                          else { is_sep_verbatim });\n+        let sep_test: fn(char) -> bool = if !prefix_is_verbatim(self.prefix) {\n+            is_sep\n+        } else {\n+            is_sep_verbatim\n+        };\n+        let idx = s.rfind(sep_test);\n         let prefixlen = self.prefix_len();\n         self.sepidx = idx.and_then(|x| if x < prefixlen { None } else { Some(x) });\n     }"}, {"sha": "316d97064eeca0ccb91424df417be4c8db4338e5", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -189,7 +189,7 @@ pub fn load_self() -> Option<Vec<u8>> {\n         if sz == 0 { return None; }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as uint);\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n-                         v.as_mut_ptr() as *mut c_void, &mut sz,\n+                         v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n                          ptr::null_mut(), 0u as libc::size_t);\n         if err != 0 { return None; }\n         if sz == 0 { return None; }"}, {"sha": "a3d4dd057d0024780eb74780e6f8a9ef417b910d", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3583d613b9c81855feb067aeeebb525cf8a4184c/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=3583d613b9c81855feb067aeeebb525cf8a4184c", "patch": "@@ -404,7 +404,7 @@ pub fn is_utf16(v: &[u16]) -> bool {\n /// of `u16`s.\n #[deriving(Clone)]\n pub struct Utf16Items<'a> {\n-    iter: slice::Items<'a, u16>\n+    iter: slice::Iter<'a, u16>\n }\n /// The possibilities for values decoded from a `u16` stream.\n #[deriving(PartialEq, Eq, Clone, Show)]"}]}