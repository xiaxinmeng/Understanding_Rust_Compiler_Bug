{"sha": "b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTc2NGI2MDljNTY2OWUyN2I1ZGQwYTQzZDMwMmJiNGI1NGIwYzI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-10T14:42:02Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-10T17:18:46Z"}, "message": "rustc: rename ty::vstore and its variants to UpperCamelCase.", "tree": {"sha": "eba235d6cd9c95c4fddabe8e176ec1102b849e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba235d6cd9c95c4fddabe8e176ec1102b849e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "html_url": "https://github.com/rust-lang/rust/commit/b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e263ef1df7b892ed29e53313565eb05ab75e52f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e263ef1df7b892ed29e53313565eb05ab75e52f4", "html_url": "https://github.com/rust-lang/rust/commit/e263ef1df7b892ed29e53313565eb05ab75e52f4"}], "stats": {"total": 351, "additions": 175, "deletions": 176}, "files": [{"sha": "640bd58156c06bbf4b7a3df94c48b1b96094095f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -234,7 +234,7 @@ pub fn write_type(ecx: &EncodeContext,\n \n pub fn write_vstore(ecx: &EncodeContext,\n                     ebml_w: &mut Encoder,\n-                    vstore: ty::vstore) {\n+                    vstore: ty::Vstore) {\n     let ty_str_ctxt = &tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,"}, {"sha": "61a686cea6e58cf8d04f06c48c9bfa1b149e957d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -145,19 +145,19 @@ fn parse_sigil(st: &mut PState) -> ast::Sigil {\n     }\n }\n \n-fn parse_vstore(st: &mut PState, conv: conv_did) -> ty::vstore {\n+fn parse_vstore(st: &mut PState, conv: conv_did) -> ty::Vstore {\n     assert_eq!(next(st), '/');\n \n     let c = peek(st);\n     if '0' <= c && c <= '9' {\n         let n = parse_uint(st);\n         assert_eq!(next(st), '|');\n-        return ty::vstore_fixed(n);\n+        return ty::VstoreFixed(n);\n     }\n \n     match next(st) {\n-      '~' => ty::vstore_uniq,\n-      '&' => ty::vstore_slice(parse_region(st, conv)),\n+      '~' => ty::VstoreUniq,\n+      '&' => ty::VstoreSlice(parse_region(st, conv)),\n       c => st.tcx.sess.bug(format!(\"parse_vstore(): bad input '{}'\", c))\n     }\n }"}, {"sha": "0fb55f5e160e28667209e72e34c2c68abf44a93f", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -204,12 +204,12 @@ fn enc_bound_region(w: &mut MemWriter, cx: &ctxt, br: ty::BoundRegion) {\n     }\n }\n \n-pub fn enc_vstore(w: &mut MemWriter, cx: &ctxt, v: ty::vstore) {\n+pub fn enc_vstore(w: &mut MemWriter, cx: &ctxt, v: ty::Vstore) {\n     mywrite!(w, \"/\");\n     match v {\n-        ty::vstore_fixed(u) => mywrite!(w, \"{}|\", u),\n-        ty::vstore_uniq => mywrite!(w, \"~\"),\n-        ty::vstore_slice(r) => {\n+        ty::VstoreFixed(u) => mywrite!(w, \"{}|\", u),\n+        ty::VstoreUniq => mywrite!(w, \"~\"),\n+        ty::VstoreSlice(r) => {\n             mywrite!(w, \"&\");\n             enc_region(w, cx, r);\n         }"}, {"sha": "d2fe70e08d7359b28778b52c5d4463f9b25978b0", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -823,7 +823,7 @@ impl<'a> get_ty_str_ctxt for e::EncodeContext<'a> {\n \n trait ebml_writer_helpers {\n     fn emit_ty(&mut self, ecx: &e::EncodeContext, ty: ty::t);\n-    fn emit_vstore(&mut self, ecx: &e::EncodeContext, vstore: ty::vstore);\n+    fn emit_vstore(&mut self, ecx: &e::EncodeContext, vstore: ty::Vstore);\n     fn emit_tys(&mut self, ecx: &e::EncodeContext, tys: &[ty::t]);\n     fn emit_type_param_def(&mut self,\n                            ecx: &e::EncodeContext,\n@@ -840,7 +840,7 @@ impl<'a> ebml_writer_helpers for Encoder<'a> {\n         self.emit_opaque(|this| Ok(e::write_type(ecx, this, ty)));\n     }\n \n-    fn emit_vstore(&mut self, ecx: &e::EncodeContext, vstore: ty::vstore) {\n+    fn emit_vstore(&mut self, ecx: &e::EncodeContext, vstore: ty::Vstore) {\n         self.emit_opaque(|this| Ok(e::write_vstore(ecx, this, vstore)));\n     }\n "}, {"sha": "f59b2efd1cda95158312743a723b706be9d13bee", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -279,7 +279,7 @@ fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n                 }\n                 not_useful\n               }\n-              ty::ty_vec(_, ty::vstore_fixed(n)) => {\n+              ty::ty_vec(_, ty::VstoreFixed(n)) => {\n                 is_useful_specialized(cx, m, v, vec(n), n, left_ty)\n               }\n               ty::ty_vec(..) => {\n@@ -441,7 +441,7 @@ fn missing_ctor(cx: &MatchCheckCtxt,\n         else if true_found { Some(val(const_bool(false))) }\n         else { Some(val(const_bool(true))) }\n       }\n-      ty::ty_vec(_, ty::vstore_fixed(n)) => {\n+      ty::ty_vec(_, ty::VstoreFixed(n)) => {\n         let mut missing = true;\n         let mut wrong = false;\n         for r in m.iter() {"}, {"sha": "faa82463ef2a0f7d18332176077e78d609756201", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -917,8 +917,8 @@ fn check_heap_type(cx: &Context, span: Span, ty: ty::t) {\n                 ty::ty_box(_) => {\n                     n_box += 1;\n                 }\n-                ty::ty_uniq(_) | ty::ty_str(ty::vstore_uniq) |\n-                ty::ty_vec(_, ty::vstore_uniq) |\n+                ty::ty_uniq(_) | ty::ty_str(ty::VstoreUniq) |\n+                ty::ty_vec(_, ty::VstoreUniq) |\n                 ty::ty_trait(~ty::TyTrait { store: ty::UniqTraitStore, .. }) => {\n                     n_uniq += 1;\n                 }\n@@ -1158,7 +1158,7 @@ fn check_unused_result(cx: &Context, s: &ast::Stmt) {\n fn check_deprecated_owned_vector(cx: &Context, e: &ast::Expr) {\n     let t = ty::expr_ty(cx.tcx, e);\n     match ty::get(t).sty {\n-        ty::ty_vec(_, ty::vstore_uniq) => {\n+        ty::ty_vec(_, ty::VstoreUniq) => {\n             cx.span_lint(DeprecatedOwnedVector, e.span,\n                          \"use of deprecated `~[]` vector; replaced by `std::vec::Vec`\")\n         }"}, {"sha": "97e9f6fd41dbc59aced0a7ca6d455a2566cb2a6c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -170,14 +170,14 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n     match ty::get(t).sty {\n         ty::ty_uniq(_) |\n         ty::ty_trait(~ty::TyTrait { store: ty::UniqTraitStore, .. }) |\n-        ty::ty_vec(_, ty::vstore_uniq) |\n-        ty::ty_str(ty::vstore_uniq) |\n+        ty::ty_vec(_, ty::VstoreUniq) |\n+        ty::ty_str(ty::VstoreUniq) |\n         ty::ty_closure(~ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n             Some(deref_ptr(OwnedPtr))\n         }\n \n         ty::ty_rptr(r, mt) |\n-        ty::ty_vec(mt, ty::vstore_slice(r)) => {\n+        ty::ty_vec(mt, ty::VstoreSlice(r)) => {\n             let kind = ty::BorrowKind::from_mutbl(mt.mutbl);\n             Some(deref_ptr(BorrowedPtr(kind, r)))\n         }\n@@ -187,7 +187,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_ptr(BorrowedPtr(kind, r)))\n         }\n \n-        ty::ty_str(ty::vstore_slice(r)) |\n+        ty::ty_str(ty::VstoreSlice(r)) |\n         ty::ty_closure(~ty::ClosureTy {sigil: ast::BorrowedSigil,\n                                       region: r, ..}) => {\n             Some(deref_ptr(BorrowedPtr(ty::ImmBorrow, r)))\n@@ -206,8 +206,8 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_interior(InteriorField(PositionalField(0))))\n         }\n \n-        ty::ty_vec(_, ty::vstore_fixed(_)) |\n-        ty::ty_str(ty::vstore_fixed(_)) => {\n+        ty::ty_vec(_, ty::VstoreFixed(_)) |\n+        ty::ty_str(ty::VstoreFixed(_)) => {\n             Some(deref_interior(InteriorElement(element_kind(t))))\n         }\n \n@@ -882,7 +882,7 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n              */\n \n             match ty::get(slice_ty).sty {\n-                ty::ty_vec(slice_mt, ty::vstore_slice(slice_r)) => {\n+                ty::ty_vec(slice_mt, ty::VstoreSlice(slice_r)) => {\n                     (slice_mt.mutbl, slice_r)\n                 }\n "}, {"sha": "55aa517ad668b88daa2ea049267660c58ae66d12", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -1111,7 +1111,7 @@ fn extract_vec_elems<'a>(\n         let slice_len = Sub(bcx, len, slice_len_offset);\n         let slice_ty = ty::mk_vec(bcx.tcx(),\n             ty::mt {ty: vt.unit_ty, mutbl: ast::MutImmutable},\n-            ty::vstore_slice(ty::ReStatic)\n+            ty::VstoreSlice(ty::ReStatic)\n         );\n         let scratch = rvalue_scratch_datum(bcx, slice_ty, \"\");\n         Store(bcx, slice_begin,\n@@ -1319,7 +1319,7 @@ fn compare_values<'a>(\n     }\n \n     match ty::get(rhs_t).sty {\n-        ty::ty_str(ty::vstore_uniq) => {\n+        ty::ty_str(ty::VstoreUniq) => {\n             let scratch_lhs = alloca(cx, val_ty(lhs), \"__lhs\");\n             Store(cx, lhs, scratch_lhs);\n             let scratch_rhs = alloca(cx, val_ty(rhs), \"__rhs\");"}, {"sha": "0e6b8df0ef8d6b06ebbe0a063543ccaafb004f52", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -188,7 +188,7 @@ fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv,\n         // FIXME #6750 ~Trait cannot be directly marked as\n         // noalias because the actual object pointer is nested.\n         ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n-        ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) => {\n+        ty::ty_vec(_, ty::VstoreUniq) | ty::ty_str(ty::VstoreUniq) => {\n             unsafe {\n                 llvm::LLVMAddReturnAttribute(llfn, lib::llvm::NoAliasAttribute as c_uint);\n             }\n@@ -259,7 +259,7 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n             // FIXME #6750 ~Trait cannot be directly marked as\n             // noalias because the actual object pointer is nested.\n             ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n-            ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) |\n+            ty::ty_vec(_, ty::VstoreUniq) | ty::ty_str(ty::VstoreUniq) |\n             ty::ty_closure(~ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n@@ -657,8 +657,8 @@ pub fn iter_structural_ty<'r,\n               }\n           })\n       }\n-      ty::ty_str(ty::vstore_fixed(_)) |\n-      ty::ty_vec(_, ty::vstore_fixed(_)) => {\n+      ty::ty_str(ty::VstoreFixed(_)) |\n+      ty::ty_vec(_, ty::VstoreFixed(_)) => {\n         let (base, len) = tvec::get_base_and_byte_len(cx, av, t);\n         let unit_ty = ty::sequence_element_type(cx.tcx(), t);\n         cx = tvec::iter_vec_raw(cx, base, unit_ty, len, f);"}, {"sha": "372bba6d51cc523547c9926f156375f731fedaf3", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -654,7 +654,7 @@ pub fn trans_call_inner<'a>(\n         match ty::get(ret_ty).sty {\n             // `~` pointer return values never alias because ownership\n             // is transferred\n-            ty::ty_uniq(..) | ty::ty_vec(_, ty::vstore_uniq) => {\n+            ty::ty_uniq(..) | ty::ty_vec(_, ty::VstoreUniq) => {\n                 attrs.push((0, NoAliasAttribute));\n             }\n             _ => {}"}, {"sha": "b8f6d445c36377fe76d3f35d2cb209380336a4c8", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -712,7 +712,7 @@ pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n     match ty::get(t).sty {\n         ty::ty_float(_) => MonoFloat,\n         ty::ty_rptr(..) | ty::ty_uniq(..) | ty::ty_box(..) |\n-        ty::ty_str(ty::vstore_uniq) | ty::ty_vec(_, ty::vstore_uniq) |\n+        ty::ty_str(ty::VstoreUniq) | ty::ty_vec(_, ty::VstoreUniq) |\n         ty::ty_bare_fn(..) => MonoNonNull,\n         // Is that everything?  Would closures or slices qualify?\n         _ => MonoBits"}, {"sha": "413b723589cf232b199098386fcb68a73b2fcc85", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -246,7 +246,7 @@ pub fn const_expr(cx: &CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef\n                                     assert_eq!(abi::slice_elt_base, 0);\n                                     assert_eq!(abi::slice_elt_len, 1);\n                                     match ty::get(ty).sty {\n-                                        ty::ty_vec(_, ty::vstore_fixed(len)) => {\n+                                        ty::ty_vec(_, ty::VstoreFixed(len)) => {\n                                             llconst = C_struct(cx, [\n                                                 llptr,\n                                                 C_uint(cx, len)\n@@ -436,10 +436,10 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               let (arr, len) = match ty::get(bt).sty {\n                   ty::ty_vec(_, vstore) | ty::ty_str(vstore) =>\n                       match vstore {\n-                      ty::vstore_fixed(u) =>\n+                      ty::VstoreFixed(u) =>\n                           (bv, C_uint(cx, u)),\n \n-                      ty::vstore_slice(_) => {\n+                      ty::VstoreSlice(_) => {\n                           let e1 = const_get_elt(cx, bv, [0]);\n                           (const_deref_ptr(cx, e1), const_get_elt(cx, bv, [1]))\n                       },"}, {"sha": "bfacc62cfe5cc315e1f6cc12e2232a1358668184", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -2128,14 +2128,14 @@ fn type_metadata(cx: &CrateContext,\n         ty::ty_str(ref vstore) => {\n             let i8_t = ty::mk_i8();\n             match *vstore {\n-                ty::vstore_fixed(len) => {\n+                ty::VstoreFixed(len) => {\n                     fixed_vec_metadata(cx, i8_t, len, usage_site_span)\n                 },\n-                ty::vstore_uniq  => {\n+                ty::VstoreUniq  => {\n                     let vec_metadata = vec_metadata(cx, i8_t, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n-                ty::vstore_slice(_region) => {\n+                ty::VstoreSlice(_region) => {\n                     vec_slice_metadata(cx, t, i8_t, usage_site_span)\n                 }\n             }\n@@ -2148,14 +2148,14 @@ fn type_metadata(cx: &CrateContext,\n         },\n         ty::ty_vec(ref mt, ref vstore) => {\n             match *vstore {\n-                ty::vstore_fixed(len) => {\n+                ty::VstoreFixed(len) => {\n                     fixed_vec_metadata(cx, mt.ty, len, usage_site_span)\n                 }\n-                ty::vstore_uniq => {\n+                ty::VstoreUniq => {\n                     let vec_metadata = vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n-                ty::vstore_slice(_) => {\n+                ty::VstoreSlice(_) => {\n                     vec_slice_metadata(cx, t, mt.ty, usage_site_span)\n                 }\n             }"}, {"sha": "e61c4b05dc1af55b5674e13c2d0a0336bb4a5040", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -265,7 +265,7 @@ fn apply_adjustments<'a>(bcx: &'a Block<'a>,\n         // real one, but it will have the same runtime representation\n         let slice_ty = ty::mk_vec(tcx,\n                                   ty::mt { ty: unit_ty, mutbl: ast::MutImmutable },\n-                                  ty::vstore_slice(ty::ReStatic));\n+                                  ty::VstoreSlice(ty::ReStatic));\n \n         let scratch = rvalue_scratch_datum(bcx, slice_ty, \"__adjust\");\n         Store(bcx, base, GEPi(bcx, scratch.val, [0u, abi::slice_elt_base]));"}, {"sha": "5433a4c43b99c02b8380315045fdad820aa9d4e5", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -93,7 +93,7 @@ fn get_drop_glue_type(ccx: &CrateContext, t: ty::t) -> ty::t {\n             }\n         }\n \n-        ty::ty_vec(mt, ty::vstore_uniq) if !ty::type_needs_drop(tcx, mt.ty) =>\n+        ty::ty_vec(mt, ty::VstoreUniq) if !ty::type_needs_drop(tcx, mt.ty) =>\n             ty::mk_uniq(tcx, ty::mk_i8()),\n \n         _ => t\n@@ -289,7 +289,7 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n                 trans_exchange_free(bcx, llbox)\n             })\n         }\n-        ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) => {\n+        ty::ty_vec(_, ty::VstoreUniq) | ty::ty_str(ty::VstoreUniq) => {\n             let llbox = Load(bcx, v0);\n             let not_null = IsNotNull(bcx, llbox);\n             with_cond(bcx, not_null, |bcx| {"}, {"sha": "cc2a946fde3c606486b7dba8c53d9d61b630a194", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -54,7 +54,7 @@ impl<'a> Reflector<'a> {\n         // We're careful to not use first class aggregates here because that\n         // will kick us off fast isel. (Issue #4352.)\n         let bcx = self.bcx;\n-        let str_vstore = ty::vstore_slice(ty::ReStatic);\n+        let str_vstore = ty::VstoreSlice(ty::ReStatic);\n         let str_ty = ty::mk_str(bcx.tcx(), str_vstore);\n         let scratch = rvalue_scratch_datum(bcx, str_ty, \"\");\n         let len = C_uint(bcx.ccx(), s.get().len());\n@@ -123,15 +123,15 @@ impl<'a> Reflector<'a> {\n \n     pub fn vstore_name_and_extra(&mut self,\n                                  t: ty::t,\n-                                 vstore: ty::vstore)\n+                                 vstore: ty::Vstore)\n                                  -> (~str, Vec<ValueRef> ) {\n         match vstore {\n-            ty::vstore_fixed(n) => {\n+            ty::VstoreFixed(n) => {\n                 let extra = (vec!(self.c_uint(n))).append(self.c_size_and_align(t).as_slice());\n                 (~\"fixed\", extra)\n             }\n-            ty::vstore_slice(_) => (~\"slice\", Vec::new()),\n-            ty::vstore_uniq => (~\"uniq\", Vec::new()),\n+            ty::VstoreSlice(_) => (~\"slice\", Vec::new()),\n+            ty::VstoreUniq => (~\"uniq\", Vec::new()),\n         }\n     }\n "}, {"sha": "8d8511b883e96e4a2724c076f557e523336aa91f", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -165,7 +165,7 @@ pub fn trans_slice_vstore<'a>(\n         let fixed_ty = ty::mk_vec(bcx.tcx(),\n                                   ty::mt {ty: vt.unit_ty,\n                                           mutbl: ast::MutMutable},\n-                                  ty::vstore_fixed(count));\n+                                  ty::VstoreFixed(count));\n         let llfixed_ty = type_of::type_of(bcx.ccx(), fixed_ty).ptr_to();\n         let llfixed_casted = BitCast(bcx, llfixed, llfixed_ty);\n         let cleanup_scope = cleanup::temporary_scope(bcx.tcx(), content_expr.id);\n@@ -244,7 +244,7 @@ pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,\n                     let llptrval = C_cstr(ccx, (*s).clone(), false);\n                     let llptrval = PointerCast(bcx, llptrval, Type::i8p(ccx));\n                     let llsizeval = C_uint(ccx, s.get().len());\n-                    let typ = ty::mk_str(bcx.tcx(), ty::vstore_uniq);\n+                    let typ = ty::mk_str(bcx.tcx(), ty::VstoreUniq);\n                     let lldestval = rvalue_scratch_datum(bcx,\n                                                          typ,\n                                                          \"\");\n@@ -461,23 +461,23 @@ pub fn get_base_and_byte_len(bcx: &Block,\n \n     let vstore = match ty::get(vec_ty).sty {\n         ty::ty_str(vst) | ty::ty_vec(_, vst) => vst,\n-        _ => ty::vstore_uniq\n+        _ => ty::VstoreUniq\n     };\n \n     match vstore {\n-        ty::vstore_fixed(n) => {\n+        ty::VstoreFixed(n) => {\n             let base = GEPi(bcx, llval, [0u, 0u]);\n             let len = Mul(bcx, C_uint(ccx, n), vt.llunit_size);\n             (base, len)\n         }\n-        ty::vstore_slice(_) => {\n+        ty::VstoreSlice(_) => {\n             assert!(!type_is_immediate(bcx.ccx(), vec_ty));\n             let base = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_base]));\n             let count = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_len]));\n             let len = Mul(bcx, count, vt.llunit_size);\n             (base, len)\n         }\n-        ty::vstore_uniq => {\n+        ty::VstoreUniq => {\n             assert!(type_is_immediate(bcx.ccx(), vec_ty));\n             let body = Load(bcx, llval);\n             (get_dataptr(bcx, body), get_fill(bcx, body))\n@@ -502,21 +502,21 @@ pub fn get_base_and_len(bcx: &Block,\n \n     let vstore = match ty::get(vec_ty).sty {\n         ty::ty_str(vst) | ty::ty_vec(_, vst) => vst,\n-        _ => ty::vstore_uniq\n+        _ => ty::VstoreUniq\n     };\n \n     match vstore {\n-        ty::vstore_fixed(n) => {\n+        ty::VstoreFixed(n) => {\n             let base = GEPi(bcx, llval, [0u, 0u]);\n             (base, C_uint(ccx, n))\n         }\n-        ty::vstore_slice(_) => {\n+        ty::VstoreSlice(_) => {\n             assert!(!type_is_immediate(bcx.ccx(), vec_ty));\n             let base = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_base]));\n             let count = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_len]));\n             (base, count)\n         }\n-        ty::vstore_uniq => {\n+        ty::VstoreUniq => {\n             assert!(type_is_immediate(bcx.ccx(), vec_ty));\n             let body = Load(bcx, llval);\n             (get_dataptr(bcx, body), UDiv(bcx, get_fill(bcx, body), vt.llunit_size))"}, {"sha": "1861c414ccab46af1149a02386d04f7d09d81bd9", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -116,24 +116,24 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_uint(t) => Type::uint_from_ty(cx, t),\n         ty::ty_float(t) => Type::float_from_ty(cx, t),\n \n-        ty::ty_str(ty::vstore_uniq) |\n-        ty::ty_vec(_, ty::vstore_uniq) |\n+        ty::ty_str(ty::VstoreUniq) |\n+        ty::ty_vec(_, ty::VstoreUniq) |\n         ty::ty_box(..) |\n         ty::ty_uniq(..) |\n         ty::ty_ptr(..) |\n         ty::ty_rptr(..) => Type::i8p(cx),\n \n-        ty::ty_str(ty::vstore_slice(..)) |\n-        ty::ty_vec(_, ty::vstore_slice(..)) => {\n+        ty::ty_str(ty::VstoreSlice(..)) |\n+        ty::ty_vec(_, ty::VstoreSlice(..)) => {\n             Type::struct_(cx, [Type::i8p(cx), Type::i8p(cx)], false)\n         }\n \n         ty::ty_bare_fn(..) => Type::i8p(cx),\n         ty::ty_closure(..) => Type::struct_(cx, [Type::i8p(cx), Type::i8p(cx)], false),\n         ty::ty_trait(..) => Type::opaque_trait(cx),\n \n-        ty::ty_str(ty::vstore_fixed(size)) => Type::array(&Type::i8(cx), size as u64),\n-        ty::ty_vec(mt, ty::vstore_fixed(size)) => {\n+        ty::ty_str(ty::VstoreFixed(size)) => Type::array(&Type::i8(cx), size as u64),\n+        ty::ty_vec(mt, ty::VstoreFixed(size)) => {\n             Type::array(&sizing_type_of(cx, mt.ty), size as u64)\n         }\n \n@@ -199,7 +199,7 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n       ty::ty_int(t) => Type::int_from_ty(cx, t),\n       ty::ty_uint(t) => Type::uint_from_ty(cx, t),\n       ty::ty_float(t) => Type::float_from_ty(cx, t),\n-      ty::ty_str(ty::vstore_uniq) => {\n+      ty::ty_str(ty::VstoreUniq) => {\n         Type::vec(cx, &Type::i8(cx)).ptr_to()\n       }\n       ty::ty_enum(did, ref substs) => {\n@@ -217,28 +217,28 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n       ty::ty_uniq(typ) => {\n           type_of(cx, typ).ptr_to()\n       }\n-      ty::ty_vec(ref mt, ty::vstore_uniq) => {\n+      ty::ty_vec(ref mt, ty::VstoreUniq) => {\n           Type::vec(cx, &type_of(cx, mt.ty)).ptr_to()\n       }\n       ty::ty_ptr(ref mt) => type_of(cx, mt.ty).ptr_to(),\n       ty::ty_rptr(_, ref mt) => type_of(cx, mt.ty).ptr_to(),\n \n-      ty::ty_vec(ref mt, ty::vstore_slice(_)) => {\n+      ty::ty_vec(ref mt, ty::VstoreSlice(_)) => {\n           let p_ty = type_of(cx, mt.ty).ptr_to();\n           let u_ty = Type::uint_from_ty(cx, ast::TyU);\n           Type::struct_(cx, [p_ty, u_ty], false)\n       }\n \n-      ty::ty_str(ty::vstore_slice(_)) => {\n+      ty::ty_str(ty::VstoreSlice(_)) => {\n           // This means we get a nicer name in the output\n           cx.tn.find_type(\"str_slice\").unwrap()\n       }\n \n-      ty::ty_str(ty::vstore_fixed(n)) => {\n+      ty::ty_str(ty::VstoreFixed(n)) => {\n           Type::array(&Type::i8(cx), (n + 1u) as u64)\n       }\n \n-      ty::ty_vec(ref mt, ty::vstore_fixed(n)) => {\n+      ty::ty_vec(ref mt, ty::VstoreFixed(n)) => {\n           Type::array(&type_of(cx, mt.ty), n as u64)\n       }\n "}, {"sha": "729cff5167cede7f479d55a966a64e411f886218", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -130,10 +130,10 @@ pub struct mt {\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash, Show)]\n-pub enum vstore {\n-    vstore_fixed(uint),\n-    vstore_uniq,\n-    vstore_slice(Region)\n+pub enum Vstore {\n+    VstoreFixed(uint),\n+    VstoreUniq,\n+    VstoreSlice(Region)\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash, Encodable, Decodable, Show)]\n@@ -729,11 +729,11 @@ pub enum sty {\n     ty_int(ast::IntTy),\n     ty_uint(ast::UintTy),\n     ty_float(ast::FloatTy),\n-    ty_str(vstore),\n+    ty_str(Vstore),\n     ty_enum(DefId, substs),\n     ty_box(t),\n     ty_uniq(t),\n-    ty_vec(mt, vstore),\n+    ty_vec(mt, Vstore),\n     ty_ptr(mt),\n     ty_rptr(Region, mt),\n     ty_bare_fn(BareFnTy),\n@@ -811,7 +811,7 @@ pub enum type_err {\n     terr_regions_no_overlap(Region, Region),\n     terr_regions_insufficiently_polymorphic(BoundRegion, Region),\n     terr_regions_overly_polymorphic(BoundRegion, Region),\n-    terr_vstores_differ(terr_vstore_kind, expected_found<vstore>),\n+    terr_vstores_differ(terr_vstore_kind, expected_found<Vstore>),\n     terr_trait_stores_differ(terr_vstore_kind, expected_found<TraitStore>),\n     terr_in_field(@type_err, ast::Ident),\n     terr_sorts(expected_found<t>),\n@@ -1177,10 +1177,10 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n         return f;\n     }\n     match &st {\n-      &ty_str(vstore_slice(r)) => {\n+      &ty_str(VstoreSlice(r)) => {\n         flags |= rflags(r);\n       }\n-      &ty_vec(ref mt, vstore_slice(r)) => {\n+      &ty_vec(ref mt, VstoreSlice(r)) => {\n         flags |= rflags(r);\n         flags |= get(mt.ty).flags;\n       }\n@@ -1340,7 +1340,7 @@ pub fn mk_mach_float(tm: ast::FloatTy) -> t {\n #[inline]\n pub fn mk_char() -> t { mk_prim_t(&primitives::TY_CHAR) }\n \n-pub fn mk_str(cx: &ctxt, t: vstore) -> t {\n+pub fn mk_str(cx: &ctxt, t: Vstore) -> t {\n     mk_t(cx, ty_str(t))\n }\n \n@@ -1376,7 +1376,7 @@ pub fn mk_nil_ptr(cx: &ctxt) -> t {\n     mk_ptr(cx, mt {ty: mk_nil(), mutbl: ast::MutImmutable})\n }\n \n-pub fn mk_vec(cx: &ctxt, tm: mt, t: vstore) -> t {\n+pub fn mk_vec(cx: &ctxt, tm: mt, t: Vstore) -> t {\n     mk_t(cx, ty_vec(tm, t))\n }\n \n@@ -1597,8 +1597,8 @@ pub fn type_is_self(ty: t) -> bool {\n pub fn type_is_structural(ty: t) -> bool {\n     match get(ty).sty {\n       ty_struct(..) | ty_tup(_) | ty_enum(..) | ty_closure(_) | ty_trait(..) |\n-      ty_vec(_, vstore_fixed(_)) | ty_str(vstore_fixed(_)) |\n-      ty_vec(_, vstore_slice(_)) | ty_str(vstore_slice(_))\n+      ty_vec(_, VstoreFixed(_)) | ty_str(VstoreFixed(_)) |\n+      ty_vec(_, VstoreSlice(_)) | ty_str(VstoreSlice(_))\n       => true,\n       _ => false\n     }\n@@ -1662,7 +1662,7 @@ pub fn type_is_unsafe_ptr(ty: t) -> bool {\n \n pub fn type_is_unique(ty: t) -> bool {\n     match get(ty).sty {\n-        ty_uniq(_) | ty_vec(_, vstore_uniq) | ty_str(vstore_uniq) => true,\n+        ty_uniq(_) | ty_vec(_, VstoreUniq) | ty_str(VstoreUniq) => true,\n         _ => false\n     }\n }\n@@ -1736,8 +1736,8 @@ fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n             !needs_unwind_cleanup\n           }\n           ty_uniq(_) |\n-          ty_str(vstore_uniq) |\n-          ty_vec(_, vstore_uniq) => {\n+          ty_str(VstoreUniq) |\n+          ty_vec(_, VstoreUniq) => {\n             // Once we're inside a box, the annihilator will find\n             // it and destroy it.\n             if !encountered_box {\n@@ -2050,7 +2050,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 TC::None\n             }\n \n-            ty_str(vstore_uniq) => {\n+            ty_str(VstoreUniq) => {\n                 TC::OwnsOwned\n             }\n \n@@ -2079,24 +2079,24 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                     borrowed_contents(r, mt.mutbl))\n             }\n \n-            ty_vec(mt, vstore_uniq) => {\n+            ty_vec(mt, VstoreUniq) => {\n                 tc_mt(cx, mt, cache).owned_pointer()\n             }\n \n-            ty_vec(ref mt, vstore_slice(r)) => {\n+            ty_vec(ref mt, VstoreSlice(r)) => {\n                 tc_ty(cx, mt.ty, cache).reference(\n                     borrowed_contents(r, mt.mutbl))\n             }\n \n-            ty_vec(mt, vstore_fixed(_)) => {\n+            ty_vec(mt, VstoreFixed(_)) => {\n                 tc_mt(cx, mt, cache)\n             }\n \n-            ty_str(vstore_slice(r)) => {\n+            ty_str(VstoreSlice(r)) => {\n                 borrowed_contents(r, ast::MutImmutable)\n             }\n \n-            ty_str(vstore_fixed(_)) => {\n+            ty_str(VstoreFixed(_)) => {\n                 TC::None\n             }\n \n@@ -2328,8 +2328,8 @@ pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool {\n             // fixed length vectors need special treatment compared to\n             // normal vectors, since they don't necessarily have the\n             // possibilty to have length zero.\n-            ty_vec(_, vstore_fixed(0)) => false, // don't need no contents\n-            ty_vec(mt, vstore_fixed(_)) => type_requires(cx, seen, r_ty, mt.ty),\n+            ty_vec(_, VstoreFixed(0)) => false, // don't need no contents\n+            ty_vec(mt, VstoreFixed(_)) => type_requires(cx, seen, r_ty, mt.ty),\n \n             ty_nil |\n             ty_bot |\n@@ -2466,7 +2466,7 @@ pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability {\n             }\n             // Fixed-length vectors.\n             // FIXME(#11924) Behavior undecided for zero-length vectors.\n-            ty_vec(mt, vstore_fixed(_)) => {\n+            ty_vec(mt, VstoreFixed(_)) => {\n                 type_structurally_recursive(cx, seen, mt.ty)\n             }\n \n@@ -2728,8 +2728,8 @@ pub fn ty_region(tcx: &ctxt,\n                  ty: t) -> Region {\n     match get(ty).sty {\n         ty_rptr(r, _) => r,\n-        ty_vec(_, vstore_slice(r)) => r,\n-        ty_str(vstore_slice(r)) => r,\n+        ty_vec(_, VstoreSlice(r)) => r,\n+        ty_str(VstoreSlice(r)) => r,\n         ref s => {\n             tcx.sess.span_bug(\n                 span,\n@@ -2946,11 +2946,11 @@ pub fn adjust_ty(cx: &ctxt,\n                   ty: ty::t) -> ty::t {\n         match get(ty).sty {\n             ty_vec(mt, _) => {\n-                ty::mk_vec(cx, mt {ty: mt.ty, mutbl: m}, vstore_slice(r))\n+                ty::mk_vec(cx, mt {ty: mt.ty, mutbl: m}, VstoreSlice(r))\n             }\n \n             ty_str(_) => {\n-                ty::mk_str(cx, vstore_slice(r))\n+                ty::mk_str(cx, VstoreSlice(r))\n             }\n \n             ref s => {\n@@ -4201,10 +4201,10 @@ pub fn normalize_ty(cx: &ctxt, t: t) -> t {\n             return t_norm;\n         }\n \n-        fn fold_vstore(&mut self, vstore: vstore) -> vstore {\n+        fn fold_vstore(&mut self, vstore: Vstore) -> Vstore {\n             match vstore {\n-                vstore_fixed(..) | vstore_uniq => vstore,\n-                vstore_slice(_) => vstore_slice(ReStatic)\n+                VstoreFixed(..) | VstoreUniq => vstore,\n+                VstoreSlice(_) => VstoreSlice(ReStatic)\n             }\n         }\n \n@@ -4595,11 +4595,11 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n             }\n         }\n     };\n-    let vstore = |state: &mut sip::SipState, v: vstore| {\n+    let vstore = |state: &mut sip::SipState, v: Vstore| {\n         match v {\n-            vstore_fixed(_) => 0u8.hash(state),\n-            vstore_uniq => 1u8.hash(state),\n-            vstore_slice(r) => {\n+            VstoreFixed(_) => 0u8.hash(state),\n+            VstoreUniq => 1u8.hash(state),\n+            VstoreSlice(r) => {\n                 2u8.hash(state);\n                 region(state, r);\n             }"}, {"sha": "0564a492d9d47e5810f2b582cf7605d6e0fbfae0", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -69,7 +69,7 @@ pub trait TypeFolder {\n         r\n     }\n \n-    fn fold_vstore(&mut self, vstore: ty::vstore) -> ty::vstore {\n+    fn fold_vstore(&mut self, vstore: ty::Vstore) -> ty::Vstore {\n         super_fold_vstore(self, vstore)\n     }\n \n@@ -194,12 +194,12 @@ pub fn super_fold_sty<T:TypeFolder>(this: &mut T,\n }\n \n pub fn super_fold_vstore<T:TypeFolder>(this: &mut T,\n-                                       vstore: ty::vstore)\n-                                       -> ty::vstore {\n+                                       vstore: ty::Vstore)\n+                                       -> ty::Vstore {\n     match vstore {\n-        ty::vstore_fixed(i) => ty::vstore_fixed(i),\n-        ty::vstore_uniq => ty::vstore_uniq,\n-        ty::vstore_slice(r) => ty::vstore_slice(this.fold_region(r)),\n+        ty::VstoreFixed(i) => ty::VstoreFixed(i),\n+        ty::VstoreUniq => ty::VstoreUniq,\n+        ty::VstoreSlice(r) => ty::VstoreSlice(this.fold_region(r)),\n     }\n }\n "}, {"sha": "317a67d262e79f8218b896476b4d262995cdb36c", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -356,7 +356,7 @@ pub fn ast_ty_to_prim_ty(tcx: &ty::ctxt, ast_ty: &ast::Ty) -> Option<ty::t> {\n                             tcx.sess.span_err(ast_ty.span,\n                                               \"bare `str` is not a type\");\n                             // return /something/ so they can at least get more errors\n-                            Some(ty::mk_str(tcx, ty::vstore_uniq))\n+                            Some(ty::mk_str(tcx, ty::VstoreUniq))\n                         }\n                     }\n                 }\n@@ -386,15 +386,15 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n \n     enum PointerTy {\n         Box,\n-        VStore(ty::vstore)\n+        VStore(ty::Vstore)\n     }\n     impl PointerTy {\n-        fn expect_vstore(&self, tcx: &ty::ctxt, span: Span, ty: &str) -> ty::vstore {\n+        fn expect_vstore(&self, tcx: &ty::ctxt, span: Span, ty: &str) -> ty::Vstore {\n             match *self {\n                 Box => {\n                     tcx.sess.span_err(span, format!(\"managed {} are not supported\", ty));\n                     // everything can be ~, so this is a worth substitute\n-                    ty::vstore_uniq\n+                    ty::VstoreUniq\n                 }\n                 VStore(vst) => vst\n             }\n@@ -440,8 +440,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                         let result = ast_path_to_trait_ref(\n                             this, rscope, trait_def_id, None, path);\n                         let trait_store = match ptr_ty {\n-                            VStore(ty::vstore_uniq) => ty::UniqTraitStore,\n-                            VStore(ty::vstore_slice(r)) => {\n+                            VStore(ty::VstoreUniq) => ty::UniqTraitStore,\n+                            VStore(ty::VstoreSlice(r)) => {\n                                 ty::RegionTraitStore(r)\n                             }\n                             _ => {\n@@ -495,21 +495,21 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n             }\n             ast::TyUniq(ty) => {\n                 let mt = ast::MutTy { ty: ty, mutbl: ast::MutImmutable };\n-                mk_pointer(this, rscope, &mt, VStore(ty::vstore_uniq),\n+                mk_pointer(this, rscope, &mt, VStore(ty::VstoreUniq),\n                            |tmt| ty::mk_uniq(tcx, tmt.ty))\n             }\n             ast::TyVec(ty) => {\n                 tcx.sess.span_err(ast_ty.span, \"bare `[]` is not a type\");\n                 // return /something/ so they can at least get more errors\n-                ty::mk_vec(tcx, ast_ty_to_mt(this, rscope, ty), ty::vstore_uniq)\n+                ty::mk_vec(tcx, ast_ty_to_mt(this, rscope, ty), ty::VstoreUniq)\n             }\n             ast::TyPtr(ref mt) => {\n                 ty::mk_ptr(tcx, ast_mt_to_mt(this, rscope, mt))\n             }\n             ast::TyRptr(ref region, ref mt) => {\n                 let r = opt_ast_region_to_region(this, rscope, ast_ty.span, region);\n                 debug!(\"ty_rptr r={}\", r.repr(this.tcx()));\n-                mk_pointer(this, rscope, mt, VStore(ty::vstore_slice(r)),\n+                mk_pointer(this, rscope, mt, VStore(ty::VstoreSlice(r)),\n                            |tmt| ty::mk_rptr(tcx, r, tmt))\n             }\n             ast::TyTup(ref fields) => {\n@@ -612,10 +612,10 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                         match *r {\n                             const_eval::const_int(i) =>\n                                 ty::mk_vec(tcx, ast_ty_to_mt(this, rscope, ty),\n-                                           ty::vstore_fixed(i as uint)),\n+                                           ty::VstoreFixed(i as uint)),\n                             const_eval::const_uint(i) =>\n                                 ty::mk_vec(tcx, ast_ty_to_mt(this, rscope, ty),\n-                                           ty::vstore_fixed(i as uint)),\n+                                           ty::VstoreFixed(i as uint)),\n                             _ => {\n                                 tcx.sess.span_fatal(\n                                     ast_ty.span, \"expected constant expr for vector length\");"}, {"sha": "814c45da43f7ed987849ff850195d1003e1a3228", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -620,8 +620,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                                          expected) {\n           ty::ty_vec(mt, vstore) => {\n             let region_var = match vstore {\n-                ty::vstore_slice(r) => r,\n-                ty::vstore_uniq => {\n+                ty::VstoreSlice(r) => r,\n+                ty::VstoreUniq => {\n                     fcx.type_error_message(pat.span,\n                                            |_| {\n                                             ~\"unique vector patterns are no \\\n@@ -631,7 +631,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                            None);\n                     default_region_var\n                 }\n-                ty::vstore_fixed(_) => {\n+                ty::VstoreFixed(_) => {\n                     default_region_var\n                 }\n             };\n@@ -668,7 +668,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n             Some(slice_pat) => {\n                 let slice_ty = ty::mk_vec(tcx,\n                     ty::mt {ty: elt_type.ty, mutbl: elt_type.mutbl},\n-                    ty::vstore_slice(region_var)\n+                    ty::VstoreSlice(region_var)\n                 );\n                 check_pat(pcx, slice_pat, slice_ty);\n             }"}, {"sha": "b9996a57929bd415604f75630eff04b5bbb1d157", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -770,10 +770,10 @@ impl<'a> LookupContext<'a> {\n                      autoderefs: autoderefs+1,\n                      autoref: Some(ty::AutoPtr(region, self_mt.mutbl))})\n             }\n-            ty::ty_vec(self_mt, vstore_slice(_)) => {\n+            ty::ty_vec(self_mt, VstoreSlice(_)) => {\n                 let region =\n                     self.infcx().next_region_var(infer::Autoref(self.span));\n-                (ty::mk_vec(tcx, self_mt, vstore_slice(region)),\n+                (ty::mk_vec(tcx, self_mt, VstoreSlice(region)),\n                  ty::AutoDerefRef {\n                      autoderefs: autoderefs,\n                      autoref: Some(ty::AutoBorrowVec(region, self_mt.mutbl))})\n@@ -821,15 +821,15 @@ impl<'a> LookupContext<'a> {\n         let tcx = self.tcx();\n         let sty = ty::get(self_ty).sty.clone();\n         match sty {\n-            ty_vec(mt, vstore_uniq) |\n-            ty_vec(mt, vstore_slice(_)) | // NDM(#3148)\n-            ty_vec(mt, vstore_fixed(_)) => {\n+            ty_vec(mt, VstoreUniq) |\n+            ty_vec(mt, VstoreSlice(_)) |\n+            ty_vec(mt, VstoreFixed(_)) => {\n                 // First try to borrow to a slice\n                 let entry = self.search_for_some_kind_of_autorefd_method(\n                     AutoBorrowVec, autoderefs, [MutImmutable, MutMutable],\n                     |m,r| ty::mk_vec(tcx,\n                                      ty::mt {ty:mt.ty, mutbl:m},\n-                                     vstore_slice(r)));\n+                                     VstoreSlice(r)));\n \n                 if entry.is_some() { return entry; }\n \n@@ -839,7 +839,7 @@ impl<'a> LookupContext<'a> {\n                     |m,r| {\n                         let slice_ty = ty::mk_vec(tcx,\n                                                   ty::mt {ty:mt.ty, mutbl:m},\n-                                                  vstore_slice(r));\n+                                                  VstoreSlice(r));\n                         // NB: we do not try to autoref to a mutable\n                         // pointer. That would be creating a pointer\n                         // to a temporary pointer (the borrowed\n@@ -849,18 +849,18 @@ impl<'a> LookupContext<'a> {\n                     })\n             }\n \n-            ty_str(vstore_uniq) |\n-            ty_str(vstore_fixed(_)) => {\n+            ty_str(VstoreUniq) |\n+            ty_str(VstoreFixed(_)) => {\n                 let entry = self.search_for_some_kind_of_autorefd_method(\n                     AutoBorrowVec, autoderefs, [MutImmutable],\n-                    |_m,r| ty::mk_str(tcx, vstore_slice(r)));\n+                    |_m,r| ty::mk_str(tcx, VstoreSlice(r)));\n \n                 if entry.is_some() { return entry; }\n \n                 self.search_for_some_kind_of_autorefd_method(\n                     AutoBorrowVecRef, autoderefs, [MutImmutable],\n                     |m,r| {\n-                        let slice_ty = ty::mk_str(tcx, vstore_slice(r));\n+                        let slice_ty = ty::mk_str(tcx, VstoreSlice(r));\n                         ty::mk_rptr(tcx, r, ty::mt {ty:slice_ty, mutbl:m})\n                     })\n             }"}, {"sha": "b4294c549a26e43e8e6b3979fac689187ce2e2be", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -1287,10 +1287,10 @@ pub fn check_lit(fcx: &FnCtxt, lit: &ast::Lit) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n \n     match lit.node {\n-        ast::LitStr(..) => ty::mk_str(tcx, ty::vstore_slice(ty::ReStatic)),\n+        ast::LitStr(..) => ty::mk_str(tcx, ty::VstoreSlice(ty::ReStatic)),\n         ast::LitBinary(..) => {\n             ty::mk_vec(tcx, ty::mt{ ty: ty::mk_u8(), mutbl: ast::MutImmutable },\n-                       ty::vstore_slice(ty::ReStatic))\n+                       ty::VstoreSlice(ty::ReStatic))\n         }\n         ast::LitChar(_) => ty::mk_char(),\n         ast::LitInt(_, t) => ty::mk_mach_int(t),\n@@ -3023,7 +3023,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             check_expr_has_type(fcx, *e, t);\n         }\n         let typ = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: ast::MutImmutable},\n-                             ty::vstore_fixed(args.len()));\n+                             ty::VstoreFixed(args.len()));\n         fcx.write_ty(id, typ);\n       }\n       ast::ExprRepeat(element, count_expr) => {\n@@ -3040,7 +3040,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         }\n         else {\n             let t = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: ast::MutImmutable},\n-                               ty::vstore_fixed(count));\n+                               ty::VstoreFixed(count));\n             fcx.write_ty(id, t);\n         }\n       }\n@@ -3855,30 +3855,30 @@ pub fn type_is_c_like_enum(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n pub fn ast_expr_vstore_to_vstore(fcx: &FnCtxt,\n                                  e: &ast::Expr,\n                                  v: ast::ExprVstore)\n-                              -> ty::vstore {\n+                              -> ty::Vstore {\n     match v {\n-        ast::ExprVstoreUniq => ty::vstore_uniq,\n+        ast::ExprVstoreUniq => ty::VstoreUniq,\n         ast::ExprVstoreSlice | ast::ExprVstoreMutSlice => {\n             match e.node {\n                 ast::ExprLit(..) => {\n                     // string literals and *empty slices* live in static memory\n-                    ty::vstore_slice(ty::ReStatic)\n+                    ty::VstoreSlice(ty::ReStatic)\n                 }\n                 ast::ExprVec(ref elements) if elements.len() == 0 => {\n                     // string literals and *empty slices* live in static memory\n-                    ty::vstore_slice(ty::ReStatic)\n+                    ty::VstoreSlice(ty::ReStatic)\n                 }\n                 ast::ExprRepeat(..) |\n                 ast::ExprVec(..) => {\n                     // vector literals are temporaries on the stack\n                     match fcx.tcx().region_maps.temporary_scope(e.id) {\n                         Some(scope) => {\n                             let r = ty::ReScope(scope);\n-                            ty::vstore_slice(r)\n+                            ty::VstoreSlice(r)\n                         }\n                         None => {\n                             // this slice occurs in a static somewhere\n-                            ty::vstore_slice(ty::ReStatic)\n+                            ty::VstoreSlice(ty::ReStatic)\n                         }\n                     }\n                 }"}, {"sha": "37b648c8b6c69aa61ad7647a42eca88db37e9bd2", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -923,8 +923,8 @@ fn constrain_index(rcx: &mut Rcx,\n \n     let r_index_expr = ty::ReScope(index_expr.id);\n     match ty::get(indexed_ty).sty {\n-        ty::ty_str(ty::vstore_slice(r_ptr)) |\n-        ty::ty_vec(_, ty::vstore_slice(r_ptr)) => {\n+        ty::ty_str(ty::VstoreSlice(r_ptr)) |\n+        ty::ty_vec(_, ty::VstoreSlice(r_ptr)) => {\n             rcx.fcx.mk_subr(true, infer::IndexSlice(index_expr.span),\n                             r_index_expr, r_ptr);\n         }"}, {"sha": "e0d2d2252b000b3e7561868300630702f72380ab", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -101,7 +101,7 @@ pub fn relate_nested_regions(tcx: &ty::ctxt,\n         fn fold_ty(&mut self, ty: ty::t) -> ty::t {\n             match ty::get(ty).sty {\n                 ty::ty_rptr(r, ref mt) |\n-                ty::ty_vec(ref mt, ty::vstore_slice(r)) => {\n+                ty::ty_vec(ref mt, ty::VstoreSlice(r)) => {\n                     self.relate(r);\n                     self.stack.push(r);\n                     ty_fold::super_fold_ty(self, mt.ty);"}, {"sha": "d37518c13d5fbc0f9c5cf38ee13e055418983a7d", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -67,7 +67,7 @@ we may want to adjust precisely when coercions occur.\n \n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowFn, AutoBorrowObj};\n use middle::ty::{AutoDerefRef};\n-use middle::ty::{vstore_slice, vstore_uniq};\n+use middle::ty::{VstoreSlice, VstoreUniq};\n use middle::ty::{mt};\n use middle::ty;\n use middle::typeck::infer::{CoerceResult, resolve_type, Coercion};\n@@ -108,13 +108,13 @@ impl<'f> Coerce<'f> {\n                 });\n             }\n \n-            ty::ty_str(vstore_slice(_)) => {\n+            ty::ty_str(VstoreSlice(_)) => {\n                 return self.unpack_actual_value(a, |sty_a| {\n                     self.coerce_borrowed_string(a, sty_a, b)\n                 });\n             }\n \n-            ty::ty_vec(mt_b, vstore_slice(_)) => {\n+            ty::ty_vec(mt_b, VstoreSlice(_)) => {\n                 return self.unpack_actual_value(a, |sty_a| {\n                     self.coerce_borrowed_vector(a, sty_a, b, mt_b)\n                 });\n@@ -260,14 +260,14 @@ impl<'f> Coerce<'f> {\n                b.inf_str(self.get_ref().infcx));\n \n         match *sty_a {\n-            ty::ty_str(vstore_uniq) => {}\n+            ty::ty_str(VstoreUniq) => {}\n             _ => {\n                 return self.subtype(a, b);\n             }\n         };\n \n         let r_a = self.get_ref().infcx.next_region_var(Coercion(self.get_ref().trace));\n-        let a_borrowed = ty::mk_str(self.get_ref().infcx.tcx, vstore_slice(r_a));\n+        let a_borrowed = ty::mk_str(self.get_ref().infcx.tcx, VstoreSlice(r_a));\n         if_ok!(self.subtype(a_borrowed, b));\n         Ok(Some(@AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n@@ -296,7 +296,7 @@ impl<'f> Coerce<'f> {\n \n         let a_borrowed = ty::mk_vec(self.get_ref().infcx.tcx,\n                                     mt {ty: ty_inner, mutbl: mt_b.mutbl},\n-                                    vstore_slice(r_borrow));\n+                                    VstoreSlice(r_borrow));\n         if_ok!(sub.tys(a_borrowed, b));\n         Ok(Some(@AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,"}, {"sha": "8352688f4ae72b91d767c62384aee5857761f510", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -264,15 +264,15 @@ pub trait Combine {\n \n     fn vstores(&self,\n                vk: ty::terr_vstore_kind,\n-               a: ty::vstore,\n-               b: ty::vstore)\n-               -> cres<ty::vstore> {\n+               a: ty::Vstore,\n+               b: ty::Vstore)\n+               -> cres<ty::Vstore> {\n         debug!(\"{}.vstores(a={:?}, b={:?})\", self.tag(), a, b);\n \n         match (a, b) {\n-            (ty::vstore_slice(a_r), ty::vstore_slice(b_r)) => {\n+            (ty::VstoreSlice(a_r), ty::VstoreSlice(b_r)) => {\n                 self.contraregions(a_r, b_r).and_then(|r| {\n-                    Ok(ty::vstore_slice(r))\n+                    Ok(ty::VstoreSlice(r))\n                 })\n             }\n "}, {"sha": "7e7f48a351fa29feef792a84f99b7155692fa9ef", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -716,19 +716,18 @@ impl<'a> ConstraintContext<'a> {\n         }\n     }\n \n-    /// Adds constraints appropriate for a vector with vstore `vstore`\n+    /// Adds constraints appropriate for a vector with Vstore `vstore`\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_vstore(&mut self,\n-                                   vstore: ty::vstore,\n+                                   vstore: ty::Vstore,\n                                    variance: VarianceTermPtr<'a>) {\n         match vstore {\n-            ty::vstore_slice(r) => {\n+            ty::VstoreSlice(r) => {\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(r, contra);\n             }\n \n-            ty::vstore_fixed(_) | ty::vstore_uniq => {\n-            }\n+            ty::VstoreFixed(_) | ty::VstoreUniq => {}\n         }\n     }\n "}, {"sha": "ad60b67fff82ba5a382c2efec404114c5ad2ab82", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61764b609c5669e27b5dd0a43d302bb4b54b0c2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b61764b609c5669e27b5dd0a43d302bb4b54b0c2", "patch": "@@ -205,24 +205,24 @@ pub fn mt_to_str_wrapped(cx: &ctxt, before: &str, m: &mt, after: &str) -> ~str {\n     return format!(\"{}{}{}{}\", mstr, before, ty_to_str(cx, m.ty), after);\n }\n \n-pub fn vstore_to_str(cx: &ctxt, vs: ty::vstore) -> ~str {\n+pub fn vstore_to_str(cx: &ctxt, vs: ty::Vstore) -> ~str {\n     match vs {\n-      ty::vstore_fixed(n) => format!(\"{}\", n),\n-      ty::vstore_uniq => ~\"~\",\n-      ty::vstore_slice(r) => region_ptr_to_str(cx, r)\n+        ty::VstoreFixed(n) => format!(\"{}\", n),\n+        ty::VstoreUniq => ~\"~\",\n+        ty::VstoreSlice(r) => region_ptr_to_str(cx, r)\n     }\n }\n \n pub fn trait_store_to_str(cx: &ctxt, s: ty::TraitStore) -> ~str {\n     match s {\n-      ty::UniqTraitStore => ~\"~\",\n-      ty::RegionTraitStore(r) => region_ptr_to_str(cx, r)\n+        ty::UniqTraitStore => ~\"~\",\n+        ty::RegionTraitStore(r) => region_ptr_to_str(cx, r)\n     }\n }\n \n-pub fn vstore_ty_to_str(cx: &ctxt, mt: &mt, vs: ty::vstore) -> ~str {\n+pub fn vstore_ty_to_str(cx: &ctxt, mt: &mt, vs: ty::Vstore) -> ~str {\n     match vs {\n-        ty::vstore_fixed(_) => {\n+        ty::VstoreFixed(_) => {\n             format!(\"[{}, .. {}]\", mt_to_str(cx, mt), vstore_to_str(cx, vs))\n         }\n         _ => {\n@@ -885,7 +885,7 @@ impl Repr for ty::TraitStore {\n     }\n }\n \n-impl Repr for ty::vstore {\n+impl Repr for ty::Vstore {\n     fn repr(&self, tcx: &ctxt) -> ~str {\n         vstore_to_str(tcx, *self)\n     }"}]}