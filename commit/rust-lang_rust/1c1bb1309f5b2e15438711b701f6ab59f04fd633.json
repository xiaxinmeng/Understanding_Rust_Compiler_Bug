{"sha": "1c1bb1309f5b2e15438711b701f6ab59f04fd633", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMWJiMTMwOWY1YjJlMTU0Mzg3MTFiNzAxZjZhYjU5ZjA0ZmQ2MzM=", "commit": {"author": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2020-08-27T21:55:22Z"}, "committer": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2020-09-11T17:48:43Z"}, "message": "Improve E0118 description", "tree": {"sha": "c237d6f1e46ac3003aa043d23ea9796c75f41f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c237d6f1e46ac3003aa043d23ea9796c75f41f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1bb1309f5b2e15438711b701f6ab59f04fd633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1bb1309f5b2e15438711b701f6ab59f04fd633", "html_url": "https://github.com/rust-lang/rust/commit/1c1bb1309f5b2e15438711b701f6ab59f04fd633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1bb1309f5b2e15438711b701f6ab59f04fd633/comments", "author": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d778203da2157f47af6d1f7ba5f44eb933ee2df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d778203da2157f47af6d1f7ba5f44eb933ee2df1", "html_url": "https://github.com/rust-lang/rust/commit/d778203da2157f47af6d1f7ba5f44eb933ee2df1"}], "stats": {"total": 92, "additions": 71, "deletions": 21}, "files": [{"sha": "ddd4f498f0c3442249b9669b9a3dda4478d00d2c", "filename": "compiler/rustc_error_codes/src/error_codes/E0118.md", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -1,10 +1,10 @@\n-An inherent implementation was defined for something which isn't a struct nor\n-an enum.\n+An inherent implementation was defined for something which isn't a struct, an\n+enum, a union or a trait object.\n \n Erroneous code example:\n \n ```compile_fail,E0118\n-impl (u8, u8) { // error: no base type found for inherent implementation\n+impl (u8, u8) { // error: no nominal type found for inherent implementation\n     fn get_state(&self) -> String {\n         // ...\n     }\n@@ -41,3 +41,24 @@ impl TypeWrapper {\n     }\n }\n ```\n+\n+Instead of defining an inherent implementation on a reference, you could also\n+move the reference inside the implementation:\n+\n+```compile_fail,E0118\n+struct Foo;\n+\n+impl &Foo { // error: no nominal type found for inherent implementation\n+    fn bar(self, other: Self) {}\n+}\n+```\n+\n+becomes\n+\n+```\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(&self, other: &Self) {}\n+}\n+```"}, {"sha": "373acb95c9e37896dc13cb6719337ecb6d2725df", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -308,18 +308,25 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n             }\n             ty::Error(_) => {}\n             _ => {\n-                struct_span_err!(\n+                let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     ty.span,\n                     E0118,\n-                    \"no base type found for inherent implementation\"\n-                )\n-                .span_label(ty.span, \"impl requires a base type\")\n-                .note(\n-                    \"either implement a trait on it or create a newtype \\\n-                       to wrap it instead\",\n-                )\n-                .emit();\n+                    \"no nominal type found for inherent implementation\"\n+                );\n+\n+                err.span_label(ty.span, \"impl requires a nominal type\")\n+                    .note(\"either implement a trait on it or create a newtype to wrap it instead\");\n+\n+                if let ty::Ref(_, subty, _) = self_ty.kind() {\n+                    err.note(&format!(\n+                        \"you could also try moving the reference to \\\n+                            uses of `{}` (such as `self`) within the implementation\",\n+                        subty\n+                    ));\n+                }\n+\n+                err.emit();\n             }\n         }\n     }"}, {"sha": "fe04190162af430e4c442a42396882e1a84513ea", "filename": "src/test/ui/error-codes/E0118-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.rs?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -0,0 +1,8 @@\n+struct Foo;\n+\n+impl &mut Foo {\n+    //~^ ERROR E0118\n+    fn bar(self) {}\n+}\n+\n+fn main() {}"}, {"sha": "2a1fe23111687b54487edbd572c6a5221b081f17", "filename": "src/test/ui/error-codes/E0118-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.stderr?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -0,0 +1,12 @@\n+error[E0118]: no nominal type found for inherent implementation\n+  --> $DIR/E0118-2.rs:3:6\n+   |\n+LL | impl &mut Foo {\n+   |      ^^^^^^^^ impl requires a nominal type\n+   |\n+   = note: either implement a trait on it or create a newtype to wrap it instead\n+   = note: you could also try moving the reference to uses of `Foo` (such as `self`) within the implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0118`."}, {"sha": "2693a93213a3b322cf0aaf571c3746c2e9140b89", "filename": "src/test/ui/error-codes/E0118.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -1,8 +1,8 @@\n-error[E0118]: no base type found for inherent implementation\n+error[E0118]: no nominal type found for inherent implementation\n   --> $DIR/E0118.rs:1:6\n    |\n LL | impl (u8, u8) {\n-   |      ^^^^^^^^ impl requires a base type\n+   |      ^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "031e2874a2ba80db4f7ef9b564492fbfce77cb9d", "filename": "src/test/ui/privacy/private-in-public-ill-formed.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.rs?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -11,7 +11,8 @@ mod aliases_pub {\n         type AssocAlias = m::Pub3;\n     }\n \n-    impl <Priv as PrivTr>::AssocAlias { //~ ERROR no base type found for inherent implementation\n+    impl <Priv as PrivTr>::AssocAlias {\n+        //~^ ERROR no nominal type found for inherent implementation\n         pub fn f(arg: Priv) {} // private type `aliases_pub::Priv` in public interface\n     }\n }\n@@ -27,7 +28,8 @@ mod aliases_priv {\n         type AssocAlias = Priv3;\n     }\n \n-    impl <Priv as PrivTr>::AssocAlias { //~ ERROR no base type found for inherent implementation\n+    impl <Priv as PrivTr>::AssocAlias {\n+        //~^ ERROR no nominal type found for inherent implementation\n         pub fn f(arg: Priv) {} // OK\n     }\n }"}, {"sha": "e7c94bc301bdf21e3ad68c90f9e0cf0a5e876ad9", "filename": "src/test/ui/privacy/private-in-public-ill-formed.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1bb1309f5b2e15438711b701f6ab59f04fd633/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr?ref=1c1bb1309f5b2e15438711b701f6ab59f04fd633", "patch": "@@ -1,16 +1,16 @@\n-error[E0118]: no base type found for inherent implementation\n+error[E0118]: no nominal type found for inherent implementation\n   --> $DIR/private-in-public-ill-formed.rs:14:10\n    |\n LL |     impl <Priv as PrivTr>::AssocAlias {\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a base type\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n \n-error[E0118]: no base type found for inherent implementation\n-  --> $DIR/private-in-public-ill-formed.rs:30:10\n+error[E0118]: no nominal type found for inherent implementation\n+  --> $DIR/private-in-public-ill-formed.rs:31:10\n    |\n LL |     impl <Priv as PrivTr>::AssocAlias {\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a base type\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}]}