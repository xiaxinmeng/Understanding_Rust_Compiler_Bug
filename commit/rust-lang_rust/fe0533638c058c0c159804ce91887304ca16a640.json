{"sha": "fe0533638c058c0c159804ce91887304ca16a640", "node_id": "C_kwDOAAsO6NoAKGZlMDUzMzYzOGMwNThjMGMxNTk4MDRjZTkxODg3MzA0Y2ExNmE2NDA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T19:55:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T19:55:19Z"}, "message": "Use proper subdiagnostic", "tree": {"sha": "4976aba2351c1621bb9b571a6835b5570a3528a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4976aba2351c1621bb9b571a6835b5570a3528a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0533638c058c0c159804ce91887304ca16a640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0533638c058c0c159804ce91887304ca16a640", "html_url": "https://github.com/rust-lang/rust/commit/fe0533638c058c0c159804ce91887304ca16a640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0533638c058c0c159804ce91887304ca16a640/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7783bd131e7e5a326985765b7f4399c497f7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7783bd131e7e5a326985765b7f4399c497f7bb", "html_url": "https://github.com/rust-lang/rust/commit/8e7783bd131e7e5a326985765b7f4399c497f7bb"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "31705624a7fef9110f192c6df88ba502f2d8b564", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe0533638c058c0c159804ce91887304ca16a640/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0533638c058c0c159804ce91887304ca16a640/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=fe0533638c058c0c159804ce91887304ca16a640", "patch": "@@ -1,4 +1,3 @@\n-use rustc_errors::DecorateLint;\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n@@ -120,29 +119,22 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     )) {\n                         // If it's a trait bound and an opaque that doesn't satisfy it,\n                         // then we can emit a suggestion to add the bound.\n-                        let sugg =\n+                        let add_bound =\n                             match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n                                 (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => Some(AddBound {\n                                     suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),\n                                     trait_ref: trait_pred.print_modifiers_and_trait_path(),\n                                 }),\n                                 _ => None,\n                             };\n-                        let lint = OpaqueHiddenInferredBoundLint {\n-                            ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n-                            proj_ty: proj_term,\n-                            assoc_pred_span,\n-                        };\n-                        cx.struct_span_lint(\n+                        cx.emit_spanned_lint(\n                             OPAQUE_HIDDEN_INFERRED_BOUND,\n                             pred_span,\n-                            lint.msg(),\n-                            |diag| {\n-                                lint.decorate_lint(diag);\n-                                if let Some(sugg) = sugg {\n-                                    diag.subdiagnostic(sugg);\n-                                }\n-                                diag\n+                            OpaqueHiddenInferredBoundLint {\n+                                ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n+                                proj_ty: proj_term,\n+                                assoc_pred_span,\n+                                add_bound,\n                             },\n                         );\n                     }\n@@ -159,6 +151,8 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n     proj_ty: Ty<'tcx>,\n     #[label(lint::specifically)]\n     assoc_pred_span: Span,\n+    #[subdiagnostic]\n+    add_bound: Option<AddBound<'tcx>>,\n }\n \n #[derive(Subdiagnostic)]"}]}