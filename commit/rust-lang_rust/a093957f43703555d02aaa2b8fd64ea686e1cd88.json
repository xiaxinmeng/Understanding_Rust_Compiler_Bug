{"sha": "a093957f43703555d02aaa2b8fd64ea686e1cd88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTM5NTdmNDM3MDM1NTVkMDJhYWEyYjhmZDY0ZWE2ODZlMWNkODg=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-04T21:46:49Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-06T22:12:16Z"}, "message": "Avoid unused return", "tree": {"sha": "4b259695b90d62369dd96075fe9818d13600beb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b259695b90d62369dd96075fe9818d13600beb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a093957f43703555d02aaa2b8fd64ea686e1cd88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEGdbxTRDxXfPwlFQKMuM+wV4f7zwFAl9868IACgkQMuM+wV4f\n7zy7Zwv+NbWvYxjPPdI7yiJ51VKZlqVdnDM2adNH/5SOZTDIiHMHtJ4AU+iPUGoa\nxa42yQ4PK3i1ycmnzw+XPw7Cr36RimSwlpO4HY4t8PAAFEK6/o4LDlvIdUDmfXon\nonI8z7hA5W6cfmB9sI1hSB3w+OhZO2ZxaFWwc7XegrSYxjJWGSmdcRxvkQyxZDfl\nn+Y3DI08f0Ku46QO8rrptx1SGf00h98dn+2B9qldGbA0ILhoYToB2e+p9ajxC9Tu\n613T0fupFIl7LcPqMS/NMb2Mi56sEYGONn4Ue7pNhashlU/5jGJJBz9c6DxhHdoq\nmQBB6yqdACy1UeAJNNNuNl2Xkdp4UQZB7u1V3mZafslZSyVlu+1KcY8ZnHNYZfWL\niooJe7ZnwOgHMfN2baxLQrY40sDwGF2ImUYlcdS70vqB/S4uTlVmSIEI04eip1ei\nB0NFAbtBvk624dgN5Cv2anRKRGnPNPJzbwlByiAM6nc7sKL1DuPCeDfMz0Rl1uYe\nOUHU1ZAL\n=Okwh\n-----END PGP SIGNATURE-----", "payload": "tree 4b259695b90d62369dd96075fe9818d13600beb4\nparent 9fdaeb393a16951f6fdef087193fef576e36aba6\nauthor Tamir Duberstein <tamird@google.com> 1601848009 +0000\ncommitter Tamir Duberstein <tamird@google.com> 1602022336 +0000\n\nAvoid unused return\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a093957f43703555d02aaa2b8fd64ea686e1cd88", "html_url": "https://github.com/rust-lang/rust/commit/a093957f43703555d02aaa2b8fd64ea686e1cd88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a093957f43703555d02aaa2b8fd64ea686e1cd88/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdaeb393a16951f6fdef087193fef576e36aba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaeb393a16951f6fdef087193fef576e36aba6", "html_url": "https://github.com/rust-lang/rust/commit/9fdaeb393a16951f6fdef087193fef576e36aba6"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "87ff18411c7af152e33857cba546a8b3fce06274", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a093957f43703555d02aaa2b8fd64ea686e1cd88/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a093957f43703555d02aaa2b8fd64ea686e1cd88/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=a093957f43703555d02aaa2b8fd64ea686e1cd88", "patch": "@@ -75,9 +75,12 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read the next character from the input if it matches the target\n-    fn read_given_char(&mut self, target: char) -> Option<char> {\n-        self.read_atomically(|p| p.read_char().filter(|&c| c == target))\n+    #[must_use]\n+    /// Read the next character from the input if it matches the target.\n+    fn read_given_char(&mut self, target: char) -> Option<()> {\n+        self.read_atomically(|p| {\n+            p.read_char().and_then(|c| if c == target { Some(()) } else { None })\n+        })\n     }\n \n     /// Helper for reading separators in an indexed loop. Reads the separator\n@@ -90,7 +93,7 @@ impl<'a> Parser<'a> {\n     {\n         self.read_atomically(move |p| {\n             if index > 0 {\n-                let _ = p.read_given_char(sep)?;\n+                p.read_given_char(sep)?;\n             }\n             inner(p)\n         })\n@@ -187,8 +190,8 @@ impl<'a> Parser<'a> {\n \n             // read `::` if previous code parsed less than 8 groups\n             // `::` indicates one or more groups of 16 bits of zeros\n-            let _ = p.read_given_char(':')?;\n-            let _ = p.read_given_char(':')?;\n+            p.read_given_char(':')?;\n+            p.read_given_char(':')?;\n \n             // Read the back part of the address. The :: must contain at least one\n             // set of zeroes, so our max length is 7.\n@@ -211,7 +214,7 @@ impl<'a> Parser<'a> {\n     /// Read a : followed by a port in base 10.\n     fn read_port(&mut self) -> Option<u16> {\n         self.read_atomically(|p| {\n-            let _ = p.read_given_char(':')?;\n+            p.read_given_char(':')?;\n             p.read_number(10, None)\n         })\n     }\n@@ -228,9 +231,9 @@ impl<'a> Parser<'a> {\n     /// Read an IPV6 address with a port\n     fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {\n         self.read_atomically(|p| {\n-            let _ = p.read_given_char('[')?;\n+            p.read_given_char('[')?;\n             let ip = p.read_ipv6_addr()?;\n-            let _ = p.read_given_char(']')?;\n+            p.read_given_char(']')?;\n \n             let port = p.read_port()?;\n             Some(SocketAddrV6::new(ip, port, 0, 0))"}]}