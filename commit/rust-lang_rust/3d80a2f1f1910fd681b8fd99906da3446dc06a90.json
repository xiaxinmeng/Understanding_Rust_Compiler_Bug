{"sha": "3d80a2f1f1910fd681b8fd99906da3446dc06a90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODBhMmYxZjE5MTBmZDY4MWI4ZmQ5OTkwNmRhMzQ0NmRjMDZhOTA=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-01T00:13:13Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:11Z"}, "message": "path2: Update for changes from master", "tree": {"sha": "ded104b9f1eb7df95f15bb66f1efeb2f959a8a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded104b9f1eb7df95f15bb66f1efeb2f959a8a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d80a2f1f1910fd681b8fd99906da3446dc06a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d80a2f1f1910fd681b8fd99906da3446dc06a90", "html_url": "https://github.com/rust-lang/rust/commit/3d80a2f1f1910fd681b8fd99906da3446dc06a90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d80a2f1f1910fd681b8fd99906da3446dc06a90/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5b809775fb1f8dbf27edded8e955d64377749c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5b809775fb1f8dbf27edded8e955d64377749c", "html_url": "https://github.com/rust-lang/rust/commit/6f5b809775fb1f8dbf27edded8e955d64377749c"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "c8f57bff84ab65eb49a156a28302509f0a50916c", "filename": "src/libstd/path2/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d80a2f1f1910fd681b8fd99906da3446dc06a90/src%2Flibstd%2Fpath2%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d80a2f1f1910fd681b8fd99906da3446dc06a90/src%2Flibstd%2Fpath2%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fmod.rs?ref=3d80a2f1f1910fd681b8fd99906da3446dc06a90", "patch": "@@ -13,7 +13,7 @@\n use container::Container;\n use c_str::CString;\n use clone::Clone;\n-use iterator::Iterator;\n+use iter::Iterator;\n use option::{Option, None, Some};\n use str;\n use str::StrSlice;\n@@ -102,7 +102,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If the path is not representable in utf-8, this returns None.\n     #[inline]\n     fn as_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_bytes_slice_opt(self.as_vec())\n+        str::from_utf8_slice_opt(self.as_vec())\n     }\n \n     /// Returns the path as a byte vector\n@@ -115,7 +115,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `dirname` for details.\n     #[inline]\n     fn dirname_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_bytes_slice_opt(self.dirname())\n+        str::from_utf8_slice_opt(self.dirname())\n     }\n     /// Returns the file component of `self`, as a byte vector.\n     /// If `self` represents the root of the file hierarchy, returns the empty vector.\n@@ -125,7 +125,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `filename` for details.\n     #[inline]\n     fn filename_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_bytes_slice_opt(self.filename())\n+        str::from_utf8_slice_opt(self.filename())\n     }\n     /// Returns the stem of the filename of `self`, as a byte vector.\n     /// The stem is the portion of the filename just before the last '.'.\n@@ -143,7 +143,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `filestem` for details.\n     #[inline]\n     fn filestem_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_bytes_slice_opt(self.filestem())\n+        str::from_utf8_slice_opt(self.filestem())\n     }\n     /// Returns the extension of the filename of `self`, as an optional byte vector.\n     /// The extension is the portion of the filename just after the last '.'.\n@@ -162,7 +162,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `extension` for details.\n     #[inline]\n     fn extension_str<'a>(&'a self) -> Option<&'a str> {\n-        self.extension().chain(|v| str::from_bytes_slice_opt(v))\n+        self.extension().and_then(|v| str::from_utf8_slice_opt(v))\n     }\n \n     /// Replaces the directory portion of the path with the given byte vector.\n@@ -447,7 +447,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `pop_opt` for details.\n     #[inline]\n     fn pop_opt_str(&mut self) -> Option<~str> {\n-        self.pop_opt().chain(|v| str::from_bytes_owned_opt(v))\n+        self.pop_opt().and_then(|v| str::from_utf8_owned_opt(v))\n     }\n \n     /// Returns a new Path constructed by joining `self` with the given path (as a byte vector)."}, {"sha": "e039843cabf12b7f8109e10d76bee30c96fa6040", "filename": "src/libstd/path2/posix.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d80a2f1f1910fd681b8fd99906da3446dc06a90/src%2Flibstd%2Fpath2%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d80a2f1f1910fd681b8fd99906da3446dc06a90/src%2Flibstd%2Fpath2%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fposix.rs?ref=3d80a2f1f1910fd681b8fd99906da3446dc06a90", "patch": "@@ -15,7 +15,7 @@ use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::Eq;\n use from_str::FromStr;\n-use iterator::{AdditiveIterator, Extendable, Iterator};\n+use iter::{AdditiveIterator, Extendable, Iterator};\n use option::{Option, None, Some};\n use str;\n use str::Str;\n@@ -303,7 +303,7 @@ impl Path {\n \n     /// Converts the Path into an owned string, if possible\n     pub fn into_str(self) -> Option<~str> {\n-        str::from_bytes_owned_opt(self.repr)\n+        str::from_utf8_owned_opt(self.repr)\n     }\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n@@ -406,7 +406,7 @@ static dot_dot_static: &'static [u8] = &'static ['.' as u8, '.' as u8];\n mod tests {\n     use super::*;\n     use option::{Some, None};\n-    use iterator::Iterator;\n+    use iter::Iterator;\n     use str;\n     use vec::Vector;\n \n@@ -589,7 +589,7 @@ mod tests {\n             (s: $path:expr, $op:ident, $exp:expr, opt) => (\n                 {\n                     let path = Path::from_str($path);\n-                    let left = path.$op().map(|&x| str::from_bytes_slice(x));\n+                    let left = path.$op().map(|&x| str::from_utf8_slice(x));\n                     assert_eq!(left, $exp);\n                 }\n             );\n@@ -1006,7 +1006,7 @@ mod tests {\n             (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = $path;\n-                    let left = path.chain_ref(|p| p.as_str());\n+                    let left = path.and_then_ref(|p| p.as_str());\n                     assert_eq!(left, $exp);\n                 }\n             );\n@@ -1083,7 +1083,7 @@ mod tests {\n                     let path = Path::from_str($path);\n                     let other = Path::from_str($other);\n                     let res = path.path_relative_from(&other);\n-                    assert_eq!(res.chain_ref(|x| x.as_str()), $exp);\n+                    assert_eq!(res.and_then_ref(|x| x.as_str()), $exp);\n                 }\n             )\n         )"}]}