{"sha": "9cf485c3db80788bbc6f7931dd163761cdfe81f5", "node_id": "C_kwDOAAsO6NoAKDljZjQ4NWMzZGI4MDc4OGJiYzZmNzkzMWRkMTYzNzYxY2RmZTgxZjU", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-22T14:23:40Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-24T08:37:36Z"}, "message": "Add check step, stuck on 'no output generated for libgoto_def-hash rmeta'", "tree": {"sha": "615deebc1d56033b025231235b18fd0a7ece789a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615deebc1d56033b025231235b18fd0a7ece789a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf485c3db80788bbc6f7931dd163761cdfe81f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf485c3db80788bbc6f7931dd163761cdfe81f5", "html_url": "https://github.com/rust-lang/rust/commit/9cf485c3db80788bbc6f7931dd163761cdfe81f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf485c3db80788bbc6f7931dd163761cdfe81f5/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "html_url": "https://github.com/rust-lang/rust/commit/0f2266d3cca6ea6bae5ecf271174a0fed0d89546"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "74768c8e59ecf0b71777fe1cf6ada41452557428", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf485c3db80788bbc6f7931dd163761cdfe81f5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf485c3db80788bbc6f7931dd163761cdfe81f5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9cf485c3db80788bbc6f7931dd163761cdfe81f5", "patch": "@@ -621,6 +621,7 @@ impl<'a> Builder<'a> {\n                 check::Clippy,\n                 check::Miri,\n                 check::Rls,\n+                check::RustAnalyzer,\n                 check::Rustfmt,\n                 check::Bootstrap\n             ),"}, {"sha": "73de0627c4d062ec0afd2002efd58e7f2782ea0b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9cf485c3db80788bbc6f7931dd163761cdfe81f5/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf485c3db80788bbc6f7931dd163761cdfe81f5/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=9cf485c3db80788bbc6f7931dd163761cdfe81f5", "patch": "@@ -301,6 +301,65 @@ impl Step for CodegenBackend {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct RustAnalyzer {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for RustAnalyzer {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.paths(&[\"src/tools/rust-analyzer\"])\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustAnalyzer { target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let compiler = builder.compiler(builder.top_stage, builder.config.build);\n+        let target = self.target;\n+\n+        builder.ensure(Std { target });\n+\n+        let mut cargo = prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolStd,\n+            target,\n+            cargo_subcommand(builder.kind),\n+            \"src/tools/rust-analyzer\",\n+            SourceType::InTree,\n+            &[\"rust-analyzer/in-rust-tree\".to_owned()],\n+        );\n+\n+        cargo.rustflag(\n+            \"-Zallow-features=proc_macro_internals,proc_macro_diagnostic,proc_macro_span\",\n+        );\n+\n+        // For ./x.py clippy, don't run with --all-targets because\n+        // linting tests and benchmarks can produce very noisy results\n+        if builder.kind != Kind::Clippy {\n+            cargo.arg(\"--all-targets\");\n+        }\n+\n+        builder.info(&format!(\n+            \"Checking stage{} {} artifacts ({} -> {})\",\n+            builder.top_stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n+        ));\n+        run_cargo(builder, cargo, args(builder), &stamp(builder, compiler, target), vec![], true);\n+\n+        /// Cargo's output path in a given stage, compiled by a particular\n+        /// compiler for the specified target.\n+        fn stamp(builder: &Builder<'_>, compiler: Compiler, target: TargetSelection) -> PathBuf {\n+            builder.cargo_out(compiler, Mode::ToolStd, target).join(\".rust-analyzer-check.stamp\")\n+        }\n+    }\n+}\n+\n macro_rules! tool_check_step {\n     ($name:ident, $path:literal, $($alias:literal, )* $source_type:path $(, $default:literal )?) => {\n         #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}]}