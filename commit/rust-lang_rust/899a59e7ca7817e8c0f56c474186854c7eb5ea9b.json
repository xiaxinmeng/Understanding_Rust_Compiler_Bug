{"sha": "899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OWE1OWU3Y2E3ODE3ZThjMGY1NmM0NzQxODY4NTRjN2ViNWVhOWI=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-02T12:15:11Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-02T12:15:11Z"}, "message": "rename MemoryKind::Heap to ConstHeap; bless test", "tree": {"sha": "350cadad61147903a5586081fccc21616f07e622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/350cadad61147903a5586081fccc21616f07e622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "html_url": "https://github.com/rust-lang/rust/commit/899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7fe09025f6dfc7f134243fd672ad2c490b466b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7fe09025f6dfc7f134243fd672ad2c490b466b", "html_url": "https://github.com/rust-lang/rust/commit/1b7fe09025f6dfc7f134243fd672ad2c490b466b"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "db996f72128a7664f0d7c6df9c408f1032c9cb26", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -104,7 +104,10 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     // This match is just a canary for future changes to `MemoryKind`, which most likely need\n     // changes in this function.\n     match kind {\n-        MemoryKind::Stack | MemoryKind::Heap | MemoryKind::Vtable | MemoryKind::CallerLocation => {}\n+        MemoryKind::Stack\n+        | MemoryKind::ConstHeap\n+        | MemoryKind::Vtable\n+        | MemoryKind::CallerLocation => {}\n     }\n     // Set allocation mutability as appropriate. This is used by LLVM to put things into\n     // read-only memory, and also by Miri when evaluating other globals that"}, {"sha": "84a53a589a5088bd576759bbe598abc1e71b795f", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -347,8 +347,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n                 };\n \n-                let ptr =\n-                    self.memory.allocate(Size::from_bytes(size as u64), align, MemoryKind::Heap);\n+                let ptr = self.memory.allocate(\n+                    Size::from_bytes(size as u64),\n+                    align,\n+                    MemoryKind::ConstHeap,\n+                );\n                 self.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             sym::offset => {"}, {"sha": "47d0fce51b177af43536247fdc4288ab7075ffcd", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -28,7 +28,7 @@ pub enum MemoryKind<T> {\n     /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n     /// Heap memory.\n-    Heap,\n+    ConstHeap,\n     /// Memory backing vtables. Error if ever deallocated.\n     Vtable,\n     /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.\n@@ -42,7 +42,7 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     fn may_leak(self) -> bool {\n         match self {\n             MemoryKind::Stack => false,\n-            MemoryKind::Heap => false,\n+            MemoryKind::ConstHeap => false,\n             MemoryKind::Vtable => true,\n             MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak(),\n@@ -54,7 +54,7 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             MemoryKind::Stack => write!(f, \"stack variable\"),\n-            MemoryKind::Heap => write!(f, \"heap allocation\"),\n+            MemoryKind::ConstHeap => write!(f, \"heap allocation\"),\n             MemoryKind::Vtable => write!(f, \"vtable\"),\n             MemoryKind::CallerLocation => write!(f, \"caller location\"),\n             MemoryKind::Machine(m) => write!(f, \"{}\", m),"}, {"sha": "16bf1adf7db3e39d5f1afb9518d0182e39a0478b", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -9,11 +9,11 @@ impl<T> PrintName<T> {\n \n const fn no_codegen<T>() {\n     if false {\n-        let _ = PrintName::<T>::VOID; //~ERROR evaluation of constant value failed\n+        let _ = PrintName::<T>::VOID; //~ERROR could not evaluate static initializer\n     }\n }\n \n-pub static FOO: () = no_codegen::<i32>(); //~ERROR could not evaluate static initializer\n+pub static FOO: () = no_codegen::<i32>();\n \n fn main() {\n     FOO"}, {"sha": "e6ef9974aa8eb82122f3b392c5e18fe91e66ca98", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -1,11 +1,11 @@\n-// run-pass\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n \n-const FOO: &i32 = foo();\n+const FOO: *const i32 = foo();\n+//~^ ERROR untyped pointers are not allowed in constant\n \n const fn foo() -> &'static i32 {\n     let t = unsafe {\n@@ -16,5 +16,4 @@ const fn foo() -> &'static i32 {\n     unsafe { &*t }\n }\n fn main() {\n-    assert_eq!(*FOO, 20)\n }"}, {"sha": "08679350d6d548705ea6bab08c9f02d6495e7d76", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -0,0 +1,8 @@\n+error: untyped pointers are not allowed in constant\n+  --> $DIR/alloc_intrinsic_nontransient_fail.rs:7:1\n+   |\n+LL | const FOO: *const i32 = foo();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2dc8e14bed545aec882c3a83bbabf7423cea1519", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -2,7 +2,7 @@\n \n #[unwind(aborts)]\n const fn foo() {\n-    panic!() //~ 5:13: any use of this value will cause an error [const_err]\n+    panic!() //~ ERROR any use of this value will cause an error [const_err]\n }\n \n const _: () = foo();"}, {"sha": "2f4b7578d1c324005ef7a5718cbb30ec1e82d9f3", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n-    hint_unreachable() //~ 4:23: any use of this value will cause an error [const_err]\n+    hint_unreachable() //~ ERROR any use of this value will cause an error [const_err]\n }\n \n pub const unsafe fn hint_unreachable() -> ! {"}, {"sha": "4209153116d94a5ae0c1fb22f3b4d7d334c2962a", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899a59e7ca7817e8c0f56c474186854c7eb5ea9b/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "patch": "@@ -1,7 +1,7 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n const fn a() -> usize {\n-    b() //~ 4:8: evaluation of constant value failed [E0080]\n+    b() //~ ERROR evaluation of constant value failed [E0080]\n }\n const fn b() -> usize {\n     a()"}]}