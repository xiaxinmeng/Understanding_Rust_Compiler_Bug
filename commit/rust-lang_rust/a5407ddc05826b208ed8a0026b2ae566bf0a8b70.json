{"sha": "a5407ddc05826b208ed8a0026b2ae566bf0a8b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDA3ZGRjMDU4MjZiMjA4ZWQ4YTAwMjZiMmFlNTY2YmYwYThiNzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-22T11:23:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-22T11:23:21Z"}, "message": "Merge #2891\n\n2891: ra_syntax: removed code duplication and token reevaluation r=Veetaha a=Veetaha\n\nJust a small refactoring along the way of reading the codebase\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "d9041707f979ed46fdb05a62a3875feee504a06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9041707f979ed46fdb05a62a3875feee504a06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5407ddc05826b208ed8a0026b2ae566bf0a8b70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKDCpCRBK7hj4Ov3rIwAAdHIIAF6IdWc3LX9yl7J6m2vTdzf3\n8QGg1brx9iLKO06h5/NA+vAhP4gQql2RyDFb4RE5d9hd9Rr0XfSajunoRULKweFk\nuu0tQ7y++XaF5DWCnU8V/xWQTuls4Y1qSUIeDWdlfmc3JdX0E9dIxglXpDCkhLzt\nrNsDTXQThXfmpSNav6XaeDfVjxDtIooEe2D/xkahshMjgttu0FPcbG5dE9WuF2wV\n+lOaXy5vBQ5SJ2w1tzK0kSNd8btLCziRGSpJSKWCKfz9dyo52AZPwSKKDIKa36ll\nAaZ7teow//YX7PaqghCE+roPXWGJe91xRlesNS8LrtsmvzCXC4quh8+amTOKvmc=\n=dEJ0\n-----END PGP SIGNATURE-----\n", "payload": "tree d9041707f979ed46fdb05a62a3875feee504a06b\nparent b982d60a4d512602b54f79b39119bde0f7e50f87\nparent fa31841f1f497f84ceb15c0a8636a2bf836705da\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1579692201 +0000\ncommitter GitHub <noreply@github.com> 1579692201 +0000\n\nMerge #2891\n\n2891: ra_syntax: removed code duplication and token reevaluation r=Veetaha a=Veetaha\n\nJust a small refactoring along the way of reading the codebase\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5407ddc05826b208ed8a0026b2ae566bf0a8b70", "html_url": "https://github.com/rust-lang/rust/commit/a5407ddc05826b208ed8a0026b2ae566bf0a8b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5407ddc05826b208ed8a0026b2ae566bf0a8b70/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b982d60a4d512602b54f79b39119bde0f7e50f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/b982d60a4d512602b54f79b39119bde0f7e50f87", "html_url": "https://github.com/rust-lang/rust/commit/b982d60a4d512602b54f79b39119bde0f7e50f87"}, {"sha": "fa31841f1f497f84ceb15c0a8636a2bf836705da", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa31841f1f497f84ceb15c0a8636a2bf836705da", "html_url": "https://github.com/rust-lang/rust/commit/fa31841f1f497f84ceb15c0a8636a2bf836705da"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "81055746b53d4646f377a675e62a365d8c467251", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5407ddc05826b208ed8a0026b2ae566bf0a8b70/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5407ddc05826b208ed8a0026b2ae566bf0a8b70/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=a5407ddc05826b208ed8a0026b2ae566bf0a8b70", "patch": "@@ -27,7 +27,7 @@ pub use syntax_kind::SyntaxKind;\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParseError(pub String);\n \n-/// `TokenSource` abstracts the source of the tokens parser operates one.\n+/// `TokenSource` abstracts the source of the tokens parser operates on.\n ///\n /// Hopefully this will allow us to treat text and token trees in the same way!\n pub trait TokenSource {\n@@ -43,7 +43,7 @@ pub trait TokenSource {\n     fn is_keyword(&self, kw: &str) -> bool;\n }\n \n-/// `TokenCursor` abstracts the cursor of `TokenSource` operates one.\n+/// `Token` abstracts the cursor of `TokenSource` operates on.\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub struct Token {\n     /// What is the current token?"}, {"sha": "5397594508b9737a39a9f40c97be85e7e893b573", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a5407ddc05826b208ed8a0026b2ae566bf0a8b70/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5407ddc05826b208ed8a0026b2ae566bf0a8b70/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=a5407ddc05826b208ed8a0026b2ae566bf0a8b70", "patch": "@@ -305,44 +305,39 @@ impl ast::Literal {\n             .unwrap()\n     }\n \n+    fn find_suffix(text: &str, possible_suffixes: &[&str]) -> Option<SmolStr> {\n+        possible_suffixes\n+            .iter()\n+            .find(|&suffix| text.ends_with(suffix))\n+            .map(|&suffix| SmolStr::new(suffix))\n+    }\n+\n     pub fn kind(&self) -> LiteralKind {\n-        match self.token().kind() {\n-            INT_NUMBER => {\n-                let int_suffix_list = [\n-                    \"isize\", \"i128\", \"i64\", \"i32\", \"i16\", \"i8\", \"usize\", \"u128\", \"u64\", \"u32\",\n-                    \"u16\", \"u8\",\n-                ];\n+        const INT_SUFFIXES: [&'static str; 12] = [\n+            \"u64\", \"u32\", \"u16\", \"u8\", \"usize\", \"isize\", \"i64\", \"i32\", \"i16\", \"i8\", \"u128\", \"i128\",\n+        ];\n+        const FLOAT_SUFFIXES: [&'static str; 2] = [\"f32\", \"f64\"];\n \n+        let token = self.token();\n+\n+        match token.kind() {\n+            INT_NUMBER => {\n+                // FYI: there was a bug here previously, thus an if statement bellow is necessary.\n                 // The lexer treats e.g. `1f64` as an integer literal. See\n                 // https://github.com/rust-analyzer/rust-analyzer/issues/1592\n                 // and the comments on the linked PR.\n-                let float_suffix_list = [\"f32\", \"f64\"];\n-\n-                let text = self.token().text().to_string();\n \n-                let float_suffix = float_suffix_list\n-                    .iter()\n-                    .find(|&s| text.ends_with(s))\n-                    .map(|&suf| SmolStr::new(suf));\n+                let text = token.text();\n \n-                if float_suffix.is_some() {\n-                    LiteralKind::FloatNumber { suffix: float_suffix }\n+                if let suffix @ Some(_) = Self::find_suffix(&text, &FLOAT_SUFFIXES) {\n+                    LiteralKind::FloatNumber { suffix }\n                 } else {\n-                    let suffix = int_suffix_list\n-                        .iter()\n-                        .find(|&s| text.ends_with(s))\n-                        .map(|&suf| SmolStr::new(suf));\n-                    LiteralKind::IntNumber { suffix }\n+                    LiteralKind::IntNumber { suffix: Self::find_suffix(&text, &INT_SUFFIXES) }\n                 }\n             }\n             FLOAT_NUMBER => {\n-                let allowed_suffix_list = [\"f64\", \"f32\"];\n-                let text = self.token().text().to_string();\n-                let suffix = allowed_suffix_list\n-                    .iter()\n-                    .find(|&s| text.ends_with(s))\n-                    .map(|&suf| SmolStr::new(suf));\n-                LiteralKind::FloatNumber { suffix }\n+                let text = token.text();\n+                LiteralKind::FloatNumber { suffix: Self::find_suffix(&text, &FLOAT_SUFFIXES) }\n             }\n             STRING | RAW_STRING => LiteralKind::String,\n             T![true] | T![false] => LiteralKind::Bool,"}]}