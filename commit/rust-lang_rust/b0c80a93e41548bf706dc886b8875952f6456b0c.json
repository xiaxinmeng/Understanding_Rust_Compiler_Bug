{"sha": "b0c80a93e41548bf706dc886b8875952f6456b0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzgwYTkzZTQxNTQ4YmY3MDZkYzg4NmI4ODc1OTUyZjY0NTZiMGM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-11T20:09:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-11T20:17:11Z"}, "message": "remove the #[inline] attribute from drop_in_place\n\nApparently LLVM has exponential code growth while inlining landing pads\nif that attribute is present.\n\nFixes #41696.", "tree": {"sha": "c69d52ace238149b6bd31690115ba4f34a1764bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69d52ace238149b6bd31690115ba4f34a1764bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c80a93e41548bf706dc886b8875952f6456b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c80a93e41548bf706dc886b8875952f6456b0c", "html_url": "https://github.com/rust-lang/rust/commit/b0c80a93e41548bf706dc886b8875952f6456b0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c80a93e41548bf706dc886b8875952f6456b0c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b97174ada7fb1854269558ed2cf3b089e58beee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b97174ada7fb1854269558ed2cf3b089e58beee", "html_url": "https://github.com/rust-lang/rust/commit/2b97174ada7fb1854269558ed2cf3b089e58beee"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "0944e74f6f18a89549d902a6f5ce0c96918ba679", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0c80a93e41548bf706dc886b8875952f6456b0c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c80a93e41548bf706dc886b8875952f6456b0c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b0c80a93e41548bf706dc886b8875952f6456b0c", "patch": "@@ -56,7 +56,6 @@ pub use intrinsics::write_bytes;\n /// invalid pointers, types, and double drops.\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[lang=\"drop_in_place\"]\n-#[inline]\n #[allow(unconditional_recursion)]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     // Code here does not matter - this is replaced by the"}, {"sha": "efd4f13678502e3e556fa06050e5e9e61de8b36f", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0c80a93e41548bf706dc886b8875952f6456b0c/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c80a93e41548bf706dc886b8875952f6456b0c/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=b0c80a93e41548bf706dc886b8875952f6456b0c", "patch": "@@ -537,6 +537,12 @@ pub fn requests_inline<'a, 'tcx>(\n     if is_inline_instance(tcx, instance) {\n         return true\n     }\n+    if let ty::InstanceDef::DropGlue(..) = instance.def {\n+        // Drop glue wants to be instantiated at every translation\n+        // unit, but without an #[inline] hint. We should make this\n+        // available to normal end-users.\n+        return true\n+    }\n     attr::requests_inline(&instance.def.attrs(tcx)[..])\n }\n "}, {"sha": "1888be58c57d0863f55370d8f6bc1727791868f9", "filename": "src/test/run-pass/issue-41696.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b0c80a93e41548bf706dc886b8875952f6456b0c/src%2Ftest%2Frun-pass%2Fissue-41696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c80a93e41548bf706dc886b8875952f6456b0c/src%2Ftest%2Frun-pass%2Fissue-41696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41696.rs?ref=b0c80a93e41548bf706dc886b8875952f6456b0c", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// this used to cause exponential code-size blowup during LLVM passes.\n+\n+#![feature(test)]\n+\n+extern crate test;\n+\n+struct MayUnwind;\n+\n+impl Drop for MayUnwind {\n+    fn drop(&mut self) {\n+        if test::black_box(false) {\n+            panic!()\n+        }\n+    }\n+}\n+\n+struct DS<U> {\n+    may_unwind: MayUnwind,\n+    name: String,\n+    next: U,\n+}\n+\n+fn add<U>(ds: DS<U>, name: String) -> DS<DS<U>> {\n+    DS {\n+        may_unwind: MayUnwind,\n+        name: \"?\".to_owned(),\n+        next: ds,\n+    }\n+}\n+\n+fn main() {\n+    let deserializers = DS { may_unwind: MayUnwind, name: \"?\".to_owned(), next: () };\n+    let deserializers = add(deserializers, \"?\".to_owned());\n+    let deserializers = add(deserializers, \"?\".to_owned());\n+    let deserializers = add(deserializers, \"?\".to_owned());\n+    let deserializers = add(deserializers, \"?\".to_owned());\n+    let deserializers = add(deserializers, \"?\".to_owned());\n+    let deserializers = add(deserializers, \"?\".to_owned());\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 0.7s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 1.3s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 2.4s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 6.7s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 26.0s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 114.0s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 228.0s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 400.0s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 800.0s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 1600.0s\n+    let deserializers = add(deserializers, \"?\".to_owned()); // 3200.0s\n+}"}]}