{"sha": "8e73bb6ea06cf52b52cb403c84106873519f1220", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNzNiYjZlYTA2Y2Y1MmI1MmNiNDAzYzg0MTA2ODczNTE5ZjEyMjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-21T16:37:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-21T16:37:22Z"}, "message": "detect and report shadows in nested bindings", "tree": {"sha": "7064a07c8cacdb8100ae166ddd064e74aab115c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7064a07c8cacdb8100ae166ddd064e74aab115c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e73bb6ea06cf52b52cb403c84106873519f1220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e73bb6ea06cf52b52cb403c84106873519f1220", "html_url": "https://github.com/rust-lang/rust/commit/8e73bb6ea06cf52b52cb403c84106873519f1220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e73bb6ea06cf52b52cb403c84106873519f1220/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad5f7d2c144117d9bb45eb657fb378d386788bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad5f7d2c144117d9bb45eb657fb378d386788bf", "html_url": "https://github.com/rust-lang/rust/commit/1ad5f7d2c144117d9bb45eb657fb378d386788bf"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "09e5907ebf97bed415adc183b51b6812d0f8ee0f", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8e73bb6ea06cf52b52cb403c84106873519f1220/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e73bb6ea06cf52b52cb403c84106873519f1220/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=8e73bb6ea06cf52b52cb403c84106873519f1220", "patch": "@@ -681,28 +681,29 @@ fn visit_arm_with_scope(a: ast::arm, sc: scopes, v: vt<scopes>) {\n \n // This is only for irrefutable patterns (e.g. ones that appear in a let)\n // So if x occurs, and x is already known to be a enum, that's always an error\n-fn visit_local_with_scope(e: @env, loc: @local, sc:scopes, v:vt<scopes>) {\n-    // Check whether the given local has the same name as a enum that's\n-    // in scope\n-    // We disallow this, in order to make alt patterns consisting of\n-    // a single identifier unambiguous (does the pattern \"foo\" refer\n-    // to enum foo, or is it binding a new name foo?)\n-    alt loc.node.pat.node {\n-      pat_ident(an_ident,_) {\n-          alt lookup_in_scope(*e, sc, loc.span, path_to_ident(an_ident),\n-                              ns_val, false) {\n-              some(ast::def_variant(enum_id,variant_id)) {\n-                  // Declaration shadows an enum that's in scope.\n-                  // That's an error.\n-                  e.sess.span_err(loc.span,\n-                    #fmt(\"declaration of `%s` shadows an \\\n-                          enum that's in scope\",\n-                         path_to_ident(an_ident)));\n-                  }\n+fn visit_local_with_scope(e: @env, loc: @local, &&sc: scopes, v:vt<scopes>) {\n+    // Check whether the given local has the same name as a enum that's in\n+    // scope. We disallow this, in order to make alt patterns consisting of a\n+    // single identifier unambiguous (does the pattern \"foo\" refer to enum\n+    // foo, or is it binding a new name foo?)\n+    pat_util::walk_pat(loc.node.pat) { |p|\n+        alt p.node {\n+          pat_ident(path, _) {\n+            alt lookup_in_scope(*e, sc, loc.span, path_to_ident(path),\n+                                ns_val, false) {\n+              some(ast::def_variant(enum_id, variant_id)) {\n+                // Declaration shadows an enum that's in scope.\n+                // That's an error.\n+                e.sess.span_err(loc.span,\n+                                #fmt(\"declaration of `%s` shadows an \\\n+                                      enum that's in scope\",\n+                                     path_to_ident(path)));\n+              }\n               _ {}\n+            }\n           }\n-      }\n-      _ {}\n+          _ {}\n+        }\n     }\n     visit::visit_local(loc, sc, v);\n }"}, {"sha": "60fb9b831ab418df6aa6c70a3144b1ad702aebd4", "filename": "src/test/compile-fail/pat-shadow-in-nested-binding.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e73bb6ea06cf52b52cb403c84106873519f1220/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e73bb6ea06cf52b52cb403c84106873519f1220/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs?ref=8e73bb6ea06cf52b52cb403c84106873519f1220", "patch": "@@ -0,0 +1,5 @@\n+enum foo = uint;\n+\n+fn main() {\n+    let (foo, _) = (2, 3); //! ERROR declaration of `foo` shadows an enum that's in scope\n+}"}]}