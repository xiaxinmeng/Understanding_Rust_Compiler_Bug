{"sha": "c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjQ3Yzg1ZDYxMjU4MWEzYTU4ZDRkOWUxYmNlZGQ0YTI2YzRiYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-14T20:50:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-15T06:45:37Z"}, "message": "remove an impossible branch from check_consts", "tree": {"sha": "d9dbeba069278153ddc26f2e75f74945e022ef6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9dbeba069278153ddc26f2e75f74945e022ef6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc", "html_url": "https://github.com/rust-lang/rust/commit/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "html_url": "https://github.com/rust-lang/rust/commit/d28a46444eacf066ea0e7fdf6eda066e315aaa4a"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "b3264a7a0321ad4b955c7d4b5555c9c1831a74b5", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc", "patch": "@@ -90,16 +90,6 @@ impl NonConstOp for FnCallNonConst {\n     }\n }\n \n-/// A function call where the callee is not a function definition or function pointer, e.g. a\n-/// closure.\n-///\n-/// This can be subdivided in the future to produce a better error message.\n-#[derive(Debug)]\n-pub struct FnCallOther;\n-impl NonConstOp for FnCallOther {\n-    const IS_SUPPORTED_IN_MIRI: bool = false;\n-}\n-\n /// A call to a `#[unstable]` const fn or `#[rustc_const_unstable]` function.\n ///\n /// Contains the name of the feature that would allow the use of this function."}, {"sha": "16453dd289cfad0ec6ea9ac1ebebd67c0bdd423e", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=c0247c85d612581a3a58d4d9e1bcedd4a26c4bbc", "patch": "@@ -495,11 +495,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n         }\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &TerminatorKind<'tcx>, location: Location) {\n-        trace!(\"visit_terminator_kind: kind={:?} location={:?}\", kind, location);\n-        self.super_terminator_kind(kind, location);\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n+        self.super_terminator(terminator, location);\n \n-        match kind {\n+        match &terminator.kind {\n             TerminatorKind::Call { func, .. } => {\n                 let fn_ty = func.ty(*self.body, self.tcx);\n \n@@ -511,8 +511,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         return;\n                     }\n                     _ => {\n-                        self.check_op(ops::FnCallOther);\n-                        return;\n+                        span_bug!(terminator.source_info.span, \"invalid callee of type {:?}\", fn_ty,)\n                     }\n                 };\n "}]}