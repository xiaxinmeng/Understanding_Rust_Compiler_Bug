{"sha": "089229a1935fa9795cfdefa518c8f8c3beb66db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OTIyOWExOTM1ZmE5Nzk1Y2ZkZWZhNTE4YzhmOGMzYmViNjZkYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T02:58:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T13:55:33Z"}, "message": "Redefine `core::convert::Infallible` as `!`.", "tree": {"sha": "af47f9f8319b41321436ee6d1a6a73b2f7f3e0bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af47f9f8319b41321436ee6d1a6a73b2f7f3e0bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089229a1935fa9795cfdefa518c8f8c3beb66db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089229a1935fa9795cfdefa518c8f8c3beb66db8", "html_url": "https://github.com/rust-lang/rust/commit/089229a1935fa9795cfdefa518c8f8c3beb66db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089229a1935fa9795cfdefa518c8f8c3beb66db8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "html_url": "https://github.com/rust-lang/rust/commit/6eb0627b49edb03d27722cab4d13f92a9a65a1c8"}], "stats": {"total": 114, "additions": 8, "deletions": 106}, "files": [{"sha": "89a269bdb8eb94d4f84dd7a7aba4fde0f4455a5f", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 7, "deletions": 88, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/089229a1935fa9795cfdefa518c8f8c3beb66db8/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089229a1935fa9795cfdefa518c8f8c3beb66db8/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=089229a1935fa9795cfdefa518c8f8c3beb66db8", "patch": "@@ -40,8 +40,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::fmt;\n-\n /// The identity function.\n ///\n /// Two things are important to note about this function:\n@@ -426,9 +424,7 @@ pub trait TryInto<T>: Sized {\n /// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n-/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n-/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n-/// equivalent.\n+/// calling `T::try_from()` on a value of type `T` is [`!`].\n ///\n /// `TryFrom<T>` can be implemented as follows:\n ///\n@@ -477,7 +473,6 @@ pub trait TryInto<T>: Sized {\n /// [`TryInto`]: trait.TryInto.html\n /// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n /// [`!`]: ../../std/primitive.never.html\n-/// [`Infallible`]: enum.Infallible.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -615,9 +610,9 @@ impl AsRef<str> for str {\n // THE NO-ERROR ERROR TYPE\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// The error type for errors that can never happen.\n+/// A type alias for [the `!` \u201cnever\u201d type][never].\n ///\n-/// Since this enum has no variant, a value of this type can never actually exist.\n+/// `Infallible` represents types of errors that can never happen since `!` has no valid values.\n /// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n /// to indicate that the result is always [`Ok`].\n ///\n@@ -634,91 +629,15 @@ impl AsRef<str> for str {\n /// }\n /// ```\n ///\n-/// # Future compatibility\n-///\n-/// This enum has the same role as [the `!` \u201cnever\u201d type][never],\n-/// which is unstable in this version of Rust.\n-/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n-///\n-/// ```ignore (illustrates future std change)\n-/// pub type Infallible = !;\n-/// ```\n-///\n-/// \u2026 and eventually deprecate `Infallible`.\n-///\n-///\n-/// However there is one case where `!` syntax can be used\n-/// before `!` is stabilized as a full-fleged type: in the position of a function\u2019s return type.\n-/// Specifically, it is possible implementations for two different function pointer types:\n-///\n-/// ```\n-/// trait MyTrait {}\n-/// impl MyTrait for fn() -> ! {}\n-/// impl MyTrait for fn() -> std::convert::Infallible {}\n-/// ```\n+/// # Eventual deprecation\n ///\n-/// With `Infallible` being an enum, this code is valid.\n-/// However when `Infallible` becomes an alias for the never type,\n-/// the two `impl`s will start to overlap\n-/// and therefore will be disallowed by the language\u2019s trait coherence rules.\n+/// Previously, `Infallible` was defined as `enum Infallible {}`.\n+/// Now that it is merely a type alias to `!`, we will eventually deprecate `Infallible`.\n ///\n /// [`Ok`]: ../result/enum.Result.html#variant.Ok\n /// [`Result`]: ../result/enum.Result.html\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n /// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-#[derive(Copy)]\n-pub enum Infallible {}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl Clone for Infallible {\n-    fn clone(&self) -> Infallible {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl fmt::Debug for Infallible {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl fmt::Display for Infallible {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl PartialEq for Infallible {\n-    fn eq(&self, _: &Infallible) -> bool {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl Eq for Infallible {}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl PartialOrd for Infallible {\n-    fn partial_cmp(&self, _other: &Self) -> Option<crate::cmp::Ordering> {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl Ord for Infallible {\n-    fn cmp(&self, _other: &Self) -> crate::cmp::Ordering {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl From<!> for Infallible {\n-    fn from(x: !) -> Self {\n-        x\n-    }\n-}\n+pub type Infallible = !;"}, {"sha": "4313248f2636a2dab1957c795a8b7851719932c5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089229a1935fa9795cfdefa518c8f8c3beb66db8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089229a1935fa9795cfdefa518c8f8c3beb66db8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=089229a1935fa9795cfdefa518c8f8c3beb66db8", "patch": "@@ -4,7 +4,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::convert::{TryFrom, Infallible};\n+use crate::convert::TryFrom;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n@@ -4722,18 +4722,8 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl From<Infallible> for TryFromIntError {\n-    fn from(x: Infallible) -> TryFromIntError {\n-        match x {}\n-    }\n-}\n-\n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n-        // Match rather than coerce to make sure that code like\n-        // `From<Infallible> for TryFromIntError` above will keep working\n-        // when `Infallible` becomes an alias to `!`.\n         match never {}\n     }\n }"}, {"sha": "74a9e7c9e331f64cc3bd6ac2de3b9466d8b12485", "filename": "src/libstd/error.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/089229a1935fa9795cfdefa518c8f8c3beb66db8/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089229a1935fa9795cfdefa518c8f8c3beb66db8/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=089229a1935fa9795cfdefa518c8f8c3beb66db8", "patch": "@@ -551,13 +551,6 @@ impl Error for string::FromUtf16Error {\n     }\n }\n \n-#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n-impl Error for string::ParseError {\n-    fn description(&self) -> &str {\n-        match *self {}\n-    }\n-}\n-\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for char::DecodeUtf16Error {\n     fn description(&self) -> &str {"}]}