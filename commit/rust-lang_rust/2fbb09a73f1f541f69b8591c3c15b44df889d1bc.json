{"sha": "2fbb09a73f1f541f69b8591c3c15b44df889d1bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYmIwOWE3M2YxZjU0MWY2OWI4NTkxYzNjMTViNDRkZjg4OWQxYmM=", "commit": {"author": {"name": "Aaron Wood", "email": "aaronwood@google.com", "date": "2020-09-16T19:09:44Z"}, "committer": {"name": "Aaron Wood", "email": "aaronwood@google.com", "date": "2020-09-16T19:09:44Z"}, "message": "Correct project_root path for ProjectJson.\n\nIt was already the folder containing the rust-project.json file, not the file itself.", "tree": {"sha": "89ed9ec4598634cea5d2c79a2bb425b1c354eb40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ed9ec4598634cea5d2c79a2bb425b1c354eb40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbb09a73f1f541f69b8591c3c15b44df889d1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbb09a73f1f541f69b8591c3c15b44df889d1bc", "html_url": "https://github.com/rust-lang/rust/commit/2fbb09a73f1f541f69b8591c3c15b44df889d1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbb09a73f1f541f69b8591c3c15b44df889d1bc/comments", "author": {"login": "woody77", "id": 17480512, "node_id": "MDQ6VXNlcjE3NDgwNTEy", "avatar_url": "https://avatars.githubusercontent.com/u/17480512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woody77", "html_url": "https://github.com/woody77", "followers_url": "https://api.github.com/users/woody77/followers", "following_url": "https://api.github.com/users/woody77/following{/other_user}", "gists_url": "https://api.github.com/users/woody77/gists{/gist_id}", "starred_url": "https://api.github.com/users/woody77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woody77/subscriptions", "organizations_url": "https://api.github.com/users/woody77/orgs", "repos_url": "https://api.github.com/users/woody77/repos", "events_url": "https://api.github.com/users/woody77/events{/privacy}", "received_events_url": "https://api.github.com/users/woody77/received_events", "type": "User", "site_admin": false}, "committer": {"login": "woody77", "id": 17480512, "node_id": "MDQ6VXNlcjE3NDgwNTEy", "avatar_url": "https://avatars.githubusercontent.com/u/17480512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woody77", "html_url": "https://github.com/woody77", "followers_url": "https://api.github.com/users/woody77/followers", "following_url": "https://api.github.com/users/woody77/following{/other_user}", "gists_url": "https://api.github.com/users/woody77/gists{/gist_id}", "starred_url": "https://api.github.com/users/woody77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woody77/subscriptions", "organizations_url": "https://api.github.com/users/woody77/orgs", "repos_url": "https://api.github.com/users/woody77/repos", "events_url": "https://api.github.com/users/woody77/events{/privacy}", "received_events_url": "https://api.github.com/users/woody77/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c26a785ad8e8ef857b903d3639beb623077933", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c26a785ad8e8ef857b903d3639beb623077933", "html_url": "https://github.com/rust-lang/rust/commit/74c26a785ad8e8ef857b903d3639beb623077933"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "1ab1221cba3d309ac0e28b3e68115e0d73c1e58a", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fbb09a73f1f541f69b8591c3c15b44df889d1bc/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbb09a73f1f541f69b8591c3c15b44df889d1bc/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=2fbb09a73f1f541f69b8591c3c15b44df889d1bc", "patch": "@@ -13,7 +13,7 @@ use crate::cfg_flag::CfgFlag;\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n     pub(crate) sysroot_src: Option<AbsPathBuf>,\n-    project_root: Option<AbsPathBuf>,\n+    project_root: AbsPathBuf,\n     crates: Vec<Crate>,\n }\n \n@@ -37,7 +37,7 @@ impl ProjectJson {\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n             sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n-            project_root: base.parent().map(AbsPath::to_path_buf),\n+            project_root: base.to_path_buf(),\n             crates: data\n                 .crates\n                 .into_iter()\n@@ -91,11 +91,8 @@ impl ProjectJson {\n     pub fn crates(&self) -> impl Iterator<Item = (CrateId, &Crate)> + '_ {\n         self.crates.iter().enumerate().map(|(idx, krate)| (CrateId(idx as u32), krate))\n     }\n-    pub fn path(&self) -> Option<&AbsPath> {\n-        match &self.project_root {\n-            Some(p) => Some(p.as_path()),\n-            None => None,\n-        }\n+    pub fn path(&self) -> &AbsPath {\n+        &self.project_root\n     }\n }\n "}, {"sha": "a052f36a71dbc9b3ade91036e2a1f8addd791060", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbb09a73f1f541f69b8591c3c15b44df889d1bc/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbb09a73f1f541f69b8591c3c15b44df889d1bc/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=2fbb09a73f1f541f69b8591c3c15b44df889d1bc", "patch": "@@ -249,7 +249,7 @@ impl GlobalState {\n                     // Enable flychecks for json projects if a custom flycheck command was supplied\n                     // in the workspace configuration.\n                     match config {\n-                        FlycheckConfig::CustomCommand { .. } => project.path(),\n+                        FlycheckConfig::CustomCommand { .. } => Some(project.path()),\n                         _ => None,\n                     }\n                 }"}]}