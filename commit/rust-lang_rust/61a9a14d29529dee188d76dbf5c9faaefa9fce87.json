{"sha": "61a9a14d29529dee188d76dbf5c9faaefa9fce87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTlhMTRkMjk1MjlkZWUxODhkNzZkYmY1YzlmYWFlZmE5ZmNlODc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-02-26T03:25:22Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-02-28T22:15:12Z"}, "message": "Add warning cycle.", "tree": {"sha": "cec5d4b58fe52015afc4e6b4988995b401214546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec5d4b58fe52015afc4e6b4988995b401214546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a9a14d29529dee188d76dbf5c9faaefa9fce87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a9a14d29529dee188d76dbf5c9faaefa9fce87", "html_url": "https://github.com/rust-lang/rust/commit/61a9a14d29529dee188d76dbf5c9faaefa9fce87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a9a14d29529dee188d76dbf5c9faaefa9fce87/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f822c800d6304466be666937539117d95a58022", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f822c800d6304466be666937539117d95a58022", "html_url": "https://github.com/rust-lang/rust/commit/7f822c800d6304466be666937539117d95a58022"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "b2f508ff26d6f46b888d183b32678eeefc3fdd95", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -236,6 +236,12 @@ declare_lint! {\n     \"detects use of struct constructors that would be invisible with new visibility rules\"\n }\n \n+declare_lint! {\n+    pub MISSING_FRAGMENT_SPECIFIER,\n+    Warn,\n+    \"detects missing fragment specifiers in unused `macro_rules!` patterns\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -286,6 +292,7 @@ impl LintPass for HardwiredLints {\n             LEGACY_DIRECTORY_OWNERSHIP,\n             LEGACY_IMPORTS,\n             LEGACY_CONSTRUCTOR_VISIBILITY,\n+            MISSING_FRAGMENT_SPECIFIER,\n             DEPRECATED\n         )\n     }"}, {"sha": "9619ba8472404bb70e0a1fffca1e620841dbe528", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -688,6 +688,14 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n         let krate = ecx.monotonic_expander().expand_crate(krate);\n \n+        let mut missing_fragment_specifiers: Vec<_> =\n+            ecx.parse_sess.missing_fragment_specifiers.borrow().iter().cloned().collect();\n+        missing_fragment_specifiers.sort();\n+        for span in missing_fragment_specifiers {\n+            let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n+            let msg = \"missing fragment specifier\".to_string();\n+            sess.add_lint(lint, ast::CRATE_NODE_ID, span, msg);\n+        }\n         if ecx.parse_sess.span_diagnostic.err_count() - ecx.resolve_err_count > err_count {\n             ecx.parse_sess.span_diagnostic.abort_if_errors();\n         }"}, {"sha": "b87edf548232492007482b4b2df53796e5f39554", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -247,6 +247,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n+            reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "6ab5123bc87b16b799aa6630843dfd08accd9af1", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -87,6 +87,7 @@ use parse::{Directory, ParseSess};\n use parse::parser::{PathStyle, Parser};\n use parse::token::{self, DocComment, Token, Nonterminal};\n use print::pprust;\n+use symbol::keywords;\n use tokenstream::TokenTree;\n use util::small_vector::SmallVector;\n \n@@ -201,22 +202,27 @@ pub enum NamedMatch {\n     MatchedNonterminal(Rc<Nonterminal>)\n }\n \n-fn nameize<I: Iterator<Item=Rc<NamedMatch>>>(ms: &[quoted::TokenTree], mut res: I)\n+fn nameize<I: Iterator<Item=Rc<NamedMatch>>>(sess: &ParseSess, ms: &[quoted::TokenTree], mut res: I)\n                                              -> NamedParseResult {\n     use self::quoted::TokenTree;\n \n-    fn n_rec<I: Iterator<Item=Rc<NamedMatch>>>(m: &TokenTree, mut res: &mut I,\n+    fn n_rec<I: Iterator<Item=Rc<NamedMatch>>>(sess: &ParseSess, m: &TokenTree, mut res: &mut I,\n              ret_val: &mut HashMap<Ident, Rc<NamedMatch>>)\n              -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => {\n                 for next_m in &seq.tts {\n-                    n_rec(next_m, res.by_ref(), ret_val)?\n+                    n_rec(sess, next_m, res.by_ref(), ret_val)?\n                 }\n             }\n             TokenTree::Delimited(_, ref delim) => {\n                 for next_m in &delim.tts {\n-                    n_rec(next_m, res.by_ref(), ret_val)?;\n+                    n_rec(sess, next_m, res.by_ref(), ret_val)?;\n+                }\n+            }\n+            TokenTree::MetaVarDecl(span, _, id) if id.name == keywords::Invalid.name() => {\n+                if sess.missing_fragment_specifiers.borrow_mut().remove(&span) {\n+                    return Err((span, \"missing fragment specifier\".to_string()));\n                 }\n             }\n             TokenTree::MetaVarDecl(sp, bind_name, _) => {\n@@ -237,7 +243,7 @@ fn nameize<I: Iterator<Item=Rc<NamedMatch>>>(ms: &[quoted::TokenTree], mut res:\n \n     let mut ret_val = HashMap::new();\n     for m in ms {\n-        match n_rec(m, res.by_ref(), &mut ret_val) {\n+        match n_rec(sess, m, res.by_ref(), &mut ret_val) {\n             Ok(_) => {},\n             Err((sp, msg)) => return Error(sp, msg),\n         }\n@@ -277,11 +283,13 @@ fn create_matches(len: usize) -> Vec<Vec<Rc<NamedMatch>>> {\n     (0..len).into_iter().map(|_| Vec::new()).collect()\n }\n \n-fn inner_parse_loop(cur_eis: &mut SmallVector<Box<MatcherPos>>,\n+fn inner_parse_loop(sess: &ParseSess,\n+                    cur_eis: &mut SmallVector<Box<MatcherPos>>,\n                     next_eis: &mut Vec<Box<MatcherPos>>,\n                     eof_eis: &mut SmallVector<Box<MatcherPos>>,\n                     bb_eis: &mut SmallVector<Box<MatcherPos>>,\n-                    token: &Token, span: &syntax_pos::Span) -> ParseResult<()> {\n+                    token: &Token,\n+                    span: &syntax_pos::Span) -> ParseResult<()> {\n     use self::quoted::TokenTree;\n \n     while let Some(mut ei) = cur_eis.pop() {\n@@ -375,6 +383,11 @@ fn inner_parse_loop(cur_eis: &mut SmallVector<Box<MatcherPos>>,\n                         top_elts: Tt(TokenTree::Sequence(sp, seq)),\n                     }));\n                 }\n+                TokenTree::MetaVarDecl(span, _, id) if id.name == keywords::Invalid.name() => {\n+                    if sess.missing_fragment_specifiers.borrow_mut().remove(&span) {\n+                        return Error(span, \"missing fragment specifier\".to_string());\n+                    }\n+                }\n                 TokenTree::MetaVarDecl(..) => {\n                     // Built-in nonterminals never start with these tokens,\n                     // so we can eliminate them from consideration.\n@@ -422,7 +435,7 @@ pub fn parse(sess: &ParseSess,\n         let mut eof_eis = SmallVector::new();\n         assert!(next_eis.is_empty());\n \n-        match inner_parse_loop(&mut cur_eis, &mut next_eis, &mut eof_eis, &mut bb_eis,\n+        match inner_parse_loop(sess, &mut cur_eis, &mut next_eis, &mut eof_eis, &mut bb_eis,\n                                &parser.token, &parser.span) {\n             Success(_) => {},\n             Failure(sp, tok) => return Failure(sp, tok),\n@@ -435,7 +448,8 @@ pub fn parse(sess: &ParseSess,\n         /* error messages here could be improved with links to orig. rules */\n         if token_name_eq(&parser.token, &token::Eof) {\n             if eof_eis.len() == 1 {\n-                return nameize(ms, eof_eis[0].matches.iter_mut().map(|mut dv| dv.pop().unwrap()));\n+                let matches = eof_eis[0].matches.iter_mut().map(|mut dv| dv.pop().unwrap());\n+                return nameize(sess, ms, matches);\n             } else if eof_eis.len() > 1 {\n                 return Error(parser.span, \"ambiguity: multiple successful parses\".to_string());\n             } else {"}, {"sha": "193c06707c7a6860a2bb794aa01946f2fcc94442", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -788,6 +788,7 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n                 // harmless\n                 Ok(true)\n             },\n+            \"\" => Ok(true), // keywords::Invalid\n             _ => Err((format!(\"invalid fragment specifier `{}`\", frag),\n                      \"valid fragment specifiers are `ident`, `block`, \\\n                       `stmt`, `expr`, `pat`, `ty`, `path`, `meta`, `tt` \\\n@@ -810,7 +811,7 @@ fn has_legal_fragment_specifier(tok: &quoted::TokenTree) -> Result<(), String> {\n fn is_legal_fragment_specifier(frag: &str) -> bool {\n     match frag {\n         \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" |\n-        \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" => true,\n+        \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"\" => true,\n         _ => false,\n     }\n }"}, {"sha": "530824b28348a175fcb7c07ea8af1bce7f8b4006", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -143,7 +143,8 @@ pub fn parse(input: &[tokenstream::TokenTree], expect_matchers: bool, sess: &Par\n                     },\n                     tree @ _ => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(start_sp),\n                 };\n-                sess.span_diagnostic.span_err(span, \"missing fragment specifier\");\n+                sess.missing_fragment_specifiers.borrow_mut().insert(span);\n+                result.push(TokenTree::MetaVarDecl(span, ident, keywords::Invalid.ident()));\n             }\n             _ => result.push(tree),\n         }"}, {"sha": "de8a87e3a2b3293c9531d75b6dc53b7fe1cf3833", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -1693,6 +1693,7 @@ mod tests {\n     use feature_gate::UnstableFeatures;\n     use parse::token;\n     use std::cell::RefCell;\n+    use std::collections::HashSet;\n     use std::io;\n     use std::rc::Rc;\n \n@@ -1704,6 +1705,7 @@ mod tests {\n             config: CrateConfig::new(),\n             included_mod_stack: RefCell::new(Vec::new()),\n             code_map: cm,\n+            missing_fragment_specifiers: RefCell::new(HashSet::new()),\n         }\n     }\n "}, {"sha": "6fec49b229abeeb315d37c608d7c033381619f7a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -46,6 +46,7 @@ pub struct ParseSess {\n     pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n+    pub missing_fragment_specifiers: RefCell<HashSet<Span>>,\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<PathBuf>>,\n     code_map: Rc<CodeMap>,\n@@ -66,6 +67,7 @@ impl ParseSess {\n             span_diagnostic: handler,\n             unstable_features: UnstableFeatures::from_environment(),\n             config: HashSet::new(),\n+            missing_fragment_specifiers: RefCell::new(HashSet::new()),\n             included_mod_stack: RefCell::new(vec![]),\n             code_map: code_map\n         }"}, {"sha": "0168ae7d910179ecf8a059ba923e25a7d8d4a13e", "filename": "src/test/compile-fail/issue-39404.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Ftest%2Fcompile-fail%2Fissue-39404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Ftest%2Fcompile-fail%2Fissue-39404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39404.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(missing_fragment_specifier)] //~ NOTE lint level defined here\n+\n+macro_rules! m { ($i) => {} }\n+//~^ ERROR missing fragment specifier\n+//~| WARN previously accepted\n+//~| NOTE issue #40107\n+\n+fn main() {}"}, {"sha": "6cca729e2c28683d53503754867207786c41e35e", "filename": "src/test/compile-fail/macro-match-nonterminal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Ftest%2Fcompile-fail%2Fmacro-match-nonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Ftest%2Fcompile-fail%2Fmacro-match-nonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-match-nonterminal.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-macro_rules! test { ($a, //~ ERROR missing fragment\n-                     $b) => (()); } //~ ERROR missing fragment\n+macro_rules! test { ($a, $b) => (()); } //~ ERROR missing fragment\n \n fn main() {\n     test!()"}, {"sha": "15d491719a6d58dd8edf2350edd32d3309d98fee", "filename": "src/test/parse-fail/issue-33569.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Ftest%2Fparse-fail%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a9a14d29529dee188d76dbf5c9faaefa9fce87/src%2Ftest%2Fparse-fail%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-33569.rs?ref=61a9a14d29529dee188d76dbf5c9faaefa9fce87", "patch": "@@ -16,3 +16,5 @@ macro_rules! foo {\n         $(x)(y) //~ ERROR expected `*` or `+`\n     }\n }\n+\n+foo!();"}]}