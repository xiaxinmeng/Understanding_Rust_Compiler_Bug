{"sha": "0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "node_id": "C_kwDOAAsO6NoAKDBiMmQ0OGU1YWYxMWNhMjA4NzhjY2I0NjNmY2ViYTJjMTgwYTZhNGE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-02T13:26:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-02T13:26:57Z"}, "message": "Rollup merge of #97420 - WaffleLapkin:no_oxford_casts_qqq, r=Mark-Simulacrum\n\nBe a little nicer with casts when formatting `fn` pointers\n\nThis removes a `fn(...) -> ...` -> `usize` -> `*const ()` -> `usize` cast. cc #95489.", "tree": {"sha": "2e9d036e397cf106d5dd888b09044a0f50304ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e9d036e397cf106d5dd888b09044a0f50304ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimLqhCRBK7hj4Ov3rIwAAxXkIAAWS92KPtaGQYURoiiXLlCXV\nMGJYtQG83pMAO2OKdkE3jzEryJrr/BIpgpdxjjwU8+7wuAGjWDeVIpJJ33icRN1v\nvLtEBcZ8gYTm7wRT6Q9z/k7ORK8+6olRfPMFhPv/e7OoWVobQXbKVH03u1j9qipD\nQnbTkUR/QI5/F8Hxl+kG04PssiqwFWDQobMi73vcQd0id6fhSdbRQA4YIZf5pUOL\nDxAXNbwYz44N4qTkHbbN2jOc21feREcU1xlU4XQupAUBSrTTpExGHoNvCYv7N4WZ\nAojbrKc32yWMiHdYG1SYr3a9plwWr8GNlK5nr7+F5h1B7zz3LUqDTrecXHCnsDQ=\n=aJpW\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e9d036e397cf106d5dd888b09044a0f50304ae1\nparent 9598b4b594c97dff66feb93522e22db500deea07\nparent ac5c15d6beec450db1d8116cf76c4c6b6e3b351f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654176417 +0200\ncommitter GitHub <noreply@github.com> 1654176417 +0200\n\nRollup merge of #97420 - WaffleLapkin:no_oxford_casts_qqq, r=Mark-Simulacrum\n\nBe a little nicer with casts when formatting `fn` pointers\n\nThis removes a `fn(...) -> ...` -> `usize` -> `*const ()` -> `usize` cast. cc #95489.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "html_url": "https://github.com/rust-lang/rust/commit/0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2d48e5af11ca20878ccb463fceba2c180a6a4a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9598b4b594c97dff66feb93522e22db500deea07", "url": "https://api.github.com/repos/rust-lang/rust/commits/9598b4b594c97dff66feb93522e22db500deea07", "html_url": "https://github.com/rust-lang/rust/commit/9598b4b594c97dff66feb93522e22db500deea07"}, {"sha": "ac5c15d6beec450db1d8116cf76c4c6b6e3b351f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5c15d6beec450db1d8116cf76c4c6b6e3b351f", "html_url": "https://github.com/rust-lang/rust/commit/ac5c15d6beec450db1d8116cf76c4c6b6e3b351f"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "63655ae8a240b70790d0478cdc857c92e617c47d", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0b2d48e5af11ca20878ccb463fceba2c180a6a4a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2d48e5af11ca20878ccb463fceba2c180a6a4a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "patch": "@@ -2233,35 +2233,41 @@ impl Display for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        /// Since the formatting will be identical for all pointer types, use a non-monomorphized\n-        /// implementation for the actual formatting to reduce the amount of codegen work needed\n-        fn inner(ptr: *const (), f: &mut Formatter<'_>) -> Result {\n-            let old_width = f.width;\n-            let old_flags = f.flags;\n-\n-            // The alternate flag is already treated by LowerHex as being special-\n-            // it denotes whether to prefix with 0x. We use it to work out whether\n-            // or not to zero extend, and then unconditionally set it to get the\n-            // prefix.\n-            if f.alternate() {\n-                f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n-\n-                if f.width.is_none() {\n-                    f.width = Some((usize::BITS / 4) as usize + 2);\n-                }\n-            }\n-            f.flags |= 1 << (FlagV1::Alternate as u32);\n+        // Cast is needed here because `.addr()` requires `T: Sized`.\n+        pointer_fmt_inner((*self as *const ()).addr(), f)\n+    }\n+}\n \n-            let ret = LowerHex::fmt(&(ptr.addr()), f);\n+/// Since the formatting will be identical for all pointer types, use a non-monomorphized\n+/// implementation for the actual formatting to reduce the amount of codegen work needed.\n+///\n+/// This uses `ptr_addr: usize` and not `ptr: *const ()` to be able to use this for\n+/// `fn(...) -> ...` without using [problematic] \"Oxford Casts\".\n+///\n+/// [problematic]: https://github.com/rust-lang/rust/issues/95489\n+pub(crate) fn pointer_fmt_inner(ptr_addr: usize, f: &mut Formatter<'_>) -> Result {\n+    let old_width = f.width;\n+    let old_flags = f.flags;\n \n-            f.width = old_width;\n-            f.flags = old_flags;\n+    // The alternate flag is already treated by LowerHex as being special-\n+    // it denotes whether to prefix with 0x. We use it to work out whether\n+    // or not to zero extend, and then unconditionally set it to get the\n+    // prefix.\n+    if f.alternate() {\n+        f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n \n-            ret\n+        if f.width.is_none() {\n+            f.width = Some((usize::BITS / 4) as usize + 2);\n         }\n-\n-        inner(*self as *const (), f)\n     }\n+    f.flags |= 1 << (FlagV1::Alternate as u32);\n+\n+    let ret = LowerHex::fmt(&ptr_addr, f);\n+\n+    f.width = old_width;\n+    f.flags = old_flags;\n+\n+    ret\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5b04ae7b07e69ecdc63ea76a6ac37dea5579659f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b2d48e5af11ca20878ccb463fceba2c180a6a4a/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2d48e5af11ca20878ccb463fceba2c180a6a4a/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=0b2d48e5af11ca20878ccb463fceba2c180a6a4a", "patch": "@@ -1878,24 +1878,14 @@ macro_rules! fnptr_impls_safety_abi {\n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                // HACK: The intermediate cast as usize is required for AVR\n-                // so that the address space of the source function pointer\n-                // is preserved in the final function pointer.\n-                //\n-                // https://github.com/avr-rust/rust/issues/143\n-                fmt::Pointer::fmt(&(*self as usize as *const ()), f)\n+                fmt::pointer_fmt_inner(*self as usize, f)\n             }\n         }\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                // HACK: The intermediate cast as usize is required for AVR\n-                // so that the address space of the source function pointer\n-                // is preserved in the final function pointer.\n-                //\n-                // https://github.com/avr-rust/rust/issues/143\n-                fmt::Pointer::fmt(&(*self as usize as *const ()), f)\n+                fmt::pointer_fmt_inner(*self as usize, f)\n             }\n         }\n     }"}]}