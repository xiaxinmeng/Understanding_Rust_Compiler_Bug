{"sha": "6c5397247856d49d89712f9d0c208c1981e9b72d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTM5NzI0Nzg1NmQ0OWQ4OTcxMmY5ZDBjMjA4YzE5ODFlOWI3MmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-29T10:55:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-30T17:30:10Z"}, "message": "rustc: turn mir::LocalDecl's visibility_source_info into a SourceScope.", "tree": {"sha": "387c6fb0da032c67bfe7b6a4182fe53fa40910b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/387c6fb0da032c67bfe7b6a4182fe53fa40910b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5397247856d49d89712f9d0c208c1981e9b72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5397247856d49d89712f9d0c208c1981e9b72d", "html_url": "https://github.com/rust-lang/rust/commit/6c5397247856d49d89712f9d0c208c1981e9b72d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5397247856d49d89712f9d0c208c1981e9b72d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da186b67fcfa01e3c719b3eb4edeb99d1d1aafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da186b67fcfa01e3c719b3eb4edeb99d1d1aafb", "html_url": "https://github.com/rust-lang/rust/commit/3da186b67fcfa01e3c719b3eb4edeb99d1d1aafb"}], "stats": {"total": 99, "additions": 44, "deletions": 55}, "files": [{"sha": "15240570a7ae224ade77cff6ba2558b615e2122f", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -26,7 +26,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     ty,\n     name,\n     syntactic_source_info,\n-    visibility_source_info,\n+    visibility_scope,\n     internal,\n     is_user_variable\n });"}, {"sha": "998af9ebcfe7dfd95a597045216e1addd120bf39", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -558,7 +558,7 @@ pub struct LocalDecl<'tcx> {\n     /// To allow both uses to work, we need to have more than a single scope\n     /// for a local. We have the `syntactic_source_info.scope` represent the\n     /// \"syntactic\" lint scope (with a variable being under its let\n-    /// block) while the `visibility_source_info.scope` represents the \"local variable\"\n+    /// block) while the `visibility_scope` represents the \"local variable\"\n     /// scope (where the \"rest\" of a block is under all prior let-statements).\n     ///\n     /// The end result looks like this:\n@@ -577,18 +577,18 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502\n     ///  \u2502 \u2502 \u2502{ let y: u32 }\n     ///  \u2502 \u2502 \u2502\n-    ///  \u2502 \u2502 \u2502\u2190 y.visibility_source_info.scope\n+    ///  \u2502 \u2502 \u2502\u2190 y.visibility_scope\n     ///  \u2502 \u2502 \u2502\u2190 `y + 2`\n     ///  \u2502\n     ///  \u2502 \u2502{ let x: u32 }\n-    ///  \u2502 \u2502\u2190 x.visibility_source_info.scope\n+    ///  \u2502 \u2502\u2190 x.visibility_scope\n     ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n     /// ```\n     pub syntactic_source_info: SourceInfo,\n \n-    /// Source info of the local. The `SourceScope` is the *visibility* one,\n-    /// not the the *syntactic* one (see `syntactic_source_info` for more details).\n-    pub visibility_source_info: SourceInfo,\n+    /// Source scope within which the local is visible (for debuginfo)\n+    /// (see `syntactic_source_info` for more details).\n+    pub visibility_scope: SourceScope,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -603,10 +603,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            visibility_source_info: SourceInfo {\n-                span,\n-                scope: OUTERMOST_SOURCE_SCOPE\n-            },\n+            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n             is_user_variable: false\n         }\n@@ -623,10 +620,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            visibility_source_info: SourceInfo {\n-                span,\n-                scope: OUTERMOST_SOURCE_SCOPE\n-            },\n+            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: true,\n             is_user_variable: false\n         }\n@@ -644,10 +638,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            visibility_source_info: SourceInfo {\n-                span,\n-                scope: OUTERMOST_SOURCE_SCOPE\n-            },\n+            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n             is_user_variable: false\n@@ -2201,7 +2192,7 @@ BraceStructTypeFoldableImpl! {\n         ty,\n         name,\n         syntactic_source_info,\n-        visibility_source_info,\n+        visibility_scope,\n     }\n }\n "}, {"sha": "6cd1271cccff099d857303c08a88d14824d56e7e", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -715,7 +715,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                     name: _,\n                     ref $($mutability)* syntactic_source_info,\n-                    ref $($mutability)* visibility_source_info,\n+                    ref $($mutability)* visibility_scope,\n                     internal: _,\n                     is_user_variable: _,\n                 } = *local_decl;\n@@ -725,7 +725,7 @@ macro_rules! make_mir_visitor {\n                     source_info: *syntactic_source_info,\n                 });\n                 self.visit_source_info(syntactic_source_info);\n-                self.visit_source_info(visibility_source_info);\n+                self.visit_source_scope(visibility_scope);\n             }\n \n             fn super_source_scope(&mut self,"}, {"sha": "9ced0f5f4eca13425a89369f90efa2dd6c68dd51", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -65,7 +65,7 @@ pub fn create_mir_scopes(cx: &CodegenCx, mir: &Mir, debug_context: &FunctionDebu\n     let mut has_variables = BitVector::new(mir.source_scopes.len());\n     for var in mir.vars_iter() {\n         let decl = &mir.local_decls[var];\n-        has_variables.insert(decl.visibility_source_info.scope.index());\n+        has_variables.insert(decl.visibility_scope.index());\n     }\n \n     // Instantiate all scopes."}, {"sha": "26680937d41d59d9466d6d01a84c89387fdd6184", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -265,7 +265,7 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n \n             if let Some(name) = decl.name {\n                 // User variable\n-                let debug_scope = fx.scopes[decl.visibility_source_info.scope];\n+                let debug_scope = fx.scopes[decl.visibility_scope];\n                 let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo;\n \n                 if !memory_locals.contains(local.index()) && !dbg {\n@@ -276,7 +276,10 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n                 debug!(\"alloc: {:?} ({}) -> place\", local, name);\n                 let place = PlaceRef::alloca(&bx, layout, &name.as_str());\n                 if dbg {\n-                    let (scope, span) = fx.debug_loc(decl.visibility_source_info);\n+                    let (scope, span) = fx.debug_loc(mir::SourceInfo {\n+                        span: decl.syntactic_source_info.span,\n+                        scope: decl.visibility_scope,\n+                    });\n                     declare_local(&bx, &fx.debug_context, name, layout.ty, scope,\n                         VariableAccess::DirectVariable { alloca: place.llval },\n                         VariableKind::LocalVariable, span);"}, {"sha": "9b5e266917b57bdc9a8486eb30eda48ca82df370", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -398,7 +398,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let borrow_span = self.mir.source_info(borrow.reserve_location).span;\n         let proper_span = match *root_place {\n-            Place::Local(local) => self.mir.local_decls[local].visibility_source_info.span,\n+            Place::Local(local) => self.mir.local_decls[local].syntactic_source_info.span,\n             _ => drop_span,\n         };\n "}, {"sha": "2c5d9156f2e04e5525d5eb7d2269733c33d846da", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -306,13 +306,13 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                 None => continue,\n             }\n \n-            let source_info = local_decl.visibility_source_info;\n-            let mut_span = tcx.sess.codemap().span_until_non_whitespace(source_info.span);\n+            let span = local_decl.syntactic_source_info.span;\n+            let mut_span = tcx.sess.codemap().span_until_non_whitespace(span);\n \n             tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n                 vsi[local_decl.syntactic_source_info.scope].lint_root,\n-                source_info.span,\n+                span,\n                 \"variable does not need to be mutable\"\n             )\n             .span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned())"}, {"sha": "10a0e4e127d2128a837d8f962082254bd9d4d341", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -67,7 +67,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                             None => {\n                                 err.span_label(\n-                                    mir.local_decls[local].visibility_source_info.span,\n+                                    mir.local_decls[local].syntactic_source_info.span,\n                                     \"borrow may end up in a temporary, created here\",\n                                 );\n "}, {"sha": "bad5b40d340d6261ee285e69828ad236494f5192", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -1201,7 +1201,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             LocalKind::Var | LocalKind::Temp => {}\n         }\n \n-        let span = local_decl.visibility_source_info.span;\n+        let span = local_decl.syntactic_source_info.span;\n         let ty = local_decl.ty;\n \n         // Erase the regions from `ty` to get a global type.  The"}, {"sha": "398c619c0b1a4419a86710691c48f2635ae83c65", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         ty: ptr_ty,\n                         name: None,\n                         syntactic_source_info: source_info,\n-                        visibility_source_info: source_info,\n+                        visibility_scope: source_info.scope,\n                         internal: true,\n                         is_user_variable: false\n                     });"}, {"sha": "91812da2534ef9ebaa9a1297d7eabbd96e101a44", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -324,11 +324,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 span,\n                 scope: syntactic_scope,\n             };\n-            let visibility_source_info = SourceInfo {\n-                span,\n-                scope: visibility_scope.unwrap()\n-            };\n-            this.declare_binding(syntactic_source_info, visibility_source_info, mutability, name, var,\n+            let visibility_scope = visibility_scope.unwrap();\n+            this.declare_binding(syntactic_source_info, visibility_scope, mutability, name, var,\n                                  ty, has_guard);\n         });\n         visibility_scope\n@@ -1118,24 +1115,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// in the arm body, which will have type `T`.\n     fn declare_binding(&mut self,\n                        syntactic_source_info: SourceInfo,\n-                       visibility_source_info: SourceInfo,\n+                       visibility_scope: SourceScope,\n                        mutability: Mutability,\n                        name: Name,\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>,\n                        has_guard: ArmHasGuard)\n     {\n-        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, visibility_source_info={:?}, \\\n+        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, visibility_scope={:?}, \\\n                 syntactic_source_info={:?})\",\n-               var_id, name, var_ty, visibility_source_info, syntactic_source_info);\n+               var_id, name, var_ty, visibility_scope, syntactic_source_info);\n \n         let tcx = self.hir.tcx();\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n             syntactic_source_info,\n-            visibility_source_info,\n+            visibility_scope,\n             internal: false,\n             is_user_variable: true,\n         };\n@@ -1147,7 +1144,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n                 name: Some(name),\n                 syntactic_source_info,\n-                visibility_source_info,\n+                visibility_scope,\n                 internal: false,\n                 is_user_variable: true,\n             });"}, {"sha": "ea3a6ae68e79aace48051b367130be4e8cf452a8", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 mutability: Mutability::Mut,\n                 ty,\n                 syntactic_source_info: source_info,\n-                visibility_source_info: source_info,\n+                visibility_scope: source_info.scope,\n                 name,\n                 internal: false,\n                 is_user_variable: false,"}, {"sha": "2c6828d7cf90817f54e2443f89be6e72b22235ef", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     fn gather_args(&mut self) {\n         for arg in self.mir.args_iter() {\n             let path = self.data.rev_lookup.locals[arg];\n-            let span = self.mir.local_decls[arg].visibility_source_info.span;\n+            let span = self.mir.local_decls[arg].syntactic_source_info.span;\n \n             let init = self.data.inits.push(Init {\n                 path, span, kind: InitKind::Deep"}, {"sha": "19967cc323f9a7070c2d66cf3af847633f6e201d", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -142,7 +142,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     LocalDecl {\n         mutability, ty, name: None,\n         syntactic_source_info: source_info,\n-        visibility_source_info: source_info,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false\n     }"}, {"sha": "d084d09971d46de126d461cbd443f4c897857888", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -301,7 +301,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         ty: ret_ty,\n         name: None,\n         syntactic_source_info: source_info,\n-        visibility_source_info: source_info,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -642,7 +642,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         ty: tcx.mk_nil(),\n         name: None,\n         syntactic_source_info: source_info,\n-        visibility_source_info: source_info,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -658,7 +658,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         }),\n         name: None,\n         syntactic_source_info: source_info,\n-        visibility_source_info: source_info,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n     };"}, {"sha": "cc1da268d68c176ef34c61d96361635db2648f0f", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -401,9 +401,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     local.syntactic_source_info.scope =\n                         scope_map[local.syntactic_source_info.scope];\n                     local.syntactic_source_info.span = callsite.location.span;\n-                    local.visibility_source_info.scope =\n-                        scope_map[local.visibility_source_info.scope];\n-                    local.visibility_source_info.span = callsite.location.span;\n+                    local.visibility_scope = scope_map[local.visibility_scope];\n \n                     let idx = caller_mir.local_decls.push(local);\n                     local_map.push(idx);"}, {"sha": "c61d5e268a990e11eb7a5ae2b186b1a7fb99ffef", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let no_stmts = self.source[loc.block].statements.len();\n         let new_temp = self.promoted.local_decls.push(\n             LocalDecl::new_temp(self.source.local_decls[temp].ty,\n-                                self.source.local_decls[temp].visibility_source_info.span));\n+                                self.source.local_decls[temp].syntactic_source_info.span));\n \n         debug!(\"promote({:?} @ {:?}/{:?}, {:?})\",\n                temp, loc, no_stmts, self.keep_original);\n@@ -335,7 +335,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             // otherwise we would use the `promoted` directly.\n                             let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n                             promoted_ref.syntactic_source_info = statement.source_info;\n-                            promoted_ref.visibility_source_info = statement.source_info;\n+                            promoted_ref.visibility_scope = statement.source_info.scope;\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n                             self.extra_statements.push((loc, Statement {"}, {"sha": "828d8fa60e8ba5174ac953cc725da25b0545c71c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5397247856d49d89712f9d0c208c1981e9b72d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6c5397247856d49d89712f9d0c208c1981e9b72d", "patch": "@@ -1046,7 +1046,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n                     if self.local_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n-                        Some(self.mir.local_decls[local].visibility_source_info.span)\n+                        Some(self.mir.local_decls[local].syntactic_source_info.span)\n                     } else {\n                         None\n                     }\n@@ -1102,7 +1102,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     let mut err = feature_err(\n                         &self.tcx.sess.parse_sess,\n                         \"const_let\",\n-                        decl.visibility_source_info.span,\n+                        decl.syntactic_source_info.span,\n                         GateIssue::Language,\n                         \"arguments of constant functions can only be immutable by-value bindings\"\n                     );"}]}