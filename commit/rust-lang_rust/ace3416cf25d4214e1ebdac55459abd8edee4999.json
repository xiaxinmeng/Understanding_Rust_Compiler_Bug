{"sha": "ace3416cf25d4214e1ebdac55459abd8edee4999", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZTM0MTZjZjI1ZDQyMTRlMWViZGFjNTU0NTlhYmQ4ZWRlZTQ5OTk=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-26T20:18:11Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-26T23:08:26Z"}, "message": "Write name and value for each env var", "tree": {"sha": "a9926318778fe1522305c3097a7cc2fee5c62389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9926318778fe1522305c3097a7cc2fee5c62389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ace3416cf25d4214e1ebdac55459abd8edee4999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ace3416cf25d4214e1ebdac55459abd8edee4999", "html_url": "https://github.com/rust-lang/rust/commit/ace3416cf25d4214e1ebdac55459abd8edee4999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ace3416cf25d4214e1ebdac55459abd8edee4999/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "631d5facba9ce75afafbc229c4e2a81e2058fede", "url": "https://api.github.com/repos/rust-lang/rust/commits/631d5facba9ce75afafbc229c4e2a81e2058fede", "html_url": "https://github.com/rust-lang/rust/commit/631d5facba9ce75afafbc229c4e2a81e2058fede"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "988ee61a0e355e33056882acf77a4b7d739e2ca9", "filename": "src/shims/env.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ace3416cf25d4214e1ebdac55459abd8edee4999/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3416cf25d4214e1ebdac55459abd8edee4999/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=ace3416cf25d4214e1ebdac55459abd8edee4999", "patch": "@@ -16,17 +16,19 @@ impl EnvVars {\n     ) {\n         if ecx.machine.communicate {\n             for (name, value) in std::env::vars() {\n-                let value = alloc_env_value(value.as_bytes(), ecx.memory_mut());\n-                ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n+                let var_ptr = alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n+                ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n             }\n         }\n     }\n }\n \n-fn alloc_env_value<'mir, 'tcx>(\n-    bytes: &[u8],\n+fn alloc_env_var<'mir, 'tcx>(\n+    name: &[u8],\n+    value: &[u8],\n     memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>,\n ) -> Pointer<Tag> {\n+    let bytes = [name, b\"=\", value].concat();\n     let tcx = {memory.tcx.tcx};\n     let length = bytes.len() as u64;\n     // `+1` for the null terminator.\n@@ -57,7 +59,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let name = this.memory().read_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n-            Some(&var) => Scalar::Ptr(var),\n+            Some(var_ptr) => Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?),\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n     }\n@@ -80,8 +82,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n         if let Some((name, value)) = new {\n-            let value_copy = alloc_env_value(&value, this.memory_mut());\n-            if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), value_copy) {\n+            let var_ptr = alloc_env_var(&name, &value, this.memory_mut());\n+            if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n                 this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             Ok(0)"}]}