{"sha": "4f9a5287bfea124b76571424ce3eb4a91aec337a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOWE1Mjg3YmZlYTEyNGI3NjU3MTQyNGNlM2ViNGE5MWFlYzMzN2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-09T18:53:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T18:53:27Z"}, "message": "Merge #7615\n\n7615: Add parsing benchmark r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cfe365b8382bfae9f8d0bfc9ebc9c35cc6e58307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe365b8382bfae9f8d0bfc9ebc9c35cc6e58307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f9a5287bfea124b76571424ce3eb4a91aec337a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgItonCRBK7hj4Ov3rIwAAdHIIAHkN8Ny/dTuoXjzi9wZbUy2d\nfk3goeY3phjUgAZOh5S2WvUrtda4V0Oq/ZSB9TgYBEkN/SfJexgjWm5EepZvuuNE\nQAfWua1UhXZQHVol3GtrGCQeVqLQ87mJv62t1XqMIrJVfGjHamRbPvqjN57qZ4lM\n/FN/xExKHwX7S7R7GzrU5AqdY8B+3FpPsKWBdIXth4/ZtXz+YQ+Pa7tN33CLmu7e\nLF2ceXo3nop4J+iJrI0UcJgrkTpGz2VUWHd5kgnHzfYjRKc2MgZaVtoMxxhCCxzE\n01fu/oIYl5KdnaPKjz01SLcGIJoiSEvxzz9fqLkatYgZq+dDk45p8AQnpcE57dg=\n=SgYQ\n-----END PGP SIGNATURE-----\n", "payload": "tree cfe365b8382bfae9f8d0bfc9ebc9c35cc6e58307\nparent 96a9ab725093b5f6501ed086973906ebb77805ff\nparent 61f15b72ac52c23148038b3867198597b345e2f6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612896807 +0000\ncommitter GitHub <noreply@github.com> 1612896807 +0000\n\nMerge #7615\n\n7615: Add parsing benchmark r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9a5287bfea124b76571424ce3eb4a91aec337a", "html_url": "https://github.com/rust-lang/rust/commit/4f9a5287bfea124b76571424ce3eb4a91aec337a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f9a5287bfea124b76571424ce3eb4a91aec337a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96a9ab725093b5f6501ed086973906ebb77805ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/96a9ab725093b5f6501ed086973906ebb77805ff", "html_url": "https://github.com/rust-lang/rust/commit/96a9ab725093b5f6501ed086973906ebb77805ff"}, {"sha": "61f15b72ac52c23148038b3867198597b345e2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f15b72ac52c23148038b3867198597b345e2f6", "html_url": "https://github.com/rust-lang/rust/commit/61f15b72ac52c23148038b3867198597b345e2f6"}], "stats": {"total": 8636, "additions": 8628, "deletions": 8}, "files": [{"sha": "7e900dfeb1eeb1040eae25390c66c3c4fc3155da", "filename": "bench_data/glorious_old_parser", "status": "added", "additions": 8562, "deletions": 0, "changes": 8562, "blob_url": "https://github.com/rust-lang/rust/blob/4f9a5287bfea124b76571424ce3eb4a91aec337a/bench_data%2Fglorious_old_parser", "raw_url": "https://github.com/rust-lang/rust/raw/4f9a5287bfea124b76571424ce3eb4a91aec337a/bench_data%2Fglorious_old_parser", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench_data%2Fglorious_old_parser?ref=4f9a5287bfea124b76571424ce3eb4a91aec337a"}, {"sha": "9d0cd1af5cdf0aaf416caabf45431d652f62dabe", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4f9a5287bfea124b76571424ce3eb4a91aec337a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9a5287bfea124b76571424ce3eb4a91aec337a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=4f9a5287bfea124b76571424ce3eb4a91aec337a", "patch": "@@ -1,7 +1,8 @@\n use expect_test::{expect_file, ExpectFile};\n+use ide_db::SymbolKind;\n use test_utils::{bench, bench_fixture, skip_slow_tests};\n \n-use crate::{fixture, FileRange, TextRange};\n+use crate::{fixture, FileRange, HlTag, TextRange};\n \n #[test]\n fn test_highlighting() {\n@@ -226,7 +227,7 @@ fn bar() {\n }\n \n #[test]\n-fn benchmark_syntax_highlighting() {\n+fn benchmark_syntax_highlighting_long_struct() {\n     if skip_slow_tests() {\n         return;\n     }\n@@ -235,10 +236,36 @@ fn benchmark_syntax_highlighting() {\n     let (analysis, file_id) = fixture::file(&fixture);\n \n     let hash = {\n-        let _pt = bench(\"syntax highlighting\");\n-        analysis.highlight(file_id).unwrap().len()\n+        let _pt = bench(\"syntax highlighting long struct\");\n+        analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n+            .count()\n     };\n-    assert_eq!(hash, 32009);\n+    assert_eq!(hash, 2001);\n+}\n+\n+#[test]\n+fn benchmark_syntax_highlighting_parser() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let fixture = bench_fixture::glorious_old_parser();\n+    let (analysis, file_id) = fixture::file(&fixture);\n+\n+    let hash = {\n+        let _pt = bench(\"syntax highlighting parser\");\n+        analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n+            .count()\n+    };\n+    assert_eq!(hash, 1629);\n }\n \n #[test]"}, {"sha": "b2c06e24fb55e4760b7aaaef7dc42847e554f1e5", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4f9a5287bfea124b76571424ce3eb4a91aec337a/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9a5287bfea124b76571424ce3eb4a91aec337a/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=4f9a5287bfea124b76571424ce3eb4a91aec337a", "patch": "@@ -4,11 +4,12 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n+use ast::NameOwner;\n use expect_test::expect_file;\n use rayon::prelude::*;\n-use test_utils::project_dir;\n+use test_utils::{bench, bench_fixture, project_dir, skip_slow_tests};\n \n-use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextSize, Token};\n+use crate::{ast, fuzz, tokenize, AstNode, SourceFile, SyntaxError, TextRange, TextSize, Token};\n \n #[test]\n fn lexer_tests() {\n@@ -41,6 +42,28 @@ fn main() {\n     assert!(parse.ok().is_ok());\n }\n \n+#[test]\n+fn benchmark_parser() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+    let data = bench_fixture::glorious_old_parser();\n+    let tree = {\n+        let _b = bench(\"parsing\");\n+        let p = SourceFile::parse(&data);\n+        assert!(p.errors.is_empty());\n+        assert_eq!(p.tree().syntax.text_range().len(), 352474.into());\n+        p.tree()\n+    };\n+\n+    {\n+        let _b = bench(\"tree traversal\");\n+        let fn_names =\n+            tree.syntax().descendants().filter_map(ast::Fn::cast).filter_map(|f| f.name()).count();\n+        assert_eq!(fn_names, 268);\n+    }\n+}\n+\n #[test]\n fn parser_tests() {\n     dir_tests(&test_data_dir(), &[\"parser/inline/ok\", \"parser/ok\"], \"rast\", |text, path| {\n@@ -128,7 +151,6 @@ fn reparse_fuzz_tests() {\n }\n \n /// Test that Rust-analyzer can parse and validate the rust-analyzer\n-/// FIXME: Use this as a benchmark\n #[test]\n fn self_hosting_parsing() {\n     let dir = project_dir().join(\"crates\");"}, {"sha": "aa1bea9bb77b823469423188ddaec5ede18d9c03", "filename": "crates/test_utils/src/bench_fixture.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f9a5287bfea124b76571424ce3eb4a91aec337a/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9a5287bfea124b76571424ce3eb4a91aec337a/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs?ref=4f9a5287bfea124b76571424ce3eb4a91aec337a", "patch": "@@ -1,7 +1,11 @@\n //! Generates large snippets of Rust code for usage in the benchmarks.\n \n+use std::fs;\n+\n use stdx::format_to;\n \n+use crate::project_dir;\n+\n pub fn big_struct() -> String {\n     let n = 1_000;\n \n@@ -26,3 +30,8 @@ struct S{} {{\n \n     buf\n }\n+\n+pub fn glorious_old_parser() -> String {\n+    let path = project_dir().join(\"bench_data/glorious_old_parser\");\n+    fs::read_to_string(&path).unwrap()\n+}"}]}