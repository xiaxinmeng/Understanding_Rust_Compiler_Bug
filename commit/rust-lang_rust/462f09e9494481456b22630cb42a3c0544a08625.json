{"sha": "462f09e9494481456b22630cb42a3c0544a08625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MmYwOWU5NDk0NDgxNDU2YjIyNjMwY2I0MmEzYzA1NDRhMDg2MjU=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-11-13T10:20:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-25T06:30:00Z"}, "message": "Add support for arbitrary flags to MemoryMap.\n\nThis also fixes up the documentation a bit, it was subtly incorrect.", "tree": {"sha": "bdec144db010ba71ef7381ea1a87ac3a0a82660f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdec144db010ba71ef7381ea1a87ac3a0a82660f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462f09e9494481456b22630cb42a3c0544a08625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462f09e9494481456b22630cb42a3c0544a08625", "html_url": "https://github.com/rust-lang/rust/commit/462f09e9494481456b22630cb42a3c0544a08625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462f09e9494481456b22630cb42a3c0544a08625/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de57a22b9a8c8416cace31c9bd3ec4c9a6888017", "url": "https://api.github.com/repos/rust-lang/rust/commits/de57a22b9a8c8416cace31c9bd3ec4c9a6888017", "html_url": "https://github.com/rust-lang/rust/commit/de57a22b9a8c8416cace31c9bd3ec4c9a6888017"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "cdf0c3b6442e607bf334c018ad417429901d0d9c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/462f09e9494481456b22630cb42a3c0544a08625/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462f09e9494481456b22630cb42a3c0544a08625/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=462f09e9494481456b22630cb42a3c0544a08625", "patch": "@@ -847,11 +847,11 @@ pub struct MemoryMap {\n \n /// Type of memory map\n pub enum MemoryMapKind {\n-    /// Memory-mapped file. On Windows, the inner pointer is a handle to the mapping, and\n-    /// corresponds to `CreateFileMapping`. Elsewhere, it is null.\n-    MapFile(*u8),\n     /// Virtual memory map. Usually used to change the permissions of a given chunk of memory.\n     /// Corresponds to `VirtualAlloc` on Windows.\n+    MapFile(*u8),\n+    /// Virtual memory map. Usually used to change the permissions of a given chunk of memory, or\n+    /// for allocation. Corresponds to `VirtualAlloc` on Windows.\n     MapVirtual\n }\n \n@@ -868,7 +868,11 @@ pub enum MapOption {\n     /// Create a memory mapping for a file with a given fd.\n     MapFd(c_int),\n     /// When using `MapFd`, the start of the map is `uint` bytes from the start of the file.\n-    MapOffset(uint)\n+    MapOffset(uint),\n+    /// On POSIX, this can be used to specify the default flags passed to `mmap`. By default it uses\n+    /// `MAP_PRIVATE` and, if not using `MapFd`, `MAP_ANON`. This will override both of those. This\n+    /// is platform-specific (the exact values used) and unused on Windows.\n+    MapNonStandardFlags(c_int),\n }\n \n /// Possible errors when creating a map.\n@@ -938,6 +942,7 @@ impl MemoryMap {\n         let mut flags = libc::MAP_PRIVATE;\n         let mut fd = -1;\n         let mut offset = 0;\n+        let mut custom_flags = false;\n         let len = round_up(min_len, page_size());\n \n         for &o in options.iter() {\n@@ -953,10 +958,11 @@ impl MemoryMap {\n                     flags |= libc::MAP_FILE;\n                     fd = fd_;\n                 },\n-                MapOffset(offset_) => { offset = offset_ as off_t; }\n+                MapOffset(offset_) => { offset = offset_ as off_t; },\n+                MapNonStandardFlags(f) => { custom_flags = true; flags = f },\n             }\n         }\n-        if fd == -1 { flags |= libc::MAP_ANON; }\n+        if fd == -1 && !custom_flags { flags |= libc::MAP_ANON; }\n \n         let r = unsafe {\n             libc::mmap(addr as *c_void, len as size_t, prot, flags, fd, offset)\n@@ -1027,7 +1033,9 @@ impl MemoryMap {\n                 MapExecutable => { executable = true; }\n                 MapAddr(addr_) => { lpAddress = addr_ as LPVOID; },\n                 MapFd(fd_) => { fd = fd_; },\n-                MapOffset(offset_) => { offset = offset_; }\n+                MapOffset(offset_) => { offset = offset_; },\n+                MapNonStandardFlags(f) => info!(\"MemoryMap::new: MapNonStandardFlags used on \\\n+                                                Windows: {}\", f),\n             }\n         }\n "}]}