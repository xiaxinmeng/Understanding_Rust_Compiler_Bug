{"sha": "8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "node_id": "C_kwDOAAsO6NoAKDhiOWY4ZTI1YmFjODBhZThmOWFjNmVlOWNiYjkwNTQwYWQzOTg3ODc", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-05-05T19:01:07Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-05-26T03:09:59Z"}, "message": "Disable unix::net::ancillary on BSD.", "tree": {"sha": "d77e8db840ed8a0c92a3394ef443ae2e6e506c65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77e8db840ed8a0c92a3394ef443ae2e6e506c65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "html_url": "https://github.com/rust-lang/rust/commit/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f80e454450c891c075617d23532c6eb317f4471d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f80e454450c891c075617d23532c6eb317f4471d", "html_url": "https://github.com/rust-lang/rust/commit/f80e454450c891c075617d23532c6eb317f4471d"}], "stats": {"total": 206, "additions": 33, "deletions": 173}, "files": [{"sha": "ecee123a9b628fbc2ac0b06aa1acdbcd2fd5631c", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "patch": "@@ -1,3 +1,5 @@\n+// FIXME: This is currently disabled on *BSD.\n+\n use super::{sockaddr_un, SocketAddr};\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::marker::PhantomData;"}, {"sha": "0b1d9b07132e555022387367c84f5bb09e3b4f53", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 14, "deletions": 59, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "patch": "@@ -1,24 +1,7 @@\n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n use super::{recv_vectored_with_ancillary_from, send_vectored_with_ancillary_to, SocketAncillary};\n use super::{sockaddr_un, SocketAddr};\n-#[cfg(any(\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n use crate::io::{IoSlice, IoSliceMut};\n use crate::net::Shutdown;\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n@@ -403,7 +386,8 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary, AncillaryData};\n     /// use std::io::IoSliceMut;\n@@ -433,15 +417,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn recv_vectored_with_ancillary_from(\n         &self,\n@@ -460,7 +436,8 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary, AncillaryData};\n     /// use std::io::IoSliceMut;\n@@ -490,15 +467,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn recv_vectored_with_ancillary(\n         &self,\n@@ -609,7 +578,8 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary};\n     /// use std::io::IoSlice;\n@@ -633,15 +603,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary_to<P: AsRef<Path>>(\n         &self,\n@@ -658,7 +620,8 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary};\n     /// use std::io::IoSlice;\n@@ -682,15 +645,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,"}, {"sha": "6da3e350bf12ff17eec50341dc849d382859c65d", "filename": "library/std/src/os/unix/net/mod.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs?ref=8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "patch": "@@ -1,27 +1,11 @@\n //! Unix-specific networking functionality.\n \n+#![allow(irrefutable_let_patterns)]\n #![stable(feature = \"unix_socket\", since = \"1.10.0\")]\n \n mod addr;\n-#[doc(cfg(any(\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-)))]\n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n mod ancillary;\n mod datagram;\n mod listener;\n@@ -31,16 +15,7 @@ mod tests;\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub use self::addr::*;\n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub use self::ancillary::*;\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]"}, {"sha": "2a5790e9d5c307ad1a586ba94a3eeb2a919e2d03", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "patch": "@@ -1,13 +1,4 @@\n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n use super::{recv_vectored_with_ancillary_from, send_vectored_with_ancillary_to, SocketAncillary};\n use super::{sockaddr_un, SocketAddr};\n use crate::fmt;\n@@ -511,7 +502,8 @@ impl UnixStream {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixStream, SocketAncillary, AncillaryData};\n     /// use std::io::IoSliceMut;\n@@ -541,15 +533,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn recv_vectored_with_ancillary(\n         &self,\n@@ -567,7 +551,8 @@ impl UnixStream {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixStream, SocketAncillary};\n     /// use std::io::IoSlice;\n@@ -591,15 +576,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,"}, {"sha": "e4499f9b6a6dca6531f8872c6b56a550320f0abf", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "patch": "@@ -1,24 +1,7 @@\n use super::*;\n use crate::io::prelude::*;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n-#[cfg(any(\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n-#[cfg(any(\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n use crate::os::unix::io::AsRawFd;\n use crate::sys_common::io::test::tmpdir;\n use crate::thread;\n@@ -618,15 +601,7 @@ fn test_unix_datagram_peek_from() {\n     assert_eq!(msg, &buf[..]);\n }\n \n-#[cfg(any(\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n fn test_send_vectored_fds_unix_stream() {\n     let (s1, s2) = or_panic!(UnixStream::pair());\n@@ -664,7 +639,7 @@ fn test_send_vectored_fds_unix_stream() {\n     }\n }\n \n-#[cfg(any(target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[test]\n fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     fn getpid() -> libc::pid_t {\n@@ -731,15 +706,7 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     }\n }\n \n-#[cfg(any(\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"linux\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n fn test_send_vectored_with_ancillary_unix_datagram() {\n     let dir = tmpdir();"}, {"sha": "a1bbc2d87b640919a89e6d5e4d41c3d2cf6318cb", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=8b9f8e25bac80ae8f9ac6ee9cbb90540ad398787", "patch": "@@ -289,15 +289,7 @@ impl Socket {\n         self.recv_from_with_flags(buf, 0)\n     }\n \n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n     pub fn recv_msg(&self, msg: &mut libc::msghdr) -> io::Result<usize> {\n         let n = cvt(unsafe { libc::recvmsg(self.as_raw_fd(), msg, libc::MSG_CMSG_CLOEXEC) })?;\n         Ok(n as usize)\n@@ -320,15 +312,7 @@ impl Socket {\n         self.0.is_write_vectored()\n     }\n \n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"linux\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-    ))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n     pub fn send_msg(&self, msg: &mut libc::msghdr) -> io::Result<usize> {\n         let n = cvt(unsafe { libc::sendmsg(self.as_raw_fd(), msg, 0) })?;\n         Ok(n as usize)"}]}