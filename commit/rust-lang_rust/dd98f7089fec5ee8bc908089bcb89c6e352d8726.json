{"sha": "dd98f7089fec5ee8bc908089bcb89c6e352d8726", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOThmNzA4OWZlYzVlZThiYzkwODA4OWJjYjg5YzZlMzUyZDg3MjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-03T01:10:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-06T03:19:33Z"}, "message": "Implement feature-gating for the compiler\n\nA few features are now hidden behind various #[feature(...)] directives. These\ninclude struct-like enum variants, glob imports, and macro_rules! invocations.\n\nCloses #9304\nCloses #9305\nCloses #9306\nCloses #9331", "tree": {"sha": "2cf633494514e1976e7e1131b994e2b7e6038a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf633494514e1976e7e1131b994e2b7e6038a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd98f7089fec5ee8bc908089bcb89c6e352d8726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd98f7089fec5ee8bc908089bcb89c6e352d8726", "html_url": "https://github.com/rust-lang/rust/commit/dd98f7089fec5ee8bc908089bcb89c6e352d8726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd98f7089fec5ee8bc908089bcb89c6e352d8726/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acf9783879dca0db0721c10ac79c9078f2dec425", "url": "https://api.github.com/repos/rust-lang/rust/commits/acf9783879dca0db0721c10ac79c9078f2dec425", "html_url": "https://github.com/rust-lang/rust/commit/acf9783879dca0db0721c10ac79c9078f2dec425"}], "stats": {"total": 320, "additions": 320, "deletions": 0}, "files": [{"sha": "e998f97869f7a8d778b96abd8f3770d2f54a8d98", "filename": "doc/rust.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -1833,6 +1833,58 @@ fn main() {\n > individual functions, structs, methods and enum variants, *not* to\n > entire modules, traits, impls or enums themselves.\n \n+### Compiler Features\n+\n+Certain aspects of Rust may be implemented in the compiler, but they're not\n+necessarily ready for every-day use. These features are often of \"prototype\n+quality\" or \"almost production ready\", but may not be stable enough to be\n+considered a full-fleged language feature.\n+\n+For this reason, rust recognizes a special crate-level attribute of the form:\n+\n+~~~ {.xfail-test}\n+#[feature(feature1, feature2, feature3)]\n+~~~\n+\n+This directive informs the compiler that the feature list: `feature1`,\n+`feature2`, and `feature3` should all be enabled. This is only recognized at a\n+crate-level, not at a module-level. Without this directive, all features are\n+considered off, and using the features will result in a compiler error.\n+\n+The currently implemented features of the compiler are:\n+\n+* `macro_rules` - The definition of new macros. This does not encompass\n+                  macro-invocation, that is always enabled by default, this only\n+                  covers the definition of new macros. There are currently\n+                  various problems with invoking macros, how they interact with\n+                  their environment, and possibly how they are used outside of\n+                  location in which they are defined. Macro definitions are\n+                  likely to change slightly in the future, so they are currently\n+                  hidden behind this feature.\n+\n+* `globs` - Importing everything in a module through `*`. This is currently a\n+            large source of bugs in name resolution for Rust, and it's not clear\n+            whether this will continue as a feature or not. For these reasons,\n+            the glob import statement has been hidden behind this feature flag.\n+\n+* `struct_variant` - Structural enum variants (those with named fields). It is\n+                     currently unknown whether this style of enum variant is as\n+                     fully supported as the tuple-forms, and it's not certain\n+                     that this style of variant should remain in the language.\n+                     For now this style of variant is hidden behind a feature\n+                     flag.\n+\n+If a feature is promoted to a language feature, then all existing programs will\n+start to receive compilation warnings about #[feature] directives which enabled\n+the new feature (because the directive is no longer necessary). However, if\n+a feature is decided to be removed from the language, errors will be issued (if\n+there isn't a parser error first). The directive in this case is no longer\n+necessary, and it's likely that existing code will break if the feature isn't\n+removed.\n+\n+If a unknown feature is found in a directive, it results in a compiler error. An\n+unknown feature is one which has never been recognized by the compiler.\n+\n # Statements and expressions\n \n Rust is _primarily_ an expression language. This means that most forms of"}, {"sha": "49ba38954b38683573b3e53f5c126bc6d3e058af", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -746,6 +746,10 @@ fn area(sh: Shape) -> f64 {\n }\n ~~~~\n \n+> ***Note:*** This feature of the compiler is currently gated behind the\n+> `#[feature(struct_variant)]` directive. More about these directives can be\n+> found in the manual.\n+\n ## Tuples\n \n Tuples in Rust behave exactly like structs, except that their fields\n@@ -2665,6 +2669,10 @@ use farm::*;\n # fn main() { cow(); chicken() }\n ~~~\n \n+> ***Note:*** This feature of the compiler is currently gated behind the\n+> `#[feature(globs)]` directive. More about these directives can be found in\n+> the manual.\n+\n However, that's not all. You can also rename an item while you're bringing it into scope:\n \n ~~~"}, {"sha": "45e4fe50f2561160a4778daf5f1c47b12795d2b5", "filename": "src/libextra/extra.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibextra%2Fextra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibextra%2Fextra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fextra.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -33,6 +33,8 @@ Rust extras are part of the standard Rust distribution.\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(macro_rules, globs)];\n+\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n "}, {"sha": "4dff3abda30cc57365fd2937a4eee650f0f1dbef", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -159,6 +159,8 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     *sess.building_library = session::building_library(sess.opts.crate_type,\n                                                        &crate, sess.opts.test);\n \n+    time(time_passes, ~\"gated feature checking\", (), |_|\n+         front::feature_gate::check_crate(sess, &crate));\n \n     // strip before expansion to allow macros to depend on\n     // configuration variables e.g/ in"}, {"sha": "5986409c84369b5cb42f927652e2dc2659f6ba15", "filename": "src/librustc/front/feature_gate.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -0,0 +1,176 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Feature gating\n+//!\n+//! This modules implements the gating necessary for preventing certain compiler\n+//! features from being used by default. This module will crawl a pre-expanded\n+//! AST to ensure that there are no features which are used that are not\n+//! enabled.\n+//!\n+//! Features are enabled in programs via the crate-level attributes of\n+//! #[feature(...)] with a comma-separated list of features.\n+\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use syntax::codemap::Span;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n+\n+use driver::session::Session;\n+\n+/// This is a list of all known features since the beginning of time. This list\n+/// can never shrink, it may only be expanded (in order to prevent old programs\n+/// from failing to compile). The status of each feature may change, however.\n+static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n+    (\"globs\", Active),\n+    (\"macro_rules\", Active),\n+    (\"struct_variant\", Active),\n+\n+    // These are used to test this portion of the compiler, they don't actually\n+    // mean anything\n+    (\"test_accepted_feature\", Accepted),\n+    (\"test_removed_feature\", Removed),\n+];\n+\n+enum Status {\n+    /// Represents an active feature that is currently being implemented or\n+    /// currently being considered for addition/removal.\n+    Active,\n+\n+    /// Represents a feature which has since been removed (it was once Active)\n+    Removed,\n+\n+    /// This language feature has since been Accepted (it was once Active)\n+    Accepted,\n+}\n+\n+struct Context {\n+    features: ~[&'static str],\n+    sess: Session,\n+}\n+\n+impl Context {\n+    fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n+        if !self.has_feature(feature) {\n+            self.sess.span_err(span, explain);\n+            self.sess.span_note(span, format!(\"add \\\\#[feature({})] to the \\\n+                                                  crate attributes to enable\",\n+                                                 feature));\n+        }\n+    }\n+\n+    fn has_feature(&self, feature: &str) -> bool {\n+        self.features.iter().any(|n| n.as_slice() == feature)\n+    }\n+}\n+\n+impl Visitor<()> for Context {\n+    fn visit_view_item(&mut self, i: &ast::view_item, _: ()) {\n+        match i.node {\n+            ast::view_item_use(ref paths) => {\n+                for path in paths.iter() {\n+                    match path.node {\n+                        ast::view_path_glob(*) => {\n+                            self.gate_feature(\"globs\", path.span,\n+                                              \"glob import statements are \\\n+                                               experimental and possibly buggy\");\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        visit::walk_view_item(self, i, ())\n+    }\n+\n+    fn visit_item(&mut self, i: @ast::item, _:()) {\n+        match i.node {\n+            ast::item_enum(ref def, _) => {\n+                for variant in def.variants.iter() {\n+                    match variant.node.kind {\n+                        ast::struct_variant_kind(*) => {\n+                            self.gate_feature(\"struct_variant\", variant.span,\n+                                              \"enum struct variants are \\\n+                                               experimental and possibly buggy\");\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+\n+            ast::item_mac(ref mac) => {\n+                match mac.node {\n+                    ast::mac_invoc_tt(ref path, _, _) => {\n+                        let rules = self.sess.ident_of(\"macro_rules\");\n+                        if path.segments.last().identifier == rules {\n+                            self.gate_feature(\"macro_rules\", i.span,\n+                                              \"macro definitions are not \\\n+                                               stable enough for use and are \\\n+                                               subject to change\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            _ => {}\n+        }\n+\n+        visit::walk_item(self, i, ());\n+    }\n+}\n+\n+pub fn check_crate(sess: Session, crate: &ast::Crate) {\n+    let mut cx = Context {\n+        features: ~[],\n+        sess: sess,\n+    };\n+\n+    for attr in crate.attrs.iter() {\n+        if \"feature\" != attr.name() { continue }\n+\n+        match attr.meta_item_list() {\n+            None => {\n+                sess.span_err(attr.span, \"malformed feature attribute, \\\n+                                          expected #[feature(...)]\");\n+            }\n+            Some(list) => {\n+                for &mi in list.iter() {\n+                    let name = match mi.node {\n+                        ast::MetaWord(word) => word,\n+                        _ => {\n+                            sess.span_err(mi.span, \"malformed feature, expected \\\n+                                                    just one word\");\n+                            continue\n+                        }\n+                    };\n+                    match KNOWN_FEATURES.iter().find(|& &(n, _)| n == name) {\n+                        Some(&(name, Active)) => { cx.features.push(name); }\n+                        Some(&(_, Removed)) => {\n+                            sess.span_err(mi.span, \"feature has been removed\");\n+                        }\n+                        Some(&(_, Accepted)) => {\n+                            sess.span_warn(mi.span, \"feature has added to rust, \\\n+                                                     directive not necessary\");\n+                        }\n+                        None => {\n+                            sess.span_err(mi.span, \"unknown feature\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    visit::walk_crate(&mut cx, crate, ());\n+\n+    sess.abort_if_errors();\n+}"}, {"sha": "a8a255669cab45bd3e27b874058e4fb2529090f7", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -17,6 +17,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(macro_rules, globs, struct_variant)];\n+\n // Rustc tasks always run on a fixed_stack_segment, so code in this\n // module can call C functions (in particular, LLVM functions) with\n // impunity.\n@@ -83,6 +85,7 @@ pub mod front {\n     pub mod test;\n     pub mod std_inject;\n     pub mod assign_node_ids;\n+    pub mod feature_gate;\n }\n \n pub mod back {"}, {"sha": "d72612256a75ad480553cf6c0fd29896d900409c", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -17,6 +17,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(globs, struct_variant)];\n+\n extern mod syntax;\n extern mod rustc;\n extern mod extra;"}, {"sha": "3775d175166f0324b579ba6a2cae5a8cca15f17e", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -66,6 +66,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(globs)];\n+\n extern mod extra;\n extern mod rustc;\n extern mod syntax;"}, {"sha": "cd4badfab3131e03436bce2cc8b4a636ba84a542", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -18,6 +18,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(globs)];\n+\n extern mod extra;\n extern mod rustc;\n extern mod syntax;"}, {"sha": "53837f965938ae509e0b610a166281c47805984b", "filename": "src/libstd/std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -61,6 +61,8 @@ they contained the following prologue:\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n+#[feature(macro_rules, globs)];\n+\n // Don't link to std. We are std.\n #[no_std];\n "}, {"sha": "1f385a00fa6d6491b0d31a9f284763b8c7fc8d14", "filename": "src/libsyntax/syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibsyntax%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Flibsyntax%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -20,6 +20,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(macro_rules, globs)];\n+\n extern mod extra;\n \n pub mod util {"}, {"sha": "0bf2d5ad78b1d30302eaed9bf50ec2f40cf757bd", "filename": "src/test/compile-fail/gated-bad-feature.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(\n+    foo_bar_baz,\n+    foo(bar),\n+    foo = \"baz\"\n+)];\n+//~^^^^ ERROR: unknown feature\n+//~^^^^ ERROR: malformed feature\n+//~^^^^ ERROR: malformed feature\n+\n+#[feature]; //~ ERROR: malformed feature\n+#[feature = \"foo\"]; //~ ERROR: malformed feature\n+\n+#[feature(test_removed_feature)]; //~ ERROR: feature has been removed\n+#[feature(test_accepted_feature)]; //~ WARNING: feature has added"}, {"sha": "cc7ba785e7e6589ffeee8e272df9e1864f4584d1", "filename": "src/test/compile-fail/gated-glob-imports.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::*;\n+//~^ ERROR: glob import statements are experimental\n+\n+fn main() {}"}, {"sha": "7f771c72416817a38fd5aa179b35efe07dc9c58a", "filename": "src/test/compile-fail/gated-macro-rules.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-macro-rules.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo(() => ())\n+//~^ ERROR: macro definitions are not stable enough for use\n+\n+fn main() {}"}, {"sha": "f1bd9362bb775d18e9d1945b5012b362a7450a66", "filename": "src/test/compile-fail/gated-struct-enums.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-struct-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd98f7089fec5ee8bc908089bcb89c6e352d8726/src%2Ftest%2Fcompile-fail%2Fgated-struct-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-struct-enums.rs?ref=dd98f7089fec5ee8bc908089bcb89c6e352d8726", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum A { B { foo: int } }\n+//~^ ERROR: enum struct variants are experimental\n+\n+fn main() {}\n+"}]}