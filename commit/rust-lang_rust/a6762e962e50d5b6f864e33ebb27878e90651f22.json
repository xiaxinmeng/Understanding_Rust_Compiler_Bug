{"sha": "a6762e962e50d5b6f864e33ebb27878e90651f22", "node_id": "C_kwDOAAsO6NoAKGE2NzYyZTk2MmU1MGQ1YjZmODY0ZTMzZWJiMjc4NzhlOTA2NTFmMjI", "commit": {"author": {"name": "Mahdi Dibaiee", "email": "mdibaiee@pm.me", "date": "2022-01-11T09:28:13Z"}, "committer": {"name": "Mahdi Dibaiee", "email": "mdibaiee@pm.me", "date": "2022-01-11T09:28:13Z"}, "message": "rustc_pass_by_value: allow types with no parameters on self\n\nincludes minor refactorings", "tree": {"sha": "9c9ac8a3c059c4d84f3407d16611e63123c41458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c9ac8a3c059c4d84f3407d16611e63123c41458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6762e962e50d5b6f864e33ebb27878e90651f22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYxDoXUzfgu5d8FXXuroRW98MWYoFAmHdTdcACgkQuroRW98M\nWYoL/Q//c+yuvkXMgkytxdBX/AH10KJAtQ2NRiHX7IfY64xQU+rscxqQbyIkf8AJ\nqXcNQzORwW1Ts+3dlNd4pjIJUDMdoQszvSwmFtJ8hYdEHa0vLF0dssQP4GPEtoUh\nA1ON3qA6r+xnMugAMIv3MbYGYtD78EJl+/oV0kvI3w8u6Gq3eqPdglxe88Z+GrbM\noGewWJDY05foVEEQSJmXVqbB7DupBzFzx/9E7JWXiQDVu+wrOR3MdzAYfbmjapwl\nOTtyijzzNHbXD64Seb7hL1kAWFAEk2bwKru8lkUCPUQgAgEsd5oZ5FDd8AQOu6bn\nc0WQZDUTx3jqavhcogpWiSEZ9qu2DqvhOJU7njIE03rgyMNSrXl8ELNvD36zs9gu\ncgGY2sEkzFvQIE+IXLmm4L7AJb1JcQuvW0hy3ifEPRlGarxnBxedb40gEXojfOHH\nJQ9ZHZfxVmcAB/q1SHQS1a25W0zzW9dxmjjJ7rNG/qvw0YQuCtWGMfNQJnfjb3BH\n81YMBKkS3wWdgnmGsNJJB9q/AvKwpzGZpNQjdXQUy7gg9TmanjMoq3vfYhhsZ42l\n0tpPwNgMqveXVK/RwtdijOsgksLyoYBDkKjv13Z2/zQ2i0wJ7v5qO0mnrmlUgnwD\n1TvD/asjoYKAXTz+lNFMm0tjTyNLCioYup0MXjKhIOOVjf1v1zs=\n=d1Ow\n-----END PGP SIGNATURE-----", "payload": "tree 9c9ac8a3c059c4d84f3407d16611e63123c41458\nparent 71e33146734362984258df415ac8308618968ed4\nauthor Mahdi Dibaiee <mdibaiee@pm.me> 1641893293 +0000\ncommitter Mahdi Dibaiee <mdibaiee@pm.me> 1641893293 +0000\n\nrustc_pass_by_value: allow types with no parameters on self\n\nincludes minor refactorings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6762e962e50d5b6f864e33ebb27878e90651f22", "html_url": "https://github.com/rust-lang/rust/commit/a6762e962e50d5b6f864e33ebb27878e90651f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6762e962e50d5b6f864e33ebb27878e90651f22/comments", "author": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71e33146734362984258df415ac8308618968ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/71e33146734362984258df415ac8308618968ed4", "html_url": "https://github.com/rust-lang/rust/commit/71e33146734362984258df415ac8308618968ed4"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "46817bc9c3f08ebba8105127544f250a0ed36b75", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6762e962e50d5b6f864e33ebb27878e90651f22/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6762e962e50d5b6f864e33ebb27878e90651f22/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=a6762e962e50d5b6f864e33ebb27878e90651f22", "patch": "@@ -625,7 +625,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     rustc_attr!(\n         rustc_pass_by_value, Normal,\n-        template!(Word, NameValueStr: \"reason\"), WarnFollowing,\n+        template!(Word), WarnFollowing,\n         \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n     ),\n     BuiltinAttribute {"}, {"sha": "00b023c26f3f32137c2da0bfa0206ae169388db2", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6762e962e50d5b6f864e33ebb27878e90651f22/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6762e962e50d5b6f864e33ebb27878e90651f22/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=a6762e962e50d5b6f864e33ebb27878e90651f22", "patch": "@@ -2,7 +2,6 @@ use crate::{LateContext, LateLintPass, LintContext};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericArg, PathSegment, QPath, TyKind};\n use rustc_middle::ty;\n use rustc_span::symbol::sym;\n@@ -50,15 +49,17 @@ impl<'tcx> LateLintPass<'tcx> for PassByValue {\n fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<String> {\n     if let TyKind::Path(QPath::Resolved(_, path)) = &ty.kind {\n         match path.res {\n-            Res::Def(_, def_id) if has_pass_by_value_attr(cx, def_id) => {\n+            Res::Def(_, def_id) if cx.tcx.has_attr(def_id, sym::rustc_pass_by_value) => {\n                 let name = cx.tcx.item_name(def_id).to_ident_string();\n                 return Some(format!(\"{}{}\", name, gen_args(path.segments.last().unwrap())));\n             }\n             Res::SelfTy(None, Some((did, _))) => {\n                 if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n-                    if has_pass_by_value_attr(cx, adt.did) {\n+                    if cx.tcx.has_attr(adt.did, sym::rustc_pass_by_value) {\n                         let name = cx.tcx.item_name(adt.did).to_ident_string();\n-                        return Some(format!(\"{}<{}>\", name, substs[0]));\n+                        let param =\n+                            substs.first().map(|s| format!(\"<{}>\", s)).unwrap_or(\"\".to_string());\n+                        return Some(format!(\"{}{}\", name, param));\n                     }\n                 }\n             }\n@@ -69,15 +70,6 @@ fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<Stri\n     None\n }\n \n-fn has_pass_by_value_attr(cx: &LateContext<'_>, def_id: DefId) -> bool {\n-    for attr in cx.tcx.get_attrs(def_id).iter() {\n-        if attr.has_name(sym::rustc_pass_by_value) {\n-            return true;\n-        }\n-    }\n-    false\n-}\n-\n fn gen_args(segment: &PathSegment<'_>) -> String {\n     if let Some(args) = &segment.args {\n         let lifetimes = args"}, {"sha": "1be01e21bd5f152bf1989fb4f612eeed949255bb", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a6762e962e50d5b6f864e33ebb27878e90651f22/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6762e962e50d5b6f864e33ebb27878e90651f22/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs?ref=a6762e962e50d5b6f864e33ebb27878e90651f22", "patch": "@@ -30,4 +30,11 @@ impl<'tcx> TyS<'tcx> {\n     fn by_ref(self: &Ty<'tcx>) {} //~ ERROR passing `Ty<'tcx>` by reference\n }\n \n+#[rustc_pass_by_value]\n+struct Foo;\n+\n+impl Foo {\n+    fn with_ref(&self) {} //~ ERROR passing `Foo` by reference\n+}\n+\n fn main() {}"}, {"sha": "965e79d962cdfd6e8e7066c889bcb442eeb81b3e", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6762e962e50d5b6f864e33ebb27878e90651f22/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6762e962e50d5b6f864e33ebb27878e90651f22/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr?ref=a6762e962e50d5b6f864e33ebb27878e90651f22", "patch": "@@ -16,5 +16,11 @@ error: passing `Ty<'tcx>` by reference\n LL |     fn by_ref(self: &Ty<'tcx>) {}\n    |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n \n-error: aborting due to 2 previous errors\n+error: passing `Foo` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:37:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `Foo`\n+\n+error: aborting due to 3 previous errors\n "}]}