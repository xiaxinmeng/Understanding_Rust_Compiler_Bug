{"sha": "a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d", "node_id": "C_kwDOAAsO6NoAKGE4MWQwZGMzY2Q3NjAzMjM2ZjE4MTQ1NmE5Y2M2YjBiYzI0ZDFlNGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-19T19:54:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-19T19:54:59Z"}, "message": "Rollup merge of #105902 - vincenzopalazzo:macros/pin_docs, r=eholk\n\ndocs: improve pin docs\n\nOverride https://github.com/rust-lang/rust/pull/104195 with a full cleanup of the git history, now it should be ready to be merged.\n\nr? ``@eholk``\n\n``@rustbot`` label +A-async-await", "tree": {"sha": "611a59217a9a9a9f80777708b78bb786d8f9e971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611a59217a9a9a9f80777708b78bb786d8f9e971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjoMGTCRBK7hj4Ov3rIwAAnzoIAK/uds0bx0u4jGpzjANiYhco\nXfyITXzgkW2WQpYEupg8ZC9emum7dE6Qmu12UfbhkjQKGPT+w+wDN658uf/qgPp2\nq8a6Q7Adi5bi49PP1syq8Zpic4+h0c8ZadJ73Jnn/JUgp3DKZPFGxMYIfTMyBqJk\nmy88NN0siCBzscN5FgOqcV9G5k6TJHzS6s7zlgO7R49TLMA+BUaUABIHZa01PR7O\nBuOI+CqMS+lK12QkBEzNBtw5VI1I6EwSQ1N7x6X7Gj+Le2UkgDYMFMShyaula9OZ\nY+9z0beEUJqDmFZRLwFXkQ3Z7XtJ4nKnvZ+oBCWVcRs9gC0ivnW/Ix/o4eHUGz8=\n=VqPI\n-----END PGP SIGNATURE-----\n", "payload": "tree 611a59217a9a9a9f80777708b78bb786d8f9e971\nparent f9bd7184e924f5a3558cbc3f05d2cd44fb17f801\nparent 7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671479699 +0100\ncommitter GitHub <noreply@github.com> 1671479699 +0100\n\nRollup merge of #105902 - vincenzopalazzo:macros/pin_docs, r=eholk\n\ndocs: improve pin docs\n\nOverride https://github.com/rust-lang/rust/pull/104195 with a full cleanup of the git history, now it should be ready to be merged.\n\nr? ``@eholk``\n\n``@rustbot`` label +A-async-await\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d", "html_url": "https://github.com/rust-lang/rust/commit/a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9bd7184e924f5a3558cbc3f05d2cd44fb17f801", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bd7184e924f5a3558cbc3f05d2cd44fb17f801", "html_url": "https://github.com/rust-lang/rust/commit/f9bd7184e924f5a3558cbc3f05d2cd44fb17f801"}, {"sha": "7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "html_url": "https://github.com/rust-lang/rust/commit/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "3f8acc8505ff10fa608f432fd466fd35d7d65f36", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=a81d0dc3cd7603236f181456a9cc6b0bc24d1e4d", "patch": "@@ -485,6 +485,16 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// Unlike `Pin::new_unchecked`, this method is safe because the pointer\n     /// `P` dereferences to an [`Unpin`] type, which cancels the pinning guarantees.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// // We can pin the value, since it doesn't care about being moved\n+    /// let mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// ```\n     #[inline(always)]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n@@ -496,8 +506,20 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n \n     /// Unwraps this `Pin<P>` returning the underlying pointer.\n     ///\n-    /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n+    /// This requires that the data inside this `Pin` implements [`Unpin`] so that we\n     /// can ignore the pinning invariants when unwrapping it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// let pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// // Unwrap the pin to get a reference to the value\n+    /// let r = Pin::into_inner(pinned);\n+    /// assert_eq!(*r, 5);\n+    /// ```\n     #[inline(always)]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n@@ -707,6 +729,18 @@ impl<P: DerefMut> Pin<P> {\n     ///\n     /// This overwrites pinned data, but that is okay: its destructor gets\n     /// run before being overwritten, so no pinning guarantee is violated.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// let mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// println!(\"{}\", pinned); // 5\n+    /// pinned.as_mut().set(10);\n+    /// println!(\"{}\", pinned); // 10\n+    /// ```\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn set(&mut self, value: P::Target)"}]}