{"sha": "51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMjI3YzFlOGFiZTFmNmNmNzk1N2NhMTBlOThmNThhMmU0ZmVmNWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2011-12-28T21:05:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2011-12-28T21:05:02Z"}, "message": "Merge pull request #1389 from erickt/master\n\nmisc standard library additions", "tree": {"sha": "e5cbaca869c51b7daea8a19b7bfb33a67a5201a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5cbaca869c51b7daea8a19b7bfb33a67a5201a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "html_url": "https://github.com/rust-lang/rust/commit/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9236fdf39f2cf38b9642768214c39ea1c9543628", "url": "https://api.github.com/repos/rust-lang/rust/commits/9236fdf39f2cf38b9642768214c39ea1c9543628", "html_url": "https://github.com/rust-lang/rust/commit/9236fdf39f2cf38b9642768214c39ea1c9543628"}, {"sha": "b6cecdd4de2824b3f07c2c7126300479037f0b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cecdd4de2824b3f07c2c7126300479037f0b3b", "html_url": "https://github.com/rust-lang/rust/commit/b6cecdd4de2824b3f07c2c7126300479037f0b3b"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "3b17fdb6f7c98f7b3e15779bb80bd7fade94bd4b", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "patch": "@@ -26,7 +26,7 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n     }\n     let fmt =\n         expr_to_str(cx, args[0],\n-                    \"first argument to #fmt must be a \" + \"string literal.\");\n+                    \"first argument to #fmt must be a string literal.\");\n     let fmtspan = args[0].span;\n     #debug(\"Format string:\");\n     log(debug, fmt);"}, {"sha": "a7cd9af35bc884c1287021f7333aa9db8aff1bf4", "filename": "src/libcore/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Flibcore%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Flibcore%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu64.rs?ref=51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "patch": "@@ -65,7 +65,7 @@ Convert to a string\n fn str(n: u64) -> str { ret to_str(n, 10u); }\n \n /*\n-Function: parse_buf\n+Function: from_str\n \n Parse a string as an unsigned integer.\n */"}, {"sha": "1928cd4b3d79ef754b54ed0d0ecbf3108456b69c", "filename": "src/libstd/io.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "patch": "@@ -242,6 +242,10 @@ fn new_byte_buf_reader(buf: [u8]) -> buf_reader {\n     ret byte_buf_reader(@{buf: buf, mutable pos: 0u});\n }\n \n+fn bytes_reader(bytes: [u8]) -> reader {\n+    ret new_reader(new_byte_buf_reader(bytes));\n+}\n+\n fn string_reader(s: str) -> reader {\n     ret new_reader(new_byte_buf_reader(str::bytes(s)));\n }\n@@ -256,15 +260,15 @@ type buf_writer =\n     // FIXME: eventually u64\n \n     obj {\n-        fn write([u8]);\n+        fn write([const u8]);\n         fn seek(int, seek_style);\n         fn tell() -> uint;\n         fn flush() -> int;\n         fn fsync(level: fsync::level) -> int;\n     };\n \n obj FILE_writer(f: os::libc::FILE, res: option::t<@FILE_res>) {\n-    fn write(v: [u8]) unsafe {\n+    fn write(v: [const u8]) unsafe {\n         let len = vec::len::<u8>(v);\n         let vbuf = vec::unsafe::to_ptr::<u8>(v);\n         let nout = os::libc::fwrite(vbuf, len, 1u, f);\n@@ -283,7 +287,7 @@ obj FILE_writer(f: os::libc::FILE, res: option::t<@FILE_res>) {\n resource fd_res(fd: fd_t) { os::libc::close(fd); }\n \n obj fd_buf_writer(fd: fd_t, res: option::t<@fd_res>) {\n-    fn write(v: [u8]) unsafe {\n+    fn write(v: [const u8]) unsafe {\n         let len = vec::len::<u8>(v);\n         let count = 0u;\n         let vbuf;\n@@ -351,7 +355,7 @@ type writer =\n         fn write_char(char);\n         fn write_int(int);\n         fn write_uint(uint);\n-        fn write_bytes([u8]);\n+        fn write_bytes([const u8]);\n         fn write_le_uint(uint, uint);\n         fn write_le_int(int, uint);\n         fn write_be_uint(uint, uint);\n@@ -384,7 +388,7 @@ obj new_writer(out: buf_writer) {\n     }\n     fn write_int(n: int) { out.write(str::bytes(int::to_str(n, 10u))); }\n     fn write_uint(n: uint) { out.write(str::bytes(uint::to_str(n, 10u))); }\n-    fn write_bytes(bytes: [u8]) { out.write(bytes); }\n+    fn write_bytes(bytes: [const u8]) { out.write(bytes); }\n     fn write_le_uint(n: uint, size: uint) {\n         out.write(uint_to_le_bytes(n, size));\n     }\n@@ -426,6 +430,12 @@ fn stderr() -> writer { ret new_writer(fd_buf_writer(2i32, option::none)); }\n fn print(s: str) { stdout().write_str(s); }\n fn println(s: str) { stdout().write_str(s + \"\\n\"); }\n \n+type bytes_writer =\n+    obj {\n+        fn get_writer() -> writer;\n+        fn get_bytes() -> [mutable u8];\n+    };\n+\n type str_writer =\n     obj {\n         fn get_writer() -> writer;\n@@ -435,7 +445,7 @@ type str_writer =\n type mutable_byte_buf = @{mutable buf: [mutable u8], mutable pos: uint};\n \n obj byte_buf_writer(buf: mutable_byte_buf) {\n-    fn write(v: [u8]) {\n+    fn write(v: [const u8]) {\n         // Fast path.\n \n         if buf.pos == vec::len(buf.buf) {\n@@ -466,17 +476,26 @@ obj byte_buf_writer(buf: mutable_byte_buf) {\n     fn fsync(_level: fsync::level) -> int { ret 0; }\n }\n \n-fn string_writer() -> str_writer {\n+fn bytes_writer() -> bytes_writer {\n     // FIXME: yikes, this is bad. Needs fixing of mutable syntax.\n \n     let b: [mutable u8] = [mutable 0u8];\n     vec::pop(b);\n-    let buf: mutable_byte_buf = @{mutable buf: b, mutable pos: 0u};\n-    obj str_writer_wrap(wr: writer, buf: mutable_byte_buf) {\n+    let buf = @{mutable buf: b, mutable pos: 0u};\n+    obj byte_buf_writer_wrap(wr: writer, buf: mutable_byte_buf) {\n         fn get_writer() -> writer { ret wr; }\n-        fn get_str() -> str { ret str::unsafe_from_bytes(buf.buf); }\n+        fn get_bytes() -> [mutable u8] { ret buf.buf; }\n+    }\n+    ret byte_buf_writer_wrap(new_writer(byte_buf_writer(buf)), buf);\n+}\n+\n+fn string_writer() -> str_writer {\n+    let writer = bytes_writer();\n+    obj str_writer_wrap(wr: bytes_writer) {\n+        fn get_writer() -> writer { wr.get_writer() }\n+        fn get_str() -> str { str::unsafe_from_bytes(wr.get_bytes()) }\n     }\n-    ret str_writer_wrap(new_writer(byte_buf_writer(buf)), buf);\n+    str_writer_wrap(writer)\n }\n \n "}, {"sha": "2d577a5fcf5e07441b7b19a244821267fa239321", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=51227c1e8abe1f6cf7957ca10e98f58a2e4fef5c", "patch": "@@ -39,6 +39,13 @@ type rng = obj {\n     Return a random string composed of A-Z, a-z, 0-9.\n     */\n     fn gen_str(len: uint) -> str;\n+\n+    /*\n+    Method: gen_bytes\n+\n+    Return a random byte string.\n+    */\n+    fn gen_bytes(len: uint) -> [u8];\n };\n \n resource rand_res(c: rustrt::rctx) { rustrt::rand_free(c); }\n@@ -74,6 +81,16 @@ fn mk_rng() -> rng {\n             }\n             s\n         }\n+        fn gen_bytes(len: uint) -> [u8] {\n+            let v = [];\n+            let i = 0u;\n+            while i < len {\n+                let n = rustrt::rand_next(**c) as uint;\n+                v += [(n % (u8::max_value as uint)) as u8];\n+                i += 1u;\n+            }\n+            v\n+        }\n     }\n     ret rt_rng(@rand_res(rustrt::rand_new()));\n }"}]}