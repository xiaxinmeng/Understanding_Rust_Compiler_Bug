{"sha": "44cb1c3adba18ae36441649f7264ecb834ea2502", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Y2IxYzNhZGJhMThhZTM2NDQxNjQ5ZjcyNjRlY2I4MzRlYTI1MDI=", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-08-03T04:36:27Z"}, "committer": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-08-03T04:36:27Z"}, "message": "Highlight sigils and operators in Vim.\n\nSigil highlighting isn't perfect (especially how it handles ``&``) but\nafter having used it for a week I feel it to be considerably nicer than\nnothing. As usual, if you don't like it, you can turn it off easily by\noverriding the default highlighting.\n\nGenerics are not handled specially; this means that for something like\n``S<T>``, the ``<`` and ``>`` are highlighted as operators. For myself,\nI like this, and there is no way to make it properly context aware\nwithout expanding the syntax matching enormously.\n\nAlso, special characters are highlighted properly in strings/chars, e.g.\n``\"\\x00\"`` or ``'\\Ufedcba98'`` appropriately.", "tree": {"sha": "e3bbab7fb870029244220489fc613607067db839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3bbab7fb870029244220489fc613607067db839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44cb1c3adba18ae36441649f7264ecb834ea2502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44cb1c3adba18ae36441649f7264ecb834ea2502", "html_url": "https://github.com/rust-lang/rust/commit/44cb1c3adba18ae36441649f7264ecb834ea2502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44cb1c3adba18ae36441649f7264ecb834ea2502/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd6eafeb4f734ef7883afadb4e50099430c76f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd6eafeb4f734ef7883afadb4e50099430c76f2", "html_url": "https://github.com/rust-lang/rust/commit/efd6eafeb4f734ef7883afadb4e50099430c76f2"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "580137b983e3fe31d405ac96503640bde6084d31", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/44cb1c3adba18ae36441649f7264ecb834ea2502/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/44cb1c3adba18ae36441649f7264ecb834ea2502/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=44cb1c3adba18ae36441649f7264ecb834ea2502", "patch": "@@ -3,7 +3,7 @@\n \" Maintainer:   Patrick Walton <pcwalton@mozilla.com>\n \" Maintainer:   Ben Blum <bblum@cs.cmu.edu>\n \" Maintainer:   Chris Morgan <me@chrismorgan.info>\n-\" Last Change:  2013 Jul 10\n+\" Last Change:  2013 Aug 1\n \n if version < 600\n   syntax clear\n@@ -17,7 +17,7 @@ syn keyword   rustOperator    as\n syn match     rustAssert      \"\\<assert\\(\\w\\)*!\" contained\n syn match     rustFail        \"\\<fail\\(\\w\\)*!\" contained\n syn keyword   rustKeyword     break copy do extern\n-syn keyword   rustKeyword     for if impl let log\n+syn keyword   rustKeyword     foreach in if impl let log\n syn keyword   rustKeyword     copy do extern\n syn keyword   rustKeyword     for impl let log\n syn keyword   rustKeyword     loop mod once priv pub\n@@ -83,12 +83,26 @@ syn match     rustModPathSep  \"::\"\n syn match     rustFuncCall    \"\\w\\(\\w\\)*(\"he=e-1,me=e-1\n syn match     rustFuncCall    \"\\w\\(\\w\\)*::<\"he=e-3,me=e-3 \" foo::<T>();\n \n+\" This is merely a convention; note also the use of [A-Z], restricting it to\n+\" latin identifiers rather than the full Unicode uppercase. I have not used\n+\" [:upper:] as it depends upon 'noignorecase'\n+\"syn match     rustCapsIdent    display \"[A-Z]\\w\\(\\w\\)*\"\n+\n+syn match     rustOperator     display \"\\%(+\\|-\\|/\\|*\\|=\\|\\^\\|&\\||\\|!\\|>\\|<\\|%\\)=\\?\"\n+\" This one isn't *quite* right, as we could have binary-& with a reference\n+syn match     rustSigil        display /&\\s\\+[&~@*][^)= \\t\\r\\n]/he=e-1,me=e-1\n+syn match     rustSigil        display /[&~@*][^)= \\t\\r\\n]/he=e-1,me=e-1\n+\" This isn't actually correct; a closure with no arguments can be `|| { }`.\n+\" Last, because the & in && isn't a sigil\n+syn match     rustOperator     display \"&&\\|||\"\n+\n syn match     rustMacro       '\\w\\(\\w\\)*!' contains=rustAssert,rustFail\n syn match     rustMacro       '#\\w\\(\\w\\)*' contains=rustAssert,rustFail\n \n syn match     rustFormat      display \"%\\(\\d\\+\\$\\)\\=[-+' #0*]*\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\(\\.\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\)\\=\\([hlLjzt]\\|ll\\|hh\\)\\=\\([aAbdiuoxXDOUfFeEgGcCsSpn?]\\|\\[\\^\\=.[^]]*\\]\\)\" contained\n syn match     rustFormat      display \"%%\" contained\n-syn region    rustString      start=+L\\=\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+ contains=rustTodo,rustFormat\n+syn match     rustSpecial     display contained /\\\\\\([nrt\\\\'\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)/\n+syn region    rustString      start=+L\\=\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+ contains=rustTodo,rustFormat,rustSpecial\n \n syn region    rustAttribute   start=\"#\\[\" end=\"\\]\" contains=rustString,rustDeriving\n syn region    rustDeriving    start=\"deriving(\" end=\")\" contained contains=rustTrait\n@@ -114,13 +128,13 @@ syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.[0-9_]\\+\\%([eE][+-]\\=[0-9\n syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.[0-9_]\\+\\%([eE][+-]\\=[0-9_]\\+\\)\\(f\\|f32\\|f64\\)\\>\"\n \n \" For the benefit of delimitMate\n-syn region rustLifetimeCandidate display start=/&'\\%(\\([^'\\\\]\\|\\\\\\(['nrt\\\\\\\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'\\)\\@!/ end=/[[:cntrl:][:space:][:punct:]]\\@=\\|$/ contains=rustLifetime\n+syn region rustLifetimeCandidate display start=/&'\\%(\\([^'\\\\]\\|\\\\\\(['nrt\\\\\\\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'\\)\\@!/ end=/[[:cntrl:][:space:][:punct:]]\\@=\\|$/ contains=rustSigil,rustLifetime\n syn region rustGenericRegion display start=/<\\%('\\|[^[cntrl:][:space:][:punct:]]\\)\\@=')\\S\\@=/ end=/>/ contains=rustGenericLifetimeCandidate\n-syn region rustGenericLifetimeCandidate display start=/\\%(<\\|,\\s*\\)\\@<='/ end=/[[:cntrl:][:space:][:punct:]]\\@=\\|$/ contains=rustLifetime\n+syn region rustGenericLifetimeCandidate display start=/\\%(<\\|,\\s*\\)\\@<='/ end=/[[:cntrl:][:space:][:punct:]]\\@=\\|$/ contains=rustSigil,rustLifetime\n \n \"rustLifetime must appear before rustCharacter, or chars will get the lifetime highlighting\n syn match     rustLifetime    display \"\\'\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\"\n-syn match   rustCharacter   \"'\\([^'\\\\]\\|\\\\\\(['nrt\\\\\\\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'\"\n+syn match   rustCharacter   /'\\([^'\\\\]\\|\\\\\\([nrt\\\\'\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'/ contains=rustSpecial\n \n syn region    rustCommentML   start=\"/\\*\" end=\"\\*/\" contains=rustTodo\n syn region    rustComment     start=\"//\" skip=\"\\\\$\" end=\"$\" contains=rustTodo keepend\n@@ -140,7 +154,9 @@ hi def link rustBinNumber       rustNumber\n hi def link rustIdentifierPrime rustIdentifier\n hi def link rustTrait           rustType\n \n+hi def link rustSigil         StorageClass\n hi def link rustFormat        Special\n+hi def link rustSpecial       Special\n hi def link rustString        String\n hi def link rustCharacter     Character\n hi def link rustNumber        Number\n@@ -152,6 +168,7 @@ hi def link rustOperator      Operator\n hi def link rustKeyword       Keyword\n hi def link rustConditional   Conditional\n hi def link rustIdentifier    Identifier\n+hi def link rustCapsIdent     rustIdentifier\n hi def link rustModPath       Include\n hi def link rustModPathSep    Delimiter\n hi def link rustFuncName      Function"}]}