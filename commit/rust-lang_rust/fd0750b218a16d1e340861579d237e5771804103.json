{"sha": "fd0750b218a16d1e340861579d237e5771804103", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMDc1MGIyMThhMTZkMWUzNDA4NjE1NzlkMjM3ZTU3NzE4MDQxMDM=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-10T02:19:32Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-10T02:19:32Z"}, "message": "Get object's captured typarams when querying for an object method's typarams in Trans.  Together with commit 982dcc29bf6cd41e967a0befe0c6195811cd6a55 this... Closes #138.", "tree": {"sha": "d28c7984d57bb1bcc5fd12ef07d7daf3b85c4269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28c7984d57bb1bcc5fd12ef07d7daf3b85c4269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0750b218a16d1e340861579d237e5771804103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0750b218a16d1e340861579d237e5771804103", "html_url": "https://github.com/rust-lang/rust/commit/fd0750b218a16d1e340861579d237e5771804103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0750b218a16d1e340861579d237e5771804103/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982dcc29bf6cd41e967a0befe0c6195811cd6a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/982dcc29bf6cd41e967a0befe0c6195811cd6a55", "html_url": "https://github.com/rust-lang/rust/commit/982dcc29bf6cd41e967a0befe0c6195811cd6a55"}], "stats": {"total": 94, "additions": 61, "deletions": 33}, "files": [{"sha": "cc8df00bec61753bd291bcdecc034fd6978aefe3", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 61, "deletions": 33, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/fd0750b218a16d1e340861579d237e5771804103/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fd0750b218a16d1e340861579d237e5771804103/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=fd0750b218a16d1e340861579d237e5771804103", "patch": "@@ -456,6 +456,15 @@ let trans_visitor\n     Il.Mem (fp_imm out_mem_disp, args_rty)\n   in\n \n+  let get_obj_box_from_calltup (args_cell:Il.cell) =\n+    let indirect_args =\n+      get_element_ptr args_cell Abi.calltup_elt_indirect_args\n+    in\n+      deref (ptr_cast\n+               (get_element_ptr indirect_args Abi.indirect_args_elt_closure)\n+               (Il.ScalarTy (Il.AddrTy (obj_closure_rty word_bits))))\n+  in\n+\n   let fp_to_args (fp:Il.cell) (args_rty:Il.referent_ty): Il.cell =\n     let (reg, _) = force_to_reg (Il.Cell fp) in\n     Il.Mem(based_imm reg out_mem_disp, args_rty)\n@@ -465,11 +474,43 @@ let trans_visitor\n       get_element_ptr ty_params param_idx\n   in\n \n-  let get_ty_params_of_frame (fp:Il.reg) (n_params:int) : Il.cell =\n-    let fn_ty = mk_simple_ty_fn [| |] in\n-    let fn_rty = call_args_referent_type cx n_params fn_ty None in\n-    let args_cell = Il.Mem (based_imm fp out_mem_disp, fn_rty) in\n-      get_element_ptr args_cell Abi.calltup_elt_ty_params\n+  let get_ty_params_of_frame\n+      (fnid:node_id)\n+      (fp:Il.reg)\n+      (n_ty_params:int)\n+      : Il.cell =\n+\n+        let fn_ty = mk_simple_ty_fn [| |] in\n+        let fn_rty =\n+          call_args_referent_type cx n_ty_params fn_ty (Some Il.OpaqueTy)\n+        in\n+        let args_cell = Il.Mem (based_imm fp out_mem_disp, fn_rty) in\n+\n+          if defn_id_is_obj_fn_or_drop cx fnid\n+          then\n+            (*\n+             * To get the typarams in an obj fn, we must go to the\n+             * implicit obj's captured type descriptor.\n+             *)\n+            let obj_box =\n+              get_obj_box_from_calltup args_cell\n+            in\n+            let obj = get_element_ptr obj_box Abi.box_rc_field_body in\n+            let tydesc = get_element_ptr obj Abi.obj_body_elt_tydesc in\n+            let ty_params_ty = Ast.TY_tup (make_tydesc_tys n_ty_params) in\n+            let ty_params_rty = referent_type word_bits ty_params_ty in\n+            let ty_params =\n+              get_element_ptr (deref tydesc) Abi.tydesc_field_first_param\n+            in\n+            let ty_params =\n+              ptr_cast ty_params (Il.ScalarTy (Il.AddrTy ty_params_rty))\n+            in\n+              deref ty_params\n+          else\n+            (*\n+             * Regular function --- typarams are right in the frame calltup.\n+             *)\n+            get_element_ptr args_cell Abi.calltup_elt_ty_params\n   in\n \n   let get_args_for_current_frame _ =\n@@ -516,34 +557,10 @@ let trans_visitor\n         Abi.iterator_args_elt_outer_frame_ptr\n   in\n \n-  let get_obj_for_current_frame _ =\n-    deref (ptr_cast\n-             (get_closure_for_current_frame ())\n-             (Il.ScalarTy (Il.AddrTy (obj_closure_rty word_bits))))\n-  in\n-\n   let get_ty_params_of_current_frame _ : Il.cell =\n-    let id = current_fn() in\n-    let n_ty_params = n_item_ty_params cx id in\n-      if defn_id_is_obj_fn_or_drop cx id\n-      then\n-        begin\n-          let obj_box = get_obj_for_current_frame() in\n-          let obj = get_element_ptr obj_box Abi.box_rc_field_body in\n-          let tydesc = get_element_ptr obj Abi.obj_body_elt_tydesc in\n-          let ty_params_ty = Ast.TY_tup (make_tydesc_tys n_ty_params) in\n-          let ty_params_rty = referent_type word_bits ty_params_ty in\n-          let ty_params =\n-            get_element_ptr (deref tydesc) Abi.tydesc_field_first_param\n-          in\n-          let ty_params =\n-            ptr_cast ty_params (Il.ScalarTy (Il.AddrTy ty_params_rty))\n-          in\n-            deref ty_params\n-        end\n-\n-      else\n-        get_ty_params_of_frame abi.Abi.abi_fp_reg n_ty_params\n+    let fnid = current_fn() in\n+    let n_ty_params = n_item_ty_params cx fnid in\n+      get_ty_params_of_frame fnid abi.Abi.abi_fp_reg n_ty_params\n   in\n \n   let get_ty_param_in_current_frame (param_idx:int) : Il.cell =\n@@ -4709,17 +4726,28 @@ let trans_visitor\n     let get_frame_glue glue inner =\n       get_mem_glue glue\n         begin\n+          (* `mem` here is a pointer to the frame we are marking, dropping,\n+             or relocing, etc. *)\n           fun mem ->\n             iter_frame_and_arg_slots cx fnid\n               begin\n                 fun key slot_id slot ->\n                   match htab_search cx.ctxt_slot_offsets slot_id with\n                       Some off when not (slot_is_obj_state cx slot_id) ->\n                         let referent_type = slot_id_referent_type slot_id in\n+                          (*\n+                           * This might look as though we're always taking the\n+                           * pointer-to-frame and giving it the type of the\n+                           * frame/arg of interest, but this is because our\n+                           * deref_off a few lines later takes the referent\n+                           * type of the given poiinter (`st`) as the referent\n+                           * type of the mem-offset-from-the-given-pointer\n+                           * that it returns.\n+                           *)\n                         let fp_cell = rty_ptr_at mem referent_type in\n                         let (fp, st) = force_to_reg (Il.Cell fp_cell) in\n                         let ty_params =\n-                          get_ty_params_of_frame fp n_ty_params\n+                          get_ty_params_of_frame fnid fp n_ty_params\n                         in\n                         let slot_cell =\n                           deref_off_sz ty_params (Il.Reg (fp,st)) off"}]}