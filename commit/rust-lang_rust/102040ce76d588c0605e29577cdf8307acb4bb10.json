{"sha": "102040ce76d588c0605e29577cdf8307acb4bb10", "node_id": "C_kwDOAAsO6NoAKDEwMjA0MGNlNzZkNTg4YzA2MDVlMjk1NzdjZGY4MzA3YWNiNGJiMTA", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-11-04T07:05:15Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-21T22:59:55Z"}, "message": "Retag as FnEntry on `drop_in_place`", "tree": {"sha": "cd6c29968b02bf15005e50980fa63c4e56dd4177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6c29968b02bf15005e50980fa63c4e56dd4177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/102040ce76d588c0605e29577cdf8307acb4bb10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/102040ce76d588c0605e29577cdf8307acb4bb10", "html_url": "https://github.com/rust-lang/rust/commit/102040ce76d588c0605e29577cdf8307acb4bb10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/102040ce76d588c0605e29577cdf8307acb4bb10/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49143814e145c711e9807fac6467c14090663796", "url": "https://api.github.com/repos/rust-lang/rust/commits/49143814e145c711e9807fac6467c14090663796", "html_url": "https://github.com/rust-lang/rust/commit/49143814e145c711e9807fac6467c14090663796"}], "stats": {"total": 195, "additions": 192, "deletions": 3}, "files": [{"sha": "aa89ff0038102c8d39922f5322491b17473a77f6", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -176,7 +176,33 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n     if ty.is_some() {\n         // The first argument (index 0), but add 1 for the return value.\n-        let dropee_ptr = Place::from(Local::new(1 + 0));\n+        let mut dropee_ptr = Place::from(Local::new(1 + 0));\n+        if tcx.sess.opts.unstable_opts.mir_emit_retag {\n+            // We want to treat the function argument as if it was passed by `&mut`. As such, we\n+            // generate\n+            // ```\n+            // temp = &mut *arg;\n+            // Retag(temp, FnEntry)\n+            // ```\n+            // It's important that we do this first, before anything that depends on `dropee_ptr`\n+            // has been put into the body.\n+            let reborrow = Rvalue::Ref(\n+                tcx.lifetimes.re_erased,\n+                BorrowKind::Mut { allow_two_phase_borrow: false },\n+                tcx.mk_place_deref(dropee_ptr),\n+            );\n+            let ref_ty = reborrow.ty(body.local_decls(), tcx);\n+            dropee_ptr = body.local_decls.push(LocalDecl::new(ref_ty, span)).into();\n+            let new_statements = [\n+                StatementKind::Assign(Box::new((dropee_ptr, reborrow))),\n+                StatementKind::Retag(RetagKind::FnEntry, Box::new(dropee_ptr)),\n+            ];\n+            for s in new_statements {\n+                body.basic_blocks_mut()[START_BLOCK]\n+                    .statements\n+                    .push(Statement { source_info, kind: s });\n+            }\n+        }\n         let patch = {\n             let param_env = tcx.param_env_reveal_all_normalized(def_id);\n             let mut elaborator ="}, {"sha": "f495f147be3df8682425b312beccef6bfc837248", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -3,11 +3,14 @@\n fn std::ptr::drop_in_place(_1: *mut Test) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     let mut _2: &mut Test;               // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+    let mut _3: &mut Test;               // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+    let mut _4: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n \n     bb0: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _3 = <Test as Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        Retag([fn entry] _2);            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _3 = &mut (*_2);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _4 = <Test as Drop>::drop(move _3) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'a> fn(&'a mut Test) {<Test as Drop>::drop}, val: Value(<ZST>) }"}, {"sha": "883361d05fc4d97a44d49d21174098b16f7c0b9a", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_protector.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.rs?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,27 @@\n+//! Test that drop_in_place retags the entire place,\n+//! invalidating all aliases to it.\n+\n+// A zero-sized drop type -- the retagging of `fn drop` itself won't\n+// do anything (since it is zero-sized); we are entirely relying on the retagging\n+// in `drop_in_place` here.\n+#[repr(transparent)]\n+struct HasDrop;\n+impl Drop for HasDrop {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let _val = *P;\n+            //~^ ERROR: /not granting access .* because that would remove .* which is protected/\n+        }\n+    }\n+}\n+\n+static mut P: *mut u8 = core::ptr::null_mut();\n+\n+fn main() {\n+    unsafe {\n+        let mut x = (HasDrop, 0u8);\n+        let x = core::ptr::addr_of_mut!(x);\n+        P = x.cast();\n+        core::ptr::drop_in_place(x);\n+    }\n+}"}, {"sha": "6d122ade4772729896106da33b971c7595982cc9", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_protector.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.stderr?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,33 @@\n+error: Undefined Behavior: not granting access to tag <TAG> because that would remove [Unique for <TAG>] which is protected because it is an argument of call ID\n+  --> $DIR/drop_in_place_protector.rs:LL:CC\n+   |\n+LL |             let _val = *P;\n+   |                        ^^ not granting access to tag <TAG> because that would remove [Unique for <TAG>] which is protected because it is an argument of call ID\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x1]\n+  --> $DIR/drop_in_place_protector.rs:LL:CC\n+   |\n+LL |         let x = core::ptr::addr_of_mut!(x);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> is this argument\n+  --> $DIR/drop_in_place_protector.rs:LL:CC\n+   |\n+LL |         core::ptr::drop_in_place(x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: BACKTRACE:\n+   = note: inside `<HasDrop as std::ops::Drop>::drop` at $DIR/drop_in_place_protector.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<HasDrop> - shim(Some(HasDrop))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<(HasDrop, u8)> - shim(Some((HasDrop, u8)))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+note: inside `main` at $DIR/drop_in_place_protector.rs:LL:CC\n+  --> $DIR/drop_in_place_protector.rs:LL:CC\n+   |\n+LL |         core::ptr::drop_in_place(x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `core::ptr::addr_of_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "4cb870f1d97d0aa2f067bfd6532aa4222748b972", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,19 @@\n+//! Test that drop_in_place mutably retags the entire place,\n+//! ensuring it is writeable\n+\n+//@error-pattern: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n+\n+#[repr(transparent)]\n+struct HasDrop;\n+\n+impl Drop for HasDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    unsafe {\n+        let x = (0u8, HasDrop);\n+        let x = core::ptr::addr_of!(x);\n+        core::ptr::drop_in_place(x.cast_mut());\n+    }\n+}"}, {"sha": "022b27d69b2c7814a32dcef268b6f16f4da0f021", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.stderr?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,29 @@\n+error: Undefined Behavior: trying to retag from <TAG> for Unique permission at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | trying to retag from <TAG> for Unique permission at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+   | this error occurs as part of FnEntry retag at ALLOC[0x0..0x1]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x1]\n+  --> $DIR/drop_in_place_retag.rs:LL:CC\n+   |\n+LL |         let x = core::ptr::addr_of!(x);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: BACKTRACE:\n+   = note: inside `std::ptr::drop_in_place::<(u8, HasDrop)> - shim(Some((u8, HasDrop)))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+note: inside `main` at $DIR/drop_in_place_retag.rs:LL:CC\n+  --> $DIR/drop_in_place_retag.rs:LL:CC\n+   |\n+LL |         core::ptr::drop_in_place(x.cast_mut());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `core::ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf3a558bb994adff00fd717b0891a915fbac5725", "filename": "src/tools/miri/tests/fail/unaligned_pointers/drop_in_place.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,25 @@\n+#[repr(transparent)]\n+struct HasDrop(u8);\n+\n+impl Drop for HasDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+#[repr(C, align(2))]\n+struct PartialDrop {\n+    a: HasDrop,\n+    b: u8,\n+}\n+\n+//@error-pattern: /alignment 2 is required/\n+fn main() {\n+    unsafe {\n+        // Create an unaligned pointer\n+        let mut x = [0_u16; 2];\n+        let p = core::ptr::addr_of_mut!(x).cast::<u8>();\n+        let p = p.add(1);\n+        let p = p.cast::<PartialDrop>();\n+\n+        core::ptr::drop_in_place(p);\n+    }\n+}"}, {"sha": "1081964987c07504c825383bdc31c28880ff6abb", "filename": "src/tools/miri/tests/fail/unaligned_pointers/drop_in_place.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.stderr?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n+  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE:\n+   = note: inside `std::ptr::drop_in_place::<PartialDrop> - shim(Some(PartialDrop))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+note: inside `main` at $DIR/drop_in_place.rs:LL:CC\n+  --> $DIR/drop_in_place.rs:LL:CC\n+   |\n+LL |         core::ptr::drop_in_place(p);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "aab070b69757c1f6d5ddb759c31087d1d5090e27", "filename": "src/tools/miri/tests/pass/drop_in_place_null.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_in_place_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_in_place_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_in_place_null.rs?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -0,0 +1,7 @@\n+// Make sure that dropping types with no drop glue is DB even for invalid pointers.\n+\n+fn main() {\n+    unsafe {\n+        core::ptr::drop_in_place::<u8>(core::ptr::null_mut());\n+    }\n+}"}]}