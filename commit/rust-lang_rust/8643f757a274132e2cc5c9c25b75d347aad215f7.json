{"sha": "8643f757a274132e2cc5c9c25b75d347aad215f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDNmNzU3YTI3NDEzMmUyY2M1YzljMjViNzVkMzQ3YWFkMjE1Zjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-09T00:52:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-09T01:10:48Z"}, "message": "rustc: Fix cross-crate reexports. #3908. r=pcwalton", "tree": {"sha": "4c60131ddc55154117346f9586dbefef50253034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c60131ddc55154117346f9586dbefef50253034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8643f757a274132e2cc5c9c25b75d347aad215f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8643f757a274132e2cc5c9c25b75d347aad215f7", "html_url": "https://github.com/rust-lang/rust/commit/8643f757a274132e2cc5c9c25b75d347aad215f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8643f757a274132e2cc5c9c25b75d347aad215f7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5718ba377fbc915618062d7562229a4eb754c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5718ba377fbc915618062d7562229a4eb754c9f", "html_url": "https://github.com/rust-lang/rust/commit/a5718ba377fbc915618062d7562229a4eb754c9f"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "f2387ec367b1ab41725415e15bd173bacd57d53f", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=8643f757a274132e2cc5c9c25b75d347aad215f7", "patch": "@@ -63,7 +63,10 @@ fn get_type_param_count(cstore: cstore::CStore, def: ast::def_id) -> uint {\n fn each_path(cstore: cstore::CStore, cnum: ast::crate_num,\n              f: fn(decoder::path_entry) -> bool) {\n     let crate_data = cstore::get_crate_data(cstore, cnum);\n-    decoder::each_path(cstore.intr, crate_data, f);\n+    let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n+        cstore::get_crate_data(cstore, cnum)\n+    };\n+    decoder::each_path(cstore.intr, crate_data, get_crate_data, f);\n }\n \n fn get_item_path(tcx: ty::ctxt, def: ast::def_id) -> ast_map::path {"}, {"sha": "911d0080449b8d22c71ce1ff32b38e7f89d8c674", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=8643f757a274132e2cc5c9c25b75d347aad215f7", "patch": "@@ -98,7 +98,11 @@ fn get_crate_vers(cstore: CStore, cnum: ast::crate_num) -> ~str {\n fn set_crate_data(cstore: CStore, cnum: ast::crate_num,\n                   data: crate_metadata) {\n     p(cstore).metas.insert(cnum, data);\n-    for vec::each(decoder::get_crate_module_paths(cstore.intr, data)) |dp| {\n+    let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n+        cstore::get_crate_data(cstore, cnum)\n+    };\n+    for vec::each(decoder::get_crate_module_paths(cstore.intr, data,\n+                                                  get_crate_data)) |dp| {\n         let (did, path) = *dp;\n         let d = {crate: cnum, node: did.node};\n         p(cstore).mod_path_map.insert(d, @path);"}, {"sha": "91648a948378cc197eb043cbd6e38b5319a17099", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8643f757a274132e2cc5c9c25b75d347aad215f7", "patch": "@@ -60,6 +60,7 @@ export item_type; // sketchy\n export maybe_get_item_ast;\n export decode_inlined_item;\n export method_info, _impl;\n+export GetCrateDataCb;\n \n // Used internally by astencode:\n export translate_def_id;\n@@ -88,6 +89,8 @@ fn lookup_hash(d: ebml::Doc, eq_fn: fn(x:&[u8]) -> bool, hash: uint) ->\n     None\n }\n \n+pub type GetCrateDataCb = &fn(ast::crate_num) -> cmd;\n+\n fn maybe_find_item(item_id: int, items: ebml::Doc) -> Option<ebml::Doc> {\n     fn eq_item(bytes: &[u8], item_id: int) -> bool {\n         return io::u64_from_be_bytes(vec::view(bytes, 0u, 4u), 0u, 4u) as int\n@@ -477,7 +480,9 @@ fn path_entry(path_string: ~str, def_like: def_like) -> path_entry {\n }\n \n /// Iterates over all the paths in the given crate.\n-fn each_path(intr: @ident_interner, cdata: cmd, f: fn(path_entry) -> bool) {\n+fn each_path(intr: @ident_interner, cdata: cmd,\n+             get_crate_data: GetCrateDataCb,\n+             f: fn(path_entry) -> bool) {\n     let root = ebml::Doc(cdata.data);\n     let items = ebml::get_doc(root, tag_items);\n     let items_data = ebml::get_doc(items, tag_items_data);\n@@ -526,8 +531,17 @@ fn each_path(intr: @ident_interner, cdata: cmd, f: fn(path_entry) -> bool) {\n                         reexport_path = path + ~\"::\" + reexport_name;\n                     }\n \n+                    // This reexport may be in yet another crate\n+                    let other_crates_items = if def_id.crate == cdata.cnum {\n+                        items\n+                    } else {\n+                        let crate_data = get_crate_data(def_id.crate);\n+                        let root = ebml::Doc(crate_data.data);\n+                        ebml::get_doc(root, tag_items)\n+                    };\n+\n                     // Get the item.\n-                    match maybe_find_item(def_id.node, items) {\n+                    match maybe_find_item(def_id.node, other_crates_items) {\n                         None => {}\n                         Some(item_doc) => {\n                             // Construct the def for this item.\n@@ -1079,9 +1093,10 @@ fn get_crate_vers(data: @~[u8]) -> ~str {\n     };\n }\n \n-fn iter_crate_items(intr: @ident_interner,\n-                    cdata: cmd, proc: fn(~str, ast::def_id)) {\n-    for each_path(intr, cdata) |path_entry| {\n+fn iter_crate_items(intr: @ident_interner, cdata: cmd,\n+                    get_crate_data: GetCrateDataCb,\n+                    proc: fn(~str, ast::def_id)) {\n+    for each_path(intr, cdata, get_crate_data) |path_entry| {\n         match path_entry.def_like {\n             dl_impl(*) | dl_field => {}\n             dl_def(def) => {\n@@ -1091,7 +1106,8 @@ fn iter_crate_items(intr: @ident_interner,\n     }\n }\n \n-fn get_crate_module_paths(intr: @ident_interner, cdata: cmd)\n+fn get_crate_module_paths(intr: @ident_interner, cdata: cmd,\n+                          get_crate_data: GetCrateDataCb)\n                                     -> ~[(ast::def_id, ~str)] {\n     fn mod_of_path(p: ~str) -> ~str {\n         str::connect(vec::init(str::split_str(p, ~\"::\")), ~\"::\")\n@@ -1101,7 +1117,7 @@ fn get_crate_module_paths(intr: @ident_interner, cdata: cmd)\n     // fowarded path due to renamed import or reexport\n     let mut res = ~[];\n     let mods = map::HashMap();\n-    do iter_crate_items(intr, cdata) |path, did| {\n+    do iter_crate_items(intr, cdata, get_crate_data) |path, did| {\n         let m = mod_of_path(path);\n         if str::is_not_empty(m) {\n             // if m has a sub-item, it must be a module"}, {"sha": "f509c15ab5f8df688bd94a8e8b79a3262e162922", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8643f757a274132e2cc5c9c25b75d347aad215f7", "patch": "@@ -2436,7 +2436,10 @@ fn gather_local_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n \n fn gather_external_rtcalls(ccx: @crate_ctxt) {\n     do cstore::iter_crate_data(ccx.sess.cstore) |_cnum, cmeta| {\n-        do decoder::each_path(ccx.sess.intr(), cmeta) |path| {\n+        let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n+            cstore::get_crate_data(ccx.sess.cstore, cnum)\n+        };\n+        do decoder::each_path(ccx.sess.intr(), cmeta, get_crate_data) |path| {\n             let pathname = path.path_string;\n             match path.def_like {\n               decoder::dl_def(d) => {"}, {"sha": "3b39daa1e32b902e4dbafeb8ed50ee83dc363ea4", "filename": "src/test/run-pass/pub-use-xcrate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Ftest%2Frun-pass%2Fpub-use-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643f757a274132e2cc5c9c25b75d347aad215f7/src%2Ftest%2Frun-pass%2Fpub-use-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpub-use-xcrate.rs?ref=8643f757a274132e2cc5c9c25b75d347aad215f7", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test Issue #3908\n // aux-build:pub_use_xcrate1.rs\n // aux-build:pub_use_xcrate2.rs\n "}]}