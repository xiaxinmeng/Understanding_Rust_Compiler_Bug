{"sha": "a8b957a0f86c1d7b6636caaad006a8f538a317dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Yjk1N2EwZjg2YzFkN2I2NjM2Y2FhYWQwMDZhOGY1MzhhMzE3ZGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-04T12:26:27Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-11T08:32:01Z"}, "message": "Add a dedicated `write_null` method", "tree": {"sha": "a721f1a81bf79c480b8169b7538ea5a5cc63ec0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a721f1a81bf79c480b8169b7538ea5a5cc63ec0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b957a0f86c1d7b6636caaad006a8f538a317dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAllkjQEACgkQpp+NIls6\n19lbPg//eC3XOOLLIcjw46V+RsQK2+/M5zBKM7WozQ674NtIu/nerPBGH86N4fRr\nsmqCgudXoDb740Pl/XJji79+bTvQL6YCR2NQ8/WgWbEZm688PPHjP1SuwBIMGBEV\nzRtQJ1xFylAj5fmu5+OZJ8hHYp3AIaGyzCroVsLQiAkkKiOSTJ7J9zh4ZsWsJIm+\nVcZenkD28r8mC7ZpAULaUzMA0kMZkmuL/apOpGA6YbBbMbjUK3mVw2i9I8CAQxtc\n+SlxERKKumTztYRvB3ykHzONhtqa5f3p/PXAqmGqi7qGuTB3BdwPDKwkOVLTQmvG\nkQxjpxAdvPHGqRwOQKeFqlSUaJLonbj9ixQgGXQPdoTdbiYask5TyInmCQRHB1as\nG/HOYvPGHAMwRPzeLrIWQXBMe8VXMJ5iSqEnRAxhqDS1n3gpbipirqUpuAGumsEp\nhpi6K5fbaJbsneeDNUK2JaV7/C15k31xAC5huxCjn92UrieQ05gVWhP3f0ixID5c\ny7HZwjjidNs/0iVH5nQHqMymkSevIryoWs/3Snchl6QUMt/6E7p3ARK1HMJf6UJ/\nX2NkJufI60010jcZGy8qTTrF4Ki/bWdnUshQXXOp8lAUtPz0tXbjqVcyksdP2BPa\nMjz2p7tZxELd9d8HWA5Wz7lZUhpdClSUeyr3PzSjpqVvmZQr0gE=\n=tM2K\n-----END PGP SIGNATURE-----", "payload": "tree a721f1a81bf79c480b8169b7538ea5a5cc63ec0d\nparent 2d52054fb28a81d351b09330496c749775790b63\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1499171187 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1499761921 +0200\n\nAdd a dedicated `write_null` method\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b957a0f86c1d7b6636caaad006a8f538a317dd", "html_url": "https://github.com/rust-lang/rust/commit/a8b957a0f86c1d7b6636caaad006a8f538a317dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b957a0f86c1d7b6636caaad006a8f538a317dd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d52054fb28a81d351b09330496c749775790b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d52054fb28a81d351b09330496c749775790b63", "html_url": "https://github.com/rust-lang/rust/commit/2d52054fb28a81d351b09330496c749775790b63"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "57c8b353bfb9b9ec06b7d0393e73b50c53d7f7b4", "filename": "src/eval_context.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8b957a0f86c1d7b6636caaad006a8f538a317dd/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b957a0f86c1d7b6636caaad006a8f538a317dd/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=a8b957a0f86c1d7b6636caaad006a8f538a317dd", "patch": "@@ -1079,6 +1079,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n+    pub(super) fn write_null(\n+        &mut self,\n+        dest: Lvalue<'tcx>,\n+        dest_ty: Ty<'tcx>,\n+    ) -> EvalResult<'tcx> {\n+        self.write_primval(dest, PrimVal::Bytes(0), dest_ty)\n+    }\n+\n     pub(super) fn write_primval(\n         &mut self,\n         dest: Lvalue<'tcx>,\n@@ -1696,12 +1704,12 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             // Second argument (argc): 0\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.types.isize;\n-            ecx.write_value(Value::ByVal(PrimVal::Bytes(0)), dest, ty)?;\n+            ecx.write_null(dest, ty)?;\n \n             // Third argument (argv): 0\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.mk_imm_ptr(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8));\n-            ecx.write_value(Value::ByVal(PrimVal::Bytes(0)), dest, ty)?;\n+            ecx.write_null(dest, ty)?;\n         } else {\n             ecx.push_stack_frame(\n                 main_instance,"}, {"sha": "77d0f962c9645466a53503d8d881de3b97c563d7", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8b957a0f86c1d7b6636caaad006a8f538a317dd/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b957a0f86c1d7b6636caaad006a8f538a317dd/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=a8b957a0f86c1d7b6636caaad006a8f538a317dd", "patch": "@@ -99,9 +99,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     Layout::RawNullablePointer { nndiscr, .. } => {\n-                        use value::PrimVal;\n                         if variant_index as u64 != nndiscr {\n-                            self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                            self.write_null(dest, dest_ty)?;\n                         }\n                     }\n "}, {"sha": "63ab17514b966836e6a68d95d016ed9694446493", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8b957a0f86c1d7b6636caaad006a8f538a317dd/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b957a0f86c1d7b6636caaad006a8f538a317dd/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=a8b957a0f86c1d7b6636caaad006a8f538a317dd", "patch": "@@ -652,7 +652,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"malloc\" => {\n                 let size = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 if size == 0 {\n-                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                    self.write_null(dest, dest_ty)?;\n                 } else {\n                     let align = self.memory.pointer_size();\n                     let ptr = self.memory.allocate(size, align)?;\n@@ -690,7 +690,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let f = args[0].read_ptr(&self.memory)?.to_ptr()?;\n                 let data = args[1].read_ptr(&self.memory)?;\n                 let f_instance = self.memory.get_fn(f)?;\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                self.write_null(dest, dest_ty)?;\n \n                 // Now we make a function call.  TODO: Consider making this re-usable?  EvalContext::step does sth. similar for the TLS dtors,\n                 // and of course eval_main.\n@@ -708,7 +708,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(arg_dest, data, u8_ptr_ty)?;\n \n                 // We ourselves return 0\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                self.write_null(dest, dest_ty)?;\n \n                 // Don't fall through\n                 return Ok(());\n@@ -746,7 +746,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let new_ptr = ptr.offset(num - idx as u64 - 1, self.memory.layout)?;\n                     self.write_primval(dest, new_ptr, dest_ty)?;\n                 } else {\n-                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                    self.write_null(dest, dest_ty)?;\n                 }\n             }\n \n@@ -758,7 +758,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let new_ptr = ptr.offset(idx as u64, self.memory.layout)?;\n                     self.write_primval(dest, new_ptr, dest_ty)?;\n                 } else {\n-                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                    self.write_null(dest, dest_ty)?;\n                 }\n             }\n \n@@ -789,7 +789,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     if let Some(var) = old {\n                         self.memory.deallocate(var, None)?;\n                     }\n-                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                    self.write_null(dest, dest_ty)?;\n                 } else {\n                     self.write_primval(dest, PrimVal::from_i128(-1), dest_ty)?;\n                 }\n@@ -816,7 +816,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     if let Some(var) = self.env_vars.insert(name.to_owned(), value_copy) {\n                         self.memory.deallocate(var, None)?;\n                     }\n-                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                    self.write_null(dest, dest_ty)?;\n                 } else {\n                     self.write_primval(dest, PrimVal::from_i128(-1), dest_ty)?;\n                 }\n@@ -897,14 +897,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_uint(key_ptr.to_ptr()?, key, key_size.bytes())?;\n \n                 // Return success (0)\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                self.write_null(dest, dest_ty)?;\n             }\n             \"pthread_key_delete\" => {\n                 // The conversion into TlsKey here is a little fishy, but should work as long as usize >= libc::pthread_key_t\n                 let key = self.value_to_primval(args[0], usize)?.to_u64()? as TlsKey;\n                 self.memory.delete_tls_key(key)?;\n                 // Return success (0)\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                self.write_null(dest, dest_ty)?;\n             }\n             \"pthread_getspecific\" => {\n                 // The conversion into TlsKey here is a little fishy, but should work as long as usize >= libc::pthread_key_t\n@@ -919,13 +919,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.store_tls(key, new_ptr)?;\n                 \n                 // Return success (0)\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                self.write_null(dest, dest_ty)?;\n             }\n \n             // Stub out all the other pthread calls to just return 0\n             link_name if link_name.starts_with(\"pthread_\") => {\n                 warn!(\"ignoring C ABI call: {}\", link_name);\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                self.write_null(dest, dest_ty)?;\n             },\n \n             _ => {"}]}