{"sha": "4faf63e472f1cd8721be6c498e4db97760665e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYWY2M2U0NzJmMWNkODcyMWJlNmM0OThlNGRiOTc3NjA2NjVlOTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T01:23:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:35:59Z"}, "message": "libstd: Remove all newtype enums from std and core.", "tree": {"sha": "ea5395eecce3e26c1d9f822852613211b4f3c5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea5395eecce3e26c1d9f822852613211b4f3c5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4faf63e472f1cd8721be6c498e4db97760665e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4faf63e472f1cd8721be6c498e4db97760665e90", "html_url": "https://github.com/rust-lang/rust/commit/4faf63e472f1cd8721be6c498e4db97760665e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4faf63e472f1cd8721be6c498e4db97760665e90/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48446d060bb35925af0e79fcd2554f83ee26ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48446d060bb35925af0e79fcd2554f83ee26ecd", "html_url": "https://github.com/rust-lang/rust/commit/e48446d060bb35925af0e79fcd2554f83ee26ecd"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "a0db2525441566e2ca6981bd346e703571230dda", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=4faf63e472f1cd8721be6c498e4db97760665e90", "patch": "@@ -151,7 +151,7 @@ struct AncestorNode {\n     mut ancestors:    AncestorList,\n }\n \n-enum AncestorList = Option<unstable::Exclusive<AncestorNode>>;\n+struct AncestorList(Option<unstable::Exclusive<AncestorNode>>);\n \n // Accessors for taskgroup arcs and ancestor arcs that wrap the unsafety.\n #[inline(always)]"}, {"sha": "5e5c843da26da610839984beb55cd40540b2999a", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=4faf63e472f1cd8721be6c498e4db97760665e90", "patch": "@@ -322,8 +322,7 @@ fn structdoc_from_struct(\n         fields: do struct_def.fields.map |field| {\n             match field.node.kind {\n                 ast::named_field(ident, _, _) => to_str(ident),\n-                ast::unnamed_field => fail!(\n-                    ~\"what is an unnamed struct field?\")\n+                ast::unnamed_field => ~\"(unnamed)\",\n             }\n         },\n         sig: None"}, {"sha": "d7d878fa192ddc1edc0a4b082ad5adaeecd06488", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=4faf63e472f1cd8721be6c498e4db97760665e90", "patch": "@@ -365,9 +365,11 @@ pub impl<T:Const + Owned> RWARC<T> {\n             let state = get_shared_mutable_state(&self.x);\n             do (*borrow_rwlock(state)).write_downgrade |write_mode| {\n                 check_poison(false, (*state).failed);\n-                blk(RWWriteMode((&mut (*state).data,\n-                                 write_mode,\n-                                 PoisonOnFail(&mut (*state).failed))))\n+                blk(RWWriteMode {\n+                    data: &mut (*state).data,\n+                    token: write_mode,\n+                    poison: PoisonOnFail(&mut (*state).failed)\n+                })\n             }\n         }\n     }\n@@ -376,7 +378,11 @@ pub impl<T:Const + Owned> RWARC<T> {\n     fn downgrade(&self, token: RWWriteMode/&a<T>) -> RWReadMode/&a<T> {\n         // The rwlock should assert that the token belongs to us for us.\n         let state = unsafe { get_shared_immutable_state(&self.x) };\n-        let RWWriteMode((data, t, _poison)) = token;\n+        let RWWriteMode {\n+            data: data,\n+            token: t,\n+            poison: _poison\n+        } = token;\n         // Let readers in\n         let new_token = (&state.lock).downgrade(t);\n         // Whatever region the input reference had, it will be safe to use\n@@ -386,7 +392,10 @@ pub impl<T:Const + Owned> RWARC<T> {\n         // Downgrade ensured the token belonged to us. Just a sanity check.\n         fail_unless!(ptr::ref_eq(&state.data, new_data));\n         // Produce new token\n-        RWReadMode((new_data, new_token))\n+        RWReadMode {\n+            data: new_data,\n+            token: new_token,\n+        }\n     }\n }\n \n@@ -398,19 +407,28 @@ fn borrow_rwlock<T:Const + Owned>(state: *const RWARCInner<T>) -> *RWlock {\n     unsafe { cast::transmute(&const (*state).lock) }\n }\n \n-// FIXME (#3154) ice with struct/&<T> prevents these from being structs.\n-\n /// The \"write permission\" token used for RWARC.write_downgrade().\n-pub enum RWWriteMode<T> =\n-    (&self/mut T, sync::RWlockWriteMode/&self, PoisonOnFail);\n+pub struct RWWriteMode<'self, T> {\n+    data: &'self mut T,\n+    token: sync::RWlockWriteMode<'self>,\n+    poison: PoisonOnFail,\n+}\n+\n /// The \"read permission\" token used for RWARC.write_downgrade().\n-pub enum RWReadMode<T> = (&self/T, sync::RWlockReadMode/&self);\n+pub struct RWReadMode<'self, T> {\n+    data: &'self T,\n+    token: sync::RWlockReadMode<'self>,\n+}\n \n pub impl<T:Const + Owned> RWWriteMode/&self<T> {\n     /// Access the pre-downgrade RWARC in write mode.\n     fn write<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n         match *self {\n-            RWWriteMode((ref data, ref token, _)) => {\n+            RWWriteMode {\n+                data: ref data,\n+                token: ref token,\n+                poison: _\n+            } => {\n                 do token.write {\n                     blk(&mut **data)\n                 }\n@@ -420,7 +438,11 @@ pub impl<T:Const + Owned> RWWriteMode/&self<T> {\n     /// Access the pre-downgrade RWARC in write mode with a condvar.\n     fn write_cond<U>(&self, blk: &fn(x: &x/mut T, c: &c/Condvar) -> U) -> U {\n         match *self {\n-            RWWriteMode((ref data, ref token, ref poison)) => {\n+            RWWriteMode {\n+                data: ref data,\n+                token: ref token,\n+                poison: ref poison\n+            } => {\n                 do token.write_cond |cond| {\n                     unsafe {\n                         let cvar = Condvar {\n@@ -440,7 +462,10 @@ pub impl<T:Const + Owned> RWReadMode/&self<T> {\n     /// Access the post-downgrade rwlock in read mode.\n     fn read<U>(&self, blk: &fn(x: &T) -> U) -> U {\n         match *self {\n-            RWReadMode((data, ref token)) => {\n+            RWReadMode {\n+                data: data,\n+                token: ref token\n+            } => {\n                 do token.read { blk(data) }\n             }\n         }"}, {"sha": "2190475d943b673cf27c2e2743320f2330d4dc50", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4faf63e472f1cd8721be6c498e4db97760665e90/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=4faf63e472f1cd8721be6c498e4db97760665e90", "patch": "@@ -79,8 +79,9 @@ struct SemInner<Q> {\n     // a condition variable attached, others should.\n     blocked:   Q\n }\n+\n #[doc(hidden)]\n-enum Sem<Q> = Exclusive<SemInner<Q>>;\n+struct Sem<Q>(Exclusive<SemInner<Q>>);\n \n #[doc(hidden)]\n fn new_sem<Q:Owned>(count: int, q: Q) -> Sem<Q> {"}]}