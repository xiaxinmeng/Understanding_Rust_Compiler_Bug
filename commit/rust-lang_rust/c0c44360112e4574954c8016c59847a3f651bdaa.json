{"sha": "c0c44360112e4574954c8016c59847a3f651bdaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzQ0MzYwMTEyZTQ1NzQ5NTRjODAxNmM1OTg0N2EzZjY1MWJkYWE=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-22T13:55:20Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-22T13:55:20Z"}, "message": "Remove a redundant macro\n\nTurn the macro into a function. Also remove unused 'span' argument.", "tree": {"sha": "69b2d2a240e5849437612f44179cd5eed59c922b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b2d2a240e5849437612f44179cd5eed59c922b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c44360112e4574954c8016c59847a3f651bdaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c44360112e4574954c8016c59847a3f651bdaa", "html_url": "https://github.com/rust-lang/rust/commit/c0c44360112e4574954c8016c59847a3f651bdaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c44360112e4574954c8016c59847a3f651bdaa/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "html_url": "https://github.com/rust-lang/rust/commit/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "e6c551ff4d41bb8b2373dfe53040237cb1a2ee24", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0c44360112e4574954c8016c59847a3f651bdaa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c44360112e4574954c8016c59847a3f651bdaa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c0c44360112e4574954c8016c59847a3f651bdaa", "patch": "@@ -517,21 +517,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {\n-                    macro_rules! report_function {\n-                        ($span:expr, $name:expr) => {\n-                            err.note(&format!(\n-                                \"`{}` is a function, perhaps you wish to call it\",\n-                                $name\n-                            ));\n-                        };\n+                    fn report_function<T: std::fmt::Display>(\n+                        err: &mut DiagnosticBuilder<'_>,\n+                        name: T,\n+                    ) {\n+                        err.note(\n+                            &format!(\"`{}` is a function, perhaps you wish to call it\", name,),\n+                        );\n                     }\n \n                     if let SelfSource::MethodCall(expr) = source {\n                         if let Ok(expr_string) = tcx.sess.source_map().span_to_snippet(expr.span) {\n-                            report_function!(expr.span, expr_string);\n+                            report_function(&mut err, expr_string);\n                         } else if let ExprKind::Path(QPath::Resolved(_, ref path)) = expr.kind {\n                             if let Some(segment) = path.segments.last() {\n-                                report_function!(expr.span, segment.ident);\n+                                report_function(&mut err, segment.ident);\n                             }\n                         }\n                     }"}]}