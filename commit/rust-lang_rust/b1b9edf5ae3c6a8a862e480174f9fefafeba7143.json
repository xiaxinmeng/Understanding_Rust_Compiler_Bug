{"sha": "b1b9edf5ae3c6a8a862e480174f9fefafeba7143", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjllZGY1YWUzYzZhOGE4NjJlNDgwMTc0ZjlmZWZhZmViYTcxNDM=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2018-02-02T01:18:33Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2018-02-02T01:29:19Z"}, "message": "This is what FileType on Windows should ideally be.", "tree": {"sha": "b948ae60cde2f5d5afc9595534e0d6dce6378946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b948ae60cde2f5d5afc9595534e0d6dce6378946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b9edf5ae3c6a8a862e480174f9fefafeba7143", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJac77yAAoJEN4E2eJ1WbyKfUQH/RHM5EyluKg51/xcFdkhsKgh\nwEUHNchFcoWGFpsDTbqG+2wpil3awfkr+rCadadVPLNLfwIKh+oO8M9lWDgDTwfn\nlqHWC7CAxTZJGyZR+6ImltYi0QgeZ7Nbnfq9iBRbjdzU9/QSbBvqC8N6cyTMG2m/\nH85Itf1JJM2A8WjIN4rDOklHxwnIgAkwJz6uo2+LXkkK9HkS0V8N7AMvMM0rFqDl\n0oScQ+ktZ0ZPVlpI9lnPo/DwayMr7raMNi35xRKoad11de8pggRgtXMQnHtn9QkV\nxoTuZC4AETzhZgHI1OA7S62xGuplyZ5JByDls4rF9t0rix5vjGXDD8RZQWtTG1w=\n=VtZE\n-----END PGP SIGNATURE-----", "payload": "tree b948ae60cde2f5d5afc9595534e0d6dce6378946\nparent 56733bc9f8302409a2b6110f422512923c878154\nauthor Peter Atashian <retep998@gmail.com> 1517534313 -0500\ncommitter Peter Atashian <retep998@gmail.com> 1517534959 -0500\n\nThis is what FileType on Windows should ideally be.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b9edf5ae3c6a8a862e480174f9fefafeba7143", "html_url": "https://github.com/rust-lang/rust/commit/b1b9edf5ae3c6a8a862e480174f9fefafeba7143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b9edf5ae3c6a8a862e480174f9fefafeba7143/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56733bc9f8302409a2b6110f422512923c878154", "url": "https://api.github.com/repos/rust-lang/rust/commits/56733bc9f8302409a2b6110f422512923c878154", "html_url": "https://github.com/rust-lang/rust/commit/56733bc9f8302409a2b6110f422512923c878154"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "001e7ceeb71831f0c2ab7e0248568a9f5839a6be", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b1b9edf5ae3c6a8a862e480174f9fefafeba7143/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b9edf5ae3c6a8a862e480174f9fefafeba7143/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=b1b9edf5ae3c6a8a862e480174f9fefafeba7143", "patch": "@@ -38,8 +38,9 @@ pub struct FileAttr {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum FileType {\n-    Dir, File, SymlinkFile, SymlinkDir, ReparsePoint, MountPoint,\n+pub struct FileType {\n+    attributes: c::DWORD,\n+    reparse_tag: c::DWORD,\n }\n \n pub struct ReadDir {\n@@ -516,30 +517,28 @@ impl FilePermissions {\n \n impl FileType {\n     fn new(attrs: c::DWORD, reparse_tag: c::DWORD) -> FileType {\n-        match (attrs & c::FILE_ATTRIBUTE_DIRECTORY != 0,\n-               attrs & c::FILE_ATTRIBUTE_REPARSE_POINT != 0,\n-               reparse_tag) {\n-            (false, false, _) => FileType::File,\n-            (true, false, _) => FileType::Dir,\n-            (false, true, c::IO_REPARSE_TAG_SYMLINK) => FileType::SymlinkFile,\n-            (true, true, c::IO_REPARSE_TAG_SYMLINK) => FileType::SymlinkDir,\n-            (true, true, c::IO_REPARSE_TAG_MOUNT_POINT) => FileType::MountPoint,\n-            (_, true, _) => FileType::ReparsePoint,\n-            // Note: if a _file_ has a reparse tag of the type IO_REPARSE_TAG_MOUNT_POINT it is\n-            // invalid, as junctions always have to be dirs. We set the filetype to ReparsePoint\n-            // to indicate it is something symlink-like, but not something you can follow.\n+        FileType {\n+            attributes: attrs,\n+            reparse_tag: reparse_tag,\n         }\n     }\n \n-    pub fn is_dir(&self) -> bool { *self == FileType::Dir }\n-    pub fn is_file(&self) -> bool { *self == FileType::File }\n+    pub fn is_dir(&self) -> bool {\n+        self.attributes & c::FILE_ATTRIBUTE_DIRECTORY != 0\n+    }\n+    pub fn is_file(&self) -> bool {\n+        self.attributes & c::FILE_ATTRIBUTE_DIRECTORY == 0\n+    }\n     pub fn is_symlink(&self) -> bool {\n-        *self == FileType::SymlinkFile ||\n-        *self == FileType::SymlinkDir ||\n-        *self == FileType::MountPoint\n+        self.is_reparse_point() && (\n+            self.reparse_tag == c::IO_REPARSE_TAG_SYMLINK ||\n+            self.reparse_tag == c::IO_REPARSE_TAG_MOUNT_POINT)\n     }\n     pub fn is_symlink_dir(&self) -> bool {\n-        *self == FileType::SymlinkDir || *self == FileType::MountPoint\n+        self.is_symlink() && self.is_dir()\n+    }\n+    pub fn is_reparse_point(&self) -> bool {\n+        self.attributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0\n     }\n }\n "}]}