{"sha": "81b3e6d124db18cd6015b7d763addfd63e0bd54a", "node_id": "C_kwDOAAsO6NoAKDgxYjNlNmQxMjRkYjE4Y2Q2MDE1YjdkNzYzYWRkZmQ2M2UwYmQ1NGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T16:39:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T16:39:43Z"}, "message": "Auto merge of #12178 - jonas-schievink:fix-tt-conv-panic, r=jonas-schievink\n\nfix: Fix panic when a macro passes a float token to another macro\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12170 (num-traits no longer causes a panic)", "tree": {"sha": "0b4385630902704ee41b3c5be241fd7f4fb2bf65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b4385630902704ee41b3c5be241fd7f4fb2bf65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b3e6d124db18cd6015b7d763addfd63e0bd54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b3e6d124db18cd6015b7d763addfd63e0bd54a", "html_url": "https://github.com/rust-lang/rust/commit/81b3e6d124db18cd6015b7d763addfd63e0bd54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b3e6d124db18cd6015b7d763addfd63e0bd54a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "505f2d97b8406a5c4a9b8a8a0a8ddafe6ddd4c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/505f2d97b8406a5c4a9b8a8a0a8ddafe6ddd4c81", "html_url": "https://github.com/rust-lang/rust/commit/505f2d97b8406a5c4a9b8a8a0a8ddafe6ddd4c81"}, {"sha": "43a066c5a87972b5e42ad41bab56861661c49b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a066c5a87972b5e42ad41bab56861661c49b18", "html_url": "https://github.com/rust-lang/rust/commit/43a066c5a87972b5e42ad41bab56861661c49b18"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "9e4ab043f6cebd2cd92386a887b8abc0f072f164", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/81b3e6d124db18cd6015b7d763addfd63e0bd54a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3e6d124db18cd6015b7d763addfd63e0bd54a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=81b3e6d124db18cd6015b7d763addfd63e0bd54a", "patch": "@@ -175,3 +175,33 @@ const _: () = 0e0;\n \"#]],\n     );\n }\n+\n+#[test]\n+fn float_literal_in_tt() {\n+    check(\n+        r#\"\n+macro_rules! constant {\n+    ($( $ret:expr; )*) => {};\n+}\n+\n+macro_rules! float_const_impl {\n+    () => ( constant!(0.3; 3.3;); );\n+}\n+\n+float_const_impl! {}\n+\"#,\n+        expect![[r#\"\n+macro_rules! constant {\n+    ($( $ret:expr; )*) => {};\n+}\n+\n+macro_rules! float_const_impl {\n+    () => ( constant!(0.3; 3.3;); );\n+}\n+\n+constant!(0.3;\n+3.3;\n+);\n+\"#]],\n+    );\n+}"}, {"sha": "fb6f8d66c6d74dd0b1625a824bbc7f8c01fcd020", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/81b3e6d124db18cd6015b7d763addfd63e0bd54a/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3e6d124db18cd6015b7d763addfd63e0bd54a/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=81b3e6d124db18cd6015b7d763addfd63e0bd54a", "patch": "@@ -740,6 +740,7 @@ struct TtTreeSink<'a> {\n     text_pos: TextSize,\n     inner: SyntaxTreeBuilder,\n     token_map: TokenMap,\n+    remaining_float_lit_text: String,\n }\n \n impl<'a> TtTreeSink<'a> {\n@@ -751,6 +752,7 @@ impl<'a> TtTreeSink<'a> {\n             text_pos: 0.into(),\n             inner: SyntaxTreeBuilder::default(),\n             token_map: TokenMap::default(),\n+            remaining_float_lit_text: String::new(),\n         }\n     }\n \n@@ -777,6 +779,54 @@ impl<'a> TtTreeSink<'a> {\n             n_tokens = 2;\n         }\n \n+        // We need to split a float `tt::Literal` into up to 3 tokens consumed by the parser.\n+        match self.cursor.token_tree() {\n+            Some(tt::buffer::TokenTreeRef::Subtree(sub, _)) if sub.delimiter.is_none() => {\n+                self.cursor = self.cursor.subtree().unwrap()\n+            }\n+            _ => {}\n+        }\n+        let literal = match self.cursor.token_tree() {\n+            Some(tt::buffer::TokenTreeRef::Leaf(tt::Leaf::Literal(lit), _)) => Some(lit),\n+            _ => None,\n+        };\n+        if matches!(\n+            kind,\n+            FLOAT_NUMBER_PART | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2\n+        ) {\n+            if self.remaining_float_lit_text.is_empty() {\n+                always!(\n+                    literal.is_some(),\n+                    \"kind={:?}, cursor tt={:?}\",\n+                    kind,\n+                    self.cursor.token_tree()\n+                );\n+                let text = literal.map_or(String::new(), |lit| lit.to_string());\n+                self.cursor = self.cursor.bump();\n+                match text.split_once('.') {\n+                    Some((start, end)) => {\n+                        self.inner.token(kind, start);\n+                        self.remaining_float_lit_text = format!(\".{end}\");\n+                        return;\n+                    }\n+                    None => {\n+                        self.inner.token(kind, &text);\n+                        return;\n+                    }\n+                }\n+            } else {\n+                self.inner.token(kind, &self.remaining_float_lit_text);\n+                self.remaining_float_lit_text.clear();\n+                return;\n+            }\n+        }\n+        if kind == DOT && !self.remaining_float_lit_text.is_empty() {\n+            always!(self.remaining_float_lit_text.chars().next() == Some('.'));\n+            self.inner.token(kind, \".\");\n+            self.remaining_float_lit_text = self.remaining_float_lit_text[1..].to_string();\n+            return;\n+        }\n+\n         let mut last = self.cursor;\n         for _ in 0..n_tokens {\n             let tmp: u8;"}]}