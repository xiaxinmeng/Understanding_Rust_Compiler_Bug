{"sha": "18bb75477a4053534d8e6c28d573bde03f6ede26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YmI3NTQ3N2E0MDUzNTM0ZDhlNmMyOGQ1NzNiZGUwM2Y2ZWRlMjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-21T23:42:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-21T23:42:31Z"}, "message": "Rollup merge of #61181 - GuillaumeGomez:fix-theme-checker, r=kinnison\n\nFix theme-checker failure\n\nFixes #61145.\n\nI didn't find a way to check it without strongly depending on the output... Is there a way to check if a program fails without checking its output?\n\nr? @QuietMisdreavus", "tree": {"sha": "dd4efb1aa03ae733ed3938a127fc09acc57f1d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4efb1aa03ae733ed3938a127fc09acc57f1d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18bb75477a4053534d8e6c28d573bde03f6ede26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdDWtoCRBK7hj4Ov3rIwAAdHIIACt+bqGtR3fymPticsqnzBcK\n4v0g/rGV31D/IK+VjljsHe/8CxUH9T3eQYphNnNGyyO0g8fKXs1wgQtDQigkjwVo\n2fwcXJ831phQ2jUc41UvGqo7djybKTnfmYeRg0vB208OeDUbFq1GdugbnnByHsMF\nxKgkzjVLknLObtAhwA5a0gdqD+6pPYMOZ5cJSde9t3XK0RQvez2k+vDtSGMmQn0t\ngpE0FjRwjLTAQlx9CEV957FHQ0ikYy9asYsWto5TAf+ZfESXiLy4kmqMDqZOeGch\nCF8v44mORTbyfOJaTI12fb5AGdut7O0EbDx0NM38uD6HgMef9NCmKgFBF3eVPlY=\n=bbrU\n-----END PGP SIGNATURE-----\n", "payload": "tree dd4efb1aa03ae733ed3938a127fc09acc57f1d4a\nparent 3a8536edefdef91f5982e5ba3df200bc7d7d936a\nparent 640bdbdb1da73cde39c33fc2be3cddd3b71389b0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561160551 +0200\ncommitter GitHub <noreply@github.com> 1561160551 +0200\n\nRollup merge of #61181 - GuillaumeGomez:fix-theme-checker, r=kinnison\n\nFix theme-checker failure\n\nFixes #61145.\n\nI didn't find a way to check it without strongly depending on the output... Is there a way to check if a program fails without checking its output?\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18bb75477a4053534d8e6c28d573bde03f6ede26", "html_url": "https://github.com/rust-lang/rust/commit/18bb75477a4053534d8e6c28d573bde03f6ede26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18bb75477a4053534d8e6c28d573bde03f6ede26/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a8536edefdef91f5982e5ba3df200bc7d7d936a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8536edefdef91f5982e5ba3df200bc7d7d936a", "html_url": "https://github.com/rust-lang/rust/commit/3a8536edefdef91f5982e5ba3df200bc7d7d936a"}, {"sha": "640bdbdb1da73cde39c33fc2be3cddd3b71389b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/640bdbdb1da73cde39c33fc2be3cddd3b71389b0", "html_url": "https://github.com/rust-lang/rust/commit/640bdbdb1da73cde39c33fc2be3cddd3b71389b0"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "7220a05df47e660a5ecc517ec53bb667fd42ab37", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18bb75477a4053534d8e6c28d573bde03f6ede26/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bb75477a4053534d8e6c28d573bde03f6ede26/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=18bb75477a4053534d8e6c28d573bde03f6ede26", "patch": "@@ -103,16 +103,16 @@ fn is_line_comment(pos: usize, v: &[u8], events: &[Events]) -> bool {\n     if let Some(&Events::StartComment(_)) = events.last() {\n         return false;\n     }\n-    pos + 1 < v.len() && v[pos + 1] == b'/'\n+    v[pos + 1] == b'/'\n }\n \n fn load_css_events(v: &[u8]) -> Vec<Events> {\n     let mut pos = 0;\n     let mut events = Vec::with_capacity(100);\n \n-    while pos < v.len() - 1 {\n+    while pos + 1 < v.len() {\n         match v[pos] {\n-            b'/' if pos + 1 < v.len() && v[pos + 1] == b'*' => {\n+            b'/' if v[pos + 1] == b'*' => {\n                 events.push(Events::StartComment(pos));\n                 pos += 1;\n             }\n@@ -123,7 +123,7 @@ fn load_css_events(v: &[u8]) -> Vec<Events> {\n             b'\\n' if previous_is_line_comment(&events) => {\n                 events.push(Events::EndComment(pos));\n             }\n-            b'*' if pos + 1 < v.len() && v[pos + 1] == b'/' => {\n+            b'*' if v[pos + 1] == b'/' => {\n                 events.push(Events::EndComment(pos + 2));\n                 pos += 1;\n             }\n@@ -264,9 +264,11 @@ pub fn get_differences(against: &CssPath, other: &CssPath, v: &mut Vec<String>)\n     }\n }\n \n-pub fn test_theme_against<P: AsRef<Path>>(f: &P, against: &CssPath, diag: &Handler)\n-    -> (bool, Vec<String>)\n-{\n+pub fn test_theme_against<P: AsRef<Path>>(\n+    f: &P,\n+    against: &CssPath,\n+    diag: &Handler,\n+) -> (bool, Vec<String>) {\n     let data = try_something!(fs::read(f), diag, (false, vec![]));\n     let paths = load_css_paths(&data);\n     let mut ret = vec![];\n@@ -366,4 +368,16 @@ a {\n         get_differences(&other, &against, &mut ret);\n         assert_eq!(ret, vec![\"  Missing \\\"c\\\" rule\".to_owned()]);\n     }\n+\n+    #[test]\n+    fn check_empty_css() {\n+        let events = load_css_events(&[]);\n+        assert_eq!(events.len(), 0);\n+    }\n+\n+    #[test]\n+    fn check_invalid_css() {\n+        let events = load_css_events(b\"*\");\n+        assert_eq!(events.len(), 0);\n+    }\n }"}]}