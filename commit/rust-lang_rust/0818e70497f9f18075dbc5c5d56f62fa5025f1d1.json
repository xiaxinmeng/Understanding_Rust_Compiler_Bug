{"sha": "0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MThlNzA0OTdmOWYxODA3NWRiYzVjNWQ1NmY2MmZhNTAyNWYxZDE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-27T13:31:19Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-30T09:32:02Z"}, "message": "don't require `cargo clippy` to pass a `--lib` or `--bin x` argument", "tree": {"sha": "96b7370648045103231dc681bebe6c22c82e6559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b7370648045103231dc681bebe6c22c82e6559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTAiSAAoJEFbW7qD8Z6xGxTMP/iulYSPYCS5kptQ5Yy3IHUC1\n56i3ShgzX5mUlht3JpBaZE39CowBEaANf1jNltS/pdMNJ4vZBU/eo5MKyeZO4JGu\ntC5i29VJOnIyDhVuj5Y3NsXZZe3CiKxYeGwSio2ARFc8TLfaNjysZ/zYZTtGkZgi\nDdA2QSd61ud6paNN0vl3gBT6vpbRhi4kmhUNrAn5hIU8gXf3bE6FUYq1XP6VXWJ6\ncXiLQBfA29rPso9C7iwSF3Fmf0LW5wt6Wm+P6nSobHFZckYZ8BLOPWmqvPzKYON7\nv8+gKeN879/c9Hhv0UaluNxs0rL2y5w9NmNWRDOu13z+yfdHa71tfrUK6G6omZS1\nwHifWGk8jj/WyejyYjThJ3FmwzK6sVFtia3FsiU53sm6sFCEtSrRnaR2ffNsPmra\nZHMfT8AmxrOTnkH+z+81VngcJ0/xLstqOo0w7GTrmxuEduDh3EoTp2FVIdoE75fC\nz+sfYjaZ5MzhFLn0GpbSear4eldBL7mMbybHSwfonw8NsVuRmA+Z4A75rN4EqpvZ\nIObhWv8XgB5YIwKkL4nWvAKSeuL/F6lxMIo6N2j2zh+LxiY+VLTHNnKtaRD0I863\noBBfoIRinLHimqztF4ja/gaEjXCIXXZQSSxFr2eKEjcnQZq8j+7VhIx8Rcj0Q1Qx\nNpW6Ksy1zZKVXgRwaNTh\n=h7h+\n-----END PGP SIGNATURE-----", "payload": "tree 96b7370648045103231dc681bebe6c22c82e6559\nparent cbc430a699f8ba0beb18036499933a5bdecbf114\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464355879 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464600722 +0200\n\ndon't require `cargo clippy` to pass a `--lib` or `--bin x` argument"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "html_url": "https://github.com/rust-lang/rust/commit/0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc430a699f8ba0beb18036499933a5bdecbf114", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc430a699f8ba0beb18036499933a5bdecbf114", "html_url": "https://github.com/rust-lang/rust/commit/cbc430a699f8ba0beb18036499933a5bdecbf114"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "828857701d5a396fb27ec216390e5632b5a79ace", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "patch": "@@ -32,12 +32,12 @@ quine-mc_cluskey = \"0.2.2\"\n # begin automatic update\n clippy_lints = { version = \"0.0.70\", path = \"clippy_lints\" }\n # end automatic update\n+rustc-serialize = \"0.3\"\n \n [dev-dependencies]\n compiletest_rs = \"0.1.0\"\n lazy_static = \"0.1.15\"\n regex = \"0.1.56\"\n-rustc-serialize = \"0.3\"\n \n [features]\n debugging = []"}, {"sha": "188d4d38e8d856217152c405f44d2800c5fa0415", "filename": "src/cargo.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/src%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/src%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo.rs?ref=0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "patch": "@@ -0,0 +1,48 @@\n+use std::collections::HashMap;\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Metadata {\n+    pub packages: Vec<Package>,\n+    resolve: Option<()>,\n+    pub version: usize,\n+}\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Package {\n+    name: String,\n+    version: String,\n+    id: String,\n+    source: Option<()>,\n+    dependencies: Vec<Dependency>,\n+    pub targets: Vec<Target>,\n+    features: HashMap<String, Vec<String>>,\n+    manifest_path: String,\n+}\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Dependency {\n+    name: String,\n+    source: Option<String>,\n+    req: String,\n+    kind: Option<String>,\n+    optional: bool,\n+    uses_default_features: bool,\n+    features: Vec<HashMap<String, String>>,\n+    target: Option<()>,\n+}\n+\n+#[allow(non_camel_case_types)]\n+#[derive(RustcDecodable, Debug)]\n+pub enum Kind {\n+    dylib,\n+    test,\n+    bin,\n+    lib,\n+}\n+\n+#[derive(RustcDecodable, Debug)]\n+pub struct Target {\n+    pub name: String,\n+    pub kind: Vec<Kind>,\n+    src_path: String,\n+}"}, {"sha": "51683060be2de2b06f8974da0c17e0be8cce5e1f", "filename": "src/main.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0818e70497f9f18075dbc5c5d56f62fa5025f1d1/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=0818e70497f9f18075dbc5c5d56f62fa5025f1d1", "patch": "@@ -8,6 +8,7 @@ extern crate rustc;\n extern crate syntax;\n extern crate rustc_plugin;\n extern crate clippy_lints;\n+extern crate rustc_serialize;\n \n use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n use rustc::session::{config, Session};\n@@ -16,6 +17,8 @@ use syntax::diagnostics;\n use std::path::PathBuf;\n use std::process::Command;\n \n+mod cargo;\n+\n struct ClippyCompilerCalls(RustcDefaultCalls);\n \n impl std::default::Default for ClippyCompilerCalls {\n@@ -118,16 +121,19 @@ pub fn main() {\n     };\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n-        let args = wrap_args(std::env::args().skip(2), dep_path, sys_root);\n-        let path = std::env::current_exe().expect(\"current executable path invalid\");\n-        let exit_status = std::process::Command::new(\"cargo\")\n-            .args(&args)\n-            .env(\"RUSTC\", path)\n-            .spawn().expect(\"could not run cargo\")\n-            .wait().expect(\"failed to wait for cargo?\");\n-\n-        if let Some(code) = exit_status.code() {\n-            std::process::exit(code);\n+        let output = std::process::Command::new(\"cargo\").args(&[\"metadata\", \"--no-deps\"]).output().expect(\"could not run `cargo metadata`\");\n+        let stdout = std::str::from_utf8(&output.stdout).expect(\"`cargo metadata` output is not utf8\");\n+        let mut metadata: cargo::Metadata = rustc_serialize::json::decode(stdout).expect(\"`cargo metadata` output is not valid json\");\n+        assert_eq!(metadata.version, 1);\n+        for target in metadata.packages.remove(0).targets {\n+            let args = std::env::args().skip(2);\n+            assert_eq!(target.kind.len(), 1);\n+            match target.kind[0] {\n+                cargo::Kind::dylib => process(std::iter::once(\"--lib\".to_owned()).chain(args), &dep_path, &sys_root),\n+                cargo::Kind::bin => process(vec![\"--bin\".to_owned(), target.name].into_iter().chain(args), &dep_path, &sys_root),\n+                // don't process tests\n+                _ => {},\n+            }\n         }\n     } else {\n         let args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n@@ -145,7 +151,7 @@ pub fn main() {\n     }\n }\n \n-fn wrap_args<P, I>(old_args: I, dep_path: P, sysroot: String) -> Vec<String>\n+fn process<P, I>(old_args: I, dep_path: P, sysroot: &str)\n     where P: AsRef<Path>, I: Iterator<Item=String> {\n \n     let mut args = vec![\"rustc\".to_owned()];\n@@ -161,7 +167,17 @@ fn wrap_args<P, I>(old_args: I, dep_path: P, sysroot: String) -> Vec<String>\n     args.push(\"-L\".to_owned());\n     args.push(dep_path.as_ref().to_string_lossy().into_owned());\n     args.push(String::from(\"--sysroot\"));\n-    args.push(sysroot);\n+    args.push(sysroot.to_owned());\n     args.push(\"-Zno-trans\".to_owned());\n-    args\n+\n+    let path = std::env::current_exe().expect(\"current executable path invalid\");\n+    let exit_status = std::process::Command::new(\"cargo\")\n+        .args(&args)\n+        .env(\"RUSTC\", path)\n+        .spawn().expect(\"could not run cargo\")\n+        .wait().expect(\"failed to wait for cargo?\");\n+\n+    if let Some(code) = exit_status.code() {\n+        std::process::exit(code);\n+    }\n }"}]}