{"sha": "936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNmMwN2RjZjAxMzdiN2VmNDU2ZTgyYjllNzBjM2EyNzQzZGJlMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T05:54:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T05:54:37Z"}, "message": "auto merge of #6328 : recrack/rust/rename_cleanup, r=sanxiyn\n\nrename vec::each(var) to var.each\r\n\r\n> librustc, libsyntax, libstd, librustdoc, libcore", "tree": {"sha": "5dfb2bd9dd5e3700567bc46d0d9b6f232c3a7e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dfb2bd9dd5e3700567bc46d0d9b6f232c3a7e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "html_url": "https://github.com/rust-lang/rust/commit/936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "url": "https://api.github.com/repos/rust-lang/rust/commits/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "html_url": "https://github.com/rust-lang/rust/commit/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150"}, {"sha": "c02064d153dccb2d66c5158e0c7eeb6a8bbca0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02064d153dccb2d66c5158e0c7eeb6a8bbca0f5", "html_url": "https://github.com/rust-lang/rust/commit/c02064d153dccb2d66c5158e0c7eeb6a8bbca0f5"}], "stats": {"total": 194, "additions": 94, "deletions": 100}, "files": [{"sha": "a6306c33eb9cd6879b04c66692614dc6fa340e75", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -102,7 +102,7 @@ pub fn build_sized_opt<A>(size: Option<uint>,\n #[inline(always)]\n pub fn append<T:Copy>(lhs: @[T], rhs: &const [T]) -> @[T] {\n     do build_sized(lhs.len() + rhs.len()) |push| {\n-        for vec::each(lhs) |x| { push(*x); }\n+        for lhs.each |x| { push(*x); }\n         for uint::range(0, rhs.len()) |i| { push(rhs[i]); }\n     }\n }\n@@ -111,7 +111,7 @@ pub fn append<T:Copy>(lhs: @[T], rhs: &const [T]) -> @[T] {\n /// Apply a function to each element of a vector and return the results\n pub fn map<T, U>(v: &[T], f: &fn(x: &T) -> U) -> @[U] {\n     do build_sized(v.len()) |push| {\n-        for vec::each(v) |elem| {\n+        for v.each |elem| {\n             push(f(elem));\n         }\n     }"}, {"sha": "957e848b5e7d080b96bc83171c614b6542a72bc7", "filename": "src/libcore/either.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -44,7 +44,7 @@ pub fn lefts<T:Copy,U>(eithers: &[Either<T, U>]) -> ~[T] {\n     //! Extracts from a vector of either all the left values\n \n     do vec::build_sized(eithers.len()) |push| {\n-        for vec::each(eithers) |elt| {\n+        for eithers.each |elt| {\n             match *elt {\n                 Left(ref l) => { push(*l); }\n                 _ => { /* fallthrough */ }\n@@ -57,7 +57,7 @@ pub fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n     //! Extracts from a vector of either all the right values\n \n     do vec::build_sized(eithers.len()) |push| {\n-        for vec::each(eithers) |elt| {\n+        for eithers.each |elt| {\n             match *elt {\n                 Right(ref r) => { push(*r); }\n                 _ => { /* fallthrough */ }"}, {"sha": "75b3b6bb566ee28e708327a9789eb66810be9b0f", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -24,7 +24,6 @@ use cast;\n use rt::io::Writer;\n use to_bytes::IterBytes;\n use uint;\n-use vec;\n \n // Alias `SipState` to `State`.\n pub use State = hash::SipState;\n@@ -378,7 +377,7 @@ impl Streaming for SipState {\n     fn result_str(&mut self) -> ~str {\n         let r = self.result_bytes();\n         let mut s = ~\"\";\n-        for vec::each(r) |b| {\n+        for r.each |b| {\n             s += uint::to_str_radix(*b as uint, 16u);\n         }\n         s\n@@ -478,7 +477,7 @@ mod tests {\n \n         fn to_hex_str(r: &[u8, ..8]) -> ~str {\n             let mut s = ~\"\";\n-            for vec::each(*r) |b| {\n+            for (*r).each |b| {\n                 s += uint::to_str_radix(*b as uint, 16u);\n             }\n             s"}, {"sha": "7fc2c2559c2452b4446838e7a4c17fc51fa2d75a", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -1200,7 +1200,7 @@ pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n     fn wb() -> c_int { O_WRONLY as c_int }\n \n     let mut fflags: c_int = wb();\n-    for vec::each(flags) |f| {\n+    for flags.each |f| {\n         match *f {\n           Append => fflags |= O_APPEND as c_int,\n           Create => fflags |= O_CREAT as c_int,"}, {"sha": "574618026d98332eeceb88393865627263be5c2f", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -1491,7 +1491,7 @@ mod tests {\n     fn test_env_getenv() {\n         let e = env();\n         assert!(vec::len(e) > 0u);\n-        for vec::each(e) |p| {\n+        for e.each |p| {\n             let (n, v) = copy *p;\n             debug!(copy n);\n             let v2 = getenv(n);\n@@ -1583,7 +1583,7 @@ mod tests {\n         // Just assuming that we've got some contents in the current directory\n         assert!((vec::len(dirs) > 0u));\n \n-        for vec::each(dirs) |dir| {\n+        for dirs.each |dir| {\n             debug!(copy *dir);\n         }\n     }"}, {"sha": "1d67e754a4f2461f48f7e5e10a654b4ac3dd3fe1", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -300,7 +300,7 @@ pub fn map_vec<T,U:Copy,V:Copy>(\n     ts: &[T], op: &fn(&T) -> Result<V,U>) -> Result<~[V],U> {\n \n     let mut vs: ~[V] = vec::with_capacity(vec::len(ts));\n-    for vec::each(ts) |t| {\n+    for ts.each |t| {\n         match op(t) {\n           Ok(copy v) => vs.push(v),\n           Err(copy u) => return Err(u)"}, {"sha": "fd168dc02f6061edd3e8561acd35b97bed8476ec", "filename": "src/libcore/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -426,7 +426,7 @@ fn with_argv<T>(prog: &str, args: &[~str],\n                 cb: &fn(**libc::c_char) -> T) -> T {\n     let mut argptrs = str::as_c_str(prog, |b| ~[b]);\n     let mut tmps = ~[];\n-    for vec::each(args) |arg| {\n+    for args.each |arg| {\n         let t = @copy *arg;\n         tmps.push(t);\n         argptrs.push_all(str::as_c_str(*t, |b| ~[b]));\n@@ -445,7 +445,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         let mut tmps = ~[];\n         let mut ptrs = ~[];\n \n-        for vec::each(*es) |e| {\n+        for (*es).each |e| {\n             let (k,v) = copy *e;\n             let t = @(fmt!(\"%s=%s\", k, v));\n             tmps.push(t);\n@@ -470,7 +470,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         match *env {\n           Some(ref es) if !vec::is_empty(*es) => {\n             let mut blk : ~[u8] = ~[];\n-            for vec::each(*es) |e| {\n+            for (*es).each |e| {\n                 let (k,v) = copy *e;\n                 let t = fmt!(\"%s=%s\", k, v);\n                 let mut v : ~[u8] = ::cast::transmute(t);"}, {"sha": "5ec6471ac4a29305ea56ba0dacfb524e97d20b03", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -189,7 +189,7 @@ pub fn from_char(ch: char) -> ~str {\n pub fn from_chars(chs: &[char]) -> ~str {\n     let mut buf = ~\"\";\n     reserve(&mut buf, chs.len());\n-    for vec::each(chs) |ch| {\n+    for chs.each |ch| {\n         push_char(&mut buf, *ch);\n     }\n     buf\n@@ -326,7 +326,7 @@ pub fn connect_slices(v: &[&str], sep: &str) -> ~str {\n             do as_buf(sep) |sepbuf, seplen| {\n                 let seplen = seplen - 1;\n                 let mut buf = ::cast::transmute_mut_unsafe(buf);\n-                for vec::each(v) |ss| {\n+                for v.each |ss| {\n                     do as_buf(*ss) |ssbuf, sslen| {\n                         let sslen = sslen - 1;\n                         if first {\n@@ -2407,7 +2407,7 @@ pub mod raw {\n     unsafe fn push_bytes(s: &mut ~str, bytes: &[u8]) {\n         let new_len = s.len() + bytes.len();\n         reserve_at_least(&mut *s, new_len);\n-        for vec::each(bytes) |byte| { push_byte(&mut *s, *byte); }\n+        for bytes.each |byte| { push_byte(&mut *s, *byte); }\n     }\n \n     /// Removes the last byte from a string and returns it. (Not UTF-8 safe).\n@@ -3782,7 +3782,7 @@ mod tests {\n                0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n                0x000a_u16 ]) ];\n \n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             let (s, u) = copy *p;\n             assert!(to_utf16(s) == u);\n             assert!(from_utf16(u) == s);"}, {"sha": "6c02ece9289ae495bead05c04fe0a7a860240e29", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -1084,7 +1084,7 @@ fn encode_index<T>(ebml_w: &mut writer::Encoder,\n     for buckets.each |bucket| {\n         bucket_locs.push(ebml_w.writer.tell());\n         ebml_w.start_tag(tag_index_buckets_bucket);\n-        for vec::each(**bucket) |elt| {\n+        for (**bucket).each |elt| {\n             ebml_w.start_tag(tag_index_buckets_bucket_elt);\n             assert!(elt.pos < 0xffff_ffff);\n             writer.write_be_u32(elt.pos as u32);"}, {"sha": "3abe5b22e1a1c2c1fcf0a669e5ed87ac259cdaae", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -17,7 +17,6 @@ use core::hashmap::HashMap;\n use core::io::WriterUtil;\n use core::io;\n use core::uint;\n-use core::vec;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::*;\n@@ -398,7 +397,7 @@ fn enc_fn_sig(w: @io::Writer, cx: @ctxt, fsig: &ty::FnSig) {\n }\n \n fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: @~[ty::param_bound]) {\n-    for vec::each(*bs) |bound| {\n+    for (*bs).each |bound| {\n         match *bound {\n           ty::bound_owned => w.write_char('S'),\n           ty::bound_copy => w.write_char('C'),"}, {"sha": "09232b5bba823d925996b1acb5e0cbf441ba8f55", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -366,7 +366,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n         }\n         let variants = ty::enum_variants(cx.tcx, eid);\n         if found.len() != (*variants).len() {\n-            for vec::each(*variants) |v| {\n+            for (*variants).each |v| {\n                 if !found.contains(&(variant(v.id))) {\n                     return Some(variant(v.id));\n                 }"}, {"sha": "0050e0f81c756570c74b49c803c2b551c8ffbb4d", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -235,7 +235,7 @@ fn check_fn(\n }\n \n fn check_arm(a: &arm, cx: Context, v: visit::vt<Context>) {\n-    for vec::each(a.pats) |p| {\n+    for a.pats.each |p| {\n         do pat_util::pat_bindings(cx.tcx.def_map, *p) |mode, id, span, _pth| {\n             if mode == bind_by_copy {\n                 let t = ty::node_id_to_type(cx.tcx, id);"}, {"sha": "5c3bb6ca401a669dfab5c5569a03ad6a8488cbdd", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -4630,7 +4630,7 @@ pub impl Resolver {\n         }\n \n         let mut smallest = 0;\n-        for vec::eachi(maybes) |i, &other| {\n+        for maybes.eachi |i, &other| {\n \n             values[i] = str::levdistance(name, other);\n \n@@ -4664,7 +4664,7 @@ pub impl Resolver {\n                 if item.id == node_id {\n                   match item.node {\n                     item_struct(class_def, _) => {\n-                      for vec::each(class_def.fields) |field| {\n+                      for class_def.fields.each |field| {\n                         match field.node.kind {\n                           unnamed_field => {},\n                           named_field(ident, _) => {"}, {"sha": "3a6424efe1d2290b702f4da04468b762f7e18618", "filename": "src/librustc/middle/resolve_stage0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -4681,7 +4681,7 @@ pub impl Resolver {\n         }\n \n         let mut smallest = 0;\n-        for vec::eachi(maybes) |i, &other| {\n+        for maybes.eachi |i, &other| {\n \n             values[i] = str::levdistance(name, other);\n \n@@ -4715,7 +4715,7 @@ pub impl Resolver {\n                 if item.id == node_id {\n                   match item.node {\n                     item_struct(class_def, _) => {\n-                      for vec::each(class_def.fields) |field| {\n+                      for class_def.fields.each |field| {\n                         match field.node.kind {\n                           unnamed_field => {},\n                           named_field(ident, _) => {"}, {"sha": "1443a7ef304072dac03360095607a0b26e06d21d", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -283,7 +283,7 @@ pub fn variant_opt(bcx: block, pat_id: ast::node_id)\n     match ccx.tcx.def_map.get_copy(&pat_id) {\n         ast::def_variant(enum_id, var_id) => {\n             let variants = ty::enum_variants(ccx.tcx, enum_id);\n-            for vec::each(*variants) |v| {\n+            for (*variants).each |v| {\n                 if var_id == v.id {\n                     return var(v.disr_val,\n                                adt::represent_node(bcx, pat_id))\n@@ -349,7 +349,7 @@ pub fn matches_to_str(bcx: block, m: &[@Match]) -> ~str {\n }\n \n pub fn has_nested_bindings(m: &[@Match], col: uint) -> bool {\n-    for vec::each(m) |br| {\n+    for m.each |br| {\n         match br.pats[col].node {\n           ast::pat_ident(_, _, Some(_)) => return true,\n           _ => ()\n@@ -418,7 +418,7 @@ pub fn enter_match<'r>(bcx: block,\n     let _indenter = indenter();\n \n     let mut result = ~[];\n-    for vec::each(m) |br| {\n+    for m.each |br| {\n         match e(br.pats[col]) {\n             Some(sub) => {\n                 let pats =\n@@ -934,7 +934,7 @@ pub fn collect_record_or_struct_fields(bcx: block,\n                                        col: uint)\n                                     -> ~[ast::ident] {\n     let mut fields: ~[ast::ident] = ~[];\n-    for vec::each(m) |br| {\n+    for m.each |br| {\n         match br.pats[col].node {\n           ast::pat_struct(_, ref fs, _) => {\n             match ty::get(node_id_type(bcx, br.pats[col].id)).sty {\n@@ -973,7 +973,7 @@ pub fn root_pats_as_necessary(mut bcx: block,\n                               col: uint,\n                               val: ValueRef)\n                            -> block {\n-    for vec::each(m) |br| {\n+    for m.each |br| {\n         let pat_id = br.pats[col].id;\n         if pat_id != 0 {\n             let datum = Datum {val: val, ty: node_id_type(bcx, pat_id),\n@@ -1042,14 +1042,14 @@ pub fn pick_col(m: &[@Match]) -> uint {\n         }\n     }\n     let mut scores = vec::from_elem(m[0].pats.len(), 0u);\n-    for vec::each(m) |br| {\n+    for m.each |br| {\n         let mut i = 0u;\n-        for vec::each(br.pats) |p| { scores[i] += score(*p); i += 1u; }\n+        for br.pats.each |p| { scores[i] += score(*p); i += 1u; }\n     }\n     let mut max_score = 0u;\n     let mut best_col = 0u;\n     let mut i = 0u;\n-    for vec::each(scores) |score| {\n+    for scores.each |score| {\n         let score = *score;\n \n         // Irrefutable columns always go first, they'd only be duplicated in\n@@ -1306,7 +1306,7 @@ pub fn compile_submatch(bcx: block,\n     let ccx = *bcx.fcx.ccx;\n     let mut pat_id = 0;\n     let mut pat_span = dummy_sp();\n-    for vec::each(m) |br| {\n+    for m.each |br| {\n         // Find a real id (we're adding placeholder wildcard patterns, but\n         // each column is guaranteed to have at least one real pattern)\n         if pat_id == 0 {\n@@ -1438,7 +1438,7 @@ pub fn compile_submatch(bcx: block,\n             }\n         }\n     }\n-    for vec::each(opts) |o| {\n+    for opts.each |o| {\n         match *o {\n             range(_, _) => { kind = compare; break }\n             _ => ()\n@@ -1460,7 +1460,7 @@ pub fn compile_submatch(bcx: block,\n     let mut i = 0u;\n \n     // Compile subtrees for each option\n-    for vec::each(opts) |opt| {\n+    for opts.each |opt| {\n         i += 1u;\n         let mut opt_cx = else_cx;\n         if !exhaustive || i < len {\n@@ -1631,7 +1631,7 @@ pub fn trans_match_inner(scope_cx: block,\n     }\n \n     let mut arm_datas = ~[], matches = ~[];\n-    for vec::each(arms) |arm| {\n+    for arms.each |arm| {\n         let body = scope_block(bcx, arm.body.info(), ~\"case_body\");\n \n         // Create the bindings map, which is a mapping from each binding name\n@@ -1670,7 +1670,7 @@ pub fn trans_match_inner(scope_cx: block,\n                                  arm: arm,\n                                  bindings_map: bindings_map};\n         arm_datas.push(arm_data);\n-        for vec::each(arm.pats) |p| {\n+        for arm.pats.each |p| {\n             matches.push(@Match {pats: ~[*p], data: arm_data});\n         }\n     }\n@@ -1793,7 +1793,7 @@ pub fn bind_irrefutable_pat(bcx: block,\n                                                     vinfo.disr_val,\n                                                     val);\n                     for sub_pats.each |sub_pat| {\n-                        for vec::eachi(args.vals) |i, argval| {\n+                        for args.vals.eachi |i, argval| {\n                             bcx = bind_irrefutable_pat(bcx,\n                                                        sub_pat[i],\n                                                        *argval,"}, {"sha": "77a90e22150875b0ec886cb50a7ae9a80e9d46ca", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -668,7 +668,7 @@ pub fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n       ty::ty_struct(*) => {\n           let repr = adt::represent_type(cx.ccx(), t);\n           do expr::with_field_tys(cx.tcx(), t, None) |discr, field_tys| {\n-              for vec::eachi(field_tys) |i, field_ty| {\n+              for field_tys.eachi |i, field_ty| {\n                   let llfld_a = adt::trans_field_ptr(cx, repr, av, discr, i);\n                   cx = f(cx, llfld_a, field_ty.mt.ty);\n               }\n@@ -709,7 +709,7 @@ pub fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n                                         n_variants);\n                   let next_cx = sub_block(cx, ~\"enum-iter-next\");\n \n-                  for vec::each(*variants) |variant| {\n+                  for (*variants).each |variant| {\n                       let variant_cx =\n                           sub_block(cx, ~\"enum-iter-variant-\" +\n                                     int::to_str(variant.disr_val));\n@@ -888,7 +888,7 @@ pub fn need_invoke(bcx: block) -> bool {\n         match cur.kind {\n             block_scope(inf) => {\n                 let inf = &mut *inf; // FIXME(#5074) workaround old borrowck\n-                for vec::each(inf.cleanups) |cleanup| {\n+                for inf.cleanups.each |cleanup| {\n                     match *cleanup {\n                         clean(_, cleanup_type) | clean_temp(_, _, cleanup_type) => {\n                             if cleanup_type == normal_exit_and_unwind {\n@@ -1391,7 +1391,7 @@ pub fn with_scope_datumblock(bcx: block, opt_node_info: Option<NodeInfo>,\n }\n \n pub fn block_locals(b: &ast::blk, it: &fn(@ast::local)) {\n-    for vec::each(b.node.stmts) |s| {\n+    for b.node.stmts.each |s| {\n         match s.node {\n           ast::stmt_decl(d, _) => {\n             match d.node {\n@@ -1973,7 +1973,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n            repr, ty_to_str(ccx.tcx, enum_ty));\n \n     adt::trans_start_init(bcx, repr, fcx.llretptr.get(), disr);\n-    for vec::eachi(args) |i, va| {\n+    for args.eachi |i, va| {\n         let lldestptr = adt::trans_field_ptr(bcx,\n                                              repr,\n                                              fcx.llretptr.get(),\n@@ -2072,7 +2072,7 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::enum_def,\n                       id: ast::node_id, vi: @~[ty::VariantInfo],\n                       i: &mut uint) {\n-    for vec::each(enum_definition.variants) |variant| {\n+    for enum_definition.variants.each |variant| {\n         let disr_val = vi[*i].disr_val;\n         *i += 1;\n \n@@ -2559,7 +2559,7 @@ pub fn trans_constant(ccx: @CrateContext, it: @ast::item) {\n                                                  node: it.id });\n         let mut i = 0;\n         let path = item_path(ccx, it);\n-        for vec::each((*enum_definition).variants) |variant| {\n+        for (*enum_definition).variants.each |variant| {\n             let p = vec::append(/*bad*/copy path, ~[\n                 path_name(variant.node.name),\n                 path_name(special_idents::descrim)"}, {"sha": "4da2199501f528175f2d6194631f8eee280e519d", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -161,7 +161,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                        cls: &mut [x86_64_reg_class], i: uint,\n                        off: uint) {\n         let mut field_off = off;\n-        for vec::each(tys) |ty| {\n+        for tys.each |ty| {\n             field_off = align(field_off, *ty);\n             classify(*ty, cls, i, field_off);\n             field_off += ty_size(*ty);\n@@ -283,7 +283,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n fn llreg_ty(cls: &[x86_64_reg_class]) -> TypeRef {\n     fn llvec_len(cls: &[x86_64_reg_class]) -> uint {\n         let mut len = 1u;\n-        for vec::each(cls) |c| {\n+        for cls.each |c| {\n             if *c != sseup_class {\n                 break;\n             }\n@@ -370,7 +370,7 @@ fn x86_64_tys(atys: &[TypeRef],\n \n     let mut arg_tys = ~[];\n     let mut attrs = ~[];\n-    for vec::each(atys) |t| {\n+    for atys.each |t| {\n         let (ty, attr) = x86_64_ty(*t, is_pass_byval, ByValAttribute);\n         arg_tys.push(ty);\n         attrs.push(attr);"}, {"sha": "e5e60b2d4ac334d692d55dca307fb25f0148b9b3", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -631,7 +631,7 @@ pub fn trans_args(cx: block,\n     match args {\n       ArgExprs(arg_exprs) => {\n         let last = arg_exprs.len() - 1u;\n-        for vec::eachi(arg_exprs) |i, arg_expr| {\n+        for arg_exprs.eachi |i, arg_expr| {\n             let arg_val = unpack_result!(bcx, {\n                 trans_arg_expr(bcx,\n                                arg_tys[i],"}, {"sha": "8b72ddda044c7e92928c177fbe2e1b60edce3694", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -34,7 +34,7 @@ pub fn trans_block(bcx: block, b: &ast::blk, dest: expr::Dest) -> block {\n     do block_locals(b) |local| {\n         bcx = alloc_local(bcx, local);\n     };\n-    for vec::each(b.node.stmts) |s| {\n+    for b.node.stmts.each |s| {\n         debuginfo::update_source_pos(bcx, b.span);\n         bcx = trans_stmt(bcx, *s);\n     }\n@@ -107,7 +107,7 @@ pub fn trans_if(bcx: block,\n pub fn join_blocks(parent_bcx: block, in_cxs: &[block]) -> block {\n     let out = sub_block(parent_bcx, ~\"join\");\n     let mut reachable = false;\n-    for vec::each(in_cxs) |bcx| {\n+    for in_cxs.each |bcx| {\n         if !bcx.unreachable {\n             Br(*bcx, out.llbb);\n             reachable = true;"}, {"sha": "29227b7c95a32a85c032d504d1a660349b7c7831", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -1264,7 +1264,7 @@ fn trans_adt(bcx: block, repr: &adt::Repr, discr: int,\n         }\n     }\n \n-    for vec::each(temp_cleanups) |cleanup| {\n+    for temp_cleanups.each |cleanup| {\n         revoke_clean(bcx, *cleanup);\n     }\n     return bcx;"}, {"sha": "7eea65e458f1ed0a20e87703c834c1ffc6e7af4e", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -294,7 +294,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         Some(abi) => abi,\n     };\n \n-    for vec::each(foreign_mod.items) |&foreign_item| {\n+    for foreign_mod.items.each |&foreign_item| {\n         match foreign_item.node {\n             ast::foreign_item_fn(*) => {\n                 let id = foreign_item.id;"}, {"sha": "f20af0409c53c8199df287042187d3eb7c58a066", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -51,7 +51,7 @@ pub fn trans_impl(ccx: @CrateContext, path: path, name: ast::ident,\n \n     if !generics.ty_params.is_empty() { return; }\n     let sub_path = vec::append_one(path, path_name(name));\n-    for vec::each(methods) |method| {\n+    for methods.each |method| {\n         if method.generics.ty_params.len() == 0u {\n             let llfn = get_item_val(ccx, method.id);\n             let path = vec::append_one(/*bad*/copy sub_path,"}, {"sha": "d9bf25bf37786e7ff67d2d129ede101efa11c82f", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -28,7 +28,6 @@ use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n use core::option::None;\n-use core::vec;\n use syntax::ast;\n use syntax::codemap;\n \n@@ -395,7 +394,7 @@ pub fn write_content(bcx: block,\n                         add_clean_temp_mem(bcx, lleltptr, vt.unit_ty);\n                         temp_cleanups.push(lleltptr);\n                     }\n-                    for vec::each(temp_cleanups) |cleanup| {\n+                    for temp_cleanups.each |cleanup| {\n                         revoke_clean(bcx, *cleanup);\n                     }\n                 }"}, {"sha": "f1c3a42d1583e9173bf0e3c34ff3506cb6cd8e18", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -77,7 +77,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n     match ty::get(ty::lookup_item_type(cx.ccx.tcx, fn_id).ty).sty {\n         ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, _}) |\n         ty::ty_closure(ty::ClosureTy {sig: ref sig, _}) => {\n-            for vec::each(sig.inputs) |arg| {\n+            for sig.inputs.each |arg| {\n                 type_needs(cx, use_repr, arg.ty);\n             }\n         }\n@@ -213,7 +213,7 @@ pub fn type_needs_inner(cx: Context,\n                 if list::find(enums_seen, |id| *id == did).is_none() {\n                     let seen = @Cons(did, enums_seen);\n                     for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) |v| {\n-                        for vec::each(v.args) |aty| {\n+                        for v.args.each |aty| {\n                             let t = ty::subst(cx.ccx.tcx, &(*substs), *aty);\n                             type_needs_inner(cx, use_, t, seen);\n                         }"}, {"sha": "2daba3212e1c3c56accbe68b5cd51dd63ffadc28", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -1740,7 +1740,7 @@ fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n             true\n           }\n           ty_enum(did, ref substs) => {\n-            for vec::each(*enum_variants(cx, did)) |v| {\n+            for (*enum_variants(cx, did)).each |v| {\n                 for v.args.each |aty| {\n                     let t = subst(cx, substs, *aty);\n                     needs_unwind_cleanup |=\n@@ -2335,7 +2335,7 @@ pub fn type_structurally_contains(cx: ctxt,\n     if test(sty) { return true; }\n     match *sty {\n       ty_enum(did, ref substs) => {\n-        for vec::each(*enum_variants(cx, did)) |variant| {\n+        for (*enum_variants(cx, did)).each |variant| {\n             for variant.args.each |aty| {\n                 let sty = subst(cx, substs, *aty);\n                 if type_structurally_contains(cx, sty, test) { return true; }\n@@ -2431,7 +2431,7 @@ pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       // Structural types\n       ty_enum(did, ref substs) => {\n         let variants = enum_variants(cx, did);\n-        for vec::each(*variants) |variant| {\n+        for (*variants).each |variant| {\n             let tup_ty = mk_tup(cx, /*bad*/copy variant.args);\n \n             // Perform any type parameter substitutions."}, {"sha": "2869c3737c9374ae5eb8fd50d816798ead4f0f9e", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -228,7 +228,7 @@ fn visit_expr(e: @ast::expr, wbcx: @mut WbCtxt, v: wb_vt) {\n \n     match e.node {\n         ast::expr_fn_block(ref decl, _) => {\n-            for vec::each(decl.inputs) |input| {\n+            for decl.inputs.each |input| {\n                 let _ = resolve_type_vars_for_node(wbcx, e.span, input.id);\n             }\n         }"}, {"sha": "8349e16d2c44047d9efa6d3c4787950ed485b37b", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -1572,8 +1572,8 @@ pub impl RegionVarBindings {\n             return;\n         }\n \n-        for vec::each(lower_bounds) |lower_bound| {\n-            for vec::each(upper_bounds) |upper_bound| {\n+        for lower_bounds.each |lower_bound| {\n+            for upper_bounds.each |upper_bound| {\n                 if !self.is_subregion_of(lower_bound.region,\n                                          upper_bound.region) {\n \n@@ -1629,8 +1629,8 @@ pub impl RegionVarBindings {\n             return;\n         }\n \n-        for vec::each(upper_bounds) |upper_bound_1| {\n-            for vec::each(upper_bounds) |upper_bound_2| {\n+        for upper_bounds.each |upper_bound_1| {\n+            for upper_bounds.each |upper_bound_2| {\n                 match self.glb_concrete_regions(upper_bound_1.region,\n                                                 upper_bound_2.region) {\n                   Ok(_) => {}"}, {"sha": "e376e4afa5c2d06ffcce32f4c64bdf7ad20ddd59", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -276,7 +276,7 @@ fn write_desc(\n }\n \n fn write_sections(ctxt: &Ctxt, sections: &[doc::Section]) {\n-    for vec::each(sections) |section| {\n+    for sections.each |section| {\n         write_section(ctxt, copy *section);\n     }\n }\n@@ -439,7 +439,7 @@ fn write_variants(\n \n     write_header_(ctxt, H4, ~\"Variants\");\n \n-    for vec::each(docs) |variant| {\n+    for docs.each |variant| {\n         write_variant(ctxt, copy *variant);\n     }\n \n@@ -465,7 +465,7 @@ fn write_trait(ctxt: &Ctxt, doc: doc::TraitDoc) {\n }\n \n fn write_methods(ctxt: &Ctxt, docs: &[doc::MethodDoc]) {\n-    for vec::each(docs) |doc| {\n+    for docs.each |doc| {\n         write_method(ctxt, copy *doc);\n     }\n }"}, {"sha": "08507fbf34eeade17f3c488ebf07946a2b000767", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -484,7 +484,6 @@ mod tests {\n \n     use core::cell::Cell;\n     use core::task;\n-    use core::vec;\n \n     #[test]\n     fn manually_share_arc() {\n@@ -683,7 +682,7 @@ mod tests {\n         }\n \n         // Wait for children to pass their asserts\n-        for vec::each(children) |r| {\n+        for children.each |r| {\n             r.recv();\n         }\n \n@@ -748,7 +747,7 @@ mod tests {\n                 assert!(*state == 42);\n                 *state = 31337;\n                 // send to other readers\n-                for vec::each(reader_convos) |x| {\n+                for reader_convos.each |x| {\n                     match *x {\n                         (ref rc, _) => rc.send(()),\n                     }\n@@ -757,7 +756,7 @@ mod tests {\n             let read_mode = arc.downgrade(write_mode);\n             do (&read_mode).read |state| {\n                 // complete handshake with other readers\n-                for vec::each(reader_convos) |x| {\n+                for reader_convos.each |x| {\n                     match *x {\n                         (_, ref rp) => rp.recv(),\n                     }"}, {"sha": "ea2a631ae99587e16ee6c7390c6b3a8f075fc0c4", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -368,7 +368,7 @@ pub fn opt_count(mm: &Matches, nm: &str) -> uint {\n \n /// Returns true if any of several options were matched\n pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n-    for vec::each(names) |nm| {\n+    for names.each |nm| {\n         match find_opt(mm.opts, mkname(*nm)) {\n             Some(id) if !mm.vals[id].is_empty() => return true,\n             _ => (),\n@@ -395,7 +395,7 @@ pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n  * option took an argument\n  */\n pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n-    for vec::each(names) |nm| {\n+    for names.each |nm| {\n         match opt_val(mm, *nm) {\n           Val(copy s) => return s,\n           _ => ()"}, {"sha": "52803207da8d1f0d63678f6f670616f39d9239bf", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -425,7 +425,7 @@ mod test {\n         let results = result::unwrap(ga_result);\n         debug!(\"test_get_addr: Number of results for %s: %?\",\n                         localhost_name, vec::len(results));\n-        for vec::each(results) |r| {\n+        for results.each |r| {\n             let ipv_prefix = match *r {\n               Ipv4(_) => ~\"IPv4\",\n               Ipv6(_) => ~\"IPv6\""}, {"sha": "cd5845ac5443e6a9bdae5a3b67a3ea70a706cc06", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -250,7 +250,7 @@ pub fn sha1() -> @Sha1 {\n         fn result_str(&mut self) -> ~str {\n             let rr = mk_result(self);\n             let mut s = ~\"\";\n-            for vec::each(rr) |b| {\n+            for rr.each |b| {\n                 let hex = uint::to_str_radix(*b as uint, 16u);\n                 if hex.len() == 1 {\n                     s += \"0\";\n@@ -378,7 +378,7 @@ mod tests {\n         // Test that it works when accepting the message all at once\n \n         let mut sh = sha1::sha1();\n-        for vec::each(tests) |t| {\n+        for tests.each |t| {\n             sh.input_str(t.input);\n             let out = sh.result();\n             check_vec_eq(t.output, out);\n@@ -392,7 +392,7 @@ mod tests {\n \n \n         // Test that it works when accepting the message in pieces\n-        for vec::each(tests) |t| {\n+        for tests.each |t| {\n             let len = str::len(t.input);\n             let mut left = len;\n             while left > 0u {"}, {"sha": "ae474e0c39463fec8c1d24ee1210182231899f5e", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -859,7 +859,7 @@ mod test_qsort {\n         let immut_names = names;\n \n         let pairs = vec::zip_slice(expected, immut_names);\n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             let (a, b) = *p;\n             debug!(\"%d %d\", a, b);\n             assert!((a == b));"}, {"sha": "044c616dcd32ca9626d763c28256dcfec8558eea", "filename": "src/libstd/sort_stage0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsort_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsort_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort_stage0.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -852,7 +852,7 @@ mod test_qsort {\n         let immut_names = names;\n \n         let pairs = vec::zip_slice(expected, immut_names);\n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             let (a, b) = *p;\n             debug!(\"%d %d\", a, b);\n             assert!((a == b));"}, {"sha": "17d051518a9ec5351049a97af3dc0f08cca11ed9", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -997,7 +997,7 @@ mod tests {\n                     }\n                 }\n             }\n-            for vec::each(sibling_convos) |p| {\n+            for sibling_convos.each |p| {\n                 let _ = p.recv(); // wait for sibling to get in the mutex\n             }\n             do m2.lock { }"}, {"sha": "236c7f668c2e02645ac8fb52d1dc94d83a9b0da3", "filename": "src/libstd/term.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -13,7 +13,6 @@\n use core::io;\n use core::option;\n use core::os;\n-use core::vec;\n \n // FIXME (#2807): Windows support.\n \n@@ -50,7 +49,7 @@ pub fn color_supported() -> bool {\n                            ~\"screen-bce\", ~\"xterm-256color\"];\n     return match os::getenv(~\"TERM\") {\n           option::Some(ref env) => {\n-            for vec::each(supported_terms) |term| {\n+            for supported_terms.each |term| {\n                 if *term == *env { return true; }\n             }\n             false"}, {"sha": "1a864b09a35a4137162936a487374e66b1931e79", "filename": "src/libstd/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -355,7 +355,7 @@ fn print_failures(st: &ConsoleTestState) {\n         failures.push(name.to_str());\n     }\n     sort::tim_sort(failures);\n-    for vec::each(failures) |name| {\n+    for failures.each |name| {\n         st.out.write_line(fmt!(\"    %s\", name.to_str()));\n     }\n }\n@@ -928,7 +928,7 @@ mod tests {\n         {\n             fn testfn() { }\n             let mut tests = ~[];\n-            for vec::each(names) |name| {\n+            for names.each |name| {\n                 let test = TestDescAndFn {\n                     desc: TestDesc {\n                         name: DynTestName(*name),\n@@ -954,7 +954,7 @@ mod tests {\n \n         let pairs = vec::zip(expected, filtered);\n \n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             match *p {\n                 (ref a, ref b) => {\n                     assert!((*a == b.desc.name.to_str()));"}, {"sha": "31d8eb20a6753f1502444e914194cb3600ea2922", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -861,7 +861,6 @@ mod tests {\n     use core::result;\n     use core::result::{Err, Ok};\n     use core::str;\n-    use core::vec;\n \n     fn test_get_time() {\n         static some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n@@ -1028,31 +1027,31 @@ mod tests {\n             }\n         }\n \n-        for vec::each([\n+        for [\n             ~\"Sunday\",\n             ~\"Monday\",\n             ~\"Tuesday\",\n             ~\"Wednesday\",\n             ~\"Thursday\",\n             ~\"Friday\",\n             ~\"Saturday\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%A\"));\n         }\n \n-        for vec::each([\n+        for [\n             ~\"Sun\",\n             ~\"Mon\",\n             ~\"Tue\",\n             ~\"Wed\",\n             ~\"Thu\",\n             ~\"Fri\",\n             ~\"Sat\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%a\"));\n         }\n \n-        for vec::each([\n+        for [\n             ~\"January\",\n             ~\"February\",\n             ~\"March\",\n@@ -1065,11 +1064,11 @@ mod tests {\n             ~\"October\",\n             ~\"November\",\n             ~\"December\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%B\"));\n         }\n \n-        for vec::each([\n+        for [\n             ~\"Jan\",\n             ~\"Feb\",\n             ~\"Mar\",\n@@ -1082,7 +1081,7 @@ mod tests {\n             ~\"Oct\",\n             ~\"Nov\",\n             ~\"Dec\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%b\"));\n         }\n "}, {"sha": "77277dea81453f571dd372300700f7ad679187f8", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c07dcf0137b7ef456e82b9e70c3a2743dbe16/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=936c07dcf0137b7ef456e82b9e70c3a2743dbe16", "patch": "@@ -461,7 +461,7 @@ pub fn id_visitor(vfn: @fn(node_id)) -> visit::vt<()> {\n                 }\n             }\n \n-            for vec::each(d.inputs) |arg| {\n+            for d.inputs.each |arg| {\n                 vfn(arg.id)\n             }\n         },"}]}