{"sha": "ab55ecf4ba607985db28678b8bbe846d567a35d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTVlY2Y0YmE2MDc5ODVkYjI4Njc4YjhiYmU4NDZkNTY3YTM1ZDU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-01-05T15:56:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-05T15:56:59Z"}, "message": "Rollup merge of #57314 - wiktorkuchta:master, r=Centril\n\nFix repeated word typos\n\nInspired by #57295 (I skipped 'be be' because of it) and my [PR in another repo\n](https://github.com/e-maxx-eng/e-maxx-eng/pull/389)\nNot a stupid `sed`, I actually tried to fix case by case.", "tree": {"sha": "1aa4a2b518f03f4971c56cc6141096a681e9470d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa4a2b518f03f4971c56cc6141096a681e9470d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab55ecf4ba607985db28678b8bbe846d567a35d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMNPLCRBK7hj4Ov3rIwAAdHIIAKLZz52khBpOIiCBOn/RypIk\nE8EjYuuGeaXipEpik1F/rKRpNX1cLekoXgjc4tI6PV77mpBTueoyVRGGMmg2XR/h\nn7ICtW0WJyI8nuAq+jeTqwYfU8HI9w1r2SZetB4MZNn/tI3FKfu7s0YtsOBg/spp\nd9snUEp+6m4L/X2BqZPMt7nvSxdRiEjvQriHU55j1b3No3/198C1IALhRek0ndRx\nyHlD3W9RQCxmyRxlkoQpmMTRHdwoT/sR6ShM5t/0spv26UEmbkOSJoxFUfyMC9ML\nlxtnIexVkK8F/J8aWYlz5Ys4Bf+sXYjD3FZJT0KqaLjXZm8i3E38QHm/udIOz+w=\n=7Miy\n-----END PGP SIGNATURE-----\n", "payload": "tree 1aa4a2b518f03f4971c56cc6141096a681e9470d\nparent 676b0b0cc4f3a9801051696b3f7b88e75c7b9764\nparent 06243b1f4d3d8aba1ef1d2050378baab689250c3\nauthor kennytm <kennytm@gmail.com> 1546703819 +0800\ncommitter GitHub <noreply@github.com> 1546703819 +0800\n\nRollup merge of #57314 - wiktorkuchta:master, r=Centril\n\nFix repeated word typos\n\nInspired by #57295 (I skipped 'be be' because of it) and my [PR in another repo\n](https://github.com/e-maxx-eng/e-maxx-eng/pull/389)\nNot a stupid `sed`, I actually tried to fix case by case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab55ecf4ba607985db28678b8bbe846d567a35d5", "html_url": "https://github.com/rust-lang/rust/commit/ab55ecf4ba607985db28678b8bbe846d567a35d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab55ecf4ba607985db28678b8bbe846d567a35d5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "url": "https://api.github.com/repos/rust-lang/rust/commits/676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "html_url": "https://github.com/rust-lang/rust/commit/676b0b0cc4f3a9801051696b3f7b88e75c7b9764"}, {"sha": "06243b1f4d3d8aba1ef1d2050378baab689250c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/06243b1f4d3d8aba1ef1d2050378baab689250c3", "html_url": "https://github.com/rust-lang/rust/commit/06243b1f4d3d8aba1ef1d2050378baab689250c3"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "7fbbe686b5bd02b90a9bdd8b3d678cb46f05ee0a", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -24,7 +24,7 @@ warning: attempt to add with overflow\n \n ## dead-code\n \n-This lint detects detect unused, unexported items. Some\n+This lint detects unused, unexported items. Some\n example code that triggers this lint:\n \n ```rust\n@@ -44,7 +44,7 @@ warning: function is never used: `foo`\n \n ## deprecated\n \n-This lint detects detects use of deprecated items. Some\n+This lint detects use of deprecated items. Some\n example code that triggers this lint:\n \n ```rust\n@@ -119,7 +119,7 @@ warning: found struct without foreign-function-safe representation annotation in\n \n ## late-bound-lifetime-arguments\n \n-This lint detects detects generic lifetime arguments in path segments with\n+This lint detects generic lifetime arguments in path segments with\n late bound lifetime parameters. Some example code that triggers this lint:\n \n ```rust\n@@ -381,7 +381,7 @@ extern crate macro_crate_test;\n \n ## private-in-public\n \n-This lint detects detect private items in public interfaces not caught by the old implementation. Some\n+This lint detects private items in public interfaces not caught by the old implementation. Some\n example code that triggers this lint:\n \n ```rust,ignore\n@@ -659,7 +659,7 @@ warning: unknown lint: `not_a_real_lint`\n \n ## unreachable-code\n \n-This lint detects detects unreachable code paths. Some example code that\n+This lint detects unreachable code paths. Some example code that\n triggers this lint:\n \n ```rust,no_run\n@@ -681,7 +681,7 @@ warning: unreachable statement\n \n ## unreachable-patterns\n \n-This lint detects detects unreachable patterns. Some\n+This lint detects unreachable patterns. Some\n example code that triggers this lint:\n \n ```rust\n@@ -716,11 +716,11 @@ annotations now.\n \n ## unused-allocation\n \n-This lint detects detects unnecessary allocations that can be eliminated.\n+This lint detects unnecessary allocations that can be eliminated.\n \n ## unused-assignments\n \n-This lint detects detect assignments that will never be read. Some\n+This lint detects assignments that will never be read. Some\n example code that triggers this lint:\n \n ```rust\n@@ -741,7 +741,7 @@ warning: value assigned to `x` is never read\n \n ## unused-attributes\n \n-This lint detects detects attributes that were not used by the compiler. Some\n+This lint detects attributes that were not used by the compiler. Some\n example code that triggers this lint:\n \n ```rust\n@@ -785,7 +785,7 @@ warning: comparison is useless due to type limits\n \n ## unused-doc-comment\n \n-This lint detects detects doc comments that aren't used by rustdoc. Some\n+This lint detects doc comments that aren't used by rustdoc. Some\n example code that triggers this lint:\n \n ```rust\n@@ -831,7 +831,7 @@ warning: unused import: `std::collections::HashMap`\n \n ## unused-macros\n \n-This lint detects detects macros that were not used. Some example code that\n+This lint detects macros that were not used. Some example code that\n triggers this lint:\n \n ```rust\n@@ -884,7 +884,7 @@ warning: unused `std::result::Result` that must be used\n \n ## unused-mut\n \n-This lint detects detect mut variables which don't need to be mutable. Some\n+This lint detects mut variables which don't need to be mutable. Some\n example code that triggers this lint:\n \n ```rust\n@@ -946,7 +946,7 @@ warning: unnecessary `unsafe` block\n \n ## unused-variables\n \n-This lint detects detect variables which are not used in any way. Some\n+This lint detects variables which are not used in any way. Some\n example code that triggers this lint:\n \n ```rust"}, {"sha": "dcc13f53493f443f051cfa5a88687f4d901f533f", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -171,7 +171,7 @@ compiles, while only showing the parts that are relevant to that part of your\n explanation.\n \n The `#`-hiding of lines can be prevented by using two consecutive hashes\n-`##`. This only needs to be done with with the first `#` which would've\n+`##`. This only needs to be done with the first `#` which would've\n otherwise caused hiding. If we have a string literal like the following,\n which has a line that starts with a `#`:\n "}, {"sha": "5e94bb1f877fb2539521a23fbdc759cec8cc80d7", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -19,7 +19,7 @@ pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n /// appear in the return type).\n #[derive(Copy, Clone, Debug)]\n pub struct OpaqueTypeDecl<'tcx> {\n-    /// The substitutions that we apply to the abstract that that this\n+    /// The substitutions that we apply to the abstract that this\n     /// `impl Trait` desugars to. e.g., if:\n     ///\n     ///     fn foo<'a, 'b, T>() -> impl Trait<'a>"}, {"sha": "76eb43e73d16645b5d04bad237c4abef4cf7d90d", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -79,7 +79,7 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n     /// The raw bytes of a simple value.\n     Bits {\n         /// The first `size` bytes are the value.\n-        /// Do not try to read less or more bytes that that. The remaining bytes must be 0.\n+        /// Do not try to read less or more bytes than that. The remaining bytes must be 0.\n         size: u8,\n         bits: u128,\n     },"}, {"sha": "28b6f010ce09c7bd10e488232f75eb3ca45dfc03", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -109,7 +109,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }\n \n-    /// True if there any any un-erased free regions.\n+    /// True if there are any un-erased free regions.\n     fn has_erasable_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }"}, {"sha": "7ad34bec899f476b1997ee637a0157bf1791dbcd", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -2341,7 +2341,7 @@ mod sig {\n             // Our exponent should not underflow.\n             *exp = exp.checked_sub(bits as ExpInt).unwrap();\n \n-            // Jump is the inter-limb jump; shift is is intra-limb shift.\n+            // Jump is the inter-limb jump; shift is the intra-limb shift.\n             let jump = bits / LIMB_BITS;\n             let shift = bits % LIMB_BITS;\n \n@@ -2375,7 +2375,7 @@ mod sig {\n             // Our exponent should not overflow.\n             *exp = exp.checked_add(bits as ExpInt).unwrap();\n \n-            // Jump is the inter-limb jump; shift is is intra-limb shift.\n+            // Jump is the inter-limb jump; shift is the intra-limb shift.\n             let jump = bits / LIMB_BITS;\n             let shift = bits % LIMB_BITS;\n "}, {"sha": "a555b7790971f5426fd89147268cd8b0a6d1295b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -673,7 +673,7 @@ impl EarlyLintPass for AnonymousParameters {\n     }\n }\n \n-/// Checks for incorrect use use of `repr` attributes.\n+/// Checks for incorrect use of `repr` attributes.\n #[derive(Clone)]\n pub struct BadRepr;\n "}, {"sha": "3f9c5f4fd273cfef46aee9937da232f4c8257e62", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -192,7 +192,7 @@ use foo::core;  // error: an extern crate named `core` has already\n fn main() {}\n ```\n \n-To fix issue issue, you have to rename at least one of the two imports.\n+To fix this issue, you have to rename at least one of the two imports.\n Example:\n \n ```"}, {"sha": "8e5eaa18b9de0717ba53c5ed96765252bb1f4409", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -1,6 +1,6 @@\n //! Conversion from AST representation of types to the `ty.rs` representation.\n-//! The main routine here is `ast_ty_to_ty()`; each use is is parameterized by\n-//! an instance of `AstConv`.\n+//! The main routine here is `ast_ty_to_ty()`; each use is parameterized by an\n+//! instance of `AstConv`.\n \n use errors::{Applicability, FatalError, DiagnosticId};\n use hir::{self, GenericArg, GenericArgs};"}, {"sha": "41f2b0ec7d24e829a67dd3e7f6c087a8f17fa7bc", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // we may want to suggest adding a `*`, or removing\n                 // a `&`.\n                 //\n-                // (But, also check check the `expn_info()` to see if this is\n+                // (But, also check the `expn_info()` to see if this is\n                 // a macro; if so, it's hard to extract the text and make a good\n                 // suggestion, so don't bother.)\n                 if self.infcx.can_sub(self.param_env, checked, &expected).is_ok() &&"}, {"sha": "27ca205720d6a8c3107a415b04129644f888783f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -534,7 +534,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             did, param_env, type_generics, existing_predicates\n         );\n \n-        // The `Sized` trait must be handled specially, since we only only display it when\n+        // The `Sized` trait must be handled specially, since we only display it when\n         // it is *not* required (i.e., '?Sized')\n         let sized_trait = self.cx\n             .tcx"}, {"sha": "92145907b95f68bb87733c0162f79a7c72471add", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -179,7 +179,7 @@ impl<T, S> HashSet<T, S>\n         HashSet { map: HashMap::with_hasher(hasher) }\n     }\n \n-    /// Creates an empty `HashSet` with with the specified capacity, using\n+    /// Creates an empty `HashSet` with the specified capacity, using\n     /// `hasher` to hash the keys.\n     ///\n     /// The hash set will be able to hold at least `capacity` elements without"}, {"sha": "aac1804734ae3d192f5bebaea9d5906c3c6eead3", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -107,7 +107,7 @@\n //!\n //! ## Specification of the ABI\n //!\n-//! The entire ABI is specified in a a file called\n+//! The entire ABI is specified in a file called\n //! [`cloudabi.txt`](https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt),\n //! from which all\n //! [headers](https://github.com/NuxiNL/cloudabi/tree/master/headers)"}, {"sha": "6342af46daf0ab8071bfa5164c72c5669966cfa0", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -126,7 +126,7 @@ pub trait OpenOptionsExt {\n     ///\n     /// By default `share_mode` is set to\n     /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. This allows\n-    /// other processes to to read, write, and delete/rename the same file\n+    /// other processes to read, write, and delete/rename the same file\n     /// while it is open. Removing any of the flags will prevent other\n     /// processes from performing the corresponding operation until the file\n     /// handle is closed."}, {"sha": "d55f785bd9b4b5f695d33994c99a06cd087ac868", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -161,7 +161,7 @@ struct MatcherPos<'root, 'tt: 'root> {\n     /// The position of the \"dot\" in this matcher\n     idx: usize,\n \n-    /// The first span of source source that the beginning of this matcher corresponds to. In other\n+    /// The first span of source that the beginning of this matcher corresponds to. In other\n     /// words, the token in the source whose span is `sp_open` is matched against the first token of\n     /// the matcher.\n     sp_open: Span,"}, {"sha": "e41acc2e1ec7105d42380b7b337b5aa1493998d8", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -4,7 +4,7 @@\n \n // FIXME: LLVM generates invalid debug info for variables requiring\n // dynamic stack realignment, which is the case on s390x for vector\n-// types with with non-vector ABI.\n+// types with non-vector ABI.\n // ignore-s390x\n \n // compile-flags:-g"}, {"sha": "78ac2f6a82da5ad6addfc6bb18215d3f437c8111", "filename": "src/test/run-make-fulldeps/relro-levels/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# This tests the different -Zrelro-level values, and makes sure that they they work properly.\n+# This tests the different -Zrelro-level values, and makes sure that they work properly.\n \n all:\n ifeq ($(UNAME),Linux)"}, {"sha": "400c205d44b20f147348e8f1ee0566f346c739bb", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab55ecf4ba607985db28678b8bbe846d567a35d5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ab55ecf4ba607985db28678b8bbe846d567a35d5", "patch": "@@ -2569,7 +2569,7 @@ impl<'test> TestCx<'test> {\n             .env(\"LLVM_CXXFLAGS\", &self.config.llvm_cxxflags)\n \n             // We for sure don't want these tests to run in parallel, so make\n-            // sure they don't have access to these vars if we we run via `make`\n+            // sure they don't have access to these vars if we run via `make`\n             // at the top level\n             .env_remove(\"MAKEFLAGS\")\n             .env_remove(\"MFLAGS\")"}]}