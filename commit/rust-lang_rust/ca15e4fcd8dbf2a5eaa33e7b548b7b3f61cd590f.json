{"sha": "ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTVlNGZjZDhkYmYyYTVlYWEzM2U3YjU0OGI3YjNmNjFjZDU5MGY=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-02-17T01:42:42Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-02-22T01:32:15Z"}, "message": "cat vector types by kind\n\nRearrange aliases to bottom of files", "tree": {"sha": "7264ed86615bff108eb0c49081b1a694b509e4c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7264ed86615bff108eb0c49081b1a694b509e4c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "html_url": "https://github.com/rust-lang/rust/commit/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27f094f5ee216b499ee9e666a7f6bdba361443f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/27f094f5ee216b499ee9e666a7f6bdba361443f9", "html_url": "https://github.com/rust-lang/rust/commit/27f094f5ee216b499ee9e666a7f6bdba361443f9"}], "stats": {"total": 557, "additions": 262, "deletions": 295}, "files": [{"sha": "95534384b705c37f66236bfbb6616d09968ddb2b", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "patch": "@@ -1,27 +1,3 @@\n-mod vectors_f64;\n-mod vectors_i128;\n-mod vectors_i16;\n-mod vectors_i32;\n-mod vectors_i64;\n-mod vectors_i8;\n-mod vectors_u128;\n-mod vectors_u16;\n-mod vectors_u32;\n-mod vectors_u64;\n-mod vectors_u8;\n-\n-pub use vectors_f64::*;\n-pub use vectors_i128::*;\n-pub use vectors_i16::*;\n-pub use vectors_i32::*;\n-pub use vectors_i64::*;\n-pub use vectors_i8::*;\n-pub use vectors_u128::*;\n-pub use vectors_u16::*;\n-pub use vectors_u32::*;\n-pub use vectors_u64::*;\n-pub use vectors_u8::*;\n-\n mod float;\n mod int;\n mod uint;"}, {"sha": "56f43d0a18cf3192677388e906756fe572709013", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "patch": "@@ -8,6 +8,22 @@ where\n \n impl_float_vector! { SimdF32, f32, SimdU32 }\n \n+from_transmute_x86! { unsafe f32x4 => __m128 }\n+from_transmute_x86! { unsafe f32x8 => __m256 }\n+//from_transmute_x86! { unsafe f32x16 => __m512 }\n+\n+/// A SIMD vector of containing `LANES` `f64` values.\n+#[repr(simd)]\n+pub struct SimdF64<const LANES: usize>([f64; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_float_vector! { SimdF64, f64, SimdU64 }\n+\n+from_transmute_x86! { unsafe f64x2 => __m128d }\n+from_transmute_x86! { unsafe f64x4 => __m256d }\n+//from_transmute_x86! { unsafe f64x8 => __m512d }\n+\n /// Vector of two `f32` values\n pub type f32x2 = SimdF32<2>;\n \n@@ -20,6 +36,11 @@ pub type f32x8 = SimdF32<8>;\n /// Vector of 16 `f32` values\n pub type f32x16 = SimdF32<16>;\n \n-from_transmute_x86! { unsafe f32x4 => __m128 }\n-from_transmute_x86! { unsafe f32x8 => __m256 }\n-//from_transmute_x86! { unsafe f32x16 => __m512 }\n+/// Vector of two `f64` values\n+pub type f64x2 = SimdF64<2>;\n+\n+/// Vector of four `f64` values\n+pub type f64x4 = SimdF64<4>;\n+\n+/// Vector of eight `f64` values\n+pub type f64x8 = SimdF64<8>;"}, {"sha": "100e1d5afac6d7098c9f9d7cd1045462e37c4557", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 119, "deletions": 9, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "patch": "@@ -8,15 +8,6 @@ where\n \n impl_integer_vector! { SimdIsize, isize }\n \n-/// Vector of two `isize` values\n-pub type isizex2 = SimdIsize<2>;\n-\n-/// Vector of four `isize` values\n-pub type isizex4 = SimdIsize<4>;\n-\n-/// Vector of eight `isize` values\n-pub type isizex8 = SimdIsize<8>;\n-\n #[cfg(target_pointer_width = \"32\")]\n from_transmute_x86! { unsafe isizex4 => __m128i }\n #[cfg(target_pointer_width = \"32\")]\n@@ -28,3 +19,122 @@ from_transmute_x86! { unsafe isizex2 => __m128i }\n from_transmute_x86! { unsafe isizex4 => __m256i }\n //#[cfg(target_pointer_width = \"64\")]\n //from_transmute_x86! { unsafe isizex8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i128` values.\n+#[repr(simd)]\n+pub struct SimdI128<const LANES: usize>([i128; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI128, i128 }\n+\n+from_transmute_x86! { unsafe i128x2 => __m256i }\n+//from_transmute_x86! { unsafe i128x4 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i16` values.\n+#[repr(simd)]\n+pub struct SimdI16<const LANES: usize>([i16; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI16, i16 }\n+\n+from_transmute_x86! { unsafe i16x8 => __m128i }\n+from_transmute_x86! { unsafe i16x16 => __m256i }\n+//from_transmute_x86! { unsafe i16x32 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i32` values.\n+#[repr(simd)]\n+pub struct SimdI32<const LANES: usize>([i32; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI32, i32 }\n+\n+from_transmute_x86! { unsafe i32x4 => __m128i }\n+from_transmute_x86! { unsafe i32x8 => __m256i }\n+//from_transmute_x86! { unsafe i32x16 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i64` values.\n+#[repr(simd)]\n+pub struct SimdI64<const LANES: usize>([i64; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI64, i64 }\n+\n+from_transmute_x86! { unsafe i64x2 => __m128i }\n+from_transmute_x86! { unsafe i64x4 => __m256i }\n+//from_transmute_x86! { unsafe i64x8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `i8` values.\n+#[repr(simd)]\n+pub struct SimdI8<const LANES: usize>([i8; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdI8, i8 }\n+\n+from_transmute_x86! { unsafe i8x16 => __m128i }\n+from_transmute_x86! { unsafe i8x32 => __m256i }\n+//from_transmute_x86! { unsafe i8x64 => __m512i }\n+\n+/// Vector of two `isize` values\n+pub type isizex2 = SimdIsize<2>;\n+\n+/// Vector of four `isize` values\n+pub type isizex4 = SimdIsize<4>;\n+\n+/// Vector of eight `isize` values\n+pub type isizex8 = SimdIsize<8>;\n+\n+/// Vector of two `i128` values\n+pub type i128x2 = SimdI128<2>;\n+\n+/// Vector of four `i128` values\n+pub type i128x4 = SimdI128<4>;\n+\n+/// Vector of four `i16` values\n+pub type i16x4 = SimdI16<4>;\n+\n+/// Vector of eight `i16` values\n+pub type i16x8 = SimdI16<8>;\n+\n+/// Vector of 16 `i16` values\n+pub type i16x16 = SimdI16<16>;\n+\n+/// Vector of 32 `i16` values\n+pub type i16x32 = SimdI16<32>;\n+\n+/// Vector of two `i32` values\n+pub type i32x2 = SimdI32<2>;\n+\n+/// Vector of four `i32` values\n+pub type i32x4 = SimdI32<4>;\n+\n+/// Vector of eight `i32` values\n+pub type i32x8 = SimdI32<8>;\n+\n+/// Vector of 16 `i32` values\n+pub type i32x16 = SimdI32<16>;\n+\n+/// Vector of two `i64` values\n+pub type i64x2 = SimdI64<2>;\n+\n+/// Vector of four `i64` values\n+pub type i64x4 = SimdI64<4>;\n+\n+/// Vector of eight `i64` values\n+pub type i64x8 = SimdI64<8>;\n+\n+/// Vector of eight `i8` values\n+pub type i8x8 = SimdI8<8>;\n+\n+/// Vector of 16 `i8` values\n+pub type i8x16 = SimdI8<16>;\n+\n+/// Vector of 32 `i8` values\n+pub type i8x32 = SimdI8<32>;\n+\n+/// Vector of 64 `i8` values\n+pub type i8x64 = SimdI8<64>;"}, {"sha": "6a16f06e50f286eef08196e71dd76ef4cdc537f2", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 119, "deletions": 9, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=ca15e4fcd8dbf2a5eaa33e7b548b7b3f61cd590f", "patch": "@@ -8,15 +8,6 @@ where\n \n impl_integer_vector! { SimdUsize, usize }\n \n-/// Vector of two `usize` values\n-pub type usizex2 = SimdUsize<2>;\n-\n-/// Vector of four `usize` values\n-pub type usizex4 = SimdUsize<4>;\n-\n-/// Vector of eight `usize` values\n-pub type usizex8 = SimdUsize<8>;\n-\n #[cfg(target_pointer_width = \"32\")]\n from_transmute_x86! { unsafe usizex4 => __m128i }\n #[cfg(target_pointer_width = \"32\")]\n@@ -28,3 +19,122 @@ from_transmute_x86! { unsafe usizex2 => __m128i }\n from_transmute_x86! { unsafe usizex4 => __m256i }\n //#[cfg(target_pointer_width = \"64\")]\n //from_transmute_x86! { unsafe usizex8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u128` values.\n+#[repr(simd)]\n+pub struct SimdU128<const LANES: usize>([u128; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdU128, u128 }\n+\n+from_transmute_x86! { unsafe u128x2 => __m256i }\n+//from_transmute_x86! { unsafe u128x4 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u16` values.\n+#[repr(simd)]\n+pub struct SimdU16<const LANES: usize>([u16; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdU16, u16 }\n+\n+from_transmute_x86! { unsafe u16x8 => __m128i }\n+from_transmute_x86! { unsafe u16x16 => __m256i }\n+//from_transmute_x86! { unsafe u16x32 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u32` values.\n+#[repr(simd)]\n+pub struct SimdU32<const LANES: usize>([u32; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdU32, u32 }\n+\n+from_transmute_x86! { unsafe u32x4 => __m128i }\n+from_transmute_x86! { unsafe u32x8 => __m256i }\n+//from_transmute_x86! { unsafe u32x16 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u64` values.\n+#[repr(simd)]\n+pub struct SimdU64<const LANES: usize>([u64; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdU64, u64 }\n+\n+from_transmute_x86! { unsafe u64x2 => __m128i }\n+from_transmute_x86! { unsafe u64x4 => __m256i }\n+//from_transmute_x86! { unsafe u64x8 => __m512i }\n+\n+/// A SIMD vector of containing `LANES` `u8` values.\n+#[repr(simd)]\n+pub struct SimdU8<const LANES: usize>([u8; LANES])\n+where\n+    Self: crate::LanesAtMost64;\n+\n+impl_integer_vector! { SimdU8, u8 }\n+\n+from_transmute_x86! { unsafe u8x16 => __m128i }\n+from_transmute_x86! { unsafe u8x32 => __m256i }\n+//from_transmute_x86! { unsafe u8x64 => __m512i }\n+\n+/// Vector of two `usize` values\n+pub type usizex2 = SimdUsize<2>;\n+\n+/// Vector of four `usize` values\n+pub type usizex4 = SimdUsize<4>;\n+\n+/// Vector of eight `usize` values\n+pub type usizex8 = SimdUsize<8>;\n+\n+/// Vector of two `u128` values\n+pub type u128x2 = SimdU128<2>;\n+\n+/// Vector of four `u128` values\n+pub type u128x4 = SimdU128<4>;\n+\n+/// Vector of four `u16` values\n+pub type u16x4 = SimdU16<4>;\n+\n+/// Vector of eight `u16` values\n+pub type u16x8 = SimdU16<8>;\n+\n+/// Vector of 16 `u16` values\n+pub type u16x16 = SimdU16<16>;\n+\n+/// Vector of 32 `u16` values\n+pub type u16x32 = SimdU16<32>;\n+\n+/// Vector of two `u32` values\n+pub type u32x2 = SimdU32<2>;\n+\n+/// Vector of four `u32` values\n+pub type u32x4 = SimdU32<4>;\n+\n+/// Vector of eight `u32` values\n+pub type u32x8 = SimdU32<8>;\n+\n+/// Vector of 16 `u32` values\n+pub type u32x16 = SimdU32<16>;\n+\n+/// Vector of two `u64` values\n+pub type u64x2 = SimdU64<2>;\n+\n+/// Vector of four `u64` values\n+pub type u64x4 = SimdU64<4>;\n+\n+/// Vector of eight `u64` values\n+pub type u64x8 = SimdU64<8>;\n+\n+/// Vector of eight `u8` values\n+pub type u8x8 = SimdU8<8>;\n+\n+/// Vector of 16 `u8` values\n+pub type u8x16 = SimdU8<16>;\n+\n+/// Vector of 32 `u8` values\n+pub type u8x32 = SimdU8<32>;\n+\n+/// Vector of 64 `u8` values\n+pub type u8x64 = SimdU8<64>;"}, {"sha": "c0dca6a52ac621b63fad65aa49f307214bce1b27", "filename": "crates/core_simd/src/vector/vectors_f64.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_f64.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,22 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `f64` values.\n-#[repr(simd)]\n-pub struct SimdF64<const LANES: usize>([f64; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_float_vector! { SimdF64, f64, SimdU64 }\n-\n-/// Vector of two `f64` values\n-pub type f64x2 = SimdF64<2>;\n-\n-/// Vector of four `f64` values\n-pub type f64x4 = SimdF64<4>;\n-\n-/// Vector of eight `f64` values\n-pub type f64x8 = SimdF64<8>;\n-\n-from_transmute_x86! { unsafe f64x2 => __m128d }\n-from_transmute_x86! { unsafe f64x4 => __m256d }\n-//from_transmute_x86! { unsafe f64x8 => __m512d }"}, {"sha": "568fa81da80edf0937fdc7b3de9408ab4296d741", "filename": "crates/core_simd/src/vector/vectors_i128.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i128.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,18 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i128` values.\n-#[repr(simd)]\n-pub struct SimdI128<const LANES: usize>([i128; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI128, i128 }\n-\n-/// Vector of two `i128` values\n-pub type i128x2 = SimdI128<2>;\n-\n-/// Vector of four `i128` values\n-pub type i128x4 = SimdI128<4>;\n-\n-from_transmute_x86! { unsafe i128x2 => __m256i }\n-//from_transmute_x86! { unsafe i128x4 => __m512i }"}, {"sha": "d77e593a2edc46b40065499c7ab233765bcc0667", "filename": "crates/core_simd/src/vector/vectors_i16.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i16.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i16` values.\n-#[repr(simd)]\n-pub struct SimdI16<const LANES: usize>([i16; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI16, i16 }\n-\n-/// Vector of four `i16` values\n-pub type i16x4 = SimdI16<4>;\n-\n-/// Vector of eight `i16` values\n-pub type i16x8 = SimdI16<8>;\n-\n-/// Vector of 16 `i16` values\n-pub type i16x16 = SimdI16<16>;\n-\n-/// Vector of 32 `i16` values\n-pub type i16x32 = SimdI16<32>;\n-\n-from_transmute_x86! { unsafe i16x8 => __m128i }\n-from_transmute_x86! { unsafe i16x16 => __m256i }\n-//from_transmute_x86! { unsafe i16x32 => __m512i }"}, {"sha": "0a89eeda3b2f844fb45bc40b9f9614ea3ea2b515", "filename": "crates/core_simd/src/vector/vectors_i32.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i32.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i32` values.\n-#[repr(simd)]\n-pub struct SimdI32<const LANES: usize>([i32; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI32, i32 }\n-\n-/// Vector of two `i32` values\n-pub type i32x2 = SimdI32<2>;\n-\n-/// Vector of four `i32` values\n-pub type i32x4 = SimdI32<4>;\n-\n-/// Vector of eight `i32` values\n-pub type i32x8 = SimdI32<8>;\n-\n-/// Vector of 16 `i32` values\n-pub type i32x16 = SimdI32<16>;\n-\n-from_transmute_x86! { unsafe i32x4 => __m128i }\n-from_transmute_x86! { unsafe i32x8 => __m256i }\n-//from_transmute_x86! { unsafe i32x16 => __m512i }"}, {"sha": "017140654a515375f5988f35fbe4bc25e778d715", "filename": "crates/core_simd/src/vector/vectors_i64.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i64.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,22 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i64` values.\n-#[repr(simd)]\n-pub struct SimdI64<const LANES: usize>([i64; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI64, i64 }\n-\n-/// Vector of two `i64` values\n-pub type i64x2 = SimdI64<2>;\n-\n-/// Vector of four `i64` values\n-pub type i64x4 = SimdI64<4>;\n-\n-/// Vector of eight `i64` values\n-pub type i64x8 = SimdI64<8>;\n-\n-from_transmute_x86! { unsafe i64x2 => __m128i }\n-from_transmute_x86! { unsafe i64x4 => __m256i }\n-//from_transmute_x86! { unsafe i64x8 => __m512i }"}, {"sha": "e21126533b8846b3708d3cf91af65030b94ff41e", "filename": "crates/core_simd/src/vector/vectors_i8.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_i8.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `i8` values.\n-#[repr(simd)]\n-pub struct SimdI8<const LANES: usize>([i8; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdI8, i8 }\n-\n-/// Vector of eight `i8` values\n-pub type i8x8 = SimdI8<8>;\n-\n-/// Vector of 16 `i8` values\n-pub type i8x16 = SimdI8<16>;\n-\n-/// Vector of 32 `i8` values\n-pub type i8x32 = SimdI8<32>;\n-\n-/// Vector of 64 `i8` values\n-pub type i8x64 = SimdI8<64>;\n-\n-from_transmute_x86! { unsafe i8x16 => __m128i }\n-from_transmute_x86! { unsafe i8x32 => __m256i }\n-//from_transmute_x86! { unsafe i8x64 => __m512i }"}, {"sha": "7931b9e088f6fb516d0fc635f2253e96982c978e", "filename": "crates/core_simd/src/vector/vectors_u128.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u128.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,18 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u128` values.\n-#[repr(simd)]\n-pub struct SimdU128<const LANES: usize>([u128; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU128, u128 }\n-\n-/// Vector of two `u128` values\n-pub type u128x2 = SimdU128<2>;\n-\n-/// Vector of four `u128` values\n-pub type u128x4 = SimdU128<4>;\n-\n-from_transmute_x86! { unsafe u128x2 => __m256i }\n-//from_transmute_x86! { unsafe u128x4 => __m512i }"}, {"sha": "91c0e6168089971bf3c27c1f6439cf61473013f2", "filename": "crates/core_simd/src/vector/vectors_u16.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u16.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u16` values.\n-#[repr(simd)]\n-pub struct SimdU16<const LANES: usize>([u16; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU16, u16 }\n-\n-/// Vector of four `u16` values\n-pub type u16x4 = SimdU16<4>;\n-\n-/// Vector of eight `u16` values\n-pub type u16x8 = SimdU16<8>;\n-\n-/// Vector of 16 `u16` values\n-pub type u16x16 = SimdU16<16>;\n-\n-/// Vector of 32 `u16` values\n-pub type u16x32 = SimdU16<32>;\n-\n-from_transmute_x86! { unsafe u16x8 => __m128i }\n-from_transmute_x86! { unsafe u16x16 => __m256i }\n-//from_transmute_x86! { unsafe u16x32 => __m512i }"}, {"sha": "b0400b5ba3a948fb6a6238b54d6e1fe1c32429af", "filename": "crates/core_simd/src/vector/vectors_u32.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u32.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,25 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u32` values.\n-#[repr(simd)]\n-pub struct SimdU32<const LANES: usize>([u32; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU32, u32 }\n-\n-/// Vector of two `u32` values\n-pub type u32x2 = SimdU32<2>;\n-\n-/// Vector of four `u32` values\n-pub type u32x4 = SimdU32<4>;\n-\n-/// Vector of eight `u32` values\n-pub type u32x8 = SimdU32<8>;\n-\n-/// Vector of 16 `u32` values\n-pub type u32x16 = SimdU32<16>;\n-\n-from_transmute_x86! { unsafe u32x4 => __m128i }\n-from_transmute_x86! { unsafe u32x8 => __m256i }\n-//from_transmute_x86! { unsafe u32x16 => __m512i }"}, {"sha": "0f3712241fe7714ddf2dbf018ddf20b0eaf30ab5", "filename": "crates/core_simd/src/vector/vectors_u64.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u64.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,22 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u64` values.\n-#[repr(simd)]\n-pub struct SimdU64<const LANES: usize>([u64; LANES])\n-where\n-    Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU64, u64 }\n-\n-/// Vector of two `u64` values\n-pub type u64x2 = SimdU64<2>;\n-\n-/// Vector of four `u64` values\n-pub type u64x4 = SimdU64<4>;\n-\n-/// Vector of eight `u64` values\n-pub type u64x8 = SimdU64<8>;\n-\n-from_transmute_x86! { unsafe u64x2 => __m128i }\n-from_transmute_x86! { unsafe u64x4 => __m256i }\n-//from_transmute_x86! { unsafe u64x8 => __m512i }"}, {"sha": "6cf623f680136a0a212a447a9ef56e8e76dd4152", "filename": "crates/core_simd/src/vector/vectors_u8.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f094f5ee216b499ee9e666a7f6bdba361443f9/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvectors_u8.rs?ref=27f094f5ee216b499ee9e666a7f6bdba361443f9", "patch": "@@ -1,23 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-/// A SIMD vector of containing `LANES` `u8` values.\n-#[repr(simd)]\n-pub struct SimdU8<const LANES: usize>([u8; LANES]) where Self: crate::LanesAtMost64;\n-\n-impl_integer_vector! { SimdU8, u8 }\n-\n-/// Vector of eight `u8` values\n-pub type u8x8 = SimdU8<8>;\n-\n-/// Vector of 16 `u8` values\n-pub type u8x16 = SimdU8<16>;\n-\n-/// Vector of 32 `u8` values\n-pub type u8x32 = SimdU8<32>;\n-\n-/// Vector of 64 `u8` values\n-pub type u8x64 = SimdU8<64>;\n-\n-from_transmute_x86! { unsafe u8x16 => __m128i }\n-from_transmute_x86! { unsafe u8x32 => __m256i }\n-//from_transmute_x86! { unsafe u8x64 => __m512i }"}]}