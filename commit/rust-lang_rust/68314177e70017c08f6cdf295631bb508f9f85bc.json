{"sha": "68314177e70017c08f6cdf295631bb508f9f85bc", "node_id": "C_kwDOAAsO6NoAKDY4MzE0MTc3ZTcwMDE3YzA4ZjZjZGYyOTU2MzFiYjUwOGY5Zjg1YmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-28T11:49:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-28T11:49:42Z"}, "message": "Auto merge of #97158 - JakobDegen:dse, r=tmiasko,cjgillot\n\nSplit dead store elimination off dest prop\n\nThis splits off a part of #96451 . I've added this in as its own pass for now, so that it actually runs, can be tested, etc. In the dest prop PR, I'll stop invoking this as its own pass, so that it doesn't get invoked twice.\n\nr? `@tmiasko`", "tree": {"sha": "1e3c47138c88c9036c7c2fd9c030af4ef26a0caf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e3c47138c88c9036c7c2fd9c030af4ef26a0caf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68314177e70017c08f6cdf295631bb508f9f85bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68314177e70017c08f6cdf295631bb508f9f85bc", "html_url": "https://github.com/rust-lang/rust/commit/68314177e70017c08f6cdf295631bb508f9f85bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68314177e70017c08f6cdf295631bb508f9f85bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19abca1172ae10d5c084b6c3013d92680f92dd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19abca1172ae10d5c084b6c3013d92680f92dd8b", "html_url": "https://github.com/rust-lang/rust/commit/19abca1172ae10d5c084b6c3013d92680f92dd8b"}, {"sha": "7a99da1d502f7353ca0cb2e1ba06b787de77a616", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a99da1d502f7353ca0cb2e1ba06b787de77a616", "html_url": "https://github.com/rust-lang/rust/commit/7a99da1d502f7353ca0cb2e1ba06b787de77a616"}], "stats": {"total": 1096, "additions": 732, "deletions": 364}, "files": [{"sha": "f1fb484a801ba97c2c723d5166dfef813176b2a3", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -4,6 +4,7 @@\n  */\n \n use crate::mir::*;\n+use crate::ty::cast::CastTy;\n use crate::ty::subst::Subst;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n@@ -223,6 +224,22 @@ impl<'tcx> Rvalue<'tcx> {\n             _ => RvalueInitializationState::Deep,\n         }\n     }\n+\n+    pub fn is_pointer_int_cast<D>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> bool\n+    where\n+        D: HasLocalDecls<'tcx>,\n+    {\n+        if let Rvalue::Cast(CastKind::Misc, src_op, dest_ty) = self {\n+            if let Some(CastTy::Int(_)) = CastTy::from_ty(*dest_ty) {\n+                let src_ty = src_op.ty(local_decls, tcx);\n+                if let Some(CastTy::FnPtr | CastTy::Ptr(_)) = CastTy::from_ty(src_ty) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n }\n \n impl<'tcx> Operand<'tcx> {"}, {"sha": "4350eb6cdd3b1fa3943beb4bb612f6aaba32ba92", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 160, "deletions": 22, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -1,8 +1,9 @@\n-use rustc_index::bit_set::BitSet;\n+use rustc_index::bit_set::{BitSet, ChunkedBitSet};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::{self, Local, Location};\n+use rustc_middle::mir::{self, Local, LocalDecls, Location, Place, StatementKind};\n+use rustc_middle::ty::TyCtxt;\n \n-use crate::{AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis};\n+use crate::{Analysis, AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis};\n \n /// A [live-variable dataflow analysis][liveness].\n ///\n@@ -98,30 +99,27 @@ where\n     T: GenKill<Local>,\n {\n     fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {\n-        let mir::Place { projection, local } = *place;\n+        let local = place.local;\n \n         // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n         // place with one of the `Projection` variants of `PlaceContext`.\n         self.visit_projection(place.as_ref(), context, location);\n \n-        match DefUse::for_place(context) {\n-            // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a use.\n-            Some(_) if place.is_indirect() => self.0.gen(local),\n-\n-            Some(DefUse::Def) if projection.is_empty() => self.0.kill(local),\n+        match DefUse::for_place(*place, context) {\n+            Some(DefUse::Def) => self.0.kill(local),\n             Some(DefUse::Use) => self.0.gen(local),\n-            _ => {}\n+            None => {}\n         }\n     }\n \n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         // Because we do not call `super_place` above, `visit_local` is only called for locals that\n         // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n         // of the return place in a `Return` terminator or the index in an `Index` projection.\n-        match DefUse::for_place(context) {\n+        match DefUse::for_place(local.into(), context) {\n             Some(DefUse::Def) => self.0.kill(local),\n             Some(DefUse::Use) => self.0.gen(local),\n-            _ => {}\n+            None => {}\n         }\n     }\n }\n@@ -133,27 +131,37 @@ enum DefUse {\n }\n \n impl DefUse {\n-    fn for_place(context: PlaceContext) -> Option<DefUse> {\n+    fn for_place<'tcx>(place: Place<'tcx>, context: PlaceContext) -> Option<DefUse> {\n         match context {\n             PlaceContext::NonUse(_) => None,\n \n             PlaceContext::MutatingUse(MutatingUseContext::Store | MutatingUseContext::Deinit) => {\n-                Some(DefUse::Def)\n+                if place.is_indirect() {\n+                    // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a\n+                    // use.\n+                    Some(DefUse::Use)\n+                } else if place.projection.is_empty() {\n+                    Some(DefUse::Def)\n+                } else {\n+                    None\n+                }\n             }\n \n             // Setting the discriminant is not a use because it does no reading, but it is also not\n             // a def because it does not overwrite the whole place\n-            PlaceContext::MutatingUse(MutatingUseContext::SetDiscriminant) => None,\n+            PlaceContext::MutatingUse(MutatingUseContext::SetDiscriminant) => {\n+                place.is_indirect().then_some(DefUse::Use)\n+            }\n \n-            // `MutatingUseContext::Call` and `MutatingUseContext::Yield` indicate that this is the\n-            // destination place for a `Call` return or `Yield` resume respectively. Since this is\n-            // only a `Def` when the function returns successfully, we handle this case separately\n-            // in `call_return_effect` above.\n+            // For the associated terminators, this is only a `Def` when the terminator returns\n+            // \"successfully.\" As such, we handle this case separately in `call_return_effect`\n+            // above. However, if the place looks like `*_5`, this is still unconditionally a use of\n+            // `_5`.\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Call\n-                | MutatingUseContext::AsmOutput\n-                | MutatingUseContext::Yield,\n-            ) => None,\n+                | MutatingUseContext::Yield\n+                | MutatingUseContext::AsmOutput,\n+            ) => place.is_indirect().then_some(DefUse::Use),\n \n             // All other contexts are uses...\n             PlaceContext::MutatingUse(\n@@ -179,3 +187,133 @@ impl DefUse {\n         }\n     }\n }\n+\n+/// Like `MaybeLiveLocals`, but does not mark locals as live if they are used in a dead assignment.\n+///\n+/// This is basically written for dead store elimination and nothing else.\n+///\n+/// All of the caveats of `MaybeLiveLocals` apply.\n+pub struct MaybeTransitiveLiveLocals<'a, 'tcx> {\n+    always_live: &'a BitSet<Local>,\n+    local_decls: &'a LocalDecls<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'a, 'tcx> MaybeTransitiveLiveLocals<'a, 'tcx> {\n+    /// The `always_alive` set is the set of locals to which all stores should unconditionally be\n+    /// considered live.\n+    ///\n+    /// This should include at least all locals that are ever borrowed.\n+    pub fn new(\n+        always_live: &'a BitSet<Local>,\n+        local_decls: &'a LocalDecls<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Self {\n+        MaybeTransitiveLiveLocals { always_live, local_decls, tcx }\n+    }\n+}\n+\n+impl<'a, 'tcx> AnalysisDomain<'tcx> for MaybeTransitiveLiveLocals<'a, 'tcx> {\n+    type Domain = ChunkedBitSet<Local>;\n+    type Direction = Backward;\n+\n+    const NAME: &'static str = \"transitive liveness\";\n+\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = not live\n+        ChunkedBitSet::new_empty(body.local_decls.len())\n+    }\n+\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut Self::Domain) {\n+        // No variables are live until we observe a use\n+    }\n+}\n+\n+struct TransferWrapper<'a>(&'a mut ChunkedBitSet<Local>);\n+\n+impl<'a> GenKill<Local> for TransferWrapper<'a> {\n+    fn gen(&mut self, l: Local) {\n+        self.0.insert(l);\n+    }\n+\n+    fn kill(&mut self, l: Local) {\n+        self.0.remove(l);\n+    }\n+}\n+\n+impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a, 'tcx> {\n+    fn apply_statement_effect(\n+        &self,\n+        trans: &mut Self::Domain,\n+        statement: &mir::Statement<'tcx>,\n+        location: Location,\n+    ) {\n+        // Compute the place that we are storing to, if any\n+        let destination = match &statement.kind {\n+            StatementKind::Assign(assign) => {\n+                if assign.1.is_pointer_int_cast(self.local_decls, self.tcx) {\n+                    // Pointer to int casts may be side-effects due to exposing the provenance.\n+                    // While the model is undecided, we should be conservative. See\n+                    // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n+                    None\n+                } else {\n+                    Some(assign.0)\n+                }\n+            }\n+            StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {\n+                Some(**place)\n+            }\n+            StatementKind::FakeRead(_)\n+            | StatementKind::StorageLive(_)\n+            | StatementKind::StorageDead(_)\n+            | StatementKind::Retag(..)\n+            | StatementKind::AscribeUserType(..)\n+            | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Nop => None,\n+        };\n+        if let Some(destination) = destination {\n+            if !destination.is_indirect()\n+                && !trans.contains(destination.local)\n+                && !self.always_live.contains(destination.local)\n+            {\n+                // This store is dead\n+                return;\n+            }\n+        }\n+        TransferFunction(&mut TransferWrapper(trans)).visit_statement(statement, location);\n+    }\n+\n+    fn apply_terminator_effect(\n+        &self,\n+        trans: &mut Self::Domain,\n+        terminator: &mir::Terminator<'tcx>,\n+        location: Location,\n+    ) {\n+        TransferFunction(&mut TransferWrapper(trans)).visit_terminator(terminator, location);\n+    }\n+\n+    fn apply_call_return_effect(\n+        &self,\n+        trans: &mut Self::Domain,\n+        _block: mir::BasicBlock,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n+    ) {\n+        return_places.for_each(|place| {\n+            if let Some(local) = place.as_local() {\n+                trans.remove(local);\n+            }\n+        });\n+    }\n+\n+    fn apply_yield_resume_effect(\n+        &self,\n+        trans: &mut Self::Domain,\n+        _resume_block: mir::BasicBlock,\n+        resume_place: mir::Place<'tcx>,\n+    ) {\n+        if let Some(local) = resume_place.as_local() {\n+            trans.remove(local);\n+        }\n+    }\n+}"}, {"sha": "41cf43fc8e186767e417e9a0b612ba6197b6f1e7", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -26,6 +26,7 @@ mod storage_liveness;\n pub use self::borrowed_locals::MaybeBorrowedLocals;\n pub use self::init_locals::MaybeInitializedLocals;\n pub use self::liveness::MaybeLiveLocals;\n+pub use self::liveness::MaybeTransitiveLiveLocals;\n pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageLive};\n \n /// `MaybeInitializedPlaces` tracks all places that might be"}, {"sha": "84f2ee639e4d8a2ca3b8998185b4cf5be8ec74a2", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -0,0 +1,148 @@\n+//! This module implements a dead store elimination (DSE) routine.\n+//!\n+//! This transformation was written specifically for the needs of dest prop. Although it is\n+//! perfectly sound to use it in any context that might need it, its behavior should not be changed\n+//! without analyzing the interaction this will have with dest prop. Specifically, in addition to\n+//! the soundness of this pass in general, dest prop needs it to satisfy two additional conditions:\n+//!\n+//!  1. It's idempotent, meaning that running this pass a second time immediately after running it a\n+//!     first time will not cause any further changes.\n+//!  2. This idempotence persists across dest prop's main transform, in other words inserting any\n+//!     number of iterations of dest prop between the first and second application of this transform\n+//!     will still not cause any further changes.\n+//!\n+\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::{\n+    mir::{visit::Visitor, *},\n+    ty::TyCtxt,\n+};\n+use rustc_mir_dataflow::{impls::MaybeTransitiveLiveLocals, Analysis};\n+\n+/// Performs the optimization on the body\n+///\n+/// The `borrowed` set must be a `BitSet` of all the locals that are ever borrowed in this body. It\n+/// can be generated via the [`get_borrowed_locals`] function.\n+pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitSet<Local>) {\n+    let mut live = MaybeTransitiveLiveLocals::new(borrowed, &body.local_decls, tcx)\n+        .into_engine(tcx, body)\n+        .iterate_to_fixpoint()\n+        .into_results_cursor(body);\n+\n+    let mut patch = Vec::new();\n+    for (bb, bb_data) in traversal::preorder(body) {\n+        for (statement_index, statement) in bb_data.statements.iter().enumerate().rev() {\n+            let loc = Location { block: bb, statement_index };\n+            if let StatementKind::Assign(assign) = &statement.kind {\n+                if assign.1.is_pointer_int_cast(&body.local_decls, tcx) {\n+                    continue;\n+                }\n+            }\n+            match &statement.kind {\n+                StatementKind::Assign(box (place, _))\n+                | StatementKind::SetDiscriminant { place: box place, .. }\n+                | StatementKind::Deinit(box place) => {\n+                    if !place.is_indirect() && !borrowed.contains(place.local) {\n+                        live.seek_before_primary_effect(loc);\n+                        if !live.get().contains(place.local) {\n+                            patch.push(loc);\n+                        }\n+                    }\n+                }\n+                StatementKind::Retag(_, _)\n+                | StatementKind::StorageLive(_)\n+                | StatementKind::StorageDead(_)\n+                | StatementKind::Coverage(_)\n+                | StatementKind::CopyNonOverlapping(_)\n+                | StatementKind::Nop => (),\n+\n+                StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {\n+                    bug!(\"{:?} not found in this MIR phase!\", &statement.kind)\n+                }\n+            }\n+        }\n+    }\n+\n+    if patch.is_empty() {\n+        return;\n+    }\n+\n+    let bbs = body.basic_blocks_mut();\n+    for Location { block, statement_index } in patch {\n+        bbs[block].statements[statement_index].make_nop();\n+    }\n+}\n+\n+pub fn get_borrowed_locals(body: &Body<'_>) -> BitSet<Local> {\n+    let mut b = BorrowedLocals(BitSet::new_empty(body.local_decls.len()));\n+    b.visit_body(body);\n+    b.0\n+}\n+\n+struct BorrowedLocals(BitSet<Local>);\n+\n+impl<'tcx> Visitor<'tcx> for BorrowedLocals {\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, loc: Location) {\n+        self.super_rvalue(rvalue, loc);\n+        match rvalue {\n+            Rvalue::AddressOf(_, borrowed_place) | Rvalue::Ref(_, _, borrowed_place) => {\n+                if !borrowed_place.is_indirect() {\n+                    self.0.insert(borrowed_place.local);\n+                }\n+            }\n+\n+            Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n+            | Rvalue::Use(..)\n+            | Rvalue::Repeat(..)\n+            | Rvalue::Len(..)\n+            | Rvalue::BinaryOp(..)\n+            | Rvalue::CheckedBinaryOp(..)\n+            | Rvalue::NullaryOp(..)\n+            | Rvalue::UnaryOp(..)\n+            | Rvalue::Discriminant(..)\n+            | Rvalue::Aggregate(..)\n+            | Rvalue::ThreadLocalRef(..) => {}\n+        }\n+    }\n+\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        self.super_terminator(terminator, location);\n+\n+        match terminator.kind {\n+            TerminatorKind::Drop { place: dropped_place, .. } => {\n+                if !dropped_place.is_indirect() {\n+                    self.0.insert(dropped_place.local);\n+                }\n+            }\n+\n+            TerminatorKind::Abort\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::Call { .. }\n+            | TerminatorKind::FalseEdge { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::Yield { .. }\n+            | TerminatorKind::InlineAsm { .. } => {}\n+        }\n+    }\n+}\n+\n+pub struct DeadStoreElimination;\n+\n+impl<'tcx> MirPass<'tcx> for DeadStoreElimination {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 2\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let borrowed = get_borrowed_locals(body);\n+        eliminate(tcx, body, &borrowed);\n+    }\n+}"}, {"sha": "0e57c3c69799970bccb597d8f08adb570cb6d958", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -49,6 +49,7 @@ mod const_goto;\n mod const_prop;\n mod const_prop_lint;\n mod coverage;\n+mod dead_store_elimination;\n mod deaggregator;\n mod deduplicate_blocks;\n mod deref_separator;\n@@ -481,17 +482,18 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &const_prop::ConstProp,\n             //\n             // Const-prop runs unconditionally, but doesn't mutate the MIR at mir-opt-level=0.\n+            &const_debuginfo::ConstDebugInfo,\n             &o1(simplify_branches::SimplifyConstCondition::new(\"after-const-prop\")),\n             &early_otherwise_branch::EarlyOtherwiseBranch,\n             &simplify_comparison_integral::SimplifyComparisonIntegral,\n             &simplify_try::SimplifyArmIdentity,\n             &simplify_try::SimplifyBranchSame,\n+            &dead_store_elimination::DeadStoreElimination,\n             &dest_prop::DestinationPropagation,\n             &o1(simplify_branches::SimplifyConstCondition::new(\"final\")),\n             &o1(remove_noop_landing_pads::RemoveNoopLandingPads),\n             &o1(simplify::SimplifyCfg::new(\"final\")),\n             &nrvo::RenameReturnPlace,\n-            &const_debuginfo::ConstDebugInfo,\n             &simplify::SimplifyLocals,\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &deduplicate_blocks::DeduplicateBlocks,"}, {"sha": "81675377941bd6ba04f17b646ef414e5e8870d0c", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -1,5 +1,6 @@\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n+// compile-flags:-Zmir-opt-level=0\n \n #![deny(dead_code)]\n #![feature(coerce_unsized)]"}, {"sha": "f3a7722cdcad020aa0faf147bc720ef3586349d1", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "c769246b29b2f9565a3c396ee5a79716261d9589", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph -Zmir-opt-level=0\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n@@ -63,9 +63,9 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, typeck\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_parameter_pattern() {\n     let _ = |(x,): (u32,)| x;\n@@ -82,7 +82,7 @@ pub fn add_move() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_move() {\n     let _ = move || 1;"}, {"sha": "eaef63386ffd50f2329c77c3a8231ee9614e68ad", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "70ef10645f19f3ab8ea25ab91a8930805efab064", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph -Zmir-opt-level=0\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n@@ -106,9 +106,9 @@ pub fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir,typeck\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,typeck\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n@@ -131,9 +131,9 @@ pub fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n@@ -221,12 +221,12 @@ pub fn change_constructor_path_tuple_like() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\"\n+    except=\"hir_owner_nodes,typeck\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_clean(\n     cfg=\"cfail5\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\"\n+    except=\"hir_owner_nodes,typeck\"\n )]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_path_tuple_like() {\n@@ -244,12 +244,12 @@ pub fn change_constructor_variant_tuple_like() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\"\n+    except=\"hir_owner_nodes,typeck\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_clean(\n     cfg=\"cfail5\",\n-    except=\"hir_owner_nodes,optimized_mir,typeck\"\n+    except=\"hir_owner_nodes,typeck\"\n )]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_tuple_like() {\n@@ -337,9 +337,9 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_constructor_variant_c_like() {\n     let _x = Clike::C;"}, {"sha": "b466cfdd595946e5212305a460c26cae2ce909f7", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,7 +12,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "87fd21fd1b8107ccea5fdc8276dba39c770754d9", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -1,6 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "ff79acc7f6392e03c9e92050e361bd72fc1cbc8d", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "16d6af01695f1965df01d432e9b941ba9eb21bc5", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n@@ -31,9 +31,9 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -183,7 +183,7 @@ pub fn add_loop_label_to_break() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;"}, {"sha": "076eddaabc048b818a302cfe66957c701a9307cc", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "cff557dcb74b8830e7ae14e93d9f0ab6b9741f13", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "9ef46847243641bd3997a869be5b865234fdc8a3", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "69883058335f0566486a9ced7cdd10d412b1ee46", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "dc878d6827cbf87f3b5ea96738b27c1d700cb1be", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // needs-asm-support\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans"}, {"sha": "01320cd51f4453d356a4c23a573fed3b9e7ddd0c", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n@@ -213,9 +213,9 @@ pub fn change_initializer() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "a12cd0d021e59cf910896954d410af5c5eae0bec", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n@@ -31,9 +31,9 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "fa054c7decc57056b3b1bcf1758f08e1cf664a42", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "37d10d922c177ac2d0165d38e89a532bcc2785c2", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -10,7 +10,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -C debug-assertions\n+// compile-flags: -Z query-dep-graph -C debug-assertions -O\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "67d87f5c4ed92e7cad5c7f9d97f113e08a82e05a", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "fc9671cb41b47ef529455ab52a8875a4d0573dc0", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "7a91722d70fda1e4027728bbb078e8b7acbeb7bb", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,7 +12,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "9b79fd8a0a105fe71f85a13f46e6f7b3ef479cd5", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,7 +12,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "cc63aa4f5566399f6aa575c2b01769332404a943", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "79398eb07fe44c6ec89ceb27d7aa254665028c4e", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,7 +12,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "18fb716353fa7f55484b766af5477efd6245c2af", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "f81855e42becbd67a13dc5f45f5b7e7e63a1ed81", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "e432cf8fe4cc3068753af5b375c1408de6185a59", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n@@ -31,9 +31,9 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -56,9 +56,9 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;"}, {"sha": "cd4b471b28cc18cfc017b758315134d2ef7bbcec", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -99,6 +99,7 @@\n           _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:22\n           StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:21:21: 21:22\n           StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:21:21: 21:22\n+          nop;                             // scope 0 at $DIR/const_debuginfo.rs:8:11: 22:2\n           StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:22:1: 22:2\n           StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:22:1: 22:2\n           StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:22:1: 22:2"}, {"sha": "6d11d02d6792896e7c50e4148d8606593453d90a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -17,11 +17,8 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n         StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "6d11d02d6792896e7c50e4148d8606593453d90a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -17,11 +17,8 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n         StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "6037f89086dc125677fead02f7cbf10e59031ec3", "filename": "src/test/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -0,0 +1,75 @@\n+- // MIR for `cycle` before DeadStoreElimination\n++ // MIR for `cycle` after DeadStoreElimination\n+  \n+  fn cycle(_1: i32, _2: i32, _3: i32) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/cycle.rs:9:10: 9:15\n+      debug y => _2;                       // in scope 0 at $DIR/cycle.rs:9:22: 9:27\n+      debug z => _3;                       // in scope 0 at $DIR/cycle.rs:9:34: 9:39\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:9:46: 9:46\n+      let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:9:1: 18:2\n+      let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:12:11: 12:17\n+      let _6: i32;                         // in scope 0 at $DIR/cycle.rs:13:13: 13:17\n+      let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:14:13: 14:14\n+      let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:15:13: 15:14\n+      let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:16:13: 16:17\n+      let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n+      let _11: ();                         // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n+      let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n+      scope 1 {\n+          debug temp => _6;                // in scope 1 at $DIR/cycle.rs:13:13: 13:17\n+      }\n+  \n+      bb0: {\n+          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:12:5: 17:6\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+          _5 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:12:11: 12:15\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n+          switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+      }\n+  \n+      bb3: {\n+          StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:13:13: 13:17\n+-         _6 = _3;                         // scope 0 at $DIR/cycle.rs:13:20: 13:21\n++         nop;                             // scope 0 at $DIR/cycle.rs:13:20: 13:21\n+          StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:14:13: 14:14\n+-         _7 = _2;                         // scope 1 at $DIR/cycle.rs:14:13: 14:14\n+-         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:14:9: 14:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:14:13: 14:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:14:9: 14:14\n+          StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:14:13: 14:14\n+          StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:15:13: 15:14\n+-         _8 = _1;                         // scope 1 at $DIR/cycle.rs:15:13: 15:14\n+-         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:15:9: 15:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:15:13: 15:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:15:9: 15:14\n+          StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:15:13: 15:14\n+          StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:16:13: 16:17\n+-         _9 = _6;                         // scope 1 at $DIR/cycle.rs:16:13: 16:17\n+-         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:16:9: 16:17\n++         nop;                             // scope 1 at $DIR/cycle.rs:16:13: 16:17\n++         nop;                             // scope 1 at $DIR/cycle.rs:16:9: 16:17\n+          StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:16:16: 16:17\n+-         _4 = const ();                   // scope 0 at $DIR/cycle.rs:12:18: 17:6\n++         nop;                             // scope 0 at $DIR/cycle.rs:12:18: 17:6\n+          StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n+          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n+          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:12:5: 17:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_11);                // scope 0 at $DIR/cycle.rs:12:5: 17:6\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:12:5: 17:6\n+          StorageDead(_11);                // scope 0 at $DIR/cycle.rs:17:5: 17:6\n+          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n+          return;                          // scope 0 at $DIR/cycle.rs:18:2: 18:2\n+      }\n+  }\n+  "}, {"sha": "b35ce0bcb5ad1de071ec29bca04d8a649371afe5", "filename": "src/test/mir-opt/dead-store-elimination/cycle.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -0,0 +1,22 @@\n+// unit-test: DeadStoreElimination\n+\n+#[inline(never)]\n+fn cond() -> bool {\n+    false\n+}\n+\n+// EMIT_MIR cycle.cycle.DeadStoreElimination.diff\n+fn cycle(mut x: i32, mut y: i32, mut z: i32) {\n+    // This example is interesting because the non-transitive version of `MaybeLiveLocals` would\n+    // report that *all* of these stores are live.\n+    while cond() {\n+        let temp = z;\n+        z = y;\n+        y = x;\n+        x = temp;\n+    }\n+}\n+\n+fn main() {\n+    cycle(1, 2, 3);\n+}"}, {"sha": "2250159c8166784ae5065a10b6b5d3dea550bca7", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.pointer_to_int.DeadStoreElimination.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `pointer_to_int` before DeadStoreElimination\n++ // MIR for `pointer_to_int` after DeadStoreElimination\n+  \n+  fn pointer_to_int(_1: *mut i32) -> () {\n+      debug p => _1;                       // in scope 0 at $DIR/provenance_soundness.rs:7:19: 7:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:7:32: 7:32\n+      let _2: usize;                       // in scope 0 at $DIR/provenance_soundness.rs:8:9: 8:11\n+      let mut _3: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n+      let mut _5: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:9:14: 9:15\n+      scope 1 {\n+          debug _x => _2;                  // in scope 1 at $DIR/provenance_soundness.rs:8:9: 8:11\n+          let _4: isize;                   // in scope 1 at $DIR/provenance_soundness.rs:9:9: 9:11\n+          scope 2 {\n+              debug _y => _4;              // in scope 2 at $DIR/provenance_soundness.rs:9:9: 9:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/provenance_soundness.rs:8:9: 8:11\n+          StorageLive(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n+          _3 = _1;                         // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n+          _2 = move _3 as usize (Misc);    // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:24\n+          StorageDead(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:23: 8:24\n+          StorageLive(_4);                 // scope 1 at $DIR/provenance_soundness.rs:9:9: 9:11\n+          StorageLive(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n+          _5 = _1;                         // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n+          _4 = move _5 as isize (Misc);    // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:24\n+          StorageDead(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:23: 9:24\n+          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:7:32: 10:2\n+          StorageDead(_4);                 // scope 1 at $DIR/provenance_soundness.rs:10:1: 10:2\n+          StorageDead(_2);                 // scope 0 at $DIR/provenance_soundness.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/provenance_soundness.rs:10:2: 10:2\n+      }\n+  }\n+  "}, {"sha": "0bfffb6dca3dca9c326b57cf1af0019f11f6d3af", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.retags.DeadStoreElimination.diff", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -0,0 +1,14 @@\n+- // MIR for `retags` before DeadStoreElimination\n++ // MIR for `retags` after DeadStoreElimination\n+  \n+  fn retags(_1: &mut i32) -> () {\n+      debug _r => _1;                      // in scope 0 at $DIR/provenance_soundness.rs:13:11: 13:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:13:25: 13:25\n+  \n+      bb0: {\n+          Retag([fn entry] _1);            // scope 0 at $DIR/provenance_soundness.rs:13:1: 13:27\n+          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:13:25: 13:27\n+          return;                          // scope 0 at $DIR/provenance_soundness.rs:13:27: 13:27\n+      }\n+  }\n+  "}, {"sha": "11314e990982c579677fe57991e84d27adbaacce", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -0,0 +1,18 @@\n+// unit-test: DeadStoreElimination\n+// compile-flags: -Zmir-emit-retag\n+\n+// Test that we don't remove pointer to int casts or retags\n+\n+// EMIT_MIR provenance_soundness.pointer_to_int.DeadStoreElimination.diff\n+fn pointer_to_int(p: *mut i32) {\n+    let _x = p as usize;\n+    let _y = p as isize;\n+}\n+\n+// EMIT_MIR provenance_soundness.retags.DeadStoreElimination.diff\n+fn retags(_r: &mut i32) {}\n+\n+fn main() {\n+    pointer_to_int(&mut 5 as *mut _);\n+    retags(&mut 5);\n+}"}, {"sha": "c3aa19e6c5f8402fa0e7475fc6198ed6015a8c43", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,27 +7,23 @@\n       let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:15:16: 15:22\n       let _4: i32;                         // in scope 0 at $DIR/branch.rs:18:9: 18:14\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n-+         debug x => _2;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n+          debug x => _1;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n           let _2: i32;                     // in scope 1 at $DIR/branch.rs:15:9: 15:10\n           scope 2 {\n               debug y => _2;               // in scope 2 at $DIR/branch.rs:15:9: 15:10\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/branch.rs:13:9: 13:10\n--         _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n-+         nop;                             // scope 0 at $DIR/branch.rs:13:9: 13:10\n-+         _2 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n+          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:13:9: 13:10\n+          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:13:13: 13:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:15:9: 15:10\n+          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n           StorageLive(_3);                 // scope 1 at $DIR/branch.rs:15:16: 15:22\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:15:16: 15:22\n                                            // mir::Constant\n@@ -40,8 +36,7 @@\n       }\n   \n       bb3: {\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:16:9: 16:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n+          nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n           goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n       }\n   \n@@ -55,18 +50,15 @@\n   \n       bb5: {\n           StorageDead(_4);                 // scope 1 at $DIR/branch.rs:18:14: 18:15\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:19:9: 19:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:19:9: 19:10\n+          nop;                             // scope 1 at $DIR/branch.rs:19:9: 19:10\n           goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n       }\n   \n       bb6: {\n           StorageDead(_3);                 // scope 1 at $DIR/branch.rs:20:5: 20:6\n           nop;                             // scope 0 at $DIR/branch.rs:12:11: 21:2\n--         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n--         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2\n-+         nop;                             // scope 1 at $DIR/branch.rs:21:1: 21:2\n-+         nop;                             // scope 0 at $DIR/branch.rs:21:1: 21:2\n+          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n+          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2\n           return;                          // scope 0 at $DIR/branch.rs:21:2: 21:2\n       }\n   }"}, {"sha": "8919703647d6d3cb24a831191dc1867d1c36cc42", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -2,7 +2,7 @@\n + // MIR for `arg_src` after DestinationPropagation\n   \n   fn arg_src(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:27:12: 27:17\n+      debug x => const 123_i32;            // in scope 0 at $DIR/copy_propagation_arg.rs:27:12: 27:17\n       let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:27:27: 27:30\n       let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n       scope 1 {\n@@ -15,7 +15,7 @@\n -         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n +         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n +         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n+          nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n -         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n -         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n +         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6"}, {"sha": "3f9ba4ad4f0ac3eaa2eb0f0886b5e0cacb5d7fd8", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -2,7 +2,7 @@\n + // MIR for `bar` after DestinationPropagation\n   \n   fn bar(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:15:8: 15:13\n+      debug x => const 5_u8;               // in scope 0 at $DIR/copy_propagation_arg.rs:15:8: 15:13\n       let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:15:19: 15:19\n       let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n       let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n@@ -20,7 +20,7 @@\n       bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n-          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n           nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n       }"}, {"sha": "67ce87e842d043dde23cac2991796f23015315d4", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -7,14 +7,10 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n--         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n           nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n       }"}, {"sha": "963881d7ae062d906d765841adab700bdfca58a2", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -8,23 +8,19 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n--         _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-+         _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n--         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n           nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n       }"}, {"sha": "8e44d68d9348e47d59e06ed8439f96e8ad1a059a", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -8,16 +8,13 @@\n       let _5: ();                          // in scope 0 at $DIR/cycle.rs:14:5: 14:12\n       let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:14:10: 14:11\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n-+         debug x => _4;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n+          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n           let _2: i32;                     // in scope 1 at $DIR/cycle.rs:10:9: 10:10\n           scope 2 {\n--             debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n-+             debug y => _4;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n+              debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n               let _3: i32;                 // in scope 2 at $DIR/cycle.rs:11:9: 11:10\n               scope 3 {\n--                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n-+                 debug z => _4;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n+                  debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n                   scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12\n                       debug _x => _6;      // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n                   }\n@@ -26,44 +23,30 @@\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:9:9: 9:14\n--         _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n-+         nop;                             // scope 0 at $DIR/cycle.rs:9:9: 9:14\n-+         _4 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:9:9: 9:14\n+          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:9:17: 9:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:10:9: 10:10\n--         _2 = _1;                         // scope 1 at $DIR/cycle.rs:10:13: 10:14\n--         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:11:9: 11:10\n--         _3 = _2;                         // scope 2 at $DIR/cycle.rs:11:13: 11:14\n--         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n--         _4 = _3;                         // scope 3 at $DIR/cycle.rs:12:9: 12:10\n--         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:12:5: 12:10\n--         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-+         nop;                             // scope 1 at $DIR/cycle.rs:10:9: 10:10\n-+         nop;                             // scope 1 at $DIR/cycle.rs:10:13: 10:14\n-+         nop;                             // scope 2 at $DIR/cycle.rs:11:9: 11:10\n-+         nop;                             // scope 2 at $DIR/cycle.rs:11:13: 11:14\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:5: 12:10\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:10:9: 10:10\n+          nop;                             // scope 1 at $DIR/cycle.rs:10:13: 10:14\n+          StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:11:9: 11:10\n+          nop;                             // scope 2 at $DIR/cycle.rs:11:13: 11:14\n+          StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          nop;                             // scope 3 at $DIR/cycle.rs:12:5: 12:10\n+          StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n           StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:14:5: 14:12\n           StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:14:10: 14:11\n--         _6 = _1;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n-+         _6 = _4;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n+          nop;                             // scope 3 at $DIR/cycle.rs:14:10: 14:11\n           StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:14:11: 14:12\n           StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:14:12: 14:13\n--         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:15:1: 15:2\n--         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:15:1: 15:2\n--         StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:15:1: 15:2\n-+         nop;                             // scope 2 at $DIR/cycle.rs:15:1: 15:2\n-+         nop;                             // scope 1 at $DIR/cycle.rs:15:1: 15:2\n-+         nop;                             // scope 0 at $DIR/cycle.rs:15:1: 15:2\n+          StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:15:1: 15:2\n+          StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:15:1: 15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:15:1: 15:2\n           return;                          // scope 0 at $DIR/cycle.rs:15:2: 15:2\n       }\n   }"}, {"sha": "582a1738cbf96b69e2f4d3fcc10dbf6dc620701a", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -17,30 +17,24 @@\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n--         StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n--         _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n-+         nop;                             // scope 0 at $DIR/union.rs:13:9: 13:11\n-+         nop;                             // scope 0 at $DIR/union.rs:13:23: 13:28\n-+         (_1.0: u32) = val() -> bb1;      // scope 0 at $DIR/union.rs:13:23: 13:28\n+          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          Deinit(_1);                      // scope 0 at $DIR/union.rs:13:14: 13:30\n--         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n--         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n-+         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n-+         nop;                             // scope 0 at $DIR/union.rs:13:29: 13:30\n+          nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n+          nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n+          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n-          _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n+          nop;                             // scope 2 at $DIR/union.rs:15:19: 15:24\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n--         StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n-+         nop;                             // scope 0 at $DIR/union.rs:16:1: 16:2\n+          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n           return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n       }\n   }"}, {"sha": "8b0a73ec4ba61fd16a3dfced5874fbf4adf36056", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 45, "deletions": 54, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -6,33 +6,32 @@\n       let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _5: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n-      let mut _6: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _15: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _21: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _14: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _14;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -53,58 +52,50 @@\n           StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n-          StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = _21;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_6.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = (_6.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _11) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _17;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _19 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _16, move _18, move _20); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n@@ -114,10 +105,10 @@\n       }\n   \n       bb2: {\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2"}, {"sha": "8b0a73ec4ba61fd16a3dfced5874fbf4adf36056", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 45, "deletions": 54, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -6,33 +6,32 @@\n       let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _5: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n-      let mut _6: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _15: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _21: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _14: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _14;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -53,58 +52,50 @@\n           StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n-          StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = _21;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_6.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = (_6.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _11) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _17;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _19 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _16, move _18, move _20); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n@@ -114,10 +105,10 @@\n       }\n   \n       bb2: {\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2"}, {"sha": "40e7b74453a7c01ba220bcaa396be59f3040226b", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -32,7 +32,6 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n         _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n         StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL"}, {"sha": "887c7b01f432752543e80dc6a223a7306fc6018a", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -25,10 +25,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n           _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27"}, {"sha": "51d5f1acdab839683cb3b653d26bf1e94ec9c102", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -31,10 +31,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n           _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27"}, {"sha": "3c26cf32a76c7391fa240c536a1c63c5637e9571", "filename": "src/test/mir-opt/lower_array_len.array_len.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -11,10 +11,7 @@\n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n--         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n--         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n--         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n           _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14"}, {"sha": "7a94217fa8b096fdef8e800c67fb1f484d1764da", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -11,10 +11,7 @@\n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n--         _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n--         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n--         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n           _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14"}, {"sha": "39100316597e31117c959fdd95f1b6e7c319c1d8", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -8,21 +8,20 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n     let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n     let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:16:44: 16:45\n     let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n-    let mut _7: usize;                   // in scope 0 at $DIR/separate_const_switch.rs:17:42: 17:43\n-    let _8: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n-    let mut _9: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:20:42: 20:43\n-    let _10: usize;                      // in scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n+    let mut _8: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:20:42: 20:43\n+    let _9: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n     scope 1 {\n         debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:16:16: 16:17\n     }\n     scope 2 {\n         debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:17:17: 17:18\n     }\n     scope 3 {\n-        debug v => _8;                   // in scope 3 at $DIR/separate_const_switch.rs:20:31: 20:32\n+        debug v => _7;                   // in scope 3 at $DIR/separate_const_switch.rs:20:31: 20:32\n     }\n     scope 4 {\n-        debug r => _10;                  // in scope 4 at $DIR/separate_const_switch.rs:21:28: 21:29\n+        debug r => _9;                   // in scope 4 at $DIR/separate_const_switch.rs:21:28: 21:29\n     }\n \n     bb0: {\n@@ -33,19 +32,11 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n \n     bb1: {\n         StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n-        _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n-        StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n-        _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n-        Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n-        ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n-        discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n-        StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n         StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n-        StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n-        _10 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+        StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n         Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n-        StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n+        StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n     }\n \n@@ -59,15 +50,15 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:16:45: 16:46\n-        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n-        _8 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n-        StorageLive(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n-        _9 = _8;                         // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n+        _7 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n+        StorageLive(_8);                 // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+        _8 = _7;                         // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n         Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n-        ((_0 as Some).0: i32) = move _9; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n+        ((_0 as Some).0: i32) = move _8; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n-        StorageDead(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n+        StorageDead(_8);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n+        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n     }\n "}, {"sha": "5862cf2eb29057ebf3472903f45ea094bc1e145d", "filename": "src/test/mir-opt/simplify-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C overflow-checks=off\n+// unit-test: SimplifyLocals\n \n #![feature(box_syntax)]\n #![feature(thread_local)]"}, {"sha": "dd2d79549612355f1f565b1c8f87295461ec3f2f", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -20,11 +20,12 @@\n -         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         _4 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n--         _3 = _4;                         // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         _3 = &(*_4);                     // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals.rs:16:25: 16:26\n -         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n -         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:13:8: 17:2\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:17:1: 17:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:17:2: 17:2\n       }"}, {"sha": "3be73ecfcb812427fa0dffa600dee07274d558d1", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,6 +12,7 @@\n -         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         discriminant(_1) = 0;            // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:17: 22:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:20:9: 23:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:23:2: 23:2\n       }\n   }"}, {"sha": "641f64fd9b7cd22b35fdaa211ad6f08890be6daf", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -17,17 +17,12 @@\n -         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n -         Deinit(_2);                      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n--         (_2.1: E) = const E::A;          // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals.rs:28:6: 28:16\n--                                          // + literal: Const { ty: E, val: Value(Scalar(0x00)) }\n+-         (_2.1: E) = move _3;             // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:15: 28:16\n--         (_2.1: E) = const E::B;          // scope 0 at $DIR/simplify-locals.rs:28:5: 28:26\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals.rs:28:5: 28:26\n--                                          // + literal: Const { ty: E, val: Value(Scalar(0x01)) }\n+-         (_2.1: E) = move _1;             // scope 0 at $DIR/simplify-locals.rs:28:5: 28:26\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:28:25: 28:26\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:28:26: 28:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:26:9: 29:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:29:2: 29:2\n       }\n   }"}, {"sha": "85cf398d316939650d99bb46100dad1cbc0ae696", "filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -23,6 +23,7 @@\n -         StorageLive(_3);                 // scope 2 at $DIR/simplify-locals.rs:36:13: 36:19\n -         _3 = &mut _1;                    // scope 2 at $DIR/simplify-locals.rs:36:13: 36:19\n -         StorageDead(_3);                 // scope 2 at $DIR/simplify-locals.rs:36:19: 36:20\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:32:8: 37:2\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:37:1: 37:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:37:2: 37:2\n       }"}, {"sha": "991a0721cca302bfaefebf1325988c555f1e2a50", "filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -15,6 +15,7 @@\n -         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:44:14: 44:15\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:44:17: 44:18\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:44:17: 44:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:42:9: 45:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:45:2: 45:2\n       }\n   }"}, {"sha": "6c9ed96e78ffe401f2668f3aec5f04d488a1112c", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -15,6 +15,7 @@\n -         _1 = &mut (*_2);                 // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:48:9: 51:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:51:2: 51:2\n       }\n   }"}, {"sha": "2d5fb352f8be3b013602ed76b175ff5e11a1d8a9", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -19,6 +19,7 @@\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:54:9: 57:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:57:2: 57:2\n       }\n   }"}, {"sha": "1bba1e9e88a4ed1dc9ff90073304efbe7afa3aed", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -47,10 +47,6 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n--         _9 = const 42_u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n -         _8 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23"}, {"sha": "fc1726f98cb1de6ad495794a5725c6dfda364df9", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -15,8 +15,6 @@\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n       }\n@@ -35,7 +33,6 @@\n       }\n   \n       bb3: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }"}, {"sha": "fc1726f98cb1de6ad495794a5725c6dfda364df9", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -15,8 +15,6 @@\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n       }\n@@ -35,7 +33,6 @@\n       }\n   \n       bb3: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }"}, {"sha": "15de0839c22fa8bb55777af9fe59e4e83bde0dd1", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -19,15 +19,12 @@\n +         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n--         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n-+         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n--             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n@@ -83,30 +80,20 @@\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n--         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n-+         ((_0 as Err).0: i32) = ((_3 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n-+         nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n-+         nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          nop;                             // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+          nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n           Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n           discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n--         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "b9252df6f3e2e552eef24f3f7c5ba9c0ca3d528c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -5,16 +5,19 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n     let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n     let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+    let _4: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+    let mut _6: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n     scope 1 {\n         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        debug e => _4;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n         scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+            debug t => _6;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n@@ -38,9 +41,14 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     }\n \n     bb2: {\n-        ((_0 as Err).0: i32) = ((_2 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+        StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+        StorageDead(_6);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n         Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        StorageDead(_5);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n         return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "9036c57556ddaf109c7c418f3216cba6d2fa6f90", "filename": "src/test/mir-opt/tls-access.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Ftls-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Ftls-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls-access.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -11,3 +11,4 @@ fn main() {\n }\n \n // EMIT_MIR tls_access.main.SimplifyCfg-final.after.mir\n+// compile-flags: -Zmir-opt-level=0"}, {"sha": "de19a226e8f75709d2807b91d7985a6b4369713d", "filename": "src/test/mir-opt/tls_access.main.SimplifyCfg-final.after.mir", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -14,8 +14,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 1 at $DIR/tls-access.rs:8:13: 8:14\n         StorageLive(_2);                 // scope 1 at $DIR/tls-access.rs:8:18: 8:21\n-        _2 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls-access.rs:8:18: 8:21\n-        _1 = &(*_2);                     // scope 1 at $DIR/tls-access.rs:8:17: 8:21\n         StorageLive(_3);                 // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         (*_3) = const 42_u8;             // scope 2 at $DIR/tls-access.rs:9:9: 9:17"}, {"sha": "aa6a4cac350b53468a52551964f4a604408c39a4", "filename": "src/test/mir-opt/uninhabited_enum.process_never.SimplifyLocals.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,7 +12,6 @@ fn process_never(_1: *const !) -> () {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:8:8: 8:14\n-        _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:8:26: 8:33\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:9:1: 9:2\n         unreachable;                     // scope 0 at $DIR/uninhabited-enum.rs:7:39: 9:2\n     }"}, {"sha": "9fd4b1b54e73d5ab94feea038e8bf8774709af97", "filename": "src/test/mir-opt/uninhabited_enum.process_void.SimplifyLocals.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -12,7 +12,6 @@ fn process_void(_1: *const Void) -> () {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n-        _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n         return;                          // scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n     }"}, {"sha": "670f61cd5ce3aff53a6a51ef1364b1e06bb94509", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -1,6 +1,6 @@\n // Test that we don't ICE when trying to dump MIR for unusual item types and\n // that we don't create filenames containing `<` and `>`\n-\n+// compile-flags: -Zmir-opt-level=0\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n struct A;"}, {"sha": "3c94fbddc4421622cbbefab82507734cba5b0b1f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -9,7 +9,6 @@ fn change_loop_body() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n-        _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n     }"}, {"sha": "3c94fbddc4421622cbbefab82507734cba5b0b1f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/68314177e70017c08f6cdf295631bb508f9f85bc/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=68314177e70017c08f6cdf295631bb508f9f85bc", "patch": "@@ -9,7 +9,6 @@ fn change_loop_body() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n-        _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n     }"}]}