{"sha": "fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWViZmM3NGUyOGVhMmVmYjA1MDhiM2UyYzczY2MyN2NlM2I2NWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-19T21:17:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:08:56Z"}, "message": "move compile-fail tests to ui tests\n\ngets more comprehensive coverage in `ui`", "tree": {"sha": "5cad23880e95e198a8dcaeb84e303e43f7e9b22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cad23880e95e198a8dcaeb84e303e43f7e9b22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "html_url": "https://github.com/rust-lang/rust/commit/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222349931eec0b0b68b31b2b8b01e162cee23b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/222349931eec0b0b68b31b2b8b01e162cee23b85", "html_url": "https://github.com/rust-lang/rust/commit/222349931eec0b0b68b31b2b8b01e162cee23b85"}], "stats": {"total": 136, "additions": 125, "deletions": 11}, "files": [{"sha": "79293e0deed604bf895d6e8e1419ed496f2e6268", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -8,7 +8,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #18937 <https://github.com/rust-lang/rust/issues/18937>\n+   = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n note: lint level defined here\n   --> $DIR/proj-outlives-region.rs:12:9\n    |"}, {"sha": "b0cd3b8fdd29d08b629619ba22c7baa6df5a1fac", "filename": "src/test/ui/compare-method/region-extra-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.rs?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "previous_filename": "src/test/compile-fail/region-bound-extra-bound-in-impl.rs"}, {"sha": "54a551bcfed5d6d794aa45d8670ab9a610d2186b", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -0,0 +1,11 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/region-extra-2.rs:19:5\n+   |\n+15 |     fn renew<'b: 'a>(self) -> &'b mut [T];\n+   |     -------------------------------------- definition of `renew` from trait\n+...\n+19 |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n+   |     ^ impl has extra requirement `'a: 'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d61d0250211dc86e9f81a756401ff88f54516d69", "filename": "src/test/ui/compare-method/region-extra.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.rs?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -11,16 +11,15 @@\n #![allow(dead_code)]\n #![deny(extra_requirement_in_impl)]\n \n-// Test that we elaborate `Type: 'region` constraints and infer various important things.\n+// Test that you cannot add an extra where clause in the impl relating\n+// two regions.\n \n trait Master<'a, 'b> {\n     fn foo();\n }\n \n-// `U: 'a` does not imply `V: 'a`\n impl<'a, 'b> Master<'a, 'b> for () {\n     fn foo() where 'a: 'b { }\n-    //~^ ERROR parameter type `V` may not live long enough\n }\n \n fn main() {", "previous_filename": "src/test/ui/compare-method/region.rs"}, {"sha": "e657813221a1265e9854a8728e4055a91be39df2", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -1,7 +1,7 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region.rs:22:5\n+  --> $DIR/region-extra.rs:22:5\n    |\n-17 |     fn foo();\n+18 |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n 22 |     fn foo() where 'a: 'b { }", "previous_filename": "src/test/ui/compare-method/region.stderr"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/region-extra.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stdout?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "previous_filename": "src/test/ui/compare-method/region.stdout"}, {"sha": "b7cfdf799bc9d1ac4c47db0e20d05348d7d6da0d", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -8,7 +8,7 @@ error[E0276]: impl has stricter requirements than trait\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #18937 <https://github.com/rust-lang/rust/issues/18937>\n+   = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n note: lint level defined here\n   --> $DIR/region-unrelated.rs:12:9\n    |"}, {"sha": "0b844d4521d784867ec3818a3ba736571f12106d", "filename": "src/test/ui/compare-method/reordered-type-param.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.rs?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -10,6 +10,8 @@\n \n // Tests that ty params get matched correctly when comparing\n // an impl against a trait\n+//\n+// cc #26111\n \n trait A {\n   fn b<C:Clone,D>(&self, x: C) -> C;", "previous_filename": "src/test/compile-fail/issue-2611-5.rs"}, {"sha": "985b85cc4ec4082206eba6f7c9dfb8be4470e12e", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -0,0 +1,14 @@\n+error[E0053]: method `b` has an incompatible type for trait\n+  --> $DIR/reordered-type-param.rs:26:30\n+   |\n+17 |   fn b<C:Clone,D>(&self, x: C) -> C;\n+   |                             - type in trait\n+...\n+26 |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() } //~ ERROR method `b` has an incompatible type\n+   |                              ^ expected type parameter, found a different type parameter\n+   |\n+   = note: expected type `fn(&E, F) -> F`\n+   = note:    found type `fn(&E, G) -> G`\n+\n+error: aborting due to previous error\n+"}, {"sha": "09e9fb4ca2b62ce02eade07a022a6567bd4203b7", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.rs?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that an impl method's bounds aren't *more* restrictive\n-// than the trait method it's implementing\n+// Tests that impl can't add extra `F: Sync` bound aren't *more* restrictive\n+// than the trait method it's implementing.\n+//\n+// Regr test for #26111.\n \n trait A {\n   fn b<C,D>(&self, x: C) -> C;\n@@ -20,8 +22,7 @@ struct E {\n }\n \n impl A for E {\n-    fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n-    //~^ ERROR E0276\n+    fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-2611-4.rs"}, {"sha": "7112a00c7b7900fd7f305fbc1b79f71a044d21e4", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -0,0 +1,11 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/trait-bound-on-type-parameter.rs:25:5\n+   |\n+17 |   fn b<C,D>(&self, x: C) -> C;\n+   |   ---------------------------- definition of `b` from trait\n+...\n+25 |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cca282a1d195b679452429fd5e11fbf486c14e42", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.rs?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "previous_filename": "src/test/compile-fail/trait-bounds-impl-comparison-1.rs"}, {"sha": "f221ebe3302c019dadf23280d4904b519a7955a6", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -0,0 +1,65 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:36:5\n+   |\n+23 |     fn test_error1_fn<T: Eq>(&self);\n+   |     -------------------------------- definition of `test_error1_fn` from trait\n+...\n+36 |     fn test_error1_fn<T: Ord>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Ord`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:40:5\n+   |\n+24 |     fn test_error2_fn<T: Eq + Ord>(&self);\n+   |     -------------------------------------- definition of `test_error2_fn` from trait\n+...\n+40 |     fn test_error2_fn<T: Eq + B>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:44:5\n+   |\n+25 |     fn test_error3_fn<T: Eq + Ord>(&self);\n+   |     -------------------------------------- definition of `test_error3_fn` from trait\n+...\n+44 |     fn test_error3_fn<T: B + Eq>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:54:5\n+   |\n+28 |     fn test_error5_fn<T: A>(&self);\n+   |     ------------------------------- definition of `test_error5_fn` from trait\n+...\n+54 |     fn test_error5_fn<T: B>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:60:5\n+   |\n+30 |     fn test_error7_fn<T: A>(&self);\n+   |     ------------------------------- definition of `test_error7_fn` from trait\n+...\n+60 |     fn test_error7_fn<T: A + Eq>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::cmp::Eq`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:63:5\n+   |\n+31 |     fn test_error8_fn<T: B>(&self);\n+   |     ------------------------------- definition of `test_error8_fn` from trait\n+...\n+63 |     fn test_error8_fn<T: C>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: C`\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-1.rs:76:5\n+   |\n+72 |     fn method<G:Getter<isize>>(&self);\n+   |     ---------------------------------- definition of `method` from trait\n+...\n+76 |     fn method<G: Getter<usize>>(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "e82cf256df131fa0a8501fdf6cf10bd87799f999", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.rs?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "previous_filename": "src/test/compile-fail/trait-bounds-impl-comparison-2.rs"}, {"sha": "5003550fd1ee3f0b0cb618cdcb70d3f19c11fbb7", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=fa9ebfc74e28ea2efb0508b3e2c73cc27ce3b65f", "patch": "@@ -0,0 +1,11 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/traits-misc-mismatch-2.rs:23:5\n+   |\n+19 |     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n+   |     ------------------------------------------------------------------ definition of `zip` from trait\n+...\n+23 |     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n+   |     ^ impl has extra requirement `U: Iterator<B>`\n+\n+error: aborting due to previous error\n+"}]}