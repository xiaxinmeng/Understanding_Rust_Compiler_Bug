{"sha": "bfa41f28010b336e43e2896693b26853ecc1f492", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTQxZjI4MDEwYjMzNmU0M2UyODk2NjkzYjI2ODUzZWNjMWY0OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T22:49:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T22:49:43Z"}, "message": "Auto merge of #50108 - Zoxc:sync-gcx, r=mw\n\nMake GlobalCtxt thread-safe\n\nr? @michaelwoerister", "tree": {"sha": "40db91d4f6f40f691186fca3620825743b9ed9e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40db91d4f6f40f691186fca3620825743b9ed9e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa41f28010b336e43e2896693b26853ecc1f492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa41f28010b336e43e2896693b26853ecc1f492", "html_url": "https://github.com/rust-lang/rust/commit/bfa41f28010b336e43e2896693b26853ecc1f492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa41f28010b336e43e2896693b26853ecc1f492/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa094a43cc041c8483b7c80fb0ec4be233dd01b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa094a43cc041c8483b7c80fb0ec4be233dd01b7", "html_url": "https://github.com/rust-lang/rust/commit/aa094a43cc041c8483b7c80fb0ec4be233dd01b7"}, {"sha": "2119d04b2d4f5f6aaa922e529aff5378d2036420", "url": "https://api.github.com/repos/rust-lang/rust/commits/2119d04b2d4f5f6aaa922e529aff5378d2036420", "html_url": "https://github.com/rust-lang/rust/commit/2119d04b2d4f5f6aaa922e529aff5378d2036420"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "d5a1d18a676082094ca9213850c58a7908ea5add", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -2044,6 +2044,7 @@ dependencies = [\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon-core 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"serialize 0.0.0\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "befc1ba064aa2e7199afa2b76765366838970d43", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -36,6 +36,8 @@\n #![feature(lang_items)]\n #![feature(optin_builtin_traits)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors;"}, {"sha": "076d56fb80842cab1c4efbe9677086fae7af1cf7", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -845,10 +845,10 @@ impl Session {\n     /// We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n.\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n-        assert!(self.query_threads() == 1);\n         let mut ret = true;\n         match self.optimization_fuel_crate {\n             Some(ref c) if c == crate_name => {\n+                assert!(self.query_threads() == 1);\n                 let fuel = self.optimization_fuel_limit.get();\n                 ret = fuel != 0;\n                 if fuel == 0 && !self.out_of_fuel.get() {\n@@ -862,6 +862,7 @@ impl Session {\n         }\n         match self.print_fuel_crate {\n             Some(ref c) if c == crate_name => {\n+                assert!(self.query_threads() == 1);\n                 self.print_fuel.set(self.print_fuel.get() + 1);\n             }\n             _ => {}"}, {"sha": "35b2ce50da79d07f0ee74bbe52e6fa93cebf0450", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -58,7 +58,7 @@ use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableVec};\n use arena::{TypedArena, SyncDroplessArena};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::{Lrc, Lock};\n+use rustc_data_structures::sync::{self, Lrc, Lock, WorkerLocal};\n use std::any::Any;\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n@@ -80,14 +80,14 @@ use syntax_pos::Span;\n use hir;\n \n pub struct AllArenas<'tcx> {\n-    pub global: GlobalArenas<'tcx>,\n+    pub global: WorkerLocal<GlobalArenas<'tcx>>,\n     pub interner: SyncDroplessArena,\n }\n \n impl<'tcx> AllArenas<'tcx> {\n     pub fn new() -> Self {\n         AllArenas {\n-            global: GlobalArenas::new(),\n+            global: WorkerLocal::new(|_| GlobalArenas::new()),\n             interner: SyncDroplessArena::new(),\n         }\n     }\n@@ -854,7 +854,7 @@ impl<'a, 'gcx, 'tcx> Deref for TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n pub struct GlobalCtxt<'tcx> {\n-    global_arenas: &'tcx GlobalArenas<'tcx>,\n+    global_arenas: &'tcx WorkerLocal<GlobalArenas<'tcx>>,\n     global_interners: CtxtInterners<'tcx>,\n \n     cstore: &'tcx CrateStoreDyn,\n@@ -1179,6 +1179,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             output_filenames: Arc::new(output_filenames.clone()),\n         };\n \n+        sync::assert_send_val(&gcx);\n+\n         tls::enter_global(gcx, f)\n     }\n \n@@ -1704,7 +1706,7 @@ pub mod tls {\n     use ty::maps;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n     use rustc_data_structures::OnDrop;\n-    use rustc_data_structures::sync::Lrc;\n+    use rustc_data_structures::sync::{self, Lrc};\n     use dep_graph::OpenTask;\n \n     /// This is the implicit state of rustc. It contains the current\n@@ -1832,6 +1834,10 @@ pub mod tls {\n         if context == 0 {\n             f(None)\n         } else {\n+            // We could get a ImplicitCtxt pointer from another thread.\n+            // Ensure that ImplicitCtxt is Sync\n+            sync::assert_sync::<ImplicitCtxt>();\n+\n             unsafe { f(Some(&*(context as *const ImplicitCtxt))) }\n         }\n     }"}, {"sha": "f0f4adde7ee91c7220462ad16c3342a9d6593bdf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -617,6 +617,8 @@ pub struct Slice<T> {\n     opaque: OpaqueSliceContents,\n }\n \n+unsafe impl<T: Sync> Sync for Slice<T> {}\n+\n impl<T: Copy> Slice<T> {\n     #[inline]\n     fn from_arena<'tcx>(arena: &'tcx SyncDroplessArena, slice: &[T]) -> &'tcx Slice<T> {"}, {"sha": "d09e8f4845e5edf4ecd2a7b2bba3d2f4e2afaab9", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -23,6 +23,8 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate ar;\n extern crate flate2;\n #[macro_use]"}, {"sha": "17ee771e5294083cfb93dda2698b5f7080cf808c", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -17,6 +17,7 @@ cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n parking_lot_core = \"0.2.8\"\n rustc-rayon = \"0.1.0\"\n+rustc-rayon-core = \"0.1.0\"\n rustc-hash = \"1.0.1\"\n \n [dependencies.parking_lot]"}, {"sha": "7046a2a2a493d1f752f52657d09eda96ac2dbbdf", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -44,6 +44,7 @@ extern crate parking_lot;\n extern crate cfg_if;\n extern crate stable_deref_trait;\n extern crate rustc_rayon as rayon;\n+extern crate rustc_rayon_core as rayon_core;\n extern crate rustc_hash;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "6f7d9e1b54b1ead0237398c50b6262bbd27664f5", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -36,7 +36,6 @@ use std::marker::PhantomData;\n use std::fmt::Debug;\n use std::fmt::Formatter;\n use std::fmt;\n-use std;\n use std::ops::{Deref, DerefMut};\n use owning_ref::{Erased, OwningRef};\n \n@@ -100,6 +99,33 @@ cfg_if! {\n \n         use std::cell::Cell;\n \n+        #[derive(Debug)]\n+        pub struct WorkerLocal<T>(OneThread<T>);\n+\n+        impl<T> WorkerLocal<T> {\n+            /// Creates a new worker local where the `initial` closure computes the\n+            /// value this worker local should take for each thread in the thread pool.\n+            #[inline]\n+            pub fn new<F: FnMut(usize) -> T>(mut f: F) -> WorkerLocal<T> {\n+                WorkerLocal(OneThread::new(f(0)))\n+            }\n+\n+            /// Returns the worker-local value for each thread\n+            #[inline]\n+            pub fn into_inner(self) -> Vec<T> {\n+                vec![OneThread::into_inner(self.0)]\n+            }\n+        }\n+\n+        impl<T> Deref for WorkerLocal<T> {\n+            type Target = T;\n+\n+            #[inline(always)]\n+            fn deref(&self) -> &T {\n+                &*self.0\n+            }\n+        }\n+\n         #[derive(Debug)]\n         pub struct MTLock<T>(T);\n \n@@ -200,9 +226,12 @@ cfg_if! {\n         use parking_lot::Mutex as InnerLock;\n         use parking_lot::RwLock as InnerRwLock;\n \n+        use std;\n         use std::thread;\n         pub use rayon::{join, scope};\n \n+        pub use rayon_core::WorkerLocal;\n+\n         pub use rayon::iter::ParallelIterator;\n         use rayon::iter::IntoParallelIterator;\n \n@@ -638,7 +667,9 @@ pub struct OneThread<T> {\n     inner: T,\n }\n \n+#[cfg(parallel_queries)]\n unsafe impl<T> std::marker::Sync for OneThread<T> {}\n+#[cfg(parallel_queries)]\n unsafe impl<T> std::marker::Send for OneThread<T> {}\n \n impl<T> OneThread<T> {"}, {"sha": "d76ca5bdf27100bb12aec617deb2b100155fc598", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -23,6 +23,8 @@\n #![feature(specialization)]\n #![feature(rustc_private)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate libc;\n #[macro_use]\n extern crate log;"}, {"sha": "f32f6eda8ff59c077970e9b120e1b8b319b906cb", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -14,6 +14,8 @@\n \n #![feature(rustc_diagnostic_macros)]\n \n+#![recursion_limit=\"256\"]\n+\n #[macro_use] extern crate rustc;\n #[macro_use] extern crate syntax;\n extern crate rustc_typeck;"}, {"sha": "64dcd3e51751c1c4f7fd473aa4d832d4ad969e6d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -15,6 +15,8 @@\n #![cfg_attr(stage0, feature(macro_lifetime_matcher))]\n #![allow(unused_attributes)]\n \n+#![recursion_limit=\"256\"]\n+\n #[macro_use]\n extern crate rustc;\n "}, {"sha": "7fa69cb98338dbee5b6d44acf56f515158fbae17", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa41f28010b336e43e2896693b26853ecc1f492/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=bfa41f28010b336e43e2896693b26853ecc1f492", "patch": "@@ -17,6 +17,8 @@\n #![feature(iterator_find_map)]\n #![feature(in_band_lifetimes)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate chalk_engine;\n #[macro_use]\n extern crate log;"}]}