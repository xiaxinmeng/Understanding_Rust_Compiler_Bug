{"sha": "79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZjYwZmJkMDQxMGQxY2ZjYmM0ZGRjOGNiYTdiYjExZTFkZDY1YmE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-26T21:54:35Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rust-std to use Tarball", "tree": {"sha": "0d1a055ca43fa722bfb6eae872444745803c870d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1a055ca43fa722bfb6eae872444745803c870d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjfIACgkQPgar6Auq\n8ZzLhQ/9HvhV1LX3y5h4oqoXoO7eM5iBax2Ho1+a10ld6eJ0/QRR+KW0x99Xn/2s\nZZ3Pn9rnyZofDVBeXrSq19UCy1K3UDLWEGdk8tKf4ZHRpnJEDeSNpu1pKAUo4zK8\ndEq3JcKsEzLR2v6mjxWEe2nlsC7ANy3h4cgZeQW/V43k8yslIYNVNaLlcDP4IZ7D\n2xiAvBYG3+UvJdAEaUZkIIoMdvTwW3qGgz6dvJR2ApBTzsCLVd0C59aYUurrw5Wt\nzV21PLQMtO/WXv3U1UQCnyv3fAFIge+nzPVhsYVIMKwDPS0fZHVv22ReQ3sspFiU\njPFNaB18tiaiMAkKxMKCZ9e6/O1y+2jWyxgLDowcFUIZKBcV3DdWgBmDmapEO0mL\nao067alpVAbH1HcvWqfLW96Lkh69LvV/FbJQSitWv/X5hThg6a4Ar/Qmriv21VWW\nWCSNsgJubfZolSd0SNqNfitw//L9Pb7+n7isueTskdaUru1zNFaNyOiMz4UpDh5L\nYYwnRxLUGp6D/mv/vFcjn4rcnYx4KpdLnsdIB93WApcZg7H11FfTXHwY1+gfwzNk\n4sl8qANJ7h8dPqsOjJn2de3FdMOI+MBReeXAP4Yp0W9s0aaSRmHkVAgTmswwRBdq\nbJheWnpv2Fzm2jEUo3ru3kSGER5H0PyUhF7T6/73IPvywJ36EA8=\n=EtRu\n-----END PGP SIGNATURE-----", "payload": "tree 0d1a055ca43fa722bfb6eae872444745803c870d\nparent fd4515cb3f8a8e21d3640ffa8f2b3040a381b87c\nauthor Pietro Albini <pietro@pietroalbini.org> 1606427675 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rust-std to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "html_url": "https://github.com/rust-lang/rust/commit/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4515cb3f8a8e21d3640ffa8f2b3040a381b87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4515cb3f8a8e21d3640ffa8f2b3040a381b87c", "html_url": "https://github.com/rust-lang/rust/commit/fd4515cb3f8a8e21d3640ffa8f2b3040a381b87c"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "98f2b28918a172b3f984dee1013cb31a95f06b99", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "patch": "@@ -559,7 +559,7 @@ pub struct Std {\n }\n \n impl Step for Std {\n-    type Output = PathBuf;\n+    type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -577,46 +577,24 @@ impl Step for Std {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        let name = pkgname(builder, \"rust-std\");\n-        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple));\n         if skip_host_target_lib(builder, compiler) {\n-            return archive;\n+            return None;\n         }\n \n         builder.ensure(compile::Std { compiler, target });\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target.triple));\n-        let _ = fs::remove_dir_all(&image);\n+        let mut tarball = Tarball::new(builder, \"rust-std\", &target.triple);\n+        tarball.include_target_in_component_name(true);\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n-        copy_target_libs(builder, target, &image, &stamp);\n-\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=std-is-standing-at-the-ready.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n-            .arg(format!(\"--component-name=rust-std-{}\", target.triple))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+        copy_target_libs(builder, target, &tarball.image_dir(), &stamp);\n \n-        builder\n-            .info(&format!(\"Dist std stage{} ({} -> {})\", compiler.stage, &compiler.host, target));\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        builder.remove_dir(&image);\n-        archive\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1699,7 +1677,7 @@ impl Step for Extended {\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer);\n         tarballs.push(analysis_installer);\n-        tarballs.push(std_installer);\n+        tarballs.push(std_installer.expect(\"missing std\"));\n         if let Some(docs_installer) = docs_installer {\n             tarballs.push(docs_installer);\n         }"}, {"sha": "bde437723bba10d4b23c8ca21611f714c444193f", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "patch": "@@ -35,6 +35,7 @@ pub(crate) struct Tarball<'a> {\n     overlay_dir: PathBuf,\n     work_dir: PathBuf,\n \n+    include_target_in_component_name: bool,\n     is_preview: bool,\n }\n \n@@ -63,6 +64,7 @@ impl<'a> Tarball<'a> {\n             overlay_dir,\n             work_dir,\n \n+            include_target_in_component_name: false,\n             is_preview: false,\n         }\n     }\n@@ -75,6 +77,10 @@ impl<'a> Tarball<'a> {\n         self.product_name = name.into();\n     }\n \n+    pub(crate) fn include_target_in_component_name(&mut self, include: bool) {\n+        self.include_target_in_component_name = include;\n+    }\n+\n     pub(crate) fn is_preview(&mut self, is: bool) {\n         self.is_preview = is;\n     }\n@@ -123,6 +129,10 @@ impl<'a> Tarball<'a> {\n         if self.is_preview {\n             component_name.push_str(\"-preview\");\n         }\n+        if self.include_target_in_component_name {\n+            component_name.push('-');\n+            component_name.push_str(&self.target);\n+        }\n \n         let distdir = crate::dist::distdir(self.builder);\n         cmd.arg(\"generate\")"}]}