{"sha": "58b67c88119970b7c96f678e3afaab00f086f612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjY3Yzg4MTE5OTcwYjdjOTZmNjc4ZTNhZmFhYjAwZjA4NmY2MTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-28T23:58:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-28T23:58:27Z"}, "message": "Use structured suggestion for unnecessary bounds in type aliases", "tree": {"sha": "c30459b547ff6598ff8fded40935d81dbb840dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30459b547ff6598ff8fded40935d81dbb840dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b67c88119970b7c96f678e3afaab00f086f612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b67c88119970b7c96f678e3afaab00f086f612", "html_url": "https://github.com/rust-lang/rust/commit/58b67c88119970b7c96f678e3afaab00f086f612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b67c88119970b7c96f678e3afaab00f086f612/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "html_url": "https://github.com/rust-lang/rust/commit/b497e18995d6b6992f97512c6b86b5cb3f2f34f5"}], "stats": {"total": 137, "additions": 109, "deletions": 28}, "files": [{"sha": "e3c3966c2f5e0e39e47ddf190904d9c632280b92", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58b67c88119970b7c96f678e3afaab00f086f612/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b67c88119970b7c96f678e3afaab00f086f612/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=58b67c88119970b7c96f678e3afaab00f086f612", "patch": "@@ -1125,8 +1125,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n                 .map(|pred| pred.span()).collect();\n             let mut err = cx.struct_span_lint(TYPE_ALIAS_BOUNDS, spans,\n                 \"where clauses are not enforced in type aliases\");\n-            err.help(\"the clause will not be checked when the type alias is used, \\\n-                      and should be removed\");\n+            err.span_suggestion(\n+                type_alias_generics.where_clause.span_for_predicates_or_empty_place(),\n+                \"the clause will not be checked when the type alias is used, and should be removed\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n             if !suggested_changing_assoc_types {\n                 TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n                 suggested_changing_assoc_types = true;\n@@ -1136,14 +1140,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n         // The parameters must not have bounds\n         for param in type_alias_generics.params.iter() {\n             let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n+            let suggestion = spans.iter().map(|sp| {\n+                let start = param.span.between(*sp); // Include the `:` in `T: Bound`.\n+                (start.to(*sp), String::new())\n+            }).collect();\n             if !spans.is_empty() {\n                 let mut err = cx.struct_span_lint(\n                     TYPE_ALIAS_BOUNDS,\n                     spans,\n                     \"bounds on generic parameters are not enforced in type aliases\",\n                 );\n-                err.help(\"the bound will not be checked when the type alias is used, \\\n-                          and should be removed\");\n+                let msg = \"the bound will not be checked when the type alias is used, \\\n+                           and should be removed\";\n+                err.multipart_suggestion(&msg, suggestion, Applicability::MachineApplicable);\n                 if !suggested_changing_assoc_types {\n                     TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n                     suggested_changing_assoc_types = true;"}, {"sha": "7f58f7f73e38c8d77044065182ad55652135e028", "filename": "src/test/ui/associated-type-bounds/type-alias.stderr", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr?ref=58b67c88119970b7c96f678e3afaab00f086f612", "patch": "@@ -5,93 +5,129 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(type_alias_bounds)]` on by default\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaWhere1<T>  = T;\n+   |                  --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:6:25\n    |\n LL | type _TaWhere2<T> where T: Iterator<Item: 'static> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaWhere2<T>  = T;\n+   |                  --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:7:25\n    |\n LL | type _TaWhere3<T> where T: Iterator<Item: 'static> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaWhere3<T>  = T;\n+   |                  --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:8:25\n    |\n LL | type _TaWhere4<T> where T: Iterator<Item: 'static + Copy + Send> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaWhere4<T>  = T;\n+   |                  --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:9:25\n    |\n LL | type _TaWhere5<T> where T: Iterator<Item: for<'a> Into<&'a u8>> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaWhere5<T>  = T;\n+   |                  --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:10:25\n    |\n LL | type _TaWhere6<T> where T: Iterator<Item: Iterator<Item: Copy>> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaWhere6<T>  = T;\n+   |                  --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:12:20\n    |\n LL | type _TaInline1<T: Iterator<Item: Copy>> = T;\n    |                    ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaInline1<T> = T;\n+   |                 --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:13:20\n    |\n LL | type _TaInline2<T: Iterator<Item: 'static>> = T;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaInline2<T> = T;\n+   |                 --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:14:20\n    |\n LL | type _TaInline3<T: Iterator<Item: 'static>> = T;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaInline3<T> = T;\n+   |                 --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:15:20\n    |\n LL | type _TaInline4<T: Iterator<Item: 'static + Copy + Send>> = T;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaInline4<T> = T;\n+   |                 --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:16:20\n    |\n LL | type _TaInline5<T: Iterator<Item: for<'a> Into<&'a u8>>> = T;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaInline5<T> = T;\n+   |                 --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:17:20\n    |\n LL | type _TaInline6<T: Iterator<Item: Iterator<Item: Copy>>> = T;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type _TaInline6<T> = T;\n+   |                 --\n "}, {"sha": "40aa47a7246c40455dbf381cd4a6f4a898ba0a1e", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=58b67c88119970b7c96f678e3afaab00f086f612", "patch": "@@ -340,15 +340,21 @@ LL |     pub type Alias<T: PrivTr> = T;\n    |                       ^^^^^^\n    |\n    = note: `#[warn(type_alias_bounds)]` on by default\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL |     pub type Alias<T> = T;\n+   |                    --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/private-in-public-warn.rs:75:29\n    |\n LL |     pub type Alias<T> where T: PrivTr = T;\n    |                             ^^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL |     pub type Alias<T>  = T;\n+   |                      --\n \n error: aborting due to 36 previous errors\n "}, {"sha": "cb8bad6d9e74dbf227319eb17fa748e64a45f9f6", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr?ref=58b67c88119970b7c96f678e3afaab00f086f612", "patch": "@@ -31,7 +31,10 @@ LL | type Y where i32: Foo = ();\n    |              ^^^^^^^^\n    |\n    = note: `#[warn(type_alias_bounds)]` on by default\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type Y  = ();\n+   |       --\n \n warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:22:19"}, {"sha": "c381d30c64f14326462f178b445cd537fe85c5fa", "filename": "src/test/ui/type/type-alias-bounds.stderr", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58b67c88119970b7c96f678e3afaab00f086f612/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr?ref=58b67c88119970b7c96f678e3afaab00f086f612", "patch": "@@ -5,79 +5,106 @@ LL | type SVec<T: Send + Send> = Vec<T>;\n    |              ^^^^   ^^^^\n    |\n    = note: `#[warn(type_alias_bounds)]` on by default\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type SVec<T> = Vec<T>;\n+   |     --    --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:10:21\n    |\n LL | type S2Vec<T> where T: Send = Vec<T>;\n    |                     ^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type S2Vec<T>  = Vec<T>;\n+   |              --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:12:19\n    |\n LL | type VVec<'b, 'a: 'b + 'b> = (&'b u32, Vec<&'a i32>);\n    |                   ^^   ^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type VVec<'b, 'a> = (&'b u32, Vec<&'a i32>);\n+   |            --  --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:14:18\n    |\n LL | type WVec<'b, T: 'b + 'b> = (&'b u32, Vec<T>);\n    |                  ^^   ^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type WVec<'b, T> = (&'b u32, Vec<T>);\n+   |           --  --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:16:25\n    |\n LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n    |                         ^^^^^  ^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type W2Vec<'b, T>  = (&'b u32, Vec<T>);\n+   |                  --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:47:12\n    |\n LL | type T1<U: Bound> = U::Assoc;\n    |            ^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n   --> $DIR/type-alias-bounds.rs:47:21\n    |\n LL | type T1<U: Bound> = U::Assoc;\n    |                     ^^^^^^^^\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type T1<U> = U::Assoc;\n+   |         --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:48:18\n    |\n LL | type T2<U> where U: Bound = U::Assoc;\n    |                  ^^^^^^^^\n    |\n-   = help: the clause will not be checked when the type alias is used, and should be removed\n help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n   --> $DIR/type-alias-bounds.rs:48:29\n    |\n LL | type T2<U> where U: Bound = U::Assoc;\n    |                             ^^^^^^^^\n+help: the clause will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type T2<U>  = U::Assoc;\n+   |           --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:56:12\n    |\n LL | type T5<U: Bound> = <U as Bound>::Assoc;\n    |            ^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type T5<U> = <U as Bound>::Assoc;\n+   |         --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:57:12\n    |\n LL | type T6<U: Bound> = ::std::vec::Vec<U>;\n    |            ^^^^^\n    |\n-   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | type T6<U> = ::std::vec::Vec<U>;\n+   |         --\n "}]}