{"sha": "d763faf92198e3f0c851388c71d2bb8a2f04afd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjNmYWY5MjE5OGUzZjBjODUxMzg4YzcxZDJiYjhhMmYwNGFmZDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T02:47:18Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T20:56:44Z"}, "message": "Parse alternative incorrect uses of await and recover", "tree": {"sha": "2613a847c021be3e35e5c78480b24be0249ff770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2613a847c021be3e35e5c78480b24be0249ff770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d763faf92198e3f0c851388c71d2bb8a2f04afd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d763faf92198e3f0c851388c71d2bb8a2f04afd9", "html_url": "https://github.com/rust-lang/rust/commit/d763faf92198e3f0c851388c71d2bb8a2f04afd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d763faf92198e3f0c851388c71d2bb8a2f04afd9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1962adea6ad9b992516ae56ad7f8c5bc33b951cb", "html_url": "https://github.com/rust-lang/rust/commit/1962adea6ad9b992516ae56ad7f8c5bc33b951cb"}], "stats": {"total": 465, "additions": 428, "deletions": 37}, "files": [{"sha": "12ccc79e4ab41dc7a8d443559e4a003c680edc8f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -97,6 +97,10 @@ pub struct LoweringContext<'a> {\n     is_generator: bool,\n     is_async_body: bool,\n \n+    /// Used to get the current `fn`'s def span to point to when using `await`\n+    /// outside of an `async fn`.\n+    current_item_id: Option<hir::HirId>,\n+\n     catch_scopes: Vec<NodeId>,\n     loop_scopes: Vec<NodeId>,\n     is_in_loop_condition: bool,\n@@ -250,6 +254,7 @@ pub fn lower_crate(\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n         is_async_body: false,\n+        current_item_id: None,\n         is_in_trait_impl: false,\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n@@ -3115,6 +3120,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::Fn(ref decl, ref header, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n+                let hir_id = self.lower_node_id(id);\n                 self.with_new_scopes(|this| {\n                     let mut lower_fn = |decl: &FnDecl| {\n                         // Note: we don't need to change the return type from `T` to\n@@ -3153,6 +3159,7 @@ impl<'a> LoweringContext<'a> {\n                     } else {\n                         lower_fn(decl)\n                     };\n+                    this.current_item_id = Some(hir_id);\n \n                     hir::ItemKind::Fn(\n                         fn_decl,\n@@ -5551,13 +5558,21 @@ impl<'a> LoweringContext<'a> {\n         //     }\n         // }\n         if !self.is_async_body {\n-            span_err!(\n+            let mut err = struct_span_err!(\n                 self.sess,\n                 await_span,\n                 E0728,\n                 \"`await` is only allowed inside `async` functions and blocks\"\n             );\n-            self.sess.abort_if_errors();\n+            err.span_label(await_span, \"only allowed inside `async` functions and blocks\");\n+            if let Some(item_id) = self.current_item_id {\n+                err.span_label(\n+                    self.sess.source_map().def_span(self.items[&item_id].span),\n+                    \"this function is not `async`\",\n+                );\n+            }\n+            err.emit();\n+            return hir::ExprKind::Err;\n         }\n         let span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Await,"}, {"sha": "55e13ef00dcc9c85d86ef6c3745c1c538ef47f88", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 105, "deletions": 8, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -2629,14 +2629,94 @@ impl<'a> Parser<'a> {\n                     db.note(\"variable declaration using `let` is a statement\");\n                     return Err(db);\n                 } else if self.span.rust_2018() && self.eat_keyword(keywords::Await) {\n-                    // FIXME: remove this branch when `await!` is no longer supported\n-                    // https://github.com/rust-lang/rust/issues/60610\n-                    self.expect(&token::Not)?;\n-                    self.expect(&token::OpenDelim(token::Paren))?;\n-                    let expr = self.parse_expr()?;\n-                    self.expect(&token::CloseDelim(token::Paren))?;\n-                    hi = self.prev_span;\n-                    ex = ExprKind::Await(ast::AwaitOrigin::MacroLike, expr);\n+                    let await_sp = self.prev_span;\n+                    match self.token {\n+                        token::Not => {\n+                            // FIXME: make this an error when `await!` is no longer supported\n+                            // https://github.com/rust-lang/rust/issues/60610\n+                            self.expect(&token::Not)?;\n+                            self.expect(&token::OpenDelim(token::Paren))?;\n+                            let expr = self.parse_expr().map_err(|mut err| {\n+                                err.span_label(\n+                                    await_sp,\n+                                    \"while parsing this await macro call\",\n+                                );\n+                                err\n+                            })?;\n+                            self.expect(&token::CloseDelim(token::Paren))?;\n+                            ex = ExprKind::Await(ast::AwaitOrigin::MacroLike, expr);\n+                        }\n+                        token::Question => {\n+                            // Handle `await? <expr>`\n+                            self.bump(); // `?`\n+                            let expr = self.parse_expr().map_err(|mut err| {\n+                                err.span_label(\n+                                    await_sp,\n+                                    \"while parsing this incorrect await statement\",\n+                                );\n+                                err\n+                            })?;\n+                            let sp = lo.to(expr.span);\n+                            let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n+                                .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n+                            let expr = self.mk_expr(\n+                                sp,\n+                                ExprKind::Await(ast::AwaitOrigin::FieldLike, expr),\n+                                ThinVec::new(),\n+                            );\n+                            hi = sp;\n+                            ex = ExprKind::Try(expr);\n+                            let mut err = self.struct_span_err(\n+                                await_sp,\n+                                \"incorrect use of `await`\",\n+                            );\n+                            err.span_suggestion(\n+                                sp,\n+                                \"`await` is not a statement\",\n+                                format!(\"{}.await?\", expr_str),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            err.emit();\n+                        }\n+                        ref t => {\n+                            // Handle `await <expr>`\n+                            let expr = if t == &token::OpenDelim(token::Brace) {\n+                                // Handle `await { <expr> }`\n+                                // this needs to be handled separatedly from the next arm to avoid\n+                                // interpreting `await { <expr> }?` as `<expr>?.await`\n+                                self.parse_block_expr(\n+                                    None,\n+                                    self.span,\n+                                    BlockCheckMode::Default,\n+                                    ThinVec::new(),\n+                                )\n+                            } else {\n+                                self.parse_expr()\n+                            }.map_err(|mut err| {\n+                                err.span_label(\n+                                    await_sp,\n+                                    \"while parsing this incorrect await statement\",\n+                                );\n+                                err\n+                            })?;\n+                            let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n+                                .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n+                            let sp = lo.to(expr.span);\n+                            hi = sp;\n+                            ex = ExprKind::Await(ast::AwaitOrigin::FieldLike, expr);\n+                            let mut err = self.struct_span_err(\n+                                await_sp,\n+                                \"incorrect use of `await`\",\n+                            );\n+                            err.span_suggestion(\n+                                sp,\n+                                \"`await` is not a statement\",\n+                                format!(\"{}.await\", expr_str),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            err.emit();\n+                        }\n+                    }\n                 } else if self.token.is_path_start() {\n                     let path = self.parse_path(PathStyle::Expr)?;\n \n@@ -2913,6 +2993,23 @@ impl<'a> Parser<'a> {\n                 ExprKind::Await(ast::AwaitOrigin::FieldLike, self_arg),\n                 ThinVec::new(),\n             );\n+            if self.token == token::OpenDelim(token::Paren) &&\n+                self.look_ahead(1, |t| t == &token::CloseDelim(token::Paren))\n+            {\n+                // future.await()\n+                let lo = self.span;\n+                self.bump(); // (\n+                let sp = lo.to(self.span);\n+                self.bump(); // )\n+                let mut err = self.struct_span_err(span, \"incorrect use of `await`\");\n+                err.span_suggestion(\n+                    sp,\n+                    \"`await` is not a method call, remove the parentheses\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit()\n+            }\n             return Ok(await_expr);\n         }\n         let segment = self.parse_path_segment(PathStyle::Expr)?;"}, {"sha": "f59f1160e703e4bd82eec71654567c737666ee61", "filename": "src/test/ui/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -22,6 +22,4 @@ macro_rules! await {\n     () => {}\n }\n \n-fn main() {\n-    match await { await => () } //~ ERROR expected `!`, found `{`\n-}\n+fn main() {}"}, {"sha": "c4b82b29f0270f30da71337f84f335b0be32ec1b", "filename": "src/test/ui/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -68,13 +68,5 @@ help: you can escape reserved keywords to use them as identifiers\n LL | macro_rules! r#await {\n    |              ^^^^^^^\n \n-error: expected `!`, found `{`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:26:17\n-   |\n-LL |     match await { await => () }\n-   |     -----       ^ expected `!`\n-   |     |\n-   |     while parsing this match expression\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "d856869684266c1927441a514bafc40f9a27644d", "filename": "src/test/ui/await-keyword/2018-edition-error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.rs?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -9,6 +9,4 @@ mod outer_mod {\n use self::outer_mod::await::await; //~ ERROR expected identifier\n     //~^ ERROR expected identifier, found reserved keyword `await`\n \n-fn main() {\n-    match await { await => () } //~ ERROR expected `!`, found `{`\n-}\n+fn main() {}"}, {"sha": "8afe5c1a36b36db695f0b341e01795a3a1f96822", "filename": "src/test/ui/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -38,13 +38,5 @@ help: you can escape reserved keywords to use them as identifiers\n LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n-error: expected `!`, found `{`\n-  --> $DIR/2018-edition-error.rs:13:17\n-   |\n-LL |     match await { await => () }\n-   |     -----       ^ expected `!`\n-   |     |\n-   |     while parsing this match expression\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "ca3654d3c87859cdd589d63bd271cc499dcaad2f", "filename": "src/test/ui/await-keyword/incorrect-syntax-suggestions.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -0,0 +1,93 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+async fn bar() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+async fn foo1() -> Result<(), ()> {\n+    let _ = await bar(); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo2() -> Result<(), ()> {\n+    let _ = await? bar(); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo3() -> Result<(), ()> {\n+    let _ = await bar()?; //~ ERROR incorrect use of `await`\n+    //~^ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    Ok(())\n+}\n+async fn foo21() -> Result<(), ()> {\n+    let _ = await { bar() }; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo22() -> Result<(), ()> {\n+    let _ = await(bar()); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo23() -> Result<(), ()> {\n+    let _ = await { bar() }?; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo4() -> Result<(), ()> {\n+    let _ = (await bar())?; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo5() -> Result<(), ()> {\n+    let _ = bar().await(); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo6() -> Result<(), ()> {\n+    let _ = bar().await()?; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo7() -> Result<(), ()> {\n+    let _ = bar().await; // OK\n+    Ok(())\n+}\n+async fn foo8() -> Result<(), ()> {\n+    let _ = bar().await?; // OK\n+    Ok(())\n+}\n+fn foo9() -> Result<(), ()> {\n+    let _ = await bar(); //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    //~^ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo10() -> Result<(), ()> {\n+    let _ = await? bar(); //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    //~^ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo11() -> Result<(), ()> {\n+    let _ = await bar()?; //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    //~^ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo12() -> Result<(), ()> {\n+    let _ = (await bar())?; //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    //~^ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo13() -> Result<(), ()> {\n+    let _ = bar().await(); //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    //~^ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo14() -> Result<(), ()> {\n+    let _ = bar().await()?; //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    //~^ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo15() -> Result<(), ()> {\n+    let _ = bar().await; //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    Ok(())\n+}\n+fn foo16() -> Result<(), ()> {\n+    let _ = bar().await?; //~ ERROR `await` is only allowed inside `async` functions and blocks\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "f39ccfcc95c893769a57387cb83b716ad8bc2d0f", "filename": "src/test/ui/await-keyword/incorrect-syntax-suggestions.stderr", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -0,0 +1,196 @@\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:10:13\n+   |\n+LL |     let _ = await bar();\n+   |             ^^^^^------\n+   |             |\n+   |             help: `await` is not a statement: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:14:13\n+   |\n+LL |     let _ = await? bar();\n+   |             ^^^^^-------\n+   |             |\n+   |             help: `await` is not a statement: `bar().await?`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:18:13\n+   |\n+LL |     let _ = await bar()?;\n+   |             ^^^^^-------\n+   |             |\n+   |             help: `await` is not a statement: `bar()?.await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:23:13\n+   |\n+LL |     let _ = await { bar() };\n+   |             ^^^^^----------\n+   |             |\n+   |             help: `await` is not a statement: `{ bar() }.await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:27:13\n+   |\n+LL |     let _ = await(bar());\n+   |             ^^^^^-------\n+   |             |\n+   |             help: `await` is not a statement: `(bar()).await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:31:13\n+   |\n+LL |     let _ = await { bar() }?;\n+   |             ^^^^^----------\n+   |             |\n+   |             help: `await` is not a statement: `{ bar() }.await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:35:14\n+   |\n+LL |     let _ = (await bar())?;\n+   |              ^^^^^------\n+   |              |\n+   |              help: `await` is not a statement: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:39:13\n+   |\n+LL |     let _ = bar().await();\n+   |             ^^^^^^^^^^^-- help: `await` is not a method call, remove the parentheses\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:43:13\n+   |\n+LL |     let _ = bar().await()?;\n+   |             ^^^^^^^^^^^-- help: `await` is not a method call, remove the parentheses\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+   |\n+LL |     let _ = await bar();\n+   |             ^^^^^------\n+   |             |\n+   |             help: `await` is not a statement: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+   |\n+LL |     let _ = await? bar();\n+   |             ^^^^^-------\n+   |             |\n+   |             help: `await` is not a statement: `bar().await?`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+   |\n+LL |     let _ = await bar()?;\n+   |             ^^^^^-------\n+   |             |\n+   |             help: `await` is not a statement: `bar()?.await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+   |\n+LL |     let _ = (await bar())?;\n+   |              ^^^^^------\n+   |              |\n+   |              help: `await` is not a statement: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:75:13\n+   |\n+LL |     let _ = bar().await();\n+   |             ^^^^^^^^^^^-- help: `await` is not a method call, remove the parentheses\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:80:13\n+   |\n+LL |     let _ = bar().await()?;\n+   |             ^^^^^^^^^^^-- help: `await` is not a method call, remove the parentheses\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+   |\n+LL | async fn foo8() -> Result<(), ()> {\n+   | --------------------------------- this function is not `async`\n+...\n+LL |     let _ = await bar();\n+   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+   |\n+LL | fn foo9() -> Result<(), ()> {\n+   | --------------------------- this function is not `async`\n+...\n+LL |     let _ = await? bar();\n+   |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+   |\n+LL | fn foo10() -> Result<(), ()> {\n+   | ---------------------------- this function is not `async`\n+...\n+LL |     let _ = await bar()?;\n+   |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+   |\n+LL | fn foo11() -> Result<(), ()> {\n+   | ---------------------------- this function is not `async`\n+...\n+LL |     let _ = (await bar())?;\n+   |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:75:13\n+   |\n+LL | fn foo12() -> Result<(), ()> {\n+   | ---------------------------- this function is not `async`\n+...\n+LL |     let _ = bar().await();\n+   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:80:13\n+   |\n+LL | fn foo13() -> Result<(), ()> {\n+   | ---------------------------- this function is not `async`\n+...\n+LL |     let _ = bar().await()?;\n+   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:85:13\n+   |\n+LL | fn foo14() -> Result<(), ()> {\n+   | ---------------------------- this function is not `async`\n+...\n+LL |     let _ = bar().await;\n+   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:89:13\n+   |\n+LL | fn foo15() -> Result<(), ()> {\n+   | ---------------------------- this function is not `async`\n+...\n+LL |     let _ = bar().await?;\n+   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/incorrect-syntax-suggestions.rs:18:19\n+   |\n+LL |     let _ = await bar()?;\n+   |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error: aborting due to 24 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4e525974c2c6fbd521b03e8fbedcbbfc99a5cb7d", "filename": "src/test/ui/await-keyword/post_expansion_error.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2Fpost_expansion_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fawait-keyword%2Fpost_expansion_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2Fpost_expansion_error.stderr?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -2,7 +2,9 @@ error: expected expression, found `)`\n   --> $DIR/post_expansion_error.rs:8:12\n    |\n LL |     await!()\n-   |            ^ expected expression\n+   |     -----  ^ expected expression\n+   |     |\n+   |     while parsing this await macro call\n \n error: aborting due to previous error\n "}, {"sha": "b2dbadebc7c1e48ff9c1b2aee7b7648fc98c4ae7", "filename": "src/test/ui/issues/issue-51719.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fissues%2Fissue-51719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fissues%2Fissue-51719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51719.rs?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -9,3 +9,5 @@ async fn foo() {}\n fn make_generator() {\n     let _gen = || foo.await; //~ ERROR `await` is only allowed inside `async` functions and blocks\n }\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "cb4a5e903708681cde62a117a74c8adc7bb772e9", "filename": "src/test/ui/issues/issue-51719.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51719.stderr?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -1,8 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/issue-51719.rs:10:19\n    |\n+LL | async fn foo() {}\n+   | -------------- this function is not `async`\n+...\n LL |     let _gen = || foo.await;\n-   |                   ^^^^^^^^^\n+   |                   ^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "842b99f16f256ca2b1ad0234181dd31ce16badd0", "filename": "src/test/ui/issues/issue-51751.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d763faf92198e3f0c851388c71d2bb8a2f04afd9/src%2Ftest%2Fui%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51751.stderr?ref=d763faf92198e3f0c851388c71d2bb8a2f04afd9", "patch": "@@ -1,8 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/issue-51751.rs:11:20\n    |\n+LL | async fn inc(limit: i64) -> i64 {\n+   | ------------------------------- this function is not `async`\n+...\n LL |     let finished = result.await;\n-   |                    ^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}]}