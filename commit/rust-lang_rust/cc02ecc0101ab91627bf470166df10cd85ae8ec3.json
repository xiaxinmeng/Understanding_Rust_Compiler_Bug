{"sha": "cc02ecc0101ab91627bf470166df10cd85ae8ec3", "node_id": "C_kwDOAAsO6NoAKGNjMDJlY2MwMTAxYWI5MTYyN2JmNDcwMTY2ZGYxMGNkODVhZThlYzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-15T00:01:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-15T00:01:37Z"}, "message": "Rollup merge of #106863 - anden3:compiler-double-spaces, r=Nilstrieb\n\nRemove various double spaces in compiler source comments.\n\nWas asked to do it by `@Nilstrieb`", "tree": {"sha": "6b1cfe1b3bee6428feb1a7be3ac62bde67dae2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1cfe1b3bee6428feb1a7be3ac62bde67dae2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc02ecc0101ab91627bf470166df10cd85ae8ec3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjw0JhCRBK7hj4Ov3rIwAAgtIIACynkAVF3QhxEFdWUEaz7mxk\nNlouhLjRqrBQazRLlY/ZwWpPhNAwlfkZABcllq4DFuKlwZZSSGTvfY0GyJhZUMBh\ns1OcVVdxH3/oAfcNEs5jq8cf481i6mhMmUrbKF3/nu8FrInJKIQ0I3Gz1LNkrB1l\nfjIAePdEZaJZnJX6pX9mAnfJIUjeWZ56plFUcmnpO9iAlIFq976EtqvYiAmwQtbk\nw8JDYmPNyS/CnxwDsnQi7xk5xTh0U5qhlyA9Yqe6NGw2S59BDpn21JXU7FZb7zJ7\nJ+P5xWSdsO5zadwARQkpYYALjC0aZ1SlLiF7umsr0OQVZYmdwP1sYMKPuVq3NSU=\n=DYbQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b1cfe1b3bee6428feb1a7be3ac62bde67dae2fc\nparent 980bf1979e28b4acc4e189b4266afd5f58b68d6d\nparent 0e65003c9e0ea97d7fcfbdb01cca181558b5fa15\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673740897 +0100\ncommitter GitHub <noreply@github.com> 1673740897 +0100\n\nRollup merge of #106863 - anden3:compiler-double-spaces, r=Nilstrieb\n\nRemove various double spaces in compiler source comments.\n\nWas asked to do it by `@Nilstrieb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc02ecc0101ab91627bf470166df10cd85ae8ec3", "html_url": "https://github.com/rust-lang/rust/commit/cc02ecc0101ab91627bf470166df10cd85ae8ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc02ecc0101ab91627bf470166df10cd85ae8ec3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "980bf1979e28b4acc4e189b4266afd5f58b68d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/980bf1979e28b4acc4e189b4266afd5f58b68d6d", "html_url": "https://github.com/rust-lang/rust/commit/980bf1979e28b4acc4e189b4266afd5f58b68d6d"}, {"sha": "0e65003c9e0ea97d7fcfbdb01cca181558b5fa15", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e65003c9e0ea97d7fcfbdb01cca181558b5fa15", "html_url": "https://github.com/rust-lang/rust/commit/0e65003c9e0ea97d7fcfbdb01cca181558b5fa15"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b48654d1ac36a44fa39aa059709b4b9dcbfd5dac", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -1100,7 +1100,7 @@ pub enum FieldsShape {\n         /// named `inverse_memory_index`.\n         ///\n         // FIXME(eddyb) build a better abstraction for permutations, if possible.\n-        // FIXME(camlorn) also consider small vector  optimization here.\n+        // FIXME(camlorn) also consider small vector optimization here.\n         memory_index: Vec<u32>,\n     },\n }"}, {"sha": "918fb2d69237e4cb48b125a85daab2a60f8635dc", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -209,7 +209,7 @@ fn place_components_conflict<'tcx>(\n             match (elem, &base_ty.kind(), access) {\n                 (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n                 | (_, _, Shallow(Some(ArtificialField::ShallowBorrow))) => {\n-                    // The array length is like  additional fields on the\n+                    // The array length is like additional fields on the\n                     // type; it does not overlap any existing data there.\n                     // Furthermore, if cannot actually be a prefix of any\n                     // borrowed place (at least in MIR as it is currently.)"}, {"sha": "c6e42336ef8ca42a8cac048f084202ae46340c00", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -235,7 +235,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// # Parameters\n     ///\n     /// - `def_id`, the `impl Trait` type\n-    /// - `substs`, the substs  used to instantiate this opaque type\n+    /// - `substs`, the substs used to instantiate this opaque type\n     /// - `instantiated_ty`, the inferred type C1 -- fully resolved, lifted version of\n     ///   `opaque_defn.concrete_ty`\n     #[instrument(level = \"debug\", skip(self))]"}, {"sha": "c8cda0dc90c6daf39095057859453ec164196609", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 // Named constants have to be equated with the value\n                                 // being matched, so that's a read of the value being matched.\n                                 //\n-                                // FIXME: We don't actually  reads for ZSTs.\n+                                // FIXME: We don't actually reads for ZSTs.\n                                 needs_to_be_read = true;\n                             }\n                             _ => {"}, {"sha": "948a14604d4376929fe0b49c6a0d3ee347ee8701", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -232,7 +232,7 @@ pub type PickResult<'tcx> = Result<Pick<'tcx>, MethodError<'tcx>>;\n pub enum Mode {\n     // An expression of the form `receiver.method_name(...)`.\n     // Autoderefs are performed on `receiver`, lookup is done based on the\n-    // `self` argument  of the method, and static methods aren't considered.\n+    // `self` argument of the method, and static methods aren't considered.\n     MethodCall,\n     // An expression of the form `Type::item` or `<T>::item`.\n     // No autoderefs are performed, lookup is done based on the type each"}, {"sha": "b910bd888c0727cf562daaaf34d6c7aebeccf768", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -193,7 +193,7 @@ pub struct TypeckResults<'tcx> {\n     pub generator_interior_types: ty::Binder<'tcx, Vec<GeneratorInteriorTypeCause<'tcx>>>,\n \n     /// We sometimes treat byte string literals (which are of type `&[u8; N]`)\n-    /// as `&[u8]`, depending on the pattern  in which they are used.\n+    /// as `&[u8]`, depending on the pattern in which they are used.\n     /// This hashset records all instances where we behave\n     /// like this to allow `const_to_pat` to reliably handle this situation.\n     pub treat_byte_string_as_slice: ItemLocalSet,"}, {"sha": "e73a17ced7deb2598f52a013189ee3392e379547", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -469,7 +469,7 @@ impl<'a> Parser<'a> {\n     /// Try to recover the more general form `intersect ::= $pat_lhs @ $pat_rhs`.\n     ///\n     /// Allowed binding patterns generated by `binding ::= ref? mut? $ident @ $pat_rhs`\n-    /// should already have been parsed by now  at this point,\n+    /// should already have been parsed by now at this point,\n     /// if the next token is `@` then we can try to parse the more general form.\n     ///\n     /// Consult `parse_pat_ident` for the `binding` grammar."}, {"sha": "55576b4e0d19df06c04f03cba652af8852faffbf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -2091,7 +2091,7 @@ fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<\n         .map(|s| {\n             // Parse string of the form \"[KIND[:MODIFIERS]=]lib[:new_name]\",\n             // where KIND is one of \"dylib\", \"framework\", \"static\", \"link-arg\" and\n-            // where MODIFIERS are  a comma separated list of supported modifiers\n+            // where MODIFIERS are a comma separated list of supported modifiers\n             // (bundle, verbatim, whole-archive, as-needed). Each modifier is prefixed\n             // with either + or - to indicate whether it is enabled or disabled.\n             // The last value specified for a given modifier wins."}, {"sha": "70cd883be09b3d7d57989931b1a58d8a101ab585", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -462,7 +462,7 @@ impl InlineAsmRegClass {\n     }\n \n     /// Returns a suggested template modifier to use for this type and an\n-    /// example of a  register named formatted with it.\n+    /// example of a register named formatted with it.\n     ///\n     /// Such suggestions are useful if a type smaller than the full register\n     /// size is used and a modifier can be used to point to the subregister of"}, {"sha": "13aa067844a92c4cf75b69add314996bca5e4e1c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc02ecc0101ab91627bf470166df10cd85ae8ec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=cc02ecc0101ab91627bf470166df10cd85ae8ec3", "patch": "@@ -308,7 +308,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // the `TypeOutlives` predicates first inside the unnormalized parameter environment, and\n     // then we normalize the `TypeOutlives` bounds inside the normalized parameter environment.\n     //\n-    // This works fairly well because trait matching  does not actually care about param-env\n+    // This works fairly well because trait matching does not actually care about param-env\n     // TypeOutlives predicates - these are normally used by regionck.\n     let outlives_predicates: Vec<_> = predicates\n         .drain_filter(|predicate| {"}]}