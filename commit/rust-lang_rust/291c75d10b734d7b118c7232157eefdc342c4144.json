{"sha": "291c75d10b734d7b118c7232157eefdc342c4144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MWM3NWQxMGI3MzRkN2IxMThjNzIzMjE1N2VlZmRjMzQyYzQxNDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-05T11:48:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-09T10:12:55Z"}, "message": "Enable the rust_2018_idioms and unused_lifetimes lints and fix all warnings\n\nThey are set to deny by default in the rust-lang/rust repo", "tree": {"sha": "78861fc2508fc9d5cec08dc29a5005f416f2c079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78861fc2508fc9d5cec08dc29a5005f416f2c079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291c75d10b734d7b118c7232157eefdc342c4144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291c75d10b734d7b118c7232157eefdc342c4144", "html_url": "https://github.com/rust-lang/rust/commit/291c75d10b734d7b118c7232157eefdc342c4144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291c75d10b734d7b118c7232157eefdc342c4144/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3be6d4920a2aef5db17f0e4abc90dcf1e14f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3be6d4920a2aef5db17f0e4abc90dcf1e14f2d", "html_url": "https://github.com/rust-lang/rust/commit/fd3be6d4920a2aef5db17f0e4abc90dcf1e14f2d"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "b030b5055b2da1fceb3a35d8b1ac0a54c306d6fb", "filename": "src/abi/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir;\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n-pub(super) fn add_args_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     fx.add_global_comment(format!(\n         \"kind  loc.idx   param    pass mode                            ty\"\n     ));\n@@ -49,7 +49,7 @@ pub(super) fn add_arg_comment<'tcx>(\n     ));\n }\n \n-pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<impl Backend>) {\n+pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     fx.add_global_comment(String::new());\n     fx.add_global_comment(format!(\n         \"kind  local ty                              size align (abi,pref)\""}, {"sha": "87a36113b8490928edc685016f01e44c6844f013", "filename": "src/abi/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -92,7 +92,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n         }\n         abi => abi,\n     };\n-    let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match abi {\n+    let (call_conv, inputs, output): (CallConv, Vec<Ty<'tcx>>, Ty<'tcx>) = match abi {\n         Abi::Rust => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n@@ -101,7 +101,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n                 ty::Tuple(ref tupled_arguments) => tupled_arguments,\n                 _ => bug!(\"argument to function with \\\"rust-call\\\" ABI is not a tuple\"),\n             };\n-            let mut inputs: Vec<Ty> = vec![sig.inputs()[0]];\n+            let mut inputs: Vec<Ty<'tcx>> = vec![sig.inputs()[0]];\n             inputs.extend(extra_args.types());\n             (CallConv::triple_default(triple), inputs, sig.output())\n         }\n@@ -288,7 +288,11 @@ fn local_place<'tcx>(\n     fx.local_map[&local]\n }\n \n-pub(crate) fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block: Block, should_codegen_locals: bool) {\n+pub(crate) fn codegen_fn_prelude<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    start_block: Block,\n+    should_codegen_locals: bool,\n+) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n \n     #[cfg(debug_assertions)]\n@@ -332,7 +336,7 @@ pub(crate) fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, star\n                 (local, ArgKind::Normal(param), arg_ty)\n             }\n         })\n-        .collect::<Vec<(Local, ArgKind, Ty)>>();\n+        .collect::<Vec<(Local, ArgKind<'tcx>, Ty<'tcx>)>>();\n \n     assert!(fx.caller_location.is_none());\n     if fx.instance.def.requires_caller_location(fx.tcx) {"}, {"sha": "afe36d6890e66a29c10110a697488a22b91d0fe6", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyAndL\n }\n \n pub(super) fn codegen_return_param(\n-    fx: &mut FunctionCx<impl Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n     start_block: Block,\n ) {\n@@ -101,7 +101,7 @@ pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     (call_inst, meta)\n }\n \n-pub(crate) fn codegen_return(fx: &mut FunctionCx<impl Backend>) {\n+pub(crate) fn codegen_return(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     match get_pass_mode(fx.tcx, return_layout(fx)) {\n         PassMode::NoPass | PassMode::ByRef { sized: true } => {\n             fx.bcx.ins().return_(&[]);"}, {"sha": "fca20c0def74ed15a2d2942b6e9cb8623e78cb4e", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -209,7 +209,7 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     context.clear();\n }\n \n-pub(crate) fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n+pub(crate) fn verify_func(tcx: TyCtxt<'_>, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n     tcx.sess.time(\"verify clif ir\", || {\n         let flags = settings::Flags::new(settings::builder());\n         match ::cranelift_codegen::verify_function(&func, &flags) {"}, {"sha": "27e1b1cc3b0320679a8afde0ade9051e9e9c13fb", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn mir_var(loc: Local) -> Variable {\n     Variable::with_u32(loc.index() as u32)\n }\n \n-pub(crate) fn pointer_ty(tcx: TyCtxt) -> types::Type {\n+pub(crate) fn pointer_ty(tcx: TyCtxt<'_>) -> types::Type {\n     match tcx.data_layout.pointer_size.bits() {\n         16 => types::I16,\n         32 => types::I32,\n@@ -19,7 +19,7 @@ pub(crate) fn pointer_ty(tcx: TyCtxt) -> types::Type {\n     }\n }\n \n-pub(crate) fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n+pub(crate) fn scalar_to_clif_type(tcx: TyCtxt<'_>, scalar: Scalar) -> Type {\n     match scalar.value {\n         Primitive::Int(int, _sign) => match int {\n             Integer::I8 => types::I8,"}, {"sha": "63b8557500393eaba65180483eafa56ec08a5a11", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -61,7 +61,7 @@ struct WriterRelocate {\n }\n \n impl WriterRelocate {\n-    fn new(ctx: &DebugContext) -> Self {\n+    fn new(ctx: &DebugContext<'_>) -> Self {\n         WriterRelocate {\n             relocs: Vec::new(),\n             writer: EndianVec::new(ctx.endian),"}, {"sha": "cea9d3ed193a8b271871959592fe859acf745250", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -15,7 +15,7 @@ use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n \n pub(crate) use emit::{DebugReloc, DebugRelocName};\n \n-fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n+fn target_endian(tcx: TyCtxt<'_>) -> RunTimeEndian {\n     use rustc_target::abi::Endian;\n \n     match tcx.data_layout.endian {"}, {"sha": "591e15803373c4adae94cb586a7904e9fa226894", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -31,7 +31,7 @@ fn emit_module<B: Backend>(\n     name: String,\n     kind: ModuleKind,\n     mut module: Module<B>,\n-    debug: Option<DebugContext>,\n+    debug: Option<DebugContext<'_>>,\n ) -> ModuleCodegenResult\n     where B::Product: Emit + WriteDebugInfo,\n {\n@@ -72,7 +72,7 @@ fn emit_module<B: Backend>(\n \n fn reuse_workproduct_for_cgu(\n     tcx: TyCtxt<'_>,\n-    cgu: &CodegenUnit,\n+    cgu: &CodegenUnit<'_>,\n     work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n ) -> CompiledModule {\n     let incr_comp_session_dir = tcx.sess.incr_comp_session_dir();"}, {"sha": "bf388a2769a057c4e25fc34e77c178675284c233", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -128,7 +128,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n             } else {\n                 &name\n             };\n-            let symbol: libloading::Symbol<*const u8> =\n+            let symbol: libloading::Symbol<'_, *const u8> =\n                 unsafe { lib.get(dlsym_name.as_bytes()) }.unwrap();\n             Some((name, *symbol))\n         }));"}, {"sha": "43bed01feb75653477de29c61671eb215592ccae", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -691,7 +691,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         };\n         bswap, <T> (v arg) {\n             // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n-            fn swap(bcx: &mut FunctionBuilder, v: Value) -> Value {\n+            fn swap(bcx: &mut FunctionBuilder<'_>, v: Value) -> Value {\n                 match bcx.func.dfg.value_type(v) {\n                     types::I8 => v,\n "}, {"sha": "bbd6842e262d70dcb448de2ae61436b06d584893", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -1,13 +1,13 @@\n #![feature(rustc_private, decl_macro, type_alias_impl_trait, associated_type_bounds, never_type)]\n #![allow(intra_doc_link_resolution_failure)]\n+#![warn(rust_2018_idioms)]\n+#![warn(unused_lifetimes)]\n \n extern crate flate2;\n extern crate libc;\n-extern crate tempfile;\n extern crate rustc_middle;\n extern crate rustc_codegen_ssa;\n extern crate rustc_data_structures;\n-extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_fs_util;\n extern crate rustc_hir;\n@@ -20,6 +20,10 @@ extern crate rustc_symbol_mangling;\n extern crate rustc_target;\n extern crate rustc_ast;\n \n+// This prevents duplicating functions and statics that are already part of the host rustc process.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+\n use std::any::Any;\n \n use rustc_errors::ErrorReported;\n@@ -166,7 +170,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         Box::new(crate::metadata::CraneliftMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut Providers) {\n+    fn provide(&self, providers: &mut Providers<'_>) {\n         providers.target_features_whitelist = |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             if tcx.sess.opts.actually_rustdoc {\n@@ -187,7 +191,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             }\n         };\n     }\n-    fn provide_extern(&self, _providers: &mut Providers) {}\n+    fn provide_extern(&self, _providers: &mut Providers<'_>) {}\n \n     fn codegen_crate<'tcx>(\n         &self,"}, {"sha": "379c39ca637003bcd9a8309c089ff4a85f0cf7b8", "filename": "src/linkage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n \n-pub(crate) fn get_clif_linkage(mono_item: MonoItem, linkage: RLinkage, visibility: Visibility) -> Linkage {\n+pub(crate) fn get_clif_linkage(mono_item: MonoItem<'_>, linkage: RLinkage, visibility: Visibility) -> Linkage {\n     match (linkage, visibility) {\n         (RLinkage::External, Visibility::Default) => Linkage::Export,\n         (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n@@ -11,7 +11,7 @@ pub(crate) fn get_clif_linkage(mono_item: MonoItem, linkage: RLinkage, visibilit\n     }\n }\n \n-pub(crate) fn get_static_ref_linkage(tcx: TyCtxt, def_id: DefId) -> Linkage {\n+pub(crate) fn get_static_ref_linkage(tcx: TyCtxt<'_>, def_id: DefId) -> Linkage {\n     let fn_attrs = tcx.codegen_fn_attrs(def_id);\n \n     if let Some(linkage) = fn_attrs.linkage {"}, {"sha": "ab2350e0a659fb5dee99d46164da58cf1b6e6224", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<im\n         ctx.func = Function::with_name_signature(ExternalName::user(0, 0), cmain_sig.clone());\n         {\n             let mut func_ctx = FunctionBuilderContext::new();\n-            let mut bcx: FunctionBuilder = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+            let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n \n             let block = bcx.create_block();\n             bcx.switch_to_block(block);"}, {"sha": "7673c085cee3ed7e71a233230e6cd6536a9cc6b2", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -24,7 +24,7 @@ use crate::prelude::*;\n struct OrdStackSlot(StackSlot);\n \n impl fmt::Debug for OrdStackSlot {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.0)\n     }\n }\n@@ -282,7 +282,7 @@ fn combine_stack_addr_with_load_store(func: &mut Function) {\n     }\n }\n \n-fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext) {\n+fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext<'_>) {\n     // FIXME incrementally rebuild on each call?\n     let mut stack_addr_load_insts_users = HashMap::<Inst, HashSet<Inst>>::new();\n "}, {"sha": "4865950f6b05bb6df11e00a2ae7afd958fb5acee", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -185,7 +185,7 @@ impl FuncWriter for &'_ CommentWriter {\n }\n \n #[cfg(debug_assertions)]\n-impl<'a, 'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n+impl<B: Backend + 'static> FunctionCx<'_, '_, B> {\n     pub(crate) fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.clif_comments.add_global_comment(comment);\n     }\n@@ -248,8 +248,8 @@ pub(crate) fn write_clif_file<'tcx>(\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'static> fmt::Debug for FunctionCx<'_, 'tcx, B> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+impl<B: Backend + 'static> fmt::Debug for FunctionCx<'_, '_, B> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"{:?}\", self.instance.substs)?;\n         writeln!(f, \"{:?}\", self.local_map)?;\n "}, {"sha": "ca016e804b9b8963f852b25cacec78d90a768ea2", "filename": "src/value_and_place.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -12,7 +12,7 @@ fn codegen_field<'tcx>(\n     let field_offset = layout.fields.offset(field.index());\n     let field_layout = layout.field(&*fx, field.index());\n \n-    let simple = |fx: &mut FunctionCx<_>| {\n+    let simple = |fx: &mut FunctionCx<'_, '_, _>| {\n         (\n             base.offset_i64(fx, i64::try_from(field_offset.bytes()).unwrap()),\n             field_layout,\n@@ -93,7 +93,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     // FIXME remove\n-    pub(crate) fn force_stack<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> (Pointer, Option<Value>) {\n+    pub(crate) fn force_stack(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> (Pointer, Option<Value>) {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr, meta) => (ptr, meta),\n@@ -113,7 +113,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// Load a value with layout.abi of scalar\n-    pub(crate) fn load_scalar<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n+    pub(crate) fn load_scalar(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n@@ -134,7 +134,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// Load a value pair with layout.abi of scalar pair\n-    pub(crate) fn load_scalar_pair<'a>(\n+    pub(crate) fn load_scalar_pair(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ) -> (Value, Value) {\n@@ -158,7 +158,7 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub(crate) fn value_field<'a>(\n+    pub(crate) fn value_field(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n@@ -187,7 +187,7 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub(crate) fn unsize_value<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+    pub(crate) fn unsize_value(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         crate::unsize::coerce_unsized_into(fx, self, dest);\n     }\n "}, {"sha": "8302047a44e12ea0bb41bbca1d99ce3ac1dded8a", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c75d10b734d7b118c7232157eefdc342c4144/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=291c75d10b734d7b118c7232157eefdc342c4144", "patch": "@@ -166,7 +166,7 @@ fn build_vtable<'tcx>(\n     data_id\n }\n \n-fn write_usize(tcx: TyCtxt, buf: &mut [u8], idx: usize, num: u64) {\n+fn write_usize(tcx: TyCtxt<'_>, buf: &mut [u8], idx: usize, num: u64) {\n     use byteorder::{BigEndian, LittleEndian, WriteBytesExt};\n \n     let usize_size = tcx"}]}