{"sha": "b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyY2U1YTkwOTk1YmU2NTViMWExZThmZDc2NGUyYjFjMWYwZGFiMTQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-01-16T22:45:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-01-16T22:52:34Z"}, "message": "Make `hir::Stmt` a separate struct.\n\nBenefits:\n\n- It lets us move the `NodeId` field out of every `hir::StmtKind`\n  variant `NodeId` to a more sensible spot.\n\n- It eliminates sadness in `Stmt::fmt`.\n\n- It makes `hir::Stmt` match `ast::Stmt`.", "tree": {"sha": "d1f4f696e2085e649f9d095bad2245b498a1de5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f4f696e2085e649f9d095bad2245b498a1de5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "html_url": "https://github.com/rust-lang/rust/commit/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f221c75932de7a29845c8d6f1f73536ad00c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f221c75932de7a29845c8d6f1f73536ad00c41", "html_url": "https://github.com/rust-lang/rust/commit/e2f221c75932de7a29845c8d6f1f73536ad00c41"}], "stats": {"total": 179, "additions": 92, "deletions": 87}, "files": [{"sha": "1cbfcc1664323463ceb7f0e4ff410452d7e6c5db", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -99,15 +99,15 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex {\n-        let hir_id = self.tcx.hir().node_to_hir_id(stmt.node.id());\n+        let hir_id = self.tcx.hir().node_to_hir_id(stmt.id);\n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 let exit = self.decl(&decl, pred);\n                 self.add_ast_node(hir_id.local_id, &[exit])\n             }\n \n-            hir::StmtKind::Expr(ref expr, _) |\n-            hir::StmtKind::Semi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr) |\n+            hir::StmtKind::Semi(ref expr) => {\n                 let exit = self.expr(&expr, pred);\n                 self.add_ast_node(hir_id.local_id, &[exit])\n             }"}, {"sha": "1cffe5ace5a6ed517580b2cb5149579bc3c51597", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n \n     fn check_stmt_attributes(&self, stmt: &hir::Stmt) {\n         // When checking statements ignore expressions, they will be checked later\n-        if let hir::StmtKind::Decl(_, _) = stmt.node {\n+        if let hir::StmtKind::Decl(..) = stmt.node {\n             for attr in stmt.node.attrs() {\n                 if attr.check_name(\"inline\") {\n                     self.check_inline(attr, &stmt.span, Target::Statement);"}, {"sha": "3b9358d7c46a95dd619a1462711374a126ff1bf4", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -953,14 +953,13 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n }\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n+    visitor.visit_id(statement.id);\n     match statement.node {\n-        StmtKind::Decl(ref declaration, id) => {\n-            visitor.visit_id(id);\n+        StmtKind::Decl(ref declaration) => {\n             visitor.visit_decl(declaration)\n         }\n-        StmtKind::Expr(ref expression, id) |\n-        StmtKind::Semi(ref expression, id) => {\n-            visitor.visit_id(id);\n+        StmtKind::Expr(ref expression) |\n+        StmtKind::Semi(ref expression) => {\n             visitor.visit_expr(expression)\n         }\n     }"}, {"sha": "837960a0f1d9507f70be718d1a61a95e8754927f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -4331,10 +4331,11 @@ impl<'a> LoweringContext<'a> {\n                         ThinVec::new(),\n                     ))\n                 };\n-                let match_stmt = respan(\n-                    head_sp,\n-                    hir::StmtKind::Expr(match_expr, self.next_id().node_id)\n-                );\n+                let match_stmt = hir::Stmt {\n+                    id: self.next_id().node_id,\n+                    node: hir::StmtKind::Expr(match_expr),\n+                    span: head_sp,\n+                };\n \n                 let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n@@ -4357,10 +4358,11 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let body_stmt = respan(\n-                    body.span,\n-                    hir::StmtKind::Expr(body_expr, self.next_id().node_id)\n-                );\n+                let body_stmt = hir::Stmt {\n+                    id: self.next_id().node_id,\n+                    node: hir::StmtKind::Expr(body_expr),\n+                    span: body.span,\n+                };\n \n                 let loop_block = P(self.block_all(\n                     e.span,\n@@ -4533,24 +4535,24 @@ impl<'a> LoweringContext<'a> {\n                 let (l, item_ids) = self.lower_local(l);\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n                     .into_iter()\n-                    .map(|item_id| Spanned {\n+                    .map(|item_id| hir::Stmt {\n+                        id: self.next_id().node_id,\n                         node: hir::StmtKind::Decl(\n                             P(Spanned {\n                                 node: hir::DeclKind::Item(item_id),\n                                 span: s.span,\n                             }),\n-                            self.next_id().node_id,\n                         ),\n                         span: s.span,\n                     })\n                     .collect();\n-                ids.push(Spanned {\n+                ids.push(hir::Stmt {\n+                    id: self.lower_node_id(s.id).node_id,\n                     node: hir::StmtKind::Decl(\n                         P(Spanned {\n                             node: hir::DeclKind::Local(l),\n                             span: s.span,\n                         }),\n-                        self.lower_node_id(s.id).node_id,\n                     ),\n                     span: s.span,\n                 });\n@@ -4561,26 +4563,28 @@ impl<'a> LoweringContext<'a> {\n                 let mut id = Some(s.id);\n                 return self.lower_item_id(it)\n                     .into_iter()\n-                    .map(|item_id| Spanned {\n+                    .map(|item_id| hir::Stmt {\n+                        id: id.take()\n+                              .map(|id| self.lower_node_id(id).node_id)\n+                              .unwrap_or_else(|| self.next_id().node_id),\n                         node: hir::StmtKind::Decl(\n                             P(Spanned {\n                                 node: hir::DeclKind::Item(item_id),\n                                 span: s.span,\n                             }),\n-                            id.take()\n-                              .map(|id| self.lower_node_id(id).node_id)\n-                              .unwrap_or_else(|| self.next_id().node_id),\n                         ),\n                         span: s.span,\n                     })\n                     .collect();\n             }\n-            StmtKind::Expr(ref e) => Spanned {\n-                node: hir::StmtKind::Expr(P(self.lower_expr(e)), self.lower_node_id(s.id).node_id),\n+            StmtKind::Expr(ref e) => hir::Stmt {\n+                id: self.lower_node_id(s.id).node_id,\n+                node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n                 span: s.span,\n             },\n-            StmtKind::Semi(ref e) => Spanned {\n-                node: hir::StmtKind::Semi(P(self.lower_expr(e)), self.lower_node_id(s.id).node_id),\n+            StmtKind::Semi(ref e) => hir::Stmt {\n+                id: self.lower_node_id(s.id).node_id,\n+                node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n                 span: s.span,\n             },\n             StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n@@ -4806,7 +4810,11 @@ impl<'a> LoweringContext<'a> {\n             source,\n         });\n         let decl = respan(sp, hir::DeclKind::Local(local));\n-        respan(sp, hir::StmtKind::Decl(P(decl), self.next_id().node_id))\n+        hir::Stmt {\n+            id: self.next_id().node_id,\n+            node: hir::StmtKind::Decl(P(decl)),\n+            span: sp\n+        }\n     }\n \n     fn stmt_let("}, {"sha": "7cc5d756ff311730fc4d3e77af2e84e515b9910e", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_stmt(&mut self, stmt: &'hir Stmt) {\n-        let id = stmt.node.id();\n+        let id = stmt.id;\n         self.insert(stmt.span, id, Node::Stmt(stmt));\n \n         self.with_parent(id, |this| {"}, {"sha": "1e287ccc85c78c826140ed7ac237b4e205476c8b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -16,7 +16,7 @@ use util::nodemap::{NodeMap, FxHashSet};\n use mir::mono::Linkage;\n \n use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n-use syntax::source_map::{self, Spanned};\n+use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy};\n@@ -1144,45 +1144,38 @@ impl UnOp {\n }\n \n /// A statement\n-pub type Stmt = Spanned<StmtKind>;\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n+pub struct Stmt {\n+    pub id: NodeId,\n+    pub node: StmtKind,\n+    pub span: Span,\n+}\n \n-impl fmt::Debug for StmtKind {\n+impl fmt::Debug for Stmt {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Sadness.\n-        let spanned = source_map::dummy_spanned(self.clone());\n-        write!(f,\n-               \"stmt({}: {})\",\n-               spanned.node.id(),\n-               print::to_string(print::NO_ANN, |s| s.print_stmt(&spanned)))\n+        write!(f, \"stmt({}: {})\", self.id,\n+               print::to_string(print::NO_ANN, |s| s.print_stmt(self)))\n     }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum StmtKind {\n     /// Could be an item or a local (let) binding:\n-    Decl(P<Decl>, NodeId),\n+    Decl(P<Decl>),\n \n     /// Expr without trailing semi-colon (must have unit type):\n-    Expr(P<Expr>, NodeId),\n+    Expr(P<Expr>),\n \n     /// Expr with trailing semi-colon (may have any type):\n-    Semi(P<Expr>, NodeId),\n+    Semi(P<Expr>),\n }\n \n impl StmtKind {\n     pub fn attrs(&self) -> &[Attribute] {\n         match *self {\n-            StmtKind::Decl(ref d, _) => d.node.attrs(),\n-            StmtKind::Expr(ref e, _) |\n-            StmtKind::Semi(ref e, _) => &e.attrs,\n-        }\n-    }\n-\n-    pub fn id(&self) -> NodeId {\n-        match *self {\n-            StmtKind::Decl(_, id) |\n-            StmtKind::Expr(_, id) |\n-            StmtKind::Semi(_, id) => id,\n+            StmtKind::Decl(ref d) => d.node.attrs(),\n+            StmtKind::Expr(ref e) |\n+            StmtKind::Semi(ref e) => &e.attrs,\n         }\n     }\n }"}, {"sha": "d92800c7b9537aa5e40950b34e74a5975b31c7be", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -992,14 +992,14 @@ impl<'a> State<'a> {\n     pub fn print_stmt(&mut self, st: &hir::Stmt) -> io::Result<()> {\n         self.maybe_print_comment(st.span.lo())?;\n         match st.node {\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 self.print_decl(&decl)?;\n             }\n-            hir::StmtKind::Expr(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr) => {\n                 self.space_if_not_bol()?;\n                 self.print_expr(&expr)?;\n             }\n-            hir::StmtKind::Semi(ref expr, _) => {\n+            hir::StmtKind::Semi(ref expr) => {\n                 self.space_if_not_bol()?;\n                 self.print_expr(&expr)?;\n                 self.s.word(\";\")?;\n@@ -2401,13 +2401,13 @@ fn expr_requires_semi_to_be_stmt(e: &hir::Expr) -> bool {\n /// seen the semicolon, and thus don't need another.\n fn stmt_ends_with_semi(stmt: &hir::StmtKind) -> bool {\n     match *stmt {\n-        hir::StmtKind::Decl(ref d, _) => {\n+        hir::StmtKind::Decl(ref d) => {\n             match d.node {\n                 hir::DeclKind::Local(_) => true,\n                 hir::DeclKind::Item(_) => false,\n             }\n         }\n-        hir::StmtKind::Expr(ref e, _) => {\n+        hir::StmtKind::Expr(ref e) => {\n             expr_requires_semi_to_be_stmt(&e)\n         }\n         hir::StmtKind::Semi(..) => {"}, {"sha": "4da99f3c0f4b9ce2e6677f505a08f26dd9a4aac1", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -483,7 +483,12 @@ impl_stable_hash_for!(enum hir::UnOp {\n     UnNeg\n });\n \n-impl_stable_hash_for_spanned!(hir::StmtKind);\n+impl_stable_hash_for!(struct hir::Stmt {\n+    id,\n+    node,\n+    span,\n+});\n+\n \n impl_stable_hash_for!(struct hir::Local {\n     pat,\n@@ -941,9 +946,9 @@ impl_stable_hash_for!(enum hir::ForeignItemKind {\n });\n \n impl_stable_hash_for!(enum hir::StmtKind {\n-    Decl(decl, id),\n-    Expr(expr, id),\n-    Semi(expr, id)\n+    Decl(decl),\n+    Expr(expr),\n+    Semi(expr)\n });\n \n impl_stable_hash_for!(struct hir::Arg {"}, {"sha": "0a65ce6fe84680ab1fa5bb8b233ba580adae26ae", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -589,7 +589,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n     fn walk_stmt(&mut self, stmt: &hir::Stmt) {\n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 match decl.node {\n                     hir::DeclKind::Local(ref local) => {\n                         self.walk_local(&local);\n@@ -602,8 +602,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            hir::StmtKind::Expr(ref expr, _) |\n-            hir::StmtKind::Semi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr) |\n+            hir::StmtKind::Semi(ref expr) => {\n                 self.consume_expr(&expr);\n             }\n         }"}, {"sha": "190d3d1eb5096c0916c051a08afa37177a94d46a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -956,11 +956,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn propagate_through_stmt(&mut self, stmt: &hir::Stmt, succ: LiveNode)\n                               -> LiveNode {\n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 self.propagate_through_decl(&decl, succ)\n             }\n \n-            hir::StmtKind::Expr(ref expr, _) | hir::StmtKind::Semi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr) | hir::StmtKind::Semi(ref expr) => {\n                 self.propagate_through_expr(&expr, succ)\n             }\n         }"}, {"sha": "76fbe2119f31086d73ae3b7cd57d2b3041b76c92", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -835,7 +835,7 @@ fn resolve_pat<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, pat: &\n }\n \n fn resolve_stmt<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, stmt: &'tcx hir::Stmt) {\n-    let stmt_id = visitor.tcx.hir().node_to_hir_id(stmt.node.id()).local_id;\n+    let stmt_id = visitor.tcx.hir().node_to_hir_id(stmt.id).local_id;\n     debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n \n     // Every statement will clean up the temporaries created during"}, {"sha": "587b28b3edde2eb2669e3663f99ce50a2407696a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -41,7 +41,7 @@ impl LintPass for UnusedResults {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n         let expr = match s.node {\n-            hir::StmtKind::Semi(ref expr, _) => &**expr,\n+            hir::StmtKind::Semi(ref expr) => &**expr,\n             _ => return,\n         };\n \n@@ -205,7 +205,7 @@ impl LintPass for PathStatements {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n-        if let hir::StmtKind::Semi(ref expr, _) = s.node {\n+        if let hir::StmtKind::Semi(ref expr) = s.node {\n             if let hir::ExprKind::Path(_) = expr.node {\n                 cx.span_lint(PATH_STATEMENTS, s.span, \"path statement with no effect\");\n             }"}, {"sha": "6fd31ffba3997d10cf51d101d9291df7ef085917", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -46,12 +46,12 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n     for (index, stmt) in stmts.iter().enumerate() {\n-        let hir_id = cx.tcx.hir().node_to_hir_id(stmt.node.id());\n+        let hir_id = cx.tcx.hir().node_to_hir_id(stmt.id);\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-        let stmt_span = StatementSpan(cx.tcx.hir().span(stmt.node.id()));\n+        let stmt_span = StatementSpan(cx.tcx.hir().span(stmt.id));\n         match stmt.node {\n-            hir::StmtKind::Expr(ref expr, _) |\n-            hir::StmtKind::Semi(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr) |\n+            hir::StmtKind::Semi(ref expr) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n                     kind: StmtKind::Expr {\n                         scope: region::Scope {\n@@ -64,7 +64,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     span: stmt_span,\n                 })))\n             }\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 match decl.node {\n                     hir::DeclKind::Item(..) => {\n                         // ignore for purposes of the MIR"}, {"sha": "f97f7dcf17f4eecb787b6be22810c56a14adfd6e", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -144,7 +144,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_stmt(&mut self, s: &'v hir::Stmt) {\n-        self.record(\"Stmt\", Id::Node(s.node.id()), s);\n+        self.record(\"Stmt\", Id::Node(s.id), s);\n         hir_visit::walk_stmt(self, s)\n     }\n "}, {"sha": "4831232a9f919dd094be65462171266691f78876", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n     fn check_stmt(&mut self, stmt: &'tcx hir::Stmt) -> Promotability {\n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _node_id) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 match &decl.node {\n                     hir::DeclKind::Local(local) => {\n                         if self.remove_mut_rvalue_borrow(&local.pat) {\n@@ -238,8 +238,8 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n                     hir::DeclKind::Item(_) => Promotable\n                 }\n             }\n-            hir::StmtKind::Expr(ref box_expr, _node_id) |\n-            hir::StmtKind::Semi(ref box_expr, _node_id) => {\n+            hir::StmtKind::Expr(ref box_expr) |\n+            hir::StmtKind::Semi(ref box_expr) => {\n                 let _ = self.check_expr(box_expr);\n                 NotPromotable\n             }"}, {"sha": "ba97c3d2549aff6a676c576e4b4d14426f5fd647", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b2ce5a90995be655b1a1e8fd764e2b1c1f0dab14", "patch": "@@ -4840,15 +4840,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn check_stmt(&self, stmt: &'gcx hir::Stmt) {\n         // Don't do all the complex logic below for `DeclItem`.\n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 if let hir::DeclKind::Item(_) = decl.node {\n                     return\n                 }\n             }\n             hir::StmtKind::Expr(..) | hir::StmtKind::Semi(..) => {}\n         }\n \n-        self.warn_if_unreachable(stmt.node.id(), stmt.span, \"statement\");\n+        self.warn_if_unreachable(stmt.id, stmt.span, \"statement\");\n \n         // Hide the outer diverging and `has_errors` flags.\n         let old_diverges = self.diverges.get();\n@@ -4857,7 +4857,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.has_errors.set(false);\n \n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _) => {\n+            hir::StmtKind::Decl(ref decl) => {\n                 match decl.node {\n                     hir::DeclKind::Local(ref l) => {\n                         self.check_decl_local(&l);\n@@ -4866,11 +4866,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     hir::DeclKind::Item(_) => ()\n                 }\n             }\n-            hir::StmtKind::Expr(ref expr, _) => {\n+            hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit());\n             }\n-            hir::StmtKind::Semi(ref expr, _) => {\n+            hir::StmtKind::Semi(ref expr) => {\n                 self.check_expr(&expr);\n             }\n         }\n@@ -5273,7 +5273,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             None => return None,\n         };\n         let last_expr = match last_stmt.node {\n-            hir::StmtKind::Semi(ref e, _) => e,\n+            hir::StmtKind::Semi(ref e) => e,\n             _ => return None,\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);"}]}