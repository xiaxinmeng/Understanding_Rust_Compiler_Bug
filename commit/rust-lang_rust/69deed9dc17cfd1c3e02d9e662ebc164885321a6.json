{"sha": "69deed9dc17cfd1c3e02d9e662ebc164885321a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZGVlZDlkYzE3Y2ZkMWMzZTAyZDllNjYyZWJjMTY0ODg1MzIxYTY=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-10T02:21:30Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-10T02:21:30Z"}, "message": "renamed t_nil to t_unit", "tree": {"sha": "b926bb03298496b7150c889b4c039b49083cdddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b926bb03298496b7150c889b4c039b49083cdddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69deed9dc17cfd1c3e02d9e662ebc164885321a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69deed9dc17cfd1c3e02d9e662ebc164885321a6", "html_url": "https://github.com/rust-lang/rust/commit/69deed9dc17cfd1c3e02d9e662ebc164885321a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69deed9dc17cfd1c3e02d9e662ebc164885321a6/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be5c722dedf50a95479bad0b4558e5e76a73a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be5c722dedf50a95479bad0b4558e5e76a73a00", "html_url": "https://github.com/rust-lang/rust/commit/2be5c722dedf50a95479bad0b4558e5e76a73a00"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "086d2a15c8cf2dc74a613eefda89d340985fba5e", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69deed9dc17cfd1c3e02d9e662ebc164885321a6/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69deed9dc17cfd1c3e02d9e662ebc164885321a6/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=69deed9dc17cfd1c3e02d9e662ebc164885321a6", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n         )))\n     }\n \n-    pub fn t_nil(&self) -> Ty<'tcx> {\n+    pub fn t_unit(&self) -> Ty<'tcx> {\n         self.infcx.tcx.mk_unit()\n     }\n \n@@ -491,7 +491,7 @@ fn subst_ty_renumber_bound() {\n         // t_source = fn(A)\n         let t_source = {\n             let t_param = env.t_param(0);\n-            env.t_fn(&[t_param], env.t_nil())\n+            env.t_fn(&[t_param], env.t_unit())\n         };\n \n         let substs = env.infcx.tcx.intern_substs(&[t_rptr_bound1.into()]);\n@@ -500,7 +500,7 @@ fn subst_ty_renumber_bound() {\n         // t_expected = fn(&'a isize)\n         let t_expected = {\n             let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n-            env.t_fn(&[t_ptr_bound2], env.t_nil())\n+            env.t_fn(&[t_ptr_bound2], env.t_unit())\n         };\n \n         debug!(\"subst_bound: t_source={:?} substs={:?} t_substituted={:?} t_expected={:?}\",\n@@ -526,7 +526,7 @@ fn subst_ty_renumber_some_bounds() {\n         // t_source = (A, fn(A))\n         let t_source = {\n             let t_param = env.t_param(0);\n-            env.t_pair(t_param, env.t_fn(&[t_param], env.t_nil()))\n+            env.t_pair(t_param, env.t_fn(&[t_param], env.t_unit()))\n         };\n \n         let substs = env.infcx.tcx.intern_substs(&[t_rptr_bound1.into()]);\n@@ -537,7 +537,7 @@ fn subst_ty_renumber_some_bounds() {\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n             let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n-            env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_nil()))\n+            env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_unit()))\n         };\n \n         debug!(\"subst_bound: t_source={:?} substs={:?} t_substituted={:?} t_expected={:?}\",\n@@ -559,7 +559,7 @@ fn escaping() {\n         // Theta = [A -> &'a foo]\n         env.create_simple_region_hierarchy();\n \n-        assert!(!env.t_nil().has_escaping_regions());\n+        assert!(!env.t_unit().has_escaping_regions());\n \n         let t_rptr_free1 = env.t_rptr_free(1);\n         assert!(!t_rptr_free1.has_escaping_regions());\n@@ -573,7 +573,7 @@ fn escaping() {\n         // t_fn = fn(A)\n         let t_param = env.t_param(0);\n         assert!(!t_param.has_escaping_regions());\n-        let t_fn = env.t_fn(&[t_param], env.t_nil());\n+        let t_fn = env.t_fn(&[t_param], env.t_unit());\n         assert!(!t_fn.has_escaping_regions());\n     })\n }\n@@ -588,7 +588,7 @@ fn subst_region_renumber_region() {\n         // type t_source<'a> = fn(&'a isize)\n         let t_source = {\n             let re_early = env.re_early_bound(0, \"'a\");\n-            env.t_fn(&[env.t_rptr(re_early)], env.t_nil())\n+            env.t_fn(&[env.t_rptr(re_early)], env.t_unit())\n         };\n \n         let substs = env.infcx.tcx.intern_substs(&[re_bound1.into()]);\n@@ -599,7 +599,7 @@ fn subst_region_renumber_region() {\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n             let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, d2());\n-            env.t_fn(&[t_rptr_bound2], env.t_nil())\n+            env.t_fn(&[t_rptr_bound2], env.t_unit())\n         };\n \n         debug!(\"subst_bound: t_source={:?} substs={:?} t_substituted={:?} t_expected={:?}\","}]}