{"sha": "c8699076f9d9078f401188e533283dd25de07439", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Njk5MDc2ZjlkOTA3OGY0MDExODhlNTMzMjgzZGQyNWRlMDc0Mzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-23T13:13:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-23T13:13:49Z"}, "message": "Document almost all modules\n\nFixes #1082", "tree": {"sha": "348183f5495765a6d3de4c8cc42450d390fbc0bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348183f5495765a6d3de4c8cc42450d390fbc0bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8699076f9d9078f401188e533283dd25de07439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8699076f9d9078f401188e533283dd25de07439", "html_url": "https://github.com/rust-lang/rust/commit/c8699076f9d9078f401188e533283dd25de07439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8699076f9d9078f401188e533283dd25de07439/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "934d56a6467c96c6f029dd9b4129c08b1b3117a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/934d56a6467c96c6f029dd9b4129c08b1b3117a9", "html_url": "https://github.com/rust-lang/rust/commit/934d56a6467c96c6f029dd9b4129c08b1b3117a9"}], "stats": {"total": 211, "additions": 145, "deletions": 66}, "files": [{"sha": "f63a4565a72a6b22ad41425e0b2c7d828ff82006", "filename": "src/abi/comments.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,6 @@\n+//! Annotate the clif ir with comments describing how arguments are passed into the current function\n+//! and where all locals are stored.\n+\n use std::borrow::Cow;\n \n use rustc_middle::mir;"}, {"sha": "f55d94b0a09793388f34c7ce4ed3ffccba87d8b9", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Handling of everything related to the calling convention. Also fills `fx.local_map`.\n+\n #[cfg(debug_assertions)]\n mod comments;\n mod pass_mode;\n@@ -325,6 +327,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n }\n \n+/// Make a [`CPlace`] capable of holding value of the specified type.\n fn make_local_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     local: Local,"}, {"sha": "6033cd88da9f9483a85118516a3974f43cb3a260", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Argument passing\n+\n use crate::prelude::*;\n \n pub(super) use EmptySinglePair::*;\n@@ -118,6 +120,7 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n     }\n }\n \n+/// Get a set of values to be passed as function arguments.\n pub(super) fn adjust_arg_for_abi<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     arg: CValue<'tcx>,\n@@ -136,6 +139,8 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n     }\n }\n \n+/// Create a [`CValue`] containing the value of a function parameter adding clif function parameters\n+/// as necessary.\n pub(super) fn cvalue_for_param<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     start_block: Block,"}, {"sha": "4505caa67dd512d4e8e9f85ab455fdced8475b35", "filename": "src/abi/returning.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,10 +1,13 @@\n+//! Return value handling\n+\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> TyAndLayout<'tcx> {\n     fx.layout_of(fx.monomorphize(&fx.mir.local_decls[RETURN_PLACE].ty))\n }\n \n+/// Can the given type be returned into an ssa var or does it need to be returned on the stack.\n pub(crate) fn can_return_to_ssa_var<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     dest_layout: TyAndLayout<'tcx>,\n@@ -16,6 +19,8 @@ pub(crate) fn can_return_to_ssa_var<'tcx>(\n     }\n }\n \n+/// Return a place where the return value of the current function can be written to. If necessary\n+/// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n@@ -59,6 +64,8 @@ pub(super) fn codegen_return_param<'tcx>(\n     ret_place\n }\n \n+/// Invokes the closure with if necessary a value representing the return pointer. When the closure\n+/// returns the call return value(s) if any are written to the correct place.\n pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     fx: &mut FunctionCx<'_, 'tcx, B>,\n     fn_sig: FnSig<'tcx>,\n@@ -102,6 +109,7 @@ pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     (call_inst, meta)\n }\n \n+/// Codegen a return instruction with the right return value(s) if any.\n pub(crate) fn codegen_return(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     match get_pass_mode(fx.tcx, return_layout(fx)) {\n         PassMode::NoPass | PassMode::ByRef { size: Some(_) } => {"}, {"sha": "95beb93f26f1d3697b4cc5f124407bc175111cfc", "filename": "src/allocator.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,12 +1,5 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+//! Allocator shim\n+// Adapted from rustc\n \n use crate::prelude::*;\n "}, {"sha": "06434bdf69c5aad6731932d688eb791ade21f032", "filename": "src/analyze.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! SSA analysis\n+\n use crate::prelude::*;\n \n use rustc_index::vec::IndexVec;"}, {"sha": "fe2c2f100eec8b70bd6ee1b5ee9ba607716c2ac2", "filename": "src/archive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Creation of ar archives like for the lib and staticlib crate type\n+\n use std::collections::BTreeMap;\n use std::fs::File;\n use std::path::{Path, PathBuf};"}, {"sha": "f6c06f7f88e24dbd0eb36a3e28822c246ba6a27d", "filename": "src/backend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Abstraction around the object writing crate\n+\n use std::convert::{TryFrom, TryInto};\n \n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "1bacfb3fe740c612f520264eb99a9b21b4adf4a3", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Codegen of a single function\n+\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n "}, {"sha": "edfe6feb6c8a2f0e78c8468c5fcc3d4fc5e66134", "filename": "src/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Various number casting functions\n+\n use crate::prelude::*;\n \n pub(crate) fn clif_intcast("}, {"sha": "99bd526ad01a8ddc5d9c0a2af5f9faa3108882dc", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,4 +1,4 @@\n-//! Replaces 128-bit operators with lang item calls\n+//! Replaces 128-bit operators with lang item calls where necessary\n \n use crate::prelude::*;\n "}, {"sha": "d1375c73a4b21e31438d332a6999327f41829c95", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -302,7 +302,7 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n     pub(crate) caller_location: Option<CValue<'tcx>>,\n \n-    /// See [crate::optimize::code_layout] for more information.\n+    /// See [`crate::optimize::code_layout`] for more information.\n     pub(crate) cold_blocks: EntitySet<Block>,\n \n     pub(crate) clif_comments: crate::pretty_clif::CommentWriter,"}, {"sha": "c01256b7f74badfd3404bf297a6da54c5cc98ac1", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Handling of `static`s, `const`s and promoted allocations\n+\n use rustc_span::DUMMY_SP;\n \n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "0a887e8cb5932eea09e262ac894eef3d3007f175", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Write the debuginfo into an object file.\n+\n use rustc_data_structures::fx::FxHashMap;\n \n use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n@@ -55,6 +57,7 @@ pub(crate) enum DebugRelocName {\n     Symbol(usize),\n }\n \n+/// A [`Writer`] that collects all necessary relocations.\n #[derive(Clone)]\n pub(super) struct WriterRelocate {\n     pub(super) relocs: Vec<DebugReloc>,\n@@ -69,6 +72,7 @@ impl WriterRelocate {\n         }\n     }\n \n+    /// Perform the collected relocations to be usable for JIT usage.\n     #[cfg(feature = \"jit\")]\n     pub(super) fn relocate_for_jit(\n         mut self,"}, {"sha": "4de848553289603395fa8eee80cc50e7e5532223", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Line info generation (`.debug_line`)\n+\n use std::ffi::OsStr;\n use std::path::{Component, Path};\n "}, {"sha": "9cad668e3f6aa29075a7a11cbf54a0edd79518f9", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Handling of everything related to debuginfo.\n+\n mod emit;\n mod line_info;\n mod unwind;"}, {"sha": "fa1a9d44117fca3f981d2b4990570ff363e8cad2", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Unwind info generation (`.eh_frame`)\n+\n use crate::prelude::*;\n \n use cranelift_codegen::isa::{unwind::UnwindInfo, TargetIsa};"}, {"sha": "231802dfb859b159c0076f77f92730e79419150d", "filename": "src/discriminant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Handling of enum discriminants\n+//!\n //! Adapted from https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs\n \n use rustc_target::abi::{Int, TagEncoding, Variants};"}, {"sha": "2cf136ceb674b6bf0e9e1086b0fe949082c0ba7a", "filename": "src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,6 @@\n+//! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n+//! standalone executable.\n+\n use std::path::PathBuf;\n \n use rustc_codegen_ssa::back::linker::LinkerInfo;"}, {"sha": "edeeb7670e9e15be0e8b97c0eaa7a05d7f969704", "filename": "src/driver/jit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,6 @@\n+//! The JIT driver uses [`cranelift_simplejit`] to JIT execute programs without writing any object\n+//! files.\n+\n use std::ffi::CString;\n use std::os::raw::{c_char, c_int};\n "}, {"sha": "0224f929ac7f6050b0cd8ab166c1f4e0d107ab2a", "filename": "src/driver/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,6 @@\n+//! Drivers are responsible for calling [`codegen_mono_items`] and performing any further actions\n+//! like JIT executing or writing object files.\n+\n use std::any::Any;\n \n use rustc_middle::middle::cstore::EncodedMetadata;"}, {"sha": "e11ba4a4f6370af5943dcf7cccd2224050d39a21", "filename": "src/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Codegen of [`asm!`] invocations.\n+\n use crate::prelude::*;\n \n use std::fmt::Write;"}, {"sha": "94c280ee0badbc2ddc939946f2089c88a99da0aa", "filename": "src/intrinsics/cpuid.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fcpuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fcpuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fcpuid.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,6 +1,8 @@\n+//! Emulation of a subset of the cpuid x86 instruction.\n+\n use crate::prelude::*;\n \n-/// Emulates a subset of the cpuid call.\n+/// Emulates a subset of the cpuid x86 instruction.\n ///\n /// This emulates an intel cpu with sse and sse2 support, but which doesn't support anything else.\n pub(crate) fn codegen_cpuid_call<'tcx>("}, {"sha": "cc919f97616a3bcf5cadeb227c955ede7d1bd94d", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Emulate LLVM intrinsics\n+\n use crate::intrinsics::*;\n use crate::prelude::*;\n "}, {"sha": "0b7cc7bee900c270453f0c3cef3ecb2e9909192f", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,6 @@\n+//! Codegen of intrinsics. This includes `extern \"rust-intrinsic\"`, `extern \"platform-intrinsic\"`\n+//! and LLVM intrinsics that have symbol names starting with `llvm.`.\n+\n mod cpuid;\n mod llvm;\n mod simd;"}, {"sha": "93724522e76b7089b1c8834c3c814ed17b3bee59", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Codegen `extern \"platform-intrinsic\"` intrinsics.\n+\n use super::*;\n use crate::prelude::*;\n "}, {"sha": "93cff5711d937ec4234ac44efb01bce1847ba33a", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Reading and writing of the rustc metadata for rlibs and dylibs\n+\n use std::convert::TryFrom;\n use std::fs::File;\n use std::path::Path;"}, {"sha": "4e3b79cd2d6f97068c0775d0bc0be77b2f5c6969", "filename": "src/num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Various operations on integer and floating-point numbers\n+\n use crate::prelude::*;\n \n pub(crate) fn bin_op_to_intcc(bin_op: BinOp, signed: bool) -> Option<IntCC> {"}, {"sha": "3ce7f8cd9a8315b527dc91bc20dcbacfefe9c588", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Various optimizations specific to cg_clif\n+\n use crate::prelude::*;\n \n mod code_layout;"}, {"sha": "cd3f27c324777c8a33ad074315665b9f428e9163", "filename": "src/pointer.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,9 +1,13 @@\n+//! Defines [`Pointer`] which is used to improve the quality of the generated clif ir for pointer\n+//! operations.\n+\n use crate::prelude::*;\n \n use rustc_target::abi::Align;\n \n use cranelift_codegen::ir::immediates::Offset32;\n \n+/// A pointer pointing either to a certain address, a certain stack slot or nothing.\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct Pointer {\n     base: PointerBase,"}, {"sha": "5c4d951bc50761b546d136147b19125dc0436728", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,57 @@\n+//! This module provides the [CommentWriter] which makes it possible\n+//! to add comments to the written cranelift ir.\n+//!\n+//! # Example\n+//!\n+//! ```clif\n+//! test compile\n+//! target x86_64\n+//!\n+//! function u0:0(i64, i64, i64) system_v {\n+//! ; symbol _ZN119_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$u27$a$u20$$RF$$u27$b$u20$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17he85059d5e6a760a0E\n+//! ; instance Instance { def: Item(DefId(0/0:29 ~ example[8787]::{{impl}}[0]::call_once[0])), substs: [ReErased, ReErased] }\n+//! ; sig ([IsNotEmpty, (&&[u16],)]; c_variadic: false)->(u8, u8)\n+//!\n+//! ; ssa {_2: NOT_SSA, _4: NOT_SSA, _0: NOT_SSA, _3: (empty), _1: NOT_SSA}\n+//! ; msg   loc.idx    param    pass mode            ssa flags  ty\n+//! ; ret    _0      = v0       ByRef                NOT_SSA    (u8, u8)\n+//! ; arg    _1      = v1       ByRef                NOT_SSA    IsNotEmpty\n+//! ; arg    _2.0    = v2       ByVal(types::I64)    NOT_SSA    &&[u16]\n+//!\n+//!     ss0 = explicit_slot 0 ; _1: IsNotEmpty size=0 align=1,8\n+//!     ss1 = explicit_slot 8 ; _2: (&&[u16],) size=8 align=8,8\n+//!     ss2 = explicit_slot 8 ; _4: (&&[u16],) size=8 align=8,8\n+//!     sig0 = (i64, i64, i64) system_v\n+//!     sig1 = (i64, i64, i64) system_v\n+//!     fn0 = colocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n+//!\n+//! block0(v0: i64, v1: i64, v2: i64):\n+//!     v3 = stack_addr.i64 ss0\n+//!     v4 = stack_addr.i64 ss1\n+//!     store v2, v4\n+//!     v5 = stack_addr.i64 ss2\n+//!     jump block1\n+//!\n+//! block1:\n+//!     nop\n+//! ; _3 = &mut _1\n+//! ; _4 = _2\n+//!     v6 = load.i64 v4\n+//!     store v6, v5\n+//! ;\n+//! ; _0 = const mini_core::FnMut::call_mut(move _3, move _4)\n+//!     v7 = load.i64 v5\n+//!     call fn0(v0, v3, v7)\n+//!     jump block2\n+//!\n+//! block2:\n+//!     nop\n+//! ;\n+//! ; return\n+//!     return\n+//! }\n+//! ```\n+\n use std::fmt;\n \n use cranelift_codegen::{\n@@ -10,60 +64,6 @@ use rustc_session::config::OutputType;\n \n use crate::prelude::*;\n \n-/// This module provides the [CommentWriter] which makes it possible\n-/// to add comments to the written cranelift ir.\n-///\n-/// # Example\n-///\n-/// ```clif\n-/// test compile\n-/// target x86_64\n-///\n-/// function u0:0(i64, i64, i64) system_v {\n-/// ; symbol _ZN119_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$u27$a$u20$$RF$$u27$b$u20$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17he85059d5e6a760a0E\n-/// ; instance Instance { def: Item(DefId(0/0:29 ~ example[8787]::{{impl}}[0]::call_once[0])), substs: [ReErased, ReErased] }\n-/// ; sig ([IsNotEmpty, (&&[u16],)]; c_variadic: false)->(u8, u8)\n-///\n-/// ; ssa {_2: NOT_SSA, _4: NOT_SSA, _0: NOT_SSA, _3: (empty), _1: NOT_SSA}\n-/// ; msg   loc.idx    param    pass mode            ssa flags  ty\n-/// ; ret    _0      = v0       ByRef                NOT_SSA    (u8, u8)\n-/// ; arg    _1      = v1       ByRef                NOT_SSA    IsNotEmpty\n-/// ; arg    _2.0    = v2       ByVal(types::I64)    NOT_SSA    &&[u16]\n-///\n-///     ss0 = explicit_slot 0 ; _1: IsNotEmpty size=0 align=1,8\n-///     ss1 = explicit_slot 8 ; _2: (&&[u16],) size=8 align=8,8\n-///     ss2 = explicit_slot 8 ; _4: (&&[u16],) size=8 align=8,8\n-///     sig0 = (i64, i64, i64) system_v\n-///     sig1 = (i64, i64, i64) system_v\n-///     fn0 = colocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n-///\n-/// block0(v0: i64, v1: i64, v2: i64):\n-///     v3 = stack_addr.i64 ss0\n-///     v4 = stack_addr.i64 ss1\n-///     store v2, v4\n-///     v5 = stack_addr.i64 ss2\n-///     jump block1\n-///\n-/// block1:\n-///     nop\n-/// ; _3 = &mut _1\n-/// ; _4 = _2\n-///     v6 = load.i64 v4\n-///     store v6, v5\n-/// ;\n-/// ; _0 = const mini_core::FnMut::call_mut(move _3, move _4)\n-///     v7 = load.i64 v5\n-///     call fn0(v0, v3, v7)\n-///     jump block2\n-///\n-/// block2:\n-///     nop\n-/// ;\n-/// ; return\n-///     return\n-/// }\n-/// ```\n-\n #[derive(Debug)]\n pub(crate) struct CommentWriter {\n     global_comments: Vec<String>,"}, {"sha": "d1329d5de7e0c8fc1c1ec1afc1b83bcace793050", "filename": "src/toolchain.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftoolchain.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Locating various executables part of a C toolchain.\n+\n use std::path::PathBuf;\n \n use rustc_middle::bug;"}, {"sha": "7ab3a4a88c26a1b194d065084a6266b2e0d2074b", "filename": "src/trap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Helpers used to print a message and abort in case of certain panics and some detected UB.\n+\n use crate::prelude::*;\n \n fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: &str) {"}, {"sha": "441d2b5edd8933809f8129cc579f0e7d119999be", "filename": "src/unsize.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,7 @@\n+//! Codegen of the [`PointerCast::Unsize`] operation.\n+//!\n+//! [`PointerCast::Unsize`]: `rustc_middle::ty::adjustment::PointerCast::Unsize`\n+\n use crate::prelude::*;\n \n // Adapted from https://github.com/rust-lang/rust/blob/2a663555ddf36f6b041445894a8c175cd1bc718c/src/librustc_codegen_ssa/base.rs#L159-L307"}, {"sha": "5e663425117f03f004776cc16500a0bc1730e390", "filename": "src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,3 +1,5 @@\n+//! Definition of [`CValue`] and [`CPlace`]\n+\n use crate::prelude::*;\n \n use cranelift_codegen::entity::EntityRef;"}, {"sha": "d6bb9c912b557a449d004e4ac4b6c8be60420756", "filename": "src/vtable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8699076f9d9078f401188e533283dd25de07439/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8699076f9d9078f401188e533283dd25de07439/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=c8699076f9d9078f401188e533283dd25de07439", "patch": "@@ -1,4 +1,7 @@\n+//! Codegen vtables and vtable accesses.\n+//!\n //! See librustc_codegen_llvm/meth.rs for reference\n+// FIXME dedup this logic between miri, cg_llvm and cg_clif\n \n use crate::prelude::*;\n "}]}