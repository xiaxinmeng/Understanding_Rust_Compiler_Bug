{"sha": "45c37da0f757283d6d50a03a6915eec787179aa4", "node_id": "C_kwDOAAsO6NoAKDQ1YzM3ZGEwZjc1NzI4M2Q2ZDUwYTAzYTY5MTVlZWM3ODcxNzlhYTQ", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-04T18:02:30Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "remove LayoutTest\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "fe943d827fbd48d38b85d46d2064e9c8a4586087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe943d827fbd48d38b85d46d2064e9c8a4586087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c37da0f757283d6d50a03a6915eec787179aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c37da0f757283d6d50a03a6915eec787179aa4", "html_url": "https://github.com/rust-lang/rust/commit/45c37da0f757283d6d50a03a6915eec787179aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c37da0f757283d6d50a03a6915eec787179aa4/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef16feb72a53694ce4d5bfa25894e51425eb35d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef16feb72a53694ce4d5bfa25894e51425eb35d", "html_url": "https://github.com/rust-lang/rust/commit/0ef16feb72a53694ce4d5bfa25894e51425eb35d"}], "stats": {"total": 146, "additions": 67, "deletions": 79}, "files": [{"sha": "fd03f657111d99c62a30adf2407a5030773e28e4", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 67, "deletions": 79, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/45c37da0f757283d6d50a03a6915eec787179aa4/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c37da0f757283d6d50a03a6915eec787179aa4/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=45c37da0f757283d6d50a03a6915eec787179aa4", "patch": "@@ -1,8 +1,6 @@\n use rustc_ast::Attribute;\n-use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::ItemKind;\n use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -12,97 +10,87 @@ use rustc_target::abi::{HasDataLayout, TargetDataLayout};\n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n-        tcx.hir().visit_all_item_likes(&mut LayoutTest { tcx });\n-    }\n-}\n-\n-struct LayoutTest<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        match item.kind {\n-            ItemKind::TyAlias(..)\n-            | ItemKind::Enum(..)\n-            | ItemKind::Struct(..)\n-            | ItemKind::Union(..) => {\n-                for attr in self.tcx.get_attrs(item.def_id.to_def_id(), sym::rustc_layout) {\n-                    self.dump_layout_of(item.def_id, item, attr);\n+        for id in tcx.hir().items() {\n+            if matches!(\n+                tcx.def_kind(id.def_id),\n+                DefKind::TyAlias | DefKind::Enum | DefKind::Struct | DefKind::Union\n+            ) {\n+                for attr in tcx.get_attrs(id.def_id.to_def_id(), sym::rustc_layout) {\n+                    dump_layout_of(tcx, id.def_id, attr);\n                 }\n             }\n-            _ => {}\n         }\n     }\n-\n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n-    fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n-impl<'tcx> LayoutTest<'tcx> {\n-    fn dump_layout_of(&self, item_def_id: LocalDefId, item: &hir::Item<'tcx>, attr: &Attribute) {\n-        let tcx = self.tcx;\n-        let param_env = self.tcx.param_env(item_def_id);\n-        let ty = self.tcx.type_of(item_def_id);\n-        match self.tcx.layout_of(param_env.and(ty)) {\n-            Ok(ty_layout) => {\n-                // Check out the `#[rustc_layout(..)]` attribute to tell what to dump.\n-                // The `..` are the names of fields to dump.\n-                let meta_items = attr.meta_item_list().unwrap_or_default();\n-                for meta_item in meta_items {\n-                    match meta_item.name_or_empty() {\n-                        sym::abi => {\n-                            self.tcx.sess.span_err(item.span, &format!(\"abi: {:?}\", ty_layout.abi));\n-                        }\n+fn dump_layout_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: LocalDefId, attr: &Attribute) {\n+    let tcx = tcx;\n+    let param_env = tcx.param_env(item_def_id);\n+    let ty = tcx.type_of(item_def_id);\n+    match tcx.layout_of(param_env.and(ty)) {\n+        Ok(ty_layout) => {\n+            // Check out the `#[rustc_layout(..)]` attribute to tell what to dump.\n+            // The `..` are the names of fields to dump.\n+            let meta_items = attr.meta_item_list().unwrap_or_default();\n+            for meta_item in meta_items {\n+                match meta_item.name_or_empty() {\n+                    sym::abi => {\n+                        tcx.sess.span_err(\n+                            tcx.def_span(item_def_id.to_def_id()),\n+                            &format!(\"abi: {:?}\", ty_layout.abi),\n+                        );\n+                    }\n \n-                        sym::align => {\n-                            self.tcx\n-                                .sess\n-                                .span_err(item.span, &format!(\"align: {:?}\", ty_layout.align));\n-                        }\n+                    sym::align => {\n+                        tcx.sess.span_err(\n+                            tcx.def_span(item_def_id.to_def_id()),\n+                            &format!(\"align: {:?}\", ty_layout.align),\n+                        );\n+                    }\n \n-                        sym::size => {\n-                            self.tcx\n-                                .sess\n-                                .span_err(item.span, &format!(\"size: {:?}\", ty_layout.size));\n-                        }\n+                    sym::size => {\n+                        tcx.sess.span_err(\n+                            tcx.def_span(item_def_id.to_def_id()),\n+                            &format!(\"size: {:?}\", ty_layout.size),\n+                        );\n+                    }\n \n-                        sym::homogeneous_aggregate => {\n-                            self.tcx.sess.span_err(\n-                                item.span,\n-                                &format!(\n-                                    \"homogeneous_aggregate: {:?}\",\n-                                    ty_layout\n-                                        .homogeneous_aggregate(&UnwrapLayoutCx { tcx, param_env }),\n-                                ),\n-                            );\n-                        }\n+                    sym::homogeneous_aggregate => {\n+                        tcx.sess.span_err(\n+                            tcx.def_span(item_def_id.to_def_id()),\n+                            &format!(\n+                                \"homogeneous_aggregate: {:?}\",\n+                                ty_layout.homogeneous_aggregate(&UnwrapLayoutCx { tcx, param_env }),\n+                            ),\n+                        );\n+                    }\n \n-                        sym::debug => {\n-                            let normalized_ty = self.tcx.normalize_erasing_regions(\n-                                param_env.with_reveal_all_normalized(self.tcx),\n-                                ty,\n-                            );\n-                            self.tcx.sess.span_err(\n-                                item.span,\n-                                &format!(\"layout_of({:?}) = {:#?}\", normalized_ty, *ty_layout),\n-                            );\n-                        }\n+                    sym::debug => {\n+                        let normalized_ty = tcx.normalize_erasing_regions(\n+                            param_env.with_reveal_all_normalized(tcx),\n+                            ty,\n+                        );\n+                        tcx.sess.span_err(\n+                            tcx.def_span(item_def_id.to_def_id()),\n+                            &format!(\"layout_of({:?}) = {:#?}\", normalized_ty, *ty_layout),\n+                        );\n+                    }\n \n-                        name => {\n-                            self.tcx.sess.span_err(\n-                                meta_item.span(),\n-                                &format!(\"unrecognized field name `{}`\", name),\n-                            );\n-                        }\n+                    name => {\n+                        tcx.sess.span_err(\n+                            meta_item.span(),\n+                            &format!(\"unrecognized field name `{}`\", name),\n+                        );\n                     }\n                 }\n             }\n+        }\n \n-            Err(layout_error) => {\n-                self.tcx.sess.span_err(item.span, &format!(\"layout error: {:?}\", layout_error));\n-            }\n+        Err(layout_error) => {\n+            tcx.sess.span_err(\n+                tcx.def_span(item_def_id.to_def_id()),\n+                &format!(\"layout error: {:?}\", layout_error),\n+            );\n         }\n     }\n }"}]}