{"sha": "992694ac4dcbc93ca249fbb9f148cc586f1d384d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MjY5NGFjNGRjYmM5M2NhMjQ5ZmJiOWYxNDhjYzU4NmYxZDM4NGQ=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-02-26T08:54:57Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-02-26T08:54:57Z"}, "message": "reduce repetitions of (n << amt) >> amt", "tree": {"sha": "dda87b09a47f4a44ec7437591306d97c2d058474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda87b09a47f4a44ec7437591306d97c2d058474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992694ac4dcbc93ca249fbb9f148cc586f1d384d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992694ac4dcbc93ca249fbb9f148cc586f1d384d", "html_url": "https://github.com/rust-lang/rust/commit/992694ac4dcbc93ca249fbb9f148cc586f1d384d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992694ac4dcbc93ca249fbb9f148cc586f1d384d/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb162e69449b423c5aed0d9c39f6c046fa300c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb162e69449b423c5aed0d9c39f6c046fa300c30", "html_url": "https://github.com/rust-lang/rust/commit/fb162e69449b423c5aed0d9c39f6c046fa300c30"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "796ac372d020ba5f0b3105beb9540996f3d84a8e", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/992694ac4dcbc93ca249fbb9f148cc586f1d384d/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992694ac4dcbc93ca249fbb9f148cc586f1d384d/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=992694ac4dcbc93ca249fbb9f148cc586f1d384d", "patch": "@@ -4,6 +4,7 @@ use crate::hir::def::Def;\n use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n use crate::hir::{self, Node};\n+use crate::mir::interpret::{sign_extend, truncate};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n@@ -32,12 +33,12 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.ty.sty {\n             ty::Int(ity) => {\n-                let bits = ty::tls::with(|tcx| {\n-                    Integer::from_attr(&tcx, SignedInt(ity)).size().bits()\n+                let size = ty::tls::with(|tcx| {\n+                    Integer::from_attr(&tcx, SignedInt(ity)).size()\n                 });\n-                let x = self.val as i128;\n+                let x = self.val;\n                 // sign extend the raw representation to be an i128\n-                let x = (x << (128 - bits)) >> (128 - bits);\n+                let x = sign_extend(x, size) as i128;\n                 write!(fmt, \"{}\", x)\n             },\n             _ => write!(fmt, \"{}\", self.val),\n@@ -57,12 +58,12 @@ impl<'tcx> Discr<'tcx> {\n             _ => bug!(\"non integer discriminant\"),\n         };\n \n+        let size = int.size();\n         let bit_size = int.size().bits();\n         let shift = 128 - bit_size;\n         if signed {\n             let sext = |u| {\n-                let i = u as i128;\n-                (i << shift) >> shift\n+                sign_extend(u, size) as i128\n             };\n             let min = sext(1_u128 << (bit_size - 1));\n             let max = i128::max_value() >> shift;\n@@ -77,7 +78,7 @@ impl<'tcx> Discr<'tcx> {\n             };\n             // zero the upper bits\n             let val = val as u128;\n-            let val = (val << shift) >> shift;\n+            let val = truncate(val, size);\n             (Self {\n                 val: val as u128,\n                 ty: self.ty,"}]}