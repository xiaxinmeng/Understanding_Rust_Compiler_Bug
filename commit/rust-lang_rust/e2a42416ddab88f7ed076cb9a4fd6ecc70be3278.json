{"sha": "e2a42416ddab88f7ed076cb9a4fd6ecc70be3278", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYTQyNDE2ZGRhYjg4ZjdlZDA3NmNiOWE0ZmQ2ZWNjNzBiZTMyNzg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-13T02:40:57Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:57Z"}, "message": "Add option::take(), the building block of the option::take_* family.", "tree": {"sha": "fa1ef3905007e4228b1c3bb0c6306655bc14c4fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1ef3905007e4228b1c3bb0c6306655bc14c4fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2a42416ddab88f7ed076cb9a4fd6ecc70be3278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a42416ddab88f7ed076cb9a4fd6ecc70be3278", "html_url": "https://github.com/rust-lang/rust/commit/e2a42416ddab88f7ed076cb9a4fd6ecc70be3278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2a42416ddab88f7ed076cb9a4fd6ecc70be3278/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a7273c71efe0209c45a9e04f54e210a533ddb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7273c71efe0209c45a9e04f54e210a533ddb58", "html_url": "https://github.com/rust-lang/rust/commit/2a7273c71efe0209c45a9e04f54e210a533ddb58"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "03f5d94b3f5fdebf9b55b577b3a9583afedf5d7f", "filename": "src/libstd/option.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2a42416ddab88f7ed076cb9a4fd6ecc70be3278/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a42416ddab88f7ed076cb9a4fd6ecc70be3278/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=e2a42416ddab88f7ed076cb9a4fd6ecc70be3278", "patch": "@@ -200,18 +200,24 @@ impl<T> Option<T> {\n         match self { None => def, Some(v) => f(v) }\n     }\n \n+    /// Take the value out of the option, leaving a `None` in its place.\n+    #[inline]\n+    pub fn take(&mut self) -> Option<T> {\n+        util::replace(self, None)\n+    }\n+\n     /// As `map_consume`, but swaps a None into the original option rather\n     /// than consuming it by-value.\n     #[inline]\n     pub fn take_map<U>(&mut self, blk: &fn(T) -> U) -> Option<U> {\n-        util::replace(self, None).map_consume(blk)\n+        self.take().map_consume(blk)\n     }\n \n     /// As `map_consume_default`, but swaps a None into the original option\n     /// rather than consuming it by-value.\n     #[inline]\n     pub fn take_map_default<U> (&mut self, def: U, blk: &fn(T) -> U) -> U {\n-        util::replace(self, None).map_consume_default(def, blk)\n+        self.take().map_consume_default(def, blk)\n     }\n \n     /// Apply a function to the contained value or do nothing\n@@ -309,7 +315,7 @@ impl<T> Option<T> {\n     #[inline]\n     pub fn take_unwrap(&mut self) -> T {\n         if self.is_none() { fail!(\"option::take_unwrap none\") }\n-        util::replace(self, None).unwrap()\n+        self.take().unwrap()\n     }\n \n     /**"}]}