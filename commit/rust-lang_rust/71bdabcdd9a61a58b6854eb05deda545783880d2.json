{"sha": "71bdabcdd9a61a58b6854eb05deda545783880d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYmRhYmNkZDlhNjFhNThiNjg1NGViMDVkZWRhNTQ1NzgzODgwZDI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-29T17:48:00Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-29T17:48:00Z"}, "message": "Merge pull request #10 from llogiq/clippy\n\nFixed some clippy warnings", "tree": {"sha": "46fa855e02e2a8cce6e17c4893639c7c842a4524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46fa855e02e2a8cce6e17c4893639c7c842a4524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71bdabcdd9a61a58b6854eb05deda545783880d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71bdabcdd9a61a58b6854eb05deda545783880d2", "html_url": "https://github.com/rust-lang/rust/commit/71bdabcdd9a61a58b6854eb05deda545783880d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71bdabcdd9a61a58b6854eb05deda545783880d2/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1531bd675c1074c41616826e57b99eb79ff6eb9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1531bd675c1074c41616826e57b99eb79ff6eb9e", "html_url": "https://github.com/rust-lang/rust/commit/1531bd675c1074c41616826e57b99eb79ff6eb9e"}, {"sha": "7cb6c0dbfe3c49c5ed2f08c60b293bfae98c8ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb6c0dbfe3c49c5ed2f08c60b293bfae98c8ef9", "html_url": "https://github.com/rust-lang/rust/commit/7cb6c0dbfe3c49c5ed2f08c60b293bfae98c8ef9"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "0b4aab71b61577e0de449232f68341545c81f7c2", "filename": "src/interpreter.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71bdabcdd9a61a58b6854eb05deda545783880d2/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71bdabcdd9a61a58b6854eb05deda545783880d2/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=71bdabcdd9a61a58b6854eb05deda545783880d2", "patch": "@@ -830,7 +830,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                     Index(ref operand) => {\n                         let elem_size = match base_ty.sty {\n-                            ty::TyArray(elem_ty, _) => self.type_size(elem_ty),\n+                            ty::TyArray(elem_ty, _) |\n                             ty::TySlice(elem_ty) => self.type_size(elem_ty),\n                             _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n                         };\n@@ -1109,11 +1109,9 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         let vtable = selection.map(|predicate| {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });\n-        let vtable = infer::drain_fulfillment_cx_or_panic(\n+        infer::drain_fulfillment_cx_or_panic(\n             DUMMY_SP, &infcx, &mut fulfill_cx, &vtable\n-        );\n-\n-        vtable\n+        )\n     }\n \n     /// Trait method, which has to be resolved to an impl method.\n@@ -1166,7 +1164,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     }\n }\n \n-fn pointee_type<'tcx>(ptr_ty: ty::Ty<'tcx>) -> Option<ty::Ty<'tcx>> {\n+fn pointee_type(ptr_ty: ty::Ty) -> Option<ty::Ty> {\n     match ptr_ty.sty {\n         ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n         ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |"}, {"sha": "285c3554b647b2af279bdf8cd81e0f25542eb7ff", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71bdabcdd9a61a58b6854eb05deda545783880d2/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71bdabcdd9a61a58b6854eb05deda545783880d2/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=71bdabcdd9a61a58b6854eb05deda545783880d2", "patch": "@@ -47,7 +47,7 @@ pub struct FieldRepr {\n impl Repr {\n     pub fn size(&self) -> usize {\n         match *self {\n-            Repr::Primitive { size } => size,\n+            Repr::Primitive { size } |\n             Repr::Aggregate { size, .. } => size,\n             Repr::Array { elem_size, length } => elem_size * length,\n         }\n@@ -406,7 +406,7 @@ impl Memory {\n     fn clear_relocations(&mut self, ptr: Pointer, size: usize) -> EvalResult<()> {\n         // Find all relocations overlapping the given range.\n         let keys: Vec<_> = try!(self.relocations(ptr, size)).map(|(&k, _)| k).collect();\n-        if keys.len() == 0 { return Ok(()); }\n+        if keys.is_empty() { return Ok(()); }\n \n         // Find the start and end of the given range and its outermost relocations.\n         let start = ptr.offset;"}]}