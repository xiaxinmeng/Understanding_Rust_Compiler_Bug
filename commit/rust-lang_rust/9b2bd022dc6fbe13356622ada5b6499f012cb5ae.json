{"sha": "9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmJkMDIyZGM2ZmJlMTMzNTY2MjJhZGE1YjY0OTlmMDEyY2I1YWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T08:17:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T08:17:46Z"}, "message": "Snippetify add_new", "tree": {"sha": "c398ea756f44eaef28a348b8bf3d0d9e77e93dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c398ea756f44eaef28a348b8bf3d0d9e77e93dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "html_url": "https://github.com/rust-lang/rust/commit/9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bcaea46652ade4259559f08368179d54d4fdd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bcaea46652ade4259559f08368179d54d4fdd1", "html_url": "https://github.com/rust-lang/rust/commit/c0bcaea46652ade4259559f08368179d54d4fdd1"}], "stats": {"total": 60, "additions": 29, "deletions": 31}, "files": [{"sha": "837aa83774ee7fe384f5cc97f021c559b8a86b74", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     ast::{\n         self, AstNode, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner, VisibilityOwner,\n     },\n-    TextSize, T,\n+    T,\n };\n use stdx::{format_to, SepBy};\n \n@@ -25,7 +25,7 @@ use crate::{AssistContext, AssistId, Assists};\n // }\n //\n // impl<T: Clone> Ctx<T> {\n-//     fn new(data: T) -> Self { Self { data } }\n+//     fn $0new(data: T) -> Self { Self { data } }\n // }\n //\n // ```\n@@ -42,31 +42,26 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     let target = strukt.syntax().text_range();\n-    acc.add(AssistId(\"add_new\"), \"Add default constructor\", target, |edit| {\n+    acc.add(AssistId(\"add_new\"), \"Add default constructor\", target, |builder| {\n         let mut buf = String::with_capacity(512);\n \n         if impl_def.is_some() {\n             buf.push('\\n');\n         }\n \n-        let vis = strukt.visibility().map(|v| format!(\"{} \", v));\n-        let vis = vis.as_deref().unwrap_or(\"\");\n+        let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n \n         let params = field_list\n             .fields()\n             .filter_map(|f| {\n-                Some(format!(\n-                    \"{}: {}\",\n-                    f.name()?.syntax().text(),\n-                    f.ascribed_type()?.syntax().text()\n-                ))\n+                Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n             })\n             .sep_by(\", \");\n         let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n \n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n-        let (start_offset, end_offset) = impl_def\n+        let start_offset = impl_def\n             .and_then(|impl_def| {\n                 buf.push('\\n');\n                 let start = impl_def\n@@ -76,17 +71,20 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                     .text_range()\n                     .end();\n \n-                Some((start, TextSize::of(\"\\n\")))\n+                Some(start)\n             })\n             .unwrap_or_else(|| {\n                 buf = generate_impl_text(&strukt, &buf);\n-                let start = strukt.syntax().text_range().end();\n-\n-                (start, TextSize::of(\"\\n}\\n\"))\n+                strukt.syntax().text_range().end()\n             });\n \n-        edit.set_cursor(start_offset + TextSize::of(&buf) - end_offset);\n-        edit.insert(start_offset, buf);\n+        match ctx.config.snippet_cap {\n+            None => builder.insert(start_offset, buf),\n+            Some(cap) => {\n+                buf = buf.replace(\"fn new\", \"fn $0new\");\n+                builder.insert_snippet(cap, start_offset, buf);\n+            }\n+        }\n     })\n }\n \n@@ -191,7 +189,7 @@ mod tests {\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -201,7 +199,7 @@ impl Foo {\n \"struct Foo<T: Clone> {}\n \n impl<T: Clone> Foo<T> {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -211,7 +209,7 @@ impl<T: Clone> Foo<T> {\n \"struct Foo<'a, T: Foo<'a>> {}\n \n impl<'a, T: Foo<'a>> Foo<'a, T> {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -221,7 +219,7 @@ impl<'a, T: Foo<'a>> Foo<'a, T> {\n \"struct Foo { baz: String }\n \n impl Foo {\n-    fn new(baz: String) -> Self { Self { baz } }<|>\n+    fn $0new(baz: String) -> Self { Self { baz } }\n }\n \",\n         );\n@@ -231,7 +229,7 @@ impl Foo {\n \"struct Foo { baz: String, qux: Vec<i32> }\n \n impl Foo {\n-    fn new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }<|>\n+    fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n }\n \",\n         );\n@@ -243,7 +241,7 @@ impl Foo {\n \"struct Foo { pub baz: String, pub qux: Vec<i32> }\n \n impl Foo {\n-    fn new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }<|>\n+    fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n }\n \",\n         );\n@@ -258,7 +256,7 @@ impl Foo {}\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -273,7 +271,7 @@ impl Foo {\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n }\n@@ -294,7 +292,7 @@ impl Foo {\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n     fn baz() -> i32 {\n@@ -311,7 +309,7 @@ impl Foo {\n \"pub struct Foo {}\n \n impl Foo {\n-    pub fn new() -> Self { Self {  } }<|>\n+    pub fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -321,7 +319,7 @@ impl Foo {\n \"pub(crate) struct Foo {}\n \n impl Foo {\n-    pub(crate) fn new() -> Self { Self {  } }<|>\n+    pub(crate) fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -414,7 +412,7 @@ pub struct Source<T> {\n }\n \n impl<T> Source<T> {\n-    pub fn new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }<|>\n+    pub fn $0new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }\n \n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }"}, {"sha": "d860cfefcc7ef834928a54331e31b1d94b51e613", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "patch": "@@ -204,7 +204,7 @@ struct Ctx<T: Clone> {\n }\n \n impl<T: Clone> Ctx<T> {\n-    fn new(data: T) -> Self { Self { data } }\n+    fn $0new(data: T) -> Self { Self { data } }\n }\n \n \"#####,"}, {"sha": "03c01d6c05aaf64dcfa51952c435950e00411fea", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b2bd022dc6fbe13356622ada5b6499f012cb5ae/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=9b2bd022dc6fbe13356622ada5b6499f012cb5ae", "patch": "@@ -198,7 +198,7 @@ struct Ctx<T: Clone> {\n }\n \n impl<T: Clone> Ctx<T> {\n-    fn new(data: T) -> Self { Self { data } }\n+    fn $0new(data: T) -> Self { Self { data } }\n }\n \n ```"}]}