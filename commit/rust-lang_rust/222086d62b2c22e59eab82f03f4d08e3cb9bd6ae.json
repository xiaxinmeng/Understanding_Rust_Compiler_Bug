{"sha": "222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjA4NmQ2MmIyYzIyZTU5ZWFiODJmMDNmNGQwOGUzY2I5YmQ2YWU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-20T16:33:53Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-20T16:46:20Z"}, "message": "Remove all use of `format!(\"string literal\")`", "tree": {"sha": "02c1be67e8ed61ef991613ee638fdf32140ac589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02c1be67e8ed61ef991613ee638fdf32140ac589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "html_url": "https://github.com/rust-lang/rust/commit/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe6e9f911f69cdef209c20b2024c33b19bf3993", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe6e9f911f69cdef209c20b2024c33b19bf3993", "html_url": "https://github.com/rust-lang/rust/commit/5fe6e9f911f69cdef209c20b2024c33b19bf3993"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9e5745950dd732081bede15d47eafd1e1a94d30e", "filename": "src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "patch": "@@ -317,8 +317,8 @@ impl LateLintPass for LoopsPass {\n                     span_lint(cx,\n                               UNUSED_COLLECT,\n                               expr.span,\n-                              &format!(\"you are collect()ing an iterator and throwing away the result. Consider \\\n-                                        using an explicit for loop to exhaust the iterator\"));\n+                              &\"you are collect()ing an iterator and throwing away the result. \\\n+                                Consider using an explicit for loop to exhaust the iterator\");\n                 }\n             }\n         }"}, {"sha": "f776d5890b796fd84781800575d1280afead572d", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "patch": "@@ -589,7 +589,7 @@ fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n         span_lint(cx,\n                   EXTEND_FROM_SLICE,\n                   expr.span,\n-                  &format!(\"use of `extend` to extend a Vec by a slice\"))\n+                  &\"use of `extend` to extend a Vec by a slice\")\n             .span_suggestion(expr.span,\n                              \"try this\",\n                              format!(\"{}.extend_from_slice({}{})\","}, {"sha": "7521bc48046e8f091b9650360a8b6d7bb9566c22", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222086d62b2c22e59eab82f03f4d08e3cb9bd6ae/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=222086d62b2c22e59eab82f03f4d08e3cb9bd6ae", "patch": "@@ -491,12 +491,12 @@ fn check_type(cx: &LateContext, ty: &Ty) {\n         visitor.visit_ty(ty);\n         visitor.score\n     };\n-    // println!(\"{:?} --> {}\", ty, score);\n+\n     if score > 250 {\n         span_lint(cx,\n                   TYPE_COMPLEXITY,\n                   ty.span,\n-                  &format!(\"very complex type used. Consider factoring parts into `type` definitions\"));\n+                  &\"very complex type used. Consider factoring parts into `type` definitions\");\n     }\n }\n "}]}