{"sha": "109e0d85a14f62e08b324feb89d6baa740e25319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOWUwZDg1YTE0ZjYyZTA4YjMyNGZlYjg5ZDZiYWE3NDBlMjUzMTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-03T17:40:20Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T02:02:21Z"}, "message": "std: Convert Result to use external iterators\n\nconvert iter() and iter_err() for Result. Use OptionIterator.", "tree": {"sha": "b4b1f72ca14e91694156b838fea1aae502c26737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b1f72ca14e91694156b838fea1aae502c26737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109e0d85a14f62e08b324feb89d6baa740e25319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109e0d85a14f62e08b324feb89d6baa740e25319", "html_url": "https://github.com/rust-lang/rust/commit/109e0d85a14f62e08b324feb89d6baa740e25319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109e0d85a14f62e08b324feb89d6baa740e25319/comments", "author": null, "committer": null, "parents": [{"sha": "ce682cb45ff6f899d478358d7517fa83b215ac3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce682cb45ff6f899d478358d7517fa83b215ac3c", "html_url": "https://github.com/rust-lang/rust/commit/ce682cb45ff6f899d478358d7517fa83b215ac3c"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "e06e58acbc8e84b9c07b2802e456726340610a86", "filename": "src/libstd/result.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/109e0d85a14f62e08b324feb89d6baa740e25319/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109e0d85a14f62e08b324feb89d6baa740e25319/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=109e0d85a14f62e08b324feb89d6baa740e25319", "patch": "@@ -16,7 +16,7 @@ use clone::Clone;\n use cmp::Eq;\n use either;\n use iterator::Iterator;\n-use option::{None, Option, Some};\n+use option::{None, Option, Some, OptionIterator};\n use vec;\n use vec::{OwnedVector, ImmutableVector};\n use container::Container;\n@@ -86,15 +86,15 @@ impl<T, E: ToStr> Result<T, E> {\n     ///\n     /// Example:\n     ///\n-    ///     do read_file(file).iter |buf| {\n+    ///     for buf in read_file(file) {\n     ///         print_buf(buf)\n     ///     }\n     #[inline]\n-    pub fn iter(&self, f: &fn(&T)) {\n+    pub fn iter<'r>(&'r self) -> OptionIterator<&'r T> {\n         match *self {\n-            Ok(ref t) => f(t),\n-            Err(_) => (),\n-        }\n+            Ok(ref t) => Some(t),\n+            Err(*) => None,\n+        }.consume_iter()\n     }\n \n     /// Call a method based on a previous result\n@@ -104,11 +104,11 @@ impl<T, E: ToStr> Result<T, E> {\n     /// immediately returned.  This function can be used to pass through a\n     /// successful result while handling an error.\n     #[inline]\n-    pub fn iter_err(&self, f: &fn(&E)) {\n+    pub fn iter_err<'r>(&'r self) -> OptionIterator<&'r E> {\n         match *self {\n-            Ok(_) => (),\n-            Err(ref e) => f(e),\n-        }\n+            Ok(*) => None,\n+            Err(ref t) => Some(t),\n+        }.consume_iter()\n     }\n \n     /// Unwraps a result, yielding the content of an `Ok`.\n@@ -335,21 +335,25 @@ mod tests {\n     #[test]\n     pub fn test_impl_iter() {\n         let mut valid = false;\n-        Ok::<~str, ~str>(~\"a\").iter(|_x| valid = true);\n+        let okval = Ok::<~str, ~str>(~\"a\");\n+        do okval.iter().next().map |_| { valid = true; };\n         assert!(valid);\n \n-        Err::<~str, ~str>(~\"b\").iter(|_x| valid = false);\n+        let errval = Err::<~str, ~str>(~\"b\");\n+        do errval.iter().next().map |_| { valid = false; };\n         assert!(valid);\n     }\n \n     #[test]\n     pub fn test_impl_iter_err() {\n         let mut valid = true;\n-        Ok::<~str, ~str>(~\"a\").iter_err(|_x| valid = false);\n+        let okval = Ok::<~str, ~str>(~\"a\");\n+        do okval.iter_err().next().map |_| { valid = false };\n         assert!(valid);\n \n         valid = false;\n-        Err::<~str, ~str>(~\"b\").iter_err(|_x| valid = true);\n+        let errval = Err::<~str, ~str>(~\"b\");\n+        do errval.iter_err().next().map |_| { valid = true };\n         assert!(valid);\n     }\n "}]}