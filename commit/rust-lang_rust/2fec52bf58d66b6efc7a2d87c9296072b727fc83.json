{"sha": "2fec52bf58d66b6efc7a2d87c9296072b727fc83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZWM1MmJmNThkNjZiNmVmYzdhMmQ4N2M5Mjk2MDcyYjcyN2ZjODM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T15:52:02Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:17Z"}, "message": "Add lowering errors for const generics\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "37088a7623d78524c5f3de96bdaa9a23fd48c24f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37088a7623d78524c5f3de96bdaa9a23fd48c24f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fec52bf58d66b6efc7a2d87c9296072b727fc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fec52bf58d66b6efc7a2d87c9296072b727fc83", "html_url": "https://github.com/rust-lang/rust/commit/2fec52bf58d66b6efc7a2d87c9296072b727fc83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fec52bf58d66b6efc7a2d87c9296072b727fc83/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f72063667187f2d281e940209a924730e165b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f72063667187f2d281e940209a924730e165b2", "html_url": "https://github.com/rust-lang/rust/commit/29f72063667187f2d281e940209a924730e165b2"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "3de41b1665d6dd08299725a2e04f51498cbefddf", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2fec52bf58d66b6efc7a2d87c9296072b727fc83/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fec52bf58d66b6efc7a2d87c9296072b727fc83/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2fec52bf58d66b6efc7a2d87c9296072b727fc83", "patch": "@@ -1157,6 +1157,15 @@ impl<'a> LoweringContext<'a> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty_direct(&ty, itctx)),\n+            ast::GenericArg::Const(ct) => {\n+                // FIXME(const_generics): const generics are not yet defined in the HIR.\n+                self.sess.struct_span_err(\n+                    ct.value.span,\n+                    \"const generics in any position are currently unsupported\",\n+                ).emit();\n+                self.sess.abort_if_errors();\n+                bug!();\n+            }\n         }\n     }\n \n@@ -2441,7 +2450,7 @@ impl<'a> LoweringContext<'a> {\n             |this| this.lower_param_bounds(&param.bounds, itctx.reborrow()),\n         );\n \n-        match param.kind {\n+        let (name, kind) = match param.kind {\n             GenericParamKind::Lifetime => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n@@ -2457,22 +2466,14 @@ impl<'a> LoweringContext<'a> {\n                         | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n                     hir::LifetimeName::Error => ParamName::Error,\n                 };\n-                let param = hir::GenericParam {\n-                    id: lt.id,\n-                    hir_id: lt.hir_id,\n-                    name: param_name,\n-                    span: lt.span,\n-                    pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n-                    attrs: self.lower_attrs(&param.attrs),\n-                    bounds,\n-                    kind: hir::GenericParamKind::Lifetime {\n-                        kind: hir::LifetimeParamKind::Explicit,\n-                    }\n+\n+                let kind = hir::GenericParamKind::Lifetime {\n+                    kind: hir::LifetimeParamKind::Explicit\n                 };\n \n                 self.is_collecting_in_band_lifetimes = was_collecting_in_band;\n \n-                param\n+                (param_name, kind)\n             }\n             GenericParamKind::Type { ref default, .. } => {\n                 // Don't expose `Self` (recovered \"keyword used as ident\" parse error).\n@@ -2491,27 +2492,41 @@ impl<'a> LoweringContext<'a> {\n                                    .chain(params)\n                                    .collect();\n                 }\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(param.id);\n \n-                hir::GenericParam {\n-                    id: node_id,\n-                    hir_id,\n-                    name: hir::ParamName::Plain(ident),\n-                    pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n-                    attrs: self.lower_attrs(&param.attrs),\n-                    bounds,\n-                    span: ident.span,\n-                    kind: hir::GenericParamKind::Type {\n-                        default: default.as_ref().map(|x| {\n-                            self.lower_ty(x, ImplTraitContext::disallowed())\n-                        }),\n-                        synthetic: param.attrs.iter()\n-                                              .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n-                                              .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n-                                              .next(),\n-                    }\n-                }\n+                let kind = hir::GenericParamKind::Type {\n+                    default: default.as_ref().map(|x| {\n+                        self.lower_ty(x, ImplTraitContext::disallowed())\n+                    }),\n+                    synthetic: param.attrs.iter()\n+                                          .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n+                                          .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n+                                          .next(),\n+                };\n+\n+                (hir::ParamName::Plain(ident), kind)\n             }\n+            GenericParamKind::Const { .. } => {\n+                // FIXME(const_generics): const generics are not yet defined in the HIR.\n+                self.sess.struct_span_err(\n+                    param.ident.span,\n+                    \"const generics in any position are currently unsupported\",\n+                ).emit();\n+                self.sess.abort_if_errors();\n+                bug!();\n+            }\n+        };\n+\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(param.id);\n+\n+        hir::GenericParam {\n+            id: node_id,\n+            hir_id,\n+            name,\n+            span: param.ident.span,\n+            pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n+            attrs: self.lower_attrs(&param.attrs),\n+            bounds,\n+            kind,\n         }\n     }\n "}, {"sha": "1e5eb0992bd1bbbe4377faed0b97629a08c3711a", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fec52bf58d66b6efc7a2d87c9296072b727fc83/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fec52bf58d66b6efc7a2d87c9296072b727fc83/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=2fec52bf58d66b6efc7a2d87c9296072b727fc83", "patch": "@@ -480,6 +480,7 @@ pub fn noop_visit_generic_arg<T: MutVisitor>(arg: &mut GenericArg, vis: &mut T)\n     match arg {\n         GenericArg::Lifetime(lt) => vis.visit_lifetime(lt),\n         GenericArg::Type(ty) => vis.visit_ty(ty),\n+        GenericArg::Const(ct) => vis.visit_anon_const(ct),\n     }\n }\n \n@@ -698,6 +699,9 @@ pub fn noop_visit_generic_param<T: MutVisitor>(param: &mut GenericParam, vis: &m\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n+        GenericParamKind::Const { ty } => {\n+            vis.visit_ty(ty);\n+        }\n     }\n }\n "}, {"sha": "bb3b0ea7359a8e09f4b7f31310639ffb1270db6b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fec52bf58d66b6efc7a2d87c9296072b727fc83/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fec52bf58d66b6efc7a2d87c9296072b727fc83/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2fec52bf58d66b6efc7a2d87c9296072b727fc83", "patch": "@@ -126,6 +126,7 @@ pub trait Visitor<'ast>: Sized {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty) => self.visit_ty(ty),\n+            GenericArg::Const(ct) => self.visit_anon_const(ct),\n         }\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'ast TypeBinding) {\n@@ -486,6 +487,7 @@ pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Generi\n     match param.kind {\n         GenericParamKind::Lifetime => {}\n         GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n+        GenericParamKind::Const { ref ty, .. } => visitor.visit_ty(ty),\n     }\n }\n "}]}