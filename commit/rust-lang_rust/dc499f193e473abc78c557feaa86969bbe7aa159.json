{"sha": "dc499f193e473abc78c557feaa86969bbe7aa159", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDk5ZjE5M2U0NzNhYmM3OGM1NTdmZWFhODY5NjliYmU3YWExNTk=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-08-02T01:42:57Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-08-02T01:42:57Z"}, "message": "Merge pull request #3077 from erickt/incoming\n\ncore: change vec's ref_set to set_ref, move get_ref to unsafe::get.", "tree": {"sha": "8d8c68c1d83459a4a24a70737fd5f61cab3b14d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8c68c1d83459a4a24a70737fd5f61cab3b14d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc499f193e473abc78c557feaa86969bbe7aa159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc499f193e473abc78c557feaa86969bbe7aa159", "html_url": "https://github.com/rust-lang/rust/commit/dc499f193e473abc78c557feaa86969bbe7aa159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc499f193e473abc78c557feaa86969bbe7aa159/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba822402ded9821f4e9edfd8e07f1e32a3994497", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba822402ded9821f4e9edfd8e07f1e32a3994497", "html_url": "https://github.com/rust-lang/rust/commit/ba822402ded9821f4e9edfd8e07f1e32a3994497"}, {"sha": "71927615e0a2cd2d9f96038ba0f403a4d833a2f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71927615e0a2cd2d9f96038ba0f403a4d833a2f5", "html_url": "https://github.com/rust-lang/rust/commit/71927615e0a2cd2d9f96038ba0f403a4d833a2f5"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "d0cd011ff12a2e0701ca4bc518931e620f0ccec4", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dc499f193e473abc78c557feaa86969bbe7aa159/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc499f193e473abc78c557feaa86969bbe7aa159/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=dc499f193e473abc78c557feaa86969bbe7aa159", "patch": "@@ -189,7 +189,7 @@ pure fn from_fn<T>(n_elts: uint, op: init_op<T>) -> ~[T] {\n     let mut v = ~[];\n     unchecked{reserve(v, n_elts);}\n     let mut i: uint = 0u;\n-    while i < n_elts unsafe { ref_set(v, i, op(i)); i += 1u; }\n+    while i < n_elts unsafe { unsafe::set(v, i, op(i)); i += 1u; }\n     unsafe { unsafe::set_len(v, n_elts); }\n     ret v;\n }\n@@ -204,8 +204,8 @@ pure fn from_elem<T: copy>(n_elts: uint, t: T) -> ~[T] {\n     let mut v = ~[];\n     unchecked{reserve(v, n_elts)}\n     let mut i: uint = 0u;\n-    unsafe { // because ref_set is unsafe\n-        while i < n_elts { ref_set(v, i, t); i += 1u; }\n+    unsafe { // because unsafe::set is unsafe\n+        while i < n_elts { unsafe::set(v, i, t); i += 1u; }\n         unsafe { unsafe::set_len(v, n_elts); }\n     }\n     ret v;\n@@ -534,28 +534,12 @@ fn push_slow<T>(&v: ~[const T], +initval: T) {\n     unsafe { push_fast(v, initval) }\n }\n \n-// Unchecked vector indexing\n-#[inline(always)]\n-unsafe fn get_ref<T: copy>(v: &[const T], i: uint) -> T {\n-    as_buf(v, |p, _len| *ptr::offset(p, i))\n-}\n-\n-#[inline(always)]\n-unsafe fn ref_set<T>(v: &[mut T], i: uint, +val: T) {\n-    let mut box = some(val);\n-    do as_mut_buf(v) |p, _len| {\n-        let mut box2 = none;\n-        box2 <-> box;\n-        rusti::move_val_init(*ptr::mut_offset(p, i), option::unwrap(box2));\n-    }\n-}\n-\n #[inline(always)]\n fn push_all<T: copy>(&v: ~[const T], rhs: &[const T]) {\n     reserve(v, v.len() + rhs.len());\n \n     for uint::range(0u, rhs.len()) |i| {\n-        push(v, unsafe { get_ref(rhs, i) })\n+        push(v, unsafe { unsafe::get(rhs, i) })\n     }\n }\n \n@@ -1611,6 +1595,28 @@ mod unsafe {\n         f(*v)\n     }\n \n+    /**\n+     * Unchecked vector indexing.\n+     */\n+    #[inline(always)]\n+    unsafe fn get<T: copy>(v: &[const T], i: uint) -> T {\n+        as_buf(v, |p, _len| *ptr::offset(p, i))\n+    }\n+\n+    /**\n+     * Unchecked vector index assignment.\n+     */\n+    #[inline(always)]\n+    unsafe fn set<T>(v: &[mut T], i: uint, +val: T) {\n+        let mut box = some(val);\n+        do as_mut_buf(v) |p, _len| {\n+            let mut box2 = none;\n+            box2 <-> box;\n+            rusti::move_val_init(*ptr::mut_offset(p, i),\n+                                 option::unwrap(box2));\n+        }\n+    }\n+\n     /**\n       * Copies data from one vector to another.\n       *"}]}