{"sha": "cd08deff3c9c0de3ecd78883a3df4c9089b715d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMDhkZWZmM2M5YzBkZTNlY2Q3ODg4M2EzZGY0YzkwODliNzE1ZDE=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-09-01T18:59:46Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-09-01T18:59:46Z"}, "message": "Add test for `Ipv6Addr` methods in a const context", "tree": {"sha": "0fb1f2e5f97acd2d080ceffb22eda36c6a3969a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb1f2e5f97acd2d080ceffb22eda36c6a3969a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd08deff3c9c0de3ecd78883a3df4c9089b715d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd08deff3c9c0de3ecd78883a3df4c9089b715d1", "html_url": "https://github.com/rust-lang/rust/commit/cd08deff3c9c0de3ecd78883a3df4c9089b715d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd08deff3c9c0de3ecd78883a3df4c9089b715d1/comments", "author": null, "committer": null, "parents": [{"sha": "b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "html_url": "https://github.com/rust-lang/rust/commit/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "d9ea1064be809bf76a8641fd3dd92cc4f655ece3", "filename": "src/test/ui/consts/std/net/ipv6.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cd08deff3c9c0de3ecd78883a3df4c9089b715d1/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd08deff3c9c0de3ecd78883a3df4c9089b715d1/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs?ref=cd08deff3c9c0de3ecd78883a3df4c9089b715d1", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+\n+#![feature(ip)]\n+#![feature(const_ipv6)]\n+\n+use std::net::{Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n+\n+fn main() {\n+    const IP_ADDRESS : Ipv6Addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n+    assert_eq!(IP_ADDRESS, Ipv6Addr::LOCALHOST);\n+\n+    const SEGMENTS : [u16; 8] = IP_ADDRESS.segments();\n+    assert_eq!(SEGMENTS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 1]);\n+\n+    const OCTETS : [u8; 16] = IP_ADDRESS.octets();\n+    assert_eq!(OCTETS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 1]);\n+\n+    const IS_UNSPECIFIED : bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK : bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_UNIQUE_LOCAL : bool = IP_ADDRESS.is_unique_local();\n+    assert!(!IS_UNIQUE_LOCAL);\n+\n+    const IS_UNICAST_LINK_LOCAL_STRICT : bool = IP_ADDRESS.is_unicast_link_local_strict();\n+    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n+\n+    const IS_UNICAST_LINK_LOCAL : bool = IP_ADDRESS.is_unicast_link_local();\n+    assert!(!IS_UNICAST_LINK_LOCAL);\n+\n+    const IS_UNICAST_SITE_LOCAL : bool = IP_ADDRESS.is_unicast_site_local();\n+    assert!(!IS_UNICAST_SITE_LOCAL);\n+\n+    const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n+    assert!(!IS_DOCUMENTATION);\n+\n+    const IS_UNICAST_GLOBAL : bool = IP_ADDRESS.is_unicast_global();\n+    assert!(!IS_UNICAST_GLOBAL);\n+\n+    const MULTICAST_SCOPE : Option<Ipv6MulticastScope> = IP_ADDRESS.multicast_scope();\n+    assert_eq!(MULTICAST_SCOPE, None);\n+\n+    const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+\n+    const IP_V4 : Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n+    assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n+}\n\\ No newline at end of file"}]}