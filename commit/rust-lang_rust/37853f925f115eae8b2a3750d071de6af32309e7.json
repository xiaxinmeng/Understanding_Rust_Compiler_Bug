{"sha": "37853f925f115eae8b2a3750d071de6af32309e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODUzZjkyNWYxMTVlYWU4YjJhMzc1MGQwNzFkZTZhZjMyMzA5ZTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T20:00:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-08T07:07:55Z"}, "message": "Visit ForeignItems when marking dead code.", "tree": {"sha": "84ad2b1476f5903b348ba8fdb429399757e352f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84ad2b1476f5903b348ba8fdb429399757e352f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37853f925f115eae8b2a3750d071de6af32309e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37853f925f115eae8b2a3750d071de6af32309e7", "html_url": "https://github.com/rust-lang/rust/commit/37853f925f115eae8b2a3750d071de6af32309e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37853f925f115eae8b2a3750d071de6af32309e7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "html_url": "https://github.com/rust-lang/rust/commit/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "bbd6b9b505fb49bfe146135290c5e57b7ce77ad9", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/37853f925f115eae8b2a3750d071de6af32309e7/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37853f925f115eae8b2a3750d071de6af32309e7/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=37853f925f115eae8b2a3750d071de6af32309e7", "patch": "@@ -396,24 +396,6 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Trait(.., trait_item_refs) => {\n-                for trait_item_ref in trait_item_refs {\n-                    let trait_item = self.krate.trait_item(trait_item_ref.id);\n-                    match trait_item.kind {\n-                        hir::TraitItemKind::Const(_, Some(_))\n-                        | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => {\n-                            if has_allow_dead_code_or_lang_attr(\n-                                self.tcx,\n-                                trait_item.hir_id,\n-                                &trait_item.attrs,\n-                            ) {\n-                                self.worklist.push(trait_item.hir_id);\n-                            }\n-                        }\n-                        _ => {}\n-                    }\n-                }\n-            }\n             hir::ItemKind::Impl { ref of_trait, items, .. } => {\n                 if of_trait.is_some() {\n                     self.worklist.push(item.hir_id);\n@@ -440,15 +422,37 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _item: &hir::TraitItem<'_>) {\n-        // ignore: we are handling this in `visit_item` above\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n+        match trait_item.kind {\n+            hir::TraitItemKind::Const(_, Some(_))\n+            | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => {\n+                if has_allow_dead_code_or_lang_attr(self.tcx, trait_item.hir_id, &trait_item.attrs)\n+                {\n+                    self.worklist.push(trait_item.hir_id);\n+                }\n+            }\n+            _ => {}\n+        }\n     }\n \n     fn visit_impl_item(&mut self, _item: &hir::ImplItem<'_>) {\n         // ignore: we are handling this in `visit_item` above\n     }\n \n-    fn visit_foreign_item(&mut self, _item: &'v hir::ForeignItem<'v>) {}\n+    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n+        match foreign_item.kind {\n+            hir::ForeignItemKind::Static(..) | hir::ForeignItemKind::Fn(..) => {\n+                if has_allow_dead_code_or_lang_attr(\n+                    self.tcx,\n+                    foreign_item.hir_id,\n+                    &foreign_item.attrs,\n+                ) {\n+                    self.worklist.push(foreign_item.hir_id);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n }\n \n fn create_and_seed_worklist<'tcx>("}, {"sha": "b6c593f316f05ac6efce5a0dc88aaec978f2161b", "filename": "src/test/ui/lint/dead-code/type-in-foreign.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37853f925f115eae8b2a3750d071de6af32309e7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37853f925f115eae8b2a3750d071de6af32309e7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-in-foreign.rs?ref=37853f925f115eae8b2a3750d071de6af32309e7", "patch": "@@ -0,0 +1,19 @@\n+// Verify that we do not warn on types that are used by foreign functions.\n+// check-pass\n+#![deny(dead_code)]\n+\n+#[repr(C)]\n+struct Type(u8);\n+\n+#[repr(C)]\n+struct Param(u8);\n+\n+extern \"C\" {\n+    #[allow(dead_code)]\n+    fn hey(t: Param);\n+\n+    #[allow(dead_code)]\n+    static much: Type;\n+}\n+\n+fn main() {}"}]}