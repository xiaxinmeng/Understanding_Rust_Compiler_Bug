{"sha": "0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzdiM2EwZmM2ZDYyY2QxNDAxMzIwYzUzZmViNTFhNThlYTA5YTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-22T15:31:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T15:31:47Z"}, "message": "Merge #7353\n\n7353: Add LifetimeParam and ConstParam to CompletionItemKind r=matklad a=Veykril\n\nAdds `LifetimeParam` and `ConstParam` to `CompletionItemKind` and maps them both to `TypeParam` in the protocol conversion as there are no equivalents, so nothing really changes there.\r\n`ConstParam` could be mapped to `Const` I guess but I'm split on whether that would be better?\r\n\r\nAdditions were solely inspired by (the single) test output for const params.\r\n\r\nAlso sorts the variants of `CompletionItemKind` and its to_proto match.\r\n\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "3798ba62e958b1c3642c30e4fab13011171b4837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3798ba62e958b1c3642c30e4fab13011171b4837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCu/kCRBK7hj4Ov3rIwAAdHIIAK3nQjh5PYlnH9L7bX0FgF3r\nMhCH7YvyLdotvuc5k0SED3jvtANYnp/TqSkC42OB/JZ7RUHW2DN+Aev3y1NuEGWV\npvoAXixYWCPu1rcs1eh0nbfYbLyL2UqWOz3PclndF1Q4lVhqWJ28zE+DeMYrXics\ncy594momz+Rc40L+uVbwisV7AS+EnqBW12S/DXdpkXyNBlylQgLe9iouiEmG+qr/\nMZJ6SqfOMAOUNxkn7RZF4RB7V+eAT7lVlIcMErJAuJqpdAmfwseJFPidKMo3i4eB\nXisd/A4RHbuWcaO9vIxRuMs0VsyQkiLH6YniUBJOQ7V344TczNAD9+/0lg0cvD8=\n=k5Bf\n-----END PGP SIGNATURE-----\n", "payload": "tree 3798ba62e958b1c3642c30e4fab13011171b4837\nparent a5322e3d5b813e4bce7a73762c14bebbd9a36e01\nparent 08b822b25914bea7405a30383fe43c7235d14346\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611329507 +0000\ncommitter GitHub <noreply@github.com> 1611329507 +0000\n\nMerge #7353\n\n7353: Add LifetimeParam and ConstParam to CompletionItemKind r=matklad a=Veykril\n\nAdds `LifetimeParam` and `ConstParam` to `CompletionItemKind` and maps them both to `TypeParam` in the protocol conversion as there are no equivalents, so nothing really changes there.\r\n`ConstParam` could be mapped to `Const` I guess but I'm split on whether that would be better?\r\n\r\nAdditions were solely inspired by (the single) test output for const params.\r\n\r\nAlso sorts the variants of `CompletionItemKind` and its to_proto match.\r\n\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "html_url": "https://github.com/rust-lang/rust/commit/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5322e3d5b813e4bce7a73762c14bebbd9a36e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5322e3d5b813e4bce7a73762c14bebbd9a36e01", "html_url": "https://github.com/rust-lang/rust/commit/a5322e3d5b813e4bce7a73762c14bebbd9a36e01"}, {"sha": "08b822b25914bea7405a30383fe43c7235d14346", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b822b25914bea7405a30383fe43c7235d14346", "html_url": "https://github.com/rust-lang/rust/commit/08b822b25914bea7405a30383fe43c7235d14346"}], "stats": {"total": 389, "additions": 225, "deletions": 164}, "files": [{"sha": "38e33a93e8d902a5e626321211bdd5622f98fa90", "filename": "crates/completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n     match_ast, AstNode,\n };\n \n-use crate::{CompletionContext, CompletionItem, CompletionKind, Completions};\n+use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n@@ -58,7 +58,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n         })\n         .for_each(|(label, lookup)| {\n             CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n-                .kind(crate::CompletionItemKind::Binding)\n+                .kind(CompletionItemKind::Binding)\n                 .lookup_by(lookup)\n                 .add_to(acc)\n         });"}, {"sha": "352fc7c777db49f41974afdbdecc3deabba6762c", "filename": "crates/completion/src/completions/mod_.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -3,11 +3,13 @@\n use std::iter;\n \n use hir::{Module, ModuleSource};\n-use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::{SourceDatabaseExt, VfsPath},\n+    RootDatabase, SymbolKind,\n+};\n use rustc_hash::FxHashSet;\n \n-use crate::{CompletionItem, CompletionItemKind};\n+use crate::CompletionItem;\n \n use crate::{context::CompletionContext, item::CompletionKind, Completions};\n \n@@ -79,7 +81,7 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n                 label.push(';');\n             }\n             CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n-                .kind(CompletionItemKind::Module)\n+                .kind(SymbolKind::Module)\n                 .add_to(acc)\n         });\n "}, {"sha": "0a7927eb8340b025b78948503dbfac3a8fe0d06f", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,10 +1,8 @@\n //! Complete fields in record literals and patterns.\n-use ide_db::helpers::FamousDefs;\n+use ide_db::{helpers::FamousDefs, SymbolKind};\n use syntax::ast::Expr;\n \n-use crate::{\n-    item::CompletionKind, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n-};\n+use crate::{item::CompletionKind, CompletionContext, CompletionItem, Completions};\n \n pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let missing_fields = match (ctx.record_pat_syntax.as_ref(), ctx.record_lit_syntax.as_ref()) {\n@@ -31,7 +29,7 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                         \"..Default::default()\",\n                     )\n                     .insert_text(completion_text)\n-                    .kind(CompletionItemKind::Field)\n+                    .kind(SymbolKind::Field)\n                     .build(),\n                 );\n             }"}, {"sha": "f258ad9c3f038119897a7e459862c795c3222a38", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -32,7 +32,7 @@\n //! ```\n \n use hir::{self, HasAttrs, HasSource};\n-use ide_db::traits::get_missing_assoc_items;\n+use ide_db::{traits::get_missing_assoc_items, SymbolKind};\n use syntax::{\n     ast::{self, edit, Impl},\n     display::function_declaration,\n@@ -152,7 +152,7 @@ fn add_function_impl(\n     let completion_kind = if func.self_param(ctx.db).is_some() {\n         CompletionItemKind::Method\n     } else {\n-        CompletionItemKind::Function\n+        CompletionItemKind::SymbolKind(SymbolKind::Function)\n     };\n     let range = TextRange::new(fn_def_node.text_range().start(), ctx.source_range().end());\n \n@@ -188,7 +188,7 @@ fn add_type_alias_impl(\n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n         .text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n-        .kind(CompletionItemKind::TypeAlias)\n+        .kind(SymbolKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db))\n         .add_to(acc);\n }\n@@ -211,7 +211,7 @@ fn add_const_impl(\n             CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n                 .text_edit(TextEdit::replace(range, snippet))\n                 .lookup_by(const_name)\n-                .kind(CompletionItemKind::Const)\n+                .kind(SymbolKind::Const)\n                 .set_documentation(const_.docs(ctx.db))\n                 .add_to(acc);\n         }"}, {"sha": "a289efc34eb9a37b11432a6ad7a163c2608e3560", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -165,8 +165,8 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n             \"#]],\n         );\n@@ -187,8 +187,8 @@ fn quux() {\n }\n \"#,\n             expect![[r#\"\n-                bn b      i32\n-                bn a\n+                lc b      i32\n+                lc a\n                 fn quux() fn quux()\n             \"#]],\n         );\n@@ -203,7 +203,7 @@ fn quux() {\n }\n \"#,\n             expect![[r#\"\n-                bn x\n+                lc x\n                 fn quux() fn quux()\n             \"#]],\n         );\n@@ -241,7 +241,7 @@ fn main() {\n         check(\n             r#\"fn quux<const C: usize>() { $0 }\"#,\n             expect![[r#\"\n-                tp C\n+                cp C\n                 fn quux() fn quux<const C: usize>()\n             \"#]],\n         );\n@@ -263,7 +263,7 @@ fn main() {\n         check(\n             r#\"struct S<T> { x: $0}\"#,\n             expect![[r#\"\n-                tp Self\n+                sp Self\n                 tp T\n                 st S<\u2026>\n             \"#]],\n@@ -275,7 +275,7 @@ fn main() {\n         check(\n             r#\"enum X { Y($0) }\"#,\n             expect![[r#\"\n-                tp Self\n+                sp Self\n                 en X\n             \"#]],\n         );\n@@ -378,8 +378,8 @@ fn foo() {\n \"#,\n             // FIXME: should be only one bar here\n             expect![[r#\"\n-                bn bar   i32\n-                bn bar   i32\n+                lc bar   i32\n+                lc bar   i32\n                 fn foo() fn foo()\n             \"#]],\n         );\n@@ -390,8 +390,8 @@ fn foo() {\n         check(\n             r#\"impl S { fn foo(&self) { $0 } }\"#,\n             expect![[r#\"\n-                bn self &{unknown}\n-                tp Self\n+                lc self &{unknown}\n+                sp Self\n             \"#]],\n         );\n     }\n@@ -575,8 +575,8 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n@@ -594,8 +594,8 @@ fn quux(x: i32) {\n }\n \",\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n@@ -613,8 +613,8 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n@@ -750,7 +750,7 @@ struct MyStruct {}\n impl My$0\n \"#,\n             expect![[r#\"\n-                tp Self\n+                sp Self\n                 tt MyTrait\n                 st MyStruct\n             \"#]],"}, {"sha": "d2e6a6aeb4fb2e1ada6208be9cf9138091b6b69b", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -3,11 +3,14 @@\n use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n-use ide_db::helpers::{\n-    insert_use::{self, ImportScope, MergeBehavior},\n-    mod_path_to_ast, SnippetCap,\n+use ide_db::{\n+    helpers::{\n+        insert_use::{self, ImportScope, MergeBehavior},\n+        mod_path_to_ast, SnippetCap,\n+    },\n+    SymbolKind,\n };\n-use stdx::assert_never;\n+use stdx::{assert_never, impl_from};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n@@ -117,49 +120,50 @@ pub enum CompletionScore {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum CompletionItemKind {\n-    Snippet,\n-    Keyword,\n-    Module,\n-    Function,\n-    BuiltinType,\n-    Struct,\n-    Enum,\n-    EnumVariant,\n+    SymbolKind(SymbolKind),\n+    Attribute,\n     Binding,\n-    Field,\n-    Static,\n-    Const,\n-    Trait,\n-    TypeAlias,\n+    BuiltinType,\n+    Keyword,\n     Method,\n-    TypeParam,\n-    Macro,\n-    Attribute,\n+    Snippet,\n     UnresolvedReference,\n }\n \n+impl_from!(SymbolKind for CompletionItemKind);\n+\n impl CompletionItemKind {\n     #[cfg(test)]\n     pub(crate) fn tag(&self) -> &'static str {\n         match self {\n+            CompletionItemKind::SymbolKind(kind) => match kind {\n+                SymbolKind::Const => \"ct\",\n+                SymbolKind::ConstParam => \"cp\",\n+                SymbolKind::Enum => \"en\",\n+                SymbolKind::Field => \"fd\",\n+                SymbolKind::Function => \"fn\",\n+                SymbolKind::Impl => \"im\",\n+                SymbolKind::Label => \"lb\",\n+                SymbolKind::LifetimeParam => \"lt\",\n+                SymbolKind::Local => \"lc\",\n+                SymbolKind::Macro => \"ma\",\n+                SymbolKind::Module => \"md\",\n+                SymbolKind::SelfParam => \"sp\",\n+                SymbolKind::Static => \"sc\",\n+                SymbolKind::Struct => \"st\",\n+                SymbolKind::Trait => \"tt\",\n+                SymbolKind::TypeAlias => \"ta\",\n+                SymbolKind::TypeParam => \"tp\",\n+                SymbolKind::Union => \"un\",\n+                SymbolKind::ValueParam => \"vp\",\n+                SymbolKind::Variant => \"ev\",\n+            },\n             CompletionItemKind::Attribute => \"at\",\n             CompletionItemKind::Binding => \"bn\",\n             CompletionItemKind::BuiltinType => \"bt\",\n-            CompletionItemKind::Const => \"ct\",\n-            CompletionItemKind::Enum => \"en\",\n-            CompletionItemKind::EnumVariant => \"ev\",\n-            CompletionItemKind::Field => \"fd\",\n-            CompletionItemKind::Function => \"fn\",\n             CompletionItemKind::Keyword => \"kw\",\n-            CompletionItemKind::Macro => \"ma\",\n             CompletionItemKind::Method => \"me\",\n-            CompletionItemKind::Module => \"md\",\n             CompletionItemKind::Snippet => \"sn\",\n-            CompletionItemKind::Static => \"sc\",\n-            CompletionItemKind::Struct => \"st\",\n-            CompletionItemKind::Trait => \"tt\",\n-            CompletionItemKind::TypeAlias => \"ta\",\n-            CompletionItemKind::TypeParam => \"tp\",\n             CompletionItemKind::UnresolvedReference => \"??\",\n         }\n     }\n@@ -382,8 +386,8 @@ impl Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.insert_text(snippet)\n     }\n-    pub(crate) fn kind(mut self, kind: CompletionItemKind) -> Builder {\n-        self.kind = Some(kind);\n+    pub(crate) fn kind(mut self, kind: impl Into<CompletionItemKind>) -> Builder {\n+        self.kind = Some(kind.into());\n         self\n     }\n     pub(crate) fn text_edit(mut self, edit: TextEdit) -> Builder {"}, {"sha": "fa594b5e527bd704b25cc0f67f1f21976eda81b4", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 73, "deletions": 34, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -13,7 +13,7 @@ mod builder_ext;\n use hir::{\n     AsAssocItem, Documentation, HasAttrs, HirDisplay, ModuleDef, Mutability, ScopeDef, Type,\n };\n-use ide_db::{helpers::SnippetCap, RootDatabase};\n+use ide_db::{helpers::SnippetCap, RootDatabase, SymbolKind};\n use syntax::TextRange;\n use test_utils::mark;\n \n@@ -146,7 +146,7 @@ impl<'a> Render<'a> {\n             self.ctx.source_range(),\n             name.to_string(),\n         )\n-        .kind(CompletionItemKind::Field)\n+        .kind(SymbolKind::Field)\n         .detail(ty.display(self.ctx.db()).to_string())\n         .set_documentation(field.docs(self.ctx.db()))\n         .set_deprecated(is_deprecated);\n@@ -160,7 +160,7 @@ impl<'a> Render<'a> {\n \n     fn add_tuple_field(&mut self, field: usize, ty: &Type) -> CompletionItem {\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), field.to_string())\n-            .kind(CompletionItemKind::Field)\n+            .kind(SymbolKind::Field)\n             .detail(ty.display(self.ctx.db()).to_string())\n             .build()\n     }\n@@ -187,7 +187,7 @@ impl<'a> Render<'a> {\n                 if self.ctx.completion.is_pat_binding_or_const\n                     | self.ctx.completion.is_irrefutable_pat_binding =>\n             {\n-                CompletionItemKind::EnumVariant\n+                CompletionItemKind::SymbolKind(SymbolKind::Variant)\n             }\n             ScopeDef::ModuleDef(Variant(var)) => {\n                 let item = render_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n@@ -198,20 +198,29 @@ impl<'a> Render<'a> {\n                 return item;\n             }\n \n-            ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::Module,\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Struct(_))) => CompletionItemKind::Struct,\n-            // FIXME: add CompletionItemKind::Union\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Union(_))) => CompletionItemKind::Struct,\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Enum(_))) => CompletionItemKind::Enum,\n-            ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::Const,\n-            ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::Static,\n-            ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::Trait,\n-            ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::TypeAlias,\n+            ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::SymbolKind(SymbolKind::Module),\n+            ScopeDef::ModuleDef(Adt(adt)) => CompletionItemKind::SymbolKind(match adt {\n+                hir::Adt::Struct(_) => SymbolKind::Struct,\n+                // FIXME: add CompletionItemKind::Union\n+                hir::Adt::Union(_) => SymbolKind::Struct,\n+                hir::Adt::Enum(_) => SymbolKind::Enum,\n+            }),\n+            ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::SymbolKind(SymbolKind::Const),\n+            ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::SymbolKind(SymbolKind::Static),\n+            ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::SymbolKind(SymbolKind::Trait),\n+            ScopeDef::ModuleDef(TypeAlias(..)) => {\n+                CompletionItemKind::SymbolKind(SymbolKind::TypeAlias)\n+            }\n             ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n-            ScopeDef::GenericParam(..) => CompletionItemKind::TypeParam,\n-            ScopeDef::Local(..) => CompletionItemKind::Binding,\n-            // (does this need its own kind?)\n-            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n+            ScopeDef::GenericParam(param) => CompletionItemKind::SymbolKind(match param {\n+                hir::GenericParam::TypeParam(_) => SymbolKind::TypeParam,\n+                hir::GenericParam::LifetimeParam(_) => SymbolKind::LifetimeParam,\n+                hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n+            }),\n+            ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n+            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n+                CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n+            }\n             ScopeDef::Unknown => {\n                 let item = CompletionItem::new(\n                     CompletionKind::Reference,\n@@ -400,7 +409,9 @@ fn main() { Foo::Fo$0 }\n                         source_range: 54..56,\n                         delete: 54..56,\n                         insert: \"Foo\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: \"{ x: i32, y: i32 }\",\n                     },\n                 ]\n@@ -423,7 +434,9 @@ fn main() { Foo::Fo$0 }\n                         source_range: 46..48,\n                         delete: 46..48,\n                         insert: \"Foo($0)\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         lookup: \"Foo\",\n                         detail: \"(i32, i32)\",\n                         trigger_call_info: true,\n@@ -448,7 +461,9 @@ fn main() { Foo::Fo$0 }\n                         source_range: 35..37,\n                         delete: 35..37,\n                         insert: \"Foo\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: \"()\",\n                     },\n                 ]\n@@ -472,7 +487,9 @@ fn main() { let _: m::Spam = S$0 }\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"Spam::Bar($0)\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         lookup: \"Spam::Bar\",\n                         detail: \"(i32)\",\n                         trigger_call_info: true,\n@@ -482,14 +499,18 @@ fn main() { let _: m::Spam = S$0 }\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"m\",\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                     },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"m::Spam::Foo\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         lookup: \"Spam::Foo\",\n                         detail: \"()\",\n                     },\n@@ -498,7 +519,9 @@ fn main() { let _: m::Spam = S$0 }\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"main()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"main\",\n                         detail: \"fn main()\",\n                     },\n@@ -525,7 +548,9 @@ fn main() { som$0 }\n                         source_range: 127..130,\n                         delete: 127..130,\n                         insert: \"main()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"main\",\n                         detail: \"fn main()\",\n                     },\n@@ -534,7 +559,9 @@ fn main() { som$0 }\n                         source_range: 127..130,\n                         delete: 127..130,\n                         insert: \"something_deprecated()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"something_deprecated\",\n                         detail: \"fn something_deprecated()\",\n                         deprecated: true,\n@@ -544,7 +571,9 @@ fn main() { som$0 }\n                         source_range: 127..130,\n                         delete: 127..130,\n                         insert: \"something_else_deprecated()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"something_else_deprecated\",\n                         detail: \"fn something_else_deprecated()\",\n                         deprecated: true,\n@@ -565,7 +594,9 @@ fn foo() { A { the$0 } }\n                         source_range: 57..60,\n                         delete: 57..60,\n                         insert: \"the_field\",\n-                        kind: Field,\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n                         detail: \"u32\",\n                         deprecated: true,\n                     },\n@@ -605,7 +636,9 @@ impl S {\n                         source_range: 94..94,\n                         delete: 94..94,\n                         insert: \"foo\",\n-                        kind: Field,\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n                         detail: \"{unknown}\",\n                         documentation: Documentation(\n                             \"Field docs\",\n@@ -636,7 +669,9 @@ use self::E::*;\n                         source_range: 10..12,\n                         delete: 10..12,\n                         insert: \"E\",\n-                        kind: Enum,\n+                        kind: SymbolKind(\n+                            Enum,\n+                        ),\n                         documentation: Documentation(\n                             \"enum docs\",\n                         ),\n@@ -646,7 +681,9 @@ use self::E::*;\n                         source_range: 10..12,\n                         delete: 10..12,\n                         insert: \"V\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: \"()\",\n                         documentation: Documentation(\n                             \"variant docs\",\n@@ -657,7 +694,9 @@ use self::E::*;\n                         source_range: 10..12,\n                         delete: 10..12,\n                         insert: \"my\",\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                         documentation: Documentation(\n                             \"mod docs\",\n                         ),\n@@ -883,7 +922,7 @@ struct WorldSnapshot { _f: () };\n fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n-                bn world [type+name]\n+                lc world [type+name]\n                 st WorldSnapshot []\n                 fn go(\u2026) []\n             \"#]],\n@@ -900,7 +939,7 @@ fn f(foo: &Foo) { f(foo, w$0) }\n             expect![[r#\"\n                 st Foo []\n                 fn f(\u2026) []\n-                bn foo []\n+                lc foo []\n             \"#]],\n         );\n     }"}, {"sha": "5010b642a3ef92cd36219b6b2dc8ebfa13566391", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,13 +1,14 @@\n //! Renderer for `const` fields.\n \n use hir::HasSource;\n+use ide_db::SymbolKind;\n use syntax::{\n     ast::{Const, NameOwner},\n     display::const_label,\n };\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionKind},\n     render::RenderContext,\n };\n \n@@ -36,7 +37,7 @@ impl<'a> ConstRender<'a> {\n         let detail = self.detail();\n \n         let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n-            .kind(CompletionItemKind::Const)\n+            .kind(SymbolKind::Const)\n             .set_documentation(self.ctx.docs(self.const_))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.const_)"}, {"sha": "adcddebd13fa0ff8b5cf994071d04faad52d2bb1", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,11 +1,12 @@\n //! Renderer for `enum` variants.\n \n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n+use ide_db::SymbolKind;\n use itertools::Itertools;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n+    item::{CompletionItem, CompletionKind, ImportEdit},\n     render::{builder_ext::Params, RenderContext},\n };\n \n@@ -60,7 +61,7 @@ impl<'a> EnumRender<'a> {\n             self.ctx.source_range(),\n             self.qualified_name.clone(),\n         )\n-        .kind(CompletionItemKind::EnumVariant)\n+        .kind(SymbolKind::Variant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n         .add_import(import_to_add)"}, {"sha": "2d616b1fb5483d622f6433d7743e0c8779fc3fb6", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,6 +1,7 @@\n //! Renderer for function calls.\n \n use hir::{HasSource, Type};\n+use ide_db::SymbolKind;\n use syntax::{ast::Fn, display::function_declaration};\n use test_utils::mark;\n \n@@ -105,7 +106,7 @@ impl<'a> FunctionRender<'a> {\n         if self.func.self_param(self.ctx.db()).is_some() {\n             CompletionItemKind::Method\n         } else {\n-            CompletionItemKind::Function\n+            SymbolKind::Function.into()\n         }\n     }\n }"}, {"sha": "a4535786f2e9b81305fd92c9a9c94753fc850428", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,11 +1,12 @@\n //! Renderer for macro invocations.\n \n use hir::{Documentation, HasSource};\n+use ide_db::SymbolKind;\n use syntax::display::macro_label;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n+    item::{CompletionItem, CompletionKind, ImportEdit},\n     render::RenderContext,\n };\n \n@@ -41,7 +42,7 @@ impl<'a> MacroRender<'a> {\n     fn render(&self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n         let mut builder =\n             CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), &self.label())\n-                .kind(CompletionItemKind::Macro)\n+                .kind(SymbolKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n                 .add_import(import_to_add)"}, {"sha": "bd97c3692de384ff056b7d32b47af9e0c697abbc", "filename": "crates/completion/src/render/type_alias.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,13 +1,14 @@\n //! Renderer for type aliases.\n \n use hir::HasSource;\n+use ide_db::SymbolKind;\n use syntax::{\n     ast::{NameOwner, TypeAlias},\n     display::type_label,\n };\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionKind},\n     render::RenderContext,\n };\n \n@@ -36,7 +37,7 @@ impl<'a> TypeAliasRender<'a> {\n         let detail = self.detail();\n \n         let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n-            .kind(CompletionItemKind::TypeAlias)\n+            .kind(SymbolKind::TypeAlias)\n             .set_documentation(self.ctx.docs(self.type_alias))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.type_alias)"}, {"sha": "16fa828ad31b205a62f420d90db8bba4e0db57ff", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -7,6 +7,7 @@ use hir::{AssocItem, Documentation, FieldSource, HasAttrs, HasSource, InFile, Mo\n use ide_db::{\n     base_db::{FileId, FileRange, SourceDatabase},\n     symbol_index::FileSymbolKind,\n+    SymbolKind,\n };\n use ide_db::{defs::Definition, RootDatabase};\n use syntax::{\n@@ -18,30 +19,6 @@ use crate::FileSymbol;\n \n use super::short_label::ShortLabel;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub enum SymbolKind {\n-    Module,\n-    Impl,\n-    Field,\n-    TypeParam,\n-    ConstParam,\n-    LifetimeParam,\n-    ValueParam,\n-    SelfParam,\n-    Local,\n-    Label,\n-    Function,\n-    Const,\n-    Static,\n-    Struct,\n-    Enum,\n-    Variant,\n-    Union,\n-    TypeAlias,\n-    Trait,\n-    Macro,\n-}\n-\n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n ///"}, {"sha": "26793bdb441455672a63e90091d929c69e5a27f7", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,10 +1,9 @@\n+use ide_db::SymbolKind;\n use syntax::{\n     ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n     match_ast, AstNode, SourceFile, SyntaxNode, TextRange, WalkEvent,\n };\n \n-use crate::SymbolKind;\n-\n #[derive(Debug, Clone)]\n pub struct StructureNode {\n     pub parent: Option<usize>,"}, {"sha": "989e94a31fcd1de302531324d80b6601c8a396e5", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -65,7 +65,7 @@ use crate::display::ToNav;\n pub use crate::{\n     call_hierarchy::CallItem,\n     diagnostics::{Diagnostic, DiagnosticsConfig, Fix, Severity},\n-    display::navigation_target::{NavigationTarget, SymbolKind},\n+    display::navigation_target::NavigationTarget,\n     expand_macro::ExpandedMacro,\n     file_structure::StructureNode,\n     folding_ranges::{Fold, FoldKind},"}, {"sha": "33170906d8670a7f4e15583651ca0d254464dc60", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use assists::utils::test_related_attribute;\n use cfg::CfgExpr;\n use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n-use ide_db::{defs::Definition, RootDatabase};\n+use ide_db::{defs::Definition, RootDatabase, SymbolKind};\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -13,7 +13,7 @@ use test_utils::mark;\n \n use crate::{\n     display::{ToNav, TryToNav},\n-    FileId, NavigationTarget, SymbolKind,\n+    FileId, NavigationTarget,\n };\n \n #[derive(Debug, Clone)]"}, {"sha": "a3d4e4f77ad9de7f5324917958a480daa9002761", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -13,7 +13,7 @@ mod html;\n mod tests;\n \n use hir::{Name, Semantics};\n-use ide_db::RootDatabase;\n+use ide_db::{RootDatabase, SymbolKind};\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{self, HasFormatSpecifier},\n@@ -27,7 +27,7 @@ use crate::{\n         format::highlight_format_string, highlights::Highlights,\n         macro_rules::MacroRulesHighlighter, tags::Highlight,\n     },\n-    FileId, HlMod, HlTag, SymbolKind,\n+    FileId, HlMod, HlTag,\n };\n \n pub(crate) use html::highlight_as_html;"}, {"sha": "8c67a0863c1d55b2c1f5653e2afbb5bea12a8bbe", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -1,10 +1,11 @@\n //! Syntax highlighting for format macro strings.\n+use ide_db::SymbolKind;\n use syntax::{\n     ast::{self, FormatSpecifier, HasFormatSpecifier},\n     AstNode, AstToken, TextRange,\n };\n \n-use crate::{syntax_highlighting::highlights::Highlights, HlRange, HlTag, SymbolKind};\n+use crate::{syntax_highlighting::highlights::Highlights, HlRange, HlTag};\n \n pub(super) fn highlight_format_string(\n     stack: &mut Highlights,"}, {"sha": "24fcbb5845a7dc4913b67a130ffa43456a34ce71", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, Semantics, VariantDef};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n-    RootDatabase,\n+    RootDatabase, SymbolKind,\n };\n use rustc_hash::FxHashMap;\n use syntax::{\n@@ -12,7 +12,7 @@ use syntax::{\n     SyntaxNode, SyntaxToken, T,\n };\n \n-use crate::{syntax_highlighting::tags::HlPunct, Highlight, HlMod, HlTag, SymbolKind};\n+use crate::{syntax_highlighting::tags::HlPunct, Highlight, HlMod, HlTag};\n \n pub(super) fn element(\n     sema: &Semantics<RootDatabase>,"}, {"sha": "3c02fdb1151fb24707be8bef662cac479803e551", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -3,7 +3,7 @@\n \n use std::{fmt, ops};\n \n-use crate::SymbolKind;\n+use ide_db::SymbolKind;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Highlight {"}, {"sha": "6eb34b06b7c01c2bcab4eca8628f5beb56dc53bf", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -134,3 +134,27 @@ fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n     let text = db.file_text(file_id);\n     Arc::new(LineIndex::new(&*text))\n }\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub enum SymbolKind {\n+    Const,\n+    ConstParam,\n+    Enum,\n+    Field,\n+    Function,\n+    Impl,\n+    Label,\n+    LifetimeParam,\n+    Local,\n+    Macro,\n+    Module,\n+    SelfParam,\n+    Static,\n+    Struct,\n+    Trait,\n+    TypeAlias,\n+    TypeParam,\n+    Union,\n+    ValueParam,\n+    Variant,\n+}"}, {"sha": "809452e6d04f97d20671007418c830ffc0229802", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -10,8 +10,9 @@ use std::{\n \n use ide::{\n     FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, LineIndex, NavigationTarget,\n-    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, SymbolKind, TextEdit,\n+    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n };\n+use ide_db::SymbolKind;\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{"}, {"sha": "96f915f1ce7f4c0a8081ef09c7b414ccd9b15be9", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c37b3a0fc6d62cd1401320c53feb51a58ea09a6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0c37b3a0fc6d62cd1401320c53feb51a58ea09a6", "patch": "@@ -8,8 +8,9 @@ use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation, FileId,\n     FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlPunct, HlRange, HlTag, Indel,\n     InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget, ReferenceAccess,\n-    RenameError, Runnable, Severity, SourceChange, SymbolKind, TextEdit, TextRange, TextSize,\n+    RenameError, Runnable, Severity, SourceChange, TextEdit, TextRange, TextSize,\n };\n+use ide_db::SymbolKind;\n use itertools::Itertools;\n \n use crate::{\n@@ -87,25 +88,35 @@ pub(crate) fn completion_item_kind(\n     completion_item_kind: CompletionItemKind,\n ) -> lsp_types::CompletionItemKind {\n     match completion_item_kind {\n-        CompletionItemKind::Keyword => lsp_types::CompletionItemKind::Keyword,\n-        CompletionItemKind::Snippet => lsp_types::CompletionItemKind::Snippet,\n-        CompletionItemKind::Module => lsp_types::CompletionItemKind::Module,\n-        CompletionItemKind::Function => lsp_types::CompletionItemKind::Function,\n-        CompletionItemKind::Struct => lsp_types::CompletionItemKind::Struct,\n-        CompletionItemKind::Enum => lsp_types::CompletionItemKind::Enum,\n-        CompletionItemKind::EnumVariant => lsp_types::CompletionItemKind::EnumMember,\n-        CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::Struct,\n+        CompletionItemKind::Attribute => lsp_types::CompletionItemKind::EnumMember,\n         CompletionItemKind::Binding => lsp_types::CompletionItemKind::Variable,\n-        CompletionItemKind::Field => lsp_types::CompletionItemKind::Field,\n-        CompletionItemKind::Trait => lsp_types::CompletionItemKind::Interface,\n-        CompletionItemKind::TypeAlias => lsp_types::CompletionItemKind::Struct,\n-        CompletionItemKind::Const => lsp_types::CompletionItemKind::Constant,\n-        CompletionItemKind::Static => lsp_types::CompletionItemKind::Value,\n+        CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::Struct,\n+        CompletionItemKind::Keyword => lsp_types::CompletionItemKind::Keyword,\n         CompletionItemKind::Method => lsp_types::CompletionItemKind::Method,\n-        CompletionItemKind::TypeParam => lsp_types::CompletionItemKind::TypeParameter,\n-        CompletionItemKind::Macro => lsp_types::CompletionItemKind::Method,\n-        CompletionItemKind::Attribute => lsp_types::CompletionItemKind::EnumMember,\n+        CompletionItemKind::Snippet => lsp_types::CompletionItemKind::Snippet,\n         CompletionItemKind::UnresolvedReference => lsp_types::CompletionItemKind::Reference,\n+        CompletionItemKind::SymbolKind(symbol) => match symbol {\n+            SymbolKind::Const => lsp_types::CompletionItemKind::Constant,\n+            SymbolKind::ConstParam => lsp_types::CompletionItemKind::TypeParameter,\n+            SymbolKind::Enum => lsp_types::CompletionItemKind::Enum,\n+            SymbolKind::Field => lsp_types::CompletionItemKind::Field,\n+            SymbolKind::Function => lsp_types::CompletionItemKind::Function,\n+            SymbolKind::Impl => lsp_types::CompletionItemKind::Text,\n+            SymbolKind::Label => lsp_types::CompletionItemKind::Variable,\n+            SymbolKind::LifetimeParam => lsp_types::CompletionItemKind::TypeParameter,\n+            SymbolKind::Local => lsp_types::CompletionItemKind::Variable,\n+            SymbolKind::Macro => lsp_types::CompletionItemKind::Method,\n+            SymbolKind::Module => lsp_types::CompletionItemKind::Module,\n+            SymbolKind::SelfParam => lsp_types::CompletionItemKind::Value,\n+            SymbolKind::Static => lsp_types::CompletionItemKind::Value,\n+            SymbolKind::Struct => lsp_types::CompletionItemKind::Struct,\n+            SymbolKind::Trait => lsp_types::CompletionItemKind::Interface,\n+            SymbolKind::TypeAlias => lsp_types::CompletionItemKind::Struct,\n+            SymbolKind::TypeParam => lsp_types::CompletionItemKind::TypeParameter,\n+            SymbolKind::Union => lsp_types::CompletionItemKind::Struct,\n+            SymbolKind::ValueParam => lsp_types::CompletionItemKind::Value,\n+            SymbolKind::Variant => lsp_types::CompletionItemKind::EnumMember,\n+        },\n     }\n }\n "}]}