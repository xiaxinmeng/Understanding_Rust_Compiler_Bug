{"sha": "cae969e2a755bd7e8ec22758a8a02146ddb599a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZTk2OWUyYTc1NWJkN2U4ZWMyMjc1OGE4YTAyMTQ2ZGRiNTk5YTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-13T04:15:05Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-17T21:19:21Z"}, "message": "Remove the implicit `'static` bound on `Send`.\n\nPreviously Send was defined as `trait Send: 'static {}`. As detailed in\nhttps://github.com/rust-lang/rfcs/pull/458, the `'static` bound is not\nactually necessary for safety, we can use lifetimes to enforce that more\nflexibly.\n\n`unsafe` code that was previously relying on `Send` to insert a\n`'static` bound now may allow incorrect patterns, and so should be\naudited (a quick way to ensure safety immediately and postpone the audit\nis to add an explicit `'static` bound to any uses of the `Send` type).\n\ncc #22251.", "tree": {"sha": "e861a8a0c9cb6d40fa5bb3e3c40fa60bfa98b25a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e861a8a0c9cb6d40fa5bb3e3c40fa60bfa98b25a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae969e2a755bd7e8ec22758a8a02146ddb599a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae969e2a755bd7e8ec22758a8a02146ddb599a4", "html_url": "https://github.com/rust-lang/rust/commit/cae969e2a755bd7e8ec22758a8a02146ddb599a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae969e2a755bd7e8ec22758a8a02146ddb599a4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9aeea7cb7865a2b82e7102837daabbe549177ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9aeea7cb7865a2b82e7102837daabbe549177ea", "html_url": "https://github.com/rust-lang/rust/commit/f9aeea7cb7865a2b82e7102837daabbe549177ea"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "f5b42b3c8584409c5a5a22c0b83fcfc1a462dcbc", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae969e2a755bd7e8ec22758a8a02146ddb599a4/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae969e2a755bd7e8ec22758a8a02146ddb599a4/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=cae969e2a755bd7e8ec22758a8a02146ddb599a4", "patch": "@@ -32,9 +32,19 @@ use clone::Clone;\n            reason = \"will be overhauled with new lifetime rules; see RFC 458\")]\n #[lang=\"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n+#[cfg(stage0)] // SNAP ac134f7 remove after stage0\n pub unsafe trait Send: 'static {\n     // empty.\n }\n+/// Types able to be transferred across thread boundaries.\n+#[unstable(feature = \"core\",\n+           reason = \"will be overhauled with new lifetime rules; see RFC 458\")]\n+#[lang=\"send\"]\n+#[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n+#[cfg(not(stage0))]\n+pub unsafe trait Send {\n+    // empty.\n+}\n \n /// Types with a constant size known at compile-time.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "061557eb7dccd2311c51584170c41c308ade61d6", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cae969e2a755bd7e8ec22758a8a02146ddb599a4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae969e2a755bd7e8ec22758a8a02146ddb599a4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=cae969e2a755bd7e8ec22758a8a02146ddb599a4", "patch": "@@ -20,7 +20,7 @@ use self::EvaluationResult::*;\n use super::{DerivedObligationCause};\n use super::{project};\n use super::project::Normalized;\n-use super::{PredicateObligation, Obligation, TraitObligation, ObligationCause};\n+use super::{PredicateObligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n use super::{Selection};\n@@ -34,7 +34,7 @@ use super::{util};\n use middle::fast_reject;\n use middle::mem_categorization::Typer;\n use middle::subst::{Subst, Substs, TypeSpace, VecPerParamSpace};\n-use middle::ty::{self, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n use middle::ty_fold::TypeFoldable;\n@@ -1459,22 +1459,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                     ty::BoundSync |\n                     ty::BoundSend => {\n-                        // Note: technically, a region pointer is only\n-                        // sendable if it has lifetime\n-                        // `'static`. However, we don't take regions\n-                        // into account when doing trait matching:\n-                        // instead, when we decide that `T : Send`, we\n-                        // will register a separate constraint with\n-                        // the region inferencer that `T : 'static`\n-                        // holds as well (because the trait `Send`\n-                        // requires it). This will ensure that there\n-                        // is no borrowed data in `T` (or else report\n-                        // an inference error). The reason we do it\n-                        // this way is that we do not yet *know* what\n-                        // lifetime the borrowed reference has, since\n-                        // we haven't finished running inference -- in\n-                        // other words, there's a kind of\n-                        // chicken-and-egg problem.\n                         Ok(If(vec![referent_ty]))\n                     }\n                 }\n@@ -1817,21 +1801,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             })\n         }).collect::<Result<_, _>>();\n-        let mut obligations = match obligations {\n+        let obligations = match obligations {\n             Ok(o) => o,\n             Err(ErrorReported) => Vec::new()\n         };\n \n-        // as a special case, `Send` requires `'static`\n-        if bound == ty::BoundSend {\n-            obligations.push(Obligation {\n-                cause: obligation.cause.clone(),\n-                recursion_depth: obligation.recursion_depth+1,\n-                predicate: ty::Binder(ty::OutlivesPredicate(obligation.self_ty(),\n-                                                            ty::ReStatic)).as_predicate(),\n-            });\n-        }\n-\n         let obligations = VecPerParamSpace::new(obligations, Vec::new(), Vec::new());\n \n         debug!(\"vtable_builtin_data: obligations={}\","}, {"sha": "426101e858a8985e00b83c3618052c7d85d1888f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cae969e2a755bd7e8ec22758a8a02146ddb599a4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae969e2a755bd7e8ec22758a8a02146ddb599a4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=cae969e2a755bd7e8ec22758a8a02146ddb599a4", "patch": "@@ -697,9 +697,8 @@ impl<'tcx> UserString<'tcx> for ty::TyTrait<'tcx> {\n         }\n \n         // Region, if not obviously implied by builtin bounds.\n-        if bounds.region_bound != ty::ReStatic ||\n-            !bounds.builtin_bounds.contains(&ty::BoundSend)\n-        { // Region bound is implied by builtin bounds:\n+        if bounds.region_bound != ty::ReStatic {\n+            // Region bound is implied by builtin bounds:\n             components.push(bounds.region_bound.user_string(tcx));\n         }\n "}]}