{"sha": "4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOGQ5ZWE4MGZmOGQ3ZWM0ZGNjNmRhN2QzNmZlNjBlY2FhNTU1Mzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-04T00:16:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-04T00:16:52Z"}, "message": "Rollup merge of #73670 - davidhewitt:format-args-capture, r=varkor\n\nAdd `format_args_capture` feature\n\nThis is the initial implementation PR for [RFC 2795](https://github.com/rust-lang/rfcs/pull/2795).\n\nNote that, as dicussed in the tracking issue (#67984), the feature gate has been called `format_args_capture`.\n\nNext up I guess I need to add documentation for this feature. I've not written any docs before for rustc / std so I would appreciate suggestions on where I should add docs.", "tree": {"sha": "95dcbc65f6c216af2314d646227859c0573d4522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95dcbc65f6c216af2314d646227859c0573d4522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/8p0CRBK7hj4Ov3rIwAAdHIIAAnYxwMmpIkiz7ShqFV0lVvE\nfpEc5uMX4WPuyNLQPZGF4MxjrdzYDzG+6746U//waZFQXyAYOe3TrYjtxWZ4B40p\nWdrx/AehRMNU+n9Z+NYkbbKwtcWeCHhQ0NFOST+GTkD6i6NZ2JyRukDEYDcrxxr+\nXfO/eVi9zqctw1L+UKitZFOG/rukwDODRQdWLxWzhw+O0M3NiKVcdF6PFNURw+DF\nLIje3aFDEUZaTqg493Vq1YWKP3KkNGsci7LfeTRZMAwRlfUIQN1qtgaA4e0u21SE\nxyKv1MczZ6g0Km+2xpHpfhRE9kxUFShQhfJ359yI6Cy+otuI1XcHty7nGTZPepE=\n=IdFf\n-----END PGP SIGNATURE-----\n", "payload": "tree 95dcbc65f6c216af2314d646227859c0573d4522\nparent df8f551e796e3dd86a1ea8fb23b96cefbc7cdf85\nparent 93d662fd9d0e39145ac45fc08f35a619e0cb3f8c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593821812 -0700\ncommitter GitHub <noreply@github.com> 1593821812 -0700\n\nRollup merge of #73670 - davidhewitt:format-args-capture, r=varkor\n\nAdd `format_args_capture` feature\n\nThis is the initial implementation PR for [RFC 2795](https://github.com/rust-lang/rfcs/pull/2795).\n\nNote that, as dicussed in the tracking issue (#67984), the feature gate has been called `format_args_capture`.\n\nNext up I guess I need to add documentation for this feature. I've not written any docs before for rustc / std so I would appreciate suggestions on where I should add docs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "html_url": "https://github.com/rust-lang/rust/commit/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8f551e796e3dd86a1ea8fb23b96cefbc7cdf85", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8f551e796e3dd86a1ea8fb23b96cefbc7cdf85", "html_url": "https://github.com/rust-lang/rust/commit/df8f551e796e3dd86a1ea8fb23b96cefbc7cdf85"}, {"sha": "93d662fd9d0e39145ac45fc08f35a619e0cb3f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/93d662fd9d0e39145ac45fc08f35a619e0cb3f8c", "html_url": "https://github.com/rust-lang/rust/commit/93d662fd9d0e39145ac45fc08f35a619e0cb3f8c"}], "stats": {"total": 310, "additions": 305, "deletions": 5}, "files": [{"sha": "64b1b3d81bd83ce7641905c906e9f92ce8d7b69a", "filename": "src/doc/unstable-book/src/library-features/format-args-capture.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,47 @@\n+# `format_args_capture`\n+\n+The tracking issue for this feature is: [#67984]\n+\n+[#67984]: https://github.com/rust-lang/rust/issues/67984\n+\n+------------------------\n+\n+Enables `format_args!` (and macros which use `format_args!` in their implementation, such\n+as `format!`, `print!` and `panic!`) to capture variables from the surrounding scope.\n+This avoids the need to pass named parameters when the binding in question\n+already exists in scope.\n+\n+```rust\n+#![feature(format_args_capture)]\n+\n+let (person, species, name) = (\"Charlie Brown\", \"dog\", \"Snoopy\");\n+\n+// captures named argument `person`\n+print!(\"Hello {person}\");\n+\n+// captures named arguments `species` and `name`\n+format!(\"The {species}'s name is {name}.\");\n+```\n+\n+This also works for formatting parameters such as width and precision:\n+\n+```rust\n+#![feature(format_args_capture)]\n+\n+let precision = 2;\n+let s = format!(\"{:.precision$}\", 1.324223);\n+\n+assert_eq!(&s, \"1.32\");\n+```\n+\n+A non-exhaustive list of macros which benefit from this functionality include:\n+- `format!`\n+- `print!` and `println!`\n+- `eprint!` and `eprintln!`\n+- `write!` and `writeln!`\n+- `panic!`\n+- `unreachable!`\n+- `unimplemented!`\n+- `todo!`\n+- `assert!` and similar\n+- macros in many thirdparty crates, such as `log`"}, {"sha": "4cc83f8e31c20de2e61fa8cbe288dd1625fd712c", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -107,6 +107,9 @@ struct Context<'a, 'b> {\n     arg_spans: Vec<Span>,\n     /// All the formatting arguments that have formatting flags set, in order for diagnostics.\n     arg_with_formatting: Vec<parse::FormatSpec<'a>>,\n+\n+    /// Whether this format string came from a string literal, as opposed to a macro.\n+    is_literal: bool,\n }\n \n /// Parses the arguments from the given list of tokens, returning the diagnostic\n@@ -498,10 +501,55 @@ impl<'a, 'b> Context<'a, 'b> {\n                         self.verify_arg_type(Exact(idx), ty)\n                     }\n                     None => {\n-                        let msg = format!(\"there is no argument named `{}`\", name);\n-                        let sp = *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp);\n-                        let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n-                        err.emit();\n+                        let capture_feature_enabled = self\n+                            .ecx\n+                            .ecfg\n+                            .features\n+                            .map_or(false, |features| features.format_args_capture);\n+\n+                        // For the moment capturing variables from format strings expanded from macros is\n+                        // disabled (see RFC #2795)\n+                        let can_capture = capture_feature_enabled && self.is_literal;\n+\n+                        if can_capture {\n+                            // Treat this name as a variable to capture from the surrounding scope\n+                            let idx = self.args.len();\n+                            self.arg_types.push(Vec::new());\n+                            self.arg_unique_types.push(Vec::new());\n+                            self.args.push(\n+                                self.ecx.expr_ident(self.fmtsp, Ident::new(name, self.fmtsp)),\n+                            );\n+                            self.names.insert(name, idx);\n+                            self.verify_arg_type(Exact(idx), ty)\n+                        } else {\n+                            let msg = format!(\"there is no argument named `{}`\", name);\n+                            let sp = if self.is_literal {\n+                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                            } else {\n+                                self.fmtsp\n+                            };\n+                            let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n+\n+                            if capture_feature_enabled && !self.is_literal {\n+                                err.note(&format!(\n+                                    \"did you intend to capture a variable `{}` from \\\n+                                     the surrounding scope?\",\n+                                    name\n+                                ));\n+                                err.note(\n+                                    \"to avoid ambiguity, `format_args!` cannot capture variables \\\n+                                     when the format string is expanded from a macro\",\n+                                );\n+                            } else if self.ecx.parse_sess().unstable_features.is_nightly_build() {\n+                                err.help(&format!(\n+                                    \"if you intended to capture `{}` from the surrounding scope, add \\\n+                                     `#![feature(format_args_capture)]` to the crate attributes\",\n+                                    name\n+                                ));\n+                            }\n+\n+                            err.emit();\n+                        }\n                     }\n                 }\n             }\n@@ -951,6 +999,7 @@ pub fn expand_preparsed_format_args(\n         invalid_refs: Vec::new(),\n         arg_spans,\n         arg_with_formatting: Vec::new(),\n+        is_literal: parser.is_literal,\n     };\n \n     // This needs to happen *after* the Parser has consumed all pieces to create all the spans"}, {"sha": "313744efb3fce0cbd74052c1f86e794c620efca9", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -567,6 +567,9 @@ declare_features! (\n     /// Be more precise when looking for live drops in a const context.\n     (active, const_precise_live_drops, \"1.46.0\", Some(73255), None),\n \n+    /// Allows capturing variables in scope using format_args!\n+    (active, format_args_capture, \"1.46.0\", Some(67984), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "7db62f3493ede969d97fc00309ab5080076c7641", "filename": "src/librustc_parse_format/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_parse_format%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_parse_format%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Flib.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -190,7 +190,7 @@ pub struct Parser<'a> {\n     /// Whether the source string is comes from `println!` as opposed to `format!` or `print!`\n     append_newline: bool,\n     /// Whether this formatting string is a literal or it comes from a macro.\n-    is_literal: bool,\n+    pub is_literal: bool,\n     /// Start position of the current line.\n     cur_line_start: usize,\n     /// Start and end byte offset of every line of the format string. Excludes"}, {"sha": "acc2a50abe88ea17b68d85ec1c533bc4f5c6a94f", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -342,6 +342,7 @@ symbols! {\n         forbid,\n         format_args,\n         format_args_nl,\n+        format_args_capture,\n         from,\n         From,\n         from_desugaring,"}, {"sha": "21af91610915fb59e5cf24e0cfbfa217534e3ccd", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    format!(\"{foo}\");                //~ ERROR: there is no argument named `foo`\n+\n+    // panic! doesn't hit format_args! unless there are two or more arguments.\n+    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: there is no argument named `foo`\n+}"}, {"sha": "f08f1651cb62260237cc5f88e50df0fcf106a072", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,18 @@\n+error: there is no argument named `foo`\n+  --> $DIR/feature-gate-format-args-capture.rs:2:14\n+   |\n+LL |     format!(\"{foo}\");\n+   |              ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n+\n+error: there is no argument named `foo`\n+  --> $DIR/feature-gate-format-args-capture.rs:5:13\n+   |\n+LL |     panic!(\"{foo} {bar}\", bar=1);\n+   |             ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6ca7dcc216f3a9d7cd90cef900974b7bd88439e0", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,6 @@\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    format!(concat!(\"{foo}\"));         //~ ERROR: there is no argument named `foo`\n+    format!(concat!(\"{ba\", \"r} {}\"), 1);     //~ ERROR: there is no argument named `bar`\n+}"}, {"sha": "0c5915149cd6010830f74e3c453e85225ef0a32c", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,22 @@\n+error: there is no argument named `foo`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:4:13\n+   |\n+LL |     format!(concat!(\"{foo}\"));\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: there is no argument named `bar`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:5:13\n+   |\n+LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `bar` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3c596ae3bb899e5ea796cdc98e9e5104a3329b4d", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,22 @@\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+    //~^ ERROR: cannot find value `foo` in this scope\n+    //~^^ ERROR: cannot find value `bar` in this scope\n+\n+    format!(\"{foo}\");                //~ ERROR: cannot find value `foo` in this scope\n+\n+    format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+    //~^ ERROR cannot find value `valueb` in this scope\n+    //~^^ ERROR named argument never used\n+\n+    format!(r##\"\n+\n+        {foo}\n+\n+    \"##);\n+    //~^^^^^ ERROR: cannot find value `foo` in this scope\n+\n+    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: cannot find value `foo` in this scope\n+}"}, {"sha": "c3d740eef9d3cd1684e54e35d55104ba2c5aca94", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,52 @@\n+error: named argument never used\n+  --> $DIR/format-args-capture-missing-variables.rs:10:51\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             -------------------                   ^ named argument never used\n+   |             |\n+   |             formatting specifier missing\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:4:13\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `bar` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:4:13\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:8:13\n+   |\n+LL |     format!(\"{foo}\");\n+   |             ^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `valueb` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:10:13\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:14:13\n+   |\n+LL |       format!(r##\"\n+   |  _____________^\n+LL | |\n+LL | |         {foo}\n+LL | |\n+LL | |     \"##);\n+   | |_______^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:21:12\n+   |\n+LL |     panic!(\"{foo} {bar}\", bar=1);\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "7490632110c852ac1a7ad0e01243db3f504b6caa", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -0,0 +1,64 @@\n+// run-pass\n+// ignore-wasm32\n+// ignore-wasm64\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    named_argument_takes_precedence_to_captured();\n+    panic_with_single_argument_does_not_get_formatted();\n+    panic_with_multiple_arguments_is_formatted();\n+    formatting_parameters_can_be_captured();\n+}\n+\n+fn named_argument_takes_precedence_to_captured() {\n+    let foo = \"captured\";\n+    let s = format!(\"{foo}\", foo=\"named\");\n+    assert_eq!(&s, \"named\");\n+\n+    let s = format!(\"{foo}-{foo}-{foo}\", foo=\"named\");\n+    assert_eq!(&s, \"named-named-named\");\n+\n+    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    assert_eq!(&s, \"positional-named-captured\");\n+}\n+\n+fn panic_with_single_argument_does_not_get_formatted() {\n+    // panic! with a single argument does not perform string formatting.\n+    // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n+    // For stability reasons this will need to part of an edition change.\n+\n+    let msg = std::panic::catch_unwind(|| {\n+        panic!(\"{foo}\");\n+    }).unwrap_err();\n+\n+    assert_eq!(msg.downcast_ref::<&str>(), Some(&\"{foo}\"))\n+}\n+\n+fn panic_with_multiple_arguments_is_formatted() {\n+    let foo = \"captured\";\n+\n+    let msg = std::panic::catch_unwind(|| {\n+        panic!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    }).unwrap_err();\n+\n+    assert_eq!(msg.downcast_ref::<String>(), Some(&\"positional-named-captured\".to_string()))\n+}\n+\n+fn formatting_parameters_can_be_captured() {\n+    let width = 9;\n+    let precision = 3;\n+\n+    let x = 7.0;\n+\n+    let s = format!(\"{x:width$}\");\n+    assert_eq!(&s, \"        7\");\n+\n+    let s = format!(\"{x:<width$}\");\n+    assert_eq!(&s, \"7        \");\n+\n+    let s = format!(\"{x:-^width$}\");\n+    assert_eq!(&s, \"----7----\");\n+\n+    let s = format!(\"{x:-^width$.precision$}\");\n+    assert_eq!(&s, \"--7.000--\");\n+}"}, {"sha": "0ff478826f728cc8810c4b65404687c15e5a22e3", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=4a8d9ea80ff8d7ec4dcc6da7d36fe60ecaa55539", "patch": "@@ -63,18 +63,24 @@ error: there is no argument named `foo`\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                 ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: there is no argument named `bar`\n   --> $DIR/ifmt-bad-arg.rs:27:26\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                          ^^^^^\n+   |\n+   = help: if you intended to capture `bar` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: there is no argument named `foo`\n   --> $DIR/ifmt-bad-arg.rs:31:14\n    |\n LL |     format!(\"{foo}\");\n    |              ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: multiple unused formatting arguments\n   --> $DIR/ifmt-bad-arg.rs:32:17\n@@ -155,6 +161,8 @@ error: there is no argument named `valueb`\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |                       ^^^^^^^^\n+   |\n+   = help: if you intended to capture `valueb` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: named argument never used\n   --> $DIR/ifmt-bad-arg.rs:45:51\n@@ -205,6 +213,8 @@ error: there is no argument named `foo`\n    |\n LL |         {foo}\n    |         ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: invalid format string: expected `'}'`, found `'t'`\n   --> $DIR/ifmt-bad-arg.rs:75:1"}]}