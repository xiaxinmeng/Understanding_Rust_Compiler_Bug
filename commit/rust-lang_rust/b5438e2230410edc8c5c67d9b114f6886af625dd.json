{"sha": "b5438e2230410edc8c5c67d9b114f6886af625dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDM4ZTIyMzA0MTBlZGM4YzVjNjdkOWIxMTRmNjg4NmFmNjI1ZGQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-05T11:25:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-05T11:25:56Z"}, "message": "Rollup merge of #81456 - Amanieu:remote-test-server, r=Amanieu\n\nMake remote-test-server easier to use with new targets\n\nWhile testing #81455 I encountered 2 issues with `remote-test-server`:\n- It is built with the stage 0 toolchain, which does not support a newly added target.\n- It overwrites `LD_LIBRARY_PATH` instead of appending to it, which prevents the use of a custom sysroot for target libraries.", "tree": {"sha": "6383039a125a349d0943d94bcc32bbf93ff03dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6383039a125a349d0943d94bcc32bbf93ff03dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5438e2230410edc8c5c67d9b114f6886af625dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHStFCRBK7hj4Ov3rIwAAdHIIAF1LbfvbSWMETdEUbPeIFz8S\nUs16L0d302+sxIkuKCOYb663UxYP8L3Z8RMG+lZWWSwl3Dj61cP8h1SepfN2zZ84\nF6+0PzgRUIlql7I3tLoR/jK/n+C6rXPHaRwY8PZ4BEiYM9y/zgksqZsecO+vxPQt\nT6Lf+p+oXxXYCqKxgUa168olFA1qUdtcGiDCwoInQw0AsNynvUXpEZ75ZjSo1wnZ\nz/fIm6JZTAhpIOmFPXzRKAZAEeFI8BM0lCUXlXu/hFLkUbN+o0f91VY3zk9pUyh1\nr9SmFdgikY7AQqavJ1bHBzc5h6cab3mC0R9rLvljEOwpf4tU7lCH2TaMSHPa2LA=\n=wEpA\n-----END PGP SIGNATURE-----\n", "payload": "tree 6383039a125a349d0943d94bcc32bbf93ff03dfd\nparent 0493e3aa88e0a9d74eaa29b886b10b4a6b1fc053\nparent b5482a8f166b952f397be0432dec062b5b0ca105\nauthor Mara Bos <m-ou.se@m-ou.se> 1612524356 +0100\ncommitter GitHub <noreply@github.com> 1612524356 +0100\n\nRollup merge of #81456 - Amanieu:remote-test-server, r=Amanieu\n\nMake remote-test-server easier to use with new targets\n\nWhile testing #81455 I encountered 2 issues with `remote-test-server`:\n- It is built with the stage 0 toolchain, which does not support a newly added target.\n- It overwrites `LD_LIBRARY_PATH` instead of appending to it, which prevents the use of a custom sysroot for target libraries.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5438e2230410edc8c5c67d9b114f6886af625dd", "html_url": "https://github.com/rust-lang/rust/commit/b5438e2230410edc8c5c67d9b114f6886af625dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5438e2230410edc8c5c67d9b114f6886af625dd/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0493e3aa88e0a9d74eaa29b886b10b4a6b1fc053", "url": "https://api.github.com/repos/rust-lang/rust/commits/0493e3aa88e0a9d74eaa29b886b10b4a6b1fc053", "html_url": "https://github.com/rust-lang/rust/commit/0493e3aa88e0a9d74eaa29b886b10b4a6b1fc053"}, {"sha": "b5482a8f166b952f397be0432dec062b5b0ca105", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5482a8f166b952f397be0432dec062b5b0ca105", "html_url": "https://github.com/rust-lang/rust/commit/b5482a8f166b952f397be0432dec062b5b0ca105"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "d9132f20d85b33df9bd49422edf6f36bb8b01abe", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5438e2230410edc8c5c67d9b114f6886af625dd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5438e2230410edc8c5c67d9b114f6886af625dd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b5438e2230410edc8c5c67d9b114f6886af625dd", "patch": "@@ -1880,8 +1880,7 @@ impl Step for RemoteCopyLibs {\n         builder.info(&format!(\"REMOTE copy libs to emulator ({})\", target));\n         t!(fs::create_dir_all(builder.out.join(\"tmp\")));\n \n-        let server =\n-            builder.ensure(tool::RemoteTestServer { compiler: compiler.with_stage(0), target });\n+        let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);"}, {"sha": "cd9d530096496b4adb7036755c1477e02599bbac", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5438e2230410edc8c5c67d9b114f6886af625dd/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5438e2230410edc8c5c67d9b114f6886af625dd/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=b5438e2230410edc8c5c67d9b114f6886af625dd", "patch": "@@ -218,25 +218,19 @@ fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, conf\n     cmd.args(args);\n     cmd.envs(env);\n \n+    // On windows, libraries are just searched in the executable directory,\n+    // system directories, PWD, and PATH, in that order. PATH is the only one\n+    // we can change for this.\n+    let library_path = if cfg!(windows) { \"PATH\" } else { \"LD_LIBRARY_PATH\" };\n+\n     // Support libraries were uploaded to `work` earlier, so make sure that's\n     // in `LD_LIBRARY_PATH`. Also include our own current dir which may have\n     // had some libs uploaded.\n-    if cfg!(windows) {\n-        // On windows, libraries are just searched in the executable directory,\n-        // system directories, PWD, and PATH, in that order. PATH is the only one\n-        // we can change for this.\n-        cmd.env(\n-            \"PATH\",\n-            env::join_paths(\n-                std::iter::once(work.to_owned())\n-                    .chain(std::iter::once(path.clone()))\n-                    .chain(env::split_paths(&env::var_os(\"PATH\").unwrap())),\n-            )\n-            .unwrap(),\n-        );\n-    } else {\n-        cmd.env(\"LD_LIBRARY_PATH\", format!(\"{}:{}\", work.display(), path.display()));\n+    let mut paths = vec![work.to_owned(), path.clone()];\n+    if let Some(library_path) = env::var_os(library_path) {\n+        paths.extend(env::split_paths(&library_path));\n     }\n+    cmd.env(library_path, env::join_paths(paths).unwrap());\n \n     // Some tests assume RUST_TEST_TMPDIR exists\n     cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());"}]}