{"sha": "30980396afa713a7b877c7962c5b45329230cdc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTgwMzk2YWZhNzEzYTdiODc3Yzc5NjJjNWI0NTMyOTIzMGNkYzU=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T17:29:30Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T17:29:30Z"}, "message": "hir_ty: add field_visibilities and fn_visibility queries", "tree": {"sha": "212d7454063dad760f4fefa629c9376a5b4c0836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212d7454063dad760f4fefa629c9376a5b4c0836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30980396afa713a7b877c7962c5b45329230cdc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30980396afa713a7b877c7962c5b45329230cdc5", "html_url": "https://github.com/rust-lang/rust/commit/30980396afa713a7b877c7962c5b45329230cdc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30980396afa713a7b877c7962c5b45329230cdc5/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "html_url": "https://github.com/rust-lang/rust/commit/edfd741c5bdd9bbc044e3e362f5b446db7d817ef"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "b1d22a9f90f10cbf76254334caf040ed5b0b9262", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30980396afa713a7b877c7962c5b45329230cdc5/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30980396afa713a7b877c7962c5b45329230cdc5/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=30980396afa713a7b877c7962c5b45329230cdc5", "patch": "@@ -4,8 +4,8 @@ use std::sync::Arc;\n \n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n-    db::DefDatabase, expr::ExprId, ConstParamId, DefWithBodyId, FunctionId, GenericDefId, ImplId,\n-    LocalFieldId, TypeParamId, VariantId,\n+    db::DefDatabase, expr::ExprId, visibility::Visibility, ConstParamId, DefWithBodyId, FunctionId,\n+    GenericDefId, ImplId, LocalFieldId, TypeParamId, VariantId,\n };\n use la_arena::ArenaMap;\n \n@@ -128,6 +128,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         krate: CrateId,\n         env: chalk_ir::Environment<chalk::Interner>,\n     ) -> chalk_ir::ProgramClauses<chalk::Interner>;\n+\n+    #[salsa::invoke(crate::lower::field_visibilities_query)]\n+    fn field_visibilities(&self, var: VariantId) -> Arc<ArenaMap<LocalFieldId, Visibility>>;\n+\n+    #[salsa::invoke(crate::lower::fn_visibility_query)]\n+    fn fn_visibility(&self, def: FunctionId) -> Visibility;\n }\n \n fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {"}, {"sha": "c4062a41daa434a5775c5b2c82297023112a803e", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/30980396afa713a7b877c7962c5b45329230cdc5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30980396afa713a7b877c7962c5b45329230cdc5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=30980396afa713a7b877c7962c5b45329230cdc5", "patch": "@@ -16,9 +16,10 @@ use hir_def::{\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n+    visibility::Visibility,\n     AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, UnionId, VariantId,\n+    GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, ModuleDefId, StaticId, StructId,\n+    TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::name::Name;\n use la_arena::ArenaMap;\n@@ -867,6 +868,28 @@ pub(crate) fn field_types_query(\n     Arc::new(res)\n }\n \n+/// Resolve visibility of all specific fields of a struct or union variant.\n+pub(crate) fn field_visibilities_query(\n+    db: &dyn HirDatabase,\n+    variant_id: VariantId,\n+) -> Arc<ArenaMap<LocalFieldId, Visibility>> {\n+    let def_db = db.upcast();\n+    let var_data = variant_data(def_db, variant_id);\n+    let resolver = variant_id.module(def_db).resolver(def_db);\n+    let mut res = ArenaMap::default();\n+    for (field_id, field_data) in var_data.fields().iter() {\n+        res.insert(field_id, field_data.visibility.resolve(def_db, &resolver))\n+    }\n+    Arc::new(res)\n+}\n+\n+/// Resolve visibility of a function.\n+pub(crate) fn fn_visibility_query(db: &dyn HirDatabase, def: FunctionId) -> Visibility {\n+    let def_db = db.upcast();\n+    let resolver = ModuleDefId::from(def).module(def_db).unwrap().resolver(def_db);\n+    db.function_data(def).visibility.resolve(def_db, &resolver)\n+}\n+\n /// This query exists only to be used when resolving short-hand associated types\n /// like `T::Item`.\n ///"}]}