{"sha": "d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZWQxZTZmYTQ5NzgxNDE0MDhlZjAxZDBkMzVjN2JkMTQyZGQxNjQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-06T08:24:01Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-11T22:13:53Z"}, "message": "Merge unstable Utf16Encoder into EncodeUtf16", "tree": {"sha": "4943e332478a1658581eb8872ff7be92b1d1b499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4943e332478a1658581eb8872ff7be92b1d1b499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "html_url": "https://github.com/rust-lang/rust/commit/d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9afcd9b9f881545c8b722855f7e39361495d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9afcd9b9f881545c8b722855f7e39361495d27", "html_url": "https://github.com/rust-lang/rust/commit/0d9afcd9b9f881545c8b722855f7e39361495d27"}], "stats": {"total": 88, "additions": 23, "deletions": 65}, "files": [{"sha": "65df93bd3bb54da1845a9e61e363471ed1a52e56", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "patch": "@@ -45,7 +45,6 @@ use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n use core::ptr;\n use core::iter::FusedIterator;\n-use core::unicode::Utf16Encoder;\n \n use vec_deque::VecDeque;\n use borrow::{Borrow, ToOwned};\n@@ -146,7 +145,8 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n #[derive(Clone)]\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n pub struct EncodeUtf16<'a> {\n-    encoder: Utf16Encoder<Chars<'a>>,\n+    chars: Chars<'a>,\n+    extra: u16,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -162,12 +162,29 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n \n     #[inline]\n     fn next(&mut self) -> Option<u16> {\n-        self.encoder.next()\n+        if self.extra != 0 {\n+            let tmp = self.extra;\n+            self.extra = 0;\n+            return Some(tmp);\n+        }\n+\n+        let mut buf = [0; 2];\n+        self.chars.next().map(|ch| {\n+            let n = ch.encode_utf16(&mut buf).len();\n+            if n == 2 {\n+                self.extra = buf[1];\n+            }\n+            buf[0]\n+        })\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.encoder.size_hint()\n+        let (low, high) = self.chars.size_hint();\n+        // every char gets either one u16 or two u16,\n+        // so this iterator is between 1 or 2 times as\n+        // long as the underlying iterator.\n+        (low, high.and_then(|n| n.checked_mul(2)))\n     }\n }\n \n@@ -870,7 +887,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n     pub fn encode_utf16(&self) -> EncodeUtf16 {\n-        EncodeUtf16 { encoder: Utf16Encoder::new(self[..].chars()) }\n+        EncodeUtf16 { chars: self[..].chars(), extra: 0 }\n     }\n \n     /// Returns `true` if the given pattern matches a sub-slice of"}, {"sha": "a3f4c385fe23b731b52f329312790a1ba494253b", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "patch": "@@ -1204,8 +1204,7 @@ fn test_rev_split_char_iterator_no_trailing() {\n \n #[test]\n fn test_utf16_code_units() {\n-    use core::unicode::Utf16Encoder;\n-    assert_eq!(Utf16Encoder::new(vec!['\u00e9', '\\u{1F4A9}'].into_iter()).collect::<Vec<u16>>(),\n+    assert_eq!(\"\u00e9\\u{1F4A9}\".encode_utf16().collect::<Vec<u16>>(),\n                [0xE9, 0xD83D, 0xDCA9])\n }\n "}, {"sha": "9ab8cb748b10d37bfc5c195c58a3644c33ab322a", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ed1e6fa4978141408ef01d0d35c7bd142dd164/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=d4ed1e6fa4978141408ef01d0d35c7bd142dd164", "patch": "@@ -24,61 +24,3 @@ pub mod derived_property {\n pub mod property {\n     pub use unicode::tables::property::Pattern_White_Space;\n }\n-\n-use iter::FusedIterator;\n-\n-/// Iterator adaptor for encoding `char`s to UTF-16.\n-#[derive(Clone)]\n-#[allow(missing_debug_implementations)]\n-pub struct Utf16Encoder<I> {\n-    chars: I,\n-    extra: u16,\n-}\n-\n-impl<I> Utf16Encoder<I> {\n-    /// Create a UTF-16 encoder from any `char` iterator.\n-    pub fn new(chars: I) -> Utf16Encoder<I>\n-        where I: Iterator<Item = char>\n-    {\n-        Utf16Encoder {\n-            chars,\n-            extra: 0,\n-        }\n-    }\n-}\n-\n-impl<I> Iterator for Utf16Encoder<I>\n-    where I: Iterator<Item = char>\n-{\n-    type Item = u16;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<u16> {\n-        if self.extra != 0 {\n-            let tmp = self.extra;\n-            self.extra = 0;\n-            return Some(tmp);\n-        }\n-\n-        let mut buf = [0; 2];\n-        self.chars.next().map(|ch| {\n-            let n = ch.encode_utf16(&mut buf).len();\n-            if n == 2 {\n-                self.extra = buf[1];\n-            }\n-            buf[0]\n-        })\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (low, high) = self.chars.size_hint();\n-        // every char gets either one u16 or two u16,\n-        // so this iterator is between 1 or 2 times as\n-        // long as the underlying iterator.\n-        (low, high.and_then(|n| n.checked_mul(2)))\n-    }\n-}\n-\n-impl<I> FusedIterator for Utf16Encoder<I>\n-    where I: FusedIterator<Item = char> {}"}]}