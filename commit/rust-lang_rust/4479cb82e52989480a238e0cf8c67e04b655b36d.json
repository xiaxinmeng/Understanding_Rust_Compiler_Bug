{"sha": "4479cb82e52989480a238e0cf8c67e04b655b36d", "node_id": "C_kwDOAAsO6NoAKDQ0NzljYjgyZTUyOTg5NDgwYTIzOGUwY2Y4YzY3ZTA0YjY1NWIzNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-03T10:34:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-03T10:34:57Z"}, "message": "Auto merge of #89459 - tspiteri:idiv-overflow-bitand, r=kennytm\n\nUse bitand when checking for signed integer division overflow\n\nFor `self == Self::MIN && rhs == -1`, LLVM does not realize that this is the same check made by `self / rhs`, so the code generated may have some unnecessary duplication. For `(self == Self::MIN) & (rhs == -1)`, LLVM realizes it is the same check.", "tree": {"sha": "280d3ac19e09d225644b96007748a417eacebd25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/280d3ac19e09d225644b96007748a417eacebd25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4479cb82e52989480a238e0cf8c67e04b655b36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4479cb82e52989480a238e0cf8c67e04b655b36d", "html_url": "https://github.com/rust-lang/rust/commit/4479cb82e52989480a238e0cf8c67e04b655b36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4479cb82e52989480a238e0cf8c67e04b655b36d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24c9067eec3aec8dd2013d24f6cd0dff3ecec4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24c9067eec3aec8dd2013d24f6cd0dff3ecec4c", "html_url": "https://github.com/rust-lang/rust/commit/c24c9067eec3aec8dd2013d24f6cd0dff3ecec4c"}, {"sha": "1139ee32aa803401198c02d5541accbf3fddfc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/1139ee32aa803401198c02d5541accbf3fddfc94", "html_url": "https://github.com/rust-lang/rust/commit/1139ee32aa803401198c02d5541accbf3fddfc94"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "526e0c371882cae255dd329d1eae9751e3330dc6", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4479cb82e52989480a238e0cf8c67e04b655b36d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4479cb82e52989480a238e0cf8c67e04b655b36d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=4479cb82e52989480a238e0cf8c67e04b655b36d", "patch": "@@ -543,7 +543,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -569,7 +570,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 Some(self.div_euclid(rhs))\n@@ -595,7 +597,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -621,7 +624,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 Some(self.rem_euclid(rhs))\n@@ -1466,7 +1470,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (self, true)\n             } else {\n                 (self / rhs, false)\n@@ -1496,7 +1501,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (self, true)\n             } else {\n                 (self.div_euclid(rhs), false)\n@@ -1527,7 +1533,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (0, true)\n             } else {\n                 (self % rhs, false)\n@@ -1558,7 +1565,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (0, true)\n             } else {\n                 (self.rem_euclid(rhs), false)"}]}