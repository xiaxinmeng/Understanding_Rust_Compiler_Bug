{"sha": "cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkN2E5MTMyMDAxZTBhNmRlN2VlMmY3NDIwYzYzYmRmOThjYTZlZmY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-03T19:42:05Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-07T12:26:34Z"}, "message": "Add `-` and `/` to EQ_OP", "tree": {"sha": "f9cf3c67201ac82b1138daf534e5f33864163970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9cf3c67201ac82b1138daf534e5f33864163970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "html_url": "https://github.com/rust-lang/rust/commit/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e22d08129dc242cebcdb25b824fa4ffb57d4f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e22d08129dc242cebcdb25b824fa4ffb57d4f7a", "html_url": "https://github.com/rust-lang/rust/commit/8e22d08129dc242cebcdb25b824fa4ffb57d4f7a"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "aecd0693ff1f2acdb31bb1e2904e4de4b77e895e", "filename": "src/eq_op.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "patch": "@@ -4,9 +4,11 @@ use rustc_front::util as ast_util;\n \n use utils::{is_exp_equal, span_lint};\n \n-/// **What it does:** This lint checks for equal operands to comparisons and bitwise binary operators (`&`, `|` and `^`).\n+/// **What it does:** This lint checks for equal operands to comparison, logical and bitwise,\n+/// difference and division binary operators (`==`, `>`, etc., `&&`, `||`, `&`, `|`, `^`, `-` and\n+/// `/`).\n ///\n-/// **Why is this bad?** This is usually just a typo.\n+/// **Why is this bad?** This is usually just a typo or a copy and paste error.\n ///\n /// **Known problems:** False negatives: We had some false positives regarding calls (notably [racer](https://github.com/phildawes/racer) had one instance of `x.pop() && x.pop()`), so we removed matching any function or method calls. We may introduce a whitelist of known pure functions in the future.\n ///\n@@ -29,19 +31,21 @@ impl LintPass for EqOp {\n impl LateLintPass for EqOp {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         if let ExprBinary(ref op, ref left, ref right) = e.node {\n-            if is_cmp_or_bit(op) && is_exp_equal(cx, left, right, true) {\n+            if is_valid_operator(op) && is_exp_equal(cx, left, right, true) {\n                 span_lint(cx,\n                           EQ_OP,\n                           e.span,\n-                          &format!(\"equal expressions as operands to {}\", ast_util::binop_to_string(op.node)));\n+                          &format!(\"equal expressions as operands to `{}`\", ast_util::binop_to_string(op.node)));\n             }\n         }\n     }\n }\n \n \n-fn is_cmp_or_bit(op: &BinOp) -> bool {\n+fn is_valid_operator(op: &BinOp) -> bool {\n     match op.node {\n+        BiSub |\n+        BiDiv |\n         BiEq |\n         BiLt |\n         BiLe |"}, {"sha": "7be5ef11ce6a65d5185da4a3fe75163c45924eec", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "patch": "@@ -19,9 +19,9 @@ fn main() {\n     // unary and binary operators\n     (-(2) < -(2));  //~ERROR equal expressions\n     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n-          //~^ ERROR equal expressions\n-                    //~^^ ERROR equal expressions\n-                               //~^^^ ERROR equal expressions\n+          //~^ ERROR equal expressions as operands to `==`\n+                    //~^^ ERROR equal expressions as operands to `&`\n+                               //~^^^ ERROR equal expressions as operands to `&`\n     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4; //~ERROR equal expressions\n \n     // various other things\n@@ -31,7 +31,13 @@ fn main() {\n \n     // const folding\n     1 + 1 == 2; //~ERROR equal expressions\n-    1 - 1 == 0; //~ERROR equal expressions\n+    1 - 1 == 0; //~ERROR equal expressions as operands to `==`\n+                //~^ ERROR equal expressions as operands to `-`\n+\n+    1 - 1; //~ERROR equal expressions\n+    1 / 1; //~ERROR equal expressions\n+    true && true; //~ERROR equal expressions\n+    true || true; //~ERROR equal expressions\n \n     let mut a = vec![1];\n     a == a; //~ERROR equal expressions"}, {"sha": "c1141e0b460f2c03d23ebbaea5cb6cb93136bfc4", "filename": "tests/compile-fail/identity_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "patch": "@@ -5,6 +5,7 @@ const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;\n const ZERO : i64 = 0;\n \n+#[allow(eq_op)]\n #[deny(identity_op)]\n fn main() {\n     let x = 0;"}, {"sha": "c422e83873b09b855f5c515cbc2ce3e552fc619a", "filename": "tests/compile-fail/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/tests%2Fcompile-fail%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff/tests%2Fcompile-fail%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzero_div_zero.rs?ref=cd7a9132001e0a6de7ee2f7420c63bdf98ca6eff", "patch": "@@ -5,9 +5,13 @@\n #[deny(zero_divided_by_zero)]\n fn main() {\n     let nan = 0.0 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let f64_nan = 0.0 / 0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let other_f64_nan = 0.0f64 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let one_more_f64_nan = 0.0f64/0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+                         //~^ equal expressions as operands to `/`\n     let zero = 0.0;\n     let other_zero = 0.0;\n     let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants."}]}