{"sha": "4322cf7f5b4cc31ae88320add185184f5d58abb7", "node_id": "C_kwDOAAsO6NoAKDQzMjJjZjdmNWI0Y2MzMWFlODgzMjBhZGQxODUxODRmNWQ1OGFiYjc", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-01T06:19:49Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-10T16:11:18Z"}, "message": "Remove `EscapedName`", "tree": {"sha": "78b79c157a4f5f3fdae8dc7b3c6927cbe15cd5d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b79c157a4f5f3fdae8dc7b3c6927cbe15cd5d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4322cf7f5b4cc31ae88320add185184f5d58abb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLz2KYACgkQ4laYqTBY\nYXF9sw//Q9bRYLxW1Nuv6Pk/GgkXTFkNlgrWzeK0VldlDq0MlSqLS1Q8FstAxrCd\nWaUCVPiSPiM1VNVA8TJVOCqtfJA4XRT/LBCnIzwpQT5jzK8mY2cGoz1PxNRP45JT\nRVZgfF0D6lyoYVUrJP3iy08BiUKSF5jDA8BCR6k6cbCB7VhmxWx185jMJqBejoW4\nE7dAr32rnyB9q6W8cHrdGNGZWwvOaR/ORx6VGK6Z9Bal14Nf2HPnwVKCHqsqCTuJ\nJKWG5ScgP56TgvNC12kh30i7UCVQxpnKB0IM4L4s4ttKH9OtJYyQ13kUJY2zqEqP\nqBGmnJs2sKMYl6MDq6kuPn+KuvqP1YBWq1NWpqdjB/qo5PmmL8iKSvZID8ORvoXT\npfPIIW/QrtYUwae9FZPn+OXZrzJSwX0egc4v/+kxL+PsQyxVqfWXTUUWN+IHbWvk\ngYxBSPXgI3Ww9tnGpqEoJhs1YDC3NcYpwPEpDqEf/Zgz0OcTdYNrkPHzXKlTaWSz\nrK8oj/Wc0V11bnkP11VRjAF1zFna4GRnG/W1UrEUFOzrLrUtOeLW4iu9FhdjHtQa\nm3I3Us2893J5KszZ4uV3qolrLw2y46zBkZFdp5By3qT69lOH21nw0exhuXuezbos\nJn048Kx5e8fsrolOM3yFuiixqL3hFZo/p5Vl4kyVcWWSJCbcJy0=\n=LLpm\n-----END PGP SIGNATURE-----", "payload": "tree 78b79c157a4f5f3fdae8dc7b3c6927cbe15cd5d9\nparent 53ec791dc6b22e581f9e5aabeda5edfc806564cb\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1659334789 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1660147878 +0900\n\nRemove `EscapedName`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4322cf7f5b4cc31ae88320add185184f5d58abb7", "html_url": "https://github.com/rust-lang/rust/commit/4322cf7f5b4cc31ae88320add185184f5d58abb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4322cf7f5b4cc31ae88320add185184f5d58abb7/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ec791dc6b22e581f9e5aabeda5edfc806564cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ec791dc6b22e581f9e5aabeda5edfc806564cb", "html_url": "https://github.com/rust-lang/rust/commit/53ec791dc6b22e581f9e5aabeda5edfc806564cb"}], "stats": {"total": 99, "additions": 26, "deletions": 73}, "files": [{"sha": "ed9d90298871c53b6b34eac0e810d7e9e6ececf0", "filename": "crates/hir-expand/src/mod_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -134,9 +134,9 @@ impl ModPath {\n             }\n             first_segment = false;\n             if escaped {\n-                segment.escaped().fmt(f)?\n-            } else {\n                 segment.fmt(f)?\n+            } else {\n+                segment.unescaped().fmt(f)?\n             };\n         }\n         Ok(())"}, {"sha": "87c663eec8e81c2deea72c1c6e41c49c55f383cf", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -14,10 +14,6 @@ use syntax::{ast, SmolStr, SyntaxKind};\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Name(Repr);\n \n-/// `EscapedName` will add a prefix \"r#\" to the wrapped `Name` when it is a raw identifier\n-#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct EscapedName<'a>(&'a Name);\n-\n /// Wrapper of `Name` to print the name without \"r#\" even when it is a raw identifier.\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct UnescapedName<'a>(&'a Name);\n@@ -42,21 +38,6 @@ fn is_raw_identifier(name: &str) -> bool {\n     is_keyword && !matches!(name, \"self\" | \"crate\" | \"super\" | \"Self\")\n }\n \n-impl<'a> fmt::Display for EscapedName<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match &self.0 .0 {\n-            Repr::Text(text) => {\n-                if is_raw_identifier(text) {\n-                    write!(f, \"r#{}\", &text)\n-                } else {\n-                    fmt::Display::fmt(&text, f)\n-                }\n-            }\n-            Repr::TupleField(idx) => fmt::Display::fmt(&idx, f),\n-        }\n-    }\n-}\n-\n impl<'a> fmt::Display for UnescapedName<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match &self.0 .0 {\n@@ -86,31 +67,6 @@ impl<'a> UnescapedName<'a> {\n     }\n }\n \n-impl<'a> EscapedName<'a> {\n-    pub fn is_escaped(&self) -> bool {\n-        match &self.0 .0 {\n-            Repr::Text(it) => is_raw_identifier(&it),\n-            Repr::TupleField(_) => false,\n-        }\n-    }\n-\n-    /// Returns the textual representation of this name as a [`SmolStr`].\n-    /// Prefer using this over [`ToString::to_string`] if possible as this conversion is cheaper in\n-    /// the general case.\n-    pub fn to_smol_str(&self) -> SmolStr {\n-        match &self.0 .0 {\n-            Repr::Text(it) => {\n-                if is_raw_identifier(&it) {\n-                    SmolStr::from_iter([\"r#\", &it])\n-                } else {\n-                    it.clone()\n-                }\n-            }\n-            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n-        }\n-    }\n-}\n-\n impl Name {\n     /// Note: this is private to make creating name from random string hard.\n     /// Hopefully, this should allow us to integrate hygiene cleaner in the\n@@ -181,10 +137,6 @@ impl Name {\n         }\n     }\n \n-    pub fn escaped(&self) -> EscapedName<'_> {\n-        EscapedName(self)\n-    }\n-\n     pub fn unescaped(&self) -> UnescapedName<'_> {\n         UnescapedName(self)\n     }"}, {"sha": "785db6fde1d5ad742003c733cb596f02404dec1d", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -233,7 +233,8 @@ fn add_type_alias_impl(\n     type_alias: hir::TypeAlias,\n ) {\n     let alias_name = type_alias.name(ctx.db);\n-    let (alias_name, escaped_name) = (alias_name.to_smol_str(), alias_name.escaped().to_smol_str());\n+    let (alias_name, escaped_name) =\n+        (alias_name.unescaped().to_smol_str(), alias_name.to_smol_str());\n \n     let label = format!(\"type {} =\", alias_name);\n     let replacement = format!(\"type {} = \", escaped_name);"}, {"sha": "6c466777a1026ffebfb0a6c9d9dae8bc193ddc1c", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -117,7 +117,7 @@ pub(crate) fn render_field(\n ) -> CompletionItem {\n     let is_deprecated = ctx.is_deprecated(field);\n     let name = field.name(ctx.db());\n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n@@ -283,8 +283,8 @@ fn render_resolution_path(\n \n     let name = local_name.to_smol_str();\n     let mut item = render_resolution_simple_(ctx, &local_name, import_to_add, resolution);\n-    if local_name.escaped().is_escaped() {\n-        item.insert_text(local_name.escaped().to_smol_str());\n+    if local_name.is_escaped() {\n+        item.insert_text(local_name.to_smol_str());\n     }\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n@@ -306,7 +306,7 @@ fn render_resolution_path(\n                 item.lookup_by(name.clone())\n                     .label(SmolStr::from_iter([&name, \"<\u2026>\"]))\n                     .trigger_call_info()\n-                    .insert_snippet(cap, format!(\"{}<$0>\", local_name.escaped()));\n+                    .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n             }\n         }\n     }"}, {"sha": "93ea825e00427bde6a6fb4f083131b051586eebc", "filename": "crates/ide-completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option\n fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     let db = ctx.db();\n     let name = const_.name(db)?;\n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let detail = const_.display(db).to_string();\n \n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());"}, {"sha": "2a90703b09ece1e776f58ef5e099d543583a7c0d", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -52,10 +52,10 @@ fn render(\n \n     let (call, escaped_call) = match &func_kind {\n         FuncKind::Method(_, Some(receiver)) => (\n-            format!(\"{}.{}\", receiver, &name).into(),\n-            format!(\"{}.{}\", receiver.escaped(), name.escaped()).into(),\n+            format!(\"{}.{}\", receiver.unescaped(), name.unescaped()).into(),\n+            format!(\"{}.{}\", receiver, name).into(),\n         ),\n-        _ => (name.to_smol_str(), name.escaped().to_smol_str()),\n+        _ => (name.unescaped().to_smol_str(), name.to_smol_str()),\n     };\n     let mut item = CompletionItem::new(\n         if func.self_param(db).is_some() {"}, {"sha": "eabd0bd17d65ffe4fc965f82aeb7d17eee43e4df", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -46,7 +46,7 @@ fn render(\n         ctx.source_range()\n     };\n \n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let docs = ctx.docs(macro_);\n     let docs_str = docs.as_ref().map(Documentation::as_str).unwrap_or_default();\n     let is_fn_like = macro_.is_fn_like(completion.db);"}, {"sha": "4f4c0640270688da080bd4a16ac84edf706f6981", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn render_struct_pat(\n     }\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db()));\n-    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n+    let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let kind = strukt.kind(ctx.db());\n     let label = format_literal_label(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n@@ -56,7 +56,7 @@ pub(crate) fn render_variant_pat(\n         Some(path) => (path.to_string().into(), path.escaped().to_string().into()),\n         None => {\n             let name = local_name.unwrap_or_else(|| variant.name(ctx.db()));\n-            (name.to_smol_str(), name.escaped().to_smol_str())\n+            (name.unescaped().to_smol_str(), name.to_smol_str())\n         }\n     };\n \n@@ -146,7 +146,7 @@ fn render_record_as_pat(\n             format!(\n                 \"{name} {{ {}{} }}\",\n                 fields.enumerate().format_with(\", \", |(idx, field), f| {\n-                    f(&format_args!(\"{}${}\", field.name(db).escaped(), idx + 1))\n+                    f(&format_args!(\"{}${}\", field.name(db), idx + 1))\n                 }),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n@@ -155,7 +155,7 @@ fn render_record_as_pat(\n         None => {\n             format!(\n                 \"{name} {{ {}{} }}\",\n-                fields.map(|field| field.name(db).escaped().to_smol_str()).format(\", \"),\n+                fields.map(|field| field.name(db).to_smol_str()).format(\", \"),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n             )"}, {"sha": "de919429f2f95e5b04f75d77aadcc3bcfa1810bd", "filename": "crates/ide-completion/src/render/type_alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -32,11 +32,11 @@ fn render(\n     let name = type_alias.name(db);\n     let (name, escaped_name) = if with_eq {\n         (\n+            SmolStr::from_iter([&name.unescaped().to_smol_str(), \" = \"]),\n             SmolStr::from_iter([&name.to_smol_str(), \" = \"]),\n-            SmolStr::from_iter([&name.escaped().to_smol_str(), \" = \"]),\n         )\n     } else {\n-        (name.to_smol_str(), name.escaped().to_smol_str())\n+        (name.unescaped().to_smol_str(), name.to_smol_str())\n     };\n     let detail = type_alias.display(db).to_string();\n "}, {"sha": "b04c8e3bf9d10daf135d639c38f8edefc036ad5e", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn render_union_literal(\n \n     let (qualified_name, escaped_qualified_name) = match path {\n         Some(p) => (p.to_string(), p.escaped().to_string()),\n-        None => (name.to_string(), name.escaped().to_string()),\n+        None => (name.unescaped().to_string(), name.to_string()),\n     };\n \n     let mut item = CompletionItem::new(\n@@ -42,15 +42,15 @@ pub(crate) fn render_union_literal(\n         format!(\n             \"{} {{ ${{1|{}|}}: ${{2:()}} }}$0\",\n             escaped_qualified_name,\n-            fields.iter().map(|field| field.name(ctx.db()).escaped().to_smol_str()).format(\",\")\n+            fields.iter().map(|field| field.name(ctx.db()).to_smol_str()).format(\",\")\n         )\n     } else {\n         format!(\n             \"{} {{ {} }}\",\n             escaped_qualified_name,\n-            fields.iter().format_with(\", \", |field, f| {\n-                f(&format_args!(\"{}: ()\", field.name(ctx.db()).escaped()))\n-            })\n+            fields\n+                .iter()\n+                .format_with(\", \", |field, f| { f(&format_args!(\"{}: ()\", field.name(ctx.db()))) })\n         )\n     };\n "}, {"sha": "664845330eb8f4ab16fe74c2ba8aa1c6065525db", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4322cf7f5b4cc31ae88320add185184f5d58abb7/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=4322cf7f5b4cc31ae88320add185184f5d58abb7", "patch": "@@ -24,9 +24,9 @@ pub(crate) fn render_record_lit(\n ) -> RenderedLiteral {\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, field), f| {\n         if snippet_cap.is_some() {\n-            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db).escaped(), idx + 1))\n+            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n         } else {\n-            f(&format_args!(\"{}: ()\", field.name(db).escaped()))\n+            f(&format_args!(\"{}: ()\", field.name(db)))\n         }\n     });\n "}]}