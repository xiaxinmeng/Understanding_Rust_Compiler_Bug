{"sha": "6544d7b6b1c06b1c5607118365fb992a39075b0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDRkN2I2YjFjMDZiMWM1NjA3MTE4MzY1ZmI5OTJhMzkwNzViMGM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-11T14:54:55Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T13:44:34Z"}, "message": "change `Predicate::kind` to return a reference", "tree": {"sha": "a41e27a85e895c202eb9bd4c7374ff2a8d6bd35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41e27a85e895c202eb9bd4c7374ff2a8d6bd35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6544d7b6b1c06b1c5607118365fb992a39075b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6544d7b6b1c06b1c5607118365fb992a39075b0c", "html_url": "https://github.com/rust-lang/rust/commit/6544d7b6b1c06b1c5607118365fb992a39075b0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6544d7b6b1c06b1c5607118365fb992a39075b0c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57746f943bef5720d97ad2cb413c54b0f432566b", "url": "https://api.github.com/repos/rust-lang/rust/commits/57746f943bef5720d97ad2cb413c54b0f432566b", "html_url": "https://github.com/rust-lang/rust/commit/57746f943bef5720d97ad2cb413c54b0f432566b"}], "stats": {"total": 133, "additions": 66, "deletions": 67}, "files": [{"sha": "88fc1460475df1e9c346ea57067c77c59f175484", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -11,42 +11,42 @@ pub fn anonymize_predicate<'tcx>(\n     pred: &ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n     match pred.kind() {\n-        ty::PredicateKind::Trait(ref data, constness) => {\n+        &ty::PredicateKind::Trait(ref data, constness) => {\n             ty::PredicateKind::Trait(tcx.anonymize_late_bound_regions(data), constness)\n                 .to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::RegionOutlives(ref data) => {\n+        ty::PredicateKind::RegionOutlives(data) => {\n             ty::PredicateKind::RegionOutlives(tcx.anonymize_late_bound_regions(data))\n                 .to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::TypeOutlives(ref data) => {\n+        ty::PredicateKind::TypeOutlives(data) => {\n             ty::PredicateKind::TypeOutlives(tcx.anonymize_late_bound_regions(data))\n                 .to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::Projection(ref data) => {\n+        ty::PredicateKind::Projection(data) => {\n             ty::PredicateKind::Projection(tcx.anonymize_late_bound_regions(data)).to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::WellFormed(data) => {\n+        &ty::PredicateKind::WellFormed(data) => {\n             ty::PredicateKind::WellFormed(data).to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::ObjectSafe(data) => {\n+        &ty::PredicateKind::ObjectSafe(data) => {\n             ty::PredicateKind::ObjectSafe(data).to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n+        &ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n             ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind).to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::Subtype(ref data) => {\n+        ty::PredicateKind::Subtype(data) => {\n             ty::PredicateKind::Subtype(tcx.anonymize_late_bound_regions(data)).to_predicate(tcx)\n         }\n \n-        ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+        &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n             ty::PredicateKind::ConstEvaluatable(def_id, substs).to_predicate(tcx)\n         }\n "}, {"sha": "6bb47a8f30e74f68359b92cf4d236a3b17c0cb96", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -1023,8 +1023,8 @@ pub struct Predicate<'tcx> {\n }\n \n impl Predicate<'tcx> {\n-    pub fn kind(&self) -> PredicateKind<'tcx> {\n-        *self.kind\n+    pub fn kind(&self) -> &'tcx PredicateKind<'tcx> {\n+        self.kind\n     }\n }\n \n@@ -1163,35 +1163,36 @@ impl<'tcx> Predicate<'tcx> {\n         // this trick achieves that).\n \n         let substs = &trait_ref.skip_binder().substs;\n-        match self.kind() {\n-            PredicateKind::Trait(ref binder, constness) => {\n+        let predicate = match self.kind() {\n+            &PredicateKind::Trait(ref binder, constness) => {\n                 PredicateKind::Trait(binder.map_bound(|data| data.subst(tcx, substs)), constness)\n             }\n-            PredicateKind::Subtype(ref binder) => {\n+            PredicateKind::Subtype(binder) => {\n                 PredicateKind::Subtype(binder.map_bound(|data| data.subst(tcx, substs)))\n             }\n-            PredicateKind::RegionOutlives(ref binder) => {\n+            PredicateKind::RegionOutlives(binder) => {\n                 PredicateKind::RegionOutlives(binder.map_bound(|data| data.subst(tcx, substs)))\n             }\n-            PredicateKind::TypeOutlives(ref binder) => {\n+            PredicateKind::TypeOutlives(binder) => {\n                 PredicateKind::TypeOutlives(binder.map_bound(|data| data.subst(tcx, substs)))\n             }\n-            PredicateKind::Projection(ref binder) => {\n+            PredicateKind::Projection(binder) => {\n                 PredicateKind::Projection(binder.map_bound(|data| data.subst(tcx, substs)))\n             }\n-            PredicateKind::WellFormed(data) => PredicateKind::WellFormed(data.subst(tcx, substs)),\n-            PredicateKind::ObjectSafe(trait_def_id) => PredicateKind::ObjectSafe(trait_def_id),\n-            PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n+            &PredicateKind::WellFormed(data) => PredicateKind::WellFormed(data.subst(tcx, substs)),\n+            &PredicateKind::ObjectSafe(trait_def_id) => PredicateKind::ObjectSafe(trait_def_id),\n+            &PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                 PredicateKind::ClosureKind(closure_def_id, closure_substs.subst(tcx, substs), kind)\n             }\n-            PredicateKind::ConstEvaluatable(def_id, const_substs) => {\n+            &PredicateKind::ConstEvaluatable(def_id, const_substs) => {\n                 PredicateKind::ConstEvaluatable(def_id, const_substs.subst(tcx, substs))\n             }\n             PredicateKind::ConstEquate(c1, c2) => {\n                 PredicateKind::ConstEquate(c1.subst(tcx, substs), c2.subst(tcx, substs))\n             }\n-        }\n-        .to_predicate(tcx)\n+        };\n+\n+        predicate.to_predicate(tcx)\n     }\n }\n \n@@ -1370,7 +1371,7 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n impl<'tcx> Predicate<'tcx> {\n     pub fn to_opt_poly_trait_ref(&self) -> Option<PolyTraitRef<'tcx>> {\n         match self.kind() {\n-            PredicateKind::Trait(ref t, _) => Some(t.to_poly_trait_ref()),\n+            &PredicateKind::Trait(ref t, _) => Some(t.to_poly_trait_ref()),\n             PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::RegionOutlives(..)\n@@ -1385,7 +1386,7 @@ impl<'tcx> Predicate<'tcx> {\n \n     pub fn to_opt_type_outlives(&self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {\n         match self.kind() {\n-            PredicateKind::TypeOutlives(data) => Some(data),\n+            &PredicateKind::TypeOutlives(data) => Some(data),\n             PredicateKind::Trait(..)\n             | PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)"}, {"sha": "f4b795e548867c1086a1f086a97ea140203c328b", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -2032,28 +2032,28 @@ define_print_and_forward_display! {\n \n     ty::Predicate<'tcx> {\n         match self.kind() {\n-            ty::PredicateKind::Trait(ref data, constness) => {\n+            &ty::PredicateKind::Trait(ref data, constness) => {\n                 if let hir::Constness::Const = constness {\n                     p!(write(\"const \"));\n                 }\n                 p!(print(data))\n             }\n-            ty::PredicateKind::Subtype(ref predicate) => p!(print(predicate)),\n-            ty::PredicateKind::RegionOutlives(ref predicate) => p!(print(predicate)),\n-            ty::PredicateKind::TypeOutlives(ref predicate) => p!(print(predicate)),\n-            ty::PredicateKind::Projection(ref predicate) => p!(print(predicate)),\n+            ty::PredicateKind::Subtype(predicate) => p!(print(predicate)),\n+            ty::PredicateKind::RegionOutlives(predicate) => p!(print(predicate)),\n+            ty::PredicateKind::TypeOutlives(predicate) => p!(print(predicate)),\n+            ty::PredicateKind::Projection(predicate) => p!(print(predicate)),\n             ty::PredicateKind::WellFormed(ty) => p!(print(ty), write(\" well-formed\")),\n-            ty::PredicateKind::ObjectSafe(trait_def_id) => {\n+            &ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 p!(write(\"the trait `\"),\n                    print_def_path(trait_def_id, &[]),\n                    write(\"` is object-safe\"))\n             }\n-            ty::PredicateKind::ClosureKind(closure_def_id, _closure_substs, kind) => {\n+            &ty::PredicateKind::ClosureKind(closure_def_id, _closure_substs, kind) => {\n                 p!(write(\"the closure `\"),\n                    print_value_path(closure_def_id, &[]),\n                    write(\"` implements the trait `{}`\", kind))\n             }\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+            &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n                 p!(write(\"the constant `\"),\n                    print_value_path(def_id, substs),\n                    write(\"` can be evaluated\"))"}, {"sha": "ead530bded861ab1fee39e48cb567c64645ecaf5", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -39,7 +39,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 ty::PredicateKind::Subtype(_) => {\n                     bug!(\"subtype predicate on function: {:#?}\", predicate)\n                 }\n-                ty::PredicateKind::Trait(pred, constness) => {\n+                &ty::PredicateKind::Trait(pred, constness) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n                     }"}, {"sha": "716cbce60dcc9525fbb0a34bf8772a491273aa4d", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -634,7 +634,7 @@ impl AutoTraitFinder<'tcx> {\n             // We check this by calling is_of_param on the relevant types\n             // from the various possible predicates\n             match predicate.kind() {\n-                ty::PredicateKind::Trait(p, _) => {\n+                &ty::PredicateKind::Trait(p, _) => {\n                     if self.is_param_no_infer(p.skip_binder().trait_ref.substs)\n                         && !only_projections\n                         && is_new_pred\n@@ -643,7 +643,7 @@ impl AutoTraitFinder<'tcx> {\n                     }\n                     predicates.push_back(p);\n                 }\n-                ty::PredicateKind::Projection(p) => {\n+                &ty::PredicateKind::Projection(p) => {\n                     debug!(\n                         \"evaluate_nested_obligations: examining projection predicate {:?}\",\n                         predicate"}, {"sha": "2aef8aaf0e30386562c0db6fd0abc181ccc3f768", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -524,12 +524,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         )\n                     }\n \n-                    ty::PredicateKind::ObjectSafe(trait_def_id) => {\n+                    &ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                         let violations = self.tcx.object_safety_violations(trait_def_id);\n                         report_object_safety_error(self.tcx, span, trait_def_id, violations)\n                     }\n \n-                    ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n+                    &ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                         let found_kind = self.closure_kind(closure_substs).unwrap();\n                         let closure_span =\n                             self.tcx.sess.source_map().guess_head_span("}, {"sha": "e44163f7bb1a4a74e848c6e0007ad4ee03f48f50", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -443,15 +443,15 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::ObjectSafe(trait_def_id) => {\n+            &ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 if !self.selcx.tcx().is_object_safe(trait_def_id) {\n                     ProcessResult::Error(CodeSelectionError(Unimplemented))\n                 } else {\n                     ProcessResult::Changed(vec![])\n                 }\n             }\n \n-            ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {\n+            &ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {\n                 match self.selcx.infcx().closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         if closure_kind.extends(kind) {\n@@ -464,7 +464,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::WellFormed(ty) => {\n+            &ty::PredicateKind::WellFormed(ty) => {\n                 match wf::obligations(\n                     self.selcx.infcx(),\n                     obligation.param_env,\n@@ -481,7 +481,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::Subtype(ref subtype) => {\n+            ty::PredicateKind::Subtype(subtype) => {\n                 match self.selcx.infcx().subtype_predicate(\n                     &obligation.cause,\n                     obligation.param_env,\n@@ -510,7 +510,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+            &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n                 match self.selcx.infcx().const_eval_resolve(\n                     obligation.param_env,\n                     def_id,"}, {"sha": "7b72cf15da4d8ac3874d5b2bd2114b7610279f14", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -930,7 +930,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n     for predicate in env_predicates {\n         debug!(\"assemble_candidates_from_predicates: predicate={:?}\", predicate);\n-        if let ty::PredicateKind::Projection(data) = predicate.kind() {\n+        if let &ty::PredicateKind::Projection(data) = predicate.kind() {\n             let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;\n \n             let is_match = same_def_id\n@@ -1167,12 +1167,10 @@ fn confirm_object_candidate<'cx, 'tcx>(\n         // select only those projections that are actually projecting an\n         // item with the correct name\n         let env_predicates = env_predicates.filter_map(|o| match o.predicate.kind() {\n-            ty::PredicateKind::Projection(data) => {\n-                if data.projection_def_id() == obligation.predicate.item_def_id {\n-                    Some(data)\n-                } else {\n-                    None\n-                }\n+            &ty::PredicateKind::Projection(data)\n+                if data.projection_def_id() == obligation.predicate.item_def_id =>\n+            {\n+                Some(data)\n             }\n             _ => None,\n         });"}, {"sha": "0574da38f56bf66db93f2b8cf30d7c239e6cef15", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -414,13 +414,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         match obligation.predicate.kind() {\n-            ty::PredicateKind::Trait(ref t, _) => {\n+            ty::PredicateKind::Trait(t, _) => {\n                 debug_assert!(!t.has_escaping_bound_vars());\n                 let obligation = obligation.with(*t);\n                 self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n             }\n \n-            ty::PredicateKind::Subtype(ref p) => {\n+            ty::PredicateKind::Subtype(p) => {\n                 // Does this code ever run?\n                 match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {\n                     Some(Ok(InferOk { mut obligations, .. })) => {\n@@ -435,7 +435,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::WellFormed(ty) => match wf::obligations(\n+            &ty::PredicateKind::WellFormed(ty) => match wf::obligations(\n                 self.infcx,\n                 obligation.param_env,\n                 obligation.cause.body_id,\n@@ -454,15 +454,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(EvaluatedToOkModuloRegions)\n             }\n \n-            ty::PredicateKind::ObjectSafe(trait_def_id) => {\n+            &ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 if self.tcx().is_object_safe(trait_def_id) {\n                     Ok(EvaluatedToOk)\n                 } else {\n                     Ok(EvaluatedToErr)\n                 }\n             }\n \n-            ty::PredicateKind::Projection(ref data) => {\n+            ty::PredicateKind::Projection(data) => {\n                 let project_obligation = obligation.with(*data);\n                 match project::poly_project_and_unify_type(self, &project_obligation) {\n                     Ok(Some(mut subobligations)) => {\n@@ -483,7 +483,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {\n+            &ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {\n                 match self.infcx.closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         if closure_kind.extends(kind) {\n@@ -496,7 +496,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+            &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n                 match self.tcx().const_eval_resolve(\n                     obligation.param_env,\n                     def_id,"}, {"sha": "5118859765ed703eccd64a68315cf5b1d3d9472f", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -73,28 +73,28 @@ pub fn predicate_obligations<'a, 'tcx>(\n \n     // (*) ok to skip binders, because wf code is prepared for it\n     match predicate.kind() {\n-        ty::PredicateKind::Trait(ref t, _) => {\n+        ty::PredicateKind::Trait(t, _) => {\n             wf.compute_trait_ref(&t.skip_binder().trait_ref, Elaborate::None); // (*)\n         }\n         ty::PredicateKind::RegionOutlives(..) => {}\n-        ty::PredicateKind::TypeOutlives(ref t) => {\n+        ty::PredicateKind::TypeOutlives(t) => {\n             wf.compute(t.skip_binder().0);\n         }\n-        ty::PredicateKind::Projection(ref t) => {\n+        ty::PredicateKind::Projection(t) => {\n             let t = t.skip_binder(); // (*)\n             wf.compute_projection(t.projection_ty);\n             wf.compute(t.ty);\n         }\n-        ty::PredicateKind::WellFormed(t) => {\n+        &ty::PredicateKind::WellFormed(t) => {\n             wf.compute(t);\n         }\n         ty::PredicateKind::ObjectSafe(_) => {}\n         ty::PredicateKind::ClosureKind(..) => {}\n-        ty::PredicateKind::Subtype(ref data) => {\n+        ty::PredicateKind::Subtype(data) => {\n             wf.compute(data.skip_binder().a); // (*)\n             wf.compute(data.skip_binder().b); // (*)\n         }\n-        ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+        &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n             let obligations = wf.nominal_obligations(def_id, substs);\n             wf.out.extend(obligations);\n "}, {"sha": "9a5fe9552d35a014e94e6bf000ae818980e95af4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -1605,7 +1605,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 .map(|item| item.def_id),\n                         );\n                     }\n-                    ty::PredicateKind::Projection(pred) => {\n+                    &ty::PredicateKind::Projection(pred) => {\n                         // A `Self` within the original bound will be substituted with a\n                         // `trait_object_dummy_self`, so check for that.\n                         let references_self ="}, {"sha": "2a1c6b895ce20b55c5e8505251a5aef87bdaf058", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -597,7 +597,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_pred = match obligation.predicate.kind() {\n-                ty::PredicateKind::Trait(trait_pred, _)\n+                &ty::PredicateKind::Trait(trait_pred, _)\n                     if traits.contains(&trait_pred.def_id()) =>\n                 {\n                     if unsize_did == trait_pred.def_id() {"}, {"sha": "594cdab852fdafcf07c6d97822fe070c11eafaee", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6544d7b6b1c06b1c5607118365fb992a39075b0c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=6544d7b6b1c06b1c5607118365fb992a39075b0c", "patch": "@@ -232,10 +232,10 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             let mut relator: SimpleEqRelation<'tcx> = SimpleEqRelation::new(tcx, self_param_env);\n             match (predicate.kind(), p.kind()) {\n                 (ty::PredicateKind::Trait(a, _), ty::PredicateKind::Trait(b, _)) => {\n-                    relator.relate(&a, &b).is_ok()\n+                    relator.relate(a, b).is_ok()\n                 }\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {\n-                    relator.relate(&a, &b).is_ok()\n+                    relator.relate(a, b).is_ok()\n                 }\n                 _ => predicate == p,\n             }"}]}