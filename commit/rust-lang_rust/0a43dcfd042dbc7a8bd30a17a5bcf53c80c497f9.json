{"sha": "0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDNkY2ZkMDQyZGJjN2E4YmQzMGExN2E1YmNmNTNjODBjNDk3Zjk=", "commit": {"author": {"name": "pJunger", "email": "pJunger@users.noreply.github.com", "date": "2019-05-12T19:53:28Z"}, "committer": {"name": "pJunger", "email": "pJunger@users.noreply.github.com", "date": "2019-05-18T07:33:26Z"}, "message": "Fixed more lint findings.", "tree": {"sha": "9863a245ee6317341301cb3a9cc06a818fc1a1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9863a245ee6317341301cb3a9cc06a818fc1a1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "html_url": "https://github.com/rust-lang/rust/commit/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9/comments", "author": {"login": "pJunger", "id": 16426009, "node_id": "MDQ6VXNlcjE2NDI2MDA5", "avatar_url": "https://avatars.githubusercontent.com/u/16426009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pJunger", "html_url": "https://github.com/pJunger", "followers_url": "https://api.github.com/users/pJunger/followers", "following_url": "https://api.github.com/users/pJunger/following{/other_user}", "gists_url": "https://api.github.com/users/pJunger/gists{/gist_id}", "starred_url": "https://api.github.com/users/pJunger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pJunger/subscriptions", "organizations_url": "https://api.github.com/users/pJunger/orgs", "repos_url": "https://api.github.com/users/pJunger/repos", "events_url": "https://api.github.com/users/pJunger/events{/privacy}", "received_events_url": "https://api.github.com/users/pJunger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pJunger", "id": 16426009, "node_id": "MDQ6VXNlcjE2NDI2MDA5", "avatar_url": "https://avatars.githubusercontent.com/u/16426009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pJunger", "html_url": "https://github.com/pJunger", "followers_url": "https://api.github.com/users/pJunger/followers", "following_url": "https://api.github.com/users/pJunger/following{/other_user}", "gists_url": "https://api.github.com/users/pJunger/gists{/gist_id}", "starred_url": "https://api.github.com/users/pJunger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pJunger/subscriptions", "organizations_url": "https://api.github.com/users/pJunger/orgs", "repos_url": "https://api.github.com/users/pJunger/repos", "events_url": "https://api.github.com/users/pJunger/events{/privacy}", "received_events_url": "https://api.github.com/users/pJunger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c86b3758d5ee0ee0b151d4f4b0dcc06c70ed1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c86b3758d5ee0ee0b151d4f4b0dcc06c70ed1ae", "html_url": "https://github.com/rust-lang/rust/commit/1c86b3758d5ee0ee0b151d4f4b0dcc06c70ed1ae"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "48d941f9f8ba8c8c5cd3a3f608d3a9828c15e717", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "patch": "@@ -123,9 +123,7 @@ impl<'a> Conversion<'a> {\n \n     /// Checks if the to-type is the same (if there is a type constraint)\n     fn has_compatible_to_type(&self, other: &Self) -> bool {\n-        transpose(self.to_type.as_ref(), other.to_type.as_ref())\n-            .map(|(l, r)| l == r)\n-            .unwrap_or(true)\n+        transpose(self.to_type.as_ref(), other.to_type.as_ref()).map_or(true, |(l, r)| l == r)\n     }\n \n     /// Try to construct a new conversion if the conversion type is valid\n@@ -149,7 +147,7 @@ impl<'a> Conversion<'a> {\n \n impl ConversionType {\n     /// Creates a conversion type if the type is allowed & conversion is valid\n-    fn try_new(from: &str, to: &str) -> Option<ConversionType> {\n+    fn try_new(from: &str, to: &str) -> Option<Self> {\n         if UNSIGNED_TYPES.contains(&from) {\n             Some(ConversionType::FromUnsigned)\n         } else if SIGNED_TYPES.contains(&from) {"}, {"sha": "f289c278a8c9416ab4fa4ba0ac9eb3f877836793", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "patch": "@@ -10,6 +10,7 @@ use rustc::ty;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::util::IntTypeExt;\n use rustc::{declare_lint_pass, declare_tool_lint};\n+use std::convert::TryFrom;\n use syntax::ast::{IntTy, UintTy};\n \n declare_clippy_lint! {\n@@ -65,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                         match ty.sty {\n                             ty::Int(IntTy::Isize) => {\n                                 let val = ((val as i128) << 64) >> 64;\n-                                if val <= i128::from(i32::max_value()) && val >= i128::from(i32::min_value()) {\n+                                if i32::try_from(val).is_ok() {\n                                     continue;\n                                 }\n                             },"}]}