{"sha": "6bc55c701f50ccdc8605b37cdf62d02ec596b108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzU1YzcwMWY1MGNjZGM4NjA1YjM3Y2RmNjJkMDJlYzU5NmIxMDg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-09T20:07:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-18T23:37:08Z"}, "message": "Remove `AssocTypeBound` and propagate bound `Span`s", "tree": {"sha": "fdc555451eb61ca2504f1ff81164a84ceb55844f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc555451eb61ca2504f1ff81164a84ceb55844f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc55c701f50ccdc8605b37cdf62d02ec596b108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc55c701f50ccdc8605b37cdf62d02ec596b108", "html_url": "https://github.com/rust-lang/rust/commit/6bc55c701f50ccdc8605b37cdf62d02ec596b108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc55c701f50ccdc8605b37cdf62d02ec596b108/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1c23c993dc65810b535bed8c305643c892a2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1c23c993dc65810b535bed8c305643c892a2a4", "html_url": "https://github.com/rust-lang/rust/commit/ad1c23c993dc65810b535bed8c305643c892a2a4"}], "stats": {"total": 393, "additions": 106, "deletions": 287}, "files": [{"sha": "47c8aa023f0439c69b6bb718ca61ad6030dcd5ad", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -257,8 +257,6 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// #[feature(trivial_bounds)] is not enabled\n     TrivialBound,\n-\n-    AssocTypeBound(Box<AssocTypeBoundData>),\n }\n \n impl ObligationCauseCode<'_> {\n@@ -272,13 +270,6 @@ impl ObligationCauseCode<'_> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct AssocTypeBoundData {\n-    pub impl_span: Option<Span>,\n-    pub original: Span,\n-    pub bounds: Vec<Span>,\n-}\n-\n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(ObligationCauseCode<'_>, 32);"}, {"sha": "b7d0f6666bd38faee505f95aad70bd354d7c216d", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -501,7 +501,6 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::MethodReceiver => Some(super::MethodReceiver),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n             super::TrivialBound => Some(super::TrivialBound),\n-            super::AssocTypeBound(ref data) => Some(super::AssocTypeBound(data.clone())),\n         }\n     }\n }"}, {"sha": "52bf2e6ad490cfdda79054b7dcaec994c3e797bc", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1684,15 +1684,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.help(\"add `#![feature(trivial_bounds)]` to the crate attributes to enable\");\n                 }\n             }\n-            ObligationCauseCode::AssocTypeBound(ref data) => {\n-                err.span_label(data.original, \"associated type defined here\");\n-                if let Some(sp) = data.impl_span {\n-                    err.span_label(sp, \"in this `impl` item\");\n-                }\n-                for sp in &data.bounds {\n-                    err.span_label(*sp, \"restricted in this bound\");\n-                }\n-            }\n         }\n     }\n "}, {"sha": "0cda92b7dc8b46d969c2e8b42e9546c68ea86c07", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 50, "deletions": 179, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,12 +1,11 @@\n use crate::infer::InferCtxt;\n use crate::opaque_types::required_region_bounds;\n-use crate::traits::{self, AssocTypeBoundData};\n+use crate::traits;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n use std::rc::Rc;\n \n@@ -143,137 +142,57 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     pred: &ty::Predicate<'_>,\n     mut trait_assoc_items: impl Iterator<Item = ty::AssocItem>,\n ) {\n-    let trait_item =\n-        tcx.hir().as_local_hir_id(trait_ref.def_id).and_then(|trait_id| tcx.hir().find(trait_id));\n-    let (trait_name, trait_generics) = match trait_item {\n-        Some(hir::Node::Item(hir::Item {\n-            ident,\n-            kind: hir::ItemKind::Trait(.., generics, _, _),\n-            ..\n-        }))\n-        | Some(hir::Node::Item(hir::Item {\n-            ident,\n-            kind: hir::ItemKind::TraitAlias(generics, _),\n-            ..\n-        })) => (Some(ident), Some(generics)),\n-        _ => (None, None),\n+    debug!(\n+        \"extended_cause_with_original_assoc_item_obligation {:?} {:?} {:?} {:?}\",\n+        trait_ref, item, cause, pred\n+    );\n+    let items = match item {\n+        Some(hir::Item { kind: hir::ItemKind::Impl { items, .. }, .. }) => items,\n+        _ => return,\n     };\n-\n-    let item_span = item.map(|i| tcx.sess.source_map().guess_head_span(i.span));\n+    let fix_span =\n+        |impl_item_ref: &hir::ImplItemRef<'_>| match tcx.hir().impl_item(impl_item_ref.id).kind {\n+            hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::TyAlias(ty) => ty.span,\n+            _ => impl_item_ref.span,\n+        };\n     match pred {\n         ty::Predicate::Projection(proj) => {\n             // The obligation comes not from the current `impl` nor the `trait` being\n             // implemented, but rather from a \"second order\" obligation, like in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`:\n-            //\n-            //   error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-            //     --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n-            //      |\n-            //   LL |     type Ok;\n-            //      |          -- associated type defined here\n-            //   ...\n-            //   LL | impl Bar for Foo {\n-            //      | ---------------- in this `impl` item\n-            //   LL |     type Ok = ();\n-            //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n-            //      |\n-            //      = note: expected type `u32`\n-            //                 found type `()`\n-            //\n-            // FIXME: we would want to point a span to all places that contributed to this\n-            // obligation. In the case above, it should be closer to:\n-            //\n-            //   error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-            //     --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n-            //      |\n-            //   LL |     type Ok;\n-            //      |          -- associated type defined here\n-            //   LL |     type Sibling: Bar2<Ok=Self::Ok>;\n-            //      |     -------------------------------- obligation set here\n-            //   ...\n-            //   LL | impl Bar for Foo {\n-            //      | ---------------- in this `impl` item\n-            //   LL |     type Ok = ();\n-            //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n-            //   ...\n-            //   LL | impl Bar2 for Foo2 {\n-            //      | ---------------- in this `impl` item\n-            //   LL |     type Ok = u32;\n-            //      |     -------------- obligation set here\n-            //      |\n-            //      = note: expected type `u32`\n-            //                 found type `()`\n-            if let Some(hir::ItemKind::Impl { items, .. }) = item.map(|i| &i.kind) {\n-                let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n-                if let Some(impl_item) =\n-                    items.iter().find(|item| item.ident == trait_assoc_item.ident)\n-                {\n-                    cause.span = impl_item.span;\n-                    cause.code = traits::AssocTypeBound(Box::new(AssocTypeBoundData {\n-                        impl_span: item_span,\n-                        original: trait_assoc_item.ident.span,\n-                        bounds: vec![],\n-                    }));\n+            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`.\n+            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n+            if let Some(impl_item_span) =\n+                items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+            {\n+                cause.span = impl_item_span;\n+            } else {\n+                let kind = &proj.ty().skip_binder().kind;\n+                if let ty::Projection(projection_ty) = kind {\n+                    // This happens when an associated type has a projection coming from another\n+                    // associated type. See `traits-assoc-type-in-supertrait-bad.rs`.\n+                    let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n+                    if let Some(impl_item_span) =\n+                        items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+                    {\n+                        cause.span = impl_item_span;\n+                    }\n                 }\n             }\n         }\n-        ty::Predicate::Trait(proj, _) => {\n-            // An associated item obligation born out of the `trait` failed to be met.\n-            // Point at the `impl` that failed the obligation, the associated item that\n-            // needed to meet the obligation, and the definition of that associated item,\n-            // which should hold the obligation in most cases. An example can be seen in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs`:\n-            //\n-            //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n-            //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n-            //      |\n-            //   LL |     type Assoc: Bar;\n-            //      |          ----- associated type defined here\n-            //   ...\n-            //   LL | impl Foo for () {\n-            //      | --------------- in this `impl` item\n-            //   LL |     type Assoc = bool;\n-            //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n-            //\n-            // If the obligation comes from the where clause in the `trait`, we point at it:\n-            //\n-            //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n-            //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n-            //      |\n-            //      | trait Foo where <Self as Foo>>::Assoc: Bar {\n-            //      |                 -------------------------- restricted in this bound\n-            //   LL |     type Assoc;\n-            //      |          ----- associated type defined here\n-            //   ...\n-            //   LL | impl Foo for () {\n-            //      | --------------- in this `impl` item\n-            //   LL |     type Assoc = bool;\n-            //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n-            if let (\n-                ty::Projection(ty::ProjectionTy { item_def_id, .. }),\n-                Some(hir::ItemKind::Impl { items, .. }),\n-            ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind))\n+        ty::Predicate::Trait(pred, _) => {\n+            // An associated item obligation born out of the `trait` failed to be met. An example\n+            // can be seen in `ui/associated-types/point-at-type-on-obligation-failure-2.rs`.\n+            debug!(\"extended_cause_with_original_assoc_item_obligation trait proj {:?}\", pred);\n+            if let ty::Projection(ty::ProjectionTy { item_def_id, .. }) =\n+                &pred.skip_binder().self_ty().kind\n             {\n-                if let Some((impl_item, trait_assoc_item)) = trait_assoc_items\n+                if let Some(impl_item_span) = trait_assoc_items\n                     .find(|i| i.def_id == *item_def_id)\n                     .and_then(|trait_assoc_item| {\n-                        items\n-                            .iter()\n-                            .find(|i| i.ident == trait_assoc_item.ident)\n-                            .map(|impl_item| (impl_item, trait_assoc_item))\n+                        items.iter().find(|i| i.ident == trait_assoc_item.ident).map(fix_span)\n                     })\n                 {\n-                    let bounds = trait_generics\n-                        .map(|generics| {\n-                            get_generic_bound_spans(&generics, trait_name, trait_assoc_item.ident)\n-                        })\n-                        .unwrap_or_else(Vec::new);\n-                    cause.span = impl_item.span;\n-                    cause.code = traits::AssocTypeBound(Box::new(AssocTypeBoundData {\n-                        impl_span: item_span,\n-                        original: trait_assoc_item.ident.span,\n-                        bounds,\n-                    }));\n+                    cause.span = impl_item_span;\n                 }\n             }\n         }\n@@ -307,6 +226,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n \n+        debug!(\"compute_trait_ref obligations {:?}\", obligations);\n         let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n \n@@ -315,16 +235,16 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         if let Elaborate::All = elaborate {\n             let implied_obligations = traits::util::elaborate_obligations(tcx, obligations.clone());\n             let implied_obligations = implied_obligations.map(|obligation| {\n+                debug!(\"compute_trait_ref implied_obligation {:?}\", obligation);\n+                debug!(\"compute_trait_ref implied_obligation cause {:?}\", obligation.cause);\n                 let mut cause = cause.clone();\n-                let parent_trait_ref = obligation\n-                    .predicate\n-                    .to_opt_poly_trait_ref()\n-                    .unwrap_or_else(|| ty::Binder::dummy(*trait_ref));\n-                let derived_cause = traits::DerivedObligationCause {\n-                    parent_trait_ref,\n-                    parent_code: Rc::new(obligation.cause.code.clone()),\n-                };\n-                cause.code = traits::ObligationCauseCode::ImplDerivedObligation(derived_cause);\n+                if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n+                    let derived_cause = traits::DerivedObligationCause {\n+                        parent_trait_ref,\n+                        parent_code: Rc::new(obligation.cause.code.clone()),\n+                    };\n+                    cause.code = traits::ObligationCauseCode::ImplDerivedObligation(derived_cause);\n+                }\n                 extend_cause_with_original_assoc_item_obligation(\n                     tcx,\n                     trait_ref,\n@@ -333,6 +253,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     &obligation.predicate,\n                     tcx.associated_items(trait_ref.def_id).in_definition_order().copied(),\n                 );\n+                debug!(\"compute_trait_ref new cause {:?}\", cause);\n                 traits::Obligation::new(cause, param_env, obligation.predicate)\n             });\n             self.out.extend(implied_obligations);\n@@ -719,53 +640,3 @@ pub fn object_region_bounds<'tcx>(\n \n     required_region_bounds(tcx, open_ty, predicates)\n }\n-\n-/// Find the span of a generic bound affecting an associated type.\n-fn get_generic_bound_spans(\n-    generics: &hir::Generics<'_>,\n-    trait_name: Option<&Ident>,\n-    assoc_item_name: Ident,\n-) -> Vec<Span> {\n-    let mut bounds = vec![];\n-    for clause in generics.where_clause.predicates.iter() {\n-        if let hir::WherePredicate::BoundPredicate(pred) = clause {\n-            match &pred.bounded_ty.kind {\n-                hir::TyKind::Path(hir::QPath::Resolved(Some(ty), path)) => {\n-                    let mut s = path.segments.iter();\n-                    if let (a, Some(b), None) = (s.next(), s.next(), s.next()) {\n-                        if a.map(|s| &s.ident) == trait_name\n-                            && b.ident == assoc_item_name\n-                            && is_self_path(&ty.kind)\n-                        {\n-                            // `<Self as Foo>::Bar`\n-                            bounds.push(pred.span);\n-                        }\n-                    }\n-                }\n-                hir::TyKind::Path(hir::QPath::TypeRelative(ty, segment)) => {\n-                    if segment.ident == assoc_item_name {\n-                        if is_self_path(&ty.kind) {\n-                            // `Self::Bar`\n-                            bounds.push(pred.span);\n-                        }\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-    bounds\n-}\n-\n-fn is_self_path(kind: &hir::TyKind<'_>) -> bool {\n-    if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) = kind {\n-        let mut s = path.segments.iter();\n-        if let (Some(segment), None) = (s.next(), s.next()) {\n-            if segment.ident.name == kw::SelfUpper {\n-                // `type(Self)`\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}"}, {"sha": "3aaa84da75261697bcd0d95e8cf04476fb6254a1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1045,7 +1045,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 bounds,\n                 speculative,\n                 &mut dup_bindings,\n-                span,\n+                binding.span,\n             );\n             // Okay to ignore `Err` because of `ErrorReported` (see above).\n         }"}, {"sha": "b6a88179c1f63ab81d687f4ee405f3be3bb357dd", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -28,7 +28,7 @@ LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0222]: ambiguous associated type `Color` in bounds of `BoxCar`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:30\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n    |\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n@@ -37,7 +37,7 @@ LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n-   |                              ^^^^^^^^^^^^^^^^^^^ ambiguous associated type `Color`\n+   |                                     ^^^^^^^^^^^ ambiguous associated type `Color`\n    |\n    = help: consider introducing a new type parameter `T` and adding `where` constraints:\n                where"}, {"sha": "cdc9559cd95e983a13ebf4bf70b9a29f63258508", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,39 +1,37 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:18\n    |\n+LL | trait Foo {\n+   |       ---\n LL |     type Assoc: Bar;\n-   |          ----- associated type defined here\n+   |                 --- required by this bound in `Foo`\n ...\n-LL | impl Foo for () {\n-   | --------------- in this `impl` item\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n+   |\n+   = note: required because of the requirements on the impl of `Bar` for `<() as Foo>::Assoc`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:16:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:16:18\n    |\n LL | trait Baz where Self::Assoc: Bar {\n-   |                 ---------------- restricted in this bound\n-LL |     type Assoc;\n-   |          ----- associated type defined here\n+   |                              --- required by this bound in `Baz`\n ...\n-LL | impl Baz for () {\n-   | --------------- in this `impl` item\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n+   |\n+   = note: required because of the requirements on the impl of `Bar` for `<() as Baz>::Assoc`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:18\n    |\n LL | trait Bat where <Self as Bat>::Assoc: Bar {\n-   |                 ------------------------- restricted in this bound\n-LL |     type Assoc;\n-   |          ----- associated type defined here\n+   |                                       --- required by this bound in `Bat`\n ...\n-LL | impl Bat for () {\n-   | --------------- in this `impl` item\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n+   |\n+   = note: required because of the requirements on the impl of `Bar` for `<() as Bat>::Assoc`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "818702b7afe2ab2e850e07be78e993aca59ceb17", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,13 +1,8 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-  --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n+  --> $DIR/point-at-type-on-obligation-failure.rs:13:15\n    |\n-LL |     type Ok;\n-   |          -- associated type defined here\n-...\n-LL | impl Bar for Foo {\n-   | ---------------- in this `impl` item\n LL |     type Ok = ();\n-   |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n+   |               ^^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "bad746f7ef12181ae0b728e9ed12bf716e22e640", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,19 +1,12 @@\n error[E0271]: type mismatch resolving `for<'a> <<T as Baz>::Baa<'a> as std::ops::Deref>::Target == <<T as Baz>::Quux<'a> as Foo>::Bar<'a, 'static>`\n   --> $DIR/construct_with_other_type.rs:19:9\n    |\n-LL | trait Baz {\n-   |       ---\n-...\n-LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>  where Self: 'a;\n-   |                         -------------------------------------------------- required by this bound in `Baz`\n-...\n LL | impl<T> Baz for T where T: Foo {\n    |         ^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected associated type `<T as Foo>::Bar<'_, 'static>`\n               found associated type `<<T as Baz>::Quux<'_> as Foo>::Bar<'_, 'static>`\n    = note: you might be missing a type parameter or trait bound\n-   = note: required because of the requirements on the impl of `Baz` for `T`\n \n error: aborting due to previous error\n "}, {"sha": "6bc5a2319a980fd0ae98e93fe3656228b971ac50", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,33 +1,19 @@\n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:15:5\n+  --> $DIR/iterable.rs:15:33\n    |\n-LL | impl<T> Iterable for Vec<T> {\n-   | --------------------------- in this `impl` item\n LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   | \n-  ::: $SRC_DIR/libcore/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     type Item;\n-   |          ---- associated type defined here\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n    |\n    = note:    expected reference `&T`\n            found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n    = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:27:5\n+  --> $DIR/iterable.rs:27:33\n    |\n-LL | impl<T> Iterable for [T] {\n-   | ------------------------ in this `impl` item\n LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   | \n-  ::: $SRC_DIR/libcore/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     type Item;\n-   |          ---- associated type defined here\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n    |\n    = note:    expected reference `&T`\n            found associated type `<[T] as Iterable>::Item<'_>`"}, {"sha": "fa835f5543dedeccd94d14ccaa2a6b2e8e107627", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,14 +1,10 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-43784-associated-type.rs:14:5\n+  --> $DIR/issue-43784-associated-type.rs:14:18\n    |\n-LL |     type Assoc: Partial<Self>;\n-   |          ----- associated type defined here\n-...\n-LL | impl<T> Complete for T {\n-   | ---------------------- in this `impl` item\n LL |     type Assoc = T;\n-   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |                  ^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+   = note: required because of the requirements on the impl of `std::marker::Copy` for `<T as Complete>::Assoc`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {"}, {"sha": "d1a490eb5657d15947fe81dac904f0711c5f6f58", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,16 +1,17 @@\n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-65673.rs:9:5\n+  --> $DIR/issue-65673.rs:9:16\n    |\n+LL | trait WithType {\n+   |       --------\n LL |     type Ctx;\n-   |          --- associated type defined here\n+   |     --------- required by this bound in `WithType`\n ...\n-LL | impl<T> WithType for T {\n-   | ---------------------- in this `impl` item\n LL |     type Ctx = dyn Alias<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `<T as WithType>::Ctx`\n \n error: aborting due to previous error\n "}, {"sha": "2091e30f115939a23024e80bfd861f28a81423fc", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -13,20 +13,22 @@ LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n    |                   the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:20:5\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:20:18\n    |\n+LL | trait Parent {\n+   |       ------\n+LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n-   |          ----- associated type defined here\n+   |                 --------------- required by this bound in `Parent`\n ...\n LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   | ------------------------------------------------------- help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-   | |\n-   | in this `impl` item\n+   |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n ...\n LL |     type Assoc = ChildWrapper<T::Assoc>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n    |\n    = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n+   = note: required because of the requirements on the impl of `Child<<ParentWrapper<T> as Parent>::Ty>` for `<ParentWrapper<T> as Parent>::Assoc`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5"}, {"sha": "9e2e5568ba249524d3b9b0701e3b111a0197a7b7", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -7,20 +7,21 @@ LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n \n error[E0275]: overflow evaluating the requirement `Runtime<RootDatabase>: std::panic::RefUnwindSafe`\n-  --> $DIR/cycle-cache-err-60010.rs:31:5\n+  --> $DIR/cycle-cache-err-60010.rs:31:20\n    |\n+LL | trait Database {\n+   |       --------\n LL |     type Storage;\n-   |          ------- associated type defined here\n+   |     ------------- required by this bound in `Database`\n ...\n-LL | impl Database for RootDatabase {\n-   | ------------------------------ in this `impl` item\n LL |     type Storage = SalsaStorage;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^\n    |\n    = note: required because it appears within the type `RootDatabase`\n    = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n    = note: required because it appears within the type `SalsaStorage`\n+   = note: required because of the requirements on the impl of `std::marker::Sized` for `<RootDatabase as Database>::Storage`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "579ce7cf70669c9f55c96078d84460a2c45d551d", "filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.rs?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -8,8 +8,8 @@ pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n     type Key;\n }\n \n-impl Foo for IntoIter<i32> { //~ ERROR type mismatch\n-    type Key = u32;\n+impl Foo for IntoIter<i32> {\n+    type Key = u32; //~ ERROR type mismatch\n }\n \n fn main() {"}, {"sha": "604763f8e354e07e82f7f78ac14b7b031f2156d8", "filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -1,13 +1,8 @@\n error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as std::iter::Iterator>::Item == u32`\n-  --> $DIR/traits-assoc-type-in-supertrait-bad.rs:11:6\n+  --> $DIR/traits-assoc-type-in-supertrait-bad.rs:12:16\n    |\n-LL | pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n-   |                         ----------------------- required by this bound in `Foo`\n-...\n-LL | impl Foo for IntoIter<i32> {\n-   |      ^^^ expected `i32`, found `u32`\n-   |\n-   = note: required because of the requirements on the impl of `Foo` for `std::vec::IntoIter<i32>`\n+LL |     type Key = u32;\n+   |                ^^^ expected `i32`, found `u32`\n \n error: aborting due to previous error\n "}, {"sha": "c81402a3dcc004cc53a79fa788ec94f40b36eb78", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bc55c701f50ccdc8605b37cdf62d02ec596b108/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=6bc55c701f50ccdc8605b37cdf62d02ec596b108", "patch": "@@ -5,10 +5,10 @@ LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n    |        ^^^^^^^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Trait`\n-  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n+  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:24\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^ associated type `Output` not found\n+   |                        ^^^^^ associated type `Output` not found\n \n error: aborting due to 2 previous errors\n "}]}