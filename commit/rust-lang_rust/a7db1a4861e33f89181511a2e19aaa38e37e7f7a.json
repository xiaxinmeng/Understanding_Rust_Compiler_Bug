{"sha": "a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZGIxYTQ4NjFlMzNmODkxODE1MTFhMmUxOWFhYTM4ZTM3ZTdmN2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-04T00:43:49Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "or-patterns: address review comments.", "tree": {"sha": "06703f16153806de6455e6a471bce65d21e5630d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06703f16153806de6455e6a471bce65d21e5630d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "html_url": "https://github.com/rust-lang/rust/commit/a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70b0c5d42e9c3cf6580a399c30d87fde48c1919", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70b0c5d42e9c3cf6580a399c30d87fde48c1919", "html_url": "https://github.com/rust-lang/rust/commit/d70b0c5d42e9c3cf6580a399c30d87fde48c1919"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "f3c70462512af58a7e8f559d01742850a4b3f4d5", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "patch": "@@ -1109,7 +1109,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n     }\n \n     fn resolve_params(&mut self, params: &[Param]) {\n-        let mut bindings = smallvec![(false, <_>::default())];\n+        let mut bindings = smallvec![(false, Default::default())];\n         for Param { pat, ty, .. } in params {\n             self.resolve_pattern(pat, PatternSource::FnParam, &mut bindings);\n             self.visit_ty(ty);\n@@ -1255,7 +1255,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n     /// Arising from `source`, resolve a top level pattern.\n     fn resolve_pattern_top(&mut self, pat: &Pat, pat_src: PatternSource) {\n-        self.resolve_pattern(pat, pat_src, &mut smallvec![(false, <_>::default())]);\n+        self.resolve_pattern(pat, pat_src, &mut smallvec![(false, Default::default())]);\n     }\n \n     fn resolve_pattern(\n@@ -1270,6 +1270,25 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         visit::walk_pat(self, pat);\n     }\n \n+    /// Resolve bindings in a pattern. This is a helper to `resolve_pattern`.\n+    ///\n+    /// ### `bindings`\n+    ///\n+    /// A stack of sets of bindings accumulated.\n+    ///\n+    /// In each set, `false` denotes that a found binding in it should be interpreted as\n+    /// re-binding an already bound binding. This results in an error. Meanwhile, `true`\n+    /// denotes that a found binding in the set should result in reusing this binding\n+    /// rather  than creating a fresh one. In other words, `false` and `true` correspond\n+    /// to product (e.g., `(a, b)`) and sum/or contexts (e.g., `p_0 | ... | p_i`) respectively.\n+    ///\n+    /// When called at the top level, the stack should have a single element with `false`.\n+    /// Otherwise, pushing to the stack happens as or-patterns are encountered and the\n+    /// context needs to be switched to `true` and then `false` for each `p_i.\n+    /// When each `p_i` has been dealt with, the top set is merged with its parent.\n+    /// When a whole or-pattern has been dealt with, the thing happens.\n+    ///\n+    /// See the implementation and `fresh_binding` for more details.\n     fn resolve_pattern_inner(\n         &mut self,\n         pat: &Pat,\n@@ -1301,12 +1320,12 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                     // Add a new set of bindings to the stack. `true` here records that when a\n                     // binding already exists in this set, it should not result in an error because\n                     // `V1(a) | V2(a)` must be allowed and are checked for consistency later.\n-                    bindings.push((true, <_>::default()));\n+                    bindings.push((true, Default::default()));\n                     for p in ps {\n                         // Now we need to switch back to a product context so that each\n                         // part of the or-pattern internally rejects already bound names.\n                         // For example, `V1(a) | V2(a, a)` and `V1(a, a) | V2(a)` are bad.\n-                        bindings.push((false, <_>::default()));\n+                        bindings.push((false, Default::default()));\n                         self.resolve_pattern_inner(p, pat_src, bindings);\n                         // Move up the non-overlapping bindings to the or-pattern.\n                         // Existing bindings just get \"merged\"."}, {"sha": "c93e6d11ce711235829704edae3ca43d656db4bf", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "patch": "@@ -563,7 +563,7 @@ impl Pat {\n \n     /// Walk top-down and call `it` in each place where a pattern occurs\n     /// starting with the root pattern `walk` is called on. If `it` returns\n-    /// false then we will decend no further but siblings will be processed.\n+    /// false then we will descend no further but siblings will be processed.\n     pub fn walk(&self, it: &mut impl FnMut(&Pat) -> bool) {\n         if !it(self) {\n             return;\n@@ -1150,9 +1150,6 @@ pub enum ExprKind {\n     Type(P<Expr>, P<Ty>),\n     /// A `let pat = expr` expression that is only semantically allowed in the condition\n     /// of `if` / `while` expressions. (e.g., `if let 0 = x { .. }`).\n-    ///\n-    /// The `Vec<P<Pat>>` is for or-patterns at the top level.\n-    /// FIXME(54883): Change this to just `P<Pat>`.\n     Let(P<Pat>, P<Expr>),\n     /// An `if` block, with an optional `else` block.\n     ///"}, {"sha": "421c327aa414dc5b49556424b435b5f7b0bc3ee4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db1a4861e33f89181511a2e19aaa38e37e7f7a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a7db1a4861e33f89181511a2e19aaa38e37e7f7a", "patch": "@@ -831,7 +831,7 @@ pub fn walk_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a Param) {\n \n pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n     visitor.visit_pat(&arm.pat);\n-    // HACK(or_patterns; Centril | dlrobertson):\n+    // NOTE(or_patterns; Centril | dlrobertson):\n     // If you change this, also change the hack in `lowering.rs`.\n     walk_list!(visitor, visit_expr, &arm.guard);\n     visitor.visit_expr(&arm.body);"}]}