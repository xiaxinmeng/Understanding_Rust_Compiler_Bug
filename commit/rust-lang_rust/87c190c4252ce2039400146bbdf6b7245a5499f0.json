{"sha": "87c190c4252ce2039400146bbdf6b7245a5499f0", "node_id": "C_kwDOAAsO6NoAKDg3YzE5MGM0MjUyY2UyMDM5NDAwMTQ2YmJkZjZiNzI0NWE1NDk5ZjA", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-07T20:16:22Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-07T20:16:22Z"}, "message": "Reworked const fn ref tests", "tree": {"sha": "9783b3b77ceab30f328a17e8b5537968928e461d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9783b3b77ceab30f328a17e8b5537968928e461d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c190c4252ce2039400146bbdf6b7245a5499f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c190c4252ce2039400146bbdf6b7245a5499f0", "html_url": "https://github.com/rust-lang/rust/commit/87c190c4252ce2039400146bbdf6b7245a5499f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c190c4252ce2039400146bbdf6b7245a5499f0/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9896bfaa6c7bfd5d34119b7aecffbcc036b201", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9896bfaa6c7bfd5d34119b7aecffbcc036b201", "html_url": "https://github.com/rust-lang/rust/commit/0c9896bfaa6c7bfd5d34119b7aecffbcc036b201"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "bc8766c74c60f296693a436d415c5b62a709821e", "filename": "src/test/ui/consts/fn_trait_refs.rs", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/87c190c4252ce2039400146bbdf6b7245a5499f0/src%2Ftest%2Fui%2Fconsts%2Ffn_trait_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c190c4252ce2039400146bbdf6b7245a5499f0/src%2Ftest%2Fui%2Fconsts%2Ffn_trait_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ffn_trait_refs.rs?ref=87c190c4252ce2039400146bbdf6b7245a5499f0", "patch": "@@ -1,35 +1,80 @@\n-// run-pass\n+// build-pass\n+\n #![feature(const_fn_trait_ref_impls)]\n #![feature(fn_traits)]\n #![feature(unboxed_closures)]\n #![feature(const_trait_impl)]\n #![feature(const_mut_refs)]\n+#![feature(const_cmp)]\n+#![feature(const_refs_to_cell)]\n \n use std::marker::Destruct;\n \n-const fn test(i: i32) -> i32 {\n-    i + 1\n+const fn tester_fn<T>(f: T) -> T::Output\n+where\n+    T: ~const Fn<()> + ~const Destruct,\n+{\n+    f()\n }\n \n-const fn call<F: ~const FnMut(i32) -> i32 + ~const Destruct>(mut f: F) -> F::Output {\n-    f(5)\n+const fn tester_fn_mut<T>(mut f: T) -> T::Output\n+where\n+    T: ~const FnMut<()> + ~const Destruct,\n+{\n+    f()\n }\n \n-const fn use_fn<F: ~const FnMut(i32) -> i32 + ~const Destruct>(mut f: F) -> F::Output {\n-    call(&mut f)\n+const fn tester_fn_once<T>(f: T) -> T::Output\n+where\n+    T: ~const FnOnce<()>,\n+{\n+    f()\n }\n \n-const fn test_fn() {}\n+const fn test_fn<T>(mut f: T) -> (T::Output, T::Output, T::Output)\n+where\n+    T: ~const Fn<()> + ~const Destruct,\n+{\n+    (\n+        // impl<A: Tuple, F: ~const Fn + ?Sized> const Fn<A> for &F\n+        tester_fn(&f),\n+        // impl<A: Tuple, F: ~const Fn + ?Sized> const FnMut<A> for &F\n+        tester_fn_mut(&f),\n+        // impl<A: Tuple, F: ~const Fn + ?Sized> const FnOnce<A> for &F\n+        tester_fn_once(&f),\n+    )\n+}\n \n-const fn tester<T>(_fn: T)\n+const fn test_fn_mut<T>(mut f: T) -> (T::Output, T::Output)\n where\n-    T: ~const Fn() + ~const Destruct,\n+    T: ~const FnMut<()> + ~const Destruct,\n {\n+    (\n+        // impl<A: Tuple, F: ~const FnMut + ?Sized> const FnMut<A> for &mut F\n+        tester_fn_mut(&mut f),\n+        // impl<A: Tuple, F: ~const FnMut + ?Sized> const FnOnce<A> for &mut F\n+        tester_fn_once(&mut f),\n+    )\n+}\n+const fn test(i: i32) -> i32 {\n+    i + 1\n }\n \n const fn main() {\n-    tester(test_fn);\n-    let test_ref = &test_fn;\n-    tester(test_ref);\n-    assert!(use_fn(test) == 6);\n+    const fn one() -> i32 {\n+        1\n+    };\n+    const fn two() -> i32 {\n+        2\n+    };\n+\n+    // FIXME(const_cmp_tuple)\n+    let test_one = test_fn(one);\n+    assert!(test_one.0 == 1);\n+    assert!(test_one.1 == 1);\n+    assert!(test_one.2 == 1);\n+\n+    let test_two = test_fn_mut(two);\n+    assert!(test_two.0 == 1);\n+    assert!(test_two.1 == 1);\n }"}]}