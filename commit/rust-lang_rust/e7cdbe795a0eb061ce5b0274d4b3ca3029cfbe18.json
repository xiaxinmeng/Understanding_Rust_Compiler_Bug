{"sha": "e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3Y2RiZTc5NWEwZWIwNjFjZTViMDI3NGQ0YjNjYTMwMjljZmJlMTg=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-07-30T13:33:58Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-07-30T13:33:58Z"}, "message": "Fix flip comma assist", "tree": {"sha": "edfbc47d54e6642c68d168442fa260c5596c7463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edfbc47d54e6642c68d168442fa260c5596c7463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18", "html_url": "https://github.com/rust-lang/rust/commit/e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9aca0acef75b24199e70f82313732fa489c5e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9aca0acef75b24199e70f82313732fa489c5e1e", "html_url": "https://github.com/rust-lang/rust/commit/c9aca0acef75b24199e70f82313732fa489c5e1e"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "1b7521e8bbe105143fa916eb8068fd94ec2e3331", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=e7cdbe795a0eb061ce5b0274d4b3ca3029cfbe18", "patch": "@@ -7,6 +7,13 @@ pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     let comma = ctx.token_at_offset().find(|leaf| leaf.kind() == T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;\n+\n+    // Don't apply a \"flip\" in case of a last comma\n+    // that typically comes before punctuation\n+    if next.kind().is_punct() {\n+        return None;\n+    }\n+\n     ctx.add_action(AssistId(\"flip_comma\"), \"flip comma\", |edit| {\n         edit.target(comma.text_range());\n         edit.replace(prev.text_range(), next.to_string());\n@@ -35,4 +42,22 @@ mod tests {\n     fn flip_comma_target() {\n         check_assist_target(flip_comma, \"fn foo(x: i32,<|> y: Result<(), ()>) {}\", \",\")\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn flip_comma_before_punct() {\n+        // See https://github.com/rust-analyzer/rust-analyzer/issues/1619\n+        // \"Flip comma\" assist shouldn't be applicable to the last comma in enum or struct\n+        // declaration body.\n+        check_assist_target(flip_comma, \n+                            \"pub enum Test { \\\n+                                A,<|> \\\n+                            }\", \",\");\n+\n+        \n+        check_assist_target(flip_comma, \n+                            \"pub struct Test { \\\n+                                foo: usize,<|> \\\n+                            }\", \",\");\n+    }\n }"}]}