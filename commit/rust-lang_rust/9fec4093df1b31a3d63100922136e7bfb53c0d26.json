{"sha": "9fec4093df1b31a3d63100922136e7bfb53c0d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZWM0MDkzZGYxYjMxYTNkNjMxMDA5MjIxMzZlN2JmYjUzYzBkMjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-06-14T18:25:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-06-17T09:40:39Z"}, "message": "register the obligations from `wf::implied_bounds`\n\nFixes #42552.\nFixes #42545.", "tree": {"sha": "01d90b5b421e2e033c9be17dbae129a3b2322dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d90b5b421e2e033c9be17dbae129a3b2322dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fec4093df1b31a3d63100922136e7bfb53c0d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fec4093df1b31a3d63100922136e7bfb53c0d26", "html_url": "https://github.com/rust-lang/rust/commit/9fec4093df1b31a3d63100922136e7bfb53c0d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fec4093df1b31a3d63100922136e7bfb53c0d26/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a65d8d3d71d49ba87fd4e8bfb86b70ec7d2ad83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65d8d3d71d49ba87fd4e8bfb86b70ec7d2ad83f", "html_url": "https://github.com/rust-lang/rust/commit/a65d8d3d71d49ba87fd4e8bfb86b70ec7d2ad83f"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "44d85791f35c542bdea5872c91ebfe422ade6c49", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fec4093df1b31a3d63100922136e7bfb53c0d26/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fec4093df1b31a3d63100922136e7bfb53c0d26/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9fec4093df1b31a3d63100922136e7bfb53c0d26", "patch": "@@ -614,7 +614,8 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             .register_predicate_obligation(self, obligation);\n     }\n \n-    fn register_predicates(&self, obligations: Vec<traits::PredicateObligation<'tcx>>) {\n+    fn register_predicates<I>(&self, obligations: I)\n+    where I: IntoIterator<Item = traits::PredicateObligation<'tcx>> {\n         for obligation in obligations {\n             self.register_predicate(obligation);\n         }"}, {"sha": "5e79237da69d46a979b6c9fb325a182e1a91cbe6", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9fec4093df1b31a3d63100922136e7bfb53c0d26/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fec4093df1b31a3d63100922136e7bfb53c0d26/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=9fec4093df1b31a3d63100922136e7bfb53c0d26", "patch": "@@ -471,6 +471,32 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                 wf::obligations(self, self.fcx.param_env, body_id, ty, span)\n                 .unwrap_or(vec![]);\n \n+            // NB: All of these predicates *ought* to be easily proven\n+            // true. In fact, their correctness is (mostly) implied by\n+            // other parts of the program. However, in #42552, we had\n+            // an annoying scenario where:\n+            //\n+            // - Some `T::Foo` gets normalized, resulting in a\n+            //   variable `_1` and a `T: Trait<Foo=_1>` constraint\n+            //   (not sure why it couldn't immediately get\n+            //   solved). This result of `_1` got cached.\n+            // - These obligations were dropped on the floor here,\n+            //   rather than being registered.\n+            // - Then later we would get a request to normalize\n+            //   `T::Foo` which would result in `_1` being used from\n+            //   the cache, but hence without the `T: Trait<Foo=_1>`\n+            //   constraint. As a result, `_1` never gets resolved,\n+            //   and we get an ICE (in dropck).\n+            //\n+            // Therefore, we register any predicates involving\n+            // inference variables. We restrict ourselves to those\n+            // involving inference variables both for efficiency and\n+            // to avoids duplicate errors that otherwise show up.\n+            self.fcx.register_predicates(\n+                obligations.iter()\n+                           .filter(|o| o.predicate.has_infer_types())\n+                           .cloned());\n+\n             // From the full set of obligations, just filter down to the\n             // region relationships.\n             implied_bounds.extend("}, {"sha": "fd1265b7174f6de7668c971f967045f1d8ef3b1e", "filename": "src/test/run-pass/issue-42552.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9fec4093df1b31a3d63100922136e7bfb53c0d26/src%2Ftest%2Frun-pass%2Fissue-42552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fec4093df1b31a3d63100922136e7bfb53c0d26/src%2Ftest%2Frun-pass%2Fissue-42552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42552.rs?ref=9fec4093df1b31a3d63100922136e7bfb53c0d26", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for an obscure issue with the projection cache.\n+\n+fn into_iter<I: Iterator>(a: &I) -> Groups<I> {\n+    Groups { _a: a }\n+}\n+\n+pub struct Groups<'a, I: 'a> {\n+    _a: &'a I,\n+}\n+\n+impl<'a, I: Iterator> Iterator for Groups<'a, I> {\n+    type Item = Group<'a, I>;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+pub struct Group<'a, I: Iterator + 'a>\n+    where I::Item: 'a       // <-- needed to trigger ICE!\n+{\n+    _phantom: &'a (),\n+    _ice_trigger: I::Item,  // <-- needed to trigger ICE!\n+}\n+\n+\n+fn main() {\n+    let _ = into_iter(&[0].iter().map(|_| 0)).map(|grp| {\n+        let _g = grp;\n+    });\n+}"}]}