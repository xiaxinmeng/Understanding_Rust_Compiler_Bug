{"sha": "410f63dbb799873c591fd78c41c2f3b0edb228fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMGY2M2RiYjc5OTg3M2M1OTFmZDc4YzQxYzJmM2IwZWRiMjI4ZmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-09T13:33:49Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-09T17:01:27Z"}, "message": "Rollup merge of #53217 - strake:inline, r=nagisa\n\ninline some short functions\n\nI found these were outline in binaries i link. I think they ought to be inline, considering their size.", "tree": {"sha": "9c690a101391be4c460b8817c5b6d4d6022930d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c690a101391be4c460b8817c5b6d4d6022930d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410f63dbb799873c591fd78c41c2f3b0edb228fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltsc2cACgkQ/vbIBR0O\nATxejA//ctCAAkV7Y1rSiVx5W8bRrrYzwywEWYiL3Szj+zNm8XhuJBznkZc6efyf\nksguMLOlFIVoE+lxPlPIIXoE1HgFffeuXkZcPsmp6dJQSEhGS3VYfBYJxqMWvXCW\nL5cyMyy8po+1uj+qfUxDV56LxhJbvS2YBB9Ckmv3zVjYWIr5NoQh4GckIo/Kh8vV\nPnQrjvwcrKnmmhDfD9xNvNOVLgWG7CD6oW5gIwuhiGEXuZKeg5kWY3QU7XW9s7oO\nTEX+mw+TJWMbNFXZtkjrVBBH1yZDWuQwpd+34l7X79YPA5JrF0FpMYt5tx3nBJUO\nhVEP3mtONSHApxJsE2mWJjitp65kTstUHRNr9yIHI7xA1mPnkW8c0oAFdYAy2SrS\n+M0IPE227PS5V4w++kg0hpKrQU9k97EJg6rVz8c/0mscVrxjkxAXMNZEArsdGclE\nLPFeWF9MrBt2MCmytyGa1VC6C7rG/JH4tHZ8OQLG+0fXsBUGS/CIP+4ZdZJ+YWru\n3E0tbOGMDAzG4nj6rK13JIgpjwD63j+UZv2ckd2G1XWY1jVybqwDVmZUaXQ2V+YI\nbqIQCh7Sg3OwobIydQG8FQ4VIzz1PFdC21Mf0u2UYQ+3S5pPN4ktLr4lV3L5zoSr\nFE0pL6QO5d1TfVN6/hD3KBSorYM4L4x9nhXEGCCNnZb+sTFMXYE=\n=WCLb\n-----END PGP SIGNATURE-----", "payload": "tree 9c690a101391be4c460b8817c5b6d4d6022930d8\nparent db7494680331100f16620d694e57203d1ced50c7\nparent b78201aee550045246e824000a35bf445a84c7ee\nauthor kennytm <kennytm@gmail.com> 1533821629 +0800\ncommitter kennytm <kennytm@gmail.com> 1533834087 +0800\n\nRollup merge of #53217 - strake:inline, r=nagisa\n\ninline some short functions\n\nI found these were outline in binaries i link. I think they ought to be inline, considering their size.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410f63dbb799873c591fd78c41c2f3b0edb228fa", "html_url": "https://github.com/rust-lang/rust/commit/410f63dbb799873c591fd78c41c2f3b0edb228fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410f63dbb799873c591fd78c41c2f3b0edb228fa/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7494680331100f16620d694e57203d1ced50c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7494680331100f16620d694e57203d1ced50c7", "html_url": "https://github.com/rust-lang/rust/commit/db7494680331100f16620d694e57203d1ced50c7"}, {"sha": "b78201aee550045246e824000a35bf445a84c7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78201aee550045246e824000a35bf445a84c7ee", "html_url": "https://github.com/rust-lang/rust/commit/b78201aee550045246e824000a35bf445a84c7ee"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "58d6c4f5e09236640c8be496f352e6797c84c5ef", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410f63dbb799873c591fd78c41c2f3b0edb228fa/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f63dbb799873c591fd78c41c2f3b0edb228fa/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=410f63dbb799873c591fd78c41c2f3b0edb228fa", "patch": "@@ -469,6 +469,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert_eq!(2, 2.max(2));\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n+    #[inline]\n     fn max(self, other: Self) -> Self\n     where Self: Sized {\n         if other >= self { other } else { self }\n@@ -485,6 +486,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert_eq!(2, 2.min(2));\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n+    #[inline]\n     fn min(self, other: Self) -> Self\n     where Self: Sized {\n         if self <= other { self } else { other }"}, {"sha": "f743fbfd0752b6931151abf9c54146d64141e2d1", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/410f63dbb799873c591fd78c41c2f3b0edb228fa/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f63dbb799873c591fd78c41c2f3b0edb228fa/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=410f63dbb799873c591fd78c41c2f3b0edb228fa", "patch": "@@ -1141,6 +1141,7 @@ unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> Clone for Iter<'a, A> {\n+    #[inline]\n     fn clone(&self) -> Iter<'a, A> {\n         Iter { inner: self.inner.clone() }\n     }\n@@ -1307,14 +1308,17 @@ impl<T> ops::Try for Option<T> {\n     type Ok = T;\n     type Error = NoneError;\n \n+    #[inline]\n     fn into_result(self) -> Result<T, NoneError> {\n         self.ok_or(NoneError)\n     }\n \n+    #[inline]\n     fn from_ok(v: T) -> Self {\n         Some(v)\n     }\n \n+    #[inline]\n     fn from_error(_: NoneError) -> Self {\n         None\n     }"}, {"sha": "ac908342655b6ea88229c123dd63a05e72f407c2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/410f63dbb799873c591fd78c41c2f3b0edb228fa/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f63dbb799873c591fd78c41c2f3b0edb228fa/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=410f63dbb799873c591fd78c41c2f3b0edb228fa", "patch": "@@ -1084,6 +1084,7 @@ unsafe impl<'a, A> TrustedLen for Iter<'a, A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n+    #[inline]\n     fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n }\n \n@@ -1235,14 +1236,17 @@ impl<T,E> ops::Try for Result<T, E> {\n     type Ok = T;\n     type Error = E;\n \n+    #[inline]\n     fn into_result(self) -> Self {\n         self\n     }\n \n+    #[inline]\n     fn from_ok(v: T) -> Self {\n         Ok(v)\n     }\n \n+    #[inline]\n     fn from_error(v: E) -> Self {\n         Err(v)\n     }"}]}