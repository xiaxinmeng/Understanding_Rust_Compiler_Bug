{"sha": "7d5b746e1c83f23bc015e73582e102528f05db24", "node_id": "C_kwDOAAsO6NoAKDdkNWI3NDZlMWM4M2YyM2JjMDE1ZTczNTgyZTEwMjUyOGYwNWRiMjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-03T04:54:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-03T04:54:28Z"}, "message": "Auto merge of #111350 - chenyukang:yukang-remove-type-asc, r=Nilstrieb\n\nRemove leftover of type ascription feature gating\n\nFixes #111325\n\nr? `@Nilstrieb`", "tree": {"sha": "1313b584292fd4dceac7f83ddad9e1dfb9ef9f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1313b584292fd4dceac7f83ddad9e1dfb9ef9f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5b746e1c83f23bc015e73582e102528f05db24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5b746e1c83f23bc015e73582e102528f05db24", "html_url": "https://github.com/rust-lang/rust/commit/7d5b746e1c83f23bc015e73582e102528f05db24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5b746e1c83f23bc015e73582e102528f05db24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff88b206416d814a90c8b72b2656b4921cdd6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff88b206416d814a90c8b72b2656b4921cdd6b8", "html_url": "https://github.com/rust-lang/rust/commit/dff88b206416d814a90c8b72b2656b4921cdd6b8"}, {"sha": "8baa32ff95539ee80136a662a0305d0c8dab9800", "url": "https://api.github.com/repos/rust-lang/rust/commits/8baa32ff95539ee80136a662a0305d0c8dab9800", "html_url": "https://github.com/rust-lang/rust/commit/8baa32ff95539ee80136a662a0305d0c8dab9800"}], "stats": {"total": 57, "additions": 3, "deletions": 54}, "files": [{"sha": "2125349909ef154b90a78db0cf7f4940733a277b", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b746e1c83f23bc015e73582e102528f05db24/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b746e1c83f23bc015e73582e102528f05db24/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=7d5b746e1c83f23bc015e73582e102528f05db24", "patch": "@@ -2,7 +2,6 @@ use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{attr, AssocConstraint, AssocConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd};\n-use rustc_errors::{Applicability, StashKey};\n use rustc_feature::{AttributeGate, BuiltinAttribute, Features, GateIssue, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::parse::{feature_err, feature_err_issue, feature_warn};\n use rustc_session::Session;\n@@ -374,55 +373,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn visit_stmt(&mut self, stmt: &'a ast::Stmt) {\n-        if let ast::StmtKind::Semi(expr) = &stmt.kind\n-            && let ast::ExprKind::Assign(lhs, _, _) = &expr.kind\n-            && let ast::ExprKind::Type(..) = lhs.kind\n-            && self.sess.parse_sess.span_diagnostic.err_count() == 0\n-            && !self.features.type_ascription\n-            && !lhs.span.allows_unstable(sym::type_ascription)\n-        {\n-            // When we encounter a statement of the form `foo: Ty = val;`, this will emit a type\n-            // ascription error, but the likely intention was to write a `let` statement. (#78907).\n-            feature_err(\n-                &self.sess.parse_sess,\n-                sym::type_ascription,\n-                lhs.span,\n-                \"type ascription is experimental\",\n-            ).span_suggestion_verbose(\n-                lhs.span.shrink_to_lo(),\n-                \"you might have meant to introduce a new binding\",\n-                \"let \",\n-                Applicability::MachineApplicable,\n-            ).emit();\n-        }\n-        visit::walk_stmt(self, stmt);\n-    }\n-\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n-            ast::ExprKind::Type(..) => {\n-                if self.sess.parse_sess.span_diagnostic.err_count() == 0 {\n-                    // To avoid noise about type ascription in common syntax errors,\n-                    // only emit if it is the *only* error.\n-                    gate_feature_post!(\n-                        &self,\n-                        type_ascription,\n-                        e.span,\n-                        \"type ascription is experimental\"\n-                    );\n-                } else {\n-                    // And if it isn't, cancel the early-pass warning.\n-                    if let Some(err) = self\n-                        .sess\n-                        .parse_sess\n-                        .span_diagnostic\n-                        .steal_diagnostic(e.span, StashKey::EarlySyntaxWarning)\n-                    {\n-                        err.cancel()\n-                    }\n-                }\n-            }\n             ast::ExprKind::TryBlock(_) => {\n                 gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n             }\n@@ -629,7 +581,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n-    gate_all!(type_ascription, \"type ascription is experimental\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "7a1e830073a721711a0294fe81c1ce5e7011314f", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b746e1c83f23bc015e73582e102528f05db24/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b746e1c83f23bc015e73582e102528f05db24/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=7d5b746e1c83f23bc015e73582e102528f05db24", "patch": "@@ -689,8 +689,6 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     fn trivial_cast_lint(&self, fcx: &FnCtxt<'a, 'tcx>) {\n         let t_cast = self.cast_ty;\n         let t_expr = self.expr_ty;\n-        let type_asc_or =\n-            if fcx.tcx.features().type_ascription { \"type ascription or \" } else { \"\" };\n         let (adjective, lint) = if t_cast.is_numeric() && t_expr.is_numeric() {\n             (\"numeric \", lint::builtin::TRIVIAL_NUMERIC_CASTS)\n         } else {\n@@ -711,7 +709,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             |lint| {\n                 lint.help(format!(\n                     \"cast can be replaced by coercion; this might \\\n-                     require {type_asc_or}a temporary variable\"\n+                     require a temporary variable\"\n                 ))\n             },\n         );"}, {"sha": "159a54873cc7021c9c1358508124419c8f8334e4", "filename": "tests/ui/lint/trivial-casts-featuring-type-ascription.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b746e1c83f23bc015e73582e102528f05db24/tests%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b746e1c83f23bc015e73582e102528f05db24/tests%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr?ref=7d5b746e1c83f23bc015e73582e102528f05db24", "patch": "@@ -4,7 +4,7 @@ error: trivial numeric cast: `i32` as `i32`\n LL |     let lugubrious = 12i32 as i32;\n    |                      ^^^^^^^^^^^^\n    |\n-   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial-casts-featuring-type-ascription.rs:1:24\n    |\n@@ -17,7 +17,7 @@ error: trivial cast: `&u32` as `*const u32`\n LL |     let _ = haunted as *const u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial-casts-featuring-type-ascription.rs:1:9\n    |"}]}