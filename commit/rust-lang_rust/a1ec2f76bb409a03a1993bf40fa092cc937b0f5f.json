{"sha": "a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZWMyZjc2YmI0MDlhMDNhMTk5M2JmNDBmYTA5MmNjOTM3YjBmNWY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-24T15:27:16Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-24T15:27:16Z"}, "message": "Rollup merge of #53545 - FelixMcFelix:fix-50865-beta, r=petrochenkov\n\nFix #50865: ICE on impl-trait returning functions reaching private items\n\nAdds a test case as suggested in #50865, and implements @petrochenkov's suggestion. Fixes #50865.\n\nImpl-trait-returning functions are marked under a new (low) access level, which they propagate rather than `AccessLevels::Reachable`. `AccessLevels::is_reachable` returns false for such items (leaving stability analysis unaffected), these items may still be visible to the lints phase however.", "tree": {"sha": "0672767f14414707d887625ce6ef2f9f2883697d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0672767f14414707d887625ce6ef2f9f2883697d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluAI9cACgkQ/vbIBR0O\nATyjEg//fmFarnhAEYOWmeMxlYfQ86pyOivvGR7BoKfuzSlsAn6HMrjrmNtbyoGf\n2rX6l1r24y8qds7Rcn70CmsMbgG6pv1cupkUrn0JZy/Q9zhFWfaFF6twxztmiLBv\n43iV7ebsR6ey3kUxAOZcei+tqqbW6f/302cK0nw/ru8MZizpTpaCiMzvZtKt8e+y\n5A+DiaBwNJ795UTZhzw7d87HmSIHif6BI5kUIYThSaDDUXsqq49Yi9ko0H8OKX/g\nEwS0x1cs9kPJGLvT7zIbP1Z4lxL6fXy5ZfAEakUzqX2oGKTMLnrLNtOJPEg10EAk\nUFkAIQJgHkWFeLRdVU+ar8nrknyfDXU0H7XFa+U5N6JesqYCIDz0orkyCEGm0Yig\nrR9HsLGwl3D336KAa4sVMCAC+O3d4YdmbNyfIQPPHFmAbQOVwRJr8hdGcuX7owl4\nAES5NKwum9iUgqIm3VL785bF8R3Pm/WQJi6DjYvw0tSHswMgMuxYfvZW5UAJBRgj\nmchP9BrpiOLSy9vyUZ4W96PLsoZbqAvRSlg8onqhSu9mmg/3Qk9FCdAaNfYOena0\nxLMf1vqI5I6CRUAyPhOt8JIhAv087hhYKXcIS/+MOpoDdHfwpMTzGxZTysDYxez2\nRni4/FmYYGdsjA4KWxf+/y3ZpXMfsGMGG/XezLkql8cbeA6d0a4=\n=PKpL\n-----END PGP SIGNATURE-----", "payload": "tree 0672767f14414707d887625ce6ef2f9f2883697d\nparent 62f29c4fb811da8ea2c2584d0d2c6bcf316b0a7a\nparent 85a05d1815217584c096ebc9d64b3a547b667f48\nauthor kennytm <kennytm@gmail.com> 1535124436 +0800\ncommitter kennytm <kennytm@gmail.com> 1535124436 +0800\n\nRollup merge of #53545 - FelixMcFelix:fix-50865-beta, r=petrochenkov\n\nFix #50865: ICE on impl-trait returning functions reaching private items\n\nAdds a test case as suggested in #50865, and implements @petrochenkov's suggestion. Fixes #50865.\n\nImpl-trait-returning functions are marked under a new (low) access level, which they propagate rather than `AccessLevels::Reachable`. `AccessLevels::is_reachable` returns false for such items (leaving stability analysis unaffected), these items may still be visible to the lints phase however.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "html_url": "https://github.com/rust-lang/rust/commit/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f29c4fb811da8ea2c2584d0d2c6bcf316b0a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f29c4fb811da8ea2c2584d0d2c6bcf316b0a7a", "html_url": "https://github.com/rust-lang/rust/commit/62f29c4fb811da8ea2c2584d0d2c6bcf316b0a7a"}, {"sha": "85a05d1815217584c096ebc9d64b3a547b667f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a05d1815217584c096ebc9d64b3a547b667f48", "html_url": "https://github.com/rust-lang/rust/commit/85a05d1815217584c096ebc9d64b3a547b667f48"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "f4c46b6ce09e12bceb846f7ae4bc60254a47dc01", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "patch": "@@ -1091,6 +1091,7 @@ impl_stable_hash_for!(enum traits::Reveal {\n });\n \n impl_stable_hash_for!(enum ::middle::privacy::AccessLevel {\n+    ReachableFromImplTrait,\n     Reachable,\n     Exported,\n     Public"}, {"sha": "70fed9af92128367700c4fc9b8a8aebf84436cd7", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "patch": "@@ -21,6 +21,8 @@ use syntax::ast::NodeId;\n // Accessibility levels, sorted in ascending order\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum AccessLevel {\n+    // Superset of Reachable used to mark impl Trait items.\n+    ReachableFromImplTrait,\n     // Exported items + items participating in various kinds of public interfaces,\n     // but not directly nameable. For example, if function `fn f() -> T {...}` is\n     // public, then type `T` is reachable. Its values can be obtained by other crates\n@@ -40,7 +42,7 @@ pub struct AccessLevels<Id = NodeId> {\n \n impl<Id: Hash + Eq> AccessLevels<Id> {\n     pub fn is_reachable(&self, id: Id) -> bool {\n-        self.map.contains_key(&id)\n+        self.map.get(&id) >= Some(&AccessLevel::Reachable)\n     }\n     pub fn is_exported(&self, id: Id) -> bool {\n         self.map.get(&id) >= Some(&AccessLevel::Exported)"}, {"sha": "0328b5f1fd5e57c727b1a617db55326b273ea900", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "patch": "@@ -434,6 +434,8 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     reachable_context.propagate();\n \n+    debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n+\n     // Return the set of reachable symbols.\n     ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n }"}, {"sha": "f68f2d0da6850d7694e06a300c965c6affceb7a9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "patch": "@@ -82,6 +82,7 @@ struct EmbargoVisitor<'a, 'tcx: 'a> {\n }\n \n struct ReachEverythingInTheInterfaceVisitor<'b, 'a: 'b, 'tcx: 'a> {\n+    access_level: Option<AccessLevel>,\n     item_def_id: DefId,\n     ev: &'b mut EmbargoVisitor<'a, 'tcx>,\n }\n@@ -132,6 +133,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     fn reach<'b>(&'b mut self, item_id: ast::NodeId)\n                  -> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n         ReachEverythingInTheInterfaceVisitor {\n+            access_level: self.prev_level.map(|l| l.min(AccessLevel::Reachable)),\n             item_def_id: self.tcx.hir.local_def_id(item_id),\n             ev: self,\n         }\n@@ -214,7 +216,15 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Existential(..) |\n+            // Impl trait return types mark their parent function.\n+            // It (and its children) are revisited if the change applies.\n+            hir::ItemKind::Existential(ref ty_data) => {\n+                if let Some(impl_trait_fn) = ty_data.impl_trait_fn {\n+                    if let Some(node_id) = self.tcx.hir.as_local_node_id(impl_trait_fn) {\n+                        self.update(node_id, Some(AccessLevel::ReachableFromImplTrait));\n+                    }\n+                }\n+            }\n             hir::ItemKind::Use(..) |\n             hir::ItemKind::Static(..) |\n             hir::ItemKind::Const(..) |\n@@ -226,6 +236,10 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(..) => {}\n         }\n \n+        // Store this node's access level here to propagate the correct\n+        // reachability level through interfaces and children.\n+        let orig_level = replace(&mut self.prev_level, item_level);\n+\n         // Mark all items in interfaces of reachable items as reachable\n         match item.node {\n             // The interface is empty\n@@ -324,9 +338,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             }\n         }\n \n-        let orig_level = self.prev_level;\n-        self.prev_level = item_level;\n-\n         intravisit::walk_item(self, item);\n \n         self.prev_level = orig_level;\n@@ -462,7 +473,7 @@ impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn check_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>) {\n         if let Some(node_id) = self.ev.tcx.hir.as_local_node_id(trait_ref.def_id) {\n             let item = self.ev.tcx.hir.expect_item(node_id);\n-            self.ev.update(item.id, Some(AccessLevel::Reachable));\n+            self.ev.update(item.id, self.access_level);\n         }\n     }\n }\n@@ -483,7 +494,7 @@ impl<'b, 'a, 'tcx> TypeVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'b\n \n         if let Some(def_id) = ty_def_id {\n             if let Some(node_id) = self.ev.tcx.hir.as_local_node_id(def_id) {\n-                self.ev.update(node_id, Some(AccessLevel::Reachable));\n+                self.ev.update(node_id, self.access_level);\n             }\n         }\n "}, {"sha": "306256d53d38c6f4803748d70f1a4944d56f96b7", "filename": "src/test/run-pass/issue-50865-private-impl-trait/auxiliary/lib.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs?ref=a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn bar<P>( // Error won't happen if \"bar\" is not generic\n+    _baz: P,\n+) {\n+    hide_foo()();\n+}\n+\n+fn hide_foo() -> impl Fn() { // Error won't happen if \"iterate\" hasn't impl Trait or has generics\n+    foo\n+}\n+\n+fn foo() { // Error won't happen if \"foo\" isn't used in \"iterate\" or has generics\n+}"}, {"sha": "bc347edf8a765b2c286b40cd4b81c0b9be0255a2", "filename": "src/test/run-pass/issue-50865-private-impl-trait/main.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ec2f76bb409a03a1993bf40fa092cc937b0f5f/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50865-private-impl-trait%2Fmain.rs?ref=a1ec2f76bb409a03a1993bf40fa092cc937b0f5f", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lib.rs\n+\n+// Regression test for #50865.\n+// When using generics or specifying the type directly, this example\n+// codegens `foo` internally. However, when using a private `impl Trait`\n+// function which references another private item, `foo` (in this case)\n+// wouldn't be codegenned until main.rs used `bar`, as with impl Trait\n+// it is not cast to `fn()` automatically to satisfy e.g.\n+// `fn foo() -> fn() { ... }`.\n+\n+extern crate lib;\n+\n+fn main() {\n+    lib::bar(()); // Error won't happen if bar is called from same crate\n+}"}]}