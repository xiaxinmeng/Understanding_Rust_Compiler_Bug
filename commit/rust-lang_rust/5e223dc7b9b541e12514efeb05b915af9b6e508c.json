{"sha": "5e223dc7b9b541e12514efeb05b915af9b6e508c", "node_id": "C_kwDOAAsO6NoAKDVlMjIzZGM3YjliNTQxZTEyNTE0ZWZlYjA1YjkxNWFmOWI2ZTUwOGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-11T20:39:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-11T20:39:09Z"}, "message": "Rollup merge of #99146 - compiler-errors:issue-61525, r=lcnr\n\nDo not error during method probe on `Sized` predicates for types that aren't the method receiver\n\nFixes #61525\n\nThis is safe even though we're skipping an error because we end up confirming the method, which means we're still checking the `Sized` predicate in the end. It just means that we don't emit an erroneous message as below:\n\n```\nerror: the `query` method cannot be invoked on a trait object\n  --> src/lib.rs:14:11\n   |\n14 |         1.query::<dyn ToString>(\"\")\n   |           ^^^^^\n   |\n   = note: another candidate was found in the following trait, perhaps add a `use` for it:\n           `use crate::Example;`\n```\n\nAlso fixes erroneously suggesting the same trait over again, as seen in the `issue-35976.rs` UI test.", "tree": {"sha": "c2a2f772f58b7e7076179859d9f9baf06d11dc63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a2f772f58b7e7076179859d9f9baf06d11dc63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e223dc7b9b541e12514efeb05b915af9b6e508c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizIpuCRBK7hj4Ov3rIwAADkcIAIQk51W3fZtHvw0oUAkMO0td\n+MQxylhqgtbWSwr5j6V1q987jUy3gJGK7sTKnucgRlIBcHD1CpP/CBbGVoWMt/Mg\nw/s47c3LFz83+vTe3cMtXbbSFWbXt9gik0zc+w0hd7P9nUk6cGu3DSBfzJu3d9V5\nPLs83/PiG2Jsv/jQqWHN4kJ3IT9I0+42vkM1/EYrOk6Z4pBQTxR85PvU8/NIGzw7\nMzQ+X3S+twkiYJiQwL/rgVsti91tUvJHa4tpIww1H4aRSAO5JjJ/LHuomhf8KZHt\nLLsWqHB/SCeMpv0yqrpwF7K7zbmbBC3u02aNA/zdaZOTyAr5zuUO6Z6EfuV1DHQ=\n=7lzp\n-----END PGP SIGNATURE-----\n", "payload": "tree c2a2f772f58b7e7076179859d9f9baf06d11dc63\nparent 1679d1c6223aaf0e946291aca66f5dbf1396ab08\nparent 88f2140d8736329610a4c0bd8000e164c9170537\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657571949 +0200\ncommitter GitHub <noreply@github.com> 1657571949 +0200\n\nRollup merge of #99146 - compiler-errors:issue-61525, r=lcnr\n\nDo not error during method probe on `Sized` predicates for types that aren't the method receiver\n\nFixes #61525\n\nThis is safe even though we're skipping an error because we end up confirming the method, which means we're still checking the `Sized` predicate in the end. It just means that we don't emit an erroneous message as below:\n\n```\nerror: the `query` method cannot be invoked on a trait object\n  --> src/lib.rs:14:11\n   |\n14 |         1.query::<dyn ToString>(\"\")\n   |           ^^^^^\n   |\n   = note: another candidate was found in the following trait, perhaps add a `use` for it:\n           `use crate::Example;`\n```\n\nAlso fixes erroneously suggesting the same trait over again, as seen in the `issue-35976.rs` UI test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e223dc7b9b541e12514efeb05b915af9b6e508c", "html_url": "https://github.com/rust-lang/rust/commit/5e223dc7b9b541e12514efeb05b915af9b6e508c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e223dc7b9b541e12514efeb05b915af9b6e508c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1679d1c6223aaf0e946291aca66f5dbf1396ab08", "url": "https://api.github.com/repos/rust-lang/rust/commits/1679d1c6223aaf0e946291aca66f5dbf1396ab08", "html_url": "https://github.com/rust-lang/rust/commit/1679d1c6223aaf0e946291aca66f5dbf1396ab08"}, {"sha": "88f2140d8736329610a4c0bd8000e164c9170537", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f2140d8736329610a4c0bd8000e164c9170537", "html_url": "https://github.com/rust-lang/rust/commit/88f2140d8736329610a4c0bd8000e164c9170537"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "b14f3d6de4ef1be75c45b024136dd6a31328c41e", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e223dc7b9b541e12514efeb05b915af9b6e508c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e223dc7b9b541e12514efeb05b915af9b6e508c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=5e223dc7b9b541e12514efeb05b915af9b6e508c", "patch": "@@ -81,11 +81,25 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n         let all_substs = self.instantiate_method_substs(&pick, segment, rcvr_substs);\n \n-        debug!(\"all_substs={:?}\", all_substs);\n+        debug!(\"rcvr_substs={rcvr_substs:?}, all_substs={all_substs:?}\");\n \n         // Create the final signature for the method, replacing late-bound regions.\n         let (method_sig, method_predicates) = self.instantiate_method_sig(&pick, all_substs);\n \n+        // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n+        // something which derefs to `Self` actually implements the trait and the caller\n+        // wanted to make a static dispatch on it but forgot to import the trait.\n+        // See test `src/test/ui/issue-35976.rs`.\n+        //\n+        // In that case, we'll error anyway, but we'll also re-run the search with all traits\n+        // in scope, and if we find another method which can be used, we'll output an\n+        // appropriate hint suggesting to import the trait.\n+        let filler_substs = rcvr_substs\n+            .extend_to(self.tcx, pick.item.def_id, |def, _| self.tcx.mk_param_from_def(def));\n+        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(\n+            &self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n+        );\n+\n         // Unify the (adjusted) self type with what the method expects.\n         //\n         // SUBTLE: if we want good error messages, because of \"guessing\" while matching\n@@ -106,16 +120,6 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // Make sure nobody calls `drop()` explicitly.\n         self.enforce_illegal_method_limitations(&pick);\n \n-        // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n-        // something which derefs to `Self` actually implements the trait and the caller\n-        // wanted to make a static dispatch on it but forgot to import the trait.\n-        // See test `src/test/ui/issue-35976.rs`.\n-        //\n-        // In that case, we'll error anyway, but we'll also re-run the search with all traits\n-        // in scope, and if we find another method which can be used, we'll output an\n-        // appropriate hint suggesting to import the trait.\n-        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(&method_predicates);\n-\n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case."}, {"sha": "c0b3a23fde437f0c5626c2cef6ccd25cffcbba96", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e223dc7b9b541e12514efeb05b915af9b6e508c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e223dc7b9b541e12514efeb05b915af9b6e508c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=5e223dc7b9b541e12514efeb05b915af9b6e508c", "patch": "@@ -20,8 +20,8 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{DefIdTree, GenericParamDefKind};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -221,7 +221,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // We probe again, taking all traits into account (not only those in scope).\n-            let candidates = match self.lookup_probe(\n+            let mut candidates = match self.lookup_probe(\n                 span,\n                 segment.ident,\n                 self_ty,\n@@ -243,6 +243,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .collect(),\n                 _ => Vec::new(),\n             };\n+            candidates.retain(|candidate| *candidate != self.tcx.parent(result.callee.def_id));\n \n             return Err(IllegalSizedBound(candidates, needs_mut, span));\n         }"}, {"sha": "fe16f97b9d0f5c54fc78895b4c9f609e2eb8e8af", "filename": "src/test/ui/issues/issue-35976.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e223dc7b9b541e12514efeb05b915af9b6e508c/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e223dc7b9b541e12514efeb05b915af9b6e508c/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr?ref=5e223dc7b9b541e12514efeb05b915af9b6e508c", "patch": "@@ -6,11 +6,6 @@ LL |         fn wait(&self) where Self: Sized;\n ...\n LL |     arg.wait();\n    |         ^^^^\n-   |\n-help: another candidate was found in the following trait, perhaps add a `use` for it:\n-   |\n-LL | use private::Future;\n-   |\n \n error: aborting due to previous error\n "}, {"sha": "c5ca0326e430c466d8eb9729857da836bf3e2033", "filename": "src/test/ui/methods/issues/issue-61525.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e223dc7b9b541e12514efeb05b915af9b6e508c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e223dc7b9b541e12514efeb05b915af9b6e508c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs?ref=5e223dc7b9b541e12514efeb05b915af9b6e508c", "patch": "@@ -0,0 +1,20 @@\n+pub trait Example {\n+    fn query<Q>(self, q: Q);\n+}\n+\n+impl Example for i32 {\n+    fn query<Q>(self, _: Q) {\n+        unimplemented!()\n+    }\n+}\n+\n+mod nested {\n+    use super::Example;\n+    fn example() {\n+        1.query::<dyn ToString>(\"\")\n+        //~^ ERROR the size for values of type `dyn ToString` cannot be known at compilation time\n+        //~| ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "aec968d7c44f45538a9c05e5e35997ea7a1ffcaf", "filename": "src/test/ui/methods/issues/issue-61525.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e223dc7b9b541e12514efeb05b915af9b6e508c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e223dc7b9b541e12514efeb05b915af9b6e508c/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=5e223dc7b9b541e12514efeb05b915af9b6e508c", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the size for values of type `dyn ToString` cannot be known at compilation time\n+  --> $DIR/issue-61525.rs:14:33\n+   |\n+LL |         1.query::<dyn ToString>(\"\")\n+   |           -----                 ^^ doesn't have a size known at compile-time\n+   |           |\n+   |           required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn ToString`\n+note: required by a bound in `Example::query`\n+  --> $DIR/issue-61525.rs:2:14\n+   |\n+LL |     fn query<Q>(self, q: Q);\n+   |              ^ required by this bound in `Example::query`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL |     fn query<Q: ?Sized>(self, q: Q);\n+   |               ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61525.rs:14:33\n+   |\n+LL |         1.query::<dyn ToString>(\"\")\n+   |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n+   |           |\n+   |           arguments to this function are incorrect\n+   |\n+   = note: expected trait object `dyn ToString`\n+                 found reference `&'static str`\n+note: associated function defined here\n+  --> $DIR/issue-61525.rs:2:8\n+   |\n+LL |     fn query<Q>(self, q: Q);\n+   |        ^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}