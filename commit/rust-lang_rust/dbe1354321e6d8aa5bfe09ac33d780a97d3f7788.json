{"sha": "dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZTEzNTQzMjFlNmQ4YWE1YmZlMDlhYzMzZDc4MGE5N2QzZjc3ODg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-24T01:45:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-26T23:21:05Z"}, "message": "Move ast_map::map to LinearMap", "tree": {"sha": "24b6d0fac09decb66135aeaf3152f2e15c8e82e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b6d0fac09decb66135aeaf3152f2e15c8e82e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "html_url": "https://github.com/rust-lang/rust/commit/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53057f49d7f3994fa394df493f22d9bfdf2df8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53057f49d7f3994fa394df493f22d9bfdf2df8f", "html_url": "https://github.com/rust-lang/rust/commit/b53057f49d7f3994fa394df493f22d9bfdf2df8f"}], "stats": {"total": 224, "additions": 111, "deletions": 113}, "files": [{"sha": "490fa357bb537d988b830efaed53c941999ed918", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -1026,7 +1026,7 @@ fn encode_info_for_items(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             let ebml_w = copy ebml_w;\n             |i, cx, v| {\n                 visit::visit_item(i, cx, v);\n-                match ecx.tcx.items.get(&i.id) {\n+                match *ecx.tcx.items.get(&i.id) {\n                     ast_map::node_item(_, pt) => {\n                         encode_info_for_item(ecx, ebml_w, i,\n                                              index, *pt);\n@@ -1039,7 +1039,7 @@ fn encode_info_for_items(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             let ebml_w = copy ebml_w;\n             |ni, cx, v| {\n                 visit::visit_foreign_item(ni, cx, v);\n-                match ecx.tcx.items.get(&ni.id) {\n+                match *ecx.tcx.items.get(&ni.id) {\n                     ast_map::node_foreign_item(_, abi, _, pt) => {\n                         encode_info_for_foreign_item(ecx, ebml_w, ni,\n                                                      index, /*bad*/copy *pt,"}, {"sha": "f9212d1ff7b5594f5352b2b341634e822537af79", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -240,7 +240,7 @@ pub fn check_item_recursion(sess: Session,\n             match env.def_map.find(&e.id) {\n               Some(&def_const(def_id)) => {\n                 if ast_util::is_local(def_id) {\n-                  match env.ast_map.get(&def_id.node) {\n+                  match *env.ast_map.get(&def_id.node) {\n                     ast_map::node_item(it, _) => {\n                       (v.visit_item)(it, env, v);\n                     }"}, {"sha": "a25d873af41ba3b5ddecb1b6860fbff54c300616", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -182,7 +182,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n     if ast_util::is_local(def_id) {\n         match tcx.items.find(&def_id.node) {\n             None => None,\n-            Some(ast_map::node_item(it, _)) => match it.node {\n+            Some(&ast_map::node_item(it, _)) => match it.node {\n                 item_const(_, const_expr) => Some(const_expr),\n                 _ => None\n             },"}, {"sha": "50e8ed23446deeebd5df81668612d7d2e3310fd3", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -113,8 +113,8 @@ pub fn check_crate(tcx: ty::ctxt,\n             @fn(span: span, method_id: node_id) -> def_id =\n             |span, method_id| {\n         match tcx.items.find(&method_id) {\n-            Some(node_method(_, impl_id, _)) => impl_id,\n-            Some(node_trait_method(_, trait_id, _)) => trait_id,\n+            Some(&node_method(_, impl_id, _)) => impl_id,\n+            Some(&node_trait_method(_, trait_id, _)) => trait_id,\n             Some(_) => {\n                 tcx.sess.span_bug(span,\n                                   fmt!(\"method was a %s?!\",\n@@ -148,7 +148,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                 }\n \n                 match tcx.items.find(&container_id.node) {\n-                    Some(node_item(item, _)) => {\n+                    Some(&node_item(item, _)) => {\n                         match item.node {\n                             item_impl(_, None, _, _)\n                                     if item.vis != public => {\n@@ -170,10 +170,10 @@ pub fn check_crate(tcx: ty::ctxt,\n         };\n \n         match tcx.items.find(&method_id) {\n-            Some(node_method(method, impl_id, _)) => {\n+            Some(&node_method(method, impl_id, _)) => {\n                 check(method.vis, impl_id)\n             }\n-            Some(node_trait_method(trait_method, trait_id, _)) => {\n+            Some(&node_trait_method(trait_method, trait_id, _)) => {\n                 match *trait_method {\n                     required(_) => check(public, trait_id),\n                     provided(method) => check(method.vis, trait_id),\n@@ -200,16 +200,16 @@ pub fn check_crate(tcx: ty::ctxt,\n         let mut f: &fn(node_id) -> bool = |_| false;\n         f = |item_id| {\n             match tcx.items.find(&item_id) {\n-                Some(node_item(item, _)) => item.vis != public,\n-                Some(node_foreign_item(_, _, vis, _)) => vis != public,\n-                Some(node_method(method, impl_did, _)) => {\n+                Some(&node_item(item, _)) => item.vis != public,\n+                Some(&node_foreign_item(_, _, vis, _)) => vis != public,\n+                Some(&node_method(method, impl_did, _)) => {\n                     match method.vis {\n                         private => true,\n                         public => false,\n                         inherited => f(impl_did.node)\n                     }\n                 }\n-                Some(node_trait_method(_, trait_did, _)) => f(trait_did.node),\n+                Some(&node_trait_method(_, trait_did, _)) => f(trait_did.node),\n                 Some(_) => {\n                     tcx.sess.span_bug(span,\n                                       fmt!(\"local_item_is_private: item was \\\n@@ -332,7 +332,7 @@ pub fn check_crate(tcx: ty::ctxt,\n             method_super(trait_id, method_num) => {\n                 if trait_id.crate == local_crate {\n                     match tcx.items.find(&trait_id.node) {\n-                        Some(node_item(item, _)) => {\n+                        Some(&node_item(item, _)) => {\n                             match item.node {\n                                 item_trait(_, _, ref methods) => {\n                                     if method_num >= (*methods).len() {"}, {"sha": "fb05cf0b7398944e9a903552f957c43064338611", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -2065,7 +2065,7 @@ pub fn trans_enum_def(ccx: @CrateContext, enum_definition: ast::enum_def,\n \n pub fn trans_item(ccx: @CrateContext, item: ast::item) {\n     let _icx = ccx.insn_ctxt(\"trans_item\");\n-    let path = match ccx.tcx.items.get(&item.id) {\n+    let path = match *ccx.tcx.items.get(&item.id) {\n         ast_map::node_item(_, p) => p,\n         // tjc: ?\n         _ => fail!(~\"trans_item\"),\n@@ -2336,13 +2336,12 @@ pub fn fill_fn_pair(bcx: block, pair: ValueRef, llfn: ValueRef,\n }\n \n pub fn item_path(ccx: @CrateContext, i: @ast::item) -> path {\n-    vec::append(\n-        /*bad*/copy *match ccx.tcx.items.get(&i.id) {\n-            ast_map::node_item(_, p) => p,\n-                // separate map for paths?\n-            _ => fail!(~\"item_path\")\n-        },\n-        ~[path_name(i.ident)])\n+    let base = match *ccx.tcx.items.get(&i.id) {\n+        ast_map::node_item(_, p) => p,\n+            // separate map for paths?\n+        _ => fail!(~\"item_path\")\n+    };\n+    vec::append(/*bad*/copy *base, ~[path_name(i.ident)])\n }\n \n /* If there's already a symbol for the dtor with <id> and substs <substs>,\n@@ -2393,7 +2392,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n       None => {\n \n         let mut exprt = false;\n-        let val = match ccx.tcx.items.get(&id) {\n+        let val = match *ccx.tcx.items.get(&id) {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       ~[path_name(i.ident)]);"}, {"sha": "7ba0b706e436e4ddee76ff72ffe6d971a8f91861", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -268,7 +268,7 @@ pub fn trans_fn_ref_with_vtables(\n             ccx.tcx.items.find(&def_id.node),\n             || fmt!(\"local item should be in ast map\"));\n \n-        match map_node {\n+        match *map_node {\n             ast_map::node_foreign_item(_,\n                                        ast::foreign_abi_rust_intrinsic,\n                                        _,"}, {"sha": "1362f97c08e85f16f79694a45a1ba57a585fbbd9", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -158,7 +158,7 @@ pub fn get_const_val(cx: @CrateContext, def_id: ast::def_id) -> ValueRef {\n         if !ast_util::is_local(def_id) {\n             def_id = inline::maybe_instantiate_inline(cx, def_id, true);\n         }\n-        match cx.tcx.items.get(&def_id.node) {\n+        match *cx.tcx.items.get(&def_id.node) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_const(_, subexpr), _\n             }, _) => {"}, {"sha": "45884c9c3b424b2faa93dd8443c54a582dcd3c95", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -849,7 +849,7 @@ pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n     let sp = fcx.span.get();\n     debug!(\"%s\", cx.sess.codemap.span_to_str(sp));\n \n-    let (ident, ret_ty, id) = match cx.tcx.items.get(&fcx.id) {\n+    let (ident, ret_ty, id) = match *cx.tcx.items.get(&fcx.id) {\n       ast_map::node_item(item, _) => {\n         match item.node {\n           ast::item_fn(ref decl, _, _, _) => {"}, {"sha": "08f86bfb2dff5d63232960dc0014378b678c834b", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -567,7 +567,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             let tp_sz = machine::llbitsize_of_real(ccx, lltp_ty),\n             out_sz = machine::llbitsize_of_real(ccx, llout_ty);\n           if tp_sz != out_sz {\n-              let sp = match ccx.tcx.items.get(&ref_id.get()) {\n+              let sp = match *ccx.tcx.items.get(&ref_id.get()) {\n                   ast_map::node_expr(e) => e.span,\n                   _ => fail!(~\"reinterpret_cast or forget has non-expr arg\")\n               };\n@@ -1082,7 +1082,7 @@ pub fn register_foreign_fn(ccx: @CrateContext,\n fn abi_of_foreign_fn(ccx: @CrateContext, i: @ast::foreign_item)\n     -> ast::foreign_abi {\n     match attr::first_attr_value_str_by_name(i.attrs, ~\"abi\") {\n-      None => match ccx.tcx.items.get(&i.id) {\n+      None => match *ccx.tcx.items.get(&i.id) {\n         ast_map::node_foreign_item(_, abi, _, _) => abi,\n         // ??\n         _ => fail!(~\"abi_of_foreign_fn: not foreign\")"}, {"sha": "1f348bc3e24df0163956ddc7b094e17a7d114a35", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -306,7 +306,7 @@ pub fn trans_static_method_callee(bcx: block,\n     };\n \n     let mname = if method_id.crate == ast::local_crate {\n-        match bcx.tcx().items.get(&method_id.node) {\n+        match *bcx.tcx().items.get(&method_id.node) {\n             ast_map::node_trait_method(trait_method, _, _) => {\n                 ast_util::trait_method_to_ty_method(trait_method).ident\n             }\n@@ -361,7 +361,7 @@ pub fn method_from_methods(ms: &[@ast::method], name: ast::ident)\n pub fn method_with_name(ccx: @CrateContext, impl_id: ast::def_id,\n                         name: ast::ident) -> ast::def_id {\n     if impl_id.crate == ast::local_crate {\n-        match ccx.tcx.items.get(&impl_id.node) {\n+        match *ccx.tcx.items.get(&impl_id.node) {\n           ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref ms),\n                 _\n@@ -378,7 +378,7 @@ pub fn method_with_name(ccx: @CrateContext, impl_id: ast::def_id,\n pub fn method_with_name_or_default(ccx: @CrateContext, impl_id: ast::def_id,\n                                    name: ast::ident) -> ast::def_id {\n     if impl_id.crate == ast::local_crate {\n-        match ccx.tcx.items.get(&impl_id.node) {\n+        match *ccx.tcx.items.get(&impl_id.node) {\n           ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref ms), _\n           }, _) => {\n@@ -414,7 +414,7 @@ pub fn method_ty_param_count(ccx: @CrateContext, m_id: ast::def_id,\n     debug!(\"method_ty_param_count: m_id: %?, i_id: %?\", m_id, i_id);\n     if m_id.crate == ast::local_crate {\n         match ccx.tcx.items.find(&m_id.node) {\n-            Some(ast_map::node_method(m, _, _)) => m.generics.ty_params.len(),\n+            Some(&ast_map::node_method(m, _, _)) => m.generics.ty_params.len(),\n             None => {\n                 match ccx.tcx.provided_method_sources.find(&m_id) {\n                     Some(source) => {\n@@ -424,7 +424,7 @@ pub fn method_ty_param_count(ccx: @CrateContext, m_id: ast::def_id,\n                     None => fail!()\n                 }\n             }\n-            Some(ast_map::node_trait_method(@ast::provided(@ref m),\n+            Some(&ast_map::node_trait_method(@ast::provided(@ref m),\n                                             _, _)) => {\n                 m.generics.ty_params.len()\n             }"}, {"sha": "659b3f6c7acc3b08145cfadb7eaf2ac7465578e2", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -93,7 +93,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         (may have attempted to monomorphize an item defined in a different \\\n         crate?)\", fn_id));\n     // Get the path so that we can create a symbol\n-    let (pt, name, span) = match map_node {\n+    let (pt, name, span) = match *map_node {\n       ast_map::node_item(i, pt) => (pt, i.ident, i.span),\n       ast_map::node_variant(ref v, enm, pt) => (pt, (*v).node.name, enm.span),\n       ast_map::node_method(m, _, pt) => (pt, m.ident, m.span),\n@@ -172,7 +172,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         self_ty: impl_ty_opt\n     });\n \n-    let lldecl = match map_node {\n+    let lldecl = match *map_node {\n       ast_map::node_item(i@@ast::item {\n                 // XXX: Bad copy.\n                 node: ast::item_fn(ref decl, _, _, ref body),"}, {"sha": "4ac3ac0555f5e214375ec1fad0db11008b0ec567", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -71,20 +71,17 @@ fn traverse_exports(cx: ctx, mod_id: node_id) -> bool {\n \n fn traverse_def_id(cx: ctx, did: def_id) {\n     if did.crate != local_crate { return; }\n-    let n = match cx.tcx.items.find(&did.node) {\n-        None => return, // This can happen for self, for example\n-        Some(ref n) => (/*bad*/copy *n)\n-    };\n-    match n {\n-      ast_map::node_item(item, _) => traverse_public_item(cx, item),\n-      ast_map::node_method(_, impl_id, _) => traverse_def_id(cx, impl_id),\n-      ast_map::node_foreign_item(item, _, _, _) => {\n-        cx.rmap.insert(item.id);\n-      }\n-      ast_map::node_variant(ref v, _, _) => {\n-        cx.rmap.insert(v.node.id);\n-      }\n-      _ => ()\n+    match cx.tcx.items.find(&did.node) {\n+        None => (), // This can happen for self, for example\n+        Some(&ast_map::node_item(item, _)) => traverse_public_item(cx, item),\n+        Some(&ast_map::node_method(_, impl_id, _)) => traverse_def_id(cx, impl_id),\n+        Some(&ast_map::node_foreign_item(item, _, _, _)) => {\n+            cx.rmap.insert(item.id);\n+        }\n+        Some(&ast_map::node_variant(ref v, _, _)) => {\n+            cx.rmap.insert(v.node.id);\n+        }\n+        _ => ()\n     }\n }\n "}, {"sha": "e19afb0d5077d8862ba5c6122612f21d8941af01", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -98,7 +98,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n         return uses;\n     }\n     let map_node = match ccx.tcx.items.find(&fn_id_loc.node) {\n-        Some(ref x) => (/*bad*/copy *x),\n+        Some(x) => (/*bad*/copy *x),\n         None    => ccx.sess.bug(fmt!(\"type_uses_for: unbound item ID %?\",\n                                      fn_id_loc))\n     };"}, {"sha": "fcbf34dca905429492a5264039d96be4bfa18bff", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -3538,7 +3538,7 @@ pub fn store_trait_methods(cx: ctxt, id: ast::node_id, ms: @~[method]) {\n pub fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[ast::ident] {\n     if is_local(id) {\n         match cx.items.find(&id.node) {\n-            Some(ast_map::node_item(@ast::item {\n+            Some(&ast_map::node_item(@ast::item {\n                         node: item_trait(_, _, ref ms),\n                         _\n                     }, _)) =>\n@@ -3627,7 +3627,7 @@ pub fn impl_traits(cx: ctxt, id: ast::def_id, store: TraitStore) -> ~[t] {\n     if id.crate == ast::local_crate {\n         debug!(\"(impl_traits) searching for trait impl %?\", id);\n         match cx.items.find(&id.node) {\n-           Some(ast_map::node_item(@ast::item {\n+           Some(&ast_map::node_item(@ast::item {\n                         node: ast::item_impl(_, opt_trait, _, _),\n                         _},\n                     _)) => {\n@@ -3663,7 +3663,7 @@ fn struct_ctor_id(cx: ctxt, struct_did: ast::def_id) -> Option<ast::def_id> {\n     }\n \n     match cx.items.find(&struct_did.node) {\n-        Some(ast_map::node_item(item, _)) => {\n+        Some(&ast_map::node_item(item, _)) => {\n             match item.node {\n                 ast::item_struct(struct_def, _) => {\n                     struct_def.ctor_id.map(|ctor_id|\n@@ -3735,7 +3735,7 @@ pub fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n \n     if is_local(struct_id) {\n        match cx.items.find(&struct_id.node) {\n-           Some(ast_map::node_item(@ast::item {\n+           Some(&ast_map::node_item(@ast::item {\n                node: ast::item_struct(@ast::struct_def { dtor: Some(ref dtor),\n                                                          _ },\n                                       _),\n@@ -3762,8 +3762,12 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n     if id.crate != ast::local_crate {\n         csearch::get_item_path(cx, id)\n     } else {\n-        let node = cx.items.get(&id.node);\n-        match node {\n+        // FIXME (#5521): uncomment this code and don't have a catch-all at the\n+        //                end of the match statement. Favor explicitly listing\n+        //                each variant.\n+        // let node = cx.items.get(&id.node);\n+        // match *node {\n+        match *cx.items.get(&id.node) {\n           ast_map::node_item(item, path) => {\n             let item_elt = match item.node {\n               item_mod(_) | item_foreign_mod(_) => {\n@@ -3805,9 +3809,7 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n             vec::append_one(/*bad*/copy *path, ast_map::path_name(item.ident))\n           }\n \n-          ast_map::node_stmt(*) | ast_map::node_expr(*) |\n-          ast_map::node_arg(*) | ast_map::node_local(*) |\n-          ast_map::node_block(*) => {\n+          ref node => {\n             cx.sess.bug(fmt!(\"cannot find item_path for node %?\", node));\n           }\n         }\n@@ -3839,7 +3841,7 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n           call eval_const_expr, it should never get called twice for the same\n           expr, since check_enum_variants also updates the enum_var_cache\n          */\n-        match cx.items.get(&id.node) {\n+        match *cx.items.get(&id.node) {\n           ast_map::node_item(@ast::item {\n                     node: ast::item_enum(ref enum_definition, _),\n                     _\n@@ -3955,15 +3957,15 @@ pub fn lookup_field_type(tcx: ctxt,\n pub fn lookup_struct_fields(cx: ctxt, did: ast::def_id) -> ~[field_ty] {\n   if did.crate == ast::local_crate {\n     match cx.items.find(&did.node) {\n-       Some(ast_map::node_item(i,_)) => {\n+       Some(&ast_map::node_item(i,_)) => {\n          match i.node {\n             ast::item_struct(struct_def, _) => {\n                struct_field_tys(struct_def.fields)\n             }\n             _ => cx.sess.bug(~\"struct ID bound to non-struct\")\n          }\n        }\n-       Some(ast_map::node_variant(ref variant, _, _)) => {\n+       Some(&ast_map::node_variant(ref variant, _, _)) => {\n           match (*variant).node.kind {\n             ast::struct_variant_kind(struct_def) => {\n               struct_field_tys(struct_def.fields)"}, {"sha": "fcaf1c08342be22dfc68dfdcc82f38f370a245dd", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -1257,7 +1257,7 @@ pub impl<'self> LookupContext<'self> {\n     fn report_static_candidate(&self, idx: uint, did: def_id) {\n         let span = if did.crate == ast::local_crate {\n             match self.tcx().items.find(&did.node) {\n-              Some(ast_map::node_method(m, _, _)) => m.span,\n+              Some(&ast_map::node_method(m, _, _)) => m.span,\n               _ => fail!(fmt!(\"report_static_candidate: bad item %?\", did))\n             }\n         } else {"}, {"sha": "005b5377b629ef75aa06f2f56881ede8402a328c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -1066,15 +1066,15 @@ pub fn impl_self_ty(vcx: &VtableContext,\n         let region_param = tcx.region_paramd_items.find(&did.node).\n                                map_consume(|x| *x);\n         match tcx.items.find(&did.node) {\n-          Some(ast_map::node_item(@ast::item {\n+          Some(&ast_map::node_item(@ast::item {\n                   node: ast::item_impl(ref ts, _, st, _),\n                   _\n               }, _)) => {\n             (ts.ty_params.len(),\n              region_param,\n              vcx.ccx.to_ty(&rscope::type_rscope(region_param), st))\n           }\n-          Some(ast_map::node_item(@ast::item {\n+          Some(&ast_map::node_item(@ast::item {\n                   node: ast::item_struct(_, ref ts),\n                   id: class_id,\n                   _\n@@ -1872,7 +1872,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                 tcx.region_paramd_items.find(&class_id.node).\n                     map_consume(|x| *x);\n             match tcx.items.find(&class_id.node) {\n-                Some(ast_map::node_item(@ast::item {\n+                Some(&ast_map::node_item(@ast::item {\n                         node: ast::item_struct(_, ref generics),\n                         _\n                     }, _)) => {\n@@ -1960,7 +1960,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             region_parameterized =\n                 tcx.region_paramd_items.find(&enum_id.node).map_consume(|x| *x);\n             match tcx.items.find(&enum_id.node) {\n-                Some(ast_map::node_item(@ast::item {\n+                Some(&ast_map::node_item(@ast::item {\n                         node: ast::item_enum(_, ref generics),\n                         _\n                     }, _)) => {"}, {"sha": "7e97edf8f8aa62000219f6f8c043cf940bfbc506", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -801,7 +801,7 @@ pub impl CoherenceChecker {\n     fn span_of_impl(&self, implementation: @Impl) -> span {\n         fail_unless!(implementation.did.crate == local_crate);\n         match self.crate_context.tcx.items.find(&implementation.did.node) {\n-            Some(node_item(item, _)) => {\n+            Some(&node_item(item, _)) => {\n                 return item.span;\n             }\n             _ => {\n@@ -1003,7 +1003,7 @@ pub impl CoherenceChecker {\n                     // Destructors only work on nominal types.\n                     if impl_info.did.crate == ast::local_crate {\n                         match tcx.items.find(&impl_info.did.node) {\n-                            Some(ast_map::node_item(@ref item, _)) => {\n+                            Some(&ast_map::node_item(@ref item, _)) => {\n                                 tcx.sess.span_err((*item).span,\n                                                   ~\"the Drop trait may only \\\n                                                     be implemented on \\"}, {"sha": "a1fcf1029880b2849985d29e75a7069c0e9c611c", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -137,10 +137,10 @@ impl AstConv for CrateCtxt {\n             csearch::get_type(self.tcx, id)\n         } else {\n             match self.tcx.items.find(&id.node) {\n-              Some(ast_map::node_item(item, _)) => {\n+              Some(&ast_map::node_item(item, _)) => {\n                 ty_of_item(self, item)\n               }\n-              Some(ast_map::node_foreign_item(foreign_item, _, _, _)) => {\n+              Some(&ast_map::node_foreign_item(foreign_item, _, _, _)) => {\n                 ty_of_foreign_item(self, foreign_item)\n               }\n               ref x => {\n@@ -281,7 +281,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n \n     let tcx = ccx.tcx;\n     let region_paramd = tcx.region_paramd_items.find(&id).map_consume(|x| *x);\n-    match tcx.items.get(&id) {\n+    match *tcx.items.get(&id) {\n       ast_map::node_item(@ast::item {\n                 node: ast::item_trait(ref generics, _, ref ms),\n                 _\n@@ -516,7 +516,7 @@ pub fn check_methods_against_trait(ccx: &CrateCtxt,\n         // the methods within the trait with bogus results. (See issue #3903.)\n \n         match tcx.items.find(&did.node) {\n-            Some(ast_map::node_item(item, _)) => {\n+            Some(&ast_map::node_item(item, _)) => {\n                 let tpt = ty_of_item(ccx, item);\n                 ensure_trait_methods(ccx, did.node, tpt.ty);\n             }"}, {"sha": "77022b80feba006b0c0b68f06be0cd43a4f313d2", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -291,7 +291,7 @@ fn check_main_fn_ty(ccx: @mut CrateCtxt,\n     match ty::get(main_t).sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             match tcx.items.find(&main_id) {\n-                Some(ast_map::node_item(it,_)) => {\n+                Some(&ast_map::node_item(it,_)) => {\n                     match it.node {\n                         ast::item_fn(_, _, ref ps, _)\n                         if ps.is_parameterized() => {"}, {"sha": "bf2a35dbf7cb3245a85cd53f5fc68c09bd80d5c9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -64,10 +64,10 @@ pub fn explain_region_and_span(cx: ctxt, region: ty::Region)\n     return match region {\n       re_scope(node_id) => {\n         match cx.items.find(&node_id) {\n-          Some(ast_map::node_block(ref blk)) => {\n+          Some(&ast_map::node_block(ref blk)) => {\n             explain_span(cx, \"block\", blk.span)\n           }\n-          Some(ast_map::node_expr(expr)) => {\n+          Some(&ast_map::node_expr(expr)) => {\n             match expr.node {\n               ast::expr_call(*) => explain_span(cx, \"call\", expr.span),\n               ast::expr_method_call(*) => {\n@@ -77,10 +77,10 @@ pub fn explain_region_and_span(cx: ctxt, region: ty::Region)\n               _ => explain_span(cx, \"expression\", expr.span)\n             }\n           }\n-          Some(ast_map::node_stmt(stmt)) => {\n+          Some(&ast_map::node_stmt(stmt)) => {\n               explain_span(cx, \"statement\", stmt.span)\n           }\n-          Some(ast_map::node_item(it, _)) if (match it.node {\n+          Some(&ast_map::node_item(it, _)) if (match it.node {\n                 ast::item_fn(*) => true, _ => false}) => {\n               explain_span(cx, \"function body\", it.span)\n           }\n@@ -102,7 +102,7 @@ pub fn explain_region_and_span(cx: ctxt, region: ty::Region)\n         };\n \n         match cx.items.find(&id) {\n-          Some(ast_map::node_block(ref blk)) => {\n+          Some(&ast_map::node_block(ref blk)) => {\n             let (msg, opt_span) = explain_span(cx, \"block\", blk.span);\n             (fmt!(\"%s %s\", prefix, msg), opt_span)\n           }\n@@ -152,11 +152,11 @@ pub fn bound_region_to_str_space(cx: ctxt,\n \n pub fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> ~str {\n     match cx.items.find(&node_id) {\n-      Some(ast_map::node_block(ref blk)) => {\n+      Some(&ast_map::node_block(ref blk)) => {\n         fmt!(\"<block at %s>\",\n              cx.sess.codemap.span_to_str(blk.span))\n       }\n-      Some(ast_map::node_expr(expr)) => {\n+      Some(&ast_map::node_expr(expr)) => {\n         match expr.node {\n           ast::expr_call(*) => {\n             fmt!(\"<call at %s>\","}, {"sha": "30c8ff6964ef8bf7af1a4de7e1010060f58ecc2a", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -114,7 +114,7 @@ fn parse_item_attrs<T:Owned>(\n     id: doc::AstId,\n     parse_attrs: ~fn(a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |ctxt| {\n-        let attrs = match ctxt.ast_map.get(&id) {\n+        let attrs = match *ctxt.ast_map.get(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           ast_map::node_foreign_item(item, _, _, _) => copy item.attrs,\n           _ => fail!(~\"parse_item_attrs: not an item\")\n@@ -162,7 +162,7 @@ fn fold_enum(\n             let desc = {\n                 let variant = copy variant;\n                 do astsrv::exec(srv.clone()) |ctxt| {\n-                    match ctxt.ast_map.get(&doc_id) {\n+                    match *ctxt.ast_map.get(&doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n@@ -226,7 +226,7 @@ fn merge_method_attrs(\n \n     // Create an assoc list from method name to attributes\n     let attrs: ~[(~str, Option<~str>)] = do astsrv::exec(srv) |ctxt| {\n-        match ctxt.ast_map.get(&item_id) {\n+        match *ctxt.ast_map.get(&item_id) {\n           ast_map::node_item(@ast::item {\n             node: ast::item_trait(_, _, ref methods), _\n           }, _) => {"}, {"sha": "3c069e59e7ae356fbbea3e74c94754a1edd99e0d", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -53,7 +53,7 @@ fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n \n     let id = doc.id;\n     do astsrv::exec(srv) |ctxt| {\n-        let attrs = match ctxt.ast_map.get(&id) {\n+        let attrs = match *ctxt.ast_map.get(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           _ => ~[]\n         };"}, {"sha": "e6f21b5df5457fb99201414a400eb19ccef1b943", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -57,7 +57,7 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     do astsrv::exec(fold.ctxt.clone()) |ctxt| {\n-        match ctxt.ast_map.get(&doc.item.id) {\n+        match *ctxt.ast_map.get(&doc.item.id) {\n             ast_map::node_item(item, _) => {\n                 match item.node {\n                     ast::item_impl(_, None, _, ref methods) => {\n@@ -136,7 +136,7 @@ fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n     let id = doc.id;\n \n     do astsrv::exec(srv) |ctxt| {\n-        match ctxt.ast_map.get(&id) {\n+        match *ctxt.ast_map.get(&id) {\n             ast_map::node_item(item, _) => {\n                 match &item.node {\n                     &ast::item_impl(*) => {"}, {"sha": "229a0a3ff0f3d4d702332b44a49f84823ae8794f", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -66,7 +66,7 @@ fn fold_fn(\n \n fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n-        match ctxt.ast_map.get(&fn_id) {\n+        match *ctxt.ast_map.get(&fn_id) {\n           ast_map::node_item(@ast::item {\n             ident: ident,\n             node: ast::item_fn(ref decl, purity, ref tys, _), _\n@@ -106,7 +106,7 @@ fn fold_const(\n         sig: Some({\n             let doc = copy doc;\n             do astsrv::exec(srv) |ctxt| {\n-                match ctxt.ast_map.get(&doc.id()) {\n+                match *ctxt.ast_map.get(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n                         node: ast::item_const(ty, _), _\n                     }, _) => {\n@@ -137,7 +137,7 @@ fn fold_enum(\n             let sig = {\n                 let variant = copy *variant;\n                 do astsrv::exec(srv.clone()) |ctxt| {\n-                    match ctxt.ast_map.get(&doc_id) {\n+                    match *ctxt.ast_map.get(&doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n@@ -199,7 +199,7 @@ fn get_method_sig(\n     method_name: ~str\n ) -> Option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n-        match ctxt.ast_map.get(&item_id) {\n+        match *ctxt.ast_map.get(&item_id) {\n           ast_map::node_item(@ast::item {\n             node: ast::item_trait(_, _, ref methods), _\n           }, _) => {\n@@ -277,7 +277,7 @@ fn fold_impl(\n     let (bounds, trait_types, self_ty) = {\n         let doc = copy doc;\n         do astsrv::exec(srv) |ctxt| {\n-            match ctxt.ast_map.get(&doc.id()) {\n+            match *ctxt.ast_map.get(&doc.id()) {\n                 ast_map::node_item(@ast::item {\n                     node: ast::item_impl(ref generics, opt_trait_type, self_ty, _), _\n                 }, _) => {\n@@ -347,7 +347,7 @@ fn fold_type(\n         sig: {\n             let doc = copy doc;\n             do astsrv::exec(srv) |ctxt| {\n-                match ctxt.ast_map.get(&doc.id()) {\n+                match *ctxt.ast_map.get(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n                         ident: ident,\n                         node: ast::item_ty(ty, ref params), _\n@@ -385,7 +385,7 @@ fn fold_struct(\n         sig: {\n             let doc = copy doc;\n             do astsrv::exec(srv) |ctxt| {\n-                match ctxt.ast_map.get(&doc.id()) {\n+                match *ctxt.ast_map.get(&doc.id()) {\n                     ast_map::node_item(item, _) => {\n                         let item = strip_struct_extra_stuff(item);\n                         Some(pprust::item_to_str(item,"}, {"sha": "eef14ac8b7a5c547a7571c07aee1a18a3f5f6f17", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe1354321e6d8aa5bfe09ac33d780a97d3f7788/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=dbe1354321e6d8aa5bfe09ac33d780a97d3f7788", "patch": "@@ -23,9 +23,9 @@ use print::pprust;\n use visit;\n \n use core::cmp;\n+use core::hashmap::linear::LinearMap;\n use core::str;\n use core::vec;\n-use std;\n \n pub enum path_elt {\n     path_mod(ident),\n@@ -104,10 +104,10 @@ pub enum ast_node {\n     node_struct_ctor(@struct_def, @item, @path),\n }\n \n-pub type map = std::oldmap::HashMap<node_id, ast_node>;\n+pub type map = @mut LinearMap<node_id, ast_node>;\n \n pub struct Ctx {\n-    map: @map,\n+    map: map,\n     path: path,\n     local_id: uint,\n     diag: @span_handler,\n@@ -134,13 +134,13 @@ pub fn mk_ast_map_visitor() -> vt {\n \n pub fn map_crate(diag: @span_handler, c: crate) -> map {\n     let cx = @mut Ctx {\n-        map: @std::oldmap::HashMap(),\n+        map: @mut LinearMap::new(),\n         path: ~[],\n         local_id: 0u,\n         diag: diag,\n     };\n     visit::visit_crate(c, cx, mk_ast_map_visitor());\n-    *cx.map\n+    cx.map\n }\n \n // Used for items loaded from external crate that are being inlined into this\n@@ -157,7 +157,7 @@ pub fn map_decoded_item(diag: @span_handler,\n     // even if we did I think it only needs an ordering between local\n     // variables that are simultaneously in scope).\n     let cx = @mut Ctx {\n-        map: @map,\n+        map: map,\n         path: copy path,\n         local_id: 0,\n         diag: diag,\n@@ -374,7 +374,7 @@ pub fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n       None => {\n         fmt!(\"unknown node (id=%d)\", id)\n       }\n-      Some(node_item(item, path)) => {\n+      Some(&node_item(item, path)) => {\n         let path_str = path_ident_to_str(*path, item.ident, itr);\n         let item_str = match item.node {\n           item_const(*) => ~\"const\",\n@@ -390,43 +390,43 @@ pub fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n         };\n         fmt!(\"%s %s (id=%?)\", item_str, path_str, id)\n       }\n-      Some(node_foreign_item(item, abi, _, path)) => {\n+      Some(&node_foreign_item(item, abi, _, path)) => {\n         fmt!(\"foreign item %s with abi %? (id=%?)\",\n              path_ident_to_str(*path, item.ident, itr), abi, id)\n       }\n-      Some(node_method(m, _, path)) => {\n+      Some(&node_method(m, _, path)) => {\n         fmt!(\"method %s in %s (id=%?)\",\n              *itr.get(m.ident), path_to_str(*path, itr), id)\n       }\n-      Some(node_trait_method(ref tm, _, path)) => {\n+      Some(&node_trait_method(ref tm, _, path)) => {\n         let m = ast_util::trait_method_to_ty_method(&**tm);\n         fmt!(\"method %s in %s (id=%?)\",\n              *itr.get(m.ident), path_to_str(*path, itr), id)\n       }\n-      Some(node_variant(ref variant, _, path)) => {\n+      Some(&node_variant(ref variant, _, path)) => {\n         fmt!(\"variant %s in %s (id=%?)\",\n              *itr.get(variant.node.name), path_to_str(*path, itr), id)\n       }\n-      Some(node_expr(expr)) => {\n+      Some(&node_expr(expr)) => {\n         fmt!(\"expr %s (id=%?)\", pprust::expr_to_str(expr, itr), id)\n       }\n-      Some(node_stmt(stmt)) => {\n+      Some(&node_stmt(stmt)) => {\n         fmt!(\"stmt %s (id=%?)\",\n              pprust::stmt_to_str(*stmt, itr), id)\n       }\n-      Some(node_arg(_, _)) => { // add more info here\n+      Some(&node_arg(_, _)) => { // add more info here\n         fmt!(\"arg (id=%?)\", id)\n       }\n-      Some(node_local(_)) => { // add more info here\n+      Some(&node_local(_)) => { // add more info here\n         fmt!(\"local (id=%?)\", id)\n       }\n-      Some(node_dtor(*)) => { // add more info here\n+      Some(&node_dtor(*)) => { // add more info here\n         fmt!(\"node_dtor (id=%?)\", id)\n       }\n-      Some(node_block(_)) => {\n+      Some(&node_block(_)) => {\n         fmt!(\"block\")\n       }\n-      Some(node_struct_ctor(*)) => {\n+      Some(&node_struct_ctor(*)) => {\n         fmt!(\"struct_ctor\")\n       }\n     }\n@@ -436,7 +436,7 @@ pub fn node_item_query<Result>(items: map, id: node_id,\n                                query: &fn(@item) -> Result,\n                                +error_msg: ~str) -> Result {\n     match items.find(&id) {\n-        Some(node_item(it, _)) => query(it),\n+        Some(&node_item(it, _)) => query(it),\n         _ => fail!(error_msg)\n     }\n }"}]}