{"sha": "056d48a2c97860b2cce936f310331e606076fa01", "node_id": "C_kwDOAAsO6NoAKDA1NmQ0OGEyYzk3ODYwYjJjY2U5MzZmMzEwMzMxZTYwNjA3NmZhMDE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T03:39:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T06:32:14Z"}, "message": "Remove unnecessary sigils around `Symbol::as_str()` calls.", "tree": {"sha": "c456e6021abf01fe5350f022926a9974795c071f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c456e6021abf01fe5350f022926a9974795c071f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056d48a2c97860b2cce936f310331e606076fa01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056d48a2c97860b2cce936f310331e606076fa01", "html_url": "https://github.com/rust-lang/rust/commit/056d48a2c97860b2cce936f310331e606076fa01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056d48a2c97860b2cce936f310331e606076fa01/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cddcd39ba2189da859a5164804556190906ee2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cddcd39ba2189da859a5164804556190906ee2a", "html_url": "https://github.com/rust-lang/rust/commit/8cddcd39ba2189da859a5164804556190906ee2a"}], "stats": {"total": 381, "additions": 189, "deletions": 192}, "files": [{"sha": "1cc5ddfd8ee29b39fc4288a857911e57c1064219", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -35,12 +35,12 @@ impl LitKind {\n                 LitKind::Bool(symbol == kw::True)\n             }\n             token::Byte => {\n-                return unescape_byte(&symbol.as_str())\n+                return unescape_byte(symbol.as_str())\n                     .map(LitKind::Byte)\n                     .map_err(|_| LitError::LexerError);\n             }\n             token::Char => {\n-                return unescape_char(&symbol.as_str())\n+                return unescape_char(symbol.as_str())\n                     .map(LitKind::Char)\n                     .map_err(|_| LitError::LexerError);\n             }"}, {"sha": "92cae4da89ab50059902811575dc9a049ce470f2", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -1278,7 +1278,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     pub(super) fn lower_abi(&mut self, abi: StrLit) -> abi::Abi {\n-        abi::lookup(&abi.symbol_unescaped.as_str()).unwrap_or_else(|| {\n+        abi::lookup(abi.symbol_unescaped.as_str()).unwrap_or_else(|| {\n             self.error_on_invalid_abi(abi);\n             abi::Abi::Rust\n         })"}, {"sha": "45a5dc2f6242d78a443a5cadd8f06faaefd8ef18", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -61,7 +61,7 @@ impl<'a> PostExpansionVisitor<'a> {\n     fn check_abi(&self, abi: ast::StrLit) {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n-        match &*symbol_unescaped.as_str() {\n+        match symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n             | \"system\" => {}"}, {"sha": "6c5b38bc4bb15f9bedef20ce9efc9907f057530c", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -204,7 +204,7 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     };\n \n     if let Some(suffix) = suffix {\n-        out.push_str(&suffix.as_str())\n+        out.push_str(suffix.as_str())\n     }\n \n     out\n@@ -384,7 +384,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn print_symbol(&mut self, sym: Symbol, style: ast::StrStyle) {\n-        self.print_string(&sym.as_str(), style);\n+        self.print_string(sym.as_str(), style);\n     }\n \n     fn print_inner_attributes(&mut self, attrs: &[ast::Attribute]) {"}, {"sha": "bab50df3dd543351cafc2b394791b4454b9f4ef1", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -236,7 +236,7 @@ where\n \n                                     // These unwraps are safe because `get` ensures the meta item\n                                     // is a name/value pair string literal.\n-                                    issue_num = match &*issue.unwrap().as_str() {\n+                                    issue_num = match issue.unwrap().as_str() {\n                                         \"none\" => None,\n                                         issue => {\n                                             let emit_diag = |msg: &str| {\n@@ -301,7 +301,7 @@ where\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(_)) => {\n-                            if !rustc_lexer::is_ident(&feature.as_str()) {\n+                            if !rustc_lexer::is_ident(feature.as_str()) {\n                                 handle_errors(\n                                     &sess.parse_sess,\n                                     attr.span,\n@@ -535,7 +535,7 @@ pub fn eval_condition(\n                     return false;\n                 }\n             };\n-            let min_version = match parse_version(&min_version.as_str(), false) {\n+            let min_version = match parse_version(min_version.as_str(), false) {\n                 Some(ver) => ver,\n                 None => {\n                     sess.span_diagnostic"}, {"sha": "8a2d8c8432c396eff4cf28a70884ad2d999d7225", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -416,7 +416,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             tcx,\n                             generics,\n                             &mut err,\n-                            &param.name.as_str(),\n+                            param.name.as_str(),\n                             \"Copy\",\n                             None,\n                         );"}, {"sha": "2e646f55b8aac613603531c05041f33591fd4535", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -206,7 +206,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             {\n                 let local_info = &self.body.local_decls[local].local_info;\n                 if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n-                    buf.push_str(&self.infcx.tcx.item_name(def_id).as_str());\n+                    buf.push_str(self.infcx.tcx.item_name(def_id).as_str());\n                 } else {\n                     unreachable!();\n                 }\n@@ -318,7 +318,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let decl = &self.body.local_decls[local];\n         match self.local_names[local] {\n             Some(name) if !decl.from_compiler_desugaring() => {\n-                buf.push_str(&name.as_str());\n+                buf.push_str(name.as_str());\n                 Ok(())\n             }\n             _ => Err(()),"}, {"sha": "42dd8095dda02aad0e1f8853fdef15ed6866a95b", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -572,7 +572,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             template_snippet.as_ref().map(|s| Symbol::intern(s)),\n             template_sp,\n         ));\n-        let template_str = &template_str.as_str();\n+        let template_str = template_str.as_str();\n \n         if let Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) = ecx.sess.asm_arch {\n             let find_span = |needle: &str| -> Span {"}, {"sha": "59361510a672e7a91fcacb65d9314f8705d8a23c", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -21,7 +21,7 @@ pub fn expand_concat(\n         match e.kind {\n             ast::ExprKind::Lit(ref lit) => match lit.kind {\n                 ast::LitKind::Str(ref s, _) | ast::LitKind::Float(ref s, _) => {\n-                    accumulator.push_str(&s.as_str());\n+                    accumulator.push_str(s.as_str());\n                 }\n                 ast::LitKind::Char(c) => {\n                     accumulator.push(c);"}, {"sha": "239bafb266a524192d7696d4781f84cc5249e3f2", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -29,7 +29,7 @@ pub fn expand_concat_idents<'cx>(\n         } else {\n             if let TokenTree::Token(token) = e {\n                 if let Some((ident, _)) = token.ident() {\n-                    res_str.push_str(&ident.name.as_str());\n+                    res_str.push_str(ident.name.as_str());\n                     continue;\n                 }\n             }"}, {"sha": "47d7b6c259e33536ed9c43cf4053639a00c7daae", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -121,7 +121,7 @@ fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n \n fn report_unexpected_literal(sess: &Session, lit: &ast::Lit) {\n     let help_msg = match lit.token.kind {\n-        token::Str if rustc_lexer::is_ident(&lit.token.symbol.as_str()) => {\n+        token::Str if rustc_lexer::is_ident(lit.token.symbol.as_str()) => {\n             format!(\"try using `#[derive({})]`\", lit.token.symbol)\n         }\n         _ => \"for example, write `#[derive(Debug)]` for `Debug`\".to_string(),"}, {"sha": "285027fc632d727c7dd2e08e4db69ad24dea34aa", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -80,11 +80,11 @@ pub fn expand_env<'cx>(\n     }\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let value = env::var(&*var.as_str()).ok().as_deref().map(Symbol::intern);\n+    let value = env::var(var.as_str()).ok().as_deref().map(Symbol::intern);\n     cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n-            cx.span_err(sp, &msg.as_str());\n+            cx.span_err(sp, msg.as_str());\n             return DummyResult::any(sp);\n         }\n         Some(value) => cx.expr_str(sp, value),"}, {"sha": "407aaacb88999562350ff62843ecaf6f16f76648", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -955,7 +955,7 @@ pub fn expand_preparsed_format_args(\n         ast::StrStyle::Raw(raw) => Some(raw as usize),\n     };\n \n-    let fmt_str = &fmt_str.as_str(); // for the suggestions below\n+    let fmt_str = fmt_str.as_str(); // for the suggestions below\n     let fmt_snippet = ecx.source_map().span_to_snippet(fmt_sp).ok();\n     let mut parser = parse::Parser::new(\n         fmt_str,"}, {"sha": "c09be5f75979fc530fa6d800257e4230d438a745", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -84,7 +84,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out =\n-            tcx.output_filenames(()).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n+            tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n@@ -176,7 +176,7 @@ fn module_codegen(\n         )\n     });\n \n-    codegen_global_asm(tcx, &cgu.name().as_str(), &cx.global_asm);\n+    codegen_global_asm(tcx, cgu.name().as_str(), &cx.global_asm);\n \n     codegen_result\n }\n@@ -207,7 +207,7 @@ pub(crate) fn run_aot(\n         cgus.iter()\n             .map(|cgu| {\n                 let cgu_reuse = determine_cgu_reuse(tcx, cgu);\n-                tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n+                tcx.sess.cgu_reuse_tracker.set_actual_reuse(cgu.name().as_str(), cgu_reuse);\n \n                 match cgu_reuse {\n                     _ if backend_config.disable_incr_cache => {}"}, {"sha": "ec542e55681e5be898ab0be9f2c4671b40c7950c", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -33,7 +33,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             return value;\n         }\n \n-        let global = self.global_string(&*symbol.as_str());\n+        let global = self.global_string(symbol.as_str());\n \n         self.const_cstr_cache.borrow_mut().insert(symbol, global);\n         global"}, {"sha": "dbee505a4977b26f1853acb52643f194fd5c437b", "filename": "compiler/rustc_codegen_gcc/src/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -17,7 +17,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                 global.set_tls_model(self.tls_model);\n             }\n             if let Some(link_section) = link_section {\n-                global.set_link_section(&link_section.as_str());\n+                global.set_link_section(link_section.as_str());\n             }\n             global\n         }\n@@ -53,7 +53,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             global.set_tls_model(self.tls_model);\n         }\n         if let Some(link_section) = link_section {\n-            global.set_link_section(&link_section.as_str());\n+            global.set_link_section(link_section.as_str());\n         }\n         let global_address = global.get_address(None);\n         self.globals.borrow_mut().insert(name.to_string(), global_address);"}, {"sha": "0782adeb6a175bad86a826ab561d2dbe17c60f99", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = tcx.item_name(def_id);\n-        let name_str = &*name.as_str();\n+        let name_str = name.as_str();\n \n         let llret_ty = self.layout_of(ret_ty).gcc_type(self, true);\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);"}, {"sha": "aff27f71d91c464612577e5a275c452a65a674d2", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -52,7 +52,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n     let sig =\n         tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), callee_ty.fn_sig(tcx));\n     let arg_tys = sig.inputs();\n-    let name_str = &*name.as_str();\n+    let name_str = name.as_str();\n \n     // every intrinsic below takes a SIMD vector as its first argument\n     require_simd!(arg_tys[0], \"input\");"}, {"sha": "f8ffcd947346aa69765f62c8dd8ce28c5fc38e92", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -322,7 +322,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         .target_features\n         .iter()\n         .flat_map(|f| {\n-            let feature = &f.as_str();\n+            let feature = f.as_str();\n             llvm_util::to_llvm_feature(cx.tcx.sess, feature)\n                 .into_iter()\n                 .map(|f| format!(\"+{}\", f))\n@@ -347,7 +347,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n \n             let name =\n                 codegen_fn_attrs.link_name.unwrap_or_else(|| cx.tcx.item_name(instance.def_id()));\n-            let name = CString::new(&name.as_str()[..]).unwrap();\n+            let name = CString::new(name.as_str()).unwrap();\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,"}, {"sha": "a539b0e3f1625faf7b8cb4761e6b254e6621f2d0", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -82,7 +82,7 @@ pub fn compile_codegen_unit(\n             &[cgu_name.to_string(), cgu.size_estimate().to_string()],\n         );\n         // Instantiate monomorphizations without filling out definitions yet...\n-        let llvm_module = ModuleLlvm::new(tcx, &cgu_name.as_str());\n+        let llvm_module = ModuleLlvm::new(tcx, cgu_name.as_str());\n         {\n             let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit.items_in_deterministic_order(cx.tcx);\n@@ -146,7 +146,7 @@ pub fn set_link_section(llval: &Value, attrs: &CodegenFnAttrs) {\n         None => return,\n     };\n     unsafe {\n-        let buf = SmallCStr::new(&sect.as_str());\n+        let buf = SmallCStr::new(sect.as_str());\n         llvm::LLVMSetSection(llval, buf.as_ptr());\n     }\n }"}, {"sha": "2b94d5f67806d32aaa70d8f787fa96eca6d9a935", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -320,7 +320,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CrateDebugContext::new(llmod);\n-            debuginfo::metadata::compile_unit_metadata(tcx, &codegen_unit.name().as_str(), &dctx);\n+            debuginfo::metadata::compile_unit_metadata(tcx, codegen_unit.name().as_str(), &dctx);\n             Some(dctx)\n         } else {\n             None"}, {"sha": "37825cc3fc7f20b13ea126c56003bf216c0b1643", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -1033,7 +1033,7 @@ pub fn compile_unit_metadata(\n ) -> &'ll DIDescriptor {\n     let mut name_in_debuginfo = match tcx.sess.local_crate_source_file {\n         Some(ref path) => path.clone(),\n-        None => PathBuf::from(&*tcx.crate_name(LOCAL_CRATE).as_str()),\n+        None => PathBuf::from(tcx.crate_name(LOCAL_CRATE).as_str()),\n     };\n \n     // The OSX linker has an idiosyncrasy where it will ignore some debuginfo\n@@ -1353,7 +1353,7 @@ fn closure_saved_names_of_captured_variables(tcx: TyCtxt<'tcx>, def_id: DefId) -\n                 _ => return None,\n             };\n             let prefix = if is_ref { \"_ref__\" } else { \"\" };\n-            Some(prefix.to_owned() + &var.name.as_str())\n+            Some(prefix.to_owned() + var.name.as_str())\n         })\n         .collect::<Vec<_>>()\n }\n@@ -2421,7 +2421,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIAr\n                             cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                         let actual_type_metadata =\n                             type_metadata(cx, actual_type, rustc_span::DUMMY_SP);\n-                        let name = &name.as_str();\n+                        let name = name.as_str();\n                         Some(unsafe {\n                             Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                                 DIB(cx),"}, {"sha": "17071ba1b5bf343575266ca5cbff2fe051d1730b", "filename": "compiler/rustc_codegen_ssa/src/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -48,7 +48,7 @@ impl Command {\n     }\n \n     pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n-        self.arg(&*arg.as_str());\n+        self.arg(arg.as_str());\n         self\n     }\n "}, {"sha": "d4e855ac93239e51ff34262ecc90c1e93b1a1dae", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -88,7 +88,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n                 sess,\n                 crate_type,\n                 outputs,\n-                &codegen_results.crate_info.local_crate_name.as_str(),\n+                codegen_results.crate_info.local_crate_name.as_str(),\n             );\n             match crate_type {\n                 CrateType::Rlib => {"}, {"sha": "fac8f3dccc42c96a82326786685500691592bcda", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -672,7 +672,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n \n         let cgu_reuse = cgu_reuse[i];\n-        tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n+        tcx.sess.cgu_reuse_tracker.set_actual_reuse(cgu.name().as_str(), cgu_reuse);\n \n         match cgu_reuse {\n             CguReuse::No => {"}, {"sha": "d340cce8495e83d5566b19ee1ff2efce4844b3c2", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -516,7 +516,7 @@ fn push_unqualified_item_name(\n ) {\n     match disambiguated_data.data {\n         DefPathData::CrateRoot => {\n-            output.push_str(&tcx.crate_name(def_id.krate).as_str());\n+            output.push_str(tcx.crate_name(def_id.krate).as_str());\n         }\n         DefPathData::ClosureExpr if tcx.generator_kind(def_id).is_some() => {\n             // Generators look like closures, but we want to treat them differently\n@@ -529,7 +529,7 @@ fn push_unqualified_item_name(\n         }\n         _ => match disambiguated_data.data.name() {\n             DefPathDataName::Named(name) => {\n-                output.push_str(&name.as_str());\n+                output.push_str(name.as_str());\n             }\n             DefPathDataName::Anon { namespace } => {\n                 if cpp_like_names(tcx) {"}, {"sha": "3657f80c2de80072298c508be2ebce7141ac1c70", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = bx.tcx().item_name(def_id);\n-        let name_str = &*name.as_str();\n+        let name_str = name.as_str();\n \n         let llret_ty = bx.backend_type(bx.layout_of(ret_ty));\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n@@ -375,7 +375,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 use crate::common::AtomicOrdering::*;\n                 use crate::common::{AtomicRmwBinOp, SynchronizationScope};\n \n-                let split: Vec<&str> = name_str.split('_').collect();\n+                let split: Vec<_> = name_str.split('_').collect();\n \n                 let is_cxchg = split[1] == \"cxchg\" || split[1] == \"cxchgweak\";\n                 let (order, failorder) = match split.len() {"}, {"sha": "058903dcdee55f90d0b8b807852173033082faff", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -82,7 +82,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n         let loc_details = &self.tcx.sess.opts.debugging_opts.location_detail;\n         let file = if loc_details.file {\n-            self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation, Mutability::Not)\n+            self.allocate_str(filename.as_str(), MemoryKind::CallerLocation, Mutability::Not)\n         } else {\n             // FIXME: This creates a new allocation each time. It might be preferable to\n             // perform this allocation only once, and re-use the `MPlaceTy`."}, {"sha": "d166bc78f51f92438235e20be2874b16f9d80ca8", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.path.push_str(&self.tcx.crate_name(cnum).as_str());\n+        self.path.push_str(self.tcx.crate_name(cnum).as_str());\n         Ok(self)\n     }\n "}, {"sha": "db0dea4870876d9a78c3c51632fc239ed7f11fd8", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -171,7 +171,7 @@ fn get_features(\n             }\n \n             if let Some(allowed) = sess.opts.debugging_opts.allow_features.as_ref() {\n-                if allowed.iter().all(|f| name.as_str() != *f) {\n+                if allowed.iter().all(|f| name.as_str() != f) {\n                     struct_span_err!(\n                         span_handler,\n                         mi.span(),"}, {"sha": "56564656556ef8ab68d6151f8186f5edd6c242f6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -331,9 +331,9 @@ pub struct Ident {\n \n impl Ident {\n     fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n-        let sym = nfc_normalize(&sym.as_str());\n+        let sym = nfc_normalize(sym.as_str());\n         let string = sym.as_str();\n-        if !rustc_lexer::is_ident(&string) {\n+        if !rustc_lexer::is_ident(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n         if is_raw && !sym.can_be_raw() {"}, {"sha": "373257669351f02b054ad8028e9953043cd62d2b", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -173,7 +173,7 @@ impl DisambiguatedDefPathData {\n                 if verbose && self.disambiguator != 0 {\n                     write!(writer, \"{}#{}\", name, self.disambiguator)\n                 } else {\n-                    writer.write_str(&name.as_str())\n+                    writer.write_str(name.as_str())\n                 }\n             }\n             DefPathDataName::Anon { namespace } => {\n@@ -494,7 +494,7 @@ impl DefPathData {\n impl fmt::Display for DefPathData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.name() {\n-            DefPathDataName::Named(name) => f.write_str(&name.as_str()),\n+            DefPathDataName::Named(name) => f.write_str(name.as_str()),\n             // FIXME(#70334): this will generate legacy {{closure}}, {{impl}}, etc\n             DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n         }"}, {"sha": "8fdd94daafe141c049145c4e5b82eb5cce5752ae", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -131,7 +131,7 @@ impl IfThisChanged<'tcx> {\n                         DepNode::from_def_path_hash(self.tcx, def_path_hash, DepKind::hir_owner)\n                     }\n                     Some(n) => {\n-                        match DepNode::from_label_string(self.tcx, &n.as_str(), def_path_hash) {\n+                        match DepNode::from_label_string(self.tcx, n.as_str(), def_path_hash) {\n                             Ok(n) => n,\n                             Err(()) => {\n                                 self.tcx.sess.span_fatal(\n@@ -147,7 +147,7 @@ impl IfThisChanged<'tcx> {\n                 let dep_node_interned = self.argument(attr);\n                 let dep_node = match dep_node_interned {\n                     Some(n) => {\n-                        match DepNode::from_label_string(self.tcx, &n.as_str(), def_path_hash) {\n+                        match DepNode::from_label_string(self.tcx, n.as_str(), def_path_hash) {\n                             Ok(n) => n,\n                             Err(()) => {\n                                 self.tcx.sess.span_fatal("}, {"sha": "9fc45c3d16591b73ae05ee64b5dbc714fbf78300", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -124,7 +124,7 @@ impl AssertModuleSource<'tcx> {\n \n         debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n-        if !self.available_cgus.contains(&*cgu_name.as_str()) {\n+        if !self.available_cgus.contains(cgu_name.as_str()) {\n             self.tcx.sess.span_err(\n                 attr.span,\n                 &format!("}, {"sha": "2099af39dca0f1c1e81023641ffcea44af5febb9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -2252,8 +2252,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             .map(|p| p.name.as_str()),\n                     );\n                 }\n-                let lts = lts_names.iter().map(|s| -> &str { &*s }).collect::<Vec<_>>();\n-                possible.find(|candidate| !lts.contains(&candidate.as_str()))\n+                possible.find(|candidate| !lts_names.contains(&&candidate[..]))\n             })\n             .unwrap_or(\"'lt\".to_string());\n         let add_lt_sugg = generics"}, {"sha": "6268fc647786b226af92275962533aceac28b64f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -324,7 +324,7 @@ pub fn configure_and_expand(\n         let crate_attrs = krate.attrs.clone();\n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n             let krate = ast::Crate { attrs, items, span, is_placeholder: None };\n-            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, &ident.name.as_str());\n+            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, ident.name.as_str());\n             (krate.attrs, krate.items)\n         };\n         let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n@@ -631,7 +631,7 @@ fn write_out_deps(\n         // (e.g. accessed in proc macros).\n         let file_depinfo = sess.parse_sess.file_depinfo.borrow();\n         let extra_tracked_files = file_depinfo.iter().map(|path_sym| {\n-            let path = PathBuf::from(&*path_sym.as_str());\n+            let path = PathBuf::from(path_sym.as_str());\n             let file = FileName::from(path);\n             escape_dep_filename(&file.prefer_local().to_string())\n         });"}, {"sha": "d31f30a8103c8e8f72abac0b7358b7cfc4b97b6a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -3183,7 +3183,7 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n         } = expr\n         {\n             for (template_sym, template_snippet, template_span) in template_strs.iter() {\n-                let template_str = &template_sym.as_str();\n+                let template_str = template_sym.as_str();\n                 let find_label_span = |needle: &str| -> Option<Span> {\n                     if let Some(template_snippet) = template_snippet {\n                         let snippet = template_snippet.as_str();"}, {"sha": "0f6b7d6af96be19b443d5c5e181361b1276c2ec0", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -381,10 +381,10 @@ impl LintStore {\n             lint_name,\n             self.lint_groups.keys().collect::<Vec<_>>()\n         );\n-        let lint_name_str = &*lint_name.as_str();\n-        self.lint_groups.contains_key(&lint_name_str) || {\n+        let lint_name_str = lint_name.as_str();\n+        self.lint_groups.contains_key(lint_name_str) || {\n             let warnings_name_str = crate::WARNINGS.name_lower();\n-            lint_name_str == &*warnings_name_str\n+            lint_name_str == warnings_name_str\n         }\n     }\n "}, {"sha": "fc99d759a03f594d45afb1db5b2bf65eea5a4ba9", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -127,7 +127,7 @@ impl HiddenUnicodeCodepoints {\n impl EarlyLintPass for HiddenUnicodeCodepoints {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n-            if contains_text_flow_control_chars(&comment.as_str()) {\n+            if contains_text_flow_control_chars(comment.as_str()) {\n                 self.lint_text_direction_codepoint(cx, comment, attr.span, 0, false, \"doc comment\");\n             }\n         }\n@@ -138,7 +138,7 @@ impl EarlyLintPass for HiddenUnicodeCodepoints {\n         let (text, span, padding) = match &expr.kind {\n             ast::ExprKind::Lit(ast::Lit { token, kind, span }) => {\n                 let text = token.symbol;\n-                if !contains_text_flow_control_chars(&text.as_str()) {\n+                if !contains_text_flow_control_chars(text.as_str()) {\n                     return;\n                 }\n                 let padding = match kind {"}, {"sha": "d3fa08650d8740937c6b132553831cf5133b5dae", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -154,7 +154,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         LintLevelSource::Node(_, forbid_source_span, reason) => {\n                             diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n                             if let Some(rationale) = reason {\n-                                diag_builder.note(&rationale.as_str());\n+                                diag_builder.note(rationale.as_str());\n                             }\n                         }\n                         LintLevelSource::CommandLine(_, _) => {"}, {"sha": "a570206f1eef771bcf9f4cfbf66e19a4378870ea", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -218,8 +218,7 @@ impl EarlyLintPass for NonAsciiIdents {\n                             cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n                                 lint.build(&format!(\n                                     \"identifier pair considered confusable between `{}` and `{}`\",\n-                                    existing_symbol.as_str(),\n-                                    symbol.as_str()\n+                                    existing_symbol, symbol\n                                 ))\n                                 .span_label(\n                                     *existing_span,"}, {"sha": "a919b3c82aa028b71ba7834f1ddb902657b3f3ed", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -71,7 +71,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n     if let hir::ExprKind::Lit(lit) = &arg.kind {\n         if let ast::LitKind::Str(sym, _) = lit.node {\n             // The argument is a string literal.\n-            check_panic_str(cx, f, arg, &sym.as_str());\n+            check_panic_str(cx, f, arg, sym.as_str());\n             return;\n         }\n     }"}, {"sha": "be7756b0f28f6c97e2df3ff9fbf2992bc3640c74", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -133,7 +133,7 @@ fn to_camel_case(s: &str) -> String {\n \n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &EarlyContext<'_>, sort: &str, ident: &Ident) {\n-        let name = &ident.name.as_str();\n+        let name = ident.name.as_str();\n \n         if !is_camel_case(name) {\n             cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, |lint| {\n@@ -276,7 +276,7 @@ impl NonSnakeCase {\n             })\n         }\n \n-        let name = &ident.name.as_str();\n+        let name = ident.name.as_str();\n \n         if !is_snake_case(name) {\n             cx.struct_span_lint(NON_SNAKE_CASE, ident.span, |lint| {\n@@ -484,7 +484,7 @@ declare_lint_pass!(NonUpperCaseGlobals => [NON_UPPER_CASE_GLOBALS]);\n \n impl NonUpperCaseGlobals {\n     fn check_upper_case(cx: &LateContext<'_>, sort: &str, ident: &Ident) {\n-        let name = &ident.name.as_str();\n+        let name = ident.name.as_str();\n         if name.chars().any(|c| c.is_lowercase()) {\n             cx.struct_span_lint(NON_UPPER_CASE_GLOBALS, ident.span, |lint| {\n                 let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();"}, {"sha": "08fa108627f7b1c2422e358bc4164d325a54fe68", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         let mut err = lint.build(&msg);\n                         // check for #[must_use = \"...\"]\n                         if let Some(note) = attr.value_str() {\n-                            err.note(&note.as_str());\n+                            err.note(note.as_str());\n                         }\n                         err.emit();\n                     });"}, {"sha": "c0da386edfdf19c8b0a0e39bcfbd9536d1aa83cc", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -292,7 +292,7 @@ impl<'a> CrateLoader<'a> {\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n             let source = self.cstore.get_crate_data(cnum).cdata.source();\n-            if let Some(entry) = self.sess.opts.externs.get(&name.as_str()) {\n+            if let Some(entry) = self.sess.opts.externs.get(name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n                 if let Some(mut files) = entry.files() {\n                     if files.any(|l| {\n@@ -381,7 +381,7 @@ impl<'a> CrateLoader<'a> {\n         let host_hash = host_lib.as_ref().map(|lib| lib.metadata.get_root().hash());\n \n         let private_dep =\n-            self.sess.opts.externs.get(&name.as_str()).map_or(false, |e| e.is_private_dep);\n+            self.sess.opts.externs.get(name.as_str()).map_or(false, |e| e.is_private_dep);\n \n         // Claim this crate number and cache it\n         let cnum = self.cstore.alloc_new_crate_num();\n@@ -997,7 +997,7 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 let name = match orig_name {\n                     Some(orig_name) => {\n-                        validate_crate_name(self.sess, &orig_name.as_str(), Some(item.span));\n+                        validate_crate_name(self.sess, orig_name.as_str(), Some(item.span));\n                         orig_name\n                     }\n                     None => item.ident.name,"}, {"sha": "7f14404ebea3934ecf7ccb8e716c17e4770a815e", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -315,7 +315,7 @@ impl<'a> CrateLocator<'a> {\n             exact_paths: if hash.is_none() {\n                 sess.opts\n                     .externs\n-                    .get(&crate_name.as_str())\n+                    .get(crate_name.as_str())\n                     .into_iter()\n                     .filter_map(|entry| entry.files())\n                     .flatten()\n@@ -1175,7 +1175,7 @@ impl CrateError {\n                     } else if crate_name\n                         == Symbol::intern(&sess.opts.debugging_opts.profiler_runtime)\n                     {\n-                        err.note(&\"the compiler may have been built without the profiler runtime\");\n+                        err.note(\"the compiler may have been built without the profiler runtime\");\n                     } else if crate_name.as_str().starts_with(\"rustc_\") {\n                         err.help(\n                             \"maybe you need to install the missing components with: \\"}, {"sha": "889145d3f9824de1f00a19de5c52c5126dec5eab", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -67,7 +67,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         Some(name) => name,\n                         None => continue, // skip like historical compilers\n                     };\n-                    lib.kind = match &*kind.as_str() {\n+                    lib.kind = match kind.as_str() {\n                         \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n                         \"static-nobundle\" => {\n                             sess.struct_span_warn("}, {"sha": "22e791bb14ca2d0b745b35b70725728dd359fc7d", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -319,7 +319,7 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n             LintLevelSource::Node(lint_attr_name, src, reason) => {\n                 if let Some(rationale) = reason {\n-                    err.note(&rationale.as_str());\n+                    err.note(rationale.as_str());\n                 }\n                 sess.diag_span_note_once(\n                     &mut err,"}, {"sha": "96df0525ade0e5e07cdcc9abb1ad876f821e4ec6", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -2473,7 +2473,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n-                                    struct_fmt.field(&var_name.as_str(), place);\n+                                    struct_fmt.field(var_name.as_str(), place);\n                                 }\n                             }\n \n@@ -2493,7 +2493,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n-                                    struct_fmt.field(&var_name.as_str(), place);\n+                                    struct_fmt.field(var_name.as_str(), place);\n                                 }\n                             }\n "}, {"sha": "facd7abbc9da180a20ab4040b33f837a2ef64f00", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -338,7 +338,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn work_product_id(&self) -> WorkProductId {\n-        WorkProductId::from_cgu_name(&self.name().as_str())\n+        WorkProductId::from_cgu_name(self.name().as_str())\n     }\n \n     pub fn work_product(&self, tcx: TyCtxt<'_>) -> WorkProduct {\n@@ -470,7 +470,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n         if self.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n             cgu_name\n         } else {\n-            Symbol::intern(&CodegenUnit::mangle_name(&cgu_name.as_str()))\n+            Symbol::intern(&CodegenUnit::mangle_name(cgu_name.as_str()))\n         }\n     }\n "}, {"sha": "d4e37fcf6420f145a1736af5ba479c1a5b98353a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -303,7 +303,7 @@ pub trait PrettyPrinter<'tcx>:\n         match self.tcx().trimmed_def_paths(()).get(&def_id) {\n             None => Ok((self, false)),\n             Some(symbol) => {\n-                self.write_str(&symbol.as_str())?;\n+                self.write_str(symbol.as_str())?;\n                 Ok((self, true))\n             }\n         }"}, {"sha": "dc22ffc6747ac8c4eda8473265610e612bd9f9ef", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -366,7 +366,7 @@ fn collect_and_partition_mono_items<'tcx>(\n         for cgu in codegen_units {\n             tcx.prof.artifact_size(\n                 \"codegen_unit_size_estimate\",\n-                &cgu.name().as_str()[..],\n+                cgu.name().as_str(),\n                 cgu.size_estimate() as u64,\n             );\n         }\n@@ -401,7 +401,7 @@ fn collect_and_partition_mono_items<'tcx>(\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n                     output.push(' ');\n-                    output.push_str(&cgu_name.as_str());\n+                    output.push_str(cgu_name.as_str());\n \n                     let linkage_abbrev = match linkage {\n                         Linkage::External => \"External\","}, {"sha": "3eef6160b73cf5627f90081928971343fbfc5134", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -1608,7 +1608,7 @@ impl<'a> Parser<'a> {\n                     next_token.kind\n                 {\n                     if self.token.span.hi() == next_token.span.lo() {\n-                        let s = String::from(\"0.\") + &symbol.as_str();\n+                        let s = String::from(\"0.\") + symbol.as_str();\n                         let kind = TokenKind::lit(token::Float, Symbol::intern(&s), suffix);\n                         return Some(Token::new(kind, self.token.span.to(next_token.span)));\n                     }\n@@ -1698,7 +1698,7 @@ impl<'a> Parser<'a> {\n             LitError::InvalidFloatSuffix => {\n                 let suf = suffix.expect(\"suffix error with no suffix\");\n                 let suf = suf.as_str();\n-                if looks_like_width_suffix(&['f'], &suf) {\n+                if looks_like_width_suffix(&['f'], suf) {\n                     // If it looks like a width, try to be helpful.\n                     let msg = format!(\"invalid width `{}` for float literal\", &suf[1..]);\n                     self.struct_span_err(span, &msg).help(\"valid widths are 32 and 64\").emit();"}, {"sha": "aad7e8c3204bab2e740bd34bc1a74f127b0e61e2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -607,7 +607,7 @@ impl CheckAttrVisitor<'tcx> {\n             return err_fn(meta.span(), &format!(\"isn't allowed on {}\", err));\n         }\n         let item_name = self.tcx.hir().name(hir_id);\n-        if &*item_name.as_str() == doc_alias {\n+        if item_name.as_str() == doc_alias {\n             return err_fn(meta.span(), \"is the same as the item's name\");\n         }\n         let span = meta.span();\n@@ -636,7 +636,7 @@ impl CheckAttrVisitor<'tcx> {\n                         LitKind::Str(s, _) => {\n                             if !self.check_doc_alias_value(\n                                 v,\n-                                &s.as_str(),\n+                                s.as_str(),\n                                 hir_id,\n                                 target,\n                                 true,"}, {"sha": "dbdbefad4a9532d1857995dc96a5eb0ab1492f7a", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -1464,7 +1464,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         if name == kw::Empty {\n             return None;\n         }\n-        let name: &str = &name.as_str();\n+        let name = name.as_str();\n         if name.as_bytes()[0] == b'_' {\n             return None;\n         }"}, {"sha": "4254f3239f823b5e7ed09cfaa5a2688fae9c6820", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -2340,7 +2340,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         _ => None,\n                     });\n                 }\n-                suggest_existing(err, &name.as_str()[..], suggs);\n+                suggest_existing(err, name.as_str(), suggs);\n             }\n             [] => {\n                 let mut suggs = Vec::new();"}, {"sha": "c13545a67cc1b5e4e4e5c71a9616db9e80a88439", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -693,7 +693,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             intravisit::FnKind::Method(id, _, _) => id.name,\n             intravisit::FnKind::Closure => sym::closure,\n         };\n-        let name: &str = name.as_str();\n+        let name = name.as_str();\n         let span = span!(Level::DEBUG, \"visit_fn\", name);\n         let _enter = span.enter();\n         match fk {"}, {"sha": "2046221ee6e8c3b26f1e15c18f6945304f774429", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -3482,7 +3482,7 @@ fn names_to_string(names: &[Symbol]) -> String {\n         if Ident::with_dummy_span(*name).is_raw_guess() {\n             result.push_str(\"r#\");\n         }\n-        result.push_str(&name.as_str());\n+        result.push_str(name.as_str());\n     }\n     result\n }"}, {"sha": "99f932b4a2787a80b0239a704608e5451fb3e7aa", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -825,7 +825,7 @@ impl<'tcx> SaveContext<'tcx> {\n         for attr in attrs {\n             if let Some(val) = attr.doc_str() {\n                 // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n-                result.push_str(&beautify_doc_string(val).as_str());\n+                result.push_str(beautify_doc_string(val).as_str());\n                 result.push('\\n');\n             }\n         }"}, {"sha": "1277ab89899df2edcc36fa41e474b1d9f357f94a", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -60,7 +60,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n \n     if let Some(ref s) = sess.opts.crate_name {\n         if let Some((attr, name)) = attr_crate_name {\n-            if name.as_str() != *s {\n+            if name.as_str() != s {\n                 let msg = format!(\n                     \"`--crate-name` and `#[crate_name]` are \\\n                                    required to match, but `{}` != `{}`\","}, {"sha": "aed699e4839e90a0fb2c0b21c7045f989df91755", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -55,7 +55,7 @@ pub fn find_best_match_for_name(\n     lookup: Symbol,\n     dist: Option<usize>,\n ) -> Option<Symbol> {\n-    let lookup = &lookup.as_str();\n+    let lookup = lookup.as_str();\n     let max_dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n \n     // Priority of matches:\n@@ -70,7 +70,7 @@ pub fn find_best_match_for_name(\n     let levenshtein_match = name_vec\n         .iter()\n         .filter_map(|&name| {\n-            let dist = lev_distance(lookup, &name.as_str());\n+            let dist = lev_distance(lookup, name.as_str());\n             if dist <= max_dist { Some((name, dist)) } else { None }\n         })\n         // Here we are collecting the next structure:\n@@ -88,7 +88,7 @@ pub fn find_best_match_for_name(\n \n fn find_match_by_sorted_words(iter_names: &[Symbol], lookup: &str) -> Option<Symbol> {\n     iter_names.iter().fold(None, |result, candidate| {\n-        if sort_by_words(&candidate.as_str()) == sort_by_words(lookup) {\n+        if sort_by_words(candidate.as_str()) == sort_by_words(lookup) {\n             Some(*candidate)\n         } else {\n             result"}, {"sha": "51a7a2644f69545d350481a927a1360b11926805", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -1686,19 +1686,19 @@ impl Symbol {\n \n impl fmt::Debug for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(&self.as_str(), f)\n+        fmt::Debug::fmt(self.as_str(), f)\n     }\n }\n \n impl fmt::Display for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_str(), f)\n+        fmt::Display::fmt(self.as_str(), f)\n     }\n }\n \n impl<S: Encoder> Encodable<S> for Symbol {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(&self.as_str())\n+        s.emit_str(self.as_str())\n     }\n }\n "}, {"sha": "98ab085f33b596edd6bcc6502f15f61c0466786f", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -255,7 +255,7 @@ impl Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     }\n \n     fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.write_str(&self.tcx.crate_name(cnum).as_str())?;\n+        self.write_str(self.tcx.crate_name(cnum).as_str())?;\n         Ok(self)\n     }\n     fn path_qualified("}, {"sha": "9128e54682f3dbba83ed26923de8b44bb26c444f", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -298,43 +298,43 @@ impl InlineAsmReg {\n         let name = name.as_str();\n         Ok(match arch {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                Self::X86(X86InlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Arm => {\n-                Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::AArch64 => {\n-                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Nvptx64 => {\n-                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n-                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Hexagon => {\n-                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n-                Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::S390x => {\n-                Self::S390x(S390xInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::S390x(S390xInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::SpirV => {\n-                Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n-                Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Bpf => {\n-                Self::Bpf(BpfInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Bpf(BpfInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Avr => {\n-                Self::Avr(AvrInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Avr(AvrInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n         })\n     }\n@@ -798,7 +798,7 @@ impl InlineAsmClobberAbi {\n         target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static [&'static str]> {\n-        let name = &*name.as_str();\n+        let name = name.as_str();\n         match arch {\n             InlineAsmArch::X86 => match name {\n                 \"C\" | \"system\" | \"efiapi\" | \"cdecl\" | \"stdcall\" | \"fastcall\" => {"}, {"sha": "4840995275afaab42460166295f33b6197b8f975", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -269,7 +269,7 @@ impl<'tcx> OnUnimplementedFormatString {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n         let s = self.0.as_str();\n-        let parser = Parser::new(&s, None, None, false, ParseMode::Format);\n+        let parser = Parser::new(s, None, None, false, ParseMode::Format);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -347,7 +347,7 @@ impl<'tcx> OnUnimplementedFormatString {\n         let empty_string = String::new();\n \n         let s = self.0.as_str();\n-        let parser = Parser::new(&s, None, None, false, ParseMode::Format);\n+        let parser = Parser::new(s, None, None, false, ParseMode::Format);\n         let item_context = (options.get(&sym::ItemContext)).unwrap_or(&empty_string);\n         parser\n             .map(|p| match p {"}, {"sha": "d54b1d62ee913b635a9c57b951e99d9647f839a8", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -609,7 +609,7 @@ fn check_must_not_suspend_def(\n                     // Add optional reason note\n                     if let Some(note) = attr.value_str() {\n                         // FIXME(guswynn): consider formatting this better\n-                        err.span_note(data.source_span, &note.as_str());\n+                        err.span_note(data.source_span, note.as_str());\n                     }\n \n                     // Add some quick suggestions on what to do"}, {"sha": "5e8b416168a4dfe1df0ee18a7c693ddaf172df09", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -2846,7 +2846,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             );\n         } else if attr.has_name(sym::linkage) {\n             if let Some(val) = attr.value_str() {\n-                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, &val.as_str()));\n+                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, val.as_str()));\n             }\n         } else if attr.has_name(sym::link_section) {\n             if let Some(val) = attr.value_str() {"}, {"sha": "dfee2b702c1c8f3796a8588da72702c1b5d557e9", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -466,7 +466,7 @@ impl<'a> fmt::Display for Display<'a> {\n                     (sym::unix, None) => \"Unix\",\n                     (sym::windows, None) => \"Windows\",\n                     (sym::debug_assertions, None) => \"debug-assertions enabled\",\n-                    (sym::target_os, Some(os)) => match &*os.as_str() {\n+                    (sym::target_os, Some(os)) => match os.as_str() {\n                         \"android\" => \"Android\",\n                         \"dragonfly\" => \"DragonFly BSD\",\n                         \"emscripten\" => \"Emscripten\",\n@@ -487,7 +487,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"windows\" => \"Windows\",\n                         _ => \"\",\n                     },\n-                    (sym::target_arch, Some(arch)) => match &*arch.as_str() {\n+                    (sym::target_arch, Some(arch)) => match arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n                         \"asmjs\" => \"JavaScript\",\n@@ -504,14 +504,14 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"x86_64\" => \"x86-64\",\n                         _ => \"\",\n                     },\n-                    (sym::target_vendor, Some(vendor)) => match &*vendor.as_str() {\n+                    (sym::target_vendor, Some(vendor)) => match vendor.as_str() {\n                         \"apple\" => \"Apple\",\n                         \"pc\" => \"PC\",\n                         \"sun\" => \"Sun\",\n                         \"fortanix\" => \"Fortanix\",\n                         _ => \"\",\n                     },\n-                    (sym::target_env, Some(env)) => match &*env.as_str() {\n+                    (sym::target_env, Some(env)) => match env.as_str() {\n                         \"gnu\" => \"GNU\",\n                         \"msvc\" => \"MSVC\",\n                         \"musl\" => \"musl\",\n@@ -545,14 +545,14 @@ impl<'a> fmt::Display for Display<'a> {\n                         write!(\n                             fmt,\n                             r#\"<code>{}=\"{}\"</code>\"#,\n-                            Escape(&name.as_str()),\n-                            Escape(&v.as_str())\n+                            Escape(name.as_str()),\n+                            Escape(v.as_str())\n                         )\n                     } else {\n                         write!(fmt, r#\"`{}=\"{}\"`\"#, name, v)\n                     }\n                 } else if self.1.is_html() {\n-                    write!(fmt, \"<code>{}</code>\", Escape(&name.as_str()))\n+                    write!(fmt, \"<code>{}</code>\", Escape(name.as_str()))\n                 } else {\n                     write!(fmt, \"`{}`\", name)\n                 }"}, {"sha": "500c89b3fdcadf7d803ef9b049f39afb398a4bab", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -201,7 +201,7 @@ impl ExternalCrate {\n         // See if there's documentation generated into the local directory\n         // WARNING: since rustdoc creates these directories as it generates documentation, this check is only accurate before rendering starts.\n         // Make sure to call `location()` by that time.\n-        let local_location = dst.join(&*self.name(tcx).as_str());\n+        let local_location = dst.join(self.name(tcx).as_str());\n         if local_location.is_dir() {\n             return Local;\n         }"}, {"sha": "5813062ceab773ff0825b9e0c5f002af2a2d7f80", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -150,8 +150,7 @@ impl Cache {\n \n             let name = e.name(tcx);\n             let render_options = &cx.render_options;\n-            let extern_url =\n-                render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n+            let extern_url = render_options.extern_html_root_urls.get(name.as_str()).map(|u| &**u);\n             let extern_url_takes_precedence = render_options.extern_html_root_takes_precedence;\n             let dst = &render_options.output;\n             let location = e.location(extern_url, extern_url_takes_precedence, dst, tcx);"}, {"sha": "b7af8c9801f975e6ee9264a3d4de36a562140ef8", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -90,7 +90,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         // FIXME: checking `item.name.is_some()` is very implicit and leads to lots of special\n         // cases. Use an explicit match instead.\n         } else if item.name.is_some() && !item.is_extern_crate() {\n-            prof.generic_activity_with_arg(\"render_item\", &*item.name.unwrap_or(unknown).as_str())\n+            prof.generic_activity_with_arg(\"render_item\", item.name.unwrap_or(unknown).as_str())\n                 .run(|| cx.item(item))?;\n         }\n     }"}, {"sha": "a2771efc46612bb7ef366a50a2cac3adfd9a085a", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -173,7 +173,7 @@ impl clean::GenericParamDef {\n                 Ok(())\n             }\n             clean::GenericParamDefKind::Type { bounds, default, .. } => {\n-                f.write_str(&*self.name.as_str())?;\n+                f.write_str(self.name.as_str())?;\n \n                 if !bounds.is_empty() {\n                     if f.alternate() {\n@@ -637,7 +637,7 @@ fn resolved_path<'cx>(\n                 last.name.to_string()\n             }\n         } else {\n-            anchor(did, &*last.name.as_str(), cx).to_string()\n+            anchor(did, last.name.as_str(), cx).to_string()\n         };\n         write!(w, \"{}{}\", path, last.args.print(cx))?;\n     }\n@@ -772,7 +772,7 @@ fn fmt_type<'cx>(\n         clean::Primitive(clean::PrimitiveType::Never) => {\n             primitive_link(f, PrimitiveType::Never, \"!\", cx)\n         }\n-        clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n+        clean::Primitive(prim) => primitive_link(f, prim, prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!(\n@@ -1268,7 +1268,7 @@ impl clean::Visibility {\n                     debug!(\"path={:?}\", path);\n                     // modified from `resolved_path()` to work with `DefPathData`\n                     let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n-                    let anchor = anchor(vis_did, &last_name.as_str(), cx).to_string();\n+                    let anchor = anchor(vis_did, last_name.as_str(), cx).to_string();\n \n                     let mut s = \"pub(in \".to_owned();\n                     for seg in &path.data[..path.data.len() - 1] {\n@@ -1417,7 +1417,7 @@ impl clean::TypeBinding {\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n         display_fn(move |f| {\n-            f.write_str(&*self.name.as_str())?;\n+            f.write_str(self.name.as_str())?;\n             match self.kind {\n                 clean::TypeBindingKind::Equality { ref ty } => {\n                     if f.alternate() {"}, {"sha": "c4d326e7711a39a503a5eb263f5b85a4ce92dd9a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> Context<'tcx> {\n     fn render_item(&self, it: &clean::Item, is_module: bool) -> String {\n         let mut title = String::new();\n         if !is_module {\n-            title.push_str(&it.name.unwrap().as_str());\n+            title.push_str(it.name.unwrap().as_str());\n         }\n         if !it.is_primitive() && !it.is_keyword() {\n             if !is_module {\n@@ -549,7 +549,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n     fn after_krate(&mut self) -> Result<(), Error> {\n         let crate_name = self.tcx().crate_name(LOCAL_CRATE);\n-        let final_file = self.dst.join(&*crate_name.as_str()).join(\"all.html\");\n+        let final_file = self.dst.join(crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n \n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n@@ -619,9 +619,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if let Some(ref redirections) = self.shared.redirections {\n             if !redirections.borrow().is_empty() {\n                 let redirect_map_path =\n-                    self.dst.join(&*crate_name.as_str()).join(\"redirect-map.json\");\n+                    self.dst.join(crate_name.as_str()).join(\"redirect-map.json\");\n                 let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n-                self.shared.ensure_dir(&self.dst.join(&*crate_name.as_str()))?;\n+                self.shared.ensure_dir(&self.dst.join(crate_name.as_str()))?;\n                 self.shared.fs.write(redirect_map_path, paths)?;\n             }\n         }\n@@ -703,7 +703,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if !buf.is_empty() {\n             let name = item.name.as_ref().unwrap();\n             let item_type = item.type_();\n-            let file_name = &item_path(item_type, &name.as_str());\n+            let file_name = &item_path(item_type, name.as_str());\n             self.shared.ensure_dir(&self.dst)?;\n             let joint_dst = self.dst.join(file_name);\n             self.shared.fs.write(joint_dst, buf)?;"}, {"sha": "a8dafb6206c6c37fc8dffab336f055d3b9345a39", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -640,9 +640,9 @@ fn short_item_info(\n         // We display deprecation messages for #[deprecated] and #[rustc_deprecated]\n         // but only display the future-deprecation messages for #[rustc_deprecated].\n         let mut message = if let Some(since) = since {\n-            let since = &since.as_str();\n+            let since = since.as_str();\n             if !stability::deprecation_in_effect(&depr) {\n-                if *since == \"TBD\" {\n+                if since == \"TBD\" {\n                     String::from(\"Deprecating in a future Rust version\")\n                 } else {\n                     format!(\"Deprecating in {}\", Escape(since))\n@@ -658,7 +658,7 @@ fn short_item_info(\n             let note = note.as_str();\n             let mut ids = cx.id_map.borrow_mut();\n             let html = MarkdownHtml(\n-                &note,\n+                note,\n                 &mut ids,\n                 error_codes,\n                 cx.shared.edition(),\n@@ -683,7 +683,7 @@ fn short_item_info(\n         let mut message =\n             \"<span class=\\\"emoji\\\">\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        let mut feature = format!(\"<code>{}</code>\", Escape(&feature.as_str()));\n+        let mut feature = format!(\"<code>{}</code>\", Escape(feature.as_str()));\n         if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue) {\n             feature.push_str(&format!(\n                 \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\","}, {"sha": "44a9ec5ea42108000788e2d382a36dfab9161ada", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -136,7 +136,7 @@ pub(super) fn print_item(\n         page: page,\n         static_root_path: page.get_static_root_path(),\n         typ: typ,\n-        name: &item.name.as_ref().unwrap().as_str(),\n+        name: item.name.as_ref().unwrap().as_str(),\n         item_type: &item.type_().to_string(),\n         path_components: path_components,\n         stability_since_raw: &stability_since_raw,\n@@ -315,7 +315,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                         w,\n                         \"<div class=\\\"item-left\\\"><code>{}extern crate {} as {};\",\n                         myitem.visibility.print_with_space(myitem.def_id, cx),\n-                        anchor(myitem.def_id.expect_def_id(), &*src.as_str(), cx),\n+                        anchor(myitem.def_id.expect_def_id(), src.as_str(), cx),\n                         myitem.name.as_ref().unwrap(),\n                     ),\n                     None => write!(\n@@ -324,7 +324,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                         myitem.visibility.print_with_space(myitem.def_id, cx),\n                         anchor(\n                             myitem.def_id.expect_def_id(),\n-                            &*myitem.name.as_ref().unwrap().as_str(),\n+                            myitem.name.as_ref().unwrap().as_str(),\n                             cx\n                         ),\n                     ),\n@@ -405,7 +405,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     add = add,\n                     stab = stab.unwrap_or_default(),\n                     unsafety_flag = unsafety_flag,\n-                    href = item_path(myitem.type_(), &myitem.name.unwrap().as_str()),\n+                    href = item_path(myitem.type_(), myitem.name.unwrap().as_str()),\n                     title = [full_path(cx, myitem), myitem.type_().to_string()]\n                         .iter()\n                         .filter_map(|s| if !s.is_empty() { Some(s.as_str()) } else { None })\n@@ -1308,7 +1308,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             document_non_exhaustive(w, it);\n             for (index, (field, ty)) in fields.enumerate() {\n                 let field_name =\n-                    field.name.map_or_else(|| index.to_string(), |sym| (*sym.as_str()).to_string());\n+                    field.name.map_or_else(|| index.to_string(), |sym| sym.as_str().to_string());\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::StructField, field_name));\n                 write!(\n                     w,\n@@ -1410,7 +1410,7 @@ crate fn compare_names(mut lhs: &str, mut rhs: &str) -> Ordering {\n pub(super) fn full_path(cx: &Context<'_>, item: &clean::Item) -> String {\n     let mut s = cx.current.join(\"::\");\n     s.push_str(\"::\");\n-    s.push_str(&item.name.unwrap().as_str());\n+    s.push_str(item.name.unwrap().as_str());\n     s\n }\n "}, {"sha": "563f4ae7385ce3d3f6503e2bc9b5257410e6c5db", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -418,7 +418,7 @@ pub(super) fn write_shared(\n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n         let make_sources = || {\n             let (mut all_sources, _krates) =\n-                try_err!(collect(&dst, &krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n+                try_err!(collect(&dst, krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n             all_sources.push(format!(\n                 \"sourcesIndex[\\\"{}\\\"] = {};\",\n                 &krate.name(cx.tcx()),\n@@ -437,7 +437,7 @@ pub(super) fn write_shared(\n     // Update the search index and crate list.\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n     let (mut all_indexes, mut krates) =\n-        try_err!(collect_json(&dst, &krate.name(cx.tcx()).as_str()), &dst);\n+        try_err!(collect_json(&dst, krate.name(cx.tcx()).as_str()), &dst);\n     all_indexes.push(search_index);\n     krates.push(krate.name(cx.tcx()).to_string());\n     krates.sort();\n@@ -575,7 +575,7 @@ pub(super) fn write_shared(\n         mydst.push(&format!(\"{}.{}.js\", remote_item_type, remote_path[remote_path.len() - 1]));\n \n         let (mut all_implementors, _) =\n-            try_err!(collect(&mydst, &krate.name(cx.tcx()).as_str(), \"implementors\"), &mydst);\n+            try_err!(collect(&mydst, krate.name(cx.tcx()).as_str(), \"implementors\"), &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel."}, {"sha": "ba70ed8622a0b82df65af95f7bb50fca7229ded3", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -19,7 +19,7 @@ use std::path::{Component, Path, PathBuf};\n crate fn render(cx: &mut Context<'_>, krate: &clean::Crate) -> Result<(), Error> {\n     info!(\"emitting source files\");\n \n-    let dst = cx.dst.join(\"src\").join(&*krate.name(cx.tcx()).as_str());\n+    let dst = cx.dst.join(\"src\").join(krate.name(cx.tcx()).as_str());\n     cx.shared.ensure_dir(&dst)?;\n \n     let mut collector = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };"}, {"sha": "489945b513da4a975740c70031cb53cf9cd22e15", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -486,7 +486,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribut\n \n fn check_semver(cx: &LateContext<'_>, span: Span, lit: &Lit) {\n     if let LitKind::Str(is, _) = lit.kind {\n-        if Version::parse(&is.as_str()).is_ok() {\n+        if Version::parse(is.as_str()).is_ok() {\n             return;\n         }\n     }\n@@ -619,7 +619,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                     MetaItemKind::Word => {\n                         if_chain! {\n                             if let Some(ident) = meta.ident();\n-                            if let Some(os) = find_os(&*ident.name.as_str());\n+                            if let Some(os) = find_os(ident.name.as_str());\n                             then {\n                                 mismatched.push((os, ident.span));\n                             }"}, {"sha": "43ad0f7605c106bdf4ce1a4899a99c955e295a00", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -272,7 +272,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                 .copied()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| {\n-                    let path: &str = &path.ident.name.as_str();\n+                    let path: &str = path.ident.name.as_str();\n                     a == path\n                 })\n                 .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, args[0].span)?, neg_method)))"}, {"sha": "31cc3698592b35d26440a901ef34a3cb926bda92", "filename": "src/tools/clippy/clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -321,8 +321,8 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let TyKind::Path(QPath::Resolved(None, tp)) = &ty.kind;\n         if let [int] = &*tp.segments;\n         then {\n-            let name = &int.ident.name.as_str();\n-            candidates.iter().find(|c| name == *c).copied()\n+            let name = int.ident.name.as_str();\n+            candidates.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }\n@@ -335,8 +335,8 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n         if let QPath::Resolved(_, path) = *path;\n         if let [ty] = &*path.segments;\n         then {\n-            let name = &ty.ident.name.as_str();\n-            INTS.iter().find(|c| name == *c).copied()\n+            let name = ty.ident.name.as_str();\n+            INTS.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }"}, {"sha": "3650e4f91a001020c8952f518ae89af0b3bc3a19", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -437,7 +437,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n \n     for attr in attrs {\n         if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n+            let (comment, current_spans) = strip_doc_comment_decoration(comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym::doc) {"}, {"sha": "689ac6184bffb1d7b5762a5e6dc9bc47474b5d08", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -153,7 +153,7 @@ fn check_variant(\n             );\n         }\n     }\n-    let first = &def.variants[0].ident.name.as_str();\n+    let first = def.variants[0].ident.name.as_str();\n     let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n     let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n     for var in def.variants {"}, {"sha": "6903073fbcd85760aaba967cf135d9f37d0165d8", "filename": "src/tools/clippy/clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n             if let LitKind::Float(sym, lit_float_ty) = lit.node;\n             then {\n                 let sym_str = sym.as_str();\n-                let formatter = FloatFormat::new(&sym_str);\n+                let formatter = FloatFormat::new(sym_str);\n                 // Try to bail out if the float is for sure fine.\n                 // If its within the 2 decimal digits of being out of precision we\n                 // check if the parsed representation is the same as the string"}, {"sha": "5098ea349f9aa05fc3a98804bd134f16f6a6c997", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -696,7 +696,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             let recv_ty = cx.typeck_results().expr_ty(&args[0]);\n \n             if recv_ty.is_floating_point() {\n-                match &*path.ident.name.as_str() {\n+                match path.ident.name.as_str() {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),"}, {"sha": "0af6b3b7d464ef67ab1e7b1ba16dcbe2ac802dca", "filename": "src/tools/clippy/clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -42,7 +42,7 @@ declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n impl LateLintPass<'_> for IterNotReturningIterator {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n-        let name: &str = &impl_item.ident.name.as_str();\n+        let name = impl_item.ident.name.as_str();\n         if_chain! {\n             if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n             let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "ba895f35faa267a1d7e0545bdc6f8bdf978f3afd", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -31,7 +31,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let mut applicability = Applicability::MaybeIncorrect;\n             let is_empty_sugg = \"next().is_none()\".to_string();\n-            let method_name = &*method.ident.name.as_str();\n+            let method_name = method.ident.name.as_str();\n             let sugg = if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n                         is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n                         is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n@@ -210,7 +210,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n                     if let Some(hir_id) = self.current_statement_hir_id {\n                         self.hir_id_uses_map.insert(hir_id, self.uses.len());\n                     }\n-                    match &*method_name.ident.name.as_str() {\n+                    match method_name.ident.name.as_str() {\n                         \"into_iter\" => self.uses.push(Some(IterFunction {\n                             func: IterFunctionKind::IntoIter,\n                             span: expr.span,"}, {"sha": "98acd1c1a75b2b0d3e5310166bb3dc828d3c2da1", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -966,7 +966,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                         for pat in inner.iter() {\n                             if let PatKind::Binding(_, id, ident, None) = pat.kind {\n                                 if ident.as_str().starts_with('_') && !is_local_used(cx, arm.body, id) {\n-                                    ident_bind_name = (&ident.name.as_str()).to_string();\n+                                    ident_bind_name = ident.name.as_str().to_string();\n                                     matching_wild = true;\n                                 }\n                             }"}, {"sha": "6ae334d902995c236def94ed8ea16a45af4393da", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -2154,7 +2154,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n-                    &item.ident.name.as_str(),\n+                    item.ident.name.as_str(),\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,"}, {"sha": "566e15ab2a6d640aff7e55090733d58c4313762b", "filename": "src/tools/clippy/clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -75,7 +75,7 @@ impl LateLintPass<'_> for ImportRename {\n             if let Some(import) = match snip.split_once(\" as \") {\n                 None => Some(snip.as_str()),\n                 Some((import, rename)) => {\n-                    if rename.trim() == &*name.as_str() {\n+                    if rename.trim() == name.as_str() {\n                         None\n                     } else {\n                         Some(import.trim())"}, {"sha": "25fbcb3c6094bb828802221a63e3b8c539654921", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -224,14 +224,14 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n                     if existing_name.len - count != 1\n-                        || levenstein_not_1(&interned_name, &existing_name.interned.as_str())\n+                        || levenstein_not_1(&interned_name, existing_name.interned.as_str())\n                     {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n                     if count - existing_name.len != 1\n-                        || levenstein_not_1(&existing_name.interned.as_str(), &interned_name)\n+                        || levenstein_not_1(existing_name.interned.as_str(), &interned_name)\n                     {\n                         continue;\n                     }"}, {"sha": "4722c031006be465d66049cbab8acfc4ea59c4a8", "filename": "src/tools/clippy/clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -104,7 +104,7 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n     };\n     if_chain! {\n         if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n-        let name = &*mac_name.as_str();\n+        let name = mac_name.as_str();\n         if let Some(braces) = mac_braces.macro_braces.get(name);\n         if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n         // we must check only invocation sites"}, {"sha": "e58ca95fa042000639a305af32ea1aa8999b2f7b", "filename": "src/tools/clippy/clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(&*path_lit.as_str());\n+            if let pushed_path = Path::new(path_lit.as_str());\n             if let Some(pushed_path_lit) = pushed_path.to_str();\n             if pushed_path.has_root();\n             if let Some(root) = pushed_path.components().next();"}, {"sha": "b6d04334de9e50e71b538e4f81cb40b525c65036", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -150,7 +150,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n \n     if let ExprKind::Lit(ref lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {\n-            let r = &r.as_str();\n+            let r = r.as_str();\n             let offset = if let StrStyle::Raw(n) = style { 2 + n } else { 1 };\n             match parser.parse(r) {\n                 Ok(r) => {"}, {"sha": "20e38dc564eb4138e197cbe05c2e8975fb58fdeb", "filename": "src/tools/clippy/clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -89,7 +89,7 @@ fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option\n     if_chain! {\n         if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n         if let Some(slice) = &args.get(0);\n-        if let Some(method) = SortingKind::from_stable_name(&method_name.ident.name.as_str());\n+        if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n             let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");"}, {"sha": "60f0ffde0940f5e8e7d85ac429998929bf71037b", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -330,7 +330,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if let ExprKind::MethodCall(path, _, [recv], _) = &e.kind;\n             if path.ident.name == sym!(into_bytes);\n             if let ExprKind::MethodCall(path, _, [recv], _) = &recv.kind;\n-            if matches!(&*path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n+            if matches!(path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n             if let ExprKind::Lit(lit) = &recv.kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;\n "}, {"sha": "6d9aff474214c30420508b7390b28d874f2e5f32", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {\n-                        let result = match &*symbol.as_str() {\n+                        let result = match symbol.as_str() {\n                             \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n                             \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n                             _ => return,"}, {"sha": "bfd17a6874994390a025d51c58922b10f99ed6b6", "filename": "src/tools/clippy/clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -94,7 +94,7 @@ impl EarlyLintPass for UnusedUnit {\n \n         if_chain! {\n             if segments.len() == 1;\n-            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&&*segments[0].ident.name.as_str());\n+            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&segments[0].ident.name.as_str());\n             if let Some(args) = &segments[0].args;\n             if let ast::GenericArgs::Parenthesized(generic_args) = &**args;\n             if let ast::FnRetTy::Ty(ty) = &generic_args.output;"}, {"sha": "f9add927b49b86d7c3b993750b91993decb6fba8", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -371,9 +371,9 @@ impl EarlyLintPass for Write {\n /// Return this and a boolean indicating whether it only consisted of a newline.\n fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n     let sp = fmtstr.span;\n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n-    if *contents == r\"\\n\" {\n+    if contents == r\"\\n\" {\n         return (sp, true);\n     }\n \n@@ -484,7 +484,7 @@ impl Write {\n             StrStyle::Raw(n) => Some(n as usize),\n         };\n \n-        let mut parser = Parser::new(&str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n+        let mut parser = Parser::new(str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n         let mut args = SimpleFormatArgs::default();\n \n         while let Some(arg) = parser.next() {\n@@ -589,7 +589,7 @@ impl Write {\n                     lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n-                LitKind::Byte | LitKind::Char => match &*lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -671,7 +671,7 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     let mut last_was_cr = false;\n     let mut should_lint = false;\n \n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n     let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n         let c = c.unwrap();"}, {"sha": "25a84d16650896e090c49bfa0f68237f9a616b9d", "filename": "src/tools/clippy/clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -113,7 +113,7 @@ pub fn get_attr<'a>(\n fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n-            if let Ok(value) = FromStr::from_str(&value.as_str()) {\n+            if let Ok(value) = FromStr::from_str(value.as_str()) {\n                 f(value);\n             } else {\n                 sess.span_err(attr.span, \"not a number\");"}, {"sha": "61e529a6079c935b65c3345b68dffaf5fded8f9e", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -47,7 +47,7 @@ impl ops::BitOrAssign for EagernessSuggestion {\n /// Determine the eagerness of the given function call.\n fn fn_eagerness(cx: &LateContext<'tcx>, fn_id: DefId, name: Symbol, args: &'tcx [Expr<'_>]) -> EagernessSuggestion {\n     use EagernessSuggestion::{Eager, Lazy, NoChange};\n-    let name = &*name.as_str();\n+    let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n         Some(id) => cx.tcx.type_of(id),"}, {"sha": "1a4da1627b7842eecb83d3f85f5f7f3271cad66b", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -372,7 +372,7 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n                 crate::meets_msrv(\n                     msrv,\n-                    &RustcVersion::parse(&since.as_str())\n+                    &RustcVersion::parse(since.as_str())\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {"}, {"sha": "3887a8051f20995efc83e20c88b789e8d162ef84", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -337,7 +337,7 @@ impl Rewrite for ast::Attribute {\n         } else {\n             let should_skip = self\n                 .ident()\n-                .map(|s| context.skip_context.skip_attribute(&s.name.as_str()))\n+                .map(|s| context.skip_context.skip_attribute(s.name.as_str()))\n                 .unwrap_or(false);\n             let prefix = attr_prefix(self);\n \n@@ -356,7 +356,7 @@ impl Rewrite for ast::Attribute {\n \n                         let literal_str = literal.as_str();\n                         let doc_comment_formatter =\n-                            DocCommentFormatter::new(&*literal_str, comment_style);\n+                            DocCommentFormatter::new(literal_str, comment_style);\n                         let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,"}, {"sha": "6cfe91c597ac890addf5ba718753fca4f9917dc1", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -455,7 +455,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n \n     fn push_inline_mod_directory(&mut self, id: symbol::Ident, attrs: &[ast::Attribute]) {\n         if let Some(path) = find_path_value(attrs) {\n-            self.directory.path.push(&*path.as_str());\n+            self.directory.path.push(path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n             // We have to push on the current module name in the case of relative"}, {"sha": "0c0b789a6efd1a63614621af60b8c89aa21753f0", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056d48a2c97860b2cce936f310331e606076fa01/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=056d48a2c97860b2cce936f310331e606076fa01", "patch": "@@ -260,7 +260,7 @@ fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.kind {\n         MetaItemKind::Word => {\n             let path_str = pprust::path_to_string(&meta_item.path);\n-            path_str == *skip_annotation().as_str() || path_str == *depr_skip_annotation().as_str()\n+            path_str == skip_annotation().as_str() || path_str == depr_skip_annotation().as_str()\n         }\n         MetaItemKind::List(ref l) => {\n             meta_item.has_name(sym::cfg_attr) && l.len() == 2 && is_skip_nested(&l[1])"}]}