{"sha": "141012dd523e6c13924e7c092e1f7f1407430e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MTAxMmRkNTIzZTZjMTM5MjRlN2MwOTJlMWY3ZjE0MDc0MzBlOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-17T06:29:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-17T06:29:15Z"}, "message": "Auto merge of #36482 - jseyfried:dont_load_unconfigured_noninline_modules, r=nrc\n\nAvoid loading and parsing unconfigured non-inline modules.\n\nFor example, `#[cfg(any())] mod foo;` will always compile after this PR, even if `foo.rs` and `foo/mod.rs` do not exist or do not contain valid Rust.\n\nFixes #36478 and fixes #27873.\n\nr? @nrc", "tree": {"sha": "6bb0f18a53a235873d4538a204f85ee402aafda4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb0f18a53a235873d4538a204f85ee402aafda4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141012dd523e6c13924e7c092e1f7f1407430e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141012dd523e6c13924e7c092e1f7f1407430e8c", "html_url": "https://github.com/rust-lang/rust/commit/141012dd523e6c13924e7c092e1f7f1407430e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141012dd523e6c13924e7c092e1f7f1407430e8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dc9f340ccf37bccdd6aec0e0f44238d22fa6d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc9f340ccf37bccdd6aec0e0f44238d22fa6d7f", "html_url": "https://github.com/rust-lang/rust/commit/9dc9f340ccf37bccdd6aec0e0f44238d22fa6d7f"}, {"sha": "6f0ee455023fe24cade7a8ebb0af31c2ac98548e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0ee455023fe24cade7a8ebb0af31c2ac98548e", "html_url": "https://github.com/rust-lang/rust/commit/6f0ee455023fe24cade7a8ebb0af31c2ac98548e"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "abbbbe1e3d1cc49df8cedf47c749ce909ddfbab3", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/141012dd523e6c13924e7c092e1f7f1407430e8c/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141012dd523e6c13924e7c092e1f7f1407430e8c/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=141012dd523e6c13924e7c092e1f7f1407430e8c", "patch": "@@ -126,7 +126,7 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     // Determine if a node with the given attributes should be included in this configuation.\n-    fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n+    pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             // When not compiling with --test we should not compile the #[test] functions\n             if !self.should_test && is_test_or_bench(attr) {"}, {"sha": "98ceb4fbd6c4c286b1614a1bce18f52ec8c7f825", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/141012dd523e6c13924e7c092e1f7f1407430e8c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141012dd523e6c13924e7c092e1f7f1407430e8c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=141012dd523e6c13924e7c092e1f7f1407430e8c", "patch": "@@ -5260,20 +5260,29 @@ impl<'a> Parser<'a> {\n \n     /// Parse a `mod <foo> { ... }` or `mod <foo>;` item\n     fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> {\n-        let outer_attrs = ::config::StripUnconfigured {\n-            config: &self.cfg,\n-            sess: self.sess,\n-            should_test: false, // irrelevant\n-            features: None, // don't perform gated feature checking\n-        }.process_cfg_attrs(outer_attrs.to_owned());\n+        let (in_cfg, outer_attrs) = {\n+            let mut strip_unconfigured = ::config::StripUnconfigured {\n+                config: &self.cfg,\n+                sess: self.sess,\n+                should_test: false, // irrelevant\n+                features: None, // don't perform gated feature checking\n+            };\n+            let outer_attrs = strip_unconfigured.process_cfg_attrs(outer_attrs.to_owned());\n+            (strip_unconfigured.in_cfg(&outer_attrs), outer_attrs)\n+        };\n \n         let id_span = self.span;\n         let id = self.parse_ident()?;\n         if self.check(&token::Semi) {\n             self.bump();\n-            // This mod is in an external file. Let's go get it!\n-            let (m, attrs) = self.eval_src_mod(id, &outer_attrs, id_span)?;\n-            Ok((id, m, Some(attrs)))\n+            if in_cfg {\n+                // This mod is in an external file. Let's go get it!\n+                let (m, attrs) = self.eval_src_mod(id, &outer_attrs, id_span)?;\n+                Ok((id, m, Some(attrs)))\n+            } else {\n+                let placeholder = ast::Mod { inner: syntax_pos::DUMMY_SP, items: Vec::new() };\n+                Ok((id, ItemKind::Mod(placeholder), None))\n+            }\n         } else {\n             let directory = self.directory.clone();\n             self.push_directory(id, &outer_attrs);"}, {"sha": "c8e9cbdae1e84c0bd6d89f2a3899cd1d685760d0", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/141012dd523e6c13924e7c092e1f7f1407430e8c/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141012dd523e6c13924e7c092e1f7f1407430e8c/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=141012dd523e6c13924e7c092e1f7f1407430e8c", "patch": "@@ -148,3 +148,6 @@ mod test_methods {\n         fn the(&self);\n     }\n }\n+\n+#[cfg(any())]\n+mod nonexistent_file; // Check that unconfigured non-inline modules are not loaded or parsed."}]}