{"sha": "39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Y2UwOTVlYmRmY2ZiMzVmOTNiMzg2YmNmNWE2ZjA1ODZmNzg2MTE=", "commit": {"author": {"name": "Tim Kuehn", "email": "tkuehn@cmu.edu", "date": "2013-09-07T01:36:48Z"}, "committer": {"name": "Tim Kuehn", "email": "tkuehn@cmu.edu", "date": "2013-09-07T01:54:03Z"}, "message": "use enumerate in place of 'for ti in range(i, tokens.len()) ... match tokens[ti] ...'", "tree": {"sha": "e93f6e8a405c2a7ea5adfe8501e94194736906da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93f6e8a405c2a7ea5adfe8501e94194736906da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "html_url": "https://github.com/rust-lang/rust/commit/39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39ce095ebdfcfb35f93b386bcf5a6f0586f78611/comments", "author": null, "committer": null, "parents": [{"sha": "f883159cdf3a84967513dfb27f004499ac456a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f883159cdf3a84967513dfb27f004499ac456a1a", "html_url": "https://github.com/rust-lang/rust/commit/f883159cdf3a84967513dfb27f004499ac456a1a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d82c1fd35c2ce8823aef51878db758038d1d0f3a", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39ce095ebdfcfb35f93b386bcf5a6f0586f78611/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39ce095ebdfcfb35f93b386bcf5a6f0586f78611/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "patch": "@@ -304,11 +304,11 @@ impl Pattern {\n              && is_sep(prev_char.unwrap_or_default('/')))\n         };\n \n-        for ti in range(i, self.tokens.len()) {\n-            match self.tokens[ti] {\n+        for (ti, token) in self.tokens.slice_from(i).iter().enumerate() {\n+            match *token {\n                 AnySequence => {\n                     loop {\n-                        match self.matches_from(prev_char, file, ti + 1, options) {\n+                        match self.matches_from(prev_char, file, i + ti + 1, options) {\n                             SubPatternDoesntMatch => (), // keep trying\n                             m => return m,\n                         }\n@@ -331,7 +331,7 @@ impl Pattern {\n                     }\n \n                     let (c, next) = file.slice_shift_char();\n-                    let matches = match self.tokens[ti] {\n+                    let matches = match *token {\n                         AnyChar => {\n                             !require_literal(c)\n                         }"}]}