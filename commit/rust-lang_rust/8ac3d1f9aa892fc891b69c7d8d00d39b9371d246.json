{"sha": "8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzNkMWY5YWE4OTJmYzg5MWI2OWM3ZDhkMDBkMzliOTM3MWQyNDY=", "commit": {"author": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-04-18T18:34:10Z"}, "committer": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-04-19T22:29:16Z"}, "message": "lang_item_lookup is now a salsa query.", "tree": {"sha": "cdd2d8235d66022f13d221151d4bd0210075767f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd2d8235d66022f13d221151d4bd0210075767f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "html_url": "https://github.com/rust-lang/rust/commit/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/comments", "author": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebb20edce85b74eab0ed78ba5c4969ec733ad12", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebb20edce85b74eab0ed78ba5c4969ec733ad12", "html_url": "https://github.com/rust-lang/rust/commit/8ebb20edce85b74eab0ed78ba5c4969ec733ad12"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "8af0a317612d0d72bd8f4150183c2001d893bcfa", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_syntax::{SyntaxNode, TreeArc, SourceFile, ast};\n+use ra_syntax::{SyntaxNode, TreeArc, SourceFile, SmolStr, ast};\n use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n@@ -16,7 +16,7 @@ use crate::{\n     generics::{GenericParams, GenericDef},\n     type_ref::TypeRef,\n     traits::TraitData, Trait, ty::TraitRef,\n-    lang_item::LangItems,\n+    lang_item::{LangItems, LangItemTarget},\n     ids\n };\n \n@@ -104,6 +104,9 @@ pub trait DefDatabase: SourceDatabase {\n \n     #[salsa::invoke(crate::lang_item::LangItems::lang_items_query)]\n     fn lang_items(&self, krate: Crate) -> Arc<LangItems>;\n+\n+    #[salsa::invoke(crate::lang_item::LangItems::lang_item_query)]\n+    fn lang_item(&self, start_crate: Crate, item: SmolStr) -> Option<LangItemTarget>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "5f3f91cba2c3a7e6a272adc5c2f4d4abba7d3fb8", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "patch": "@@ -40,7 +40,7 @@ impl LangItems {\n         self.items.get(item)\n     }\n \n-    /// Salsa query. This will query a specific crate for lang items.\n+    /// Salsa query. This will look for lang items in a specific crate.\n     pub(crate) fn lang_items_query(db: &impl DefDatabase, krate: Crate) -> Arc<LangItems> {\n         let mut lang_items = LangItems { items: FxHashMap::default() };\n \n@@ -51,6 +51,29 @@ impl LangItems {\n         Arc::new(lang_items)\n     }\n \n+    /// Salsa query. Look for a lang item, starting from the specified crate and recursively\n+    /// traversing its dependencies.\n+    pub(crate) fn lang_item_query(\n+        db: &impl DefDatabase,\n+        start_crate: Crate,\n+        item: SmolStr,\n+    ) -> Option<LangItemTarget> {\n+        let lang_items = db.lang_items(start_crate);\n+        let start_crate_target = lang_items.items.get(&item);\n+        if let Some(target) = start_crate_target {\n+            Some(*target)\n+        } else {\n+            for dep in start_crate.dependencies(db) {\n+                let dep_crate = dep.krate;\n+                let dep_target = db.lang_item(dep_crate, item.clone());\n+                if dep_target.is_some() {\n+                    return dep_target;\n+                }\n+            }\n+            None\n+        }\n+    }\n+\n     fn collect_lang_items_recursive(&mut self, db: &impl DefDatabase, module: &Module) {\n         // Look for impl targets\n         let (impl_blocks, source_map) = db.impls_in_module_with_source_map(module.clone());\n@@ -77,26 +100,3 @@ impl LangItems {\n         }\n     }\n }\n-\n-/// Look for a lang item, starting from the specified crate and recursively traversing its\n-/// dependencies.\n-pub(crate) fn lang_item_lookup(\n-    db: &impl DefDatabase,\n-    start_krate: Crate,\n-    item: &str,\n-) -> Option<LangItemTarget> {\n-    let lang_items = db.lang_items(start_krate);\n-    let start_krate_target = lang_items.items.get(item);\n-    if start_krate_target.is_some() {\n-        start_krate_target.map(|t| *t)\n-    } else {\n-        for dep in start_krate.dependencies(db) {\n-            let dep_krate = dep.krate;\n-            let dep_target = lang_item_lookup(db, dep_krate, item);\n-            if dep_target.is_some() {\n-                return dep_target;\n-            }\n-        }\n-        None\n-    }\n-}"}, {"sha": "ea6e0dc0f7a4cac4aadd5c1f267de179fc06817f", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "patch": "@@ -14,7 +14,6 @@ use crate::{\n     resolve::Resolver,\n     traits::TraitItem,\n     generics::HasGenericParams,\n-    lang_item::lang_item_lookup,\n     ty::primitive::{UncertainIntTy, UncertainFloatTy}\n };\n use super::{TraitRef, Substs};\n@@ -116,15 +115,15 @@ fn def_crate(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<Crate>\n     match ty {\n         Ty::Apply(a_ty) => match a_ty.ctor {\n             TypeCtor::Adt(def_id) => def_id.krate(db),\n-            TypeCtor::Bool => lang_item_lookup(db, cur_crate, \"bool\")?.krate(db),\n-            TypeCtor::Char => lang_item_lookup(db, cur_crate, \"char\")?.krate(db),\n+            TypeCtor::Bool => db.lang_item(cur_crate, \"bool\".into())?.krate(db),\n+            TypeCtor::Char => db.lang_item(cur_crate, \"char\".into())?.krate(db),\n             TypeCtor::Float(UncertainFloatTy::Known(f)) => {\n-                lang_item_lookup(db, cur_crate, f.ty_to_string())?.krate(db)\n+                db.lang_item(cur_crate, f.ty_to_string().into())?.krate(db)\n             }\n             TypeCtor::Int(UncertainIntTy::Known(i)) => {\n-                lang_item_lookup(db, cur_crate, i.ty_to_string())?.krate(db)\n+                db.lang_item(cur_crate, i.ty_to_string().into())?.krate(db)\n             }\n-            TypeCtor::Str => lang_item_lookup(db, cur_crate, \"str\")?.krate(db),\n+            TypeCtor::Str => db.lang_item(cur_crate, \"str\".into())?.krate(db),\n             _ => None,\n         },\n         _ => None,"}]}