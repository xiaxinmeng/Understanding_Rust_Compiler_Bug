{"sha": "88d874de6395a5422caad1f61783dadd395d49d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDg3NGRlNjM5NWE1NDIyY2FhZDFmNjE3ODNkYWRkMzk1ZDQ5ZDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-10T20:52:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-21T01:43:57Z"}, "message": "rustc_codegen_llvm: avoid converting between DILocation and Value.", "tree": {"sha": "490ecd0ca002b91ae29f58cd925075c4a2030de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490ecd0ca002b91ae29f58cd925075c4a2030de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d874de6395a5422caad1f61783dadd395d49d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d874de6395a5422caad1f61783dadd395d49d0", "html_url": "https://github.com/rust-lang/rust/commit/88d874de6395a5422caad1f61783dadd395d49d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d874de6395a5422caad1f61783dadd395d49d0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa2b381ec83556111a99750bcc7688521d7e8b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2b381ec83556111a99750bcc7688521d7e8b0d", "html_url": "https://github.com/rust-lang/rust/commit/fa2b381ec83556111a99750bcc7688521d7e8b0d"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "c940656b2561e3ac163ee2712c7d9cc3bc42f758", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=88d874de6395a5422caad1f61783dadd395d49d0", "patch": "@@ -192,7 +192,8 @@ impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n         let dbg_loc = self.cx().create_debug_loc(scope, span);\n \n         unsafe {\n-            llvm::LLVMSetCurrentDebugLocation(self.llbuilder, dbg_loc);\n+            let dbg_loc_as_llval = llvm::LLVMRustMetadataAsValue(self.cx().llcx, dbg_loc);\n+            llvm::LLVMSetCurrentDebugLocation(self.llbuilder, dbg_loc_as_llval);\n         }\n     }\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self) {"}, {"sha": "f1d9b8653bcb730370e67039f13992dd21a01f25", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/source_loc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fsource_loc.rs?ref=88d874de6395a5422caad1f61783dadd395d49d0", "patch": "@@ -2,8 +2,8 @@ use super::metadata::{UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n use super::utils::debug_context;\n \n use crate::common::CodegenCx;\n-use crate::llvm::debuginfo::DIScope;\n-use crate::llvm::{self, Value};\n+use crate::llvm;\n+use crate::llvm::debuginfo::{DILocation, DIScope};\n use rustc_codegen_ssa::traits::*;\n \n use rustc_data_structures::sync::Lrc;\n@@ -45,7 +45,7 @@ impl CodegenCx<'ll, '_> {\n         }\n     }\n \n-    pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll Value {\n+    pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll DILocation {\n         let DebugLoc { line, col, .. } = self.lookup_debug_loc(span.lo());\n \n         unsafe {"}, {"sha": "daceda20097da244290b555b3ea8248297fedb73", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=88d874de6395a5422caad1f61783dadd395d49d0", "patch": "@@ -5,8 +5,9 @@ use rustc_codegen_ssa::coverageinfo::map as coverage_map;\n \n use super::debuginfo::{\n     DIArray, DIBasicType, DIBuilder, DICompositeType, DIDerivedType, DIDescriptor, DIEnumerator,\n-    DIFile, DIFlags, DIGlobalVariableExpression, DILexicalBlock, DINameSpace, DISPFlags, DIScope,\n-    DISubprogram, DISubrange, DITemplateTypeParameter, DIType, DIVariable, DebugEmissionKind,\n+    DIFile, DIFlags, DIGlobalVariableExpression, DILexicalBlock, DILocation, DINameSpace,\n+    DISPFlags, DIScope, DISubprogram, DISubrange, DITemplateTypeParameter, DIType, DIVariable,\n+    DebugEmissionKind,\n };\n \n use libc::{c_char, c_int, c_uint, size_t};\n@@ -794,6 +795,7 @@ pub mod debuginfo {\n     pub struct DIBuilder<'a>(InvariantOpaque<'a>);\n \n     pub type DIDescriptor = Metadata;\n+    pub type DILocation = Metadata;\n     pub type DIScope = DIDescriptor;\n     pub type DIFile = DIScope;\n     pub type DILexicalBlock = DIScope;\n@@ -2005,7 +2007,7 @@ extern \"C\" {\n         VarInfo: &'a DIVariable,\n         AddrOps: *const i64,\n         AddrOpsCount: c_uint,\n-        DL: &'a Value,\n+        DL: &'a DILocation,\n         InsertAtEnd: &'a BasicBlock,\n     ) -> &'a Value;\n \n@@ -2093,8 +2095,8 @@ extern \"C\" {\n         Line: c_uint,\n         Column: c_uint,\n         Scope: &'a DIScope,\n-        InlinedAt: Option<&'a Metadata>,\n-    ) -> &'a Value;\n+        InlinedAt: Option<&'a DILocation>,\n+    ) -> &'a DILocation;\n     pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n     pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n "}, {"sha": "3beb328339e7ab1e51b58a59003affd4d0bb74df", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/88d874de6395a5422caad1f61783dadd395d49d0/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=88d874de6395a5422caad1f61783dadd395d49d0", "patch": "@@ -931,12 +931,12 @@ LLVMRustDIBuilderGetOrCreateArray(LLVMRustDIBuilderRef Builder,\n \n extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n     LLVMRustDIBuilderRef Builder, LLVMValueRef V, LLVMMetadataRef VarInfo,\n-    int64_t *AddrOps, unsigned AddrOpsCount, LLVMValueRef DL,\n+    int64_t *AddrOps, unsigned AddrOpsCount, LLVMMetadataRef DL,\n     LLVMBasicBlockRef InsertAtEnd) {\n   return wrap(Builder->insertDeclare(\n       unwrap(V), unwrap<DILocalVariable>(VarInfo),\n       Builder->createExpression(llvm::ArrayRef<int64_t>(AddrOps, AddrOpsCount)),\n-      DebugLoc(cast<MDNode>(unwrap<MetadataAsValue>(DL)->getMetadata())),\n+      DebugLoc(cast<MDNode>(DL)),\n       unwrap(InsertAtEnd)));\n }\n \n@@ -1003,7 +1003,7 @@ LLVMRustDICompositeTypeReplaceArrays(LLVMRustDIBuilderRef Builder,\n                          DINodeArray(unwrap<MDTuple>(Params)));\n }\n \n-extern \"C\" LLVMValueRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateDebugLocation(LLVMContextRef ContextRef, unsigned Line,\n                                      unsigned Column, LLVMMetadataRef Scope,\n                                      LLVMMetadataRef InlinedAt) {\n@@ -1012,7 +1012,7 @@ LLVMRustDIBuilderCreateDebugLocation(LLVMContextRef ContextRef, unsigned Line,\n   DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(Scope),\n                                      unwrapDIPtr<MDNode>(InlinedAt));\n \n-  return wrap(MetadataAsValue::get(Context, debug_loc.getAsMDNode()));\n+  return wrap(debug_loc.getAsMDNode());\n }\n \n extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {"}]}