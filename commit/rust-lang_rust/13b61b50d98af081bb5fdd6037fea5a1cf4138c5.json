{"sha": "13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYjYxYjUwZDk4YWYwODFiYjVmZGQ2MDM3ZmVhNWExY2Y0MTM4YzU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-09-29T23:58:05Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-09-30T00:15:25Z"}, "message": "Fixed grammar in one diagnostic and blessed tests.", "tree": {"sha": "3dfcbd026c70ae608f507dd53c25259ff8049e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dfcbd026c70ae608f507dd53c25259ff8049e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "html_url": "https://github.com/rust-lang/rust/commit/13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a4af2f69936a23ee2fad48d36fdd955afb06a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4af2f69936a23ee2fad48d36fdd955afb06a2c", "html_url": "https://github.com/rust-lang/rust/commit/8a4af2f69936a23ee2fad48d36fdd955afb06a2c"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "2b34c24b266d0d29d4e927dcc50c0b28f667c8c1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -631,26 +631,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_valid_traits(&self,\n-                            err: &mut DiagnosticBuilder<'_>,\n-                            valid_out_of_scope_traits: Vec<DefId>) -> bool {\n+    fn suggest_valid_traits(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        valid_out_of_scope_traits: Vec<DefId>,\n+    ) -> bool {\n         if !valid_out_of_scope_traits.is_empty() {\n             let mut candidates = valid_out_of_scope_traits;\n             candidates.sort();\n             candidates.dedup();\n             err.help(\"items from traits can only be used if the trait is in scope\");\n-            let msg = format!(\"the following {traits_are} implemented but not in scope, \\\n-                               perhaps add a `use` for {one_of_them}:\",\n-                            traits_are = if candidates.len() == 1 {\n-                                \"trait is\"\n-                            } else {\n-                                \"traits are\"\n-                            },\n-                            one_of_them = if candidates.len() == 1 {\n-                                \"it\"\n-                            } else {\n-                                \"one of them\"\n-                            });\n+            let msg = format!(\n+                \"the following {traits_are} implemented but not in scope; \\\n+                 perhaps add a `use` for {one_of_them}:\",\n+                traits_are = if candidates.len() == 1 {\n+                    \"trait is\"\n+                } else {\n+                    \"traits are\"\n+                },\n+                one_of_them = if candidates.len() == 1 {\n+                    \"it\"\n+                } else {\n+                    \"one of them\"\n+                },\n+            );\n \n             self.suggest_use_candidates(err, msg, candidates);\n             true"}, {"sha": "e71547cb89f9c7a96129477e7cd8cb7687a58b4c", "filename": "src/test/ui/coherence/coherence_inherent.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&Lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use Lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "e71547cb89f9c7a96129477e7cd8cb7687a58b4c", "filename": "src/test/ui/coherence/coherence_inherent.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&Lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use Lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "3683943c5c819da5f7b355a3d9cbca17eacf5765", "filename": "src/test/ui/coherence/coherence_inherent_cc.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use coherence_inherent_cc_lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "3683943c5c819da5f7b355a3d9cbca17eacf5765", "filename": "src/test/ui/coherence/coherence_inherent_cc.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use coherence_inherent_cc_lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "736369dab83549237717f2561db9d710ce96256a", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -25,7 +25,7 @@ LL |         ().clone()\n    |            ^^^^^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::clone::Clone;`\n \n error: aborting due to 3 previous errors"}, {"sha": "c3ce484edf7a95a13c719eeb0f8c02c1e92135e9", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -8,7 +8,7 @@ LL |     pub macro m() { ().f() }\n    |                        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use foo::T;`\n \n error: aborting due to previous error"}, {"sha": "f0a03e1be82ac5e7c48d16725fc9e7fd8e5cf927", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |     1u32.method();\n    |          ^^^^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL | use foo::Bar;\n    |\n@@ -23,7 +23,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    |                                            ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&u32>>`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL | use foo::Bar;\n    |\n@@ -41,7 +41,7 @@ LL |     'a'.method();\n    |         ^^^^^^ method not found in `char`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use foo::Bar;\n    |\n@@ -61,7 +61,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    |                                           ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&char>>`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use foo::Bar;\n    |\n@@ -73,7 +73,7 @@ LL |     1i32.method();\n    |          ^^^^^^ method not found in `i32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use no_method_suggested_traits::foo::PubPub;\n    |\n@@ -85,7 +85,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    |                                            ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&i32>>`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use no_method_suggested_traits::foo::PubPub;\n    |"}, {"sha": "80ca051ceff0df2f2529b89dd6d013e2b854dac6", "filename": "src/test/ui/issues/issue-10465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |             b.foo();\n    |               ^^^ method not found in `&b::B`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use a::A;`\n \n error: aborting due to previous error"}, {"sha": "8b173e1b50c1e9ebcc4e2046c8ccf70fbe875542", "filename": "src/test/ui/issues/issue-39175.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |     Command::new(\"echo\").arg(\"hello\").exec();\n    |                                       ^^^^ method not found in `&mut std::process::Command`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::os::unix::process::CommandExt;\n    |"}, {"sha": "4dae6c1cd158e49a94dd47c7df5359c67cb68ad4", "filename": "src/test/ui/issues/issue-43189.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |     ().a();\n    |        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use xcrate_issue_43189_b::xcrate_issue_43189_a::A;\n    |"}, {"sha": "4b1898345a32ebe6c7536c942d5ad53136c53b9f", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |         x.foobar();\n    |           ^^^^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use crate::foo::foobar::Foobar;`\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n@@ -15,7 +15,7 @@ LL |     x.bar();\n    |       ^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use crate::foo::Bar;\n    |\n@@ -33,7 +33,7 @@ LL |     let y = u32::from_str(\"33\");\n    |                  ^^^^^^^^ function or associated item not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::str::FromStr;\n    |"}, {"sha": "3597cc53420aa82e5bf63d18fb44e5a79876a7c4", "filename": "src/test/ui/shadowed/shadowed-trait-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |     ().f()\n    |        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use foo::T;\n    |"}, {"sha": "64a92c6b0b47860536d6d30ad45ad0a761d59a69", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -28,7 +28,7 @@ LL |     S.b();\n    |       ^ method not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use method::B;\n    |\n@@ -62,7 +62,7 @@ LL |     S::b(&S);\n    |        ^ function or associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use method::B;\n    |\n@@ -96,7 +96,7 @@ LL |     S::B;\n    |        ^ associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use assoc_const::B;\n    |"}, {"sha": "10552acb348bee424b40958ffcafc35d14ad4b4a", "filename": "src/test/ui/traits/trait-method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |     foo.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use inner::Bar;\n    |"}, {"sha": "102c17f6f5618017da5299e4d963617c54fdd3c3", "filename": "src/test/ui/underscore-imports/shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b61b50d98af081bb5fdd6037fea5a1cf4138c5/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=13b61b50d98af081bb5fdd6037fea5a1cf4138c5", "patch": "@@ -5,7 +5,7 @@ LL |         x.deref();\n    |           ^^^^^ method not found in `&()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::ops::Deref;`\n \n error: aborting due to previous error"}]}