{"sha": "be1ed00712ce0b884e1fc9779f25b1758e994d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMWVkMDA3MTJjZTBiODg0ZTFmYzk3NzlmMjViMTc1OGU5OTRkMGI=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-02-13T07:53:28Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-02-13T20:37:38Z"}, "message": "Add additional type info to mismatch err", "tree": {"sha": "a4e45989e1dfc58aa8663eeb13d704c0079d7f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4e45989e1dfc58aa8663eeb13d704c0079d7f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be1ed00712ce0b884e1fc9779f25b1758e994d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be1ed00712ce0b884e1fc9779f25b1758e994d0b", "html_url": "https://github.com/rust-lang/rust/commit/be1ed00712ce0b884e1fc9779f25b1758e994d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be1ed00712ce0b884e1fc9779f25b1758e994d0b/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5aee2d5241139d808f4fdece0026603489afd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5aee2d5241139d808f4fdece0026603489afd1", "html_url": "https://github.com/rust-lang/rust/commit/3f5aee2d5241139d808f4fdece0026603489afd1"}], "stats": {"total": 111, "additions": 79, "deletions": 32}, "files": [{"sha": "341f6fadba17494e016b476089ebe689f55aa12d", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/be1ed00712ce0b884e1fc9779f25b1758e994d0b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ed00712ce0b884e1fc9779f25b1758e994d0b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=be1ed00712ce0b884e1fc9779f25b1758e994d0b", "patch": "@@ -24,6 +24,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         tcx: TyCtxt<'_>,\n         arg: &GenericArg<'_>,\n         param: &GenericParamDef,\n+        // DefId of the function\n+        //body_def_id: DefId,\n         possible_ordering_error: bool,\n         help: Option<&str>,\n     ) {\n@@ -46,19 +48,44 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Specific suggestion set for diagnostics\n         match (arg, &param.kind) {\n             (\n-                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }),\n-                GenericParamDefKind::Const { .. },\n+                GenericArg::Type(hir::Ty {\n+                    kind: hir::TyKind::Path(rustc_hir::QPath::Resolved(_, path)),\n+                    ..\n+                }),\n+                GenericParamDefKind::Const,\n             ) => {\n-                let suggestions = vec![\n-                    (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                    (arg.span().shrink_to_hi(), String::from(\" }\")),\n-                ];\n-                err.multipart_suggestion(\n-                    \"if this generic argument was intended as a const parameter, \\\n-                try surrounding it with braces:\",\n-                    suggestions,\n-                    Applicability::MaybeIncorrect,\n-                );\n+                use rustc_hir::def::{DefKind, Res};\n+                match path.res {\n+                    Res::Err => {}\n+                    Res::Def(DefKind::TyParam, src_def_id) => (|| {\n+                        let param_hir_id = match param.def_id.as_local() {\n+                            Some(x) => tcx.hir().local_def_id_to_hir_id(x),\n+                            None => return,\n+                        };\n+                        let param_name = tcx.hir().ty_param_name(param_hir_id);\n+                        let param_type = tcx.type_of(param.def_id);\n+                        if param_type.is_suggestable() {\n+                            err.span_suggestion(\n+                                tcx.def_span(src_def_id),\n+                                &format!(\"try changing to a const-generic parameter:\"),\n+                                format!(\"const {}: {}\", param_name, param_type),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    })(),\n+                    _ => {\n+                        let suggestions = vec![\n+                            (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                            (arg.span().shrink_to_hi(), String::from(\" }\")),\n+                        ];\n+                        err.multipart_suggestion(\n+                            \"if this generic argument was intended as a const parameter, \\\n+                  try surrounding it with braces:\",\n+                            suggestions,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n             }\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),"}, {"sha": "c90e3d0e0eba9e4065f8ee22fdd17b655d119e79", "filename": "src/test/ui/const-generics/diagnostics.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be1ed00712ce0b884e1fc9779f25b1758e994d0b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1ed00712ce0b884e1fc9779f25b1758e994d0b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs?ref=be1ed00712ce0b884e1fc9779f25b1758e994d0b", "patch": "@@ -0,0 +1,13 @@\n+#![crate_type=\"lib\"]\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A<const N: u8>;\n+trait Foo {}\n+impl Foo for A<N> {}\n+//~^ ERROR type provided when a constant\n+//~| ERROR cannot find type\n+\n+struct B<const N: u8>;\n+impl<N> Foo for B<N> {}\n+//~^ ERROR type provided when a constant"}, {"sha": "a66858a310c85e379ebdc791c0dcdd820246b25d", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be1ed00712ce0b884e1fc9779f25b1758e994d0b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be1ed00712ce0b884e1fc9779f25b1758e994d0b/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=be1ed00712ce0b884e1fc9779f25b1758e994d0b", "patch": "@@ -0,0 +1,27 @@\n+error[E0412]: cannot find type `N` in this scope\n+  --> $DIR/diagnostics.rs:7:16\n+   |\n+LL | struct A<const N: u8>;\n+   | ---------------------- similarly named struct `A` defined here\n+LL | trait Foo {}\n+LL | impl Foo for A<N> {}\n+   |                ^ help: a struct with a similar name exists: `A`\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/diagnostics.rs:7:16\n+   |\n+LL | impl Foo for A<N> {}\n+   |                ^\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/diagnostics.rs:12:19\n+   |\n+LL | impl<N> Foo for B<N> {}\n+   |      -            ^\n+   |      |\n+   |      help: try changing to a const-generic parameter:: `const N: u8`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0412, E0747.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "c062fc9ac88b38b3a203326e0ffd30eec26ab84e", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be1ed00712ce0b884e1fc9779f25b1758e994d0b/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be1ed00712ce0b884e1fc9779f25b1758e994d0b/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=be1ed00712ce0b884e1fc9779f25b1758e994d0b", "patch": "@@ -30,44 +30,24 @@ error[E0747]: type provided when a constant was expected\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n-   |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n-   |\n-LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n-   |                  ^                ^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-enum.rs:33:18\n    |\n LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^^^^^^\n-   |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n-   |\n-LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n-   |                  ^                     ^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-enum.rs:21:12\n    |\n LL |   test_1::<CompileFlag::A>();\n    |            ^^^^^^^^^^^^^^\n-   |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n-   |\n-LL |   test_1::<{ CompileFlag::A }>();\n-   |            ^                ^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-enum.rs:25:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^\n-   |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n-   |\n-LL |   test_2::<_, { CompileFlag::A }>(0);\n-   |               ^                ^\n \n error: aborting due to 7 previous errors\n "}]}