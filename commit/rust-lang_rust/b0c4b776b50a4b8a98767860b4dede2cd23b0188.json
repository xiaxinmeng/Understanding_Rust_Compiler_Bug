{"sha": "b0c4b776b50a4b8a98767860b4dede2cd23b0188", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzRiNzc2YjUwYTRiOGE5ODc2Nzg2MGI0ZGVkZTJjZDIzYjAxODg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-20T12:38:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-20T13:23:57Z"}, "message": "internal: add simple smoke test for project model\n\nOur project model code is rather complicated -- the logic for lowering\nfrom `cargo metadata` to `CrateGraph` is fiddly and special-case. So\nfar, we survived without testing this at all, but this increasingly\nseems like a poor option.\n\nSo this PR introduces a simple tests just to detect the most obvious\nfailures. The idea here is that, although we rely on external processes\n(cargo & rustc), we are actually using their stable interfaces, so we\nmight just mock out the outputs.\n\nLong term, I would like to try to virtualize IO here, so as to do such\nmocking in a more principled way, but lets start simple.\n\nShould we forgo the mocking and just call `cargo metadata` directly\nperhaps? Touch question -- I personally feel that fast, in-process tests\nare more important in this case than any extra assurance we get from\nrunning the real thing.\n\nSuper-long term, we would probably want to extend our heavy tests to\ncover more use-cases, but we should figure a way to do that without\nslowing the tests down for everyone.\n\nPerhaps we need two-tiered bors system, where we pull from `master` into\n`release` branch only when an additional set of tests passes?", "tree": {"sha": "a095b76fcd97c3607170c05ec26d849832fc2a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a095b76fcd97c3607170c05ec26d849832fc2a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c4b776b50a4b8a98767860b4dede2cd23b0188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c4b776b50a4b8a98767860b4dede2cd23b0188", "html_url": "https://github.com/rust-lang/rust/commit/b0c4b776b50a4b8a98767860b4dede2cd23b0188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c4b776b50a4b8a98767860b4dede2cd23b0188/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2211d2ceceb960b1e571febe6ee1d2c83856ba41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2211d2ceceb960b1e571febe6ee1d2c83856ba41", "html_url": "https://github.com/rust-lang/rust/commit/2211d2ceceb960b1e571febe6ee1d2c83856ba41"}], "stats": {"total": 783, "additions": 782, "deletions": 1}, "files": [{"sha": "b78ab214d9472253f08e04172ca8bec4f9c869e2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b776b50a4b8a98767860b4dede2cd23b0188/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b776b50a4b8a98767860b4dede2cd23b0188/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b0c4b776b50a4b8a98767860b4dede2cd23b0188", "patch": "@@ -1175,6 +1175,7 @@ dependencies = [\n  \"base_db\",\n  \"cargo_metadata\",\n  \"cfg\",\n+ \"expect-test\",\n  \"la-arena\",\n  \"log\",\n  \"paths\","}, {"sha": "6ba056f3088ad4eb3afef40e3522e0a91502c84e", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=b0c4b776b50a4b8a98767860b4dede2cd23b0188", "patch": "@@ -23,11 +23,26 @@ pub use dnf::DnfExpr;\n /// of key and value in `key_values`.\n ///\n /// See: <https://doc.rust-lang.org/reference/conditional-compilation.html#set-configuration-options>\n-#[derive(Debug, Clone, PartialEq, Eq, Default)]\n+#[derive(Clone, PartialEq, Eq, Default)]\n pub struct CfgOptions {\n     enabled: FxHashSet<CfgAtom>,\n }\n \n+impl fmt::Debug for CfgOptions {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut items = self\n+            .enabled\n+            .iter()\n+            .map(|atom| match atom {\n+                CfgAtom::Flag(it) => it.to_string(),\n+                CfgAtom::KeyValue { key, value } => format!(\"{}={}\", key, value),\n+            })\n+            .collect::<Vec<_>>();\n+        items.sort();\n+        f.debug_tuple(\"CfgOptions\").field(&items).finish()\n+    }\n+}\n+\n impl CfgOptions {\n     pub fn check(&self, cfg: &CfgExpr) -> Option<bool> {\n         cfg.fold(&|atom| self.enabled.contains(atom))"}, {"sha": "36ca83333dbe22fe52adae59d9a00798fe803a32", "filename": "crates/project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2FCargo.toml?ref=b0c4b776b50a4b8a98767860b4dede2cd23b0188", "patch": "@@ -16,6 +16,7 @@ semver = \"1\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n anyhow = \"1.0.26\"\n+expect-test = \"1\"\n la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }\n \n cfg = { path = \"../cfg\", version = \"0.0.0\" }"}, {"sha": "09bf8bce6986195a51ce6f6f3558ebcee6a38ae2", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=b0c4b776b50a4b8a98767860b4dede2cd23b0188", "patch": "@@ -24,6 +24,9 @@ mod workspace;\n mod rustc_cfg;\n mod build_scripts;\n \n+#[cfg(test)]\n+mod tests;\n+\n use std::{\n     convert::{TryFrom, TryInto},\n     fs::{self, read_dir, ReadDir},"}, {"sha": "302a000d70e1dc253ffdfec0451675918fa281ef", "filename": "crates/project_model/src/tests.rs", "status": "added", "additions": 516, "deletions": 0, "changes": 516, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=b0c4b776b50a4b8a98767860b4dede2cd23b0188", "patch": "@@ -0,0 +1,516 @@\n+use std::path::PathBuf;\n+\n+use base_db::FileId;\n+use expect_test::{expect, Expect};\n+\n+use crate::{CargoWorkspace, CfgOverrides, ProjectWorkspace, Sysroot, WorkspaceBuildScripts};\n+\n+fn check(file: &str, expect: Expect) {\n+    let meta = get_test_metadata(file);\n+    let cargo_workspace = CargoWorkspace::new(meta);\n+    let project_workspace = ProjectWorkspace::Cargo {\n+        cargo: cargo_workspace,\n+        build_scripts: WorkspaceBuildScripts::default(),\n+        sysroot: Sysroot::default(),\n+        rustc: None,\n+        rustc_cfg: Vec::new(),\n+        cfg_overrides: CfgOverrides::default(),\n+    };\n+\n+    let crate_graph = project_workspace.to_crate_graph(None, {\n+        let mut counter = 0;\n+        &mut move |_path| {\n+            counter += 1;\n+            Some(FileId(counter))\n+        }\n+    });\n+\n+    let mut crate_graph = format!(\"{:#?}\", crate_graph);\n+    replace_root(&mut crate_graph, false);\n+\n+    expect.assert_eq(&crate_graph);\n+}\n+\n+fn get_test_metadata(file: &str) -> cargo_metadata::Metadata {\n+    let mut json = get_test_data(file).parse::<serde_json::Value>().unwrap();\n+    fixup_paths(&mut json);\n+    return serde_json::from_value(json).unwrap();\n+\n+    fn fixup_paths(val: &mut serde_json::Value) -> () {\n+        match val {\n+            serde_json::Value::String(s) => replace_root(s, true),\n+            serde_json::Value::Array(vals) => vals.iter_mut().for_each(fixup_paths),\n+            serde_json::Value::Object(kvals) => kvals.values_mut().for_each(fixup_paths),\n+            serde_json::Value::Null | serde_json::Value::Bool(_) | serde_json::Value::Number(_) => {\n+                ()\n+            }\n+        }\n+    }\n+}\n+\n+fn replace_root(s: &mut String, direction: bool) {\n+    if direction {\n+        let root = if cfg!(windows) { r#\"C:\\\\ROOT\\\"# } else { \"/ROOT/\" };\n+        *s = s.replace(\"$ROOT$\", root)\n+    } else {\n+        let root = if cfg!(windows) { r#\"C:\\\\\\\\ROOT\\\\\"# } else { \"/ROOT/\" };\n+        *s = s.replace(root, \"$ROOT$\")\n+    }\n+}\n+\n+fn get_test_data(file: &str) -> String {\n+    let base = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let file = base.join(\"test_data\").join(file);\n+    std::fs::read_to_string(file).unwrap()\n+}\n+\n+#[test]\n+fn hello_world_project_model() {\n+    check(\n+        \"hello-world-metadata.json\",\n+        expect![[r#\"\n+            CrateGraph {\n+                arena: {\n+                    CrateId(\n+                        0,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            1,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                                canonical_name: \"hello-world\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n+                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"hello_world\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"hello-world\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        5,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            6,\n+                        ),\n+                        edition: Edition2015,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"const_fn\",\n+                                ),\n+                                canonical_name: \"const_fn\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=default\",\n+                                \"feature=std\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=align\",\n+                                \"feature=const-extern-fn\",\n+                                \"feature=default\",\n+                                \"feature=extra_traits\",\n+                                \"feature=rustc-dep-of-std\",\n+                                \"feature=std\",\n+                                \"feature=use_std\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n+                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"libc\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"libc\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        2,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            3,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"an_example\",\n+                                ),\n+                                canonical_name: \"an-example\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n+                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"hello_world\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"hello-world\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        4,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            5,\n+                        ),\n+                        edition: Edition2015,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                                canonical_name: \"libc\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=default\",\n+                                \"feature=std\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=align\",\n+                                \"feature=const-extern-fn\",\n+                                \"feature=default\",\n+                                \"feature=extra_traits\",\n+                                \"feature=rustc-dep-of-std\",\n+                                \"feature=std\",\n+                                \"feature=use_std\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n+                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"libc\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"libc\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        1,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            2,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                                canonical_name: \"hello-world\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n+                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"hello_world\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"hello-world\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        6,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            7,\n+                        ),\n+                        edition: Edition2015,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"build_script_build\",\n+                                ),\n+                                canonical_name: \"build-script-build\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=default\",\n+                                \"feature=std\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=align\",\n+                                \"feature=const-extern-fn\",\n+                                \"feature=default\",\n+                                \"feature=extra_traits\",\n+                                \"feature=rustc-dep-of-std\",\n+                                \"feature=std\",\n+                                \"feature=use_std\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n+                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"libc\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"libc\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        3,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            4,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"it\",\n+                                ),\n+                                canonical_name: \"it\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"test\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n+                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"hello_world\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"hello-world\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                },\n+            }\"#]],\n+    )\n+}"}, {"sha": "b6142eeaf2f609fe82f2534ba0ba5259d79e2efd", "filename": "crates/project_model/test_data/hello-world-metadata.json", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2Ftest_data%2Fhello-world-metadata.json", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b776b50a4b8a98767860b4dede2cd23b0188/crates%2Fproject_model%2Ftest_data%2Fhello-world-metadata.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Fhello-world-metadata.json?ref=b0c4b776b50a4b8a98767860b4dede2cd23b0188", "patch": "@@ -0,0 +1,245 @@\n+{\n+    \"packages\": [\n+        {\n+            \"name\": \"hello-world\",\n+            \"version\": \"0.1.0\",\n+            \"id\": \"hello-world 0.1.0 (path+file://$ROOT$hello-world)\",\n+            \"license\": null,\n+            \"license_file\": null,\n+            \"description\": null,\n+            \"source\": null,\n+            \"dependencies\": [\n+                {\n+                    \"name\": \"libc\",\n+                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n+                    \"req\": \"^0.2\",\n+                    \"kind\": null,\n+                    \"rename\": null,\n+                    \"optional\": false,\n+                    \"uses_default_features\": true,\n+                    \"features\": [],\n+                    \"target\": null,\n+                    \"registry\": null\n+                }\n+            ],\n+            \"targets\": [\n+                {\n+                    \"kind\": [\n+                        \"lib\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"lib\"\n+                    ],\n+                    \"name\": \"hello-world\",\n+                    \"src_path\": \"$ROOT$hello-world/src/lib.rs\",\n+                    \"edition\": \"2018\",\n+                    \"doc\": true,\n+                    \"doctest\": true,\n+                    \"test\": true\n+                },\n+                {\n+                    \"kind\": [\n+                        \"bin\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"bin\"\n+                    ],\n+                    \"name\": \"hello-world\",\n+                    \"src_path\": \"$ROOT$hello-world/src/main.rs\",\n+                    \"edition\": \"2018\",\n+                    \"doc\": true,\n+                    \"doctest\": false,\n+                    \"test\": true\n+                },\n+                {\n+                    \"kind\": [\n+                        \"example\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"bin\"\n+                    ],\n+                    \"name\": \"an-example\",\n+                    \"src_path\": \"$ROOT$hello-world/examples/an-example.rs\",\n+                    \"edition\": \"2018\",\n+                    \"doc\": false,\n+                    \"doctest\": false,\n+                    \"test\": false\n+                },\n+                {\n+                    \"kind\": [\n+                        \"test\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"bin\"\n+                    ],\n+                    \"name\": \"it\",\n+                    \"src_path\": \"$ROOT$hello-world/tests/it.rs\",\n+                    \"edition\": \"2018\",\n+                    \"doc\": false,\n+                    \"doctest\": false,\n+                    \"test\": true\n+                }\n+            ],\n+            \"features\": {},\n+            \"manifest_path\": \"$ROOT$hello-world/Cargo.toml\",\n+            \"metadata\": null,\n+            \"publish\": null,\n+            \"authors\": [],\n+            \"categories\": [],\n+            \"keywords\": [],\n+            \"readme\": null,\n+            \"repository\": null,\n+            \"homepage\": null,\n+            \"documentation\": null,\n+            \"edition\": \"2018\",\n+            \"links\": null\n+        },\n+        {\n+            \"name\": \"libc\",\n+            \"version\": \"0.2.98\",\n+            \"id\": \"libc 0.2.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+            \"license\": \"MIT OR Apache-2.0\",\n+            \"license_file\": null,\n+            \"description\": \"Raw FFI bindings to platform libraries like libc.\\n\",\n+            \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n+            \"dependencies\": [\n+                {\n+                    \"name\": \"rustc-std-workspace-core\",\n+                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n+                    \"req\": \"^1.0.0\",\n+                    \"kind\": null,\n+                    \"rename\": null,\n+                    \"optional\": true,\n+                    \"uses_default_features\": true,\n+                    \"features\": [],\n+                    \"target\": null,\n+                    \"registry\": null\n+                }\n+            ],\n+            \"targets\": [\n+                {\n+                    \"kind\": [\n+                        \"lib\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"lib\"\n+                    ],\n+                    \"name\": \"libc\",\n+                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98/src/lib.rs\",\n+                    \"edition\": \"2015\",\n+                    \"doc\": true,\n+                    \"doctest\": true,\n+                    \"test\": true\n+                },\n+                {\n+                    \"kind\": [\n+                        \"test\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"bin\"\n+                    ],\n+                    \"name\": \"const_fn\",\n+                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98/tests/const_fn.rs\",\n+                    \"edition\": \"2015\",\n+                    \"doc\": false,\n+                    \"doctest\": false,\n+                    \"test\": true\n+                },\n+                {\n+                    \"kind\": [\n+                        \"custom-build\"\n+                    ],\n+                    \"crate_types\": [\n+                        \"bin\"\n+                    ],\n+                    \"name\": \"build-script-build\",\n+                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98/build.rs\",\n+                    \"edition\": \"2015\",\n+                    \"doc\": false,\n+                    \"doctest\": false,\n+                    \"test\": false\n+                }\n+            ],\n+            \"features\": {\n+                \"align\": [],\n+                \"const-extern-fn\": [],\n+                \"default\": [\n+                    \"std\"\n+                ],\n+                \"extra_traits\": [],\n+                \"rustc-dep-of-std\": [\n+                    \"align\",\n+                    \"rustc-std-workspace-core\"\n+                ],\n+                \"std\": [],\n+                \"use_std\": [\n+                    \"std\"\n+                ]\n+            },\n+            \"manifest_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98/Cargo.toml\",\n+            \"metadata\": null,\n+            \"publish\": null,\n+            \"authors\": [\n+                \"The Rust Project Developers\"\n+            ],\n+            \"categories\": [\n+                \"external-ffi-bindings\",\n+                \"no-std\",\n+                \"os\"\n+            ],\n+            \"keywords\": [\n+                \"libc\",\n+                \"ffi\",\n+                \"bindings\",\n+                \"operating\",\n+                \"system\"\n+            ],\n+            \"readme\": \"README.md\",\n+            \"repository\": \"https://github.com/rust-lang/libc\",\n+            \"homepage\": \"https://github.com/rust-lang/libc\",\n+            \"documentation\": \"https://docs.rs/libc/\",\n+            \"edition\": \"2015\",\n+            \"links\": null\n+        }\n+    ],\n+    \"workspace_members\": [\n+        \"hello-world 0.1.0 (path+file://$ROOT$hello-world)\"\n+    ],\n+    \"resolve\": {\n+        \"nodes\": [\n+            {\n+                \"id\": \"hello-world 0.1.0 (path+file://$ROOT$hello-world)\",\n+                \"dependencies\": [\n+                    \"libc 0.2.98 (registry+https://github.com/rust-lang/crates.io-index)\"\n+                ],\n+                \"deps\": [\n+                    {\n+                        \"name\": \"libc\",\n+                        \"pkg\": \"libc 0.2.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+                        \"dep_kinds\": [\n+                            {\n+                                \"kind\": null,\n+                                \"target\": null\n+                            }\n+                        ]\n+                    }\n+                ],\n+                \"features\": []\n+            },\n+            {\n+                \"id\": \"libc 0.2.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+                \"dependencies\": [],\n+                \"deps\": [],\n+                \"features\": [\n+                    \"default\",\n+                    \"std\"\n+                ]\n+            }\n+        ],\n+        \"root\": \"hello-world 0.1.0 (path+file://$ROOT$hello-world)\"\n+    },\n+    \"target_directory\": \"$ROOT$hello-world/target\",\n+    \"version\": 1,\n+    \"workspace_root\": \"$ROOT$hello-world\",\n+    \"metadata\": null\n+}"}]}