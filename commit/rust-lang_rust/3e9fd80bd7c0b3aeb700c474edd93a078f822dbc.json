{"sha": "3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWZkODBiZDdjMGIzYWViNzAwYzQ3NGVkZDkzYTA3OGY4MjJkYmM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-03T22:23:21Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-04T19:04:04Z"}, "message": "Add tests for newly const arithmetic fns\n\nCo-Authored-By: 9999years <rbt@sent.as>", "tree": {"sha": "95fd2ec463d39a6ccd801679f669453ea7a9cd67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95fd2ec463d39a6ccd801679f669453ea7a9cd67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "html_url": "https://github.com/rust-lang/rust/commit/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda015aebca79d508b74cae6a0ecfb0a093d8639", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda015aebca79d508b74cae6a0ecfb0a093d8639", "html_url": "https://github.com/rust-lang/rust/commit/dda015aebca79d508b74cae6a0ecfb0a093d8639"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "703f21a3f2952e8a394a4f9e26cde92c9a5dc5fa", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9fd80bd7c0b3aeb700c474edd93a078f822dbc/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=3e9fd80bd7c0b3aeb700c474edd93a078f822dbc", "patch": "@@ -0,0 +1,166 @@\n+// run-pass\n+\n+#![feature(const_int_checked)]\n+#![feature(const_int_euclidean)]\n+#![feature(const_int_overflowing)]\n+#![feature(const_int_saturating)]\n+#![feature(const_int_wrapping)]\n+\n+macro_rules! assert_same_const {\n+    ($(const $ident:ident: $ty:ty = $exp:expr;)+) => {\n+        $(const $ident: $ty = $exp;)+\n+\n+        pub fn main() {\n+            $(assert_eq!($exp, $ident);)+\n+        }\n+    }\n+}\n+\n+assert_same_const! {\n+    // `const_int_checked`\n+    const CHECKED_ADD_I32_A: Option<i32> = 5i32.checked_add(2);\n+    const CHECKED_ADD_I8_A: Option<i8> = 127i8.checked_add(2);\n+    const CHECKED_ADD_U8_A: Option<u8> = 255u8.checked_add(2);\n+\n+    const CHECKED_SUB_I32_A: Option<i32> = 5i32.checked_sub(2);\n+    const CHECKED_SUB_I8_A: Option<i8> = (-127 as i8).checked_sub(2);\n+    const CHECKED_SUB_U8_A: Option<u8> = 1u8.checked_sub(2);\n+\n+    const CHECKED_MUL_I32_A: Option<i32> = 5i32.checked_mul(7777);\n+    const CHECKED_MUL_I8_A: Option<i8> = (-127 as i8).checked_mul(-99);\n+    const CHECKED_MUL_U8_A: Option<u8> = 1u8.checked_mul(3);\n+\n+    const CHECKED_DIV_I32_A: Option<i32> = 5i32.checked_div(7777);\n+    const CHECKED_DIV_I8_A: Option<i8> = (-127 as i8).checked_div(-99);\n+    const CHECKED_DIV_U8_A: Option<u8> = 1u8.checked_div(3);\n+\n+    const CHECKED_REM_I32_A: Option<i32> = 5i32.checked_rem(7777);\n+    const CHECKED_REM_I8_A: Option<i8> = (-127 as i8).checked_rem(-99);\n+    const CHECKED_REM_U8_A: Option<u8> = 1u8.checked_rem(3);\n+    const CHECKED_REM_U8_B: Option<u8> = 1u8.checked_rem(0);\n+\n+    const CHECKED_NEG_I32_A: Option<i32> = 5i32.checked_neg();\n+    const CHECKED_NEG_I8_A: Option<i8> = (-127 as i8).checked_neg();\n+    const CHECKED_NEG_U8_A: Option<u8> = 1u8.checked_neg();\n+    const CHECKED_NEG_U8_B: Option<u8> = u8::min_value().checked_neg();\n+\n+    const CHECKED_SHL_I32_A: Option<i32> = 5i32.checked_shl(77777);\n+    const CHECKED_SHL_I8_A: Option<i8> = (-127 as i8).checked_shl(2);\n+    const CHECKED_SHL_U8_A: Option<u8> = 1u8.checked_shl(8);\n+    const CHECKED_SHL_U8_B: Option<u8> = 1u8.checked_shl(0);\n+\n+    const CHECKED_SHR_I32_A: Option<i32> = 5i32.checked_shr(77777);\n+    const CHECKED_SHR_I8_A: Option<i8> = (-127 as i8).checked_shr(2);\n+    const CHECKED_SHR_U8_A: Option<u8> = 1u8.checked_shr(8);\n+    const CHECKED_SHR_U8_B: Option<u8> = 1u8.checked_shr(0);\n+\n+    const CHECKED_ABS_I32_A: Option<i32> = 5i32.checked_abs();\n+    const CHECKED_ABS_I8_A: Option<i8> = (-127 as i8).checked_abs();\n+    const CHECKED_ABS_I8_B: Option<i8> = 1i8.checked_abs();\n+    const CHECKED_ABS_I8_C: Option<i8> = i8::min_value().checked_abs();\n+\n+    // `const_int_overflowing`\n+    const DIV_A: (i8, bool) = 8i8.overflowing_div(2);\n+    const DIV_B: (i8, bool) = 8i8.overflowing_div(3);\n+    const DIV_C: (i8, bool) = i8::min_value().overflowing_div(-1i8);\n+    const DIV_D: (u8, bool) = 8u8.overflowing_div(2);\n+    const DIV_E: (u8, bool) = 8u8.overflowing_div(3);\n+\n+    const REM_A: (i8, bool) = 8i8.overflowing_rem(2);\n+    const REM_B: (i8, bool) = 8i8.overflowing_rem(3);\n+    const REM_C: (i8, bool) = i8::min_value().overflowing_rem(-1i8);\n+    const REM_D: (u8, bool) = 8u8.overflowing_rem(2);\n+    const REM_E: (u8, bool) = 8u8.overflowing_rem(3);\n+\n+    // `const_int_saturating`\n+    const ADD_INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n+    const ADD_INT_U32: u32 = u32::max_value().saturating_add(1);\n+    const ADD_INT_U128: u128 = u128::max_value().saturating_add(1);\n+    const ADD_INT_I128: i128 = i128::max_value().saturating_add(1);\n+    const ADD_INT_I128_NEG: i128 = i128::min_value().saturating_add(-1);\n+\n+    const SUB_INT_U32_NO: u32 = (42 as u32).saturating_sub(2);\n+    const SUB_INT_U32: u32 = (1 as u32).saturating_sub(2);\n+    const SUB_INT_I32_NO: i32 = (-42 as i32).saturating_sub(2);\n+    const SUB_INT_I32_NEG: i32 = i32::min_value().saturating_sub(1);\n+    const SUB_INT_I32_POS: i32 = i32::max_value().saturating_sub(-1);\n+    const SUB_INT_U128: u128 = (0 as u128).saturating_sub(1);\n+    const SUB_INT_I128_NEG: i128 = i128::min_value().saturating_sub(1);\n+    const SUB_INT_I128_POS: i128 = i128::max_value().saturating_sub(-1);\n+\n+    const MUL_INT_U32_NO: u32 = (42 as u32).saturating_mul(2);\n+    const MUL_INT_U32: u32 = (1 as u32).saturating_mul(2);\n+    const MUL_INT_I32_NO: i32 = (-42 as i32).saturating_mul(2);\n+    const MUL_INT_I32_NEG: i32 = i32::min_value().saturating_mul(1);\n+    const MUL_INT_I32_POS: i32 = i32::max_value().saturating_mul(2);\n+    const MUL_INT_U128: u128 = (0 as u128).saturating_mul(1);\n+    const MUL_INT_I128_NEG: i128 = i128::min_value().saturating_mul(2);\n+    const MUL_INT_I128_POS: i128 = i128::max_value().saturating_mul(2);\n+\n+    const NEG_INT_I8: i8 = (-42i8).saturating_neg();\n+    const NEG_INT_I8_B: i8 = i8::min_value().saturating_neg();\n+    const NEG_INT_I32: i32 = i32::min_value().saturating_neg();\n+    const NEG_INT_I32_B: i32 = i32::max_value().saturating_neg();\n+    const NEG_INT_I128: i128 = i128::min_value().saturating_neg();\n+    const NEG_INT_I128_B: i128 = i128::max_value().saturating_neg();\n+\n+    const ABS_INT_I8_A: i8 = 4i8.saturating_abs();\n+    const ABS_INT_I8_B: i8 = -4i8.saturating_abs();\n+    const ABS_INT_I8_C: i8 = i8::min_value().saturating_abs();\n+    const ABS_INT_I32_A: i32 = 4i32.saturating_abs();\n+    const ABS_INT_I32_B: i32 = -4i32.saturating_abs();\n+    const ABS_INT_I32_C: i32 = i32::min_value().saturating_abs();\n+    const ABS_INT_I128_A: i128 = 4i128.saturating_abs();\n+    const ABS_INT_I128_B: i128 = -4i128.saturating_abs();\n+    const ABS_INT_I128_C: i128 = i128::min_value().saturating_abs();\n+\n+    // `const_int_euclidean`\n+    const CHECKED_DIV_I32_A: Option<i32> = 5i32.checked_div_euclid(7777);\n+    const CHECKED_DIV_I8_A: Option<i8> = (-127 as i8).checked_div_euclid(-99);\n+    const CHECKED_DIV_I8_B: Option<i8> = (-127 as i8).checked_div_euclid(1);\n+    const CHECKED_DIV_I8_C: Option<i8> = i8::min_value().checked_div_euclid(-1);\n+    const CHECKED_DIV_U8_A: Option<u8> = 1u8.checked_div_euclid(3);\n+\n+    const CHECKED_REM_I32_A: Option<i32> = 5i32.checked_rem_euclid(7777);\n+    const CHECKED_REM_I8_A: Option<i8> = (-127 as i8).checked_rem_euclid(-99);\n+    const CHECKED_REM_I8_B: Option<i8> = (-127 as i8).checked_rem_euclid(0);\n+    const CHECKED_REM_I8_C: Option<i8> = i8::min_value().checked_rem_euclid(-1);\n+    const CHECKED_REM_U8_A: Option<u8> = 1u8.checked_rem_euclid(3);\n+\n+    const WRAPPING_DIV_I32_A: i32 = 5i32.wrapping_div_euclid(7777);\n+    const WRAPPING_DIV_I8_A: i8 = (-127 as i8).wrapping_div_euclid(-99);\n+    const WRAPPING_DIV_I8_B: i8 = (-127 as i8).wrapping_div_euclid(1);\n+    const WRAPPING_DIV_I8_C: i8 = i8::min_value().wrapping_div_euclid(-1);\n+    const WRAPPING_DIV_U8_A: u8 = 1u8.wrapping_div_euclid(3);\n+\n+    const WRAPPING_REM_I32_A: i32 = 5i32.wrapping_rem_euclid(7777);\n+    const WRAPPING_REM_I8_A: i8 = (-127 as i8).wrapping_rem_euclid(-99);\n+    const WRAPPING_REM_I8_B: i8 = (-127 as i8).wrapping_rem_euclid(1);\n+    const WRAPPING_REM_I8_C: i8 = i8::min_value().wrapping_rem_euclid(-1);\n+    const WRAPPING_REM_U8_A: u8 = 1u8.wrapping_rem_euclid(3);\n+\n+    const OVERFLOWING_DIV_I32_A: (i32, bool) = 5i32.overflowing_div_euclid(7777);\n+    const OVERFLOWING_DIV_I8_A: (i8, bool) = (-127 as i8).overflowing_div_euclid(-99);\n+    const OVERFLOWING_DIV_I8_B: (i8, bool) = (-127 as i8).overflowing_div_euclid(1);\n+    const OVERFLOWING_DIV_I8_C: (i8, bool) = i8::min_value().overflowing_div_euclid(-1);\n+    const OVERFLOWING_DIV_U8_A: (u8, bool) = 1u8.overflowing_div_euclid(3);\n+\n+    const OVERFLOWING_REM_I32_A: (i32, bool) = 5i32.overflowing_rem_euclid(7777);\n+    const OVERFLOWING_REM_I8_A: (i8, bool) = (-127 as i8).overflowing_rem_euclid(-99);\n+    const OVERFLOWING_REM_I8_B: (i8, bool) = (-127 as i8).overflowing_rem_euclid(1);\n+    const OVERFLOWING_REM_I8_C: (i8, bool) = i8::min_value().overflowing_rem_euclid(-1);\n+    const OVERFLOWING_REM_U8_A: (u8, bool) = 1u8.overflowing_rem_euclid(3);\n+\n+    // `const_int_wrapping`\n+    const DIV_A: i8 = 8i8.wrapping_div(2);\n+    const DIV_B: i8 = 8i8.wrapping_div(3);\n+    const DIV_C: i8 = i8::min_value().wrapping_div(-1i8);\n+    const DIV_D: u8 = 8u8.wrapping_div(2);\n+    const DIV_E: u8 = 8u8.wrapping_div(3);\n+\n+    const REM_A: i8 = 8i8.wrapping_rem(2);\n+    const REM_B: i8 = 8i8.wrapping_rem(3);\n+    const REM_C: i8 = i8::min_value().wrapping_rem(-1i8);\n+    const REM_D: u8 = 8u8.wrapping_rem(2);\n+    const REM_E: u8 = 8u8.wrapping_rem(3);\n+}"}]}