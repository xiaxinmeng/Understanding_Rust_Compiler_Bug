{"sha": "70436969e034be46b3159cabc0eed5ccf91cd825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDM2OTY5ZTAzNGJlNDZiMzE1OWNhYmMwZWVkNWNjZjkxY2Q4MjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-21T15:31:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-21T15:31:39Z"}, "message": "Rollup merge of #63717 - petrochenkov:eager, r=matthewjasper\n\nFix nested eager expansions in arguments of `format_args`\n\nFixes https://github.com/rust-lang/rust/issues/63460\nFixes https://github.com/rust-lang/rust/issues/63685 (regression from making `format_args` opaque - https://github.com/rust-lang/rust/pull/63114)\n\nr? @matthewjasper", "tree": {"sha": "3f8c6a758c3783da2c427d2a0a06c8e3916562bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8c6a758c3783da2c427d2a0a06c8e3916562bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70436969e034be46b3159cabc0eed5ccf91cd825", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXWPbCRBK7hj4Ov3rIwAAdHIIAErzFmglwx1p6fMag1K3kzYN\nLeW/NZwmkx7d/PZe2ojfYlzOYxLnlFqmu8jQQc/q96viB0qDTVRS8mHUFI86Mnla\n4D9CbWTRURh8hzXsg7c6SmTIVBmv2m6+oTchLSvvOKqt6NspyI2LYx/HncAikUoP\nmQLN7OVjvhe+QBBulRWuU8O5BZyFUAaUVDvMZG2pK+e51YDzwJ5w2EJi+Qe/XX5N\nRBPEhiFgWgpgq9mryN6znJvqJmvg5XGTKLgLT8o5nXNQoqlQEFenPNdAcdiqoKSi\nNkAc2aVhvI9/KZPHkbY7QU6I93lc+rNsdzIA8iuTEcaetL+BjZLitHJSBgLyyiI=\n=zvBw\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f8c6a758c3783da2c427d2a0a06c8e3916562bc\nparent d034ccabe455fc10e227c7fa7c060f6ecbd53856\nparent fe2dc919726d17dbe3568f1cb9de34c73b7f1dff\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566401499 +0200\ncommitter GitHub <noreply@github.com> 1566401499 +0200\n\nRollup merge of #63717 - petrochenkov:eager, r=matthewjasper\n\nFix nested eager expansions in arguments of `format_args`\n\nFixes https://github.com/rust-lang/rust/issues/63460\nFixes https://github.com/rust-lang/rust/issues/63685 (regression from making `format_args` opaque - https://github.com/rust-lang/rust/pull/63114)\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70436969e034be46b3159cabc0eed5ccf91cd825", "html_url": "https://github.com/rust-lang/rust/commit/70436969e034be46b3159cabc0eed5ccf91cd825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70436969e034be46b3159cabc0eed5ccf91cd825/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d034ccabe455fc10e227c7fa7c060f6ecbd53856", "url": "https://api.github.com/repos/rust-lang/rust/commits/d034ccabe455fc10e227c7fa7c060f6ecbd53856", "html_url": "https://github.com/rust-lang/rust/commit/d034ccabe455fc10e227c7fa7c060f6ecbd53856"}, {"sha": "fe2dc919726d17dbe3568f1cb9de34c73b7f1dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2dc919726d17dbe3568f1cb9de34c73b7f1dff", "html_url": "https://github.com/rust-lang/rust/commit/fe2dc919726d17dbe3568f1cb9de34c73b7f1dff"}], "stats": {"total": 96, "additions": 75, "deletions": 21}, "files": [{"sha": "719167eb057b21ded168838155838addc2efe1aa", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=70436969e034be46b3159cabc0eed5ccf91cd825", "patch": "@@ -140,9 +140,23 @@ impl<'a> base::Resolver for Resolver<'a> {\n         ImportResolver { r: self }.resolve_imports()\n     }\n \n-    fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: ExpnId, force: bool)\n-                                -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate> {\n-        let parent_scope = self.invocation_parent_scopes[&invoc_id];\n+    fn resolve_macro_invocation(\n+        &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n+    ) -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate> {\n+        let invoc_id = invoc.expansion_data.id;\n+        let parent_scope = match self.invocation_parent_scopes.get(&invoc_id) {\n+            Some(parent_scope) => *parent_scope,\n+            None => {\n+                // If there's no entry in the table, then we are resolving an eagerly expanded\n+                // macro, which should inherit its parent scope from its eager expansion root -\n+                // the macro that requested this eager expansion.\n+                let parent_scope = *self.invocation_parent_scopes.get(&eager_expansion_root)\n+                    .expect(\"non-eager expansion without a parent scope\");\n+                self.invocation_parent_scopes.insert(invoc_id, parent_scope);\n+                parent_scope\n+            }\n+        };\n+\n         let (path, kind, derives, after_derive) = match invoc.kind {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } =>\n                 (&attr.path, MacroKind::Attr, self.arenas.alloc_ast_paths(derives), after_derive),\n@@ -161,7 +175,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                         match self.resolve_macro_path(path, Some(MacroKind::Derive),\n                                                       &parent_scope, true, force) {\n                             Ok((Some(ref ext), _)) if ext.is_derive_copy => {\n-                                self.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n+                                self.add_derives(invoc_id, SpecialDerives::COPY);\n                                 return Ok(None);\n                             }\n                             Err(Determinacy::Undetermined) => result = Err(Indeterminate),\n@@ -178,19 +192,15 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, force)?;\n \n         let span = invoc.span();\n-        invoc.expansion_data.id.set_expn_data(\n-            ext.expn_data(parent_scope.expansion, span, fast_print_path(path))\n-        );\n+        invoc_id.set_expn_data(ext.expn_data(parent_scope.expansion, span, fast_print_path(path)));\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n                 self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n             }\n-            self.macro_defs.insert(invoc.expansion_data.id, def_id);\n-            let normal_module_def_id =\n-                self.macro_def_scope(invoc.expansion_data.id).normal_ancestor_id;\n-            self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.id,\n-                                                            normal_module_def_id);\n+            self.macro_defs.insert(invoc_id, def_id);\n+            let normal_module_def_id = self.macro_def_scope(invoc_id).normal_ancestor_id;\n+            self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }\n \n         Ok(Some(ext))"}, {"sha": "075e6a80013364bdf99c153349a8b60642f62047", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=70436969e034be46b3159cabc0eed5ccf91cd825", "patch": "@@ -682,8 +682,9 @@ pub trait Resolver {\n \n     fn resolve_imports(&mut self);\n \n-    fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: ExpnId, force: bool)\n-                                -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate>;\n+    fn resolve_macro_invocation(\n+        &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n+    ) -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate>;\n \n     fn check_unused_macros(&self);\n \n@@ -908,12 +909,9 @@ impl<'a> ExtCtxt<'a> {\n /// compilation on error, merely emits a non-fatal error and returns `None`.\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n-    mut expr: P<ast::Expr>,\n+    expr: P<ast::Expr>,\n     err_msg: &str,\n ) -> Result<(Symbol, ast::StrStyle, Span), Option<DiagnosticBuilder<'a>>> {\n-    // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n-    expr.span = expr.span.apply_mark(cx.current_expansion.id);\n-\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();"}, {"sha": "72f2c1375e7a2d75cd1e98b95408c845b09d18c7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=70436969e034be46b3159cabc0eed5ccf91cd825", "patch": "@@ -305,9 +305,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 continue\n             };\n \n-            let scope =\n+            let eager_expansion_root =\n                 if self.monotonic { invoc.expansion_data.id } else { orig_expansion_data.id };\n-            let ext = match self.cx.resolver.resolve_macro_invocation(&invoc, scope, force) {\n+            let ext = match self.cx.resolver.resolve_macro_invocation(\n+                &invoc, eager_expansion_root, force\n+            ) {\n                 Ok(ext) => ext,\n                 Err(Indeterminate) => {\n                     undetermined_invocations.push(invoc);\n@@ -318,7 +320,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             progress = true;\n             let ExpansionData { depth, id: expn_id, .. } = invoc.expansion_data;\n             self.cx.current_expansion = invoc.expansion_data.clone();\n-            self.cx.current_expansion.id = scope;\n \n             // FIXME(jseyfried): Refactor out the following logic\n             let (expanded_fragment, new_invocations) = if let Some(ext) = ext {"}, {"sha": "220e5526745c3a835a965829a41505cc2d2bb6ec", "filename": "src/test/ui/hygiene/eager-from-opaque-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque-2.rs?ref=70436969e034be46b3159cabc0eed5ccf91cd825", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for the issue #63460.\n+\n+// check-pass\n+\n+#[macro_export]\n+macro_rules! separator {\n+    () => { \"/\" };\n+}\n+\n+#[macro_export]\n+macro_rules! concat_separator {\n+    ( $e:literal, $($other:literal),+ ) => {\n+        concat!($e, $crate::separator!(), $crate::concat_separator!($($other),+))\n+    };\n+    ( $e:literal ) => {\n+        $e\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", concat_separator!(2, 3, 4))\n+}"}, {"sha": "6f3215dd697f321cf279482cba388e45741c4936", "filename": "src/test/ui/hygiene/eager-from-opaque.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque.rs?ref=70436969e034be46b3159cabc0eed5ccf91cd825", "patch": "@@ -0,0 +1,20 @@\n+// Opaque macro can eagerly expand its input without breaking its resolution.\n+// Regression test for issue #63685.\n+\n+// check-pass\n+\n+macro_rules! foo {\n+    () => {\n+        \"foo\"\n+    };\n+}\n+\n+macro_rules! bar {\n+    () => {\n+        foo!()\n+    };\n+}\n+\n+fn main() {\n+    format_args!(bar!());\n+}"}, {"sha": "5ca4088e585dbcc38ca5eadd8311a6b5a2c7eb64", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70436969e034be46b3159cabc0eed5ccf91cd825/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=70436969e034be46b3159cabc0eed5ccf91cd825", "patch": "@@ -8,6 +8,9 @@ LL | |\n LL | |         \"\"\n LL | |     }\n    | |_____^\n+...\n+LL |       format_args!(hang!());\n+   |                    ------- in this macro invocation\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", hang!());"}]}