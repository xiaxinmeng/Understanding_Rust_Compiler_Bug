{"sha": "9890d9a9d0e76cecbb6cfad41c0901f248430877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTBkOWE5ZDBlNzZjZWNiYjZjZmFkNDFjMDkwMWYyNDg0MzA4Nzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-22T14:48:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-22T14:48:30Z"}, "message": "Rollup merge of #70172 - eddyb:retokenize-external-src, r=petrochenkov\n\nparse/lexer: support `StringReader::retokenize` called on external files.\n\nThis ~~should theoretically~~ fixes #69933, ~~but I'm not sure what the best way to test it is~~.\n**EDIT**: see https://github.com/rust-lang/rust/issues/69933#issuecomment-602019598.\n\nr? @petrochenkov cc @Xanewok @staktrace", "tree": {"sha": "c619999a54b3445bdcf9b6175b150eb60407cd89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c619999a54b3445bdcf9b6175b150eb60407cd89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9890d9a9d0e76cecbb6cfad41c0901f248430877", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJed3q+CRBK7hj4Ov3rIwAAdHIIAGdUvL6ZCvA3LxPBkvhPslbL\nBM71qiPxdyLPVBxfwXzoTsLP965yufEq4A2XRf1ZS8zgE2JdZpQBklTv19yjsx1t\nrFfdbnGGMS+az0EFdjtnrgFBuLcYyr8AJPW+zbUIgiE0wfv7VjyKzYotSE/qmnQR\nqhauqzN0Gpp5ZiYrkGaBc7TK278LamotvELVn/hL1GD7bNNAikrByPRgKWRd49sp\n2lTvdXKvG6jgjKf0Yc1TVHRQJOMc+5FSBUPtu0/tUVgJ8fNjonDQ/+uGVD633aT4\nGglnYS032nCGCtBndBdXDdDo/cgKnY8fjx9UC+o89xc2D8igAzm1E3GH3z4HOHM=\n=z5LX\n-----END PGP SIGNATURE-----\n", "payload": "tree c619999a54b3445bdcf9b6175b150eb60407cd89\nparent 0bc5fc99d3e009a51aa2daa1373b1774252fb443\nparent 6f6fe38b19339265397fc199c61df37772bef54c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584888510 +0100\ncommitter GitHub <noreply@github.com> 1584888510 +0100\n\nRollup merge of #70172 - eddyb:retokenize-external-src, r=petrochenkov\n\nparse/lexer: support `StringReader::retokenize` called on external files.\n\nThis ~~should theoretically~~ fixes #69933, ~~but I'm not sure what the best way to test it is~~.\n**EDIT**: see https://github.com/rust-lang/rust/issues/69933#issuecomment-602019598.\n\nr? @petrochenkov cc @Xanewok @staktrace\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9890d9a9d0e76cecbb6cfad41c0901f248430877", "html_url": "https://github.com/rust-lang/rust/commit/9890d9a9d0e76cecbb6cfad41c0901f248430877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9890d9a9d0e76cecbb6cfad41c0901f248430877/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc5fc99d3e009a51aa2daa1373b1774252fb443", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc5fc99d3e009a51aa2daa1373b1774252fb443", "html_url": "https://github.com/rust-lang/rust/commit/0bc5fc99d3e009a51aa2daa1373b1774252fb443"}, {"sha": "6f6fe38b19339265397fc199c61df37772bef54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fe38b19339265397fc199c61df37772bef54c", "html_url": "https://github.com/rust-lang/rust/commit/6f6fe38b19339265397fc199c61df37772bef54c"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "6c0b2c40c76221db44b5ff2925d6e9b77069bd6b", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9890d9a9d0e76cecbb6cfad41c0901f248430877/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9890d9a9d0e76cecbb6cfad41c0901f248430877/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=9890d9a9d0e76cecbb6cfad41c0901f248430877", "patch": "@@ -46,12 +46,20 @@ impl<'a> StringReader<'a> {\n         source_file: Lrc<rustc_span::SourceFile>,\n         override_span: Option<Span>,\n     ) -> Self {\n-        if source_file.src.is_none() {\n+        // Make sure external source is loaded first, before accessing it.\n+        // While this can't show up during normal parsing, `retokenize` may\n+        // be called with a source file from an external crate.\n+        sess.source_map().ensure_source_file_source_present(source_file.clone());\n+\n+        // FIXME(eddyb) use `Lrc<str>` or similar to avoid cloning the `String`.\n+        let src = if let Some(src) = &source_file.src {\n+            src.clone()\n+        } else if let Some(src) = source_file.external_src.borrow().get_source() {\n+            src.clone()\n+        } else {\n             sess.span_diagnostic\n                 .bug(&format!(\"cannot lex `source_file` without source: {}\", source_file.name));\n-        }\n-\n-        let src = (*source_file.src.as_ref().unwrap()).clone();\n+        };\n \n         StringReader {\n             sess,"}, {"sha": "28864737072b291051012d2349b06587c0cd21bf", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9890d9a9d0e76cecbb6cfad41c0901f248430877/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9890d9a9d0e76cecbb6cfad41c0901f248430877/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=9890d9a9d0e76cecbb6cfad41c0901f248430877", "patch": "@@ -856,7 +856,7 @@ pub enum ExternalSource {\n #[derive(PartialEq, Eq, Clone, Debug)]\n pub enum ExternalSourceKind {\n     /// The external source has been loaded already.\n-    Present(String),\n+    Present(Lrc<String>),\n     /// No attempt has been made to load the external source.\n     AbsentOk,\n     /// A failed attempt has been made to load the external source.\n@@ -872,7 +872,7 @@ impl ExternalSource {\n         }\n     }\n \n-    pub fn get_source(&self) -> Option<&str> {\n+    pub fn get_source(&self) -> Option<&Lrc<String>> {\n         match self {\n             ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),\n             _ => None,\n@@ -1138,7 +1138,7 @@ impl SourceFile {\n                     hasher.write(src.as_bytes());\n \n                     if hasher.finish::<u128>() == self.src_hash {\n-                        *src_kind = ExternalSourceKind::Present(src);\n+                        *src_kind = ExternalSourceKind::Present(Lrc::new(src));\n                         return true;\n                     }\n                 } else {"}]}