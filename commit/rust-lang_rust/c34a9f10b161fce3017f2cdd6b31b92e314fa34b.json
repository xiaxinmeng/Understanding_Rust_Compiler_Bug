{"sha": "c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNGE5ZjEwYjE2MWZjZTMwMTdmMmNkZDZiMzFiOTJlMzE0ZmEzNGI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-19T12:12:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-19T12:12:00Z"}, "message": "Cleanup qualify_path", "tree": {"sha": "6a8288ea62a10800f637ffbe14f182cd30d9194f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8288ea62a10800f637ffbe14f182cd30d9194f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "html_url": "https://github.com/rust-lang/rust/commit/c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34a9f10b161fce3017f2cdd6b31b92e314fa34b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7200b994c9b1eeb97e80a3a64ca51ec452ab888b", "html_url": "https://github.com/rust-lang/rust/commit/7200b994c9b1eeb97e80a3a64ca51ec452ab888b"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "e7444f7dbbb0cc6630b826a390435b208adc63ba", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c34a9f10b161fce3017f2cdd6b31b92e314fa34b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34a9f10b161fce3017f2cdd6b31b92e314fa34b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=c34a9f10b161fce3017f2cdd6b31b92e314fa34b", "patch": "@@ -14,11 +14,10 @@ use syntax::{\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n+    handlers::auto_import::find_importable_node,\n     AssistId, AssistKind, GroupLabel,\n };\n \n-use super::auto_import::find_importable_node;\n-\n // Assist: qualify_path\n //\n // If the name is unresolved, provides all possible qualified paths for it.\n@@ -43,22 +42,20 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    let candidate = import_assets.import_candidate();\n     let range = ctx.sema.original_range(&syntax_under_caret).range;\n-\n+    let candidate = import_assets.import_candidate();\n     let qualify_candidate = match candidate {\n-        ImportCandidate::Path(candidate) => {\n-            if candidate.qualifier.is_some() {\n-                cov_mark::hit!(qualify_path_qualifier_start);\n-                let path = ast::Path::cast(syntax_under_caret)?;\n-                let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n-                QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n-            } else {\n-                cov_mark::hit!(qualify_path_unqualified_name);\n-                let path = ast::Path::cast(syntax_under_caret)?;\n-                let generics = path.segment()?.generic_arg_list();\n-                QualifyCandidate::UnqualifiedName(generics)\n-            }\n+        ImportCandidate::Path(candidate) if candidate.qualifier.is_some() => {\n+            cov_mark::hit!(qualify_path_qualifier_start);\n+            let path = ast::Path::cast(syntax_under_caret)?;\n+            let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n+            QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n+        }\n+        ImportCandidate::Path(_) => {\n+            cov_mark::hit!(qualify_path_unqualified_name);\n+            let path = ast::Path::cast(syntax_under_caret)?;\n+            let generics = path.segment()?.generic_arg_list();\n+            QualifyCandidate::UnqualifiedName(generics)\n         }\n         ImportCandidate::TraitAssocItem(_) => {\n             cov_mark::hit!(qualify_path_trait_assoc_item);\n@@ -119,7 +116,7 @@ impl QualifyCandidate<'_> {\n             QualifyCandidate::TraitAssocItem(qualifier, segment) => {\n                 replacer(format!(\"<{} as {}>::{}\", qualifier, import, segment));\n             }\n-            &QualifyCandidate::TraitMethod(db, ref mcall_expr) => {\n+            QualifyCandidate::TraitMethod(db, mcall_expr) => {\n                 Self::qualify_trait_method(db, mcall_expr, replacer, import, item);\n             }\n         }\n@@ -201,17 +198,10 @@ fn group_label(candidate: &ImportCandidate) -> GroupLabel {\n \n fn label(candidate: &ImportCandidate, import: &LocatedImport) -> String {\n     match candidate {\n-        ImportCandidate::Path(candidate) => {\n-            if candidate.qualifier.is_some() {\n-                format!(\"Qualify with `{}`\", import.import_path)\n-            } else {\n-                format!(\"Qualify as `{}`\", import.import_path)\n-            }\n-        }\n-        ImportCandidate::TraitAssocItem(_) => {\n-            format!(\"Qualify with `{}`\", import.import_path)\n+        ImportCandidate::Path(candidate) if candidate.qualifier.is_none() => {\n+            format!(\"Qualify as `{}`\", import.import_path)\n         }\n-        ImportCandidate::TraitMethod(_) => format!(\"Qualify with `{}`\", import.import_path),\n+        _ => format!(\"Qualify with `{}`\", import.import_path),\n     }\n }\n "}]}