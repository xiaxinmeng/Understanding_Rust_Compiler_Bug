{"sha": "abb61d99ad8cc3c65a576d2cea4f6d9c52887880", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYjYxZDk5YWQ4Y2MzYzY1YTU3NmQyY2VhNGY2ZDljNTI4ODc4ODA=", "commit": {"author": {"name": "J Bailey", "email": "jj2baile@uwaterloo.ca", "date": "2015-04-28T23:24:16Z"}, "committer": {"name": "J Bailey", "email": "jj2baile@uwaterloo.ca", "date": "2015-04-28T23:24:16Z"}, "message": "Extend the nullable pointer optimization to captured vars of closures", "tree": {"sha": "c21406f44077b5d45f74457394bc1968c4663238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21406f44077b5d45f74457394bc1968c4663238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abb61d99ad8cc3c65a576d2cea4f6d9c52887880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abb61d99ad8cc3c65a576d2cea4f6d9c52887880", "html_url": "https://github.com/rust-lang/rust/commit/abb61d99ad8cc3c65a576d2cea4f6d9c52887880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abb61d99ad8cc3c65a576d2cea4f6d9c52887880/comments", "author": {"login": "zecozephyr", "id": 1441856, "node_id": "MDQ6VXNlcjE0NDE4NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1441856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zecozephyr", "html_url": "https://github.com/zecozephyr", "followers_url": "https://api.github.com/users/zecozephyr/followers", "following_url": "https://api.github.com/users/zecozephyr/following{/other_user}", "gists_url": "https://api.github.com/users/zecozephyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/zecozephyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zecozephyr/subscriptions", "organizations_url": "https://api.github.com/users/zecozephyr/orgs", "repos_url": "https://api.github.com/users/zecozephyr/repos", "events_url": "https://api.github.com/users/zecozephyr/events{/privacy}", "received_events_url": "https://api.github.com/users/zecozephyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zecozephyr", "id": 1441856, "node_id": "MDQ6VXNlcjE0NDE4NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1441856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zecozephyr", "html_url": "https://github.com/zecozephyr", "followers_url": "https://api.github.com/users/zecozephyr/followers", "following_url": "https://api.github.com/users/zecozephyr/following{/other_user}", "gists_url": "https://api.github.com/users/zecozephyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/zecozephyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zecozephyr/subscriptions", "organizations_url": "https://api.github.com/users/zecozephyr/orgs", "repos_url": "https://api.github.com/users/zecozephyr/repos", "events_url": "https://api.github.com/users/zecozephyr/events{/privacy}", "received_events_url": "https://api.github.com/users/zecozephyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b64c7fb2809eeba8ff9125cc95c4c38efb9a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b64c7fb2809eeba8ff9125cc95c4c38efb9a8a", "html_url": "https://github.com/rust-lang/rust/commit/d8b64c7fb2809eeba8ff9125cc95c4c38efb9a8a"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "001de615fb1eb3c5fea7ad8fb776cf12752d2adf", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abb61d99ad8cc3c65a576d2cea4f6d9c52887880/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb61d99ad8cc3c65a576d2cea4f6d9c52887880/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=abb61d99ad8cc3c65a576d2cea4f6d9c52887880", "patch": "@@ -440,6 +440,22 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n             None\n         },\n \n+        // Perhaps one of the upvars of this struct is non-zero\n+        // Let's recurse and find out!\n+        ty::ty_closure(def_id, substs) => {\n+            let typer = NormalizingClosureTyper::new(tcx);\n+            let upvars = typer.closure_upvars(def_id, substs).unwrap();\n+            let upvar_types = upvars.iter().map(|u| u.ty).collect::<Vec<_>>();\n+\n+            for (j, &ty) in upvar_types.iter().enumerate() {\n+                if let Some(mut fpath) = find_discr_field_candidate(tcx, ty, path.clone()) {\n+                    fpath.push(j);\n+                    return Some(fpath);\n+                }\n+            }\n+            None\n+        },\n+\n         // Can we use one of the fields in this tuple?\n         ty::ty_tup(ref tys) => {\n             for (j, &ty) in tys.iter().enumerate() {"}, {"sha": "ac5634e6cdd16a26a4b92a1a9665425695930c1d", "filename": "src/test/run-pass/nullable-pointer-opt-closures.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/abb61d99ad8cc3c65a576d2cea4f6d9c52887880/src%2Ftest%2Frun-pass%2Fnullable-pointer-opt-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb61d99ad8cc3c65a576d2cea4f6d9c52887880/src%2Ftest%2Frun-pass%2Fnullable-pointer-opt-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-opt-closures.rs?ref=abb61d99ad8cc3c65a576d2cea4f6d9c52887880", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+use std::mem;\n+\n+pub fn main() {\n+    // By Ref Capture\n+    let a = 10i32;\n+    let b = Some(|| println!(\"{}\", a));\n+    // When we capture by reference we can use any of the\n+    // captures as the discriminant since they're all\n+    // behind a pointer.\n+    assert_eq!(mem::size_of_val(&b), mem::size_of::<usize>());\n+\n+    // By Value Capture\n+    let a = Box::new(12i32);\n+    let b = Some(move || println!(\"{}\", a));\n+    // We captured `a` by value and since it's a `Box` we can use it\n+    // as the discriminant.\n+    assert_eq!(mem::size_of_val(&b), mem::size_of::<Box<i32>>());\n+\n+    // By Value Capture - Transitive case\n+    let a = \"Hello\".to_string(); // String -> Vec -> Unique -> NonZero\n+    let b = Some(move || println!(\"{}\", a));\n+    // We captured `a` by value and since down the chain it contains\n+    // a `NonZero` field, we can use it as the discriminant.\n+    assert_eq!(mem::size_of_val(&b), mem::size_of::<String>());\n+\n+    // By Value - No Optimization\n+    let a = 14i32;\n+    let b = Some(move || println!(\"{}\", a));\n+    // We captured `a` by value but we can't use it as the discriminant\n+    // thus we end up with an extra field for the discriminant\n+    assert_eq!(mem::size_of_val(&b), mem::size_of::<(i32, i32)>());\n+}"}]}