{"sha": "e16a87513a9a94d86de6125a72977af50e05af65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNmE4NzUxM2E5YTk0ZDg2ZGU2MTI1YTcyOTc3YWY1MGUwNWFmNjU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-23T18:04:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-25T00:22:39Z"}, "message": "Remove the cheat sheet.\n\nRust by Example is far better.\n\nFixes #14380.", "tree": {"sha": "df18b11c51b12940cf5b5628da5912a6089a06a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df18b11c51b12940cf5b5628da5912a6089a06a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e16a87513a9a94d86de6125a72977af50e05af65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e16a87513a9a94d86de6125a72977af50e05af65", "html_url": "https://github.com/rust-lang/rust/commit/e16a87513a9a94d86de6125a72977af50e05af65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e16a87513a9a94d86de6125a72977af50e05af65/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf61bb6b7f6522dc78a7100c18282282206af14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf61bb6b7f6522dc78a7100c18282282206af14a", "html_url": "https://github.com/rust-lang/rust/commit/bf61bb6b7f6522dc78a7100c18282282206af14a"}], "stats": {"total": 284, "additions": 1, "deletions": 283}, "files": [{"sha": "fa87e5aa1961cf2d0ae9bf246bc6c3a700939dac", "filename": "configure", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e16a87513a9a94d86de6125a72977af50e05af65/configure", "raw_url": "https://github.com/rust-lang/rust/raw/e16a87513a9a94d86de6125a72977af50e05af65/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=e16a87513a9a94d86de6125a72977af50e05af65", "patch": "@@ -876,7 +876,6 @@ do\n     make_dir $h/test/doc-guide-pointers\n     make_dir $h/test/doc-guide-container\n     make_dir $h/test/doc-guide-tasks\n-    make_dir $h/test/doc-complement-cheatsheet\n     make_dir $h/test/doc-rust\n done\n "}, {"sha": "68d4e19afa602ccb0baf8ba05fd5ddfbe6bf5b7b", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16a87513a9a94d86de6125a72977af50e05af65/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e16a87513a9a94d86de6125a72977af50e05af65/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=e16a87513a9a94d86de6125a72977af50e05af65", "patch": "@@ -28,7 +28,7 @@\n ######################################################################\n DOCS := index intro tutorial guide-ffi guide-macros guide-lifetimes \\\n \tguide-tasks guide-container guide-pointers guide-testing \\\n-\tguide-runtime complement-bugreport complement-cheatsheet \\\n+\tguide-runtime complement-bugreport \\\n \tcomplement-lang-faq complement-design-faq complement-project-faq rust \\\n     rustdoc guide-unsafe\n "}, {"sha": "84fd140a23af4b44fcc22be6fe0ec3aabb78c673", "filename": "src/doc/complement-cheatsheet.md", "status": "removed", "additions": 0, "deletions": 280, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/bf61bb6b7f6522dc78a7100c18282282206af14a/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf61bb6b7f6522dc78a7100c18282282206af14a/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=bf61bb6b7f6522dc78a7100c18282282206af14a", "patch": "@@ -1,280 +0,0 @@\n-% Rust Cheatsheet\n-\n-# How do I convert *X* to *Y*?\n-\n-**Int to string**\n-\n-Use [`ToStr`](std/to_str/trait.ToStr.html).\n-\n-~~~\n-let x: int = 42;\n-let y: String = x.to_str();\n-~~~\n-\n-**String to int**\n-\n-Use [`FromStr`](std/from_str/trait.FromStr.html), and its helper function,\n-[`from_str`](std/from_str/fn.from_str.html).\n-\n-~~~\n-let x: Option<int> = from_str(\"42\");\n-let y: int = x.unwrap();\n-~~~\n-\n-**Int to string, in non-base-10**\n-\n-Use the `format!` syntax extension.\n-\n-~~~\n-let x: int = 42;\n-let y: String = format!(\"{:t}\", x);   // binary\n-let y: String = format!(\"{:o}\", x);   // octal\n-let y: String = format!(\"{:x}\", x);   // lowercase hexadecimal\n-let y: String = format!(\"{:X}\", x);   // uppercase hexadecimal\n-~~~\n-\n-**String to int, in non-base-10**\n-\n-Use [`FromStrRadix`](std/num/trait.FromStrRadix.html), and its helper\n-function, [`from_str_radix`](std/num/fn.from_str_radix.html).\n-\n-~~~\n-use std::num;\n-\n-let x: Option<i64> = num::from_str_radix(\"deadbeef\", 16);\n-let y: i64 = x.unwrap();\n-~~~\n-\n-**Vector of Bytes to String**\n-\n-To return a Borrowed String Slice (&str) use the str helper function\n-[`from_utf8`](std/str/fn.from_utf8.html).\n-\n-~~~\n-use std::str;\n-\n-let bytes = &[104u8,105u8];\n-let x: &str = str::from_utf8(bytes).unwrap();\n-~~~\n-\n-To return an Owned String use the str helper function\n-[`from_utf8_owned`](std/str/fn.from_utf8_owned.html).\n-\n-~~~\n-use std::str;\n-\n-let x: Option<String> =\n-    str::from_utf8([ 104u8, 105u8 ]).map(|x| x.to_string());\n-let y: String = x.unwrap();\n-~~~\n-\n-To return a [`MaybeOwned`](std/str/type.MaybeOwned.html) use the str helper\n-function [`from_utf8_lossy`](std/str/fn.from_utf8_owned.html).\n-This function also replaces non-valid utf-8 sequences with U+FFFD replacement\n-character.\n-\n-~~~\n-use std::str;\n-\n-let x = b\"Hello \\xF0\\x90\\x80World!\";\n-let y = str::from_utf8_lossy(x);\n-~~~\n-\n-**`Vec<T>`/`String` to `&[T]`/`&str`**\n-\n-The `.as_slice` method on each type provides a borrowed slice pointing\n-to the contents of a `Vec` or `String`. The slice points directly to\n-the data already stored in the vector or string, and so is a very\n-cheap operation (no allocations or complicated computations required).\n-\n-~~~\n-let vec: Vec<u32> = vec![1, 2, 3];\n-let slice: &[u32] = vec.as_slice();\n-\n-let string: String = \"foo bar\".to_string();\n-let str_slice: &str = string.as_slice();\n-~~~\n-\n-`Vec` also provides the `.as_mut_slice` method for viewing the\n-contained data as a `&mut [T]`.\n-\n-# File operations\n-\n-## How do I read from a file?\n-\n-Use\n-[`File::open`](std/io/fs/struct.File.html#method.open)\n-to create a\n-[`File`](std/io/fs/struct.File.html)\n-struct, which implements the\n-[`Reader`](std/io/trait.Reader.html)\n-trait.\n-\n-~~~ {.ignore}\n-use std::path::Path;\n-use std::io::fs::File;\n-\n-let path : Path   = Path::new(\"Doc-FAQ-Cheatsheet.md\");\n-let on_error      = || fail!(\"open of {:?} failed\", path);\n-let reader : File = File::open(&path).unwrap_or_else(on_error);\n-~~~\n-\n-## How do I iterate over the lines in a file?\n-\n-Use the [`lines`](std/io/trait.Buffer.html#method.lines) method on a\n-[`BufferedReader`](std/io/struct.BufferedReader.html).\n-\n-~~~\n-use std::io::BufferedReader;\n-# use std::io::MemReader;\n-\n-# let reader = MemReader::new(vec!());\n-\n-let mut reader = BufferedReader::new(reader);\n-for line in reader.lines() {\n-    print!(\"line: {}\", line);\n-}\n-~~~\n-\n-# String operations\n-\n-## How do I search for a substring?\n-\n-Use the [`find_str`](std/str/trait.StrSlice.html#tymethod.find_str) method.\n-\n-~~~\n-let str = \"Hello, this is some random string\";\n-let index: Option<uint> = str.find_str(\"rand\");\n-~~~\n-\n-# Containers\n-\n-## How do I get the length of a vector?\n-\n-The [`Container`](std/container/trait.Container.html) trait provides the `len` method.\n-\n-~~~\n-let u: Vec<u32> = vec![0, 1, 2];\n-let v: &[u32] = &[0, 1, 2, 3];\n-let w: [u32, .. 5] = [0, 1, 2, 3, 4];\n-\n-println!(\"u: {}, v: {}, w: {}\", u.len(), v.len(), w.len()); // 3, 4, 5\n-~~~\n-\n-## How do I iterate over a vector?\n-\n-Use the [`iter`](std/slice/trait.ImmutableVector.html#tymethod.iter) method.\n-\n-~~~\n-let values: Vec<int> = vec![1, 2, 3, 4, 5];\n-for value in values.iter() {  // value: &int\n-    println!(\"{}\", *value);\n-}\n-~~~\n-\n-(See also [`mut_iter`](std/slice/trait.MutableVector.html#tymethod.mut_iter)\n-which yields `&mut int` and\n-[`move_iter`](std/slice/trait.OwnedVector.html#tymethod.move_iter) which yields\n-`int` while consuming the `values` vector.)\n-\n-# Type system\n-\n-## How do I store a function in a struct?\n-\n-~~~\n-struct Foo {\n-    myfunc: fn(int, uint) -> i32\n-}\n-\n-struct FooClosure<'a> {\n-    myfunc: |int, uint|: 'a -> i32\n-}\n-\n-fn a(a: int, b: uint) -> i32 {\n-    (a as uint + b) as i32\n-}\n-\n-fn main() {\n-    let f = Foo { myfunc: a };\n-    let g = FooClosure { myfunc: |a, b|  { (a - b as int) as i32 } };\n-    println!(\"{}\", (f.myfunc)(1, 2));\n-    println!(\"{}\", (g.myfunc)(3, 4));\n-}\n-~~~\n-\n-Note that the parenthesis surrounding `f.myfunc` are necessary: they are how Rust disambiguates field lookup and method call. The `'a` on `FooClosure` is the lifetime of the closure's environment pointer.\n-\n-## How do I express phantom types?\n-\n-[Phantom types](http://www.haskell.org/haskellwiki/Phantom_type) are those that cannot be constructed at compile time. To express these in Rust, zero-variant `enum`s can be used:\n-\n-~~~\n-enum Open {}\n-enum Closed {}\n-~~~\n-\n-Phantom types are useful for enforcing state at compile time. For example:\n-\n-~~~\n-struct Door<State>(String);\n-\n-struct Open;\n-struct Closed;\n-\n-fn close(Door(name): Door<Open>) -> Door<Closed> {\n-    Door::<Closed>(name)\n-}\n-\n-fn open(Door(name): Door<Closed>) -> Door<Open> {\n-    Door::<Open>(name)\n-}\n-\n-let _ = close(Door::<Open>(\"front\".to_string()));\n-~~~\n-\n-Attempting to close a closed door is prevented statically:\n-\n-~~~ {.ignore}\n-let _ = close(Door::<Closed>(\"front\".to_string())); // error: mismatched types: expected `main::Door<main::Open>` but found `main::Door<main::Closed>`\n-~~~\n-\n-# FFI (Foreign Function Interface)\n-\n-## C function signature conversions\n-\n-| Description         | C signature                                   | Equivalent Rust signature                      |\n-|---------------------|-----------------------------------------------|------------------------------------------------|\n-| no parameters       | `void foo(void);`                             | `fn foo();`                                    |\n-| return value        | `int foo(void);`                              | `fn foo() -> c_int;`                           |\n-| function parameters | `void foo(int x, int y);`                     | `fn foo(x: c_int, y: c_int);`                  |\n-| in-out pointers     | `void foo(const int* in_ptr, int* out_ptr);`  | `fn foo(in_ptr: *c_int, out_ptr: *mut c_int);` |\n-\n-Note: The Rust signatures should be wrapped in an `extern \"ABI\" { ... }` block.\n-\n-### Representing opaque handles\n-\n-You might see things like this in C APIs:\n-\n-~~~c\n-typedef struct Window Window;\n-Window* createWindow(int width, int height);\n-~~~\n-\n-You can use a zero-element `enum` ([phantom type](#how-do-i-express-phantom-types)) to represent the opaque object handle. The FFI would look like this:\n-\n-~~~ {.ignore}\n-enum Window {}\n-extern \"C\" {\n-    fn createWindow(width: c_int, height: c_int) -> *Window;\n-}\n-~~~\n-\n-Using a phantom type ensures that the handles cannot be (safely) constructed in client code.\n-\n-# Contributing to this page\n-\n-For small examples, have full type annotations, as much as is reasonable, to keep it clear what, exactly, everything is doing. Try to link to the API docs, as well.\n-\n-Similar documents for other programming languages:\n-\n-  * [http://pleac.sourceforge.net/](http://pleac.sourceforge.net)"}, {"sha": "eb8c59ac030ee17eeebbe407d1c11b2569cf816d", "filename": "src/doc/index.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e16a87513a9a94d86de6125a72977af50e05af65/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/e16a87513a9a94d86de6125a72977af50e05af65/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=e16a87513a9a94d86de6125a72977af50e05af65", "patch": "@@ -28,7 +28,6 @@ li {list-style-type: none; }\n * [Language Design FAQ](complement-design-faq.html)\n * [Language FAQ](complement-lang-faq.html)\n * [Project FAQ](complement-project-faq.html)\n-* [Code cheatsheet](complement-cheatsheet.html) - \"How do I do X?\"\n * [How to submit a bug report](complement-bugreport.html)\n \n # Libraries"}]}