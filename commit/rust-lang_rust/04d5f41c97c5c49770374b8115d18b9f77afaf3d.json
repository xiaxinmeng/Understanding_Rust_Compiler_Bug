{"sha": "04d5f41c97c5c49770374b8115d18b9f77afaf3d", "node_id": "C_kwDOAAsO6NoAKDA0ZDVmNDFjOTdjNWM0OTc3MDM3NGI4MTE1ZDE4YjlmNzdhZmFmM2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-18T11:03:53Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-20T13:17:27Z"}, "message": "Make node_id_to_hir_id owner-local.", "tree": {"sha": "843d93186ef29269f5694edd89f4d485e526dcc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/843d93186ef29269f5694edd89f4d485e526dcc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04d5f41c97c5c49770374b8115d18b9f77afaf3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmISP2kACgkQgTGiTgx5\n768wEQ//TdrKq+wjQnt9118NTYk8FhM2fEPbBGPOKr1HAbbSqI3fe9OekA5KrWgz\nGae3zHCcbEW3EiqxCudKQgpb+8EGXtvN6yWhJTXsZQqG9KhjzgM9pbvv1gk6tCK2\nGMHRbJNWLL+c9rKqlwNlIj1OC0hyXz/A4fJJRBSxDsLOZPeGzPzvoG628X3S0AmF\nPqmDeI4xt9mX+QpoKoUmcR5PoYeQElkOUGSAisGZaXnvwi0/46vGQwfXOe3ee0A5\nRTerb/81pI461jRD0GG90Abuhog/Y7+emjAZ0geXz6Nmkj74yg/cMrawnAfrzUl9\nRXogdQ2KUt1SFk7Pxlgd4bbRHh9zDqcXZaMIeZJrQzn3FWQ02nfjnfK8qCVJqNgG\nRKulzJX5m9eFJioH8PiO00o35sPytquNd/1cIomDMhH9d1mmCU3+DrUrFry+9zIz\nNU3PKdREkqSDRniv9V6T+u8s4yJzlLd2+mr1uv0W75zqRPMpi39seRtyY1sFrm4o\nYSd0mDTTPV1mQdzZaq7su/kD3OXAaulyNV5qabVkPSEQI+h1GVC0M3y0b54kFndi\n5r1zpbQNx+c0dDTUDu4docnO86mf9gFBxyKmVgk0mFfoY+PJmFF57VcZu635nGq1\nFHLxHtvHIUiEdoKqHzfq03HrtJh0eFDUaDUxFdfT75CTrDr826k=\n=ob9t\n-----END PGP SIGNATURE-----", "payload": "tree 843d93186ef29269f5694edd89f4d485e526dcc9\nparent 30b3f35c420694a4f24e5a4df00f06073f4f3a37\nauthor Camille GILLOT <gillot.camille@gmail.com> 1626606233 +0200\ncommitter Santiago Pastorino <spastorino@gmail.com> 1645363047 -0300\n\nMake node_id_to_hir_id owner-local.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04d5f41c97c5c49770374b8115d18b9f77afaf3d", "html_url": "https://github.com/rust-lang/rust/commit/04d5f41c97c5c49770374b8115d18b9f77afaf3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04d5f41c97c5c49770374b8115d18b9f77afaf3d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b3f35c420694a4f24e5a4df00f06073f4f3a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b3f35c420694a4f24e5a4df00f06073f4f3a37", "html_url": "https://github.com/rust-lang/rust/commit/30b3f35c420694a4f24e5a4df00f06073f4f3a37"}], "stats": {"total": 89, "additions": 53, "deletions": 36}, "files": [{"sha": "a01e3e7997d3f35696b1ad20912d2a66ed3b71ba", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d5f41c97c5c49770374b8115d18b9f77afaf3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d5f41c97c5c49770374b8115d18b9f77afaf3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=04d5f41c97c5c49770374b8115d18b9f77afaf3d", "patch": "@@ -473,10 +473,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let new_id = self.resolver.local_def_id(new_node_id);\n                     let Some(res) = resolutions.next() else {\n                         // Associate an HirId to both ids even if there is no resolution.\n-                        let _old = self\n-                            .node_id_to_hir_id\n-                            .insert(new_node_id, hir::HirId::make_owner(new_id));\n-                        debug_assert!(_old.is_none());\n                         self.owners.ensure_contains_elem(new_id, || hir::MaybeOwner::Phantom);\n                         let _old = std::mem::replace(\n                             &mut self.owners[new_id],"}, {"sha": "1296b51cd6ffede827f340582386248e4cce2f98", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/04d5f41c97c5c49770374b8115d18b9f77afaf3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d5f41c97c5c49770374b8115d18b9f77afaf3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=04d5f41c97c5c49770374b8115d18b9f77afaf3d", "patch": "@@ -44,7 +44,7 @@ use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n@@ -67,6 +67,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::SmallVec;\n+use std::collections::hash_map::Entry;\n use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n@@ -154,10 +155,9 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     current_hir_id_owner: LocalDefId,\n     item_local_id_counter: hir::ItemLocalId,\n-    node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n \n     /// NodeIds that are lowered inside the current HIR owner.\n-    local_node_ids: Vec<NodeId>,\n+    node_id_to_local_id: FxHashMap<NodeId, hir::ItemLocalId>,\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n@@ -311,8 +311,7 @@ pub fn lower_crate<'a, 'hir>(\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         current_hir_id_owner: CRATE_DEF_ID,\n         item_local_id_counter: hir::ItemLocalId::new(0),\n-        node_id_to_hir_id: IndexVec::new(),\n-        local_node_ids: Vec::new(),\n+        node_id_to_local_id: FxHashMap::default(),\n         generator_kind: None,\n         task_context: None,\n         current_item: None,\n@@ -439,23 +438,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let current_attrs = std::mem::take(&mut self.attrs);\n         let current_bodies = std::mem::take(&mut self.bodies);\n-        let current_node_ids = std::mem::take(&mut self.local_node_ids);\n+        let current_node_ids = std::mem::take(&mut self.node_id_to_local_id);\n         let current_owner = std::mem::replace(&mut self.current_hir_id_owner, def_id);\n         let current_local_counter =\n             std::mem::replace(&mut self.item_local_id_counter, hir::ItemLocalId::new(1));\n \n         // Always allocate the first `HirId` for the owner itself.\n-        let _old = self.node_id_to_hir_id.insert(owner, hir::HirId::make_owner(def_id));\n+        let _old = self.node_id_to_local_id.insert(owner, hir::ItemLocalId::new(0));\n         debug_assert_eq!(_old, None);\n-        self.local_node_ids.push(owner);\n \n         let item = f(self);\n         debug_assert_eq!(def_id, item.def_id());\n         let info = self.make_owner_info(item);\n \n         self.attrs = current_attrs;\n         self.bodies = current_bodies;\n-        self.local_node_ids = current_node_ids;\n+        self.node_id_to_local_id = current_node_ids;\n         self.current_hir_id_owner = current_owner;\n         self.item_local_id_counter = current_local_counter;\n \n@@ -468,32 +466,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn make_owner_info(&mut self, node: hir::OwnerNode<'hir>) -> hir::OwnerInfo<'hir> {\n         let attrs = std::mem::take(&mut self.attrs);\n         let mut bodies = std::mem::take(&mut self.bodies);\n-        let local_node_ids = std::mem::take(&mut self.local_node_ids);\n+        let node_id_to_local_id = std::mem::take(&mut self.node_id_to_local_id);\n \n-        let local_id_to_def_id = local_node_ids\n+        let local_id_to_def_id = node_id_to_local_id\n             .iter()\n-            .filter_map(|&node_id| {\n-                let hir_id = self.node_id_to_hir_id[node_id]?;\n-                if hir_id.local_id == hir::ItemLocalId::new(0) {\n+            .filter_map(|(&node_id, &local_id)| {\n+                if local_id == hir::ItemLocalId::new(0) {\n                     None\n                 } else {\n                     let def_id = self.resolver.opt_local_def_id(node_id)?;\n+\n                     self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n                     if let o @ hir::MaybeOwner::Phantom = &mut self.owners[def_id] {\n                         // Do not override a `MaybeOwner::Owner` that may already here.\n+                        let hir_id = hir::HirId { owner: self.current_hir_id_owner, local_id };\n                         *o = hir::MaybeOwner::NonOwner(hir_id);\n                     }\n-                    Some((hir_id.local_id, def_id))\n+                    Some((local_id, def_id))\n                 }\n             })\n             .collect();\n \n-        let trait_map = local_node_ids\n+        let trait_map = node_id_to_local_id\n             .into_iter()\n-            .filter_map(|node_id| {\n-                let hir_id = self.node_id_to_hir_id[node_id]?;\n+            .filter_map(|(node_id, local_id)| {\n                 let traits = self.resolver.take_trait_map(node_id)?;\n-                Some((hir_id.local_id, traits.into_boxed_slice()))\n+                Some((local_id, traits.into_boxed_slice()))\n             })\n             .collect();\n \n@@ -558,14 +556,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n-        *self.node_id_to_hir_id.get_or_insert_with(ast_node_id, || {\n-            // Generate a new `HirId`.\n-            let owner = self.current_hir_id_owner;\n-            let local_id = self.item_local_id_counter;\n-            self.item_local_id_counter.increment_by(1);\n-            self.local_node_ids.push(ast_node_id);\n-            hir::HirId { owner, local_id }\n-        })\n+        let owner = self.current_hir_id_owner;\n+        let local_id = match self.node_id_to_local_id.entry(ast_node_id) {\n+            Entry::Occupied(o) => *o.get(),\n+            Entry::Vacant(v) => {\n+                // Generate a new `HirId`.\n+                let local_id = self.item_local_id_counter;\n+                self.item_local_id_counter.increment_by(1);\n+                v.insert(local_id);\n+                local_id\n+            }\n+        };\n+        hir::HirId { owner, local_id }\n     }\n \n     fn next_id(&mut self) -> hir::HirId {\n@@ -574,11 +576,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_res(&mut self, res: Res<NodeId>) -> Res {\n-        res.map_id(|id| {\n-            self.node_id_to_hir_id.get(id).copied().flatten().unwrap_or_else(|| {\n-                panic!(\"expected `NodeId` to be lowered already for res {:#?}\", res);\n-            })\n-        })\n+        let res: Result<Res, ()> = res.apply_id(|id| {\n+            let owner = self.current_hir_id_owner;\n+            let local_id = self.node_id_to_local_id.get(&id).copied().ok_or(())?;\n+            Ok(hir::HirId { owner, local_id })\n+        });\n+        // We may fail to find a HirId when the Res points to a Local from an enclosing HIR owner.\n+        // This can happen when trying to lower the return type `x` in erroneous code like\n+        //   async fn foo(x: u8) -> x {}\n+        // In that case, `x` is lowered as a function parameter, and the return type is lowered as\n+        // an opaque type as a synthetized HIR owner.\n+        res.unwrap_or(Res::Err)\n     }\n \n     fn expect_full_res(&mut self, id: NodeId) -> Res<NodeId> {"}, {"sha": "a2f97f65708570468e0aa2dd1d9cb35151e6494b", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04d5f41c97c5c49770374b8115d18b9f77afaf3d/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d5f41c97c5c49770374b8115d18b9f77afaf3d/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=04d5f41c97c5c49770374b8115d18b9f77afaf3d", "patch": "@@ -611,6 +611,19 @@ impl<Id> Res<Id> {\n         }\n     }\n \n+    pub fn apply_id<R, E>(self, mut map: impl FnMut(Id) -> Result<R, E>) -> Result<Res<R>, E> {\n+        Ok(match self {\n+            Res::Def(kind, id) => Res::Def(kind, id),\n+            Res::SelfCtor(id) => Res::SelfCtor(id),\n+            Res::PrimTy(id) => Res::PrimTy(id),\n+            Res::Local(id) => Res::Local(map(id)?),\n+            Res::SelfTy { trait_, alias_to } => Res::SelfTy { trait_, alias_to },\n+            Res::ToolMod => Res::ToolMod,\n+            Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),\n+            Res::Err => Res::Err,\n+        })\n+    }\n+\n     #[track_caller]\n     pub fn expect_non_local<OtherId>(self) -> Res<OtherId> {\n         self.map_id(|_| panic!(\"unexpected `Res::Local`\"))"}]}