{"sha": "9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMmQ2ZTFlNjI4MDJmN2E0MmM5MDA0MzhiOTdmZDNjNTMxNmRjYjM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-26T23:17:54Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-01T23:16:05Z"}, "message": "Add `crate::` to trait suggestions in Rust 2018.\n\nIn the 2018 edition, when suggesting traits to import that implement a\ngiven method that is being invoked, suggestions will now include the\n`crate::` prefix if the suggested trait is local to the current crate.", "tree": {"sha": "58c4b5c71526010b0fa2d82bd0eedd3b71a0d410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c4b5c71526010b0fa2d82bd0eedd3b71a0d410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluyqrUACgkQAXYLT59T\n8VTrJg//WuuH/lGYzmvDY1gJ/jhIW6Pvxa+2WzB5IthTu4lIuwULqIxhPPe55mYx\n4Y1hU+Ms+d+DfE5qTlViYRnH1wu0uxnV+AikZaePgGrHPx8BOlmmDTkxbhhBcS8b\nJcHh1EIvOfpXt3yt8I7gu/PPCZL9ocFVVG4RWmKNombQ4fiN3bw1bbBxhCA2xF8w\nqe2S+UF9PtjKQN6M9kNjdIksiBt4nHGzIelkP5oR4s7BDvCoHEXnERA4+ZZUjJlS\nFGeBf04EGEu4D5rX21aH0k2KYpUYKMNiRKGidok1QuEqh5fO2DFYI8xSGnsAGGLV\nezEJRGj1wBd0B/yTm9W1JqX/N2GWIov6f+cf+lR+SeuC6yE+sNGCFJ7B3T13QXf5\nA23DQ6NTHX8zv6Fl3JpeHt3DattYjZZSo329GiJ8AXgoUD3W5ordjNW9lE79jtKQ\nzTju4kVbxWQ5M9tvSZHHYCZzPOG36ht6xpK6sIXrEHQSyuhCA6wP2T51TNS6OQ84\npAJr4va03V2arqj6D8NQHAXQh49QErA/hyxgEXErJSw9b6eNOMkm7rMIZvBblfFp\n5JXe6uvPWxLumWid1JnhVXxXPLFF6pN20lPKT4L+mlN5PddxuKgc7ohBQCtL1x3n\nGe7LU1/4qv8hYBXKf3IUCVAKl5WnQOVmxxp47Dw9b8udkbCB1CU=\n=AhuK\n-----END PGP SIGNATURE-----", "payload": "tree 58c4b5c71526010b0fa2d82bd0eedd3b71a0d410\nparent de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb\nauthor David Wood <david@davidtw.co> 1538003874 +0200\ncommitter David Wood <david@davidtw.co> 1538435765 +0200\n\nAdd `crate::` to trait suggestions in Rust 2018.\n\nIn the 2018 edition, when suggesting traits to import that implement a\ngiven method that is being invoked, suggestions will now include the\n`crate::` prefix if the suggested trait is local to the current crate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "html_url": "https://github.com/rust-lang/rust/commit/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb", "html_url": "https://github.com/rust-lang/rust/commit/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb"}], "stats": {"total": 209, "additions": 192, "deletions": 17}, "files": [{"sha": "41f908b4be6b5e37d1ae24128252d01dc46db68b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -13,14 +13,16 @@ use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n use middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n-use syntax::symbol::Symbol;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::{keywords, LocalInternedString, Symbol};\n+use syntax_pos::edition::Edition;\n \n use std::cell::Cell;\n+use std::fmt::Debug;\n \n thread_local! {\n     static FORCE_ABSOLUTE: Cell<bool> = Cell::new(false);\n     static FORCE_IMPL_FILENAME_LINE: Cell<bool> = Cell::new(false);\n+    static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = Cell::new(false);\n }\n \n /// Enforces that item_path_str always returns an absolute path and\n@@ -51,6 +53,17 @@ pub fn with_forced_impl_filename_line<F: FnOnce() -> R, R>(f: F) -> R {\n     })\n }\n \n+/// Add the `crate::` prefix to paths where appropriate.\n+pub fn with_crate_prefix<F: FnOnce() -> R, R>(f: F) -> R {\n+    SHOULD_PREFIX_WITH_CRATE.with(|flag| {\n+        let old = flag.get();\n+        flag.set(true);\n+        let result = f();\n+        flag.set(old);\n+        result\n+    })\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It is relative to the current crate\n@@ -64,6 +77,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n         let mut buffer = LocalPathBuffer::new(mode);\n+        debug!(\"item_path_str: buffer={:?} def_id={:?}\", buffer, def_id);\n         self.push_item_path(&mut buffer, def_id);\n         buffer.into_string()\n     }\n@@ -77,6 +91,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// suitable for user output. It always begins with a crate identifier.\n     pub fn absolute_item_path_str(self, def_id: DefId) -> String {\n         let mut buffer = LocalPathBuffer::new(RootMode::Absolute);\n+        debug!(\"absolute_item_path_str: buffer={:?} def_id={:?}\", buffer, def_id);\n         self.push_item_path(&mut buffer, def_id);\n         buffer.into_string()\n     }\n@@ -85,8 +100,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// various ways, depending on the `root_mode` of the `buffer`.\n     /// (See `RootMode` enum for more details.)\n     pub fn push_krate_path<T>(self, buffer: &mut T, cnum: CrateNum)\n-        where T: ItemPathBuffer\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\n+            \"push_krate_path: buffer={:?} cnum={:?} LOCAL_CRATE={:?}\",\n+            buffer, cnum, LOCAL_CRATE\n+        );\n         match *buffer.root_mode() {\n             RootMode::Local => {\n                 // In local mode, when we encounter a crate other than\n@@ -109,16 +128,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         ..\n                     }) = *opt_extern_crate\n                     {\n+                        debug!(\"push_krate_path: def_id={:?}\", def_id);\n                         self.push_item_path(buffer, def_id);\n                     } else {\n-                        buffer.push(&self.crate_name(cnum).as_str());\n+                        let name = self.crate_name(cnum).as_str();\n+                        debug!(\"push_krate_path: name={:?}\", name);\n+                        buffer.push(&name);\n                     }\n+                } else if self.sess.edition() == Edition::Edition2018 {\n+                    SHOULD_PREFIX_WITH_CRATE.with(|flag| {\n+                        // We only add the `crate::` keyword where appropriate. This\n+                        // is only possible because of the invariant in `push_item_path`\n+                        // that this function will not be called after printing the path\n+                        // to an item in the standard library. Without this invariant,\n+                        // we would print `crate::std::..` here.\n+                        if flag.get() {\n+                            buffer.push(&keywords::Crate.name().as_str())\n+                        }\n+                    })\n                 }\n             }\n             RootMode::Absolute => {\n                 // In absolute mode, just write the crate name\n                 // unconditionally.\n-                buffer.push(&self.original_crate_name(cnum).as_str());\n+                let name = self.original_crate_name(cnum).as_str();\n+                debug!(\"push_krate_path: original_name={:?}\", name);\n+                buffer.push(&name);\n             }\n         }\n     }\n@@ -127,12 +162,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// from at least one local module and returns true. If the crate defining `external_def_id` is\n     /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n     pub fn try_push_visible_item_path<T>(self, buffer: &mut T, external_def_id: DefId) -> bool\n-        where T: ItemPathBuffer\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\n+            \"try_push_visible_item_path: buffer={:?} external_def_id={:?}\",\n+            buffer, external_def_id\n+        );\n         let visible_parent_map = self.visible_parent_map(LOCAL_CRATE);\n \n         let (mut cur_def, mut cur_path) = (external_def_id, Vec::<LocalInternedString>::new());\n         loop {\n+            debug!(\n+                \"try_push_visible_item_path: cur_def={:?} cur_path={:?} CRATE_DEF_INDEX={:?}\",\n+                cur_def, cur_path, CRATE_DEF_INDEX,\n+            );\n             // If `cur_def` is a direct or injected extern crate, push the path to the crate\n             // followed by the path to the item within the crate and return.\n             if cur_def.index == CRATE_DEF_INDEX {\n@@ -142,6 +185,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         direct: true,\n                         ..\n                     }) => {\n+                        debug!(\"try_push_visible_item_path: def_id={:?}\", def_id);\n                         self.push_item_path(buffer, def_id);\n                         cur_path.iter().rev().for_each(|segment| buffer.push(&segment));\n                         return true;\n@@ -156,6 +200,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             let mut cur_def_key = self.def_key(cur_def);\n+            debug!(\"try_push_visible_item_path: cur_def_key={:?}\", cur_def_key);\n \n             // For a UnitStruct or TupleStruct we want the name of its parent rather than <unnamed>.\n             if let DefPathData::StructCtor = cur_def_key.disambiguated_data.data {\n@@ -175,6 +220,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     Symbol::intern(\"<unnamed>\").as_str()\n                 }\n             });\n+            debug!(\"try_push_visible_item_path: symbol={:?}\", symbol);\n             cur_path.push(symbol);\n \n             match visible_parent_map.get(&cur_def) {\n@@ -185,15 +231,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn push_item_path<T>(self, buffer: &mut T, def_id: DefId)\n-        where T: ItemPathBuffer\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\"push_item_path: buffer={:?} def_id={:?}\", buffer, def_id);\n         match *buffer.root_mode() {\n             RootMode::Local if !def_id.is_local() =>\n                 if self.try_push_visible_item_path(buffer, def_id) { return },\n             _ => {}\n         }\n \n         let key = self.def_key(def_id);\n+        debug!(\"push_item_path: key={:?}\", key);\n         match key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n                 assert!(key.parent.is_none());\n@@ -225,9 +273,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::ImplTrait |\n             data @ DefPathData::GlobalMetaData(..) => {\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();\n-                self.push_item_path(buffer, parent_def_id);\n+\n+                match self.def_key(parent_def_id).disambiguated_data.data {\n+                    // Skip recursing to print the crate root depending on the\n+                    // current name.\n+                    //\n+                    // In particular, don't recurse to print the crate root if we\n+                    // just printed `std`. In doing this, we are able to add\n+                    // `crate::` to trait import suggestions.\n+                    DefPathData::CrateRoot if data.as_interned_str() == \"std\" => {},\n+                    _ => self.push_item_path(buffer, parent_def_id),\n+                }\n+\n                 buffer.push(&data.as_interned_str().as_symbol().as_str());\n-            }\n+            },\n+\n             DefPathData::StructCtor => { // present `X` instead of `X::{{constructor}}`\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();\n                 self.push_item_path(buffer, parent_def_id);\n@@ -238,8 +298,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     fn push_impl_path<T>(self,\n                          buffer: &mut T,\n                          impl_def_id: DefId)\n-        where T: ItemPathBuffer\n+        where T: ItemPathBuffer + Debug\n     {\n+        debug!(\"push_impl_path: buffer={:?} impl_def_id={:?}\", buffer, impl_def_id);\n         let parent_def_id = self.parent_def_id(impl_def_id).unwrap();\n \n         // Always use types for non-local impls, where types are always\n@@ -327,7 +388,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     fn push_impl_path_fallback<T>(self,\n                                   buffer: &mut T,\n                                   impl_def_id: DefId)\n-        where T: ItemPathBuffer\n+        where T: ItemPathBuffer + Debug\n     {\n         // If no type info is available, fall back to\n         // pretty printing some span information. This should"}, {"sha": "7651dfe4f34e926714b758b7355b7fd72bdf1aab", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -338,6 +338,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n //\n // To be able to work on all platforms and get *some* reasonable output, we\n // use C++ name-mangling.\n+#[derive(Debug)]\n struct SymbolPathBuffer {\n     result: String,\n     temp_buf: String,"}, {"sha": "28b9dcb9bfdd1abf571baba484a740e87f5484df", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::map as hir_map;\n use hir::Node;\n use rustc_data_structures::sync::Lrc;\n use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n+use rustc::ty::item_path::with_crate_prefix;\n use hir::def::Def;\n use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::lang_items::FnOnceTraitLangItem;\n@@ -515,7 +516,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     \"\\n\"\n                 };\n-                format!(\"use {};\\n{}\", self.tcx.item_path_str(*did), additional_newline)\n+                format!(\n+                    \"use {};\\n{}\",\n+                    with_crate_prefix(|| self.tcx.item_path_str(*did)),\n+                    additional_newline\n+                )\n             }).collect();\n \n             err.span_suggestions_with_applicability(\n@@ -528,12 +533,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n                 if candidates.len() > 1 {\n-                    msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n-                                            i + 1,\n-                                            self.tcx.item_path_str(*trait_did)));\n+                    msg.push_str(\n+                        &format!(\n+                            \"\\ncandidate #{}: `use {};`\",\n+                            i + 1,\n+                            with_crate_prefix(|| self.tcx.item_path_str(*trait_did))\n+                        )\n+                    );\n                 } else {\n-                    msg.push_str(&format!(\"\\n`use {};`\",\n-                                            self.tcx.item_path_str(*trait_did)));\n+                    msg.push_str(\n+                        &format!(\n+                            \"\\n`use {};`\",\n+                            with_crate_prefix(|| self.tcx.item_path_str(*trait_did))\n+                        )\n+                    );\n                 }\n             }\n             if candidates.len() > limit {"}, {"sha": "c0a8009e5368865db9deaae255e247cb6712ee65", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -3990,6 +3990,7 @@ pub fn path_to_def(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n \n pub fn get_path_for_type<F>(tcx: TyCtxt, def_id: DefId, def_ctor: F) -> hir::Path\n where F: Fn(DefId) -> Def {\n+    #[derive(Debug)]\n     struct AbsolutePathBuffer {\n         names: Vec<String>,\n     }"}, {"sha": "611fa83854b9be2cd06d245a498652f382212b42", "filename": "src/test/ui/rust-2018/auxiliary/trait-import-suggestions.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Ftrait-import-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Ftrait-import-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Ftrait-import-suggestions.rs?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Baz {\n+    fn baz(&self) { }\n+}\n+\n+impl Baz for u32 { }"}, {"sha": "d603d8212ed377343c64c67a8468473e015678d8", "filename": "src/test/ui/rust-2018/trait-import-suggestions.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+// aux-build:trait-import-suggestions.rs\n+// compile-flags:--extern trait-import-suggestions\n+\n+mod foo {\n+    mod foobar {\n+        pub(crate) trait Foobar {\n+            fn foobar(&self) { }\n+        }\n+\n+        impl Foobar for u32 { }\n+    }\n+\n+    pub(crate) trait Bar {\n+        fn bar(&self) { }\n+    }\n+\n+    impl Bar for u32 { }\n+\n+    fn in_foo() {\n+        let x: u32 = 22;\n+        x.foobar();\n+    }\n+}\n+\n+fn main() {\n+    let x: u32 = 22;\n+    x.bar();\n+    x.baz();\n+    let y = u32::from_str(\"33\");\n+}"}, {"sha": "59fe7b958e3458e428930faefb8757bb1315295c", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e2d6e1e62802f7a42c900438b97fd3c5316dcb3/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=9e2d6e1e62802f7a42c900438b97fd3c5316dcb3", "patch": "@@ -0,0 +1,43 @@\n+error[E0599]: no method named `foobar` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:32:11\n+   |\n+LL |         x.foobar();\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use crate::foo::foobar::Foobar;`\n+\n+error[E0599]: no method named `bar` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:38:7\n+   |\n+LL |     x.bar();\n+   |       ^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+LL | use crate::foo::Bar;\n+   |\n+\n+error[E0599]: no method named `baz` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:39:7\n+   |\n+LL |     x.baz();\n+   |       ^^^\n+\n+error[E0599]: no function or associated item named `from_str` found for type `u32` in the current scope\n+  --> $DIR/trait-import-suggestions.rs:40:13\n+   |\n+LL |     let y = u32::from_str(\"33\");\n+   |             ^^^^^^^^^^^^^ function or associated item not found in `u32`\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+LL | use std::str::FromStr;\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}]}