{"sha": "0358617e3f77e033c86139104c5c48a777824b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTg2MTdlM2Y3N2UwMzNjODYxMzkxMDRjNWM0OGE3Nzc4MjRiMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-06T08:40:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-06T08:40:43Z"}, "message": "Auto merge of #65043 - Aaron1011:fix/reexport-determinism, r=petrochenkov\n\nMake re-export collection deterministic\n\nFixes https://github.com/rust-lang/rust/issues/65036\n\nPreviously, we were using an `FxHashMap` to collect module re-exports.\nHowever, re-exports end up getting serialized into crate metadata, which\nmeans that metadata generation was non-deterministic. This resulted in\nspurious error messages changes (e.g. PR #64906) due to pretty-printing\nimplicitly depending on the order of re-exports when computing the\nproper path to show to the user.\n\nSee #65042 for a long-term strategy to detect this kind of issue", "tree": {"sha": "c7176ed885090d2451c8deebc45e0390a64690ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7176ed885090d2451c8deebc45e0390a64690ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0358617e3f77e033c86139104c5c48a777824b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0358617e3f77e033c86139104c5c48a777824b08", "html_url": "https://github.com/rust-lang/rust/commit/0358617e3f77e033c86139104c5c48a777824b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0358617e3f77e033c86139104c5c48a777824b08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "html_url": "https://github.com/rust-lang/rust/commit/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae"}, {"sha": "add0a42034b4e3d565ae5934e355bce9b88d15a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/add0a42034b4e3d565ae5934e355bce9b88d15a1", "html_url": "https://github.com/rust-lang/rust/commit/add0a42034b4e3d565ae5934e355bce9b88d15a1"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "5c85650718c1ed082699b46a3ba09c124e23a3e9", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0358617e3f77e033c86139104c5c48a777824b08/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0358617e3f77e033c86139104c5c48a777824b08/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=0358617e3f77e033c86139104c5c48a777824b08", "patch": "@@ -527,7 +527,7 @@ impl<'a> Resolver<'a> {\n                         in_module_is_extern)) = worklist.pop() {\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n-            in_module.for_each_child_stable(self, |this, ident, ns, name_binding| {\n+            in_module.for_each_child(self, |this, ident, ns, name_binding| {\n                 // avoid imports entirely\n                 if name_binding.is_import() && !name_binding.is_extern_crate() { return; }\n                 // avoid non-importable candidates as well"}, {"sha": "1016989ca6e38d5f73f81e9093fb74b4392aef3b", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0358617e3f77e033c86139104c5c48a777824b08/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0358617e3f77e033c86139104c5c48a777824b08/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=0358617e3f77e033c86139104c5c48a777824b08", "patch": "@@ -728,7 +728,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             // abort if the module is already found\n             if result.is_some() { break; }\n \n-            in_module.for_each_child_stable(self.r, |_, ident, _, name_binding| {\n+            in_module.for_each_child(self.r, |_, ident, _, name_binding| {\n                 // abort if the module is already found or if name_binding is private external\n                 if result.is_some() || !name_binding.vis.is_visible_locally() {\n                     return\n@@ -760,7 +760,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n     fn collect_enum_variants(&mut self, def_id: DefId) -> Option<Vec<Path>> {\n         self.find_module(def_id).map(|(enum_module, enum_import_suggestion)| {\n             let mut variants = Vec::new();\n-            enum_module.for_each_child_stable(self.r, |_, ident, _, name_binding| {\n+            enum_module.for_each_child(self.r, |_, ident, _, name_binding| {\n                 if let Res::Def(DefKind::Variant, _) = name_binding.res() {\n                     let mut segms = enum_import_suggestion.path.segments.clone();\n                     segms.push(ast::PathSegment::from_ident(ident));"}, {"sha": "cc75961e6b1afdc215f98d9659abc544b9137138", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0358617e3f77e033c86139104c5c48a777824b08/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0358617e3f77e033c86139104c5c48a777824b08/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0358617e3f77e033c86139104c5c48a777824b08", "patch": "@@ -57,6 +57,7 @@ use std::{cmp, fmt, iter, ptr};\n use std::collections::BTreeSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::fx::FxIndexMap;\n \n use diagnostics::{Suggestion, ImportSuggestion};\n use diagnostics::{find_span_of_binding_until_next_binding, extend_span_to_previous_binding};\n@@ -430,7 +431,7 @@ impl ModuleKind {\n     }\n }\n \n-type Resolutions<'a> = RefCell<FxHashMap<(Ident, Namespace), &'a RefCell<NameResolution<'a>>>>;\n+type Resolutions<'a> = RefCell<FxIndexMap<(Ident, Namespace), &'a RefCell<NameResolution<'a>>>>;\n \n /// One node in the tree of modules.\n pub struct ModuleData<'a> {\n@@ -495,17 +496,6 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn for_each_child_stable<R, F>(&'a self, resolver: &mut R, mut f: F)\n-        where R: AsMut<Resolver<'a>>, F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>)\n-    {\n-        let resolutions = resolver.as_mut().resolutions(self).borrow();\n-        let mut resolutions = resolutions.iter().collect::<Vec<_>>();\n-        resolutions.sort_by_cached_key(|&(&(ident, ns), _)| (ident.as_str(), ns));\n-        for &(&(ident, ns), &resolution) in resolutions.iter() {\n-            resolution.borrow().binding.map(|binding| f(resolver, ident, ns, binding));\n-        }\n-    }\n-\n     fn res(&self) -> Option<Res> {\n         match self.kind {\n             ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),"}, {"sha": "d8826d4072a9d3d8d7217c1ec7e340dbb9a67f12", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0358617e3f77e033c86139104c5c48a777824b08/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0358617e3f77e033c86139104c5c48a777824b08/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=0358617e3f77e033c86139104c5c48a777824b08", "patch": "@@ -5,10 +5,10 @@ LL |     let x = Option(1);\n    |             ^^^^^^\n help: try using one of the enum's variants\n    |\n-LL |     let x = std::prelude::v1::Option::None(1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     let x = std::prelude::v1::Option::Some(1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = std::option::Option::None(1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = std::option::Option::Some(1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct/variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n@@ -17,10 +17,10 @@ LL |     if let Option(_) = x {\n    |            ^^^^^^\n help: try using one of the enum's variants\n    |\n-LL |     if let std::prelude::v1::Option::None(_) = x {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     if let std::prelude::v1::Option::Some(_) = x {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     if let std::option::Option::None(_) = x {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     if let std::option::Option::Some(_) = x {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct/variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:27:12\n@@ -47,14 +47,14 @@ LL |     let z = ManyVariants();\n    |             ^^^^^^^^^^^^\n help: try using one of the enum's variants\n    |\n-LL |     let z = ManyVariants::Eight();\n+LL |     let z = ManyVariants::One();\n+   |             ^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Two();\n+   |             ^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Three();\n    |             ^^^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Five();\n-   |             ^^^^^^^^^^^^^^^^^^\n LL |     let z = ManyVariants::Four();\n    |             ^^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Nine();\n-   |             ^^^^^^^^^^^^^^^^^^\n and 6 other candidates\n \n error: aborting due to 5 previous errors"}, {"sha": "856d6506f2a9f98971abc041f0cb2420c1c5d5d6", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0358617e3f77e033c86139104c5c48a777824b08/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0358617e3f77e033c86139104c5c48a777824b08/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=0358617e3f77e033c86139104c5c48a777824b08", "patch": "@@ -63,7 +63,7 @@ LL | fn qux() -> Some {\n    |             ^^^^\n    |             |\n    |             not a type\n-   |             help: try using the variant's enum: `Option`\n+   |             help: try using the variant's enum: `std::option::Option`\n \n error: aborting due to 7 previous errors\n "}]}