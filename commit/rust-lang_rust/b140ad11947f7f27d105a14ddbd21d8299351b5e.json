{"sha": "b140ad11947f7f27d105a14ddbd21d8299351b5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDBhZDExOTQ3ZjdmMjdkMTA1YTE0ZGRiZDIxZDgyOTkzNTFiNWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-11T13:35:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-11T13:35:43Z"}, "message": "Rollup merge of #24298 - White-Oak:master, r=alexcrichton\n\n Fixes 'fn from_str_radix' documentation where docs meant that Option is returned, though the function returns Result.", "tree": {"sha": "a535942718f8d978a07d4b0d28f5d8b2ea3652da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a535942718f8d978a07d4b0d28f5d8b2ea3652da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b140ad11947f7f27d105a14ddbd21d8299351b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b140ad11947f7f27d105a14ddbd21d8299351b5e", "html_url": "https://github.com/rust-lang/rust/commit/b140ad11947f7f27d105a14ddbd21d8299351b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b140ad11947f7f27d105a14ddbd21d8299351b5e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2e62077e22da8f4acceb5689e374249119977d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2e62077e22da8f4acceb5689e374249119977d", "html_url": "https://github.com/rust-lang/rust/commit/9e2e62077e22da8f4acceb5689e374249119977d"}, {"sha": "b4c49ba2127a1bf0457cabf110a7389928be6488", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c49ba2127a1bf0457cabf110a7389928be6488", "html_url": "https://github.com/rust-lang/rust/commit/b4c49ba2127a1bf0457cabf110a7389928be6488"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "4e4a928d91f72cc25760e092d9dc72acaa73cadb", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b140ad11947f7f27d105a14ddbd21d8299351b5e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b140ad11947f7f27d105a14ddbd21d8299351b5e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b140ad11947f7f27d105a14ddbd21d8299351b5e", "patch": "@@ -856,9 +856,8 @@ macro_rules! int_impl {\n         ///\n         /// # Return value\n         ///\n-        /// `None` if the string did not represent a valid number.\n-        /// Otherwise, `Some(n)` where `n` is the integer represented\n-        /// by `src`.\n+        /// `Err(ParseIntError)` if the string did not represent a valid number.\n+        /// Otherwise, `Ok(n)` where `n` is the integer represented by `src`.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[allow(deprecated)]\n         pub fn from_str_radix(src: &str, radix: u32) -> Result<$T, ParseIntError> {\n@@ -1373,9 +1372,8 @@ macro_rules! uint_impl {\n         ///\n         /// # Return value\n         ///\n-        /// `None` if the string did not represent a valid number.\n-        /// Otherwise, `Some(n)` where `n` is the integer represented\n-        /// by `src`.\n+        /// `Err(ParseIntError)` if the string did not represent a valid number.\n+        /// Otherwise, `Ok(n)` where `n` is the integer represented by `src`.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[allow(deprecated)]\n         pub fn from_str_radix(src: &str, radix: u32) -> Result<$T, ParseIntError> {\n@@ -2707,8 +2705,8 @@ macro_rules! from_str_radix_float_impl {\n             ///\n             /// # Return value\n             ///\n-            /// `None` if the string did not represent a valid number.  Otherwise,\n-            /// `Some(n)` where `n` is the floating-point number represented by `src`.\n+            /// `Err(ParseIntError)` if the string did not represent a valid number.  Otherwise,\n+            /// Otherwise, `Ok(n)` where `n` is the floating-point number represented by `src`.\n             #[inline]\n             #[allow(deprecated)]\n             fn from_str(src: &str) -> Result<$T, ParseFloatError> {\n@@ -2736,9 +2734,8 @@ macro_rules! from_str_radix_float_impl {\n             ///\n             /// # Return value\n             ///\n-            /// `None` if the string did not represent a valid number.\n-            /// Otherwise, `Some(n)` where `n` is the floating-point number\n-            /// represented by `src`.\n+            /// `Err(ParseIntError)` if the string did not represent a valid number.  Otherwise,\n+            /// Otherwise, `Ok(n)` where `n` is the floating-point number represented by `src`.\n             fn from_str_radix(src: &str, radix: u32)\n                               -> Result<$T, ParseFloatError> {\n                 use self::FloatErrorKind::*;"}]}