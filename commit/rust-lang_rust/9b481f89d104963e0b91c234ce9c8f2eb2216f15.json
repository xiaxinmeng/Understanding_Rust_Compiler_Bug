{"sha": "9b481f89d104963e0b91c234ce9c8f2eb2216f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDgxZjg5ZDEwNDk2M2UwYjkxYzIzNGNlOWM4ZjJlYjIyMTZmMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-04T18:59:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-04T18:59:47Z"}, "message": "Auto merge of #25056 - jooert:sometests, r=alexcrichton\n\nAdd several regression tests and remove some unnecessary FIXMEs.", "tree": {"sha": "cd703aacc59875ee99f7957d11bbcf419fa5ad29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd703aacc59875ee99f7957d11bbcf419fa5ad29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b481f89d104963e0b91c234ce9c8f2eb2216f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b481f89d104963e0b91c234ce9c8f2eb2216f15", "html_url": "https://github.com/rust-lang/rust/commit/9b481f89d104963e0b91c234ce9c8f2eb2216f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b481f89d104963e0b91c234ce9c8f2eb2216f15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70db76602e0fbd88c718e4f564b90a8819978773", "url": "https://api.github.com/repos/rust-lang/rust/commits/70db76602e0fbd88c718e4f564b90a8819978773", "html_url": "https://github.com/rust-lang/rust/commit/70db76602e0fbd88c718e4f564b90a8819978773"}, {"sha": "e7d052ebd943762c4dbfd9a7a0525f3288a26ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d052ebd943762c4dbfd9a7a0525f3288a26ffa", "html_url": "https://github.com/rust-lang/rust/commit/e7d052ebd943762c4dbfd9a7a0525f3288a26ffa"}], "stats": {"total": 252, "additions": 211, "deletions": 41}, "files": [{"sha": "76c5cdafd7cf1b9f7d54bea6e244a773bfadd884", "filename": "src/test/auxiliary/issue-19163.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fauxiliary%2Fissue-19163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fauxiliary%2Fissue-19163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-19163.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+#[macro_export]\n+macro_rules! mywrite {\n+    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n+}"}, {"sha": "35697e687341f10b8c35655fcdb4dc8054721b6e", "filename": "src/test/compile-fail/issue-12511.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-12511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-12511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12511.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait t1 : t2 {\n+//~^ ERROR: unsupported cyclic reference between types/traits detected\n+}\n+\n+trait t2 : t1 {\n+//~^ ERROR: unsupported cyclic reference between types/traits detected\n+}\n+\n+fn main() { }"}, {"sha": "56a66ecc8aa456898fe8080bd999e14f32990120", "filename": "src/test/compile-fail/issue-17959.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-17959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-17959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17959.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate core;\n+\n+use core::ops::Drop;\n+\n+trait Bar {}\n+\n+struct G<T: ?Sized> {\n+    _ptr: *const T\n+}\n+\n+impl<T> Drop for G<T> {\n+//~^ ERROR: The requirement `T : core::marker::Sized` is added only by the Drop impl. [E0367]\n+    fn drop(&mut self) {\n+        if !self._ptr.is_null() {\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let x:G<Bar>;\n+}"}, {"sha": "1ffffa9fc748e93e6158a4632fdf29b02940013e", "filename": "src/test/compile-fail/issue-19109.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-19109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-19109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19109.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait { }\n+\n+fn function(t: &mut Trait) {\n+    t as *mut Trait\n+ //~^ ERROR: mismatched types:\n+ //~| expected `()`,\n+ //~|    found `*mut Trait`\n+ //~| (expected (),\n+ //~|    found *-ptr) [E0308]\n+}\n+\n+fn main() { }"}, {"sha": "cd6f7c4fd8fc9547704a1e60bf928a5715976461", "filename": "src/test/compile-fail/issue-19163.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-19163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-19163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19163.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-19163.rs\n+\n+#[macro_use] extern crate issue_19163;\n+\n+use std::io::Write;\n+\n+fn main() {\n+    let mut v = vec![];\n+    mywrite!(&v, \"Hello world\");\n+ //~^ error: cannot borrow immutable borrowed content as mutable\n+}"}, {"sha": "dbc0e410cf95c552e7123f00818975093ce05a62", "filename": "src/test/compile-fail/issue-19380.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Qiz {\n+  fn qiz();\n+}\n+\n+struct Foo;\n+impl Qiz for Foo {\n+  fn qiz() {}\n+}\n+\n+struct Bar {\n+  foos: &'static [&'static (Qiz + 'static)]\n+}\n+\n+const FOO : Foo = Foo;\n+const BAR : Bar = Bar { foos: &[&FOO]};\n+//~^ ERROR: cannot convert to a trait object because trait `Qiz` is not object-safe [E0038]\n+\n+fn main() { }"}, {"sha": "bef70a0edaab9b566487179c6aed08f52312d052", "filename": "src/test/run-make/issue-18943/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-make%2Fissue-18943%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-make%2Fissue-18943%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-18943%2FMakefile?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+# Regression test for ICE #18943 when compiling as lib\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type lib\n+\t$(call REMOVE_RLIBS,foo) && exit 0 || exit 1"}, {"sha": "aadf0f593e745dc8b0a7977d3b72986ee60546ac", "filename": "src/test/run-make/issue-18943/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-make%2Fissue-18943%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-make%2Fissue-18943%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-18943%2Ffoo.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo { }\n+\n+trait Bar { }\n+\n+impl<'a> Foo for Bar + 'a { }\n+"}, {"sha": "4082580a123ff2cbc7b3061150f296daa7ea3e37", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -14,8 +14,6 @@\n // for `ByRef`. The right answer was to consider the result ambiguous\n // until more type information was available.\n \n-// ignore-pretty -- FIXME(#17362)\n-\n #![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n "}, {"sha": "082ad53d5593dee4954760b93d2d4e3d4c850bad", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -14,8 +14,6 @@\n // for `ByRef`. The right answer was to consider the result ambiguous\n // until more type information was available.\n \n-// ignore-pretty -- FIXME(#17362) pretty prints with `<<` which lexes wrong\n-\n #![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n "}, {"sha": "f061b6cf4c1b34e0e7501472e6f70cd09c4cbd46", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-pretty-expanded FIXME #15189\n-\n-\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum ES<T> {\n     ES1 { x: T },"}, {"sha": "d6c73f394acaa91d9f5c471a5d5b3362709c9d23", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-pretty-expanded FIXME #15189\n-\n-\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S<T> {\n     x: T,"}, {"sha": "fc256228507fac29b3f33f5f8b5f1e1b053675fb", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-pretty-expanded FIXME #15189\n-\n-\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct TS<T>(T,T);\n "}, {"sha": "3fdf840d5963cae0626bd81eb7a1520b924b2cc7", "filename": "src/test/run-pass/deriving-self-lifetime-totalord-totaleq.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME #11820: & is unreliable in deriving\n-\n use std::cmp::Ordering::{Less,Equal,Greater};\n \n-#[derive(Eq,Ord)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct A<'a> {\n     x: &'a isize\n }"}, {"sha": "433bd7cd906ec3fb52bc0720f9f7daf6baa590b5", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty FIXME(#14193)\n-\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "a661437a44ccff63f5f2f7fee243b6ff80b11735", "filename": "src/test/run-pass/issue-14564.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fissue-14564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fissue-14564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14564.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod Foo { }\n+struct Foo;\n+impl Foo { }\n+\n+fn main() { }"}, {"sha": "ef1345259278dff18e88f11149c26545dd6fc61f", "filename": "src/test/run-pass/issue-17170.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fissue-17170.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fissue-17170.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17170.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(simd)]\n+\n+#[simd]\n+struct T(f64, f64, f64);\n+\n+static X: T = T(0.0, 0.0, 0.0);\n+\n+fn main() {\n+    let _ = X;\n+}"}, {"sha": "8e2fa2b619715994fd285521669cfca1fcd6547a", "filename": "src/test/run-pass/issue-19081.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19081.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty -- FIXME(#17362) pretty prints as `Hash<<Self as Hasher...` which fails to parse\n-\n pub trait Hasher {\n     type State;\n "}, {"sha": "867cb35f1f624d3887aa4331ae8847218f8083f8", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -20,7 +20,6 @@ struct A { a: Box<isize> }\n fn foo() -> Box<FnMut() -> isize + 'static> {\n     let k: Box<_> = box 22;\n     let _u = A {a: k.clone()};\n-    // FIXME(#16640) suffix in `22` suffix shouldn't be necessary\n     let result  = || 22;\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     Box::new(result)"}, {"sha": "a8240dfbd1f8bd558fc80f8665abee2300c7230a", "filename": "src/test/run-pass/ufcs-polymorphic-paths.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -17,9 +17,6 @@ use std::default::Default;\n use std::iter::FromIterator;\n use std::ops::Add;\n use std::option::IntoIter as OptionIter;\n-// FIXME the glob std::prelude::*; import of Vec is missing non-static inherent\n-// methods.\n-use std::vec::Vec;\n \n pub struct XorShiftRng;\n use XorShiftRng as DummyRng;\n@@ -81,11 +78,10 @@ tests! {\n     Vec::map_in_place, fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>, (vec![b'f', b'o', b'o'], u8_as_i8);\n     Vec::map_in_place::<i8, fn(u8) -> i8>, fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>,\n         (vec![b'f', b'o', b'o'], u8_as_i8);\n-    // FIXME these break with \"type parameter might not appear here pointing at `<u8>`.\n-    // Vec::<u8>::map_in_place: fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>\n-    //    , (vec![b'f', b'o', b'o'], u8_as_i8);\n-    // Vec::<u8>::map_in_place::<i8, fn(u8) -> i8>: fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>\n-    //    , (vec![b'f', b'o', b'o'], u8_as_i8);\n+    Vec::<u8>::map_in_place, fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>\n+        , (vec![b'f', b'o', b'o'], u8_as_i8);\n+    Vec::<u8>::map_in_place::<i8, fn(u8) -> i8>, fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>\n+        , (vec![b'f', b'o', b'o'], u8_as_i8);\n \n     // Trait static methods.\n     bool::size, fn() -> usize, ();"}, {"sha": "938b5dc616729530ffc5b3554844eddf1b7028a4", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-pretty-expanded FIXME #15189\n-\n-\n #![feature(core)]\n \n use std::iter::Unfold;"}, {"sha": "ec1c6970ea0c9bd7ebbb4bdf797dd4a701b2cced", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// no-pretty-expanded FIXME #15189\n \n pub fn main() {\n     let yen: char = '\u00a5'; // 0xa5"}, {"sha": "befb27e6ccb00716ef17b79320be6858b50efdb1", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b481f89d104963e0b91c234ce9c8f2eb2216f15/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=9b481f89d104963e0b91c234ce9c8f2eb2216f15", "patch": "@@ -11,18 +11,22 @@\n \n use std::mem::size_of;\n \n-pub fn main() {\n+#[cfg(not(target_pointer_width = \"64\"))]\n+fn test_big_vec() {}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+fn test_big_vec()\n+{\n+    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1 << 32));\n+}\n+\n+fn main() {\n     let x: [isize; 4] = [1, 2, 3, 4];\n     assert_eq!(x[0], 1);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[2], 3);\n     assert_eq!(x[3], 4);\n \n     assert_eq!(size_of::<[u8; 4]>(), 4);\n-\n-    // FIXME #10183\n-    // FIXME #18069\n-    //if cfg!(target_pointer_width = \"64\") {\n-    //    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1 << 32));\n-    //}\n+    test_big_vec();\n }"}]}