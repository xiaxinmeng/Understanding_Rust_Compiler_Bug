{"sha": "7b6270b53794adf62e16918a159e5e5eecb9a60e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjI3MGI1Mzc5NGFkZjYyZTE2OTE4YTE1OWU1ZTVlZWNiOWE2MGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-16T09:40:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:19Z"}, "message": "store krate information more uniformly\n\nmake DefPath store krate and enable uniform access to crate_name/crate_disambiguator", "tree": {"sha": "288728c12b82cf2778089b3512c3b0b2a695c81a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288728c12b82cf2778089b3512c3b0b2a695c81a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6270b53794adf62e16918a159e5e5eecb9a60e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6270b53794adf62e16918a159e5e5eecb9a60e", "html_url": "https://github.com/rust-lang/rust/commit/7b6270b53794adf62e16918a159e5e5eecb9a60e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6270b53794adf62e16918a159e5e5eecb9a60e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "html_url": "https://github.com/rust-lang/rust/commit/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278"}], "stats": {"total": 161, "additions": 91, "deletions": 70}, "files": [{"sha": "4d5da12cad239bfc917e2cdca8b13791bc812118", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -59,7 +59,54 @@ pub struct DefData {\n     pub node_id: ast::NodeId,\n }\n \n-pub type DefPath = Vec<DisambiguatedDefPathData>;\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct DefPath {\n+    /// the path leading from the crate root to the item\n+    pub data: Vec<DisambiguatedDefPathData>,\n+\n+    /// what krate root is this path relative to?\n+    pub krate: ast::CrateNum,\n+}\n+\n+impl DefPath {\n+    pub fn is_local(&self) -> bool {\n+        self.krate == LOCAL_CRATE\n+    }\n+\n+    pub fn make<FN>(start_krate: ast::CrateNum,\n+                    start_index: DefIndex,\n+                    mut get_key: FN) -> DefPath\n+        where FN: FnMut(DefIndex) -> DefKey\n+    {\n+        let mut krate = start_krate;\n+        let mut data = vec![];\n+        let mut index = Some(start_index);\n+        loop {\n+            let p = index.unwrap();\n+            let key = get_key(p);\n+            match key.disambiguated_data.data {\n+                DefPathData::CrateRoot => {\n+                    assert!(key.parent.is_none());\n+                    break;\n+                }\n+                DefPathData::InlinedRoot(ref p) => {\n+                    assert!(key.parent.is_none());\n+                    assert!(!p.def_id.is_local());\n+                    data.extend(p.data.iter().cloned().rev());\n+                    krate = p.def_id.krate;\n+                    break;\n+                }\n+                _ => {\n+                    data.push(key.disambiguated_data);\n+                    index = key.parent;\n+                }\n+            }\n+        }\n+        data.reverse();\n+        DefPath { data: data, krate: krate }\n+    }\n+}\n+\n /// Root of an inlined item. We track the `DefPath` of the item within\n /// the original crate but also its def-id. This is kind of an\n /// augmented version of a `DefPath` that includes a `DefId`. This is\n@@ -141,7 +188,7 @@ impl Definitions {\n     /// will be the path of the item in the external crate (but the\n     /// path will begin with the path to the external crate).\n     pub fn def_path(&self, index: DefIndex) -> DefPath {\n-        make_def_path(index, |p| self.def_key(p))\n+        DefPath::make(LOCAL_CRATE, index, |p| self.def_key(p))\n     }\n \n     pub fn opt_def_index(&self, node: ast::NodeId) -> Option<DefIndex> {\n@@ -247,29 +294,3 @@ impl DefPathData {\n     }\n }\n \n-pub fn make_def_path<FN>(start_index: DefIndex, mut get_key: FN) -> DefPath\n-    where FN: FnMut(DefIndex) -> DefKey\n-{\n-    let mut result = vec![];\n-    let mut index = Some(start_index);\n-    while let Some(p) = index {\n-        let key = get_key(p);\n-        match key.disambiguated_data.data {\n-            DefPathData::CrateRoot => {\n-                assert!(key.parent.is_none());\n-                break;\n-            }\n-            DefPathData::InlinedRoot(ref p) => {\n-                assert!(key.parent.is_none());\n-                result.extend(p.iter().cloned().rev());\n-                break;\n-            }\n-            _ => {\n-                result.push(key.disambiguated_data);\n-                index = key.parent;\n-            }\n-        }\n-    }\n-    result.reverse();\n-    result\n-}"}, {"sha": "6acd094c1f90d5be6fcbe941b5ea835eb8b647b7", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -15,7 +15,7 @@ use front::map as ast_map;\n use session::Session;\n use lint;\n use middle;\n-use middle::cstore::CrateStore;\n+use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def::DefMap;\n use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n@@ -422,6 +422,22 @@ pub struct TyCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n+    pub fn crate_name(&self, cnum: ast::CrateNum) -> token::InternedString {\n+        if cnum == LOCAL_CRATE {\n+            self.crate_name.clone()\n+        } else {\n+            self.sess.cstore.crate_name(cnum)\n+        }\n+    }\n+\n+    pub fn crate_disambiguator(&self, cnum: ast::CrateNum) -> token::InternedString {\n+        if cnum == LOCAL_CRATE {\n+            self.sess.crate_disambiguator.get().as_str()\n+        } else {\n+            self.sess.cstore.crate_name(cnum)\n+        }\n+    }\n+\n     pub fn type_parameter_def(&self,\n                               node_id: NodeId)\n                               -> ty::TypeParameterDef<'tcx>"}, {"sha": "3e6878408681c7f46ab639f116e0ec847230c0fe", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -24,6 +24,7 @@ use syntax::diagnostics;\n use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::ParseSess;\n+use syntax::parse::token;\n use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n \n@@ -69,7 +70,7 @@ pub struct Session {\n     // forms a unique global identifier for the crate. It is used to allow\n     // multiple crates with the same name to coexist. See the\n     // trans::back::symbol_names module for more information.\n-    pub crate_disambiguator: RefCell<String>,\n+    pub crate_disambiguator: Cell<ast::Name>,\n     pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -486,7 +487,7 @@ pub fn build_session_(sopts: config::Options,\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FnvHashMap()),\n-        crate_disambiguator: RefCell::new(String::new()),\n+        crate_disambiguator: Cell::new(token::intern(\"\")),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n         next_node_id: Cell::new(1),"}, {"sha": "96e819ea91feee86296af2dd5b98687f5939701b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -501,7 +501,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     })?;\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n-    *sess.crate_disambiguator.borrow_mut() = compute_crate_disambiguator(sess);\n+    sess.crate_disambiguator.set(token::intern(&compute_crate_disambiguator(sess)));\n \n     time(time_passes, \"recursion limit\", || {\n         middle::recursion_limit::update_recursion_limit(sess, &krate);"}, {"sha": "c1144387553f05c257d4c43e34ca95a9afdcbfe0", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -284,7 +284,7 @@ impl<'a> CrateReader<'a> {\n \n         // Check for (potential) conflicts with the local crate\n         if self.local_crate_name == crate_name &&\n-           &self.sess.crate_disambiguator.borrow()[..] == disambiguator {\n+           self.sess.crate_disambiguator.get().as_str() == disambiguator {\n             span_fatal!(self.sess, span, E0519,\n                         \"the current crate is indistinguishable from one of its \\\n                          dependencies: it has the same crate-name `{}` and was \\"}, {"sha": "562525e956a892f623572357d25fa66c79a94dc6", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -1779,9 +1779,5 @@ fn def_key(item_doc: rbml::Doc) -> hir_map::DefKey {\n \n pub fn def_path(cdata: Cmd, id: DefIndex) -> hir_map::DefPath {\n     debug!(\"def_path(id={:?})\", id);\n-    hir_map::definitions::make_def_path(id, |parent| {\n-        debug!(\"def_path: parent={:?}\", parent);\n-        let parent_doc = cdata.lookup_item(parent);\n-        def_key(parent_doc)\n-    })\n+    hir_map::DefPath::make(cdata.cnum, id, |parent| def_key(cdata, parent))\n }"}, {"sha": "73ac64adbb2a506615b67a2b0355bd94052bed3a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -1991,7 +1991,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n     encode_crate_name(rbml_w, &ecx.link_meta.crate_name);\n     encode_crate_triple(rbml_w, &ecx.tcx.sess.opts.target_triple);\n     encode_hash(rbml_w, &ecx.link_meta.crate_hash);\n-    encode_crate_disambiguator(rbml_w, &ecx.tcx.sess.crate_disambiguator.borrow());\n+    encode_crate_disambiguator(rbml_w, &ecx.tcx.sess.crate_disambiguator.get().as_str());\n     encode_dylib_dependency_formats(rbml_w, &ecx);\n \n     let mut i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();"}, {"sha": "64d117100543f6e91298f4137e788a293916bfc7", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -130,7 +130,7 @@ pub fn build_link_meta(sess: &Session,\n                        -> LinkMeta {\n     let r = LinkMeta {\n         crate_name: name.to_owned(),\n-        crate_hash: Svh::calculate(&sess.crate_disambiguator.borrow()[..], krate),\n+        crate_hash: Svh::calculate(&sess.crate_disambiguator.get().as_str(), krate),\n     };\n     info!(\"{:?}\", r);\n     return r;"}, {"sha": "a67b6841f02a187d9b1c723a0575d75fdb69223c", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -111,23 +111,18 @@ use syntax::parse::token::{self, InternedString};\n use serialize::hex::ToHex;\n \n pub fn def_id_to_string<'tcx>(tcx: &ty::TyCtxt<'tcx>, def_id: DefId) -> String {\n-\n     let def_path = tcx.def_path(def_id);\n-    let mut s = String::with_capacity(def_path.len() * 16);\n+    def_path_to_string(tcx, &def_path)\n+}\n \n-    let def_path = if def_id.is_local() {\n-        s.push_str(&tcx.crate_name[..]);\n-        s.push_str(\"/\");\n-        s.push_str(&tcx.sess.crate_disambiguator.borrow()[..]);\n-        &def_path[..]\n-    } else {\n-        s.push_str(&tcx.sess.cstore.crate_name(def_id.krate)[..]);\n-        s.push_str(\"/\");\n-        s.push_str(&tcx.sess.cstore.crate_disambiguator(def_id.krate));\n-        &def_path[1..]\n-    };\n+pub fn def_path_to_string<'tcx>(tcx: &ty::TyCtxt<'tcx>, def_path: &DefPath) -> String {\n+    let mut s = String::with_capacity(def_path.data.len() * 16);\n \n-    for component in def_path {\n+    s.push_str(&tcx.crate_name(def_path.krate));\n+    s.push_str(\"/\");\n+    s.push_str(&tcx.crate_disambiguator(def_path.krate));\n+\n+    for component in &def_path.data {\n         write!(s,\n                \"::{}[{}]\",\n                component.data.as_interned_str(),"}, {"sha": "160596683f1c223924afb26561d6a26498eeb5f5", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -2444,7 +2444,7 @@ pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle\n                 let path = ccx.tcx().map.def_path_from_id(id);\n-                path.last().unwrap().data.to_string()\n+                path.data.last().unwrap().data.to_string()\n             } else {\n                 match weak_lang_items::link_name(attrs) {\n                     Some(name) => name.to_string(),"}, {"sha": "3f3da36be069588951d201243572d38889410597", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6270b53794adf62e16918a159e5e5eecb9a60e/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=7b6270b53794adf62e16918a159e5e5eecb9a60e", "patch": "@@ -1261,28 +1261,20 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n fn push_item_name(ccx: &CrateContext,\n                   def_id: DefId,\n                   output: &mut String) {\n-    if def_id.is_local() {\n-        let node_id = ccx.tcx().map.as_local_node_id(def_id).unwrap();\n-        let inlined_from = ccx.external_srcs()\n-                              .borrow()\n-                              .get(&node_id)\n-                              .map(|def_id| *def_id);\n-\n-        if let Some(extern_def_id) = inlined_from {\n-            push_item_name(ccx, extern_def_id, output);\n-            return;\n-        }\n+    let def_path = ccx.tcx().def_path(def_id);\n \n-        output.push_str(&ccx.link_meta().crate_name);\n-        output.push_str(\"::\");\n-    }\n+    // some_crate::\n+    output.push_str(&ccx.tcx().crate_name(def_path.krate));\n+    output.push_str(\"::\");\n \n-    for part in ccx.tcx().def_path(def_id) {\n+    // foo::bar::ItemName::\n+    for part in ccx.tcx().def_path(def_id).data {\n         output.push_str(&format!(\"{}[{}]::\",\n                         part.data.as_interned_str(),\n                         part.disambiguator));\n     }\n \n+    // remove final \"::\"\n     output.pop();\n     output.pop();\n }"}]}