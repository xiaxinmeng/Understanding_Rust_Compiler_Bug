{"sha": "4cd2e6f39a469206671d93b6d2f8f581db0aba41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDJlNmYzOWE0NjkyMDY2NzFkOTNiNmQyZjhmNTgxZGIwYWJhNDE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T02:26:36Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T02:26:36Z"}, "message": "Generalize rewrite_assign_rhs()", "tree": {"sha": "f119e92729654f7357eec1e028c09817f90b0b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f119e92729654f7357eec1e028c09817f90b0b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd2e6f39a469206671d93b6d2f8f581db0aba41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd2e6f39a469206671d93b6d2f8f581db0aba41", "html_url": "https://github.com/rust-lang/rust/commit/4cd2e6f39a469206671d93b6d2f8f581db0aba41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd2e6f39a469206671d93b6d2f8f581db0aba41/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b6855d9d1159d9a606c6bc5fe21f0aeb20df69", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b6855d9d1159d9a606c6bc5fe21f0aeb20df69", "html_url": "https://github.com/rust-lang/rust/commit/37b6855d9d1159d9a606c6bc5fe21f0aeb20df69"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "46e7e500f2272a2561db5c7a881ac61cacef03b9", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cd2e6f39a469206671d93b6d2f8f581db0aba41/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd2e6f39a469206671d93b6d2f8f581db0aba41/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4cd2e6f39a469206671d93b6d2f8f581db0aba41", "patch": "@@ -2578,10 +2578,10 @@ fn rewrite_assignment(\n \n // The left hand side must contain everything up to, and including, the\n // assignment operator.\n-pub fn rewrite_assign_rhs<S: Into<String>>(\n+pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     context: &RewriteContext,\n     lhs: S,\n-    ex: &ast::Expr,\n+    ex: &R,\n     shape: Shape,\n ) -> Option<String> {\n     let lhs = lhs.into();\n@@ -2596,9 +2596,9 @@ pub fn rewrite_assign_rhs<S: Into<String>>(\n     Some(lhs + &rhs)\n }\n \n-fn choose_rhs(\n+fn choose_rhs<R: Rewrite>(\n     context: &RewriteContext,\n-    expr: &ast::Expr,\n+    expr: &R,\n     shape: Shape,\n     orig_rhs: Option<String>,\n ) -> Option<String> {"}, {"sha": "e0bf02abe65afca9b6fa2fed25e41f3b1a3c07d3", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cd2e6f39a469206671d93b6d2f8f581db0aba41/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd2e6f39a469206671d93b6d2f8f581db0aba41/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4cd2e6f39a469206671d93b6d2f8f581db0aba41", "patch": "@@ -111,7 +111,7 @@ impl Rewrite for ast::Local {\n             // 1 = trailing semicolon;\n             let nested_shape = shape.sub_width(1)?;\n \n-            result = rewrite_assign_rhs(context, result, ex, nested_shape)?;\n+            result = rewrite_assign_rhs(context, result, &**ex, nested_shape)?;\n         }\n \n         result.push(';');\n@@ -550,7 +550,7 @@ impl<'a> FmtVisitor<'a> {\n             ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {\n                 let lhs = format!(\"{} =\", field.node.name);\n                 // 1 = ','\n-                rewrite_assign_rhs(&context, lhs, expr, shape.sub_width(1)?)?\n+                rewrite_assign_rhs(&context, lhs, &**expr, shape.sub_width(1)?)?\n             } else {\n                 field.node.name.to_string()\n             },\n@@ -1593,7 +1593,7 @@ fn rewrite_static(\n         rewrite_assign_rhs(\n             context,\n             lhs,\n-            expr,\n+            &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n         ).and_then(|res| {\n             recover_comment_removed(res, static_parts.span, context)"}]}