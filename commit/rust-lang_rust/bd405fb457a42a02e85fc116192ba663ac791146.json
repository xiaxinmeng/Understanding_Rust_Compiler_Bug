{"sha": "bd405fb457a42a02e85fc116192ba663ac791146", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDA1ZmI0NTdhNDJhMDJlODVmYzExNjE5MmJhNjYzYWM3OTExNDY=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-11-22T19:03:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-25T00:21:13Z"}, "message": "std: math now declares libm dependencies as pure", "tree": {"sha": "d77d65cb2ea9021efc2c2d1bf02ed8f196549bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77d65cb2ea9021efc2c2d1bf02ed8f196549bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd405fb457a42a02e85fc116192ba663ac791146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd405fb457a42a02e85fc116192ba663ac791146", "html_url": "https://github.com/rust-lang/rust/commit/bd405fb457a42a02e85fc116192ba663ac791146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd405fb457a42a02e85fc116192ba663ac791146/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9be62b02eccd177db2311c337c7b469cd19e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9be62b02eccd177db2311c337c7b469cd19e62", "html_url": "https://github.com/rust-lang/rust/commit/9c9be62b02eccd177db2311c337c7b469cd19e62"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "060d0b1cbb341d2118bf0569c16ef7a2576ae334", "filename": "src/lib/math.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/bd405fb457a42a02e85fc116192ba663ac791146/src%2Flib%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd405fb457a42a02e85fc116192ba663ac791146/src%2Flib%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmath.rs?ref=bd405fb457a42a02e85fc116192ba663ac791146", "patch": "@@ -24,26 +24,26 @@ native mod f64 {\n \n     // Alpabetically sorted by link_name\n \n-    fn acos(n: f64) -> f64;\n-    fn asin(n: f64) -> f64;\n-    fn atan(n: f64) -> f64;\n-    fn atan2(a: f64, b: f64) -> f64;\n-    fn ceil(n: f64) -> f64;\n-    fn cos(n: f64) -> f64;\n-    fn cosh(n: f64) -> f64;\n-    fn exp(n: f64) -> f64;\n-    #[link_name=\"fabs\"] fn abs(n: f64) -> f64; \n-    fn floor(n: f64) -> f64;\n-    #[link_name=\"log\"] fn ln(n: f64) -> f64;\n-    #[link_name=\"log1p\"] fn ln1p(n: f64) -> f64;\n-    fn log10(n: f64) -> f64;\n-    fn log2(n: f64) -> f64;\n-    fn pow(n: f64, e: f64) -> f64;\n-    fn sin(n: f64) -> f64;\n-    fn sinh(n: f64) -> f64;\n-    fn sqrt(n: f64) -> f64;\n-    fn tan(n: f64) -> f64;\n-    fn tanh(n: f64) -> f64;\n+    pure fn acos(n: f64) -> f64;\n+    pure fn asin(n: f64) -> f64;\n+    pure fn atan(n: f64) -> f64;\n+    pure fn atan2(a: f64, b: f64) -> f64;\n+    pure fn ceil(n: f64) -> f64;\n+    pure fn cos(n: f64) -> f64;\n+    pure fn cosh(n: f64) -> f64;\n+    pure fn exp(n: f64) -> f64;\n+    #[link_name=\"fabs\"] pure fn abs(n: f64) -> f64;\n+    pure fn floor(n: f64) -> f64;\n+    #[link_name=\"log\"] pure fn ln(n: f64) -> f64;\n+    #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n+    pure fn log10(n: f64) -> f64;\n+    pure fn log2(n: f64) -> f64;\n+    pure fn pow(n: f64, e: f64) -> f64;\n+    pure fn sin(n: f64) -> f64;\n+    pure fn sinh(n: f64) -> f64;\n+    pure fn sqrt(n: f64) -> f64;\n+    pure fn tan(n: f64) -> f64;\n+    pure fn tanh(n: f64) -> f64;\n }\n \n #[link_name = \"m\"]\n@@ -52,26 +52,26 @@ native mod f32 {\n \n     // Alpabetically sorted by link_name\n \n-    #[link_name=\"acosf\"] fn acos(n: f32) -> f32;\n-    #[link_name=\"asinf\"] fn asin(n: f32) -> f32;\n-    #[link_name=\"atanf\"] fn atan(n: f32) -> f32;\n-    #[link_name=\"atan2f\"] fn atan2(a: f32, b: f32) -> f32;\n-    #[link_name=\"ceilf\"] fn ceil(n: f32) -> f32;\n-    #[link_name=\"cosf\"] fn cos(n: f32) -> f32;\n-    #[link_name=\"coshf\"] fn cosh(n: f32) -> f32;\n-    #[link_name=\"expf\"] fn exp(n: f32) -> f32;\n-    #[link_name=\"fabsf\"] fn abs(n: f32) -> f32;\n-    #[link_name=\"floorf\"] fn floor(n: f32) -> f32;\n-    #[link_name=\"powf\"] fn pow(n: f32, e: f32) -> f32;\n-    #[link_name=\"sinf\"] fn sin(n: f32) -> f32;\n-    #[link_name=\"sinhf\"] fn sinh(n: f32) -> f32;\n-    #[link_name=\"sqrtf\"] fn sqrt(n: f32) -> f32;\n-    #[link_name=\"tanf\"] fn tan(n: f32) -> f32;\n-    #[link_name=\"tanhf\"] fn tanh(n: f32) -> f32;\n-    #[link_name=\"logf\"] fn ln(n: f32) -> f32;\n-    #[link_name=\"log1p\"] fn ln1p(n: f64) -> f64;\n-    #[link_name=\"log2f\"] fn log2(n: f32) -> f32;\n-    #[link_name=\"log10f\"] fn log10(n: f32) -> f32;\n+    #[link_name=\"acosf\"] pure fn acos(n: f32) -> f32;\n+    #[link_name=\"asinf\"] pure fn asin(n: f32) -> f32;\n+    #[link_name=\"atanf\"] pure fn atan(n: f32) -> f32;\n+    #[link_name=\"atan2f\"] pure fn atan2(a: f32, b: f32) -> f32;\n+    #[link_name=\"ceilf\"] pure fn ceil(n: f32) -> f32;\n+    #[link_name=\"cosf\"] pure fn cos(n: f32) -> f32;\n+    #[link_name=\"coshf\"] pure fn cosh(n: f32) -> f32;\n+    #[link_name=\"expf\"] pure fn exp(n: f32) -> f32;\n+    #[link_name=\"fabsf\"] pure fn abs(n: f32) -> f32;\n+    #[link_name=\"floorf\"] pure fn floor(n: f32) -> f32;\n+    #[link_name=\"powf\"] pure fn pow(n: f32, e: f32) -> f32;\n+    #[link_name=\"sinf\"] pure fn sin(n: f32) -> f32;\n+    #[link_name=\"sinhf\"] pure fn sinh(n: f32) -> f32;\n+    #[link_name=\"sqrtf\"] pure fn sqrt(n: f32) -> f32;\n+    #[link_name=\"tanf\"] pure fn tan(n: f32) -> f32;\n+    #[link_name=\"tanhf\"] pure fn tanh(n: f32) -> f32;\n+    #[link_name=\"logf\"] pure fn ln(n: f32) -> f32;\n+    #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n+    #[link_name=\"log2f\"] pure fn log2(n: f32) -> f32;\n+    #[link_name=\"log10f\"] pure fn log10(n: f32) -> f32;\n }\n \n \n@@ -189,23 +189,23 @@ Function: acos\n Returns the arccosine of an angle (measured in rad)\n */\n pure fn acos(x: float) -> float\n-    { unsafe { c_float::acos(x as c_float) as float } }\n+    { c_float::acos(x as c_float) as float }\n \n /*\n Function: asin\n \n Returns the arcsine of an angle (measured in rad)\n */\n pure fn asin(x: float) -> float\n-    { unsafe { c_float::asin(x as c_float) as float } }\n+    { c_float::asin(x as c_float) as float }\n \n /*\n Function: atan\n \n Returns the arctangents of an angle (measured in rad)\n */\n pure fn atan(x: float) -> float\n-    { unsafe { c_float::atan(x as c_float) as float } }\n+    { c_float::atan(x as c_float) as float }\n \n \n /*\n@@ -214,7 +214,7 @@ Function: atan2\n Returns the arctangent of an angle (measured in rad)\n */\n pure fn atan2(y: float, x: float) -> float\n-    { unsafe { c_float::atan2(y as c_float, x as c_float) as float } }\n+    { c_float::atan2(y as c_float, x as c_float) as float }\n \n /*\n Function: ceil\n@@ -224,15 +224,15 @@ Returns:\n The smallest integral value less than or equal to `n`\n */\n pure fn ceil(n: float) -> float\n-    { unsafe { c_float::ceil(n as c_float) as float } }\n+    { c_float::ceil(n as c_float) as float }\n \n /*\n Function: cos\n \n Returns the cosine of an angle `x` (measured in rad)\n */\n pure fn cos(x: float) -> float\n-    { unsafe { c_float::cos(x as c_float) as float } }\n+    { c_float::cos(x as c_float) as float }\n \n /*\n Function: cosh\n@@ -241,7 +241,7 @@ Returns the hyperbolic cosine of `x`\n \n */\n pure fn cosh(x: float) -> float\n-    { unsafe { c_float::cosh(x as c_float) as float } }\n+    { c_float::cosh(x as c_float) as float }\n \n \n /*\n@@ -252,7 +252,7 @@ Returns:\n e to the power of `n*\n */\n pure fn exp(n: float) -> float\n-    { unsafe { c_float::exp(n as c_float) as float } }\n+    { c_float::exp(n as c_float) as float }\n \n /*\n Function: abs\n@@ -263,7 +263,7 @@ The absolute value of  `n`\n \n */\n pure fn abs(n: float) -> float\n-    { unsafe { c_float::abs(n as c_float) as float } }\n+    { c_float::abs(n as c_float) as float }\n \n /*\n Function: floor\n@@ -273,15 +273,15 @@ Returns:\n The largest integral value less than or equal to `n`\n */\n pure fn floor(n: float) -> float\n-    { unsafe { c_float::floor(n as c_float) as float } }\n+    { c_float::floor(n as c_float) as float }\n \n /*\n Function: ln\n \n Returns the natural logaritm of `n`\n */\n pure fn ln(n: float) -> float\n-    { unsafe { c_float::ln(n as c_float) as float } }\n+    { c_float::ln(n as c_float) as float }\n \n /*\n Function: ln1p\n@@ -290,29 +290,29 @@ Returns the natural logarithm of `1+n` accurately,\n even for very small values of `n`\n */\n pure fn ln1p(n: float) -> float\n-    { unsafe { c_float::ln1p(n as c_float) as float } }\n+    { c_float::ln1p(n as c_float) as float }\n \n /*\n Function: log10\n \n Returns the logarithm to base 10 of `n`\n */\n pure fn log10(n: float) -> float\n-    { unsafe { c_float::log10(n as c_float) as float } }\n+    { c_float::log10(n as c_float) as float }\n \n /*\n Function: log2\n \n Returns the logarithm to base 2 of `n`\n */\n pure fn log2(n: float) -> float\n-    { unsafe { c_float::log2(n as c_float) as float } }\n+    { c_float::log2(n as c_float) as float }\n \n /*\n Function: pow\n */\n pure fn pow(v: float, e: float) -> float\n-    { unsafe { c_float::pow(v as c_float, e as c_float) as float } }\n+    { c_float::pow(v as c_float, e as c_float) as float }\n \n \n /*\n@@ -321,23 +321,23 @@ Function: sin\n Returns the sine of an angle `x` (measured in rad)\n */\n pure fn sin(x: float) -> float\n-    { unsafe { c_float::sin(x as c_float) as float } }\n+    { c_float::sin(x as c_float) as float }\n \n /*\n Function: sinh\n \n Returns the hyperbolic sine of an angle `x` (measured in rad)\n */\n pure fn sinh(x: float) -> float\n-    { unsafe { c_float::sinh(x as c_float) as float } }\n+    { c_float::sinh(x as c_float) as float }\n \n /*\n Function: sqrt\n \n Returns the square root of `x`\n */\n pure fn sqrt(x: float) -> float\n-    { unsafe { c_float::sqrt(x as c_float) as float } }\n+    { c_float::sqrt(x as c_float) as float }\n \n /*\n Function: tan\n@@ -346,7 +346,7 @@ Returns the tangent of an angle `x` (measured in rad)\n \n */\n pure fn tan(x: float) -> float\n-    { unsafe { c_float::tan(x as c_float) as float } }\n+    { c_float::tan(x as c_float) as float }\n \n /*\n Function: tanh\n@@ -355,7 +355,7 @@ Returns the hyperbolic tangent of an angle `x` (measured in rad)\n \n */\n pure fn tanh(x: float) -> float\n-    { unsafe { c_float::tanh(x as c_float) as float } }\n+    { c_float::tanh(x as c_float) as float }\n \n \n "}]}