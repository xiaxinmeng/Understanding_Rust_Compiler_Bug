{"sha": "2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTlmNzE4OTc4YjIwZThjZmZiNjY5ZGM2MWI2M2FkN2Q1ZTgyY2Q=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-06-11T13:24:14Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-06-12T14:32:39Z"}, "message": "fix: support existential type", "tree": {"sha": "0523b0929ac4703d1648cb0eac1fc4ea14a8b2d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0523b0929ac4703d1648cb0eac1fc4ea14a8b2d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "html_url": "https://github.com/rust-lang/rust/commit/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5f9f0560fa662e770b607f05ec4881e4d011c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5f9f0560fa662e770b607f05ec4881e4d011c5", "html_url": "https://github.com/rust-lang/rust/commit/3f5f9f0560fa662e770b607f05ec4881e4d011c5"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "e85147e9e284510b6a67cdace4d43a8613a23ee5", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -107,6 +107,10 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         p.bump_remap(T![default]);\n         has_mods = true;\n     }\n+    if p.at(IDENT) && p.at_contextual_kw(\"existential\") && p.nth(1) == T![type] {\n+        p.bump_remap(T![existential]);\n+        has_mods = true;\n+    }\n \n     // items\n     match p.current() {\n@@ -165,12 +169,17 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n             traits::impl_block(p);\n             m.complete(p, IMPL_BLOCK);\n         }\n+        // test existential_type\n+        // existential type Foo: Fn() -> usize;\n+        T![type] => {\n+            type_def(p, m);\n+        }\n         _ => {\n             if !has_visibility && !has_mods {\n                 return Err(m);\n             } else {\n                 if has_mods {\n-                    p.error(\"expected fn, trait or impl\");\n+                    p.error(\"expected existential, fn, trait or impl\");\n                 } else {\n                     p.error(\"expected an item\");\n                 }\n@@ -187,7 +196,9 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         // test extern_crate\n         // extern crate foo;\n         T![extern] if la == T![crate] => extern_crate_item(p, m),\n-        T![type] => type_def(p, m),\n+        T![type] => {\n+            type_def(p, m);\n+        }\n         T![mod] => mod_item(p, m),\n         T![struct] => {\n             // test struct_items\n@@ -308,7 +319,6 @@ fn type_def(p: &mut Parser, m: Marker) {\n     // test type_item_where_clause\n     // type Foo where Foo: Copy = ();\n     type_params::opt_where_clause(p);\n-\n     if p.eat(T![=]) {\n         types::type_(p);\n     }"}, {"sha": "036415eacdef1fe8d15a677c52f34c76b9d8b54f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -106,6 +106,7 @@ pub enum SyntaxKind {\n     TRY_KW,\n     AUTO_KW,\n     DEFAULT_KW,\n+    EXISTENTIAL_KW,\n     UNION_KW,\n     INT_NUMBER,\n     FLOAT_NUMBER,\n@@ -336,6 +337,7 @@ macro_rules! T {\n     (try) => { $crate::SyntaxKind::TRY_KW };\n     (auto) => { $crate::SyntaxKind::AUTO_KW };\n     (default) => { $crate::SyntaxKind::DEFAULT_KW };\n+    (existential) => { $crate::SyntaxKind::EXISTENTIAL_KW };\n     (union) => { $crate::SyntaxKind::UNION_KW };\n }\n \n@@ -394,6 +396,7 @@ impl SyntaxKind {\n             | TRY_KW\n             | AUTO_KW\n             | DEFAULT_KW\n+            | EXISTENTIAL_KW\n             | UNION_KW\n                 => true,\n             _ => false\n@@ -566,6 +569,7 @@ impl SyntaxKind {\n             TRY_KW => &SyntaxInfo { name: \"TRY_KW\" },\n             AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n             DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n+            EXISTENTIAL_KW => &SyntaxInfo { name: \"EXISTENTIAL_KW\" },\n             UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n             INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n             FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },"}, {"sha": "eab55058b9e0374fb8e90d53ee101d26bd3d69d9", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -100,6 +100,7 @@ Grammar(\n     contextual_keywords: [\n         \"auto\",\n         \"default\",\n+        \"existential\",\n         \"union\",\n     ],\n     literals: ["}, {"sha": "381147dc0a521ad9e30857a7a719014bfbcae758", "filename": "crates/ra_syntax/tests/data/parser/err/0011_extern_struct.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -10,4 +10,4 @@ SOURCE_FILE@[0; 19)\n       IDENT@[14; 17) \"Foo\"\n     SEMI@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n-error 6: expected fn, trait or impl\n+error 6: expected existential, fn, trait or impl"}, {"sha": "b1ef210d3f21a13604942d6e1555891f37dab1b1", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0010_wrong_order_fns.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -35,5 +35,5 @@ SOURCE_FILE@[0; 50)\n       L_CURLY@[47; 48) \"{\"\n       R_CURLY@[48; 49) \"}\"\n   WHITESPACE@[49; 50) \"\\n\"\n-error 5: expected fn, trait or impl\n-error 31: expected fn, trait or impl\n+error 5: expected existential, fn, trait or impl\n+error 31: expected existential, fn, trait or impl"}, {"sha": "23baf7145cccbad7d4c7d38ba81688a5ee4a78c5", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0131_existential_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0131_existential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0131_existential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0131_existential_type.rs?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -0,0 +1 @@\n+existential type Foo: Fn() -> usize;"}, {"sha": "6bfac985a9b62ab35afb861f7c7f148fa26bac51", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0131_existential_type.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0131_existential_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9f718978b20e8cffb669dc61b63ad7d5e82cd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0131_existential_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0131_existential_type.txt?ref=2ca9f718978b20e8cffb669dc61b63ad7d5e82cd", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE@[0; 37)\n+  TYPE_ALIAS_DEF@[0; 36)\n+    EXISTENTIAL_KW@[0; 11) \"existential\"\n+    WHITESPACE@[11; 12) \" \"\n+    TYPE_KW@[12; 16) \"type\"\n+    WHITESPACE@[16; 17) \" \"\n+    NAME@[17; 20)\n+      IDENT@[17; 20) \"Foo\"\n+    COLON@[20; 21) \":\"\n+    WHITESPACE@[21; 22) \" \"\n+    TYPE_BOUND_LIST@[22; 35)\n+      TYPE_BOUND@[22; 35)\n+        PATH_TYPE@[22; 35)\n+          PATH@[22; 35)\n+            PATH_SEGMENT@[22; 35)\n+              NAME_REF@[22; 24)\n+                IDENT@[22; 24) \"Fn\"\n+              PARAM_LIST@[24; 26)\n+                L_PAREN@[24; 25) \"(\"\n+                R_PAREN@[25; 26) \")\"\n+              WHITESPACE@[26; 27) \" \"\n+              RET_TYPE@[27; 35)\n+                THIN_ARROW@[27; 29) \"->\"\n+                WHITESPACE@[29; 30) \" \"\n+                PATH_TYPE@[30; 35)\n+                  PATH@[30; 35)\n+                    PATH_SEGMENT@[30; 35)\n+                      NAME_REF@[30; 35)\n+                        IDENT@[30; 35) \"usize\"\n+    SEMI@[35; 36) \";\"\n+  WHITESPACE@[36; 37) \"\\n\""}]}