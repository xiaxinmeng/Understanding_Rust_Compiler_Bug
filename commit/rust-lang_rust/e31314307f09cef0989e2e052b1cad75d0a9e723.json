{"sha": "e31314307f09cef0989e2e052b1cad75d0a9e723", "node_id": "C_kwDOAAsO6NoAKGUzMTMxNDMwN2YwOWNlZjA5ODllMmUwNTJiMWNhZDc1ZDBhOWU3MjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-29T09:17:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-29T09:17:08Z"}, "message": "Rollup merge of #92075 - jyn514:resolve-cleanup, r=camelid\n\nrustdoc: Only special case struct fields for intra-doc links, not enum variants\n\nVariants are already handled by `resolve_str_path_error`, rustdoc doesn't need to consider them separately. Thanks `@camelid` for catching this!\n\nEventually I'd like to fix the \"combine this with `variant_field`\" comment but that needs `resolve_field` to take a `ty_res` parameter to avoid it being super hacky (cc https://github.com/rust-lang/rust/issues/83761#issuecomment-813026026).\n\nr? `@camelid`", "tree": {"sha": "98748a05363ae1d406b59ac639ca3d07af8e9a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98748a05363ae1d406b59ac639ca3d07af8e9a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31314307f09cef0989e2e052b1cad75d0a9e723", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhzCeUCRBK7hj4Ov3rIwAAxc0IABN9QEFRajQDFK+SWryMWQ9C\nd2K+0oC0Oyt92O71zDuMd2A7gcQEe6dU7J91eFtctkqjwgxDPsQi+CKw32QVXtnB\nr+l8uSIwX93sa6n0vCFXOnS8nWD5uv45qilP0RIAjx0mxFvJIVQtaEvdNmsPArmF\n/B6h4B378BubTc5b4FdUCTx/WK01smuGH16gUDGyEKFs08Ih9LuVDLmRGZs8pCFp\n+sRytve3yMMaDTxFYym6q1Z4K4diJfizWnTvtTHYp7uJxFdv5CqFBXQ35QRjH7eo\nVocuJJ2abZbRgzD9sfpllJNpulNvIoXnkgop4UyX33uLz3xhEbcruLr2hRrqEMk=\n=keGO\n-----END PGP SIGNATURE-----\n", "payload": "tree 98748a05363ae1d406b59ac639ca3d07af8e9a02\nparent b70cc6422c141191aeb33f5ab6faba992118812b\nparent 09104adda4603be1aa734bd32c69dfdac006aadf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640769428 +0100\ncommitter GitHub <noreply@github.com> 1640769428 +0100\n\nRollup merge of #92075 - jyn514:resolve-cleanup, r=camelid\n\nrustdoc: Only special case struct fields for intra-doc links, not enum variants\n\nVariants are already handled by `resolve_str_path_error`, rustdoc doesn't need to consider them separately. Thanks `@camelid` for catching this!\n\nEventually I'd like to fix the \"combine this with `variant_field`\" comment but that needs `resolve_field` to take a `ty_res` parameter to avoid it being super hacky (cc https://github.com/rust-lang/rust/issues/83761#issuecomment-813026026).\n\nr? `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31314307f09cef0989e2e052b1cad75d0a9e723", "html_url": "https://github.com/rust-lang/rust/commit/e31314307f09cef0989e2e052b1cad75d0a9e723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31314307f09cef0989e2e052b1cad75d0a9e723/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70cc6422c141191aeb33f5ab6faba992118812b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70cc6422c141191aeb33f5ab6faba992118812b", "html_url": "https://github.com/rust-lang/rust/commit/b70cc6422c141191aeb33f5ab6faba992118812b"}, {"sha": "09104adda4603be1aa734bd32c69dfdac006aadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/09104adda4603be1aa734bd32c69dfdac006aadf", "html_url": "https://github.com/rust-lang/rust/commit/09104adda4603be1aa734bd32c69dfdac006aadf"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "10ef92e5f400f2817e576ee32b8606d824c2e9e0", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e31314307f09cef0989e2e052b1cad75d0a9e723/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31314307f09cef0989e2e052b1cad75d0a9e723/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e31314307f09cef0989e2e052b1cad75d0a9e723", "patch": "@@ -684,27 +684,36 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 if ns != Namespace::ValueNS {\n                     return None;\n                 }\n-                debug!(\"looking for variants or fields named {} for {:?}\", item_name, did);\n+                debug!(\"looking for fields named {} for {:?}\", item_name, did);\n                 // FIXME: this doesn't really belong in `associated_item` (maybe `variant_field` is better?)\n-                // NOTE: it's different from variant_field because it resolves fields and variants,\n+                // NOTE: it's different from variant_field because it only resolves struct fields,\n                 // not variant fields (2 path segments, not 3).\n+                //\n+                // We need to handle struct (and union) fields in this code because\n+                // syntactically their paths are identical to associated item paths:\n+                // `module::Type::field` and `module::Type::Assoc`.\n+                //\n+                // On the other hand, variant fields can't be mistaken for associated\n+                // items because they look like this: `module::Type::Variant::field`.\n+                //\n+                // Variants themselves don't need to be handled here, even though\n+                // they also look like associated items (`module::Type::Variant`),\n+                // because they are real Rust syntax (unlike the intra-doc links\n+                // field syntax) and are handled by the compiler's resolver.\n                 let def = match tcx.type_of(did).kind() {\n-                    ty::Adt(def, _) => def,\n+                    ty::Adt(def, _) if !def.is_enum() => def,\n                     _ => return None,\n                 };\n-                let field = if def.is_enum() {\n-                    def.all_fields().find(|item| item.ident.name == item_name)\n-                } else {\n-                    def.non_enum_variant().fields.iter().find(|item| item.ident.name == item_name)\n-                }?;\n-                let kind = if def.is_enum() { DefKind::Variant } else { DefKind::Field };\n-                let fragment = if def.is_enum() {\n-                    // FIXME: how can the field be a variant?\n-                    UrlFragment::Variant(field.ident.name)\n-                } else {\n-                    UrlFragment::StructField(field.ident.name)\n-                };\n-                Some((root_res, fragment, Some((kind, field.did))))\n+                let field = def\n+                    .non_enum_variant()\n+                    .fields\n+                    .iter()\n+                    .find(|item| item.ident.name == item_name)?;\n+                Some((\n+                    root_res,\n+                    UrlFragment::StructField(field.ident.name),\n+                    Some((DefKind::Field, field.did)),\n+                ))\n             }\n             Res::Def(DefKind::Trait, did) => tcx\n                 .associated_items(did)"}]}