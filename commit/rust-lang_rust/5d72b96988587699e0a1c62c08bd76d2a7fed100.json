{"sha": "5d72b96988587699e0a1c62c08bd76d2a7fed100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzJiOTY5ODg1ODc2OTllMGExYzYyYzA4YmQ3NmQyYTdmZWQxMDA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-24T16:25:41Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-24T19:54:04Z"}, "message": "Implement support for type aliases", "tree": {"sha": "cfc5c55e0d2ba5fcea6b508c20e23cb43b7f9956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfc5c55e0d2ba5fcea6b508c20e23cb43b7f9956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d72b96988587699e0a1c62c08bd76d2a7fed100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d72b96988587699e0a1c62c08bd76d2a7fed100", "html_url": "https://github.com/rust-lang/rust/commit/5d72b96988587699e0a1c62c08bd76d2a7fed100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d72b96988587699e0a1c62c08bd76d2a7fed100/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a684099e9aa3482b408002030fafe1dcd0fa9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a684099e9aa3482b408002030fafe1dcd0fa9a9", "html_url": "https://github.com/rust-lang/rust/commit/5a684099e9aa3482b408002030fafe1dcd0fa9a9"}], "stats": {"total": 113, "additions": 102, "deletions": 11}, "files": [{"sha": "29c08e34b40ed947ef3999bc92eaa9e912965091", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -626,6 +626,23 @@ impl Type {\n         let module_impls = db.impls_in_module(self.module(db));\n         ImplBlock::containing(module_impls, (*self).into())\n     }\n+\n+    pub fn type_ref(self, db: &impl PersistentHirDatabase) -> Arc<TypeRef> {\n+        db.type_alias_ref(self)\n+    }\n+\n+    /// Builds a resolver for the type references in this type alias.\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        // take the outer scope...\n+        let r = self\n+            .impl_block(db)\n+            .map(|ib| ib.resolver(db))\n+            .unwrap_or_else(|| self.module(db).resolver(db));\n+        // ...and add generic params, if present\n+        let p = self.generic_params(db);\n+        let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n+        r\n+    }\n }\n \n impl Docs for Type {"}, {"sha": "b8bd82f0c97b3057869a13a9ad81b78a49392102", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n-    ids::SourceFileItemId, nameres::Namespace\n+    ids::SourceFileItemId, nameres::Namespace, type_ref::TypeRef, code_model_api::Type\n };\n \n #[salsa::query_group(PersistentHirDatabaseStorage)]\n@@ -77,6 +77,9 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n \n     #[salsa::invoke(crate::FnSignature::fn_signature_query)]\n     fn fn_signature(&self, func: Function) -> Arc<FnSignature>;\n+\n+    #[salsa::invoke(crate::type_alias::type_alias_ref_query)]\n+    fn type_alias_ref(&self, typ: Type) -> Arc<TypeRef>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "78fa4952b4b188b0a75a18e9ee156f06a8b7c783", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -29,6 +29,7 @@ mod name;\n mod module_tree;\n mod nameres;\n mod adt;\n+mod type_alias;\n mod type_ref;\n mod ty;\n mod impl_block;"}, {"sha": "29331bea5ad957e6f324add688334f0faf2d09cf", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -477,7 +477,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::Function(_) | TypableDef::Enum(_) => (Ty::Unknown, None),\n+            TypableDef::Type(_) | TypableDef::Function(_) | TypableDef::Enum(_) => {\n+                (Ty::Unknown, None)\n+            }\n         }\n     }\n "}, {"sha": "a11d964c8cbe161b5d760935285a90a6029d856d", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -10,7 +10,7 @@ use std::sync::Arc;\n \n use crate::{\n     Function, Struct, StructField, Enum, EnumVariant, Path, Name,\n-    ModuleDef,\n+    ModuleDef, Type,\n     HirDatabase,\n     type_ref::TypeRef,\n     name::KnownName,\n@@ -109,7 +109,7 @@ impl Ty {\n         };\n         let ty = db.type_for_def(typable, Namespace::Types);\n         let substs = Ty::substs_from_path(db, resolver, path, typable);\n-        ty.apply_substs(substs)\n+        ty.subst(&substs)\n     }\n \n     pub(super) fn substs_from_path_segment(\n@@ -124,6 +124,7 @@ impl Ty {\n             TypableDef::Struct(s) => s.generic_params(db),\n             TypableDef::Enum(e) => e.generic_params(db),\n             TypableDef::EnumVariant(var) => var.parent_enum(db).generic_params(db),\n+            TypableDef::Type(t) => t.generic_params(db),\n         };\n         let parent_param_count = def_generics.count_parent_params();\n         substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n@@ -159,9 +160,10 @@ impl Ty {\n     ) -> Substs {\n         let last = path.segments.last().expect(\"path should have at least one segment\");\n         let segment = match resolved {\n-            TypableDef::Function(_) => last,\n-            TypableDef::Struct(_) => last,\n-            TypableDef::Enum(_) => last,\n+            TypableDef::Function(_)\n+            | TypableDef::Struct(_)\n+            | TypableDef::Enum(_)\n+            | TypableDef::Type(_) => last,\n             TypableDef::EnumVariant(_) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n@@ -194,11 +196,13 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::Struct(s), Namespace::Values) => type_for_struct_constructor(db, s),\n         (TypableDef::Enum(e), Namespace::Types) => type_for_enum(db, e),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n+        (TypableDef::Type(t), Namespace::Types) => type_for_type_alias(db, t),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::Type(_), Namespace::Values) => Ty::Unknown,\n     }\n }\n \n@@ -264,7 +268,7 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) ->\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n     let substs = make_substs(&generics);\n-    let output = type_for_enum(db, def.parent_enum(db)).apply_substs(substs.clone());\n+    let output = type_for_enum(db, def.parent_enum(db)).subst(&substs);\n     let sig = Arc::new(FnSig { input, output });\n     Ty::FnDef { def: def.into(), sig, name, substs }\n }\n@@ -298,14 +302,24 @@ fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Ty {\n     }\n }\n \n+fn type_for_type_alias(db: &impl HirDatabase, t: Type) -> Ty {\n+    let generics = t.generic_params(db);\n+    let resolver = t.resolver(db);\n+    let type_ref = t.type_ref(db);\n+    let substs = make_substs(&generics);\n+    let inner = Ty::from_hir(db, &resolver, &type_ref);\n+    inner.subst(&substs)\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum TypableDef {\n     Function(Function),\n     Struct(Struct),\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n+    Type(Type),\n }\n-impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant);\n+impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, Type);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n@@ -314,11 +328,11 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::Struct(s) => s.into(),\n             ModuleDef::Enum(e) => e.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n+            ModuleDef::Type(t) => t.into(),\n             ModuleDef::Const(_)\n             | ModuleDef::Static(_)\n             | ModuleDef::Module(_)\n-            | ModuleDef::Trait(_)\n-            | ModuleDef::Type(_) => return None,\n+            | ModuleDef::Trait(_) => return None,\n         };\n         Some(res)\n     }"}, {"sha": "241c08353a01afb6cfc19579e534dc0dd0b102c6", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_type_alias.snap", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_alias.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_alias.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_alias.snap?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -0,0 +1,23 @@\n+---\n+created: \"2019-02-24T16:13:47.561870283Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[117; 118) 'x': A<u32, i128>\n+[125; 126) 'y': A<&str, u128>\n+[139; 140) 'z': A<u8, i8>\n+[155; 212) '{     ...z.y; }': ()\n+[161; 162) 'x': A<u32, i128>\n+[161; 164) 'x.x': u32\n+[170; 171) 'x': A<u32, i128>\n+[170; 173) 'x.y': i128\n+[179; 180) 'y': A<&str, u128>\n+[179; 182) 'y.x': &str\n+[188; 189) 'y': A<&str, u128>\n+[188; 191) 'y.y': u128\n+[197; 198) 'z': A<u8, i8>\n+[197; 200) 'z.x': u8\n+[206; 207) 'z': A<u8, i8>\n+[206; 209) 'z.y': i8\n+"}, {"sha": "490c087f9305394cc9cc5c5c24b98e5ca86431c3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -740,6 +740,27 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_type_alias() {\n+    check_inference(\n+        \"infer_type_alias\",\n+        r#\"\n+struct A<X, Y> { x: X, y: Y };\n+type Foo = A<u32, i128>;\n+type Bar<T> = A<T, u128>;\n+type Baz<U, V> = A<V, U>;\n+fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n+    x.x;\n+    x.y;\n+    y.x;\n+    y.y;\n+    z.x;\n+    z.y;\n+}\n+\"#,\n+    )\n+}\n+\n #[test]\n fn no_panic_on_field_of_enum() {\n     check_inference("}, {"sha": "ab948170898356e5286ce523f772b926e153ec8b", "filename": "crates/ra_hir/src/type_alias.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72b96988587699e0a1c62c08bd76d2a7fed100/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=5d72b96988587699e0a1c62c08bd76d2a7fed100", "patch": "@@ -0,0 +1,10 @@\n+//! HIR for type aliases (i.e. the `type` keyword).\n+\n+use std::sync::Arc;\n+\n+use crate::{code_model_api::Type, db::PersistentHirDatabase, type_ref::TypeRef};\n+\n+pub(crate) fn type_alias_ref_query(db: &impl PersistentHirDatabase, typ: Type) -> Arc<TypeRef> {\n+    let (_, node) = typ.source(db);\n+    Arc::new(TypeRef::from_ast_opt(node.type_ref()))\n+}"}]}