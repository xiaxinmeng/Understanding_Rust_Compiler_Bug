{"sha": "d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZTkxYjViNjhmNGIxNjNhYjFjMDQxZTcyMDI4ZjMzYTllM2UwNzU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2019-01-17T07:22:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-17T07:22:36Z"}, "message": "Merge pull request #3284 from scampi/issue-3270\n\nrecognize strings inside comments in order to avoid indenting them", "tree": {"sha": "30e00c41758857082b872560949b1a73ee18ef02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e00c41758857082b872560949b1a73ee18ef02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQC08CRBK7hj4Ov3rIwAAdHIIAG4lj/hOEe35Ynoki+GaxaKA\not6XMjZcKI2ic69uVwVnL28lftdNvCKdSpVMcP9Ri+WFjpjydU7Av+IrTa6sbd1M\nNpC63rc9Rudk1ZkM/9GSF/9JFmNQ7xMG196oGapFUfHYWAB8i1GReSm7ExZ5hLv3\nrQ9gfHJJWn5eMptk7x0LctRruQR7lb4sjRa362icyhoFl58cTV1IZ1tMMI7ivcNq\nHiQfAckrXvp5Jt8fMK9VR318NnbPhMRBlPe7UOfBZuu3prKa3EyhbTjiKR2Zbu2g\nquCgesnlJcmWwq58xn8gmqMGVNqHdWA0wjlINwfgdkHrhq/A87Hh52HeXMQ8ixQ=\n=Rt8X\n-----END PGP SIGNATURE-----\n", "payload": "tree 30e00c41758857082b872560949b1a73ee18ef02\nparent a01990c4d0f6415a1e4824cf109125effacaaa81\nparent 083a20fb1aee4daef685735652ae21e9b370350d\nauthor Nick Cameron <nrc@ncameron.org> 1547709756 +1300\ncommitter GitHub <noreply@github.com> 1547709756 +1300\n\nMerge pull request #3284 from scampi/issue-3270\n\nrecognize strings inside comments in order to avoid indenting them"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "html_url": "https://github.com/rust-lang/rust/commit/d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01990c4d0f6415a1e4824cf109125effacaaa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01990c4d0f6415a1e4824cf109125effacaaa81", "html_url": "https://github.com/rust-lang/rust/commit/a01990c4d0f6415a1e4824cf109125effacaaa81"}, {"sha": "083a20fb1aee4daef685735652ae21e9b370350d", "url": "https://api.github.com/repos/rust-lang/rust/commits/083a20fb1aee4daef685735652ae21e9b370350d", "html_url": "https://github.com/rust-lang/rust/commit/083a20fb1aee4daef685735652ae21e9b370350d"}], "stats": {"total": 188, "additions": 150, "deletions": 38}, "files": [{"sha": "4ceb2595e7037e62145e39e733587d9442b75cd4", "filename": "src/comment.rs", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -1047,21 +1047,28 @@ impl RichChar for (usize, char) {\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n enum CharClassesStatus {\n     Normal,\n+    /// Character is within a string\n     LitString,\n     LitStringEscape,\n+    /// Character is within a raw string\n     LitRawString(u32),\n     RawStringPrefix(u32),\n     RawStringSuffix(u32),\n     LitChar,\n     LitCharEscape,\n-    // The u32 is the nesting deepness of the comment\n+    /// Character inside a block comment, with the integer indicating the nesting deepness of the\n+    /// comment\n     BlockComment(u32),\n-    // Status when the '/' has been consumed, but not yet the '*', deepness is\n-    // the new deepness (after the comment opening).\n+    /// Character inside a block-commented string, with the integer indicating the nesting deepness\n+    /// of the comment\n+    StringInBlockComment(u32),\n+    /// Status when the '/' has been consumed, but not yet the '*', deepness is\n+    /// the new deepness (after the comment opening).\n     BlockCommentOpening(u32),\n-    // Status when the '*' has been consumed, but not yet the '/', deepness is\n-    // the new deepness (after the comment closing).\n+    /// Status when the '*' has been consumed, but not yet the '/', deepness is\n+    /// the new deepness (after the comment closing).\n     BlockCommentClosing(u32),\n+    /// Character is within a line comment\n     LineComment,\n }\n \n@@ -1085,6 +1092,12 @@ pub enum FullCodeCharKind {\n     InComment,\n     /// Last character of a comment, '\\n' for a line comment, '/' for a block comment.\n     EndComment,\n+    /// Start of a mutlitine string inside a comment\n+    StartStringCommented,\n+    /// End of a mutlitine string inside a comment\n+    EndStringCommented,\n+    /// Inside a commented string\n+    InStringCommented,\n     /// Start of a mutlitine string\n     StartString,\n     /// End of a mutlitine string\n@@ -1098,7 +1111,21 @@ impl FullCodeCharKind {\n         match self {\n             FullCodeCharKind::StartComment\n             | FullCodeCharKind::InComment\n-            | FullCodeCharKind::EndComment => true,\n+            | FullCodeCharKind::EndComment\n+            | FullCodeCharKind::StartStringCommented\n+            | FullCodeCharKind::InStringCommented\n+            | FullCodeCharKind::EndStringCommented => true,\n+            _ => false,\n+        }\n+    }\n+\n+    /// Returns true if the character is inside a comment\n+    pub fn inside_comment(self) -> bool {\n+        match self {\n+            FullCodeCharKind::InComment\n+            | FullCodeCharKind::StartStringCommented\n+            | FullCodeCharKind::InStringCommented\n+            | FullCodeCharKind::EndStringCommented => true,\n             _ => false,\n         }\n     }\n@@ -1107,6 +1134,12 @@ impl FullCodeCharKind {\n         self == FullCodeCharKind::InString || self == FullCodeCharKind::StartString\n     }\n \n+    /// Returns true if the character is within a commented string\n+    pub fn is_commented_string(self) -> bool {\n+        self == FullCodeCharKind::InStringCommented\n+            || self == FullCodeCharKind::StartStringCommented\n+    }\n+\n     fn to_codecharkind(self) -> CodeCharKind {\n         if self.is_comment() {\n             CodeCharKind::Comment\n@@ -1250,18 +1283,27 @@ where\n                 },\n                 _ => CharClassesStatus::Normal,\n             },\n+            CharClassesStatus::StringInBlockComment(deepness) => {\n+                char_kind = FullCodeCharKind::InStringCommented;\n+                if chr == '\"' {\n+                    CharClassesStatus::BlockComment(deepness)\n+                } else {\n+                    CharClassesStatus::StringInBlockComment(deepness)\n+                }\n+            }\n             CharClassesStatus::BlockComment(deepness) => {\n                 assert_ne!(deepness, 0);\n-                self.status = match self.base.peek() {\n+                char_kind = FullCodeCharKind::InComment;\n+                match self.base.peek() {\n                     Some(next) if next.get_char() == '/' && chr == '*' => {\n                         CharClassesStatus::BlockCommentClosing(deepness - 1)\n                     }\n                     Some(next) if next.get_char() == '*' && chr == '/' => {\n                         CharClassesStatus::BlockCommentOpening(deepness + 1)\n                     }\n-                    _ => CharClassesStatus::BlockComment(deepness),\n-                };\n-                return Some((FullCodeCharKind::InComment, item));\n+                    _ if chr == '\"' => CharClassesStatus::StringInBlockComment(deepness),\n+                    _ => self.status,\n+                }\n             }\n             CharClassesStatus::BlockCommentOpening(deepness) => {\n                 assert_eq!(chr, '*');\n@@ -1317,26 +1359,33 @@ impl<'a> Iterator for LineClasses<'a> {\n \n         let mut line = String::new();\n \n-        let start_class = match self.base.peek() {\n+        let start_kind = match self.base.peek() {\n             Some((kind, _)) => *kind,\n             None => unreachable!(),\n         };\n \n         while let Some((kind, c)) = self.base.next() {\n+            // needed to set the kind of the ending character on the last line\n+            self.kind = kind;\n             if c == '\\n' {\n-                self.kind = match (start_class, kind) {\n+                self.kind = match (start_kind, kind) {\n                     (FullCodeCharKind::Normal, FullCodeCharKind::InString) => {\n                         FullCodeCharKind::StartString\n                     }\n                     (FullCodeCharKind::InString, FullCodeCharKind::Normal) => {\n                         FullCodeCharKind::EndString\n                     }\n+                    (FullCodeCharKind::InComment, FullCodeCharKind::InStringCommented) => {\n+                        FullCodeCharKind::StartStringCommented\n+                    }\n+                    (FullCodeCharKind::InStringCommented, FullCodeCharKind::InComment) => {\n+                        FullCodeCharKind::EndStringCommented\n+                    }\n                     _ => kind,\n                 };\n                 break;\n-            } else {\n-                line.push(c);\n             }\n+            line.push(c);\n         }\n \n         // Workaround for CRLF newline.\n@@ -1382,7 +1431,12 @@ impl<'a> Iterator for UngroupedCommentCodeSlices<'a> {\n             }\n             FullCodeCharKind::StartComment => {\n                 // Consume the whole comment\n-                while let Some((FullCodeCharKind::InComment, (_, _))) = self.iter.next() {}\n+                loop {\n+                    match self.iter.next() {\n+                        Some((kind, ..)) if kind.inside_comment() => continue,\n+                        _ => break,\n+                    }\n+                }\n             }\n             _ => panic!(),\n         }"}, {"sha": "3c260cae22ee7b1cd92eeb82e2823e1ff0968a86", "filename": "src/utils.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -22,7 +22,7 @@ use syntax::source_map::{BytePos, Span, NO_EXPANSION};\n use syntax_pos::Mark;\n \n use comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n-use config::Config;\n+use config::{Config, Version};\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n \n@@ -527,18 +527,26 @@ pub fn trim_left_preserve_layout(orig: &str, indent: Indent, config: &Config) ->\n                 Some(get_prefix_space_width(config, &line))\n             };\n \n-            let line = if veto_trim || (kind.is_string() && !line.ends_with('\\\\')) {\n-                veto_trim = kind.is_string() && !line.ends_with('\\\\');\n+            let new_veto_trim_value = (kind.is_string()\n+                || (config.version() == Version::Two && kind.is_commented_string()))\n+                && !line.ends_with('\\\\');\n+            let line = if veto_trim || new_veto_trim_value {\n+                veto_trim = new_veto_trim_value;\n                 trimmed = false;\n                 line\n             } else {\n                 line.trim().to_owned()\n             };\n             trimmed_lines.push((trimmed, line, prefix_space_width));\n \n-            // When computing the minimum, do not consider lines within a string.\n-            // The reason is there is a veto against trimming and indenting such lines\n+            // Because there is a veto against trimming and indenting lines within a string,\n+            // such lines should not be taken into account when computing the minimum.\n             match kind {\n+                FullCodeCharKind::InStringCommented | FullCodeCharKind::EndStringCommented\n+                    if config.version() == Version::Two =>\n+                {\n+                    None\n+                }\n                 FullCodeCharKind::InString | FullCodeCharKind::EndString => None,\n                 _ => prefix_space_width,\n             }"}, {"sha": "a43b83223e23547ffc0b329a50e11bed04e18d4d", "filename": "tests/source/issue-3132.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a01990c4d0f6415a1e4824cf109125effacaaa81/tests%2Fsource%2Fissue-3132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01990c4d0f6415a1e4824cf109125effacaaa81/tests%2Fsource%2Fissue-3132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3132.rs?ref=a01990c4d0f6415a1e4824cf109125effacaaa81", "patch": "@@ -1,13 +0,0 @@\n-fn test() {\n-    /*\n-    a\n-\t*/\n-    let x = 42;\n-    /*\n-    aaa\n-    \"line 1\n-  line 2\n-        line 3\"\n-    */\n-    let x = 42;\n-}"}, {"sha": "3c2e27e2293df9737b48b4970513b99373fed811", "filename": "tests/source/issue-3270/one.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Fsource%2Fissue-3270%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Fsource%2Fissue-3270%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3270%2Fone.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: One\n+\n+pub fn main() {\n+    /*   let s = String::from(\n+        \"\n+hello\n+world\n+\",\n+    ); */\n+\n+    assert_eq!(s, \"\\nhello\\nworld\\n\");\n+}"}, {"sha": "0eb756471e748d143778ee0f131a6267242b6204", "filename": "tests/source/issue-3270/two.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Fsource%2Fissue-3270%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Fsource%2Fissue-3270%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3270%2Ftwo.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: Two\n+\n+pub fn main() {\n+ /*   let s = String::from(\n+        \"\n+hello\n+world\n+\",\n+    ); */\n+\n+    assert_eq!(s, \"\\nhello\\nworld\\n\");\n+}"}, {"sha": "4dffe0ab8360024c2b35bc1ab531279b4a66485c", "filename": "tests/target/issue-3132.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3132.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -1,13 +1,15 @@\n+// rustfmt-version: Two\n+\n fn test() {\n     /*\n     a\n     */\n     let x = 42;\n     /*\n-      aaa\n-      \"line 1\n-    line 2\n-          line 3\"\n-      */\n+    aaa\n+    \"line 1\n+  line 2\n+        line 3\"\n+    */\n     let x = 42;\n }"}, {"sha": "78de94732432bda4b021a7b6b3832a9b8936183a", "filename": "tests/target/issue-3270/one.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3270%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3270%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3270%2Fone.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: One\n+\n+pub fn main() {\n+    /*   let s = String::from(\n+            \"\n+    hello\n+    world\n+    \",\n+        ); */\n+\n+    assert_eq!(s, \"\\nhello\\nworld\\n\");\n+}"}, {"sha": "e48b5921329109284741b730aa46ebc35293de29", "filename": "tests/target/issue-3270/two.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3270%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3270%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3270%2Ftwo.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: Two\n+\n+pub fn main() {\n+    /*   let s = String::from(\n+        \"\n+hello\n+world\n+\",\n+    ); */\n+\n+    assert_eq!(s, \"\\nhello\\nworld\\n\");\n+}"}, {"sha": "7435c5f0866e04e4a774c2dcc1d2281485e6ee47", "filename": "tests/target/issue-3270/wrap.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3270%2Fwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e91b5b68f4b163ab1c041e72028f33a9e3e075/tests%2Ftarget%2Fissue-3270%2Fwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3270%2Fwrap.rs?ref=d2e91b5b68f4b163ab1c041e72028f33a9e3e075", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-version: Two\n+\n+// check that a line below max_width does not get over the limit when wrapping\n+// it in a block comment\n+fn func() {\n+    let x = 42;\n+    /*\n+    let something = \"one line line  line  line  line  line  line  line  line  line  line  line line\n+  two lines\n+         three lines\";\n+     */\n+}"}]}