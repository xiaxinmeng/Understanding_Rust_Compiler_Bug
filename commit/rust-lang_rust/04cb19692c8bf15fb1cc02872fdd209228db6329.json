{"sha": "04cb19692c8bf15fb1cc02872fdd209228db6329", "node_id": "C_kwDOAAsO6NoAKDA0Y2IxOTY5MmM4YmYxNWZiMWNjMDI4NzJmZGQyMDkyMjhkYjYzMjk", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-10-29T10:32:06Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-10-29T10:32:06Z"}, "message": "don't mutably borrow inner infcx in all of ConstInferUnifier::consts", "tree": {"sha": "b8ffe27812efcd42a678f48185cce73c6c3e2fcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ffe27812efcd42a678f48185cce73c6c3e2fcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04cb19692c8bf15fb1cc02872fdd209228db6329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04cb19692c8bf15fb1cc02872fdd209228db6329", "html_url": "https://github.com/rust-lang/rust/commit/04cb19692c8bf15fb1cc02872fdd209228db6329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04cb19692c8bf15fb1cc02872fdd209228db6329/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "html_url": "https://github.com/rust-lang/rust/commit/4e0d3973fafdfb1c51011bc74e44257b5e3863f1"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "09bfb3290f4ca7d8f4956d6cb379bf2cde3fec34", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/04cb19692c8bf15fb1cc02872fdd209228db6329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04cb19692c8bf15fb1cc02872fdd209228db6329/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=04cb19692c8bf15fb1cc02872fdd209228db6329", "patch": "@@ -866,6 +866,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         debug_assert_eq!(t, _t);\n         debug!(\"ConstInferUnifier: t={:?}\", t);\n@@ -941,6 +942,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn consts(\n         &mut self,\n         c: &'tcx ty::Const<'tcx>,\n@@ -951,29 +953,38 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n         match c.val {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                let mut inner = self.infcx.inner.borrow_mut();\n-                let variable_table = &mut inner.const_unification_table();\n-\n                 // Check if the current unification would end up\n                 // unifying `target_vid` with a const which contains\n                 // an inference variable which is unioned with `target_vid`.\n                 //\n                 // Not doing so can easily result in stack overflows.\n-                if variable_table.unioned(self.target_vid, vid) {\n+                if self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .const_unification_table()\n+                    .unioned(self.target_vid, vid)\n+                {\n                     return Err(TypeError::CyclicConst(c));\n                 }\n \n-                let var_value = variable_table.probe_value(vid);\n+                let var_value =\n+                    self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n                 match var_value.val {\n                     ConstVariableValue::Known { value: u } => self.consts(u, u),\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n                         } else {\n-                            let new_var_id = variable_table.new_key(ConstVarValue {\n-                                origin: var_value.origin,\n-                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n-                            });\n+                            let new_var_id =\n+                                self.infcx.inner.borrow_mut().const_unification_table().new_key(\n+                                    ConstVarValue {\n+                                        origin: var_value.origin,\n+                                        val: ConstVariableValue::Unknown {\n+                                            universe: self.for_universe,\n+                                        },\n+                                    },\n+                                );\n                             Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n                         }\n                     }"}]}