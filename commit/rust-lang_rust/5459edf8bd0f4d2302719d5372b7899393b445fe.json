{"sha": "5459edf8bd0f4d2302719d5372b7899393b445fe", "node_id": "C_kwDOAAsO6NoAKDU0NTllZGY4YmQwZjRkMjMwMjcxOWQ1MzcyYjc4OTkzOTNiNDQ1ZmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-10T16:28:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-10T16:28:22Z"}, "message": "Rollup merge of #100349 - TaKO8Ki:remove-type-string-comparison, r=lcnr\n\nRefactor: remove a type string comparison", "tree": {"sha": "4026f7aac5dcf533d2943373a3f5dcdfdd2b988e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4026f7aac5dcf533d2943373a3f5dcdfdd2b988e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5459edf8bd0f4d2302719d5372b7899393b445fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi89ymCRBK7hj4Ov3rIwAAR1wIABRwgDNwH3RrS6hYrpACsouP\npMueLqMlp0BuwGeeji4U36axUDODgPY0VdZp30kixZHYOThcmpszmHEpkPnG/Oe8\niBJbG0q3+15rpWNYFAoUrA7jCN3FE/wYzNGlWGE/gGR7M/Mnjv2jqY6xkq4S4G04\nC/IEU39lSHoDvMAKuN99Y7Znk7luqRB5qR+RTsMEZM8E62SPSRkp4jEws2tT4N9T\nbP9BgIMuC4tBWCzbHGoaVwwB0ptVXdYvyQUwTjaSd888pUx/nZr3hw44drumHDO1\nGiVjea1Jzuzwxx30YzBYpJjPaH2j8BsWIiBqjh5j4wntoef34SJwv2RVNZleM2I=\n=tOrC\n-----END PGP SIGNATURE-----\n", "payload": "tree 4026f7aac5dcf533d2943373a3f5dcdfdd2b988e\nparent a6116b95640451c14858a487b3cfcf31f3e67b77\nparent 54cf66f241dd2728e0918b44efae93a3fd33ad78\nauthor Michael Goulet <michael@errs.io> 1660148902 -0700\ncommitter GitHub <noreply@github.com> 1660148902 -0700\n\nRollup merge of #100349 - TaKO8Ki:remove-type-string-comparison, r=lcnr\n\nRefactor: remove a type string comparison\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5459edf8bd0f4d2302719d5372b7899393b445fe", "html_url": "https://github.com/rust-lang/rust/commit/5459edf8bd0f4d2302719d5372b7899393b445fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5459edf8bd0f4d2302719d5372b7899393b445fe/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6116b95640451c14858a487b3cfcf31f3e67b77", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6116b95640451c14858a487b3cfcf31f3e67b77", "html_url": "https://github.com/rust-lang/rust/commit/a6116b95640451c14858a487b3cfcf31f3e67b77"}, {"sha": "54cf66f241dd2728e0918b44efae93a3fd33ad78", "url": "https://api.github.com/repos/rust-lang/rust/commits/54cf66f241dd2728e0918b44efae93a3fd33ad78", "html_url": "https://github.com/rust-lang/rust/commit/54cf66f241dd2728e0918b44efae93a3fd33ad78"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "bac0be44aa9a2f4b04d1b902fe93d2afaa463d18", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5459edf8bd0f4d2302719d5372b7899393b445fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5459edf8bd0f4d2302719d5372b7899393b445fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=5459edf8bd0f4d2302719d5372b7899393b445fe", "patch": "@@ -598,13 +598,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let self_ty = self.typeck_results.borrow().expr_ty(&method_expr[0]);\n-        let self_ty = format!(\"{:?}\", self_ty);\n         let name = method_path.ident.name;\n-        let is_as_ref_able = (self_ty.starts_with(\"&std::option::Option\")\n-            || self_ty.starts_with(\"&std::result::Result\")\n-            || self_ty.starts_with(\"std::option::Option\")\n-            || self_ty.starts_with(\"std::result::Result\"))\n-            && (name == sym::map || name == sym::and_then);\n+        let is_as_ref_able = match self_ty.peel_refs().kind() {\n+            ty::Adt(def, _) => {\n+                (self.tcx.is_diagnostic_item(sym::Option, def.did())\n+                    || self.tcx.is_diagnostic_item(sym::Result, def.did()))\n+                    && (name == sym::map || name == sym::and_then)\n+            }\n+            _ => false,\n+        };\n         match (is_as_ref_able, self.sess().source_map().span_to_snippet(method_path.ident.span)) {\n             (true, Ok(src)) => {\n                 let suggestion = format!(\"as_ref().{}\", src);\n@@ -792,7 +794,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             _ if is_range_literal(expr) => true,\n                             _ => false,\n                         };\n-                        let sugg_expr = if needs_parens { format!(\"({src})\") } else { src };\n \n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some((\n@@ -820,6 +821,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n \n+                        let sugg_expr = if needs_parens { format!(\"({src})\") } else { src };\n                         return Some(match mutability {\n                             hir::Mutability::Mut => (\n                                 sp,"}, {"sha": "a053534418589177c93ca04afae81a0cdc9519ca", "filename": "src/test/ui/suggestions/as-ref.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5459edf8bd0f4d2302719d5372b7899393b445fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5459edf8bd0f4d2302719d5372b7899393b445fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs?ref=5459edf8bd0f4d2302719d5372b7899393b445fe", "patch": "@@ -17,4 +17,11 @@ fn main() {\n     // note: do not suggest because of `E: usize`\n     let x: &Result<usize, usize> = &Ok(3);\n     let y: Result<&usize, usize> = x; //~ ERROR mismatched types [E0308]\n+\n+    let multiple_ref_opt = &&Some(Foo);\n+    multiple_ref_opt.map(|arg| takes_ref(arg)); //~ ERROR mismatched types [E0308]\n+    multiple_ref_opt.and_then(|arg| Some(takes_ref(arg))); //~ ERROR mismatched types [E0308]\n+    let multiple_ref_result = &&Ok(Foo);\n+    multiple_ref_result.map(|arg| takes_ref(arg)); //~ ERROR mismatched types [E0308]\n+    multiple_ref_result.and_then(|arg| Ok(takes_ref(arg))); //~ ERROR mismatched types [E0308]\n }"}, {"sha": "deafa9f48d459e65637a79774b3e7007d2342bbb", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5459edf8bd0f4d2302719d5372b7899393b445fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5459edf8bd0f4d2302719d5372b7899393b445fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=5459edf8bd0f4d2302719d5372b7899393b445fe", "patch": "@@ -97,6 +97,66 @@ LL |     let y: Result<&usize, usize> = x;\n    = note:   expected enum `Result<&usize, usize>`\n            found reference `&Result<usize, usize>`\n \n-error: aborting due to 7 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:22:42\n+   |\n+LL |     multiple_ref_opt.map(|arg| takes_ref(arg));\n+   |                      ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                      |         |\n+   |                      |         arguments to this function are incorrect\n+   |                      help: consider using `as_ref` instead: `as_ref().map`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:23:52\n+   |\n+LL |     multiple_ref_opt.and_then(|arg| Some(takes_ref(arg)));\n+   |                      --------            --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                      |                   |\n+   |                      |                   arguments to this function are incorrect\n+   |                      help: consider using `as_ref` instead: `as_ref().and_then`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:25:45\n+   |\n+LL |     multiple_ref_result.map(|arg| takes_ref(arg));\n+   |                         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                         |         |\n+   |                         |         arguments to this function are incorrect\n+   |                         help: consider using `as_ref` instead: `as_ref().map`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:26:53\n+   |\n+LL |     multiple_ref_result.and_then(|arg| Ok(takes_ref(arg)));\n+   |                         --------          --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                         |                 |\n+   |                         |                 arguments to this function are incorrect\n+   |                         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |\n+note: function defined here\n+  --> $DIR/as-ref.rs:3:4\n+   |\n+LL | fn takes_ref(_: &Foo) {}\n+   |    ^^^^^^^^^ -------\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}