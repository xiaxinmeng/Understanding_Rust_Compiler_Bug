{"sha": "187bcb9bd18069896761d350e264953ede1eea04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4N2JjYjliZDE4MDY5ODk2NzYxZDM1MGUyNjQ5NTNlZGUxZWVhMDQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-02T08:52:43Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-03T06:56:43Z"}, "message": "rustc/ty: whitespace fixes", "tree": {"sha": "d2207c0a10ce140e808adf8cd911ad2a782ed98d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2207c0a10ce140e808adf8cd911ad2a782ed98d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/187bcb9bd18069896761d350e264953ede1eea04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/187bcb9bd18069896761d350e264953ede1eea04", "html_url": "https://github.com/rust-lang/rust/commit/187bcb9bd18069896761d350e264953ede1eea04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/187bcb9bd18069896761d350e264953ede1eea04/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf11765dc98536c6eedf33f2df7f72f6e161263", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "html_url": "https://github.com/rust-lang/rust/commit/4cf11765dc98536c6eedf33f2df7f72f6e161263"}], "stats": {"total": 151, "additions": 75, "deletions": 76}, "files": [{"sha": "30737ec0c0a45be36634d5a4ab28eb48a319af1b", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -229,11 +229,11 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n     }\n \n     pub fn resolve_closure(\n-                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    def_id: DefId,\n-                    substs: ty::ClosureSubsts<'tcx>,\n-                    requested_kind: ty::ClosureKind)\n-    -> Instance<'tcx>\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        def_id: DefId,\n+        substs: ty::ClosureSubsts<'tcx>,\n+        requested_kind: ty::ClosureKind)\n+        -> Instance<'tcx>\n     {\n         let actual_kind = substs.closure_kind(def_id, tcx);\n \n@@ -253,8 +253,8 @@ fn resolve_associated_item<'a, 'tcx>(\n ) -> Option<Instance<'tcx>> {\n     let def_id = trait_item.def_id;\n     debug!(\"resolve_associated_item(trait_item={:?}, \\\n-                                    trait_id={:?}, \\\n-           rcvr_substs={:?})\",\n+            trait_id={:?}, \\\n+            rcvr_substs={:?})\",\n            def_id, trait_id, rcvr_substs);\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n@@ -278,7 +278,7 @@ fn resolve_associated_item<'a, 'tcx>(\n         traits::VtableClosure(closure_data) => {\n             let trait_closure_kind = tcx.lang_items().fn_trait_kind(trait_id).unwrap();\n             Some(Instance::resolve_closure(tcx, closure_data.closure_def_id, closure_data.substs,\n-                                 trait_closure_kind))\n+                                           trait_closure_kind))\n         }\n         traits::VtableFnPointer(ref data) => {\n             Some(Instance {\n@@ -308,7 +308,7 @@ fn resolve_associated_item<'a, 'tcx>(\n }\n \n fn needs_fn_once_adapter_shim<'a, 'tcx>(actual_closure_kind: ty::ClosureKind,\n-                              trait_closure_kind: ty::ClosureKind)\n+                                        trait_closure_kind: ty::ClosureKind)\n     -> Result<bool, ()>\n {\n     match (actual_closure_kind, trait_closure_kind) {\n@@ -342,13 +342,14 @@ fn needs_fn_once_adapter_shim<'a, 'tcx>(actual_closure_kind: ty::ClosureKind,\n }\n \n fn fn_once_adapter_instance<'a, 'tcx>(\n-                            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            closure_did: DefId,\n-                            substs: ty::ClosureSubsts<'tcx>,\n-                            ) -> Instance<'tcx> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    closure_did: DefId,\n+    substs: ty::ClosureSubsts<'tcx>)\n+    -> Instance<'tcx>\n+{\n     debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n-    closure_did,\n-    substs);\n+           closure_did,\n+           substs);\n     let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n     let call_once = tcx.associated_items(fn_once)\n         .find(|it| it.kind == ty::AssociatedKind::Method)"}, {"sha": "bd4fee304a3321d0cbf6dddba06f5a3a71bdb04d", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -221,7 +221,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             let data = cur_def_key.disambiguated_data.data;\n             let symbol = data.get_opt_name().map(|n| n.as_str()).unwrap_or_else(|| {\n-                if let DefPathData::CrateRoot = data {  // reexported `extern crate` (#43189)\n+                if let DefPathData::CrateRoot = data { // reexported `extern crate` (#43189)\n                     self.original_crate_name(cur_def.krate).as_str()\n                 } else {\n                     Symbol::intern(\"<unnamed>\").as_str()\n@@ -365,9 +365,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some(trait_ref) = impl_trait_ref {\n             // Trait impls.\n-            buffer.push(&format!(\"<{} as {}>\",\n-                                 self_ty,\n-                                 trait_ref));\n+            buffer.push(&format!(\"<{} as {}>\", self_ty, trait_ref));\n             return;\n         }\n "}, {"sha": "671a725a1c668e088bd53eb5e8a2f3c858748660", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -32,11 +32,11 @@ pub trait IntegerExt {\n     fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: C, ity: attr::IntType) -> Integer;\n     fn repr_discr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                  ty: Ty<'tcx>,\n-                  repr: &ReprOptions,\n-                  min: i128,\n-                  max: i128)\n-                  -> (Integer, bool);\n+                            ty: Ty<'tcx>,\n+                            repr: &ReprOptions,\n+                            min: i128,\n+                            max: i128)\n+                            -> (Integer, bool);\n }\n \n impl IntegerExt for Integer {\n@@ -76,11 +76,11 @@ impl IntegerExt for Integer {\n     /// N.B.: u128 values above i128::MAX will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n     fn repr_discr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                  ty: Ty<'tcx>,\n-                  repr: &ReprOptions,\n-                  min: i128,\n-                  max: i128)\n-                  -> (Integer, bool) {\n+                            ty: Ty<'tcx>,\n+                            repr: &ReprOptions,\n+                            min: i128,\n+                            max: i128)\n+                            -> (Integer, bool) {\n         // Theoretically, negative values could be larger in unsigned representation\n         // than the unsigned representation of the signed minimum. However, if there\n         // are any negative values, the only valid unsigned representation is u128\n@@ -96,7 +96,7 @@ impl IntegerExt for Integer {\n             let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n             if discr < fit {\n                 bug!(\"Integer::repr_discr: `#[repr]` hint too small for \\\n-                  discriminant range of enum `{}\", ty)\n+                      discriminant range of enum `{}\", ty)\n             }\n             return (discr, ity.is_signed());\n         }\n@@ -106,7 +106,7 @@ impl IntegerExt for Integer {\n                 // WARNING: the ARM EABI has two variants; the one corresponding\n                 // to `at_least == I32` appears to be used on Linux and NetBSD,\n                 // but some systems may use the variant corresponding to no\n-                // lower bound.  However, we don't run on those yet...?\n+                // lower bound. However, we don't run on those yet...?\n                 \"arm\" => min_from_extern = Some(I32),\n                 _ => min_from_extern = Some(I32),\n             }\n@@ -250,6 +250,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             /// A univariant, but with a prefix of an arbitrary size & alignment (e.g. enum tag).\n             Prefixed(Size, Align),\n         }\n+\n         let univariant_uninterned = |fields: &[TyLayout<'_>], repr: &ReprOptions, kind| {\n             let packed = repr.packed();\n             if packed && repr.align > 0 {\n@@ -324,7 +325,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let field = fields[i as usize];\n                 if !sized {\n                     bug!(\"univariant: field #{} of `{}` comes after unsized field\",\n-                        offsets.len(), ty);\n+                         offsets.len(), ty);\n                 }\n \n                 if field.is_unsized() {\n@@ -628,7 +629,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 };\n \n                 univariant(&tys.iter().map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,\n-                    &ReprOptions::default(), kind)?\n+                           &ReprOptions::default(), kind)?\n             }\n \n             // SIMD vector types.\n@@ -640,7 +641,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     Abi::Scalar(ref scalar) => scalar.clone(),\n                     _ => {\n                         tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` with \\\n-                                                a non-machine element type `{}`\",\n+                                                 a non-machine element type `{}`\",\n                                                 ty, element.ty));\n                     }\n                 };\n@@ -743,7 +744,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     // Only one variant is present.\n                     (present_second.is_none() &&\n                     // Representation optimizations are allowed.\n-                     !def.repr.inhibit_enum_layout_opt());\n+                    !def.repr.inhibit_enum_layout_opt());\n                 if is_struct {\n                     // Struct, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n@@ -755,7 +756,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                         let param_env = tcx.param_env(def.did);\n                         let last_field = def.variants[v].fields.last().unwrap();\n                         let always_sized = tcx.type_of(last_field.did)\n-                          .is_sized(tcx.at(DUMMY_SP), param_env);\n+                                              .is_sized(tcx.at(DUMMY_SP), param_env);\n                         if !always_sized { StructKind::MaybeUnsized }\n                         else { StructKind::AlwaysSized }\n                     };\n@@ -1258,8 +1259,8 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                         let fields: Vec<_> =\n                             variant_def.fields.iter().map(|f| f.ident.name).collect();\n                         build_variant_info(Some(variant_def.name),\n-                                            &fields,\n-                                            layout.for_variant(self, i))\n+                                           &fields,\n+                                           layout.for_variant(self, i))\n                     })\n                     .collect();\n                 record(adt_kind.into(), adt_packed, match layout.variants {"}, {"sha": "2685d45e279d1b087d497bdff636dfb36b2b4706", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -956,7 +956,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n-                .region_param(param, tcx)\n+               .region_param(param, tcx)\n         }\n     }\n \n@@ -973,7 +973,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n-                .type_param(param, tcx)\n+               .type_param(param, tcx)\n         }\n     }\n }\n@@ -2192,7 +2192,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 if !expr_did.is_local() {\n                     span_bug!(tcx.def_span(expr_did),\n                         \"variant discriminant evaluation succeeded \\\n-                            in its crate but failed locally\");\n+                         in its crate but failed locally\");\n                 }\n                 None\n             }\n@@ -2328,9 +2328,9 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\",\n                        ty, adt_tys);\n                 adt_tys.iter()\n-                    .map(|ty| ty.subst(tcx, substs))\n-                    .flat_map(|ty| self.sized_constraint_for_ty(tcx, ty))\n-                    .collect()\n+                       .map(|ty| ty.subst(tcx, substs))\n+                       .flat_map(|ty| self.sized_constraint_for_ty(tcx, ty))\n+                       .collect()\n             }\n \n             Projection(..) | Opaque(..) => {\n@@ -2869,9 +2869,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-    -> AssociatedItem\n-{\n+fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> AssociatedItem {\n     let id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let parent_id = tcx.hir.get_parent(id);\n     let parent_def_id = tcx.hir.local_def_id(parent_id);\n@@ -2985,8 +2983,8 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefI\n /// See `ParamEnv` struct def'n for details.\n fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)\n-                       -> ParamEnv<'tcx> {\n-\n+                       -> ParamEnv<'tcx>\n+{\n     // The param_env of an impl Trait type is its defining function's param_env\n     if let Some(parent) = is_impl_trait_defn(tcx, def_id) {\n         return param_env(tcx, parent);"}, {"sha": "e77080a0c9136d948f3db3faea46ff63fd1f65f3", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -73,7 +73,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // projection).\n         match ty.sty {\n             ty::Closure(def_id, ref substs) => {\n-\n                 for upvar_ty in substs.upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);\n                 }"}, {"sha": "a88f5095f0a17fd751ce8ec25208f2ad4d36aaa2", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -274,9 +274,10 @@ impl<'tcx> Relate<'tcx> for Vec<ty::PolyExistentialProjection<'tcx>> {\n         if a.len() != b.len() {\n             Err(TypeError::ProjectionBoundsLength(expected_found(relation, &a.len(), &b.len())))\n         } else {\n-            a.iter().zip(b)\n-                .map(|(a, b)| relation.relate(a, b))\n-                .collect()\n+            a.iter()\n+             .zip(b)\n+             .map(|(a, b)| relation.relate(a, b))\n+             .collect()\n         }\n     }\n }"}, {"sha": "7d13c8d9ecee58653060d7a7ed94b0dc1d2f4990", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -386,12 +386,12 @@ impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.yield_ty, self.return_ty))\n-            .map(|(yield_ty, return_ty)| {\n-                ty::GenSig {\n-                    yield_ty,\n-                    return_ty,\n-                }\n-            })\n+           .map(|(yield_ty, return_ty)| {\n+               ty::GenSig {\n+                   yield_ty,\n+                   return_ty,\n+               }\n+           })\n     }\n }\n \n@@ -452,7 +452,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             CyclicTy(t) => return tcx.lift(&t).map(|t| CyclicTy(t)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n-\n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n             OldStyleLUB(ref x) => return tcx.lift(x).map(OldStyleLUB),\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch)"}, {"sha": "75b9a95b32f2c54ec7e6bf8e376a758ca9f5c37b", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Substs<'tcx> {}\n \n pub trait Subst<'tcx> : Sized {\n     fn subst<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                      substs: &[Kind<'tcx>]) -> Self {\n+                       substs: &[Kind<'tcx>]) -> Self {\n         self.subst_spanned(tcx, substs, None)\n     }\n \n@@ -489,7 +489,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n                 span_bug!(\n                     span,\n                     \"Type parameter `{:?}` ({:?}/{}) out of range \\\n-                         when substituting (root type={:?}) substs={:?}\",\n+                     when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n                     p.idx,"}, {"sha": "fe19b6096c5d8f940960b67fee60e56cb0e06d55", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -173,9 +173,9 @@ pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 fast_reject::simplify_type(tcx, impl_self_ty, false)\n             {\n                 impls.non_blanket_impls\n-                    .entry(simplified_self_ty)\n-                    .or_default()\n-                    .push(impl_def_id);\n+                     .entry(simplified_self_ty)\n+                     .or_default()\n+                     .push(impl_def_id);\n             } else {\n                 impls.blanket_impls.push(impl_def_id);\n             }"}, {"sha": "380f7601401ad506ec7772fc0a7b585aea82f4ce", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -119,17 +119,17 @@ pub trait IntTypeExt {\n impl IntTypeExt for attr::IntType {\n     fn to_ty<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n-            SignedInt(ast::IntTy::I8)      => tcx.types.i8,\n-            SignedInt(ast::IntTy::I16)     => tcx.types.i16,\n-            SignedInt(ast::IntTy::I32)     => tcx.types.i32,\n-            SignedInt(ast::IntTy::I64)     => tcx.types.i64,\n+            SignedInt(ast::IntTy::I8)       => tcx.types.i8,\n+            SignedInt(ast::IntTy::I16)      => tcx.types.i16,\n+            SignedInt(ast::IntTy::I32)      => tcx.types.i32,\n+            SignedInt(ast::IntTy::I64)      => tcx.types.i64,\n             SignedInt(ast::IntTy::I128)     => tcx.types.i128,\n-            SignedInt(ast::IntTy::Isize)   => tcx.types.isize,\n+            SignedInt(ast::IntTy::Isize)    => tcx.types.isize,\n             UnsignedInt(ast::UintTy::U8)    => tcx.types.u8,\n             UnsignedInt(ast::UintTy::U16)   => tcx.types.u16,\n             UnsignedInt(ast::UintTy::U32)   => tcx.types.u32,\n             UnsignedInt(ast::UintTy::U64)   => tcx.types.u64,\n-            UnsignedInt(ast::UintTy::U128)   => tcx.types.u128,\n+            UnsignedInt(ast::UintTy::U128)  => tcx.types.u128,\n             UnsignedInt(ast::UintTy::Usize) => tcx.types.usize,\n         }\n     }\n@@ -513,7 +513,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         false\n                     }\n                 }\n-            }).map(|(&item_param, _)| item_param).collect();\n+            })\n+            .map(|(&item_param, _)| item_param)\n+            .collect();\n         debug!(\"destructor_constraint({:?}) = {:?}\", def.did, result);\n         result\n     }\n@@ -674,8 +676,8 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     pub fn is_representable(&'tcx self,\n                             tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             sp: Span)\n-                            -> Representability {\n-\n+                            -> Representability\n+    {\n         // Iterate until something non-representable is found\n         fn fold_repr<It: Iterator<Item=Representability>>(iter: It) -> Representability {\n             iter.fold(Representability::Representable, |r1, r2| {"}, {"sha": "a5a0be21f2e5fa990924e1c37beaa9b4b503bebb", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187bcb9bd18069896761d350e264953ede1eea04/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=187bcb9bd18069896761d350e264953ede1eea04", "patch": "@@ -223,8 +223,8 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n             let predicate = ty::Predicate::ConstEvaluatable(def_id, substs);\n             let cause = self.cause(traits::MiscObligation);\n             self.out.push(traits::Obligation::new(cause,\n-                                                    self.param_env,\n-                                                    predicate));\n+                                                  self.param_env,\n+                                                  predicate));\n         }\n     }\n "}]}