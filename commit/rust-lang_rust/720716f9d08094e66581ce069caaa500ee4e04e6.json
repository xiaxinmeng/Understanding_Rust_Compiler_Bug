{"sha": "720716f9d08094e66581ce069caaa500ee4e04e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDcxNmY5ZDA4MDk0ZTY2NTgxY2UwNjljYWFhNTAwZWU0ZTA0ZTY=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-02T17:54:42Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-06T10:50:02Z"}, "message": "bless polonius output due to lacking the 'static special-casing", "tree": {"sha": "1de4b9673081fbf30ceb33c00257fc15cd3007ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de4b9673081fbf30ceb33c00257fc15cd3007ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720716f9d08094e66581ce069caaa500ee4e04e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720716f9d08094e66581ce069caaa500ee4e04e6", "html_url": "https://github.com/rust-lang/rust/commit/720716f9d08094e66581ce069caaa500ee4e04e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720716f9d08094e66581ce069caaa500ee4e04e6/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695640816a48098efaddc83d1abaa9edcc4fd109", "url": "https://api.github.com/repos/rust-lang/rust/commits/695640816a48098efaddc83d1abaa9edcc4fd109", "html_url": "https://github.com/rust-lang/rust/commit/695640816a48098efaddc83d1abaa9edcc4fd109"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "2a7461fb469b271181f736bfb8d1fc55966143cf", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.polonius.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/720716f9d08094e66581ce069caaa500ee4e04e6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/720716f9d08094e66581ce069caaa500ee4e04e6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.polonius.stderr?ref=720716f9d08094e66581ce069caaa500ee4e04e6", "patch": "@@ -0,0 +1,56 @@\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:18:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+LL |     closure_expecting_bound(|x| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:28:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+LL |     closure_expecting_bound(|x: &u32| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region.rs:37:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^  - let's call the lifetime of this reference `'1`\n+   |                              |\n+   |                              requires that `'1` must outlive `'x`\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:42:9\n+   |\n+LL |     let mut f: Option<&u32> = None;\n+   |         ----- `f` is declared here, outside of the closure body\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              - `x` is a reference that is only valid in the closure body\n+...\n+LL |         f = Some(x);\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region.rs:37:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^ requires that `'x` must outlive `'static`\n+   |\n+   = help: consider replacing `'x` with `'static`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "72e8fa33d7b4d04c0bb9db797ee5e83448ea6586", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.polonius.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/720716f9d08094e66581ce069caaa500ee4e04e6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/720716f9d08094e66581ce069caaa500ee4e04e6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.polonius.stderr?ref=720716f9d08094e66581ce069caaa500ee4e04e6", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/error-handling.rs:13:56\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |        --  -- lifetime `'b` defined here               ^^^^^^^^^ opaque type requires that `'a` must outlive `'b`\n+   |        |\n+   |        lifetime `'a` defined here\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d5bcdf64441712fd341f95ac6300f0d47172ecdf", "filename": "src/test/ui/nll/user-annotations/closure-substs.polonius.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/720716f9d08094e66581ce069caaa500ee4e04e6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/720716f9d08094e66581ce069caaa500ee4e04e6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.polonius.stderr?ref=720716f9d08094e66581ce069caaa500ee4e04e6", "patch": "@@ -0,0 +1,60 @@\n+error: lifetime may not live long enough\n+  --> $DIR/closure-substs.rs:8:16\n+   |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |         return x;\n+   |                ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/closure-substs.rs:15:16\n+   |\n+LL |     |x: &i32| -> &'static i32 {\n+   |         - let's call the lifetime of this reference `'1`\n+LL |         return x;\n+   |                ^ returning this value requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/closure-substs.rs:15:16\n+   |\n+LL |     |x: &i32| -> &'static i32 {\n+   |         -        ------------ return type of closure is &'2 i32\n+   |         |\n+   |         let's call the lifetime of this reference `'1`\n+LL |         return x;\n+   |                ^ returning this value requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/closure-substs.rs:22:9\n+   |\n+LL | fn bar<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |         b(x);\n+   |         ^^^^ argument requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/closure-substs.rs:29:9\n+   |\n+LL |     |x: &i32, b: fn(&'static i32)| {\n+   |      - `x` is a reference that is only valid in the closure body\n+LL |         b(x);\n+   |         ^^^^ `x` escapes the closure body here\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/closure-substs.rs:29:9\n+   |\n+LL |     |x: &i32, b: fn(&'static i32)| {\n+   |      -        - `b` is declared here, outside of the closure body\n+   |      |\n+   |      `x` is a reference that is only valid in the closure body\n+LL |         b(x);\n+   |         ^^^^ `x` escapes the closure body here\n+\n+error: aborting due to 6 previous errors\n+"}]}