{"sha": "67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZWE0NTQ2NDcyZWRhY2UwYWUxZDhmYzk3YWU4NWJmNTk1M2U4YTU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T09:17:43Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T09:17:43Z"}, "message": "Correct style of comments", "tree": {"sha": "967de466ecdcf727d50456133c191a09e9c266b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967de466ecdcf727d50456133c191a09e9c266b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "html_url": "https://github.com/rust-lang/rust/commit/67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c64f29811db779bb202c3450c60c227fb0234bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c64f29811db779bb202c3450c60c227fb0234bb", "html_url": "https://github.com/rust-lang/rust/commit/1c64f29811db779bb202c3450c60c227fb0234bb"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "b2a462ef906753f946c065d5857de4ce0c39d1ca", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "patch": "@@ -291,13 +291,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n     }\n+\n     /// Helper function to get a `libc` constant as a `Scalar`.\n     fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n         self.eval_context_mut()\n             .eval_path_scalar(&[\"libc\", name])?\n             .ok_or_else(|| err_unsup_format!(\"Path libc::{} cannot be resolved.\", name).into())\n             .and_then(|scalar| scalar.not_undef())\n     }\n+\n     /// Helper function to get a `libc` constant as an `i32`.\n     fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n         self.eval_libc(name).and_then(|scalar| scalar.to_i32())"}, {"sha": "6f32783d7a7679872aa85dc6a6ff6523b83271a7", "filename": "src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "patch": "@@ -133,9 +133,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Ok(cwd) => {\n                 // It is not clear what happens with non-utf8 paths here\n                 let mut bytes = cwd.display().to_string().into_bytes();\n-                // If `size` is smaller or equal than the `bytes.len()`, writing `bytes` using the\n-                // `buf` pointer would cause an overflow, the desired behavior in this case is to\n-                // return null.\n+                // If `size` is smaller or equal than the `bytes.len()`, writing `bytes` plus the\n+                // required null terminator to memory using the `buf` pointer would cause an\n+                // overflow, the desired behavior in this case is to return null.\n                 if (bytes.len() as u64) < size {\n                     // We add a `/0` terminator\n                     bytes.push(0);"}, {"sha": "5e896659c85ee3b852380900dad52b9bdc004418", "filename": "tests/run-pass/current_dir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/tests%2Frun-pass%2Fcurrent_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ea4546472edace0ae1d8fc97ae85bf5953e8a5/tests%2Frun-pass%2Fcurrent_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcurrent_dir.rs?ref=67ea4546472edace0ae1d8fc97ae85bf5953e8a5", "patch": "@@ -4,14 +4,14 @@ use std::env;\n use std::path::Path;\n \n fn main() {\n-    // test that `getcwd` is available\n+    // Test that `getcwd` is available\n     let cwd = env::current_dir().unwrap();\n-    // test that changing dir to `..` actually sets the current directory to the parent of `cwd`.\n-    // the only exception here is if `cwd` is the root directory, then changing directory must\n+    // Test that changing dir to `..` actually sets the current directory to the parent of `cwd`.\n+    // The only exception here is if `cwd` is the root directory, then changing directory must\n     // keep the current directory equal to `cwd`.\n     let parent = cwd.parent().unwrap_or(&cwd);\n-    // test that `chdir` is available\n+    // Test that `chdir` is available\n     assert!(env::set_current_dir(&Path::new(\"..\")).is_ok());\n-    // test that `..` goes to the parent directory\n+    // Test that `..` goes to the parent directory\n     assert_eq!(env::current_dir().unwrap(), parent);\n }"}]}