{"sha": "6d43dfb7bb248e3068a97e24b00e85f511fde392", "node_id": "C_kwDOAAsO6NoAKDZkNDNkZmI3YmIyNDhlMzA2OGE5N2UyNGIwMGU4NWY1MTFmZGUzOTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-27T13:03:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-27T13:03:55Z"}, "message": "Rollup merge of #103110 - RalfJung:manual-send, r=thomcc\n\nremove redundant Send impl for references\n\nAlso explain why the other instance is not redundant, move it next to the trait they are implementing, and out of the redundant module. This seems to go back all the way to https://github.com/rust-lang/rust/commit/35ca50bd5676db31a8074a216d1aadad7d434de8, not sure why the module was added.\n\nThe instance for `&mut` is the default instance we get anyway, and we don't have anything similar for `Sync`, so IMO we should be consistent and not have the redundant instance here, either.", "tree": {"sha": "fd7472154d55cb17619c6adb531c26e18d85ea8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd7472154d55cb17619c6adb531c26e18d85ea8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d43dfb7bb248e3068a97e24b00e85f511fde392", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWoG7CRBK7hj4Ov3rIwAAu0QIAGLp9XqEyfFsoLwF6VOc8Il3\nIKc1s8u30CldKODtkxdfFuxxTw100H0iSn/snfpXWubl7letkabVXhi9HnNjU3bV\nTsQt5ksSCduwPIz99kd8oPFwH/xcD8c4G53F5AsiGdkMW6o/gvMiiyUkxazhVjK3\nfBhMRI9J+ru8guPSYt9e2AV7+DA+/itD7nE/nbpgJoTe+XeCyE5C0JB5MlZIQS08\nsLA6unfT0iuOPlbnK5/fnnORM/I/rkLwEB8PA/bc4QMyrtOEXrk5zj6/5UgCxBIq\nvmP3Lek3eo1/2eoxSOhPovkcImKmQW5Ussb0Wov+uJKHwRA4C+DbADHXTwdpY2M=\n=Yxzj\n-----END PGP SIGNATURE-----\n", "payload": "tree fd7472154d55cb17619c6adb531c26e18d85ea8a\nparent 0da281b6068a7d889ae89a9bd8991284cc9b7535\nparent 73d655e9c2106566f328de28aeff6fd3a8ee8e21\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666875835 +0200\ncommitter GitHub <noreply@github.com> 1666875835 +0200\n\nRollup merge of #103110 - RalfJung:manual-send, r=thomcc\n\nremove redundant Send impl for references\n\nAlso explain why the other instance is not redundant, move it next to the trait they are implementing, and out of the redundant module. This seems to go back all the way to https://github.com/rust-lang/rust/commit/35ca50bd5676db31a8074a216d1aadad7d434de8, not sure why the module was added.\n\nThe instance for `&mut` is the default instance we get anyway, and we don't have anything similar for `Sync`, so IMO we should be consistent and not have the redundant instance here, either.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d43dfb7bb248e3068a97e24b00e85f511fde392", "html_url": "https://github.com/rust-lang/rust/commit/6d43dfb7bb248e3068a97e24b00e85f511fde392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d43dfb7bb248e3068a97e24b00e85f511fde392/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da281b6068a7d889ae89a9bd8991284cc9b7535", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da281b6068a7d889ae89a9bd8991284cc9b7535", "html_url": "https://github.com/rust-lang/rust/commit/0da281b6068a7d889ae89a9bd8991284cc9b7535"}, {"sha": "73d655e9c2106566f328de28aeff6fd3a8ee8e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d655e9c2106566f328de28aeff6fd3a8ee8e21", "html_url": "https://github.com/rust-lang/rust/commit/73d655e9c2106566f328de28aeff6fd3a8ee8e21"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "ae4ebf444429545538b85c22ceef44087d7ea241", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d43dfb7bb248e3068a97e24b00e85f511fde392/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d43dfb7bb248e3068a97e24b00e85f511fde392/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=6d43dfb7bb248e3068a97e24b00e85f511fde392", "patch": "@@ -44,6 +44,12 @@ impl<T: ?Sized> !Send for *const T {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Send for *mut T {}\n \n+// Most instances arise automatically, but this instance is needed to link up `T: Sync` with\n+// `&T: Send` (and it also removes the unsound default instance `T Send` -> `&T: Send` that would\n+// otherwise exist).\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<T: Sync + ?Sized> Send for &T {}\n+\n /// Types with a constant size known at compile time.\n ///\n /// All type parameters have an implicit bound of `Sized`. The special syntax\n@@ -674,13 +680,6 @@ impl<T: ?Sized> StructuralPartialEq for PhantomData<T> {}\n #[unstable(feature = \"structural_match\", issue = \"31434\")]\n impl<T: ?Sized> StructuralEq for PhantomData<T> {}\n \n-mod impls {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe impl<T: Sync + ?Sized> Send for &T {}\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe impl<T: Send + ?Sized> Send for &mut T {}\n-}\n-\n /// Compiler-internal trait used to indicate the type of enum discriminants.\n ///\n /// This trait is automatically implemented for every type and does not add any"}, {"sha": "a7b872fe4444aecd4317b3671d8c58125d1a7549", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d43dfb7bb248e3068a97e24b00e85f511fde392/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d43dfb7bb248e3068a97e24b00e85f511fde392/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=6d43dfb7bb248e3068a97e24b00e85f511fde392", "patch": "@@ -27,7 +27,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(non_sync_with_method_call());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n    |\n-   = help: the trait `Send` is not implemented for `dyn std::fmt::Write`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:46:14\n    |"}]}