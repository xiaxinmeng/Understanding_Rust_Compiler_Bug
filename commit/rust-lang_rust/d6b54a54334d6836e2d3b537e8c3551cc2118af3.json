{"sha": "d6b54a54334d6836e2d3b537e8c3551cc2118af3", "node_id": "C_kwDOAAsO6NoAKGQ2YjU0YTU0MzM0ZDY4MzZlMmQzYjUzN2U4YzM1NTFjYzIxMThhZjM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-19T14:23:58Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-19T14:23:58Z"}, "message": "Sync from rust 5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "tree": {"sha": "f8218877d4ae190bc34b4b3359593ce070da23b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8218877d4ae190bc34b4b3359593ce070da23b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b54a54334d6836e2d3b537e8c3551cc2118af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b54a54334d6836e2d3b537e8c3551cc2118af3", "html_url": "https://github.com/rust-lang/rust/commit/d6b54a54334d6836e2d3b537e8c3551cc2118af3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b54a54334d6836e2d3b537e8c3551cc2118af3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e499aa2d5e16eab6b70c04b28bd04b67de3c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e499aa2d5e16eab6b70c04b28bd04b67de3c60", "html_url": "https://github.com/rust-lang/rust/commit/d1e499aa2d5e16eab6b70c04b28bd04b67de3c60"}, {"sha": "5fd3e4dabbc4786a5b7dfc4a0efe1c2e865c719e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3e4dabbc4786a5b7dfc4a0efe1c2e865c719e", "html_url": "https://github.com/rust-lang/rust/commit/5fd3e4dabbc4786a5b7dfc4a0efe1c2e865c719e"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "1e22537c2ba42ac27202012738cf55ce004042b7", "filename": "src/abi/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=d6b54a54334d6836e2d3b537e8c3551cc2118af3", "patch": "@@ -22,7 +22,19 @@ fn clif_sig_from_fn_abi<'tcx>(\n     default_call_conv: CallConv,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) -> Signature {\n-    let call_conv = match fn_abi.conv {\n+    let call_conv = conv_to_call_conv(fn_abi.conv, default_call_conv);\n+\n+    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n+\n+    let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n+    // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n+    let params: Vec<_> = return_ptr.into_iter().chain(inputs).collect();\n+\n+    Signature { params, returns, call_conv }\n+}\n+\n+pub(crate) fn conv_to_call_conv(c: Conv, default_call_conv: CallConv) -> CallConv {\n+    match c {\n         Conv::Rust | Conv::C => default_call_conv,\n         Conv::RustCold => CallConv::Cold,\n         Conv::X86_64SysV => CallConv::SystemV,\n@@ -38,15 +50,8 @@ fn clif_sig_from_fn_abi<'tcx>(\n         | Conv::X86VectorCall\n         | Conv::AmdGpuKernel\n         | Conv::AvrInterrupt\n-        | Conv::AvrNonBlockingInterrupt => todo!(\"{:?}\", fn_abi.conv),\n-    };\n-    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n-\n-    let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n-    // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n-    let params: Vec<_> = return_ptr.into_iter().chain(inputs).collect();\n-\n-    Signature { params, returns, call_conv }\n+        | Conv::AvrNonBlockingInterrupt => todo!(\"{:?}\", c),\n+    }\n }\n \n pub(crate) fn get_function_sig<'tcx>("}, {"sha": "f5951a23ef82b560ce7a8cdf5d9a71cccb4b3f6d", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d6b54a54334d6836e2d3b537e8c3551cc2118af3", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n         if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n             all_constants_ok = false;\n             match err {\n-                ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n+                ErrorHandled::Reported(_) => {\n                     fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                 }\n                 ErrorHandled::TooGeneric => {\n@@ -126,7 +126,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n     let layout = fx.layout_of(ty);\n-    assert!(!layout.is_unsized(), \"sized const value\");\n+    assert!(layout.is_sized(), \"unsized const value\");\n \n     if layout.is_zst() {\n         return CValue::by_ref(crate::Pointer::dangling(layout.align.pref), layout);\n@@ -393,7 +393,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n \n-        for &(offset, alloc_id) in alloc.provenance().iter() {\n+        for &(offset, alloc_id) in alloc.provenance().ptrs().iter() {\n             let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;\n@@ -426,7 +426,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     {\n                         tcx.sess.fatal(&format!(\n                             \"Allocation {:?} contains reference to TLS value {:?}\",\n-                            alloc, def_id\n+                            alloc_id, def_id\n                         ));\n                     }\n "}, {"sha": "2ba012a77b0a908788f0272705f82f7c875cb1a7", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=d6b54a54334d6836e2d3b537e8c3551cc2118af3", "patch": "@@ -59,7 +59,7 @@ impl DebugContext {\n \n         let producer = format!(\n             \"cg_clif (rustc {}, cranelift {})\",\n-            rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n+            rustc_interface::util::rustc_version_str().unwrap_or(\"unknown version\"),\n             cranelift_codegen::VERSION,\n         );\n         let comp_dir = tcx"}, {"sha": "f7434633ea442b40fa30f4a85370135e8c134017", "filename": "src/main_shim.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=d6b54a54334d6836e2d3b537e8c3551cc2118af3", "patch": "@@ -63,10 +63,14 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 AbiParam::new(m.target_config().pointer_type()),\n             ],\n             returns: vec![AbiParam::new(m.target_config().pointer_type() /*isize*/)],\n-            call_conv: CallConv::triple_default(m.isa().triple()),\n+            call_conv: crate::conv_to_call_conv(\n+                tcx.sess.target.options.entry_abi,\n+                CallConv::triple_default(m.isa().triple()),\n+            ),\n         };\n \n-        let cmain_func_id = m.declare_function(\"main\", Linkage::Export, &cmain_sig).unwrap();\n+        let entry_name = tcx.sess.target.options.entry_name.as_ref();\n+        let cmain_func_id = m.declare_function(entry_name, Linkage::Export, &cmain_sig).unwrap();\n \n         let instance = Instance::mono(tcx, rust_main_def_id).polymorphize(tcx);\n "}, {"sha": "58a6508de7a3ce647791764793d22255f078054d", "filename": "src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b54a54334d6836e2d3b537e8c3551cc2118af3/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=d6b54a54334d6836e2d3b537e8c3551cc2118af3", "patch": "@@ -19,7 +19,7 @@ fn codegen_field<'tcx>(\n     };\n \n     if let Some(extra) = extra {\n-        if !field_layout.is_unsized() {\n+        if field_layout.is_sized() {\n             return simple(fx);\n         }\n         match field_layout.ty.kind() {\n@@ -364,7 +364,7 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n         layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         if layout.size.bytes() == 0 {\n             return CPlace {\n                 inner: CPlaceInner::Addr(Pointer::dangling(layout.align.pref), None),\n@@ -828,7 +828,7 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &FunctionCx<'_, '_, 'tcx>,\n         variant: VariantIdx,\n     ) -> Self {\n-        assert!(!self.layout().is_unsized());\n+        assert!(self.layout().is_sized());\n         let layout = self.layout().for_variant(fx, variant);\n         CPlace { inner: self.inner, layout }\n     }"}]}