{"sha": "c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YmNmZTZhMDVkODJlMTUxZDQ1OWJjZDJiZDhhN2IyNzQyZjdhNjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T15:07:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T15:07:39Z"}, "message": "fix syntax errors in tests", "tree": {"sha": "407e3ec2b7b4a88634e85c113d5e219cc413535a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407e3ec2b7b4a88634e85c113d5e219cc413535a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "html_url": "https://github.com/rust-lang/rust/commit/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e3f5af9d49db5732405050e6c5442cb6eeef965", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3f5af9d49db5732405050e6c5442cb6eeef965", "html_url": "https://github.com/rust-lang/rust/commit/2e3f5af9d49db5732405050e6c5442cb6eeef965"}], "stats": {"total": 258, "additions": 137, "deletions": 121}, "files": [{"sha": "7c49c585bcaa282161cd9fa46fb905b9b58cac19", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -4,7 +4,7 @@ mod input;\n \n use std::{panic, sync::Arc};\n \n-use ra_syntax::{TextUnit, TextRange, SourceFile, TreeArc};\n+use ra_syntax::{TextUnit, TextRange, SourceFile, Parse};\n use relative_path::RelativePathBuf;\n use ra_prof::profile;\n \n@@ -74,7 +74,7 @@ pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     // Parses the file into the syntax tree.\n     #[salsa::invoke(parse_query)]\n-    fn parse(&self, file_id: FileId) -> TreeArc<SourceFile>;\n+    fn parse(&self, file_id: FileId) -> Parse;\n     /// Path to a file, relative to the root of its source root.\n     #[salsa::input]\n     fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n@@ -98,7 +98,7 @@ fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<Cra\n     Arc::new(res)\n }\n \n-fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n+fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse {\n     let _p = profile(\"parse_query\");\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)"}, {"sha": "69496b6242ddb85b7e003f380b3f67391e7c5c8c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -116,7 +116,7 @@ impl ModuleSource {\n     ) -> ModuleSource {\n         match (file_id, decl_id) {\n             (Some(file_id), _) => {\n-                let source_file = db.parse(file_id);\n+                let source_file = db.parse(file_id).tree;\n                 ModuleSource::SourceFile(source_file)\n             }\n             (None, Some(item_id)) => {"}, {"sha": "83d226fc15e60b1c7181dc02dc91a20c4bc0d70f", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -190,7 +190,7 @@ mod tests {\n         };\n \n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&code);\n-        let file = db.parse(file_id);\n+        let file = db.parse(file_id).ok().unwrap();\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n \n@@ -288,7 +288,7 @@ mod tests {\n         let (off, code) = extract_offset(code);\n \n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&code);\n-        let file = db.parse(file_id);\n+        let file = db.parse(file_id).ok().unwrap();\n         let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n             .expect(\"failed to find a name at the target offset\");\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();"}, {"sha": "2816144a74779b0cd8383f15a12eebb79c2e1294", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n         let source_map = self.func.body_source_map(db);\n         let file_id = self.func.source(db).0;\n-        let source_file = db.parse(file_id.original_file(db));\n+        let source_file = db.parse(file_id.original_file(db)).tree;\n         if let Some(field_list_node) = source_map\n             .expr_syntax(id)\n             .map(|ptr| ptr.to_node(source_file.syntax()))"}, {"sha": "06b6888f42490afddfa41127309546a7501e40f8", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -64,7 +64,7 @@ impl HirFileId {\n         db.check_canceled();\n         let _p = profile(\"parse_or_expand_query\");\n         match file_id.0 {\n-            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).syntax().to_owned()),\n+            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree.syntax().to_owned()),\n             HirFileIdRepr::Macro(macro_file) => {\n                 let macro_call_id = macro_file.macro_call_id;\n                 let tt = db"}, {"sha": "860e10069439b444b74bbcb26fcae180f184e8a9", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -46,7 +46,7 @@ pub fn module_from_declaration(\n \n /// Locates the module by position in the source code.\n pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n         Some(m) if !m.has_semi() => module_from_inline(db, position.file_id.into(), m),\n         _ => module_from_file_id(db, position.file_id.into()),"}, {"sha": "da9aeec6dca3222dc141675c8621b3645326ebfa", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 128, "deletions": 112, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "patch": "@@ -59,7 +59,7 @@ fn test() {\n     let b: usize = 1;\n     let c = b;\n }\n-}\"#),\n+\"#),\n         @r###\"\n [11; 71) '{     ...= b; }': ()\n [21; 22) 'a': isize\n@@ -85,7 +85,7 @@ fn test() {\n     a();\n     b::c();\n }\n-}\"#),\n+\"#),\n         @r###\"\n [15; 20) '{ 1 }': u32\n [17; 18) '1': u32\n@@ -1004,7 +1004,7 @@ fn infer_tuple_struct_generics() {\n     assert_snapshot_matches!(\n         infer(r#\"\n struct A<T>(T);\n-enum Option<T> { Some(T), None };\n+enum Option<T> { Some(T), None }\n use Option::*;\n \n fn test() {\n@@ -1017,22 +1017,24 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[77; 185) '{     ...one; }': ()\n-[83; 84) 'A': A<i32>(T) -> A<T>\n-[83; 88) 'A(42)': A<i32>\n-[85; 87) '42': i32\n-[94; 95) 'A': A<u128>(T) -> A<T>\n-[94; 103) 'A(42u128)': A<u128>\n-[96; 102) '42u128': u128\n-[109; 113) 'Some': Some<&str>(T) -> Option<T>\n-[109; 118) 'Some(\"x\")': Option<&str>\n-[114; 117) '\"x\"': &str\n-[124; 136) 'Option::Some': Some<&str>(T) -> Option<T>\n-[124; 141) 'Option...e(\"x\")': Option<&str>\n-[137; 140) '\"x\"': &str\n-[147; 151) 'None': Option<{unknown}>\n-[161; 162) 'x': Option<i64>\n-[178; 182) 'None': Option<i64>\"###\n+   \u22ee\n+   \u22ee[76; 184) '{     ...one; }': ()\n+   \u22ee[82; 83) 'A': A<i32>(T) -> A<T>\n+   \u22ee[82; 87) 'A(42)': A<i32>\n+   \u22ee[84; 86) '42': i32\n+   \u22ee[93; 94) 'A': A<u128>(T) -> A<T>\n+   \u22ee[93; 102) 'A(42u128)': A<u128>\n+   \u22ee[95; 101) '42u128': u128\n+   \u22ee[108; 112) 'Some': Some<&str>(T) -> Option<T>\n+   \u22ee[108; 117) 'Some(\"x\")': Option<&str>\n+   \u22ee[113; 116) '\"x\"': &str\n+   \u22ee[123; 135) 'Option::Some': Some<&str>(T) -> Option<T>\n+   \u22ee[123; 140) 'Option...e(\"x\")': Option<&str>\n+   \u22ee[136; 139) '\"x\"': &str\n+   \u22ee[146; 150) 'None': Option<{unknown}>\n+   \u22ee[160; 161) 'x': Option<i64>\n+   \u22ee[177; 181) 'None': Option<i64>\n+    \"###\n     );\n }\n \n@@ -1268,7 +1270,7 @@ impl Struct {\n     const FOO: u32 = 1;\n }\n \n-enum Enum;\n+enum Enum {}\n \n impl Enum {\n     const BAR: u32 = 2;\n@@ -1291,24 +1293,26 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[52; 53) '1': u32\n-[103; 104) '2': u32\n-[211; 212) '5': u32\n-[227; 305) '{     ...:ID; }': ()\n-[237; 238) 'x': u32\n-[241; 252) 'Struct::FOO': u32\n-[262; 263) 'y': u32\n-[266; 275) 'Enum::BAR': u32\n-[285; 286) 'z': {unknown}\n-[289; 302) 'TraitTest::ID': {unknown}\"###\n+   \u22ee\n+   \u22ee[52; 53) '1': u32\n+   \u22ee[105; 106) '2': u32\n+   \u22ee[213; 214) '5': u32\n+   \u22ee[229; 307) '{     ...:ID; }': ()\n+   \u22ee[239; 240) 'x': u32\n+   \u22ee[243; 254) 'Struct::FOO': u32\n+   \u22ee[264; 265) 'y': u32\n+   \u22ee[268; 277) 'Enum::BAR': u32\n+   \u22ee[287; 288) 'z': {unknown}\n+   \u22ee[291; 304) 'TraitTest::ID': {unknown}\n+    \"###\n     );\n }\n \n #[test]\n fn infer_associated_method_struct() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A { x: u32 };\n+struct A { x: u32 }\n \n impl A {\n     fn new() -> A {\n@@ -1321,23 +1325,25 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[50; 76) '{     ...     }': A\n-[60; 70) 'A { x: 0 }': A\n-[67; 68) '0': u32\n-[89; 123) '{     ...a.x; }': ()\n-[99; 100) 'a': A\n-[103; 109) 'A::new': fn new() -> A\n-[103; 111) 'A::new()': A\n-[117; 118) 'a': A\n-[117; 120) 'a.x': u32\"###\n+   \u22ee\n+   \u22ee[49; 75) '{     ...     }': A\n+   \u22ee[59; 69) 'A { x: 0 }': A\n+   \u22ee[66; 67) '0': u32\n+   \u22ee[88; 122) '{     ...a.x; }': ()\n+   \u22ee[98; 99) 'a': A\n+   \u22ee[102; 108) 'A::new': fn new() -> A\n+   \u22ee[102; 110) 'A::new()': A\n+   \u22ee[116; 117) 'a': A\n+   \u22ee[116; 119) 'a.x': u32\n+    \"###\n     );\n }\n \n #[test]\n fn infer_associated_method_enum() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-enum A { B, C };\n+enum A { B, C }\n \n impl A {\n     pub fn b() -> A {\n@@ -1355,19 +1361,21 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[48; 68) '{     ...     }': A\n-[58; 62) 'A::B': A\n-[89; 109) '{     ...     }': A\n-[99; 103) 'A::C': A\n-[122; 179) '{     ...  c; }': ()\n-[132; 133) 'a': A\n-[136; 140) 'A::b': fn b() -> A\n-[136; 142) 'A::b()': A\n-[148; 149) 'a': A\n-[159; 160) 'c': A\n-[163; 167) 'A::c': fn c() -> A\n-[163; 169) 'A::c()': A\n-[175; 176) 'c': A\"###\n+   \u22ee\n+   \u22ee[47; 67) '{     ...     }': A\n+   \u22ee[57; 61) 'A::B': A\n+   \u22ee[88; 108) '{     ...     }': A\n+   \u22ee[98; 102) 'A::C': A\n+   \u22ee[121; 178) '{     ...  c; }': ()\n+   \u22ee[131; 132) 'a': A\n+   \u22ee[135; 139) 'A::b': fn b() -> A\n+   \u22ee[135; 141) 'A::b()': A\n+   \u22ee[147; 148) 'a': A\n+   \u22ee[158; 159) 'c': A\n+   \u22ee[162; 166) 'A::c': fn c() -> A\n+   \u22ee[162; 168) 'A::c()': A\n+   \u22ee[174; 175) 'c': A\n+    \"###\n     );\n }\n \n@@ -1540,7 +1548,7 @@ fn test() {\n fn infer_type_alias() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A<X, Y> { x: X, y: Y };\n+struct A<X, Y> { x: X, y: Y }\n type Foo = A<u32, i128>;\n type Bar<T> = A<T, u128>;\n type Baz<U, V> = A<V, U>;\n@@ -1554,22 +1562,24 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n }\n \"#),\n         @r###\"\n-[117; 118) 'x': A<u32, i128>\n-[125; 126) 'y': A<&str, u128>\n-[139; 140) 'z': A<u8, i8>\n-[155; 212) '{     ...z.y; }': ()\n-[161; 162) 'x': A<u32, i128>\n-[161; 164) 'x.x': u32\n-[170; 171) 'x': A<u32, i128>\n-[170; 173) 'x.y': i128\n-[179; 180) 'y': A<&str, u128>\n-[179; 182) 'y.x': &str\n-[188; 189) 'y': A<&str, u128>\n-[188; 191) 'y.y': u128\n-[197; 198) 'z': A<u8, i8>\n-[197; 200) 'z.x': u8\n-[206; 207) 'z': A<u8, i8>\n-[206; 209) 'z.y': i8\"###\n+   \u22ee\n+   \u22ee[116; 117) 'x': A<u32, i128>\n+   \u22ee[124; 125) 'y': A<&str, u128>\n+   \u22ee[138; 139) 'z': A<u8, i8>\n+   \u22ee[154; 211) '{     ...z.y; }': ()\n+   \u22ee[160; 161) 'x': A<u32, i128>\n+   \u22ee[160; 163) 'x.x': u32\n+   \u22ee[169; 170) 'x': A<u32, i128>\n+   \u22ee[169; 172) 'x.y': i128\n+   \u22ee[178; 179) 'y': A<&str, u128>\n+   \u22ee[178; 181) 'y.x': &str\n+   \u22ee[187; 188) 'y': A<&str, u128>\n+   \u22ee[187; 190) 'y.y': u128\n+   \u22ee[196; 197) 'z': A<u8, i8>\n+   \u22ee[196; 199) 'z.x': u8\n+   \u22ee[205; 206) 'z': A<u8, i8>\n+   \u22ee[205; 208) 'z.y': i8\n+    \"###\n     )\n }\n \n@@ -1578,7 +1588,7 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n fn recursive_type_alias() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A<X> {};\n+struct A<X> {}\n type Foo = Foo;\n type Bar = A<Bar>;\n fn test(x: Foo) {}\n@@ -1795,18 +1805,21 @@ fn infer_std_crash_3() {\n     assert_snapshot_matches!(\n         infer(r#\"\n pub fn compute() {\n-    match _ {\n+    match nope!() {\n         SizeSkeleton::Pointer { non_zero: true, tail } => {}\n     }\n }\n \"#),\n         @r###\"\n-[18; 102) '{     ...   } }': ()\n-[24; 100) 'match ...     }': ()\n-[42; 88) 'SizeSk...tail }': {unknown}\n-[76; 80) 'true': {unknown}\n-[82; 86) 'tail': {unknown}\n-[92; 94) '{}': ()\"###\n+   \u22ee\n+   \u22ee[18; 108) '{     ...   } }': ()\n+   \u22ee[24; 106) 'match ...     }': ()\n+   \u22ee[30; 37) 'nope!()': {unknown}\n+   \u22ee[48; 94) 'SizeSk...tail }': {unknown}\n+   \u22ee[82; 86) 'true': {unknown}\n+   \u22ee[88; 92) 'tail': {unknown}\n+   \u22ee[98; 100) '{}': ()\n+    \"###\n     );\n }\n \n@@ -1817,20 +1830,21 @@ fn infer_std_crash_4() {\n         infer(r#\"\n pub fn primitive_type() {\n     match *self {\n-        BorrowedRef { type_: box Primitive(p), ..} => {},\n+        BorrowedRef { type_: Primitive(p), ..} => {},\n     }\n }\n \"#),\n         @r###\"\n-[25; 110) '{     ...   } }': ()\n-[31; 108) 'match ...     }': ()\n-[37; 42) '*self': {unknown}\n-[38; 42) 'self': {unknown}\n-[53; 95) 'Borrow...), ..}': {unknown}\n-[74; 77) 'box': {unknown}\n-[78; 87) 'Primitive': {unknown}\n-[88; 89) 'p': {unknown}\n-[99; 101) '{}': ()\"###\n+   \u22ee\n+   \u22ee[25; 106) '{     ...   } }': ()\n+   \u22ee[31; 104) 'match ...     }': ()\n+   \u22ee[37; 42) '*self': {unknown}\n+   \u22ee[38; 42) 'self': {unknown}\n+   \u22ee[53; 91) 'Borrow...), ..}': {unknown}\n+   \u22ee[74; 86) 'Primitive(p)': {unknown}\n+   \u22ee[84; 85) 'p': {unknown}\n+   \u22ee[95; 97) '{}': ()\n+    \"###\n     );\n }\n \n@@ -2304,27 +2318,29 @@ trait Into<T> {\n     fn into(self) -> T;\n }\n struct S;\n-impl Into<u32> for S;\n-impl Into<u64> for S;\n+impl Into<u32> for S {}\n+impl Into<u64> for S {}\n fn test() {\n     let x: u32 = S.into();\n     let y: u64 = S.into();\n     let z = Into::<u64>::into(S);\n }\n \"#),\n         @r###\"\n-[29; 33) 'self': Self\n-[107; 198) '{     ...(S); }': ()\n-[117; 118) 'x': u32\n-[126; 127) 'S': S\n-[126; 134) 'S.into()': u32\n-[144; 145) 'y': u64\n-[153; 154) 'S': S\n-[153; 161) 'S.into()': u64\n-[171; 172) 'z': {unknown}\n-[175; 192) 'Into::...::into': {unknown}\n-[175; 195) 'Into::...nto(S)': {unknown}\n-[193; 194) 'S': S\"###\n+   \u22ee\n+   \u22ee[29; 33) 'self': Self\n+   \u22ee[111; 202) '{     ...(S); }': ()\n+   \u22ee[121; 122) 'x': u32\n+   \u22ee[130; 131) 'S': S\n+   \u22ee[130; 138) 'S.into()': u32\n+   \u22ee[148; 149) 'y': u64\n+   \u22ee[157; 158) 'S': S\n+   \u22ee[157; 165) 'S.into()': u64\n+   \u22ee[175; 176) 'z': {unknown}\n+   \u22ee[179; 196) 'Into::...::into': {unknown}\n+   \u22ee[179; 199) 'Into::...nto(S)': {unknown}\n+   \u22ee[197; 198) 'S': S\n+    \"###\n     );\n }\n \n@@ -2617,7 +2633,7 @@ fn method_resolution_where_clause_1() {\n trait Clone {}\n trait Trait { fn foo(self) -> u128; }\n struct S;\n-impl Clone for S {};\n+impl Clone for S {}\n impl<T> Trait for T where T: Clone {}\n fn test() { S.foo()<|>; }\n \"#,\n@@ -2634,7 +2650,7 @@ trait Into<T> { fn into(self) -> T; }\n trait From<T> { fn from(other: T) -> Self; }\n struct S1;\n struct S2;\n-impl From<S2> for S1 {};\n+impl From<S2> for S1 {}\n impl<T, U> Into<U> for T where U: From<T> {}\n fn test() { S2.into()<|>; }\n \"#,\n@@ -2651,7 +2667,7 @@ trait Into<T> { fn into(self) -> T; }\n trait From<T> { fn from(other: T) -> Self; }\n struct S1;\n struct S2;\n-impl From<S2> for S1 {};\n+impl From<S2> for S1 {}\n impl<T, U: From<T>> Into<U> for T {}\n fn test() { S2.into()<|>; }\n \"#,\n@@ -2680,8 +2696,8 @@ fn method_resolution_slow() {\n //- /main.rs\n trait SendX {}\n \n-struct S1; impl SendX for S1;\n-struct S2; impl SendX for S2;\n+struct S1; impl SendX for S1 {}\n+struct S2; impl SendX for S2 {}\n struct U1;\n \n trait Trait { fn method(self); }\n@@ -2702,7 +2718,7 @@ fn test() { (S {}).method()<|>; }\n }\n \n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n-    let file = db.parse(pos.file_id);\n+    let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();\n     let analyzer = SourceAnalyzer::new(db, pos.file_id, expr.syntax(), Some(pos.offset));\n     let ty = analyzer.type_of(db, expr).unwrap();\n@@ -2716,7 +2732,7 @@ fn type_at(content: &str) -> String {\n \n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).ok().unwrap();\n \n     let mut acc = String::new();\n     acc.push_str(\"\\n\");\n@@ -2794,7 +2810,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     \",\n     );\n     {\n-        let file = db.parse(pos.file_id);\n+        let file = db.parse(pos.file_id).ok().unwrap();\n         let node =\n             algo::find_token_at_offset(file.syntax(), pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {\n@@ -2815,7 +2831,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     db.query_mut(ra_db::FileTextQuery).set(pos.file_id, Arc::new(new_text));\n \n     {\n-        let file = db.parse(pos.file_id);\n+        let file = db.parse(pos.file_id).ok().unwrap();\n         let node =\n             algo::find_token_at_offset(file.syntax(), pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {"}]}