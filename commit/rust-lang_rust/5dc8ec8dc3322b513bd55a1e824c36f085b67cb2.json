{"sha": "5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzhlYzhkYzMzMjJiNTEzYmQ1NWExZTgyNGMzNmYwODViNjdjYjI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2020-04-06T00:55:19Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2020-04-06T01:51:21Z"}, "message": "Remove a stack frame from .await calls", "tree": {"sha": "65df4447fd0f8eaf61fa6a4d4c7914ba3931769c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65df4447fd0f8eaf61fa6a4d4c7914ba3931769c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "html_url": "https://github.com/rust-lang/rust/commit/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6cef0445779724b469ab7b9a8d3c05d9e848ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cef0445779724b469ab7b9a8d3c05d9e848ca8", "html_url": "https://github.com/rust-lang/rust/commit/e6cef0445779724b469ab7b9a8d3c05d9e848ca8"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "a6b769147d068facb8abd05ef98ad7a68ef0da21", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "patch": "@@ -77,9 +77,6 @@ where\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[cfg(not(bootstrap))]\n #[inline]\n-pub unsafe fn poll_with_context<F>(f: Pin<&mut F>, mut cx: ResumeTy) -> Poll<F::Output>\n-where\n-    F: Future,\n-{\n-    F::poll(f, cx.0.as_mut())\n+pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n+    &mut *cx.0.as_ptr().cast()\n }"}, {"sha": "1c057ddfb7f35ed7bdbc7c8dbf444118e47df50a", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "patch": "@@ -556,9 +556,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// ```rust\n     /// match <expr> {\n     ///     mut pinned => loop {\n-    ///         match unsafe { ::std::future::poll_with_context(\n+    ///         match unsafe { ::std::future::Future::poll(\n     ///             <::std::pin::Pin>::new_unchecked(&mut pinned),\n-    ///             task_context,\n+    ///             ::std::future::get_context(task_context),\n     ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n     ///             ::std::task::Poll::Pending => {}\n@@ -598,9 +598,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let task_context_ident = Ident::with_dummy_span(sym::_task_context);\n \n         // unsafe {\n-        //     ::std::future::poll_with_context(\n+        //     ::std::future::Future::poll(\n         //         ::std::pin::Pin::new_unchecked(&mut pinned),\n-        //         task_context,\n+        //         ::std::future::get_context(task_context),\n         //     )\n         // }\n         let poll_expr = {\n@@ -621,10 +621,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 arena_vec![self; ref_mut_pinned],\n             );\n             let new_unchecked = self.expr(span, new_unchecked_expr_kind, ThinVec::new());\n-            let call = self.expr_call_std_path(\n+            let get_context = self.expr_call_std_path_mut(\n                 gen_future_span,\n-                &[sym::future, sym::poll_with_context],\n-                arena_vec![self; new_unchecked, task_context],\n+                &[sym::future, sym::get_context],\n+                arena_vec![self; task_context],\n+            );\n+            let call = self.expr_call_std_path(\n+                span,\n+                &[sym::future, sym::Future, sym::poll],\n+                arena_vec![self; new_unchecked, get_context],\n             );\n             self.arena.alloc(self.expr_unsafe(call))\n         };\n@@ -1326,25 +1331,43 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.arena.alloc(self.expr(sp, hir::ExprKind::Tup(&[]), ThinVec::new()))\n     }\n \n+    fn expr_call_mut(\n+        &mut self,\n+        span: Span,\n+        e: &'hir hir::Expr<'hir>,\n+        args: &'hir [hir::Expr<'hir>],\n+    ) -> hir::Expr<'hir> {\n+        self.expr(span, hir::ExprKind::Call(e, args), ThinVec::new())\n+    }\n+\n     fn expr_call(\n         &mut self,\n         span: Span,\n         e: &'hir hir::Expr<'hir>,\n         args: &'hir [hir::Expr<'hir>],\n     ) -> &'hir hir::Expr<'hir> {\n-        self.arena.alloc(self.expr(span, hir::ExprKind::Call(e, args), ThinVec::new()))\n+        self.arena.alloc(self.expr_call_mut(span, e, args))\n     }\n \n     // Note: associated functions must use `expr_call_std_path`.\n-    fn expr_call_std_path(\n+    fn expr_call_std_path_mut(\n         &mut self,\n         span: Span,\n         path_components: &[Symbol],\n         args: &'hir [hir::Expr<'hir>],\n-    ) -> &'hir hir::Expr<'hir> {\n+    ) -> hir::Expr<'hir> {\n         let path =\n             self.arena.alloc(self.expr_std_path(span, path_components, None, ThinVec::new()));\n-        self.expr_call(span, path, args)\n+        self.expr_call_mut(span, path, args)\n+    }\n+\n+    fn expr_call_std_path(\n+        &mut self,\n+        span: Span,\n+        path_components: &[Symbol],\n+        args: &'hir [hir::Expr<'hir>],\n+    ) -> &'hir hir::Expr<'hir> {\n+        self.arena.alloc(self.expr_call_std_path_mut(span, path_components, args))\n     }\n \n     // Create an expression calling an associated function of an std type."}, {"sha": "82caca17308bfc690cc5badfd5cbb07ba74c1611", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "patch": "@@ -546,8 +546,9 @@ symbols! {\n         plugin,\n         plugin_registrar,\n         plugins,\n+        poll,\n         Poll,\n-        poll_with_context,\n+        get_context,\n         powerpc_target_feature,\n         precise_pointer_size_matching,\n         pref_align_of,"}, {"sha": "496ca506c60f2e2c33c937e7df5f919816cdeb14", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "patch": "@@ -32,11 +32,8 @@ error[E0277]: the trait bound `(): std::future::Future` is not satisfied\n    |\n LL |     [1; ().await];\n    |         ^^^^^^^^ the trait `std::future::Future` is not implemented for `()`\n-   | \n-  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n    |\n-LL |     F: Future,\n-   |        ------ required by this bound in `std::future::poll_with_context`\n+   = note: required by `std::future::Future::poll`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ec4e9e397a81e25dbae97822465ec22642a19c1f", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dc8ec8dc3322b513bd55a1e824c36f085b67cb2/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=5dc8ec8dc3322b513bd55a1e824c36f085b67cb2", "patch": "@@ -32,11 +32,8 @@ error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std:\n    |\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-   | \n-  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n    |\n-LL |     F: Future,\n-   |        ------ required by this bound in `std::future::poll_with_context`\n+   = note: required by `std::future::Future::poll`\n \n error: aborting due to 4 previous errors\n "}]}