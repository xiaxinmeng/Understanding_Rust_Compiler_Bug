{"sha": "4e35cbb22eceac145a6f794cde869b3684e0b1d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzVjYmIyMmVjZWFjMTQ1YTZmNzk0Y2RlODY5YjM2ODRlMGIxZDU=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-11-12T18:05:20Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-11-13T19:45:31Z"}, "message": "fix various typos in doc comments", "tree": {"sha": "ecd0cb5a9d4d5fd320029b88881c4c786b27513b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd0cb5a9d4d5fd320029b88881c4c786b27513b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e35cbb22eceac145a6f794cde869b3684e0b1d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlvrKeEWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdEgFB/0YcM7EoWTj0V03bPTagaxz+D/r\nT+U9DFzeYamwnr/8qlAkSCbbUVGig9IOiN5slQwjfp5ShouY7ljFxvtzJkDgw3+D\n0giOE0DfYTS1w9eNBmDgu3ZToZ9v6MSYH+vDrZg05trJaX+5qkx6sr8F+D2wvHd8\nedLbpJeMYfYzwl1/5ofnnf5T+9/ARtRIHy4feVR/UXl2SpMOyYB7xoL4RVPPX2lG\ns+h624QWXNw0df3sgugPyJXUd+aLbuOgBYwEwOo2TBWp3id7fxnjs9OXPJKN0gxY\nwOis1mvAVVTUEJkPn4RZe4CHQgSaFEmH+4THZdB1Xv8N7J7Spsj9ipn+bfvY\n=PSRD\n-----END PGP SIGNATURE-----", "payload": "tree ecd0cb5a9d4d5fd320029b88881c4c786b27513b\nparent 0195812aeafeecaa8760a4ddceae187472db8fe6\nauthor Andy Russell <arussell123@gmail.com> 1542045920 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1542138331 -0500\n\nfix various typos in doc comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e35cbb22eceac145a6f794cde869b3684e0b1d5", "html_url": "https://github.com/rust-lang/rust/commit/4e35cbb22eceac145a6f794cde869b3684e0b1d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e35cbb22eceac145a6f794cde869b3684e0b1d5/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0195812aeafeecaa8760a4ddceae187472db8fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0195812aeafeecaa8760a4ddceae187472db8fe6", "html_url": "https://github.com/rust-lang/rust/commit/0195812aeafeecaa8760a4ddceae187472db8fe6"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "f9b455fe796d1bf470bdfb4bf371d3fbc01c9bf5", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -69,7 +69,7 @@ struct LeafNode<K, V> {\n \n     /// This node's index into the parent node's `edges` array.\n     /// `*node.parent.edges[node.parent_idx]` should be the same thing as `node`.\n-    /// This is only guaranteed to be initialized when `parent` is nonnull.\n+    /// This is only guaranteed to be initialized when `parent` is non-null.\n     parent_idx: MaybeUninit<u16>,\n \n     /// The number of keys and values this node stores."}, {"sha": "e87bf78561c615fbbaff275f2a07b4e8eb8797c3", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -44,7 +44,7 @@ use boxed::Box;\n /// This enables you to use capacity growing logic catch the overflows in your length\n /// that might occur with zero-sized types.\n ///\n-/// However this means that you need to be careful when roundtripping this type\n+/// However this means that you need to be careful when round-tripping this type\n /// with a `Box<[T]>`: `cap()` won't yield the len. However `with_capacity`,\n /// `shrink_to_fit`, and `from_box` will actually set RawVec's private capacity\n /// field. This allows zero-sized types to not be special-cased by consumers of"}, {"sha": "d6c3996971a5816fd351f72f804aefec9d139813", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -445,7 +445,7 @@ impl f32 {\n     /// signaling NaNs on MIPS are quiet NaNs on x86, and vice-versa.\n     ///\n     /// Rather than trying to preserve signaling-ness cross-platform, this\n-    /// implementation favours preserving the exact bits. This means that\n+    /// implementation favors preserving the exact bits. This means that\n     /// any payloads encoded in NaNs will be preserved even if the result of\n     /// this method is sent over the network from an x86 machine to a MIPS one.\n     ///"}, {"sha": "c0ce7255d62875cdd64e12a469d233aedaddbae2", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -108,7 +108,7 @@ impl Drop for Waker {\n /// is ready to be run.\n ///\n /// This is similar to the `Waker` type, but cannot be sent across threads.\n-/// Task executors can use this type to implement more optimized singlethreaded wakeup\n+/// Task executors can use this type to implement more optimized single-threaded wakeup\n /// behavior.\n #[repr(transparent)]\n #[derive(Clone)]"}, {"sha": "60b6a8bac41d399c59b21b9847333eb154394970", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -535,7 +535,7 @@ impl TokenTree {\n     }\n }\n \n-/// Prints token treee in a form convenient for debugging.\n+/// Prints token tree in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for TokenTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -730,7 +730,7 @@ impl fmt::Debug for Group {\n \n /// An `Punct` is an single punctuation character like `+`, `-` or `#`.\n ///\n-/// Multicharacter operators like `+=` are represented as two instances of `Punct` with different\n+/// Multi-character operators like `+=` are represented as two instances of `Punct` with different\n /// forms of `Spacing` returned.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Clone)]\n@@ -788,7 +788,7 @@ impl Punct {\n \n     /// Returns the spacing of this punctuation character, indicating whether it's immediately\n     /// followed by another `Punct` in the token stream, so they can potentially be combined into\n-    /// a multicharacter operator (`Joint`), or it's followed by some other token or whitespace\n+    /// a multi-character operator (`Joint`), or it's followed by some other token or whitespace\n     /// (`Alone`) so the operator has certainly ended.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn spacing(&self) -> Spacing {\n@@ -947,7 +947,7 @@ macro_rules! suffixed_int_literals {\n         /// This function will create an integer like `1u32` where the integer\n         /// value specified is the first part of the token and the integral is\n         /// also suffixed at the end.\n-        /// Literals created from negative numbers may not survive rountrips through\n+        /// Literals created from negative numbers may not survive round-trips through\n         /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n         ///\n         /// Literals created through this method have the `Span::call_site()`\n@@ -1047,7 +1047,7 @@ impl Literal {\n \n     /// Creates a new suffixed floating-point literal.\n     ///\n-    /// This consturctor will create a literal like `1.0f32` where the value\n+    /// This constructor will create a literal like `1.0f32` where the value\n     /// specified is the preceding part of the token and `f32` is the suffix of\n     /// the token. This token will always be inferred to be an `f32` in the\n     /// compiler.\n@@ -1096,7 +1096,7 @@ impl Literal {\n \n     /// Creates a new suffixed floating-point literal.\n     ///\n-    /// This consturctor will create a literal like `1.0f64` where the value\n+    /// This constructor will create a literal like `1.0f64` where the value\n     /// specified is the preceding part of the token and `f64` is the suffix of\n     /// the token. This token will always be inferred to be an `f64` in the\n     /// compiler."}, {"sha": "0392d32989697f8b20c8896a277c8911941d5397", "filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! Some facilities for tracking how codegen-units are reused during incremental\n-//! compilition. This is used for incremental compiliation tests and debug\n+//! compilation. This is used for incremental compilation tests and debug\n //! output.\n \n use session::Session;"}, {"sha": "e4c434b562ddc96d824d192d6af8fbbcead0eb8e", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -36,7 +36,7 @@ pub enum NonMacroAttrKind {\n     Tool,\n     /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n     DeriveHelper,\n-    /// Single-segment custom attriubte registered by a legacy plugin (`register_attribute`).\n+    /// Single-segment custom attribute registered by a legacy plugin (`register_attribute`).\n     LegacyPluginHelper,\n     /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n     Custom,"}, {"sha": "a787eeae663fd5a0d44baebdea866073b4f09a4e", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -10,7 +10,7 @@\n \n //! This module contains the \"canonicalizer\" itself.\n //!\n-//! For an overview of what canonicaliation is and how it fits into\n+//! For an overview of what canonicalization is and how it fits into\n //! rustc, check out the [chapter in the rustc guide][c].\n //!\n //! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html"}, {"sha": "6f3d10268351a5907c8b928d8fa8dda099b51d04", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -556,7 +556,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them.\n-    /// The second set is produced lazilly by supplying indices from the first set.\n+    /// The second set is produced lazily by supplying indices from the first set.\n     fn unify_canonical_vars(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "0b4d863bf4d1a6ce6b476772e15458ccb398361f", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -11,7 +11,7 @@\n //! This module contains code to substitute new values into a\n //! `Canonical<'tcx, T>`.\n //!\n-//! For an overview of what canonicaliation is and how it fits into\n+//! For an overview of what canonicalization is and how it fits into\n //! rustc, check out the [chapter in the rustc guide][c].\n //!\n //! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html"}, {"sha": "7a92b3084ba9febeda8e4aa283571c11c77bca91", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -20,7 +20,7 @@ use util::common::ErrorReported;\n use infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n-    /// Print the error message for lifetime errors when binding excapes a closure.\n+    /// Print the error message for lifetime errors when binding escapes a closure.\n     ///\n     /// Consider a case where we have\n     ///"}, {"sha": "877ca0d067be7d29bcfda9836f1a678be1b264de", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -428,7 +428,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ///\n     /// This routine is only intended to be used when the leak-check has\n     /// passed; currently, it's used in the trait matching code to create\n-    /// a set of nested obligations frmo an impl that matches against\n+    /// a set of nested obligations from an impl that matches against\n     /// something higher-ranked.  More details can be found in\n     /// `librustc/middle/traits/README.md`.\n     ///"}, {"sha": "0453615f1646ab472c3b4192a41858f32e988cd4", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -1160,10 +1160,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Takes ownership of the list of variable regions. This implies\n-    /// that all the region constriants have already been taken, and\n+    /// that all the region constraints have already been taken, and\n     /// hence that `resolve_regions_and_report_errors` can never be\n     /// called. This is used only during NLL processing to \"hand off\" ownership\n-    /// of the set of region vairables into the NLL region context.\n+    /// of the set of region variables into the NLL region context.\n     pub fn take_region_var_origins(&self) -> VarInfos {\n         let (var_infos, data) = self.region_constraints\n             .borrow_mut()\n@@ -1478,7 +1478,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Clears the selection, evaluation, and projection caches. This is useful when\n-    /// repeatedly attemping to select an Obligation while changing only\n+    /// repeatedly attempting to select an Obligation while changing only\n     /// its ParamEnv, since FulfillmentContext doesn't use 'probe'\n     pub fn clear_caches(&self) {\n         self.selection_cache.clear();"}, {"sha": "bec19ba9099dce782ca07af507ecaaa5c371c858", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -320,7 +320,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     /// but which have only been unified since `s` started, and\n     /// return the types with which they were unified. So if we had\n     /// a type variable `V0`, then we started the snapshot, then we\n-    /// created a type variable `V1`, unifed `V0` with `T0`, and\n+    /// created a type variable `V1`, unified `V0` with `T0`, and\n     /// unified `V1` with `T1`, this function would return `{T0}`.\n     pub fn types_escaping_snapshot(&mut self, s: &Snapshot<'tcx>) -> Vec<Ty<'tcx>> {\n         let mut new_elem_threshold = u32::MAX;"}, {"sha": "cfb9f04c4c6d104a869ed5d839a855695660f8ff", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -189,7 +189,7 @@ impl<'a> LintLevelsBuilder<'a> {\n     /// This function will perform a number of tasks:\n     ///\n     /// * It'll validate all lint-related attributes in `attrs`\n-    /// * It'll mark all lint-related attriutes as used\n+    /// * It'll mark all lint-related attributes as used\n     /// * Lint levels will be updated based on the attributes provided\n     /// * Lint attributes are validated, e.g. a #[forbid] can't be switched to\n     ///   #[allow]"}, {"sha": "ee6d970750adfc0a7a4b96eea37dc0dc6894eb6a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -224,7 +224,7 @@ impl Default for ErrorOutputType {\n \n // Use tree-based collections to cheaply get a deterministic Hash implementation.\n // DO NOT switch BTreeMap out for an unsorted container type! That would break\n-// dependency tracking for commandline arguments.\n+// dependency tracking for command-line arguments.\n #[derive(Clone, Hash)]\n pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n \n@@ -273,7 +273,7 @@ impl OutputTypes {\n \n // Use tree-based collections to cheaply get a deterministic Hash implementation.\n // DO NOT switch BTreeMap or BTreeSet out for an unsorted container type! That\n-// would break dependency tracking for commandline arguments.\n+// would break dependency tracking for command-line arguments.\n #[derive(Clone, Hash)]\n pub struct Externs(BTreeMap<String, BTreeSet<Option<String>>>);\n \n@@ -339,7 +339,7 @@ macro_rules! top_level_options {\n     );\n }\n \n-// The top-level commandline options struct\n+// The top-level command-line options struct\n //\n // For each option, one has to specify how it behaves with regard to the\n // dependency tracking system of incremental compilation. This is done via the\n@@ -2377,11 +2377,11 @@ impl fmt::Display for CrateType {\n     }\n }\n \n-/// Commandline arguments passed to the compiler have to be incorporated with\n+/// Command-line arguments passed to the compiler have to be incorporated with\n /// the dependency tracking system for incremental compilation. This module\n /// provides some utilities to make this more convenient.\n ///\n-/// The values of all commandline arguments that are relevant for dependency\n+/// The values of all command-line arguments that are relevant for dependency\n /// tracking are hashed into a single value that determines whether the\n /// incremental compilation cache can be re-used or not. This hashing is done\n /// via the DepTrackingHash trait defined below, since the standard Hash\n@@ -2394,7 +2394,7 @@ impl fmt::Display for CrateType {\n /// impl_dep_tracking_hash_via_hash!() macro that allows to simply reuse the\n /// Hash implementation for DepTrackingHash. It's important though that\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n-/// how the hash should be calculated when adding a new commandline argument.\n+/// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n     use lint;\n     use middle::cstore;"}, {"sha": "99dc099d57738ec67109b9101268cefc3c886cd1", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -200,7 +200,7 @@ impl_stable_hash_for!(struct DtorckConstraint<'tcx> {\n /// trivial for dropck-outlives.\n ///\n /// Note also that `needs_drop` requires a \"global\" type (i.e., one\n-/// with erased regions), but this funtcion does not.\n+/// with erased regions), but this function does not.\n pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         // None of these types have a destructor and hence they do not"}, {"sha": "ad1bf63c1d5cfa296b9b7adedd45018590c20794", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -783,7 +783,7 @@ pub fn shift_vars<'a, 'gcx, 'tcx, T>(\n ///\n /// Note that what I'm calling an \"escaping var\" is often just called a \"free var\". However,\n /// we already use the term \"free var\". It refers to the regions or types that we use to represent\n-/// bound regions or type params on a fn definition while we are typechecking its body.\n+/// bound regions or type params on a fn definition while we are type checking its body.\n ///\n /// To clarify, conceptually there is no particular difference between\n /// an \"escaping\" var and a \"free\" var. However, there is a big\n@@ -859,7 +859,7 @@ struct LateBoundRegionsCollector {\n \n     /// If true, we only want regions that are known to be\n     /// \"constrained\" when you equate this type with another type. In\n-    /// partcular, if you have e.g. `&'a u32` and `&'b u32`, equating\n+    /// particular, if you have e.g. `&'a u32` and `&'b u32`, equating\n     /// them constraints `'a == 'b`.  But if you have `<&'a u32 as\n     /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those\n     /// types may mean that `'a` and `'b` don't appear in the results,"}, {"sha": "fde208b3faf3f56e38df7610529364503b4eb5d2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -1279,7 +1279,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n /// Type size \"skeleton\", i.e. the only information determining a type's size.\n /// While this is conservative, (aside from constant sizes, only pointers,\n /// newtypes thereof and null pointer optimized enums are allowed), it is\n-/// enough to statically check common usecases of transmute.\n+/// enough to statically check common use cases of transmute.\n #[derive(Copy, Clone, Debug)]\n pub enum SizeSkeleton<'tcx> {\n     /// Any statically computable Layout."}, {"sha": "a6197150f25f6b8329044323c7fd8741557477d3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -2394,7 +2394,7 @@ impl<'a, 'gcx, 'tcx> FieldDef {\n \n /// Represents the various closure traits in the Rust language. This\n /// will determine the type of the environment (`self`, in the\n-/// desuaring) argument that the closure expects.\n+/// desugaring) argument that the closure expects.\n ///\n /// You can get the environment type of a closure using\n /// `tcx.closure_env_ty()`."}, {"sha": "aedc14cd85c1a3330a1f2d3daec8a09afef1d13f", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -941,7 +941,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n ///\n /// In the process of working on rust-lang/rust#55238 a mysterious segfault was\n /// stumbled upon. The segfault was never reproduced locally, but it was\n-/// suspected to be releated to the fact that codegen worker threads were\n+/// suspected to be related to the fact that codegen worker threads were\n /// sticking around by the time the main thread was exiting, causing issues.\n ///\n /// This structure is an attempt to fix that issue where the `codegen_aborted`"}, {"sha": "267d7e0d54b637c267054d7336401dcf0d61a3f3", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -184,7 +184,7 @@ const WASM_WHITELIST: &[(&str, Option<&str>)] = &[\n ];\n \n /// When rustdoc is running, provide a list of all known features so that all their respective\n-/// primtives may be documented.\n+/// primitives may be documented.\n ///\n /// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n /// iterator!"}, {"sha": "f8593363bb16ab333cfefe775006befd19c3622d", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -79,7 +79,7 @@\n //! - In order to be able to also use symbols from two versions of the same\n //!   crate (which naturally also have the same name), a stronger measure is\n //!   required: The compiler accepts an arbitrary \"disambiguator\" value via the\n-//!   `-C metadata` commandline argument. This disambiguator is then fed into\n+//!   `-C metadata` command-line argument. This disambiguator is then fed into\n //!   the symbol hash of every exported item. Consequently, the symbols in two\n //!   identical crates but with different disambiguators are not in conflict\n //!   with each other. This facility is mainly intended to be used by build"}, {"sha": "64de0c2f565a1d32efadf0973282c5c92b674b48", "filename": "src/librustc_data_structures/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -38,7 +38,7 @@ struct SccData<S: Idx> {\n     /// successors can be found.\n     ranges: IndexVec<S, Range<usize>>,\n \n-    /// Contains the succcessors for all the Sccs, concatenated. The\n+    /// Contains the successors for all the Sccs, concatenated. The\n     /// range of indices corresponding to a given SCC is found in its\n     /// SccData.\n     all_successors: Vec<S>,"}, {"sha": "27c2f8b718ab8bebb7f955e36cde1c30f515a52c", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -452,7 +452,7 @@ impl<O, T: ?Sized> OwningRef<O, T> {\n     /// use owning_ref::{OwningRef, Erased};\n     ///\n     /// fn main() {\n-    ///     // NB: Using the concrete types here for explicitnes.\n+    ///     // NB: Using the concrete types here for explicitness.\n     ///     // For less verbose code type aliases like `BoxRef` are provided.\n     ///\n     ///     let owning_ref_a: OwningRef<Box<[i32; 4]>, [i32; 4]>\n@@ -722,7 +722,7 @@ impl<O, T: ?Sized> OwningRefMut<O, T> {\n     /// use owning_ref::{OwningRefMut, Erased};\n     ///\n     /// fn main() {\n-    ///     // NB: Using the concrete types here for explicitnes.\n+    ///     // NB: Using the concrete types here for explicitness.\n     ///     // For less verbose code type aliases like `BoxRef` are provided.\n     ///\n     ///     let owning_ref_mut_a: OwningRefMut<Box<[i32; 4]>, [i32; 4]>"}, {"sha": "29d99a6aef3f2d9c96f02f6bff740fa4bc8576b8", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -15,7 +15,7 @@ use std::mem;\n use std::ops::{RangeBounds, Bound, Index, IndexMut};\n \n /// `SortedMap` is a data structure with similar characteristics as BTreeMap but\n-/// slightly different trade-offs: lookup, inseration, and removal are O(log(N))\n+/// slightly different trade-offs: lookup, insertion, and removal are O(log(N))\n /// and elements can be iterated in order cheaply.\n ///\n /// `SortedMap` can be faster than a `BTreeMap` for small sizes (<50) since it"}, {"sha": "ec3cb95db88f8675777c52f71e0a541e79faf4d7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -643,8 +643,8 @@ impl Compilation {\n     }\n }\n \n-/// A trait for customising the compilation process. Offers a number of hooks for\n-/// executing custom code or customising input.\n+/// A trait for customizing the compilation process. Offers a number of hooks for\n+/// executing custom code or customizing input.\n pub trait CompilerCalls<'a> {\n     /// Hook for a callback early in the process of handling arguments. This will\n     /// be called straight after options have been parsed but before anything"}, {"sha": "f76086139ed7e454c95fa0b9e0ef8a07a76de5aa", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -160,7 +160,7 @@ const LABELS_FN_IN_TRAIT: &[&[&str]] = &[\n     EXTRA_TRAIT,\n ];\n \n-/// For generic cases like inline-assemply/mod/etc\n+/// For generic cases like inline-assembly/mod/etc\n const LABELS_HIR_ONLY: &[&[&str]] = &[\n     BASE_HIR,\n ];"}, {"sha": "a327efc512bacc689c0cfb99e45c672aa512db82", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -1486,7 +1486,7 @@ declare_lint! {\n     \"detects edition keywords being used as an identifier\"\n }\n \n-/// Checks for uses of edtion keywords used as an identifier\n+/// Checks for uses of edition keywords used as an identifier\n #[derive(Clone)]\n pub struct KeywordIdents;\n "}, {"sha": "b318e73e26fa1db43ee70e84eaa80f4ee3545264", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -111,7 +111,7 @@ mod relate_tys;\n /// - `liveness` -- results of a liveness computation on the MIR; used to create liveness\n ///   constraints for the regions in the types of variables\n /// - `flow_inits` -- results of a maybe-init dataflow analysis\n-/// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysiss\n+/// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n pub(crate) fn type_check<'gcx, 'tcx>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'gcx>,"}, {"sha": "715d6e0c0d1b3685431039b4c0911dd7ee6a13c1", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -262,7 +262,7 @@ struct PlaceComponents<'p, 'tcx: 'p> {\n impl<'p, 'tcx> PlaceComponents<'p, 'tcx> {\n     /// Converts a list of `Place` components into an iterator; this\n     /// iterator yields up a never-ending stream of `Option<&Place>`.\n-    /// These begin with the \"innermst\" place and then with each\n+    /// These begin with the \"innermost\" place and then with each\n     /// projection therefrom. So given a place like `a.b.c` it would\n     /// yield up:\n     ///"}, {"sha": "1f510a17df220ad52971f743d02ae1d24a7379f8", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -30,7 +30,7 @@ use std::cmp::Ordering;\n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Identifies what test is needed to decide if `match_pair` is applicable.\n     ///\n-    /// It is a bug to call this with a simplifyable pattern.\n+    /// It is a bug to call this with a simplifiable pattern.\n     pub fn test<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> Test<'tcx> {\n         match *match_pair.pattern.kind {\n             PatternKind::Variant { ref adt_def, substs: _, variant_index: _, subpatterns: _ } => {"}, {"sha": "d768601a33acd805ad3a8717a17f5fb0ea5f1863", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -115,7 +115,7 @@ pub enum StmtKind<'tcx> {\n /// reference to an expression in this enum is an `ExprRef<'tcx>`, which\n /// may in turn be another instance of this enum (boxed), or else an\n /// unlowered `&'tcx H::Expr`. Note that instances of `Expr` are very\n-/// shortlived. They are created by `Hair::to_expr`, analyzed and\n+/// short-lived. They are created by `Hair::to_expr`, analyzed and\n /// converted into MIR, and then discarded.\n ///\n /// If you compare `Expr` to the full compiler AST, you will see it is"}, {"sha": "bf2058dcd27aa02654b68287661d98f8387f4db5", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -55,11 +55,11 @@\n /// all the values it covers are already covered by row 2.\n ///\n /// To compute `U`, we must have two other concepts.\n-///     1. `S(c, P)` is a \"specialised matrix\", where `c` is a constructor (like `Some` or\n+///     1. `S(c, P)` is a \"specialized matrix\", where `c` is a constructor (like `Some` or\n ///        `None`). You can think of it as filtering `P` to just the rows whose *first* pattern\n ///        can cover `c` (and expanding OR-patterns into distinct patterns), and then expanding\n ///        the constructor into all of its components.\n-///        The specialisation of a row vector is computed by `specialize`.\n+///        The specialization of a row vector is computed by `specialize`.\n ///\n ///        It is computed as follows. For each row `p_i` of P, we have four cases:\n ///             1.1. `p_(i,1) = c(r_1, .., r_a)`. Then `S(c, P)` has a corresponding row:\n@@ -1453,7 +1453,7 @@ fn should_treat_range_exhaustively(tcx: TyCtxt<'_, 'tcx, 'tcx>, ctor: &Construct\n /// mean creating a separate constructor for every single value in the range, which is clearly\n /// impractical. However, observe that for some ranges of integers, the specialisation will be\n /// identical across all values in that range (i.e. there are equivalence classes of ranges of\n-/// constructors based on their `is_useful_specialised` outcome). These classes are grouped by\n+/// constructors based on their `is_useful_specialized` outcome). These classes are grouped by\n /// the patterns that apply to them (in the matrix `P`). We can split the range whenever the\n /// patterns that apply to that range (specifically: the patterns that *intersect* with that range)\n /// change."}, {"sha": "8f267af654b077d6b78c6897e3f7eaf033218e7a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -67,7 +67,7 @@ macro_rules! try_validation {\n     }}\n }\n \n-/// We want to show a nice path to the invalid field for diagnotsics,\n+/// We want to show a nice path to the invalid field for diagnostics,\n /// but avoid string operations in the happy case where no error happens.\n /// So we track a `Vec<PathElem>` where `PathElem` contains all the data we\n /// need to later print something for the user."}, {"sha": "a90cccfa7a7749dd4e87d10a12c4d3c66d2207ab", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n     /// While the `ExprUseVisitor` walks, we will identify which\n     /// expressions are borrowed, and insert their ids into this\n     /// table. Actually, we insert the \"borrow-id\", which is normally\n-    /// the id of the expession being borrowed: but in the case of\n+    /// the id of the expression being borrowed: but in the case of\n     /// `ref mut` borrows, the `id` of the pattern is\n     /// inserted. Therefore later we remove that entry from the table\n     /// and transfer it over to the value being matched. This will"}, {"sha": "2f9f29adcc1a3e0df0fc2f1bad3af5ac271b9d98", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -1437,7 +1437,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     ///\n     /// 1. Because the numbers of the region variables would otherwise be fairly unique to this\n     ///    particular method call, it winds up creating fewer types overall, which helps for memory\n-    ///    usage. (Admittedly, this is a rather small effect, though measureable.)\n+    ///    usage. (Admittedly, this is a rather small effect, though measurable.)\n     ///\n     /// 2. It makes it easier to deal with higher-ranked trait bounds, because we can replace any\n     ///    late-bound regions with 'static. Otherwise, if we were going to replace late-bound"}, {"sha": "f4d05c6dbd65c000e5fe6faa575f26e9ae8721a0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -187,7 +187,7 @@ pub struct RenderOptions {\n     /// Whether to generate a table of contents on the output file when reading a standalone\n     /// Markdown file.\n     pub markdown_no_toc: bool,\n-    /// Additional CSS files to link in pages generated from standlone Markdown files.\n+    /// Additional CSS files to link in pages generated from standalone Markdown files.\n     pub markdown_css: Vec<String>,\n     /// If present, playground URL to use in the \"Run\" button added to code samples generated from\n     /// standalone Markdown files. If not present, `playground_url` is used."}, {"sha": "100ec8535c8415ad040262c1b434c709204dfc46", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -85,7 +85,7 @@ pub use alloc_crate::alloc::*;\n /// This is based on `malloc` on Unix platforms and `HeapAlloc` on Windows,\n /// plus related functions.\n ///\n-/// This type implements the `GlobalAlloc` trait and Rust programs by deafult\n+/// This type implements the `GlobalAlloc` trait and Rust programs by default\n /// work as if they had this definition:\n ///\n /// ```rust"}, {"sha": "bb2f152edc63d8190aa873bf10f573a8e41fa7b5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -1569,7 +1569,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// where the key should go, meaning the keys may become \"lost\" if their\n     /// location does not reflect their state. For instance, if you change a key\n     /// so that the map now contains keys which compare equal, search may start\n-    /// acting eratically, with two keys randomly masking eachother. Implementations\n+    /// acting erratically, with two keys randomly masking each other. Implementations\n     /// are free to assume this doesn't happen (within the limits of memory-safety).\n     #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n     pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<K, V, S> {"}, {"sha": "13cf3133dcd1246b8b940d4717faa5d79e8ca625", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -615,7 +615,7 @@ mod loop_keyword { }\n //\n /// The keyword used to define structs.\n ///\n-/// Structs in Rust come in three flavours: Structs with named fields, tuple structs, and unit\n+/// Structs in Rust come in three flavors: Structs with named fields, tuple structs, and unit\n /// structs.\n ///\n /// ```rust"}, {"sha": "e5838b954ed492b5c9deea46bbaac1b1b086236b", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -852,7 +852,7 @@ impl From<[u8; 4]> for IpAddr {\n impl Ipv6Addr {\n     /// Creates a new IPv6 address from eight 16-bit segments.\n     ///\n-    /// The result will represent the IP address a:b:c:d:e:f:g:h.\n+    /// The result will represent the IP address `a:b:c:d:e:f:g:h`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "437153b56e49b70d4e37259ac7faf6014302e763", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -1119,7 +1119,7 @@ impl From<fs::File> for Stdio {\n     /// let file = File::open(\"foo.txt\").unwrap();\n     ///\n     /// let reverse = Command::new(\"rev\")\n-    ///     .stdin(file)  // Implicit File convertion into a Stdio\n+    ///     .stdin(file)  // Implicit File conversion into a Stdio\n     ///     .output()\n     ///     .expect(\"failed reverse command\");\n     ///\n@@ -1337,7 +1337,7 @@ impl Child {\n     /// Attempts to collect the exit status of the child if it has already\n     /// exited.\n     ///\n-    /// This function will not block the calling thread and will only advisorily\n+    /// This function will not block the calling thread and will only\n     /// check to see if the child process has exited or not. If the child has\n     /// exited then on Unix the process id is reaped. This function is\n     /// guaranteed to repeatedly return a successful exit status so long as the"}, {"sha": "d62b09134bbf1fb20d8dea6cd24d9da7850b76d6", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -26,7 +26,7 @@ impl FileDesc {\n \n     pub fn raw(&self) -> usize { self.fd }\n \n-    /// Extracts the actual filedescriptor without closing it.\n+    /// Extracts the actual file descriptor without closing it.\n     pub fn into_raw(self) -> usize {\n         let fd = self.fd;\n         mem::forget(self);"}, {"sha": "246a86c29ece4438d986c27014f54221ea08f22a", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -45,7 +45,7 @@ pub unsafe fn brk(addr: usize) -> Result<usize> {\n /// # Errors\n ///\n /// * `EACCES` - permission is denied for one of the components of `path`, or `path`\n-/// * `EFAULT` - `path` does not point to the process's addressible memory\n+/// * `EFAULT` - `path` does not point to the process's addressable memory\n /// * `EIO` - an I/O error occurred\n /// * `ENOENT` - `path` does not exit\n /// * `ENOTDIR` - `path` is not a directory\n@@ -347,7 +347,7 @@ pub fn waitpid(pid: usize, status: &mut usize, options: usize) -> Result<usize>\n ///\n /// * `EAGAIN` - the file descriptor was opened with `O_NONBLOCK` and writing would block\n /// * `EBADF` - the file descriptor is not valid or is not open for writing\n-/// * `EFAULT` - `buf` does not point to the process's addressible memory\n+/// * `EFAULT` - `buf` does not point to the process's addressable memory\n /// * `EIO` - an I/O error occurred\n /// * `ENOSPC` - the device containing the file descriptor has no room for data\n /// * `EPIPE` - the file descriptor refers to a pipe or socket whose reading end is closed"}, {"sha": "5a81d6dfb672e6950ead6d4d5417e839b7ba740e", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -46,7 +46,7 @@ impl FileDesc {\n \n     pub fn raw(&self) -> c_int { self.fd }\n \n-    /// Extracts the actual filedescriptor without closing it.\n+    /// Extracts the actual file descriptor without closing it.\n     pub fn into_raw(self) -> c_int {\n         let fd = self.fd;\n         mem::forget(self);"}, {"sha": "8a845efd41362ec66da7bb0210889b03bd1f672c", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -233,7 +233,7 @@ pub use self::local::{LocalKey, AccessError};\n ///\n /// You may want to use [`spawn`] instead of [`thread::spawn`], when you want\n /// to recover from a failure to launch a thread, indeed the free function will\n-/// panick where the `Builder` method will return a [`io::Result`].\n+/// panic where the `Builder` method will return a [`io::Result`].\n ///\n /// # Examples\n ///"}, {"sha": "cfdd4340a19fe7712de1ada27fa5f1ff9d910679", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -150,7 +150,7 @@ impl TokenTree {\n         }\n     }\n \n-    /// Modify the `TokenTree`'s span inplace.\n+    /// Modify the `TokenTree`'s span in-place.\n     pub fn set_span(&mut self, span: Span) {\n         match *self {\n             TokenTree::Token(ref mut sp, _) => *sp = span,"}, {"sha": "2f6b306e8f8baa2447dc602e74fbe4336a252e60", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e35cbb22eceac145a6f794cde869b3684e0b1d5/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4e35cbb22eceac145a6f794cde869b3684e0b1d5", "patch": "@@ -68,7 +68,7 @@\n //! The `i32`s in `B` and `C0` don't have an identifier, so the\n //! `Option<ident>`s would be `None` for them.\n //!\n-//! In the static cases, the structure is summarised, either into the just\n+//! In the static cases, the structure is summarized, either into the just\n //! spans of the fields or a list of spans and the field idents (for tuple\n //! structs and record structs, respectively), or a list of these, for\n //! enums (one for each variant). For empty struct and empty enum"}]}