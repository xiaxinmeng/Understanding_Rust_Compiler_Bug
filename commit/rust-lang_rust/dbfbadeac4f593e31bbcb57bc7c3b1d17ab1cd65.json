{"sha": "dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZmJhZGVhYzRmNTkzZTMxYmJjYjU3YmM3YzNiMWQxN2FiMWNkNjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-18T23:37:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-18T23:37:12Z"}, "message": "libcore: deny more...", "tree": {"sha": "0145cabc176d4046b0b4dc8f50b203a2e9a37e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0145cabc176d4046b0b4dc8f50b203a2e9a37e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "html_url": "https://github.com/rust-lang/rust/commit/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d20ff4d2718c820632b38c1e49d4de648a9810b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d20ff4d2718c820632b38c1e49d4de648a9810b", "html_url": "https://github.com/rust-lang/rust/commit/5d20ff4d2718c820632b38c1e49d4de648a9810b"}], "stats": {"total": 469, "additions": 233, "deletions": 236}, "files": [{"sha": "c124457118cb97768a98b181f70be07ad85e7dd9", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -338,7 +338,7 @@ pub struct LayoutErr {\n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl fmt::Display for LayoutErr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"invalid parameters to Layout::from_size_align\")\n     }\n }\n@@ -354,7 +354,7 @@ pub struct AllocErr;\n // (we need this for downstream impl of trait Error)\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n impl fmt::Display for AllocErr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"memory allocation failed\")\n     }\n }\n@@ -376,7 +376,7 @@ impl CannotReallocInPlace {\n // (we need this for downstream impl of trait Error)\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n impl fmt::Display for CannotReallocInPlace {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.description())\n     }\n }"}, {"sha": "d043ce34effcdf4d6aa62198ca5d586bab75c293", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -107,7 +107,7 @@ impl<T: 'static + ?Sized > Any for T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for dyn Any {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n@@ -117,14 +117,14 @@ impl fmt::Debug for dyn Any {\n // dispatch works with upcasting.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for dyn Any + Send {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n \n #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n impl fmt::Debug for dyn Any + Send + Sync {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }"}, {"sha": "fb9c99f667df230310c8c79563bf26c0c5bbcddf", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -55,7 +55,7 @@ pub struct TryFromSliceError(());\n \n impl fmt::Display for TryFromSliceError {\n     #[inline]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.__description(), f)\n     }\n }\n@@ -184,7 +184,7 @@ macro_rules! array_impls {\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T: fmt::Debug> fmt::Debug for [T; $N] {\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     fmt::Debug::fmt(&&self[..], f)\n                 }\n             }"}, {"sha": "c0ab364380fbd83d379fe22662e5d4eb20f80598", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -131,7 +131,7 @@ impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for EscapeDefault {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"EscapeDefault { .. }\")\n     }\n }"}, {"sha": "fcfd80d92660d8a28facb2ea90de54a5d731e551", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -577,14 +577,14 @@ pub struct BorrowError {\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Debug for BorrowError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowError\").finish()\n     }\n }\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Display for BorrowError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Display::fmt(\"already mutably borrowed\", f)\n     }\n }\n@@ -597,14 +597,14 @@ pub struct BorrowMutError {\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Debug for BorrowMutError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowMutError\").finish()\n     }\n }\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Display for BorrowMutError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Display::fmt(\"already borrowed\", f)\n     }\n }\n@@ -788,7 +788,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn borrow(&self) -> Ref<T> {\n+    pub fn borrow(&self) -> Ref<'_, T> {\n         self.try_borrow().expect(\"already mutably borrowed\")\n     }\n \n@@ -819,7 +819,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n     #[inline]\n-    pub fn try_borrow(&self) -> Result<Ref<T>, BorrowError> {\n+    pub fn try_borrow(&self) -> Result<Ref<'_, T>, BorrowError> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Ok(Ref {\n                 value: unsafe { &*self.value.get() },\n@@ -869,7 +869,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn borrow_mut(&self) -> RefMut<T> {\n+    pub fn borrow_mut(&self) -> RefMut<'_, T> {\n         self.try_borrow_mut().expect(\"already borrowed\")\n     }\n \n@@ -897,7 +897,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n     #[inline]\n-    pub fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError> {\n+    pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => Ok(RefMut {\n                 value: unsafe { &mut *self.value.get() },\n@@ -1245,7 +1245,7 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b,\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for Ref<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.value.fmt(f)\n     }\n }\n@@ -1402,7 +1402,7 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefM\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.value.fmt(f)\n     }\n }"}, {"sha": "ec9ac7ce8b1cb39c9a06d410af0e707273fa20ef", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -193,7 +193,7 @@ enum CharErrorKind {\n \n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl fmt::Display for ParseCharError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }\n@@ -240,7 +240,7 @@ pub struct CharTryFromError(());\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for CharTryFromError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)\n     }\n }\n@@ -316,4 +316,3 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         None\n     }\n }\n-"}, {"sha": "23059243c61d773e3210b71d2f7261d74994fa6f", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -128,7 +128,7 @@ impl DecodeUtf16Error {\n \n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl fmt::Display for DecodeUtf16Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"unpaired surrogate found: {:x}\", self.code)\n     }\n }"}, {"sha": "dedd2f758b6cb299336ccb15373165bd0a98f2fc", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -220,7 +220,7 @@ impl FusedIterator for EscapeUnicode {}\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeUnicode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         for c in self.clone() {\n             f.write_char(c)?;\n         }\n@@ -333,7 +333,7 @@ impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeDefault {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         for c in self.clone() {\n             f.write_char(c)?;\n         }\n@@ -367,7 +367,7 @@ impl FusedIterator for EscapeDebug {}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl fmt::Display for EscapeDebug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)\n     }\n }\n@@ -482,7 +482,7 @@ impl Iterator for CaseMappingIter {\n }\n \n impl fmt::Display for CaseMappingIter {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             CaseMappingIter::Three(a, b, c) => {\n                 f.write_char(a)?;\n@@ -503,14 +503,14 @@ impl fmt::Display for CaseMappingIter {\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for ToLowercase {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)\n     }\n }\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for ToUppercase {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)\n     }\n }"}, {"sha": "2906e5824ae70dcc35879f306cc40af73f56857f", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -39,7 +39,7 @@ pub enum c_void {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for c_void {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"c_void\")\n     }\n }\n@@ -62,7 +62,7 @@ extern {\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n           windows))]\n impl fmt::Debug for VaListImpl {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"va_list* {:p}\", self)\n     }\n }\n@@ -212,7 +212,7 @@ impl<'a> VaList<'a> {\n extern \"rust-intrinsic\" {\n     /// Destroy the arglist `ap` after initialization with `va_start` or\n     /// `va_copy`.\n-    fn va_end(ap: &mut VaList);\n+    fn va_end(ap: &mut VaList<'_>);\n \n     /// Copies the current location of arglist `src` to the arglist `dst`.\n     #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n@@ -222,9 +222,9 @@ extern \"rust-intrinsic\" {\n     fn va_copy<'a>(src: &VaList<'a>) -> VaList<'a>;\n     #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n               not(windows), not(all(target_arch = \"aarch64\", target_os = \"ios\"))))]\n-    fn va_copy(src: &VaList) -> VaListImpl;\n+    fn va_copy(src: &VaList<'_>) -> VaListImpl;\n \n     /// Loads an argument of type `T` from the `va_list` `ap` and increment the\n     /// argument `ap` points to.\n-    fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaList) -> T;\n+    fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaList<'_>) -> T;\n }"}, {"sha": "df86da5fc39068f421bd076da455c83637816166", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -6,7 +6,7 @@ struct PadAdapter<'a> {\n }\n \n impl<'a> PadAdapter<'a> {\n-    fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter, slot: &'b mut Option<Self>)\n+    fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter<'_>, slot: &'b mut Option<Self>)\n                         -> fmt::Formatter<'b> {\n         fmt.wrap_buf(move |buf| {\n             *slot = Some(PadAdapter {"}, {"sha": "4bd7d3b4b22e3b9e1cc3520be663a846dd7d5737", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -5,13 +5,13 @@ use crate::num::flt2dec;\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n-fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_decimal_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n                                     sign: flt2dec::Sign, precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n         // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n         // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n         // we decided whether that is valid or not.\n@@ -26,14 +26,14 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers that call both this and the above won't wind\n // up using the combined stack space of both functions in some cases.\n #[inline(never)]\n-fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter<'_>, num: &T,\n                                        sign: flt2dec::Sign, precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n                                                  sign, precision, false, buf.get_mut(),\n@@ -43,7 +43,7 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n }\n \n // Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_decimal_common<T>(fmt: &mut Formatter<'_>, num: &T,\n                               negative_zero: bool, min_precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n@@ -65,14 +65,14 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n-fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_exponential_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n                                         sign: flt2dec::Sign, precision: usize,\n                                         upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n@@ -84,15 +84,15 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers that call both this and the above won't wind\n // up using the combined stack space of both functions in some cases.\n #[inline(never)]\n-fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n+fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter<'_>,\n                                            num: &T, sign: flt2dec::Sign,\n                                            upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n@@ -102,7 +102,7 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n }\n \n // Common code of floating point LowerExp and UpperExp.\n-fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) -> Result\n+fn float_to_exponential_common<T>(fmt: &mut Formatter<'_>, num: &T, upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     let force_sign = fmt.sign_plus();\n@@ -123,28 +123,28 @@ macro_rules! floating {\n     ($ty:ident) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_decimal_common(fmt, self, true, 1)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_decimal_common(fmt, self, false, 0)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl LowerExp for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_exponential_common(fmt, self, false)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl UpperExp for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_exponential_common(fmt, self, true)\n             }\n         }"}, {"sha": "43c1a3b7767ab647838c9f4f3702e0a29271a881", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -55,7 +55,7 @@ pub mod rt {\n /// }\n ///\n /// impl fmt::Display for Triangle {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         write!(f, \"({}, {}, {})\", self.a, self.b, self.c)\n ///     }\n /// }\n@@ -191,7 +191,7 @@ pub trait Write {\n     /// assert_eq!(&buf, \"world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn write_fmt(mut self: &mut Self, args: Arguments) -> Result {\n+    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {\n         write(&mut self, args)\n     }\n }\n@@ -206,7 +206,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n         (**self).write_char(c)\n     }\n \n-    fn write_fmt(&mut self, args: Arguments) -> Result {\n+    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n         (**self).write_fmt(args)\n     }\n }\n@@ -238,7 +238,7 @@ pub struct Formatter<'a> {\n }\n \n // NB. Argument is essentially an optimized partially applied formatting function,\n-// equivalent to `exists T.(&T, fn(&T, &mut Formatter) -> Result`.\n+// equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.\n \n struct Void {\n     _priv: (),\n@@ -263,20 +263,20 @@ struct Void {\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n-    formatter: fn(&Void, &mut Formatter) -> Result,\n+    formatter: fn(&Void, &mut Formatter<'_>) -> Result,\n }\n \n impl<'a> ArgumentV1<'a> {\n     #[inline(never)]\n-    fn show_usize(x: &usize, f: &mut Formatter) -> Result {\n+    fn show_usize(x: &usize, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(x, f)\n     }\n \n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n     pub fn new<'b, T>(x: &'b T,\n-                      f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n+                      f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n             ArgumentV1 {\n                 formatter: mem::transmute(f),\n@@ -288,7 +288,7 @@ impl<'a> ArgumentV1<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n-    pub fn from_usize(x: &usize) -> ArgumentV1 {\n+    pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n \n@@ -406,14 +406,14 @@ pub struct Arguments<'a> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for Arguments<'_> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n         Display::fmt(self, fmt)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for Arguments<'_> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n         write(fmt.buf, *self)\n     }\n }\n@@ -463,7 +463,7 @@ impl Display for Arguments<'_> {\n /// }\n ///\n /// impl fmt::Debug for Point {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         write!(f, \"Point {{ x: {}, y: {} }}\", self.x, self.y)\n ///     }\n /// }\n@@ -533,7 +533,7 @@ pub trait Debug {\n     /// }\n     ///\n     /// impl fmt::Debug for Position {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"({:?}, {:?})\", self.longitude, self.latitude)\n     ///     }\n     /// }\n@@ -542,7 +542,7 @@ pub trait Debug {\n     ///            format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// Format trait for an empty format, `{}`.\n@@ -569,7 +569,7 @@ pub trait Debug {\n /// }\n ///\n /// impl fmt::Display for Point {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         write!(f, \"({}, {})\", self.x, self.y)\n ///     }\n /// }\n@@ -605,7 +605,7 @@ pub trait Display {\n     /// }\n     ///\n     /// impl fmt::Display for Position {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"({}, {})\", self.longitude, self.latitude)\n     ///     }\n     /// }\n@@ -614,7 +614,7 @@ pub trait Display {\n     ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `o` formatting.\n@@ -651,7 +651,7 @@ pub trait Display {\n /// struct Length(i32);\n ///\n /// impl fmt::Octal for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:o}\", val) // delegate to i32's implementation\n@@ -666,7 +666,7 @@ pub trait Display {\n pub trait Octal {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `b` formatting.\n@@ -701,7 +701,7 @@ pub trait Octal {\n /// struct Length(i32);\n ///\n /// impl fmt::Binary for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:b}\", val) // delegate to i32's implementation\n@@ -722,7 +722,7 @@ pub trait Octal {\n pub trait Binary {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `x` formatting.\n@@ -760,7 +760,7 @@ pub trait Binary {\n /// struct Length(i32);\n ///\n /// impl fmt::LowerHex for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:x}\", val) // delegate to i32's implementation\n@@ -775,7 +775,7 @@ pub trait Binary {\n pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `X` formatting.\n@@ -813,7 +813,7 @@ pub trait LowerHex {\n /// struct Length(i32);\n ///\n /// impl fmt::UpperHex for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:X}\", val) // delegate to i32's implementation\n@@ -828,7 +828,7 @@ pub trait LowerHex {\n pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `p` formatting.\n@@ -858,7 +858,7 @@ pub trait UpperHex {\n /// struct Length(i32);\n ///\n /// impl fmt::Pointer for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n ///\n ///         write!(f, \"{:p}\", self as *const Length)\n@@ -873,7 +873,7 @@ pub trait UpperHex {\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `e` formatting.\n@@ -902,7 +902,7 @@ pub trait Pointer {\n /// struct Length(i32);\n ///\n /// impl fmt::LowerExp for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///         write!(f, \"{}e1\", val / 10)\n ///     }\n@@ -916,7 +916,7 @@ pub trait Pointer {\n pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `E` formatting.\n@@ -945,7 +945,7 @@ pub trait LowerExp {\n /// struct Length(i32);\n ///\n /// impl fmt::UpperExp for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///         write!(f, \"{}E1\", val / 10)\n ///     }\n@@ -959,7 +959,7 @@ pub trait LowerExp {\n pub trait UpperExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// The `write` function takes an output stream, and an `Arguments` struct\n@@ -994,7 +994,7 @@ pub trait UpperExp {\n ///\n /// [`write!`]: ../../std/macro.write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn write(output: &mut dyn Write, args: Arguments) -> Result {\n+pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n         width: None,\n@@ -1183,7 +1183,7 @@ impl<'a> Formatter<'a> {\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n         #[inline(never)]\n-        fn write_prefix(f: &mut Formatter, sign: Option<char>, prefix: Option<&str>) -> Result {\n+        fn write_prefix(f: &mut Formatter<'_>, sign: Option<char>, prefix: Option<&str>) -> Result {\n             if let Some(c) = sign {\n                 f.buf.write_char(c)?;\n             }\n@@ -1331,7 +1331,7 @@ impl<'a> Formatter<'a> {\n     /// Takes the formatted parts and applies the padding.\n     /// Assumes that the caller already has rendered the parts with required precision,\n     /// so that `self.precision` can be ignored.\n-    fn pad_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {\n+    fn pad_formatted_parts(&mut self, formatted: &flt2dec::Formatted<'_>) -> Result {\n         if let Some(mut width) = self.width {\n             // for the sign-aware zero padding, we render the sign first and\n             // behave as if we had no sign from the beginning.\n@@ -1370,7 +1370,7 @@ impl<'a> Formatter<'a> {\n         }\n     }\n \n-    fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {\n+    fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted<'_>) -> Result {\n         fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n             buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n         }\n@@ -1453,7 +1453,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn write_fmt(&mut self, fmt: Arguments) -> Result {\n+    pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {\n         write(self.buf, fmt)\n     }\n \n@@ -1892,14 +1892,14 @@ impl Write for Formatter<'_> {\n         self.buf.write_char(c)\n     }\n \n-    fn write_fmt(&mut self, args: Arguments) -> Result {\n+    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n         write(self.buf, args)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for Error {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(\"an error occurred when formatting an argument\", f)\n     }\n }\n@@ -1911,11 +1911,11 @@ macro_rules! fmt_refs {\n         $(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized + $tr> $tr for &T {\n-            fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }\n         }\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized + $tr> $tr for &mut T {\n-            fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }\n         }\n         )*\n     }\n@@ -1925,36 +1925,36 @@ fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperEx\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Debug for ! {\n-    fn fmt(&self, _: &mut Formatter) -> Result {\n+    fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Display for ! {\n-    fn fmt(&self, _: &mut Formatter) -> Result {\n+    fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for bool {\n     #[inline]\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for bool {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(if *self { \"true\" } else { \"false\" }, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for str {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.write_char('\"')?;\n         let mut from = 0;\n         for (i, c) in self.char_indices() {\n@@ -1975,14 +1975,14 @@ impl Debug for str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for str {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(self)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for char {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.write_char('\\'')?;\n         for c in self.escape_debug() {\n             f.write_char(c)?\n@@ -1993,7 +1993,7 @@ impl Debug for char {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for char {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         if f.width.is_none() && f.precision.is_none() {\n             f.write_char(*self)\n         } else {\n@@ -2004,7 +2004,7 @@ impl Display for char {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         let old_width = f.width;\n         let old_flags = f.flags;\n \n@@ -2032,21 +2032,21 @@ impl<T: ?Sized> Pointer for *const T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for &T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for &mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Pointer::fmt(&(&**self as *const T), f)\n     }\n }\n@@ -2055,11 +2055,11 @@ impl<T: ?Sized> Pointer for &mut T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result { Pointer::fmt(self, f) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result { Pointer::fmt(self, f) }\n }\n \n macro_rules! peel {\n@@ -2072,7 +2072,7 @@ macro_rules! tuple {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments)]\n-            fn fmt(&self, f: &mut Formatter) -> Result {\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;\n                 $(\n@@ -2095,28 +2095,28 @@ tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for [T] {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.debug_list().entries(self.iter()).finish()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for () {\n     #[inline]\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"()\")\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for PhantomData<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"PhantomData\")\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Copy + Debug> Debug for Cell<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.debug_struct(\"Cell\")\n             .field(\"value\", &self.get())\n             .finish()\n@@ -2125,7 +2125,7 @@ impl<T: Copy + Debug> Debug for Cell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for RefCell<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         match self.try_borrow() {\n             Ok(borrow) => {\n                 f.debug_struct(\"RefCell\")\n@@ -2138,7 +2138,7 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n                 struct BorrowedPlaceholder;\n \n                 impl Debug for BorrowedPlaceholder {\n-                    fn fmt(&self, f: &mut Formatter) -> Result {\n+                    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                         f.write_str(\"<borrowed>\")\n                     }\n                 }\n@@ -2153,21 +2153,21 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for Ref<'_, T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Debug::fmt(&*(self.deref()), f)\n     }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"UnsafeCell\")\n     }\n }"}, {"sha": "f9b4c26496cdc7c54461e37945edec8b82160c22", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -46,7 +46,7 @@ trait GenericRadix {\n     fn digit(x: u8) -> u8;\n \n     /// Format an integer using the radix using a formatter.\n-    fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // The radix can be as low as 2, so we need a buffer of at least 128\n         // characters for a base 2 number.\n         let zero = T::zero();\n@@ -131,7 +131,7 @@ macro_rules! int_base {\n     ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::$Trait for $T {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 $Radix.fmt_int(*self as $U, f)\n             }\n         }\n@@ -143,7 +143,7 @@ macro_rules! debug {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::Debug for $T {\n             #[inline]\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 if f.debug_lower_hex() {\n                     fmt::LowerHex::fmt(self, f)\n                 } else if f.debug_upper_hex() {\n@@ -188,7 +188,7 @@ static DEC_DIGITS_LUT: &[u8; 200] =\n \n macro_rules! impl_Display {\n     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n-        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             let mut buf = uninitialized_array![u8; 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n@@ -243,7 +243,7 @@ macro_rules! impl_Display {\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl fmt::Display for $t {\n                 #[allow(unused_comparisons)]\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     let is_nonnegative = *self >= 0;\n                     let n = if is_nonnegative {\n                         self.$conv_fn()"}, {"sha": "98150fd9f821ea5679eec470a382340aa23dae6b", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -500,7 +500,7 @@ pub struct BuildHasherDefault<H>(marker::PhantomData<H>);\n \n #[stable(since = \"1.9.0\", feature = \"core_impl_debug\")]\n impl<H> fmt::Debug for BuildHasherDefault<H> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"BuildHasherDefault\")\n     }\n }"}, {"sha": "8c2aae477bf2a35ca1a31864ef517e36a81ea6a1", "filename": "src/libcore/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -34,7 +34,7 @@ impl<I: Clone, U: Clone + IntoIterator, F: Clone> Clone for FlatMap<I, U, F>\n impl<I: fmt::Debug, U: IntoIterator, F> fmt::Debug for FlatMap<I, U, F>\n     where U::IntoIter: fmt::Debug\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FlatMap\").field(\"inner\", &self.inner).finish()\n     }\n }\n@@ -120,7 +120,7 @@ impl<I, U> fmt::Debug for Flatten<I>\n     where I: Iterator + fmt::Debug, U: Iterator + fmt::Debug,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Flatten\").field(\"inner\", &self.inner).finish()\n     }\n }\n@@ -328,4 +328,3 @@ impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n             .rfold(init, |acc, iter| iter.rfold(acc, &mut fold))\n     }\n }\n-"}, {"sha": "61e6ab6b48a3fb7ce87a9e9672f84ed0f61244fa", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -553,7 +553,7 @@ impl<I, F> Map<I, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, F> fmt::Debug for Map<I, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Map\")\n             .field(\"iter\", &self.iter)\n             .finish()\n@@ -669,7 +669,7 @@ impl<I, P> Filter<I, P> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for Filter<I, P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Filter\")\n             .field(\"iter\", &self.iter)\n             .finish()\n@@ -793,7 +793,7 @@ impl<I, F> FilterMap<I, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, F> fmt::Debug for FilterMap<I, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FilterMap\")\n             .field(\"iter\", &self.iter)\n             .finish()\n@@ -1222,7 +1222,7 @@ impl<I, P> SkipWhile<I, P> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for SkipWhile<I, P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SkipWhile\")\n             .field(\"iter\", &self.iter)\n             .field(\"flag\", &self.flag)\n@@ -1310,7 +1310,7 @@ impl<I, P> TakeWhile<I, P> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for TakeWhile<I, P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"TakeWhile\")\n             .field(\"iter\", &self.iter)\n             .field(\"flag\", &self.flag)\n@@ -1634,7 +1634,7 @@ impl<I, St, F> Scan<I, St, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, St: fmt::Debug, F> fmt::Debug for Scan<I, St, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Scan\")\n             .field(\"iter\", &self.iter)\n             .field(\"state\", &self.state)\n@@ -1928,7 +1928,7 @@ impl<I, F> Inspect<I, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, F> fmt::Debug for Inspect<I, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Inspect\")\n             .field(\"iter\", &self.iter)\n             .finish()"}, {"sha": "70a3b70c180dc1169cf441d7d9981cea8032d65f", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -200,7 +200,7 @@ pub struct Empty<T>(marker::PhantomData<T>);\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T> fmt::Debug for Empty<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Empty\")\n     }\n }\n@@ -558,7 +558,7 @@ impl<T, F> Iterator for FromFn<F>\n \n #[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n impl<F> fmt::Debug for FromFn<F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FromFn\").finish()\n     }\n }\n@@ -631,7 +631,7 @@ impl<T, F> FusedIterator for Successors<T, F>\n \n #[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n impl<T: fmt::Debug, F> fmt::Debug for Successors<T, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Successors\")\n             .field(\"next\", &self.next)\n             .finish()"}, {"sha": "28db55578c3de7972a2d19b1795a337675e925b3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -65,7 +65,6 @@\n \n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(elided_lifetimes_in_paths)]\n \n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}, {"sha": "95480c6bf048dd5bd3af0b5ba44762cf9abc499f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -862,7 +862,7 @@ impl<T> hash::Hash for Discriminant<T> {\n \n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> fmt::Debug for Discriminant<T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_tuple(\"Discriminant\")\n            .field(&self.0)\n            .finish()"}, {"sha": "342ac69748d92a5d35d97cb53d8af2f7fcee56d6", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -459,7 +459,7 @@ macro_rules! define_bignum {\n         }\n \n         impl crate::fmt::Debug for $name {\n-            fn fmt(&self, f: &mut crate::fmt::Formatter) -> crate::fmt::Result {\n+            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>) -> crate::fmt::Result {\n                 use crate::mem;\n \n                 let sz = if self.size < 1 {1} else {self.size};"}, {"sha": "4536bbc94ad803e5d83117437d581d9a52541a25", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -196,7 +196,7 @@ impl ParseFloatError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseFloatError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }\n@@ -244,7 +244,7 @@ fn dec2flt<T: RawFloat>(s: &str) -> Result<T, ParseFloatError> {\n \n /// The main workhorse for the decimal-to-float conversion: Orchestrate all the preprocessing\n /// and figure out which algorithm should do the actual conversion.\n-fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n+fn convert<T: RawFloat>(mut decimal: Decimal<'_>) -> Result<T, ParseFloatError> {\n     simplify(&mut decimal);\n     if let Some(x) = trivial_cases(&decimal) {\n         return Ok(x);\n@@ -281,7 +281,7 @@ fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n \n /// Strip zeros where possible, even when this requires changing the exponent\n #[inline(always)]\n-fn simplify(decimal: &mut Decimal) {\n+fn simplify(decimal: &mut Decimal<'_>) {\n     let is_zero = &|&&d: &&u8| -> bool { d == b'0' };\n     // Trimming these zeros does not change anything but may enable the fast path (< 15 digits).\n     let leading_zeros = decimal.integral.iter().take_while(is_zero).count();\n@@ -306,7 +306,7 @@ fn simplify(decimal: &mut Decimal) {\n \n /// Returns a quick-an-dirty upper bound on the size (log10) of the largest value that Algorithm R\n /// and Algorithm M will compute while working on the given decimal.\n-fn bound_intermediate_digits(decimal: &Decimal, e: i64) -> u64 {\n+fn bound_intermediate_digits(decimal: &Decimal<'_>, e: i64) -> u64 {\n     // We don't need to worry too much about overflow here thanks to trivial_cases() and the\n     // parser, which filter out the most extreme inputs for us.\n     let f_len: u64 = decimal.integral.len() as u64 + decimal.fractional.len() as u64;\n@@ -325,7 +325,7 @@ fn bound_intermediate_digits(decimal: &Decimal, e: i64) -> u64 {\n }\n \n /// Detects obvious overflows and underflows without even looking at the decimal digits.\n-fn trivial_cases<T: RawFloat>(decimal: &Decimal) -> Option<T> {\n+fn trivial_cases<T: RawFloat>(decimal: &Decimal<'_>) -> Option<T> {\n     // There were zeros but they were stripped by simplify()\n     if decimal.integral.is_empty() && decimal.fractional.is_empty() {\n         return Some(T::ZERO);"}, {"sha": "cf3664a8748867a375802be4556a83a7b907e34c", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -44,7 +44,7 @@ pub enum ParseResult<'a> {\n \n /// Checks if the input string is a valid floating point number and if so, locate the integral\n /// part, the fractional part, and the exponent in it. Does not handle signs.\n-pub fn parse_decimal(s: &str) -> ParseResult {\n+pub fn parse_decimal(s: &str) -> ParseResult<'_> {\n     if s.is_empty() {\n         return Invalid;\n     }"}, {"sha": "c8a4ff7ca61e7cef706c5b11ac99e99d06183999", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -15,7 +15,7 @@ macro_rules! impl_nonzero_fmt {\n             #[$stability]\n             impl fmt::$Trait for $Ty {\n                 #[inline]\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     self.get().fmt(f)\n                 }\n             }\n@@ -164,42 +164,42 @@ pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_display\", since = \"1.10.0\")]\n impl<T: fmt::Display> fmt::Display for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::Binary> fmt::Binary for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::Octal> fmt::Octal for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::LowerHex> fmt::LowerHex for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -4423,7 +4423,7 @@ impl TryFromIntError {\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for TryFromIntError {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n@@ -4820,7 +4820,7 @@ impl ParseIntError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseIntError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }"}, {"sha": "a707f0cc0627acdd6c3cf404c0cb30e8380039b1", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -45,7 +45,7 @@ pub struct RangeFull;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for RangeFull {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"..\")\n     }\n }\n@@ -84,7 +84,7 @@ pub struct Range<Idx> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.start.fmt(fmt)?;\n         write!(fmt, \"..\")?;\n         self.end.fmt(fmt)?;\n@@ -186,7 +186,7 @@ pub struct RangeFrom<Idx> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.start.fmt(fmt)?;\n         write!(fmt, \"..\")?;\n         Ok(())\n@@ -270,7 +270,7 @@ pub struct RangeTo<Idx> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"..\")?;\n         self.end.fmt(fmt)?;\n         Ok(())\n@@ -473,7 +473,7 @@ impl<Idx> RangeInclusive<Idx> {\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.start.fmt(fmt)?;\n         write!(fmt, \"..=\")?;\n         self.end.fmt(fmt)?;\n@@ -611,7 +611,7 @@ pub struct RangeToInclusive<Idx> {\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"..=\")?;\n         self.end.fmt(fmt)?;\n         Ok(())"}, {"sha": "9599491462e922607c199151fc1af0fe72f3014e", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -538,7 +538,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { inner: Item { opt: self.as_ref() } }\n     }\n \n@@ -559,7 +559,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         IterMut { inner: Item { opt: self.as_mut() } }\n     }\n "}, {"sha": "989fc96732a5ab789b6273c3174833b68d6cc162", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -86,7 +86,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// [`fmt::write`]: ../fmt/fn.write.html\n     #[unstable(feature = \"panic_info_message\", issue = \"44489\")]\n-    pub fn message(&self) -> Option<&fmt::Arguments> {\n+    pub fn message(&self) -> Option<&fmt::Arguments<'_>> {\n         self.message\n     }\n \n@@ -115,7 +115,7 @@ impl<'a> PanicInfo<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn location(&self) -> Option<&Location> {\n+    pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,\n         // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n@@ -124,7 +124,7 @@ impl<'a> PanicInfo<'a> {\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n impl fmt::Display for PanicInfo<'_> {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         formatter.write_str(\"panicked at \")?;\n         if let Some(message) = self.message {\n             write!(formatter, \"'{}', \", message)?\n@@ -249,7 +249,7 @@ impl<'a> Location<'a> {\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n impl fmt::Display for Location<'_> {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(formatter, \"{}:{}:{}\", self.file, self.line, self.col)\n     }\n }"}, {"sha": "15b7d69c58d24b09fc9abaa57daf3b91c80c07aa", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -65,7 +65,7 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n-pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n     }\n@@ -74,7 +74,7 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n-        fn panic_impl(pi: &PanicInfo) -> !;\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n     let (file, line, col) = *file_line_col;"}, {"sha": "dbf3dcf03a3c0edf282cacf0fb0ddfb8b3481a43", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -602,21 +602,21 @@ impl<P: Receiver> Receiver for Pin<P> {}\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Debug> fmt::Debug for Pin<P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.pointer, f)\n     }\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Display> fmt::Display for Pin<P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.pointer, f)\n     }\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Pointer> fmt::Pointer for Pin<P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.pointer, f)\n     }\n }"}, {"sha": "f05700a1db2852c928501298e35c83074a5f116a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -2623,14 +2623,14 @@ macro_rules! fnptr_impls_safety_abi {\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt::Pointer::fmt(&(*self as *const ()), f)\n             }\n         }\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt::Pointer::fmt(&(*self as *const ()), f)\n             }\n         }\n@@ -2776,7 +2776,7 @@ pub struct Unique<T: ?Sized> {\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Debug for Unique<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n@@ -2876,7 +2876,7 @@ impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Uns\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Pointer for Unique<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n@@ -3049,14 +3049,14 @@ impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: U\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Debug for NonNull<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }"}, {"sha": "bf8fd63b6446f3eaa081366195a98f46b5bd1e1e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -544,7 +544,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { inner: self.as_ref().ok() }\n     }\n \n@@ -569,7 +569,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         IterMut { inner: self.as_mut().ok() }\n     }\n "}, {"sha": "21c16e65e4ee45797b77dddd62c3a3e3502d6246", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -524,7 +524,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         unsafe {\n             let ptr = self.as_ptr();\n             assume(!ptr.is_null());\n@@ -556,7 +556,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         unsafe {\n             let ptr = self.as_mut_ptr();\n             assume(!ptr.is_null());\n@@ -603,7 +603,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn windows(&self, size: usize) -> Windows<T> {\n+    pub fn windows(&self, size: usize) -> Windows<'_, T> {\n         assert!(size != 0);\n         Windows { v: self, size }\n     }\n@@ -637,7 +637,7 @@ impl<T> [T] {\n     /// [`rchunks`]: #method.rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chunks(&self, chunk_size: usize) -> Chunks<T> {\n+    pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n         assert!(chunk_size != 0);\n         Chunks { v: self, chunk_size }\n     }\n@@ -675,7 +675,7 @@ impl<T> [T] {\n     /// [`rchunks_mut`]: #method.rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> {\n+    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n         assert!(chunk_size != 0);\n         ChunksMut { v: self, chunk_size }\n     }\n@@ -712,7 +712,7 @@ impl<T> [T] {\n     /// [`rchunks_exact`]: #method.rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<T> {\n+    pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let len = self.len() - rem;\n@@ -757,7 +757,7 @@ impl<T> [T] {\n     /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<T> {\n+    pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let len = self.len() - rem;\n@@ -794,7 +794,7 @@ impl<T> [T] {\n     /// [`chunks`]: #method.chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks(&self, chunk_size: usize) -> RChunks<T> {\n+    pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n         assert!(chunk_size != 0);\n         RChunks { v: self, chunk_size }\n     }\n@@ -832,7 +832,7 @@ impl<T> [T] {\n     /// [`chunks_mut`]: #method.chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<T> {\n+    pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n         assert!(chunk_size != 0);\n         RChunksMut { v: self, chunk_size }\n     }\n@@ -871,7 +871,7 @@ impl<T> [T] {\n     /// [`chunks_exact`]: #method.chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<T> {\n+    pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let (fst, snd) = self.split_at(rem);\n@@ -916,7 +916,7 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<T> {\n+    pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let (fst, snd) = self.split_at_mut(rem);\n@@ -1042,7 +1042,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn split<F>(&self, pred: F) -> Split<T, F>\n+    pub fn split<F>(&self, pred: F) -> Split<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         Split {\n@@ -1067,7 +1067,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F>\n+    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         SplitMut { v: self, pred, finished: false }\n@@ -1102,7 +1102,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn rsplit<F>(&self, pred: F) -> RSplit<T, F>\n+    pub fn rsplit<F>(&self, pred: F) -> RSplit<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplit { inner: self.split(pred) }\n@@ -1127,7 +1127,7 @@ impl<T> [T] {\n     ///\n     #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<T, F>\n+    pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplitMut { inner: self.split_mut(pred) }\n@@ -1154,7 +1154,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<T, F>\n+    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         SplitN {\n@@ -1184,7 +1184,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>\n+    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         SplitNMut {\n@@ -1217,7 +1217,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<T, F>\n+    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplitN {\n@@ -1248,7 +1248,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<T, F>\n+    pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplitNMut {\n@@ -3284,7 +3284,7 @@ pub struct Iter<'a, T: 'a> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n             .field(&self.as_slice())\n             .finish()\n@@ -3386,7 +3386,7 @@ pub struct IterMut<'a, T: 'a> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IterMut\")\n             .field(&self.make_slice())\n             .finish()\n@@ -3493,7 +3493,7 @@ pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for Split<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Split\")\n             .field(\"v\", &self.v)\n             .field(\"finished\", &self.finished)\n@@ -3584,7 +3584,7 @@ pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitMut\")\n             .field(\"v\", &self.v)\n             .field(\"finished\", &self.finished)\n@@ -3681,7 +3681,7 @@ pub struct RSplit<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplit<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplit\")\n             .field(\"v\", &self.inner.v)\n             .field(\"finished\", &self.inner.finished)\n@@ -3737,7 +3737,7 @@ pub struct RSplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplitMut\")\n             .field(\"v\", &self.inner.v)\n             .field(\"finished\", &self.inner.finished)\n@@ -3823,7 +3823,7 @@ pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitN<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitN\")\n             .field(\"inner\", &self.inner)\n             .finish()\n@@ -3845,7 +3845,7 @@ pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplitN<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplitN\")\n             .field(\"inner\", &self.inner)\n             .finish()\n@@ -3866,7 +3866,7 @@ pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitNMut\")\n             .field(\"inner\", &self.inner)\n             .finish()\n@@ -3888,7 +3888,7 @@ pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplitNMut\")\n             .field(\"inner\", &self.inner)\n             .finish()"}, {"sha": "b291579553a642b4c78097c15faa5f7d47d002c6", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -18,7 +18,7 @@ impl Utf8Lossy {\n         unsafe { mem::transmute(bytes) }\n     }\n \n-    pub fn chunks(&self) -> Utf8LossyChunksIter {\n+    pub fn chunks(&self) -> Utf8LossyChunksIter<'_> {\n         Utf8LossyChunksIter { source: &self.bytes }\n     }\n }\n@@ -138,7 +138,7 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n \n \n impl fmt::Display for Utf8Lossy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // If we're the empty string then our iterator won't actually yield\n         // anything, so perform the formatting manually\n         if self.bytes.len() == 0 {\n@@ -164,7 +164,7 @@ impl fmt::Display for Utf8Lossy {\n }\n \n impl fmt::Debug for Utf8Lossy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_char('\"')?;\n \n         for Utf8LossyChunk { valid, broken } in self.chunks() {"}, {"sha": "e83581363c86675380b2d1bee2292f3007c8e64b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -146,7 +146,7 @@ pub struct ParseBoolError { _priv: () }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseBoolError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"provided string was not `true` or `false`\".fmt(f)\n     }\n }\n@@ -439,7 +439,7 @@ pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Utf8Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(error_len) = self.error_len {\n             write!(f, \"invalid utf-8 sequence of {} bytes from index {}\",\n                    error_len, self.valid_up_to)\n@@ -914,7 +914,7 @@ macro_rules! generate_pattern_iterators {\n         impl<'a, P: Pattern<'a>> fmt::Debug for $forward_iterator<'a, P>\n             where P::Searcher: fmt::Debug\n         {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_tuple(stringify!($forward_iterator))\n                     .field(&self.0)\n                     .finish()\n@@ -948,7 +948,7 @@ macro_rules! generate_pattern_iterators {\n         impl<'a, P: Pattern<'a>> fmt::Debug for $reverse_iterator<'a, P>\n             where P::Searcher: fmt::Debug\n         {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_tuple(stringify!($reverse_iterator))\n                     .field(&self.0)\n                     .finish()\n@@ -1033,7 +1033,7 @@ struct SplitInternal<'a, P: Pattern<'a>> {\n }\n \n impl<'a, P: Pattern<'a>> fmt::Debug for SplitInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInternal\")\n             .field(\"start\", &self.start)\n             .field(\"end\", &self.end)\n@@ -1150,7 +1150,7 @@ struct SplitNInternal<'a, P: Pattern<'a>> {\n }\n \n impl<'a, P: Pattern<'a>> fmt::Debug for SplitNInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitNInternal\")\n             .field(\"iter\", &self.iter)\n             .field(\"count\", &self.count)\n@@ -1206,7 +1206,7 @@ derive_pattern_clone!{\n struct MatchIndicesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> fmt::Debug for MatchIndicesInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"MatchIndicesInternal\")\n             .field(&self.0)\n             .finish()\n@@ -1257,7 +1257,7 @@ derive_pattern_clone!{\n struct MatchesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> fmt::Debug for MatchesInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"MatchesInternal\")\n             .field(&self.0)\n             .finish()\n@@ -2559,7 +2559,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chars(&self) -> Chars {\n+    pub fn chars(&self) -> Chars<'_> {\n         Chars{iter: self.as_bytes().iter()}\n     }\n \n@@ -2614,7 +2614,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn char_indices(&self) -> CharIndices {\n+    pub fn char_indices(&self) -> CharIndices<'_> {\n         CharIndices { front_offset: 0, iter: self.chars() }\n     }\n \n@@ -2639,7 +2639,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn bytes(&self) -> Bytes {\n+    pub fn bytes(&self) -> Bytes<'_> {\n         Bytes(self.as_bytes().iter().cloned())\n     }\n \n@@ -2682,7 +2682,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n     #[inline]\n-    pub fn split_whitespace(&self) -> SplitWhitespace {\n+    pub fn split_whitespace(&self) -> SplitWhitespace<'_> {\n         SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }\n     }\n \n@@ -2723,7 +2723,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n     #[inline]\n-    pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace {\n+    pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace<'_> {\n         let inner = self\n             .as_bytes()\n             .split(IsAsciiWhitespace)\n@@ -2770,7 +2770,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn lines(&self) -> Lines {\n+    pub fn lines(&self) -> Lines<'_> {\n         Lines(self.split_terminator('\\n').map(LinesAnyMap))\n     }\n \n@@ -2779,7 +2779,7 @@ impl str {\n     #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]\n     #[inline]\n     #[allow(deprecated)]\n-    pub fn lines_any(&self) -> LinesAny {\n+    pub fn lines_any(&self) -> LinesAny<'_> {\n         LinesAny(self.lines())\n     }\n \n@@ -2798,7 +2798,7 @@ impl str {\n     /// assert!(utf16_len <= utf8_len);\n     /// ```\n     #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n-    pub fn encode_utf16(&self) -> EncodeUtf16 {\n+    pub fn encode_utf16(&self) -> EncodeUtf16<'_> {\n         EncodeUtf16 { chars: self.chars(), extra: 0 }\n     }\n \n@@ -4018,7 +4018,7 @@ impl str {\n     /// assert_eq!(\"\u2764\\n!\".escape_debug().to_string(), \"\u2764\\\\n!\");\n     /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_debug(&self) -> EscapeDebug {\n+    pub fn escape_debug(&self) -> EscapeDebug<'_> {\n         let mut chars = self.chars();\n         EscapeDebug {\n             inner: chars.next()\n@@ -4063,7 +4063,7 @@ impl str {\n     /// assert_eq!(\"\u2764\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n     /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_default(&self) -> EscapeDefault {\n+    pub fn escape_default(&self) -> EscapeDefault<'_> {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n     }\n \n@@ -4101,7 +4101,7 @@ impl str {\n     /// assert_eq!(\"\u2764\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n     /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_unicode(&self) -> EscapeUnicode {\n+    pub fn escape_unicode(&self) -> EscapeUnicode<'_> {\n         EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }\n     }\n }\n@@ -4267,7 +4267,7 @@ pub struct EncodeUtf16<'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl fmt::Debug for EncodeUtf16<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"EncodeUtf16 { .. }\")\n     }\n }\n@@ -4341,7 +4341,7 @@ macro_rules! escape_types_impls {\n     ($( $Name: ident ),+) => {$(\n         #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n         impl<'a> fmt::Display for $Name<'a> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 self.clone().try_for_each(|c| f.write_char(c))\n             }\n         }"}, {"sha": "ad9d956fda1c84d1309a4809d6a462b3822cfd4d", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -658,7 +658,7 @@ pub struct CharPredicateSearcher<'a, F>(<MultiCharEqPattern<F> as Pattern<'a>>::\n impl<F> fmt::Debug for CharPredicateSearcher<'_, F>\n     where F: FnMut(char) -> bool\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"CharPredicateSearcher\")\n             .field(\"haystack\", &self.0.haystack)\n             .field(\"char_indices\", &self.0.char_indices)"}, {"sha": "12414980d76b11b4af3c9832250e8aab781a7996", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -1193,7 +1193,7 @@ macro_rules! atomic_int {\n \n         #[$stable_debug]\n         impl fmt::Debug for $atomic_type {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n             }\n         }\n@@ -2506,23 +2506,23 @@ pub fn compiler_fence(order: Ordering) {\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl fmt::Debug for AtomicBool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n \n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl<T> fmt::Debug for AtomicPtr<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n \n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"atomic_pointer\", since = \"1.24.0\")]\n impl<T> fmt::Pointer for AtomicPtr<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }"}, {"sha": "94e31054a58129e0c41ea6acb10fe04203351b67", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -180,7 +180,7 @@ impl<'a> Context<'a> {\n }\n \n impl fmt::Debug for Context<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Context\")\n             .field(\"waker\", &self.waker)\n             .finish()\n@@ -283,7 +283,7 @@ impl Drop for Waker {\n }\n \n impl fmt::Debug for Waker {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let vtable_ptr = self.waker.vtable as *const RawWakerVTable;\n         f.debug_struct(\"Waker\")\n             .field(\"data\", &self.waker.data)"}, {"sha": "0f5f91f41a8cd11b5af61f729c5a13b9530b9249", "filename": "src/libcore/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=dbfbadeac4f593e31bbcb57bc7c3b1d17ab1cd65", "patch": "@@ -847,7 +847,7 @@ impl<'a> Sum<&'a Duration> for Duration {\n \n #[stable(feature = \"duration_debug_impl\", since = \"1.27.0\")]\n impl fmt::Debug for Duration {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         /// Formats a floating point number in decimal notation.\n         ///\n         /// The number is given as the `integer_part` and a fractional part.\n@@ -859,7 +859,7 @@ impl fmt::Debug for Duration {\n         /// of 10, everything else doesn't make sense. `fractional_part` has\n         /// to be less than `10 * divisor`!\n         fn fmt_decimal(\n-            f: &mut fmt::Formatter,\n+            f: &mut fmt::Formatter<'_>,\n             mut integer_part: u64,\n             mut fractional_part: u32,\n             mut divisor: u32,"}]}