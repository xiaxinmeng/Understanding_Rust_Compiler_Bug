{"sha": "039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "node_id": "C_kwDOAAsO6NoAKDAzOWFmOWM5ZTc1OGQwMTBkYWQ3NjEwZmU1NDNmZmNjMmIxYmRkOGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T00:14:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T00:14:59Z"}, "message": "Auto merge of #9667 - dorublanzeanu:master, r=giraffate\n\nadd new lint `seek_to_start_instead_of_rewind `\n\nchangelog: `seek_to_start_instead_of_rewind`: new lint to suggest using `rewind` instead of `seek` to start\n\nResolve #8600", "tree": {"sha": "3cad38bc5015ed99c4d17c3f5ca79b7e1495d31e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cad38bc5015ed99c4d17c3f5ca79b7e1495d31e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "html_url": "https://github.com/rust-lang/rust/commit/039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b698a151b3eb1c6cd6a70d3e9d9d0aab2711f672", "url": "https://api.github.com/repos/rust-lang/rust/commits/b698a151b3eb1c6cd6a70d3e9d9d0aab2711f672", "html_url": "https://github.com/rust-lang/rust/commit/b698a151b3eb1c6cd6a70d3e9d9d0aab2711f672"}, {"sha": "b9b9d6a751ca3a9ccdd64f50390361e339f5124f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b9d6a751ca3a9ccdd64f50390361e339f5124f", "html_url": "https://github.com/rust-lang/rust/commit/b9b9d6a751ca3a9ccdd64f50390361e339f5124f"}], "stats": {"total": 406, "additions": 406, "deletions": 0}, "files": [{"sha": "7e91365c69a3b2f542661eccc745f0bd2274dd5a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -4200,6 +4200,7 @@ Released 2018-09-13\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`same_name_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_name_method\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n+[`seek_to_start_instead_of_rewind`]: https://rust-lang.github.io/rust-clippy/master/index.html#seek_to_start_instead_of_rewind\n [`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n [`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n [`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files"}, {"sha": "a903d46b2a449a720b71afbca875606682b157dc", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -363,6 +363,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::REPEAT_ONCE_INFO,\n     crate::methods::RESULT_MAP_OR_INTO_OPTION_INFO,\n     crate::methods::SEARCH_IS_SOME_INFO,\n+    crate::methods::SEEK_TO_START_INSTEAD_OF_REWIND_INFO,\n     crate::methods::SHOULD_IMPLEMENT_TRAIT_INFO,\n     crate::methods::SINGLE_CHAR_ADD_STR_INFO,\n     crate::methods::SINGLE_CHAR_PATTERN_INFO,"}, {"sha": "4fd1e3e54ae35fa6c8edca7e85022aaf7c8c905e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -69,6 +69,7 @@ mod path_buf_push_overwrite;\n mod range_zip_with_len;\n mod repeat_once;\n mod search_is_some;\n+mod seek_to_start_instead_of_rewind;\n mod single_char_add_str;\n mod single_char_insert_string;\n mod single_char_pattern;\n@@ -3066,6 +3067,37 @@ declare_clippy_lint! {\n     \"iterating on map using `iter` when `keys` or `values` would do\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for jumps to the start of a stream that implements `Seek`\n+    /// and uses the `seek` method providing `Start` as parameter.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Readability. There is a specific method that was implemented for\n+    /// this exact scenario.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::io;\n+    /// fn foo<T: io::Seek>(t: &mut T) {\n+    ///     t.seek(io::SeekFrom::Start(0));\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::io;\n+    /// fn foo<T: io::Seek>(t: &mut T) {\n+    ///     t.rewind();\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub SEEK_TO_START_INSTEAD_OF_REWIND,\n+    complexity,\n+    \"jumping to the start of stream using `seek` method\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -3190,6 +3222,7 @@ impl_lint_pass!(Methods => [\n     VEC_RESIZE_TO_ZERO,\n     VERBOSE_FILE_READS,\n     ITER_KV_MAP,\n+    SEEK_TO_START_INSTEAD_OF_REWIND,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3604,6 +3637,11 @@ impl Methods {\n                 (\"resize\", [count_arg, default_arg]) => {\n                     vec_resize_to_zero::check(cx, expr, count_arg, default_arg, span);\n                 },\n+                (\"seek\", [arg]) => {\n+                    if meets_msrv(self.msrv, msrvs::SEEK_REWIND) {\n+                        seek_to_start_instead_of_rewind::check(cx, expr, recv, arg, span);\n+                    }\n+                },\n                 (\"sort\", []) => {\n                     stable_sort_primitive::check(cx, expr, recv);\n                 },"}, {"sha": "7e3bed1e41a9457d9ca485d17ac4c0b92cf52dc7", "filename": "clippy_lints/src/methods/seek_to_start_instead_of_rewind.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -0,0 +1,45 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{get_trait_def_id, match_def_path, paths};\n+use rustc_ast::ast::{LitIntType, LitKind};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+\n+use super::SEEK_TO_START_INSTEAD_OF_REWIND;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    recv: &'tcx Expr<'_>,\n+    arg: &'tcx Expr<'_>,\n+    name_span: Span,\n+) {\n+    // Get receiver type\n+    let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+\n+    if let Some(seek_trait_id) = get_trait_def_id(cx, &paths::STD_IO_SEEK) &&\n+        implements_trait(cx, ty, seek_trait_id, &[]) &&\n+        let ExprKind::Call(func, args1) = arg.kind &&\n+        let ExprKind::Path(ref path) = func.kind &&\n+        let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id() &&\n+        match_def_path(cx, def_id, &paths::STD_IO_SEEKFROM_START) &&\n+        args1.len() == 1 &&\n+        let ExprKind::Lit(ref lit) = args1[0].kind &&\n+        let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node\n+    {\n+        let method_call_span = expr.span.with_lo(name_span.lo());\n+        span_lint_and_then(\n+            cx,\n+            SEEK_TO_START_INSTEAD_OF_REWIND,\n+            method_call_span,\n+            \"used `seek` to go to the start of the stream\",\n+            |diag| {\n+                let app = Applicability::MachineApplicable;\n+\n+                diag.span_suggestion(method_call_span, \"replace with\", \"rewind()\", app);\n+            },\n+        );\n+    }\n+}"}, {"sha": "04b504d044d008a0f745bb2d8d8a11de8cad0cc0", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -38,4 +38,5 @@ msrv_aliases! {\n     1,18,0 { HASH_MAP_RETAIN, HASH_SET_RETAIN }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n+    1,55,0 { SEEK_REWIND }\n }"}, {"sha": "e37c7e34c0c7a8a9aaa962e7b6637e7f746034c0", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -115,6 +115,8 @@ pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];\n pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n pub const CONVERT_IDENTITY: [&str; 3] = [\"core\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n+pub const STD_IO_SEEK: [&str; 3] = [\"std\", \"io\", \"Seek\"];\n+pub const STD_IO_SEEKFROM_START: [&str; 4] = [\"std\", \"io\", \"SeekFrom\", \"Start\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];"}, {"sha": "bef11b2312a8c67c125880cccee95be4e9acded0", "filename": "src/docs/seek_to_start_instead_of_rewind.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/src%2Fdocs%2Fseek_to_start_instead_of_rewind.txt", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/src%2Fdocs%2Fseek_to_start_instead_of_rewind.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fseek_to_start_instead_of_rewind.txt?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -0,0 +1,22 @@\n+### What it does\n+\n+Checks for jumps to the start of a stream that implements `Seek`\n+and uses the `seek` method providing `Start` as parameter.\n+\n+### Why is this bad?\n+\n+Readability. There is a specific method that was implemented for\n+this exact scenario.\n+\n+### Example\n+```\n+fn foo<T: io::Seek>(t: &mut T) {\n+    t.seek(io::SeekFrom::Start(0));\n+}\n+```\n+Use instead:\n+```\n+fn foo<T: io::Seek>(t: &mut T) {\n+    t.rewind();\n+}\n+```\n\\ No newline at end of file"}, {"sha": "464b6cdef63933acde79d463929e163049252bd8", "filename": "tests/ui/seek_to_start_instead_of_rewind.fixed", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -0,0 +1,137 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::seek_to_start_instead_of_rewind)]\n+\n+use std::fs::OpenOptions;\n+use std::io::{Read, Seek, SeekFrom, Write};\n+\n+struct StructWithSeekMethod {}\n+\n+impl StructWithSeekMethod {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+trait MySeekTrait {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+struct StructWithSeekTrait {}\n+impl MySeekTrait for StructWithSeekTrait {}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_method(t: &mut StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_method_owned_false<T>(mut t: StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait(t: &mut StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_owned<T>(mut t: StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_bound<T: MySeekTrait>(t: &mut T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should trigger clippy warning\n+fn seek_to_start<T: Seek>(t: &mut T) {\n+    t.rewind();\n+}\n+\n+// This should trigger clippy warning\n+fn owned_seek_to_start<T: Seek>(mut t: T) {\n+    t.rewind();\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_5<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::Start(5));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_end<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::End(0));\n+}\n+\n+fn main() {\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let mut my_struct_trait = StructWithSeekTrait {};\n+    seek_to_start_false_trait_bound(&mut my_struct_trait);\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+    seek_to_5(&mut f);\n+    seek_to_end(&mut f);\n+    seek_to_start(&mut f);\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}\n+\n+fn msrv_1_54() {\n+    #![clippy::msrv = \"1.54\"]\n+\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+\n+    f.seek(SeekFrom::Start(0));\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}\n+\n+fn msrv_1_55() {\n+    #![clippy::msrv = \"1.55\"]\n+\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+\n+    f.rewind();\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}"}, {"sha": "68e09bd7c1f0fd4d4d210e90b58e50b04c1a1d40", "filename": "tests/ui/seek_to_start_instead_of_rewind.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -0,0 +1,137 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::seek_to_start_instead_of_rewind)]\n+\n+use std::fs::OpenOptions;\n+use std::io::{Read, Seek, SeekFrom, Write};\n+\n+struct StructWithSeekMethod {}\n+\n+impl StructWithSeekMethod {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+trait MySeekTrait {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+struct StructWithSeekTrait {}\n+impl MySeekTrait for StructWithSeekTrait {}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_method(t: &mut StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_method_owned_false<T>(mut t: StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait(t: &mut StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_owned<T>(mut t: StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_bound<T: MySeekTrait>(t: &mut T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should trigger clippy warning\n+fn seek_to_start<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should trigger clippy warning\n+fn owned_seek_to_start<T: Seek>(mut t: T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_5<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::Start(5));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_end<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::End(0));\n+}\n+\n+fn main() {\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let mut my_struct_trait = StructWithSeekTrait {};\n+    seek_to_start_false_trait_bound(&mut my_struct_trait);\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+    seek_to_5(&mut f);\n+    seek_to_end(&mut f);\n+    seek_to_start(&mut f);\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}\n+\n+fn msrv_1_54() {\n+    #![clippy::msrv = \"1.54\"]\n+\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+\n+    f.seek(SeekFrom::Start(0));\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}\n+\n+fn msrv_1_55() {\n+    #![clippy::msrv = \"1.55\"]\n+\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+\n+    f.seek(SeekFrom::Start(0));\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}"}, {"sha": "de0eec5d909cd72695def70bc63abee7eecea714", "filename": "tests/ui/seek_to_start_instead_of_rewind.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039af9c9e758d010dad7610fe543ffcc2b1bdd8a/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.stderr?ref=039af9c9e758d010dad7610fe543ffcc2b1bdd8a", "patch": "@@ -0,0 +1,22 @@\n+error: used `seek` to go to the start of the stream\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:54:7\n+   |\n+LL |     t.seek(SeekFrom::Start(0));\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n+   |\n+   = note: `-D clippy::seek-to-start-instead-of-rewind` implied by `-D warnings`\n+\n+error: used `seek` to go to the start of the stream\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:59:7\n+   |\n+LL |     t.seek(SeekFrom::Start(0));\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n+\n+error: used `seek` to go to the start of the stream\n+  --> $DIR/seek_to_start_instead_of_rewind.rs:131:7\n+   |\n+LL |     f.seek(SeekFrom::Start(0));\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n+\n+error: aborting due to 3 previous errors\n+"}]}