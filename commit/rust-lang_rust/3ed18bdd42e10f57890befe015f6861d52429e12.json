{"sha": "3ed18bdd42e10f57890befe015f6861d52429e12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDE4YmRkNDJlMTBmNTc4OTBiZWZlMDE1ZjY4NjFkNTI0MjllMTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-22T15:10:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-22T15:10:34Z"}, "message": "Remove old logging from the tutorial", "tree": {"sha": "90cd6971b78e2f4bd61a3c8ed4b246d4dc592b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90cd6971b78e2f4bd61a3c8ed4b246d4dc592b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed18bdd42e10f57890befe015f6861d52429e12", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed18bdd42e10f57890befe015f6861d52429e12", "html_url": "https://github.com/rust-lang/rust/commit/3ed18bdd42e10f57890befe015f6861d52429e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed18bdd42e10f57890befe015f6861d52429e12/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa32f7d8ed12572217aeadc222472b8687ae00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa32f7d8ed12572217aeadc222472b8687ae00d", "html_url": "https://github.com/rust-lang/rust/commit/7aa32f7d8ed12572217aeadc222472b8687ae00d"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "2d4b0c15cb8342ebe7bb29235764d69e9df667d5", "filename": "doc/rust.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3ed18bdd42e10f57890befe015f6861d52429e12/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ed18bdd42e10f57890befe015f6861d52429e12/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3ed18bdd42e10f57890befe015f6861d52429e12", "patch": "@@ -700,15 +700,15 @@ mod math {\n     type complex = (f64, f64);\n     fn sin(f: f64) -> f64 {\n         ...\n-# fail2!();\n+# fail!();\n     }\n     fn cos(f: f64) -> f64 {\n         ...\n-# fail2!();\n+# fail!();\n     }\n     fn tan(f: f64) -> f64 {\n         ...\n-# fail2!();\n+# fail!();\n     }\n }\n ~~~~\n@@ -1059,8 +1059,8 @@ output slot type would normally be. For example:\n \n ~~~~\n fn my_err(s: &str) -> ! {\n-    info2!(\"{}\", s);\n-    fail2!();\n+    info!(\"{}\", s);\n+    fail!();\n }\n ~~~~\n \n@@ -1078,7 +1078,7 @@ were declared without the `!` annotation, the following code would not\n typecheck:\n \n ~~~~\n-# fn my_err(s: &str) -> ! { fail2!() }\n+# fn my_err(s: &str) -> ! { fail!() }\n \n fn f(i: int) -> int {\n    if i == 42 {\n@@ -2826,9 +2826,9 @@ enum List<X> { Nil, Cons(X, @List<X>) }\n let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    Cons(_, @Nil) => fail2!(\"singleton list\"),\n+    Cons(_, @Nil) => fail!(\"singleton list\"),\n     Cons(*)       => return,\n-    Nil           => fail2!(\"empty list\")\n+    Nil           => fail!(\"empty list\")\n }\n ~~~~\n \n@@ -2864,7 +2864,7 @@ match x {\n         return;\n     }\n     _ => {\n-        fail2!();\n+        fail!();\n     }\n }\n ~~~~\n@@ -2918,7 +2918,7 @@ guard may refer to the variables bound within the pattern they follow.\n let message = match maybe_digit {\n   Some(x) if x < 10 => process_digit(x),\n   Some(x) => process_other(x),\n-  None => fail2!()\n+  None => fail!()\n };\n ~~~~\n \n@@ -3669,10 +3669,10 @@ that demonstrates all four of them:\n \n ~~~~\n fn main() {\n-    error2!(\"This is an error log\")\n-    warn2!(\"This is a warn log\")\n-    info2!(\"this is an info log\")\n-    debug2!(\"This is a debug log\")\n+    error!(\"This is an error log\")\n+    warn!(\"This is a warn log\")\n+    info!(\"this is an info log\")\n+    debug!(\"This is a debug log\")\n }\n ~~~~\n "}, {"sha": "f1f4ade0542d5068672ec76fa3486b2de02f3c52", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ed18bdd42e10f57890befe015f6861d52429e12/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ed18bdd42e10f57890befe015f6861d52429e12/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=3ed18bdd42e10f57890befe015f6861d52429e12", "patch": "@@ -226,7 +226,7 @@ match x {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n-            _ => fail2!(\"Didn't get good_2\")\n+            _ => fail!(\"Didn't get good_2\")\n         }\n     }\n     _ => return 0 // default value\n@@ -268,7 +268,7 @@ macro_rules! biased_match (\n biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n               binds g1, val )\n biased_match!((g1.body) ~ (good_2(result) )\n-                  else { fail2!(\"Didn't get good_2\") };\n+                  else { fail!(\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n return result + val;\n@@ -369,7 +369,7 @@ macro_rules! biased_match (\n # fn f(x: t1) -> uint {\n biased_match!(\n     (x)       ~ (good_1(g1, val)) else { return 0 };\n-    (g1.body) ~ (good_2(result) ) else { fail2!(\"Didn't get good_2\") };\n+    (g1.body) ~ (good_2(result) ) else { fail!(\"Didn't get good_2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "42617a96daab380a7849d2a9dff9b43f3afde6c8", "filename": "doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed18bdd42e10f57890befe015f6861d52429e12/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ed18bdd42e10f57890befe015f6861d52429e12/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3ed18bdd42e10f57890befe015f6861d52429e12", "patch": "@@ -763,7 +763,7 @@ unit, `()`, as the empty tuple if you like).\n ~~~~\n let mytup: (int, int, f64) = (10, 20, 30.0);\n match mytup {\n-  (a, b, c) => info2!(\"{}\", a + b + (c as int))\n+  (a, b, c) => info!(\"{}\", a + b + (c as int))\n }\n ~~~~\n \n@@ -779,7 +779,7 @@ For example:\n struct MyTup(int, int, f64);\n let mytup: MyTup = MyTup(10, 20, 30.0);\n match mytup {\n-  MyTup(a, b, c) => info2!(\"{}\", a + b + (c as int))\n+  MyTup(a, b, c) => info!(\"{}\", a + b + (c as int))\n }\n ~~~~\n \n@@ -1576,7 +1576,7 @@ arguments.\n use std::task::spawn;\n \n do spawn() || {\n-    debug2!(\"I'm a task, whatever\");\n+    debug!(\"I'm a task, whatever\");\n }\n ~~~~\n \n@@ -1588,7 +1588,7 @@ may be omitted from `do` expressions.\n use std::task::spawn;\n \n do spawn {\n-   debug2!(\"Kablam!\");\n+   debug!(\"Kablam!\");\n }\n ~~~~\n "}]}