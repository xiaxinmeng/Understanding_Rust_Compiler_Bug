{"sha": "0871a38adf22982ba7ed666867a0bfc3c36125e0", "node_id": "C_kwDOAAsO6NoAKDA4NzFhMzhhZGYyMjk4MmJhN2VkNjY2ODY3YTBiZmMzYzM2MTI1ZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-09T12:38:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-09T12:38:33Z"}, "message": "Rollup merge of #92671 - WaffleLapkin:atomic_from_mut_unique_ref, r=m-ou-se\n\nMake `Atomic*::from_mut` return `&mut Atomic*`\n\n```rust\nimpl Atomic* {\n    pub fn from_mut(v: &mut bool) -> &mut Self;\n    //                               ^^^^---- previously was just a &\n}\n```\n\nThis PR makes `from_mut` atomic methods tracked in #76314 return unique references to atomic types, instead of shared ones. This makes `from_mut` and `get_mut` inverses of each other, allowing to undo either of them by the other.\n\nr? `@RalfJung`\n(as Ralf was [concerned](https://github.com/rust-lang/rust/issues/76314#issuecomment-955062593) about this)", "tree": {"sha": "f10b2039c1770ec91c47a5a34b955dff9fb49050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f10b2039c1770ec91c47a5a34b955dff9fb49050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0871a38adf22982ba7ed666867a0bfc3c36125e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2tdKCRBK7hj4Ov3rIwAAHmAIADkL7xr42+y72Sq3EZpLfCeS\n7byQa434hcPu6VEEZglmJXUxFec6Xvscy5vjnaeQuoa4YDvmxY9WRZaq677ibs20\n+50GGhPYYn5hZTJ40QSAVxEsAvX/MCBjQa1IOk+6R+H7WtmD4SEjh/a2PR4aRUql\n403jOURcjwB3cnj7Q2Sz4tfswGRJnaXEtwUIVgJ1szN+2Rxc6bg217v7q0rC5QfL\nxbWp2s42rpctTrPGqqaoaM3vmNabUZb+1Z1mCtW0Img60hmRuHNMPbRMZ7W3PVlr\ng1vNugBTBxKY6s5r3l1eWMPSAYMOdAQ9oJSxwvXChB+Xe/qxRekO4AXjZM48ttQ=\n=c50Q\n-----END PGP SIGNATURE-----\n", "payload": "tree f10b2039c1770ec91c47a5a34b955dff9fb49050\nparent 295ef3a3367dfbb1eef6ea4d259e546053796f6f\nparent 2b03ed19f665fa599f3710e4ecd6ca28c945e664\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641731913 +0100\ncommitter GitHub <noreply@github.com> 1641731913 +0100\n\nRollup merge of #92671 - WaffleLapkin:atomic_from_mut_unique_ref, r=m-ou-se\n\nMake `Atomic*::from_mut` return `&mut Atomic*`\n\n```rust\nimpl Atomic* {\n    pub fn from_mut(v: &mut bool) -> &mut Self;\n    //                               ^^^^---- previously was just a &\n}\n```\n\nThis PR makes `from_mut` atomic methods tracked in #76314 return unique references to atomic types, instead of shared ones. This makes `from_mut` and `get_mut` inverses of each other, allowing to undo either of them by the other.\n\nr? `@RalfJung`\n(as Ralf was [concerned](https://github.com/rust-lang/rust/issues/76314#issuecomment-955062593) about this)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0871a38adf22982ba7ed666867a0bfc3c36125e0", "html_url": "https://github.com/rust-lang/rust/commit/0871a38adf22982ba7ed666867a0bfc3c36125e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0871a38adf22982ba7ed666867a0bfc3c36125e0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295ef3a3367dfbb1eef6ea4d259e546053796f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/295ef3a3367dfbb1eef6ea4d259e546053796f6f", "html_url": "https://github.com/rust-lang/rust/commit/295ef3a3367dfbb1eef6ea4d259e546053796f6f"}, {"sha": "2b03ed19f665fa599f3710e4ecd6ca28c945e664", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b03ed19f665fa599f3710e4ecd6ca28c945e664", "html_url": "https://github.com/rust-lang/rust/commit/2b03ed19f665fa599f3710e4ecd6ca28c945e664"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "27243d8ca703060aea8362fd75fc301a02150200", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0871a38adf22982ba7ed666867a0bfc3c36125e0/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0871a38adf22982ba7ed666867a0bfc3c36125e0/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=0871a38adf22982ba7ed666867a0bfc3c36125e0", "patch": "@@ -333,10 +333,10 @@ impl AtomicBool {\n     #[inline]\n     #[cfg(target_has_atomic_equal_alignment = \"8\")]\n     #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-    pub fn from_mut(v: &mut bool) -> &Self {\n+    pub fn from_mut(v: &mut bool) -> &mut Self {\n         // SAFETY: the mutable reference guarantees unique ownership, and\n         // alignment of both `bool` and `Self` is 1.\n-        unsafe { &*(v as *mut bool as *mut Self) }\n+        unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n     /// Consumes the atomic and returns the contained value.\n@@ -934,14 +934,14 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[cfg(target_has_atomic_equal_alignment = \"ptr\")]\n     #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-    pub fn from_mut(v: &mut *mut T) -> &Self {\n+    pub fn from_mut(v: &mut *mut T) -> &mut Self {\n         use crate::mem::align_of;\n         let [] = [(); align_of::<AtomicPtr<()>>() - align_of::<*mut ()>()];\n         // SAFETY:\n         //  - the mutable reference guarantees unique ownership.\n         //  - the alignment of `*mut T` and `Self` is the same on all platforms\n         //    supported by rust, as verified above.\n-        unsafe { &*(v as *mut *mut T as *mut Self) }\n+        unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n     /// Consumes the atomic and returns the contained value.\n@@ -1447,14 +1447,14 @@ macro_rules! atomic_int {\n             #[inline]\n             #[$cfg_align]\n             #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-            pub fn from_mut(v: &mut $int_type) -> &Self {\n+            pub fn from_mut(v: &mut $int_type) -> &mut Self {\n                 use crate::mem::align_of;\n                 let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                 // SAFETY:\n                 //  - the mutable reference guarantees unique ownership.\n                 //  - the alignment of `$int_type` and `Self` is the\n                 //    same, as promised by $cfg_align and verified above.\n-                unsafe { &*(v as *mut $int_type as *mut Self) }\n+                unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n             /// Consumes the atomic and returns the contained value."}]}