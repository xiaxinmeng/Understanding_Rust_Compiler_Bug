{"sha": "60075a6625bb5d4064ef02123b84bd81e574c8e6", "node_id": "C_kwDOAAsO6NoAKDYwMDc1YTY2MjViYjVkNDA2NGVmMDIxMjNiODRiZDgxZTU3NGM4ZTY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-14T11:19:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-14T11:19:29Z"}, "message": "Remove hover inlay tooltips, replace them with location links", "tree": {"sha": "226c1e589d463432cb8b63261af1aa9a01aabf0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226c1e589d463432cb8b63261af1aa9a01aabf0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60075a6625bb5d4064ef02123b84bd81e574c8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60075a6625bb5d4064ef02123b84bd81e574c8e6", "html_url": "https://github.com/rust-lang/rust/commit/60075a6625bb5d4064ef02123b84bd81e574c8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60075a6625bb5d4064ef02123b84bd81e574c8e6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aafb0f1f8dd4c57d258374ac554b3162c497847d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aafb0f1f8dd4c57d258374ac554b3162c497847d", "html_url": "https://github.com/rust-lang/rust/commit/aafb0f1f8dd4c57d258374ac554b3162c497847d"}], "stats": {"total": 567, "additions": 187, "deletions": 380}, "files": [{"sha": "108696673ef09ffd2ce49e4dfe55de4bdd6e57c5", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 58, "deletions": 30, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -11,7 +11,7 @@ use smallvec::{smallvec, SmallVec};\n use stdx::never;\n use syntax::{\n     ast::{self, AstNode},\n-    match_ast, NodeOrToken, SyntaxNode, TextRange, TextSize,\n+    match_ast, NodeOrToken, SyntaxNode, TextRange,\n };\n \n use crate::{navigation_target::TryToNav, FileId};\n@@ -110,16 +110,21 @@ pub struct InlayHint {\n     pub kind: InlayKind,\n     /// The actual label to show in the inlay hint.\n     pub label: InlayHintLabel,\n-    /// The tooltip to show when hovering over the inlay hint, this may invoke other actions like\n-    /// hover requests to show.\n-    pub tooltip: Option<InlayTooltip>,\n+}\n+\n+impl InlayHint {\n+    fn closing_paren(range: TextRange) -> InlayHint {\n+        InlayHint { range, kind: InlayKind::ClosingParenthesis, label: InlayHintLabel::from(\")\") }\n+    }\n+    fn opening_paren(range: TextRange) -> InlayHint {\n+        InlayHint { range, kind: InlayKind::OpeningParenthesis, label: InlayHintLabel::from(\"(\") }\n+    }\n }\n \n #[derive(Debug)]\n pub enum InlayTooltip {\n     String(String),\n-    HoverRanged(FileId, TextRange),\n-    HoverOffset(FileId, TextSize),\n+    Markdown(String),\n }\n \n #[derive(Default)]\n@@ -128,37 +133,59 @@ pub struct InlayHintLabel {\n }\n \n impl InlayHintLabel {\n-    pub fn as_simple_str(&self) -> Option<&str> {\n-        match &*self.parts {\n-            [part] => part.as_simple_str(),\n-            _ => None,\n+    pub fn simple(\n+        s: impl Into<String>,\n+        tooltip: Option<InlayTooltip>,\n+        linked_location: Option<FileRange>,\n+    ) -> InlayHintLabel {\n+        InlayHintLabel {\n+            parts: smallvec![InlayHintLabelPart { text: s.into(), linked_location, tooltip }],\n         }\n     }\n \n     pub fn prepend_str(&mut self, s: &str) {\n         match &mut *self.parts {\n-            [part, ..] if part.as_simple_str().is_some() => part.text = format!(\"{s}{}\", part.text),\n-            _ => self.parts.insert(0, InlayHintLabelPart { text: s.into(), linked_location: None }),\n+            [InlayHintLabelPart { text, linked_location: None, tooltip: None }, ..] => {\n+                text.insert_str(0, s)\n+            }\n+            _ => self.parts.insert(\n+                0,\n+                InlayHintLabelPart { text: s.into(), linked_location: None, tooltip: None },\n+            ),\n         }\n     }\n \n     pub fn append_str(&mut self, s: &str) {\n         match &mut *self.parts {\n-            [.., part] if part.as_simple_str().is_some() => part.text.push_str(s),\n-            _ => self.parts.push(InlayHintLabelPart { text: s.into(), linked_location: None }),\n+            [.., InlayHintLabelPart { text, linked_location: None, tooltip: None }] => {\n+                text.push_str(s)\n+            }\n+            _ => self.parts.push(InlayHintLabelPart {\n+                text: s.into(),\n+                linked_location: None,\n+                tooltip: None,\n+            }),\n         }\n     }\n }\n \n impl From<String> for InlayHintLabel {\n     fn from(s: String) -> Self {\n-        Self { parts: smallvec![InlayHintLabelPart { text: s, linked_location: None }] }\n+        Self {\n+            parts: smallvec![InlayHintLabelPart { text: s, linked_location: None, tooltip: None }],\n+        }\n     }\n }\n \n impl From<&str> for InlayHintLabel {\n     fn from(s: &str) -> Self {\n-        Self { parts: smallvec![InlayHintLabelPart { text: s.into(), linked_location: None }] }\n+        Self {\n+            parts: smallvec![InlayHintLabelPart {\n+                text: s.into(),\n+                linked_location: None,\n+                tooltip: None\n+            }],\n+        }\n     }\n }\n \n@@ -182,25 +209,25 @@ pub struct InlayHintLabelPart {\n     /// When setting this, no tooltip must be set on the containing hint, or VS Code will display\n     /// them both.\n     pub linked_location: Option<FileRange>,\n-}\n-\n-impl InlayHintLabelPart {\n-    pub fn as_simple_str(&self) -> Option<&str> {\n-        match self {\n-            Self { text, linked_location: None } => Some(text),\n-            _ => None,\n-        }\n-    }\n+    /// The tooltip to show when hovering over the inlay hint, this may invoke other actions like\n+    /// hover requests to show.\n+    pub tooltip: Option<InlayTooltip>,\n }\n \n impl fmt::Debug for InlayHintLabelPart {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.as_simple_str() {\n-            Some(string) => string.fmt(f),\n-            None => f\n+        match self {\n+            Self { text, linked_location: None, tooltip: None } => text.fmt(f),\n+            Self { text, linked_location, tooltip } => f\n                 .debug_struct(\"InlayHintLabelPart\")\n-                .field(\"text\", &self.text)\n-                .field(\"linked_location\", &self.linked_location)\n+                .field(\"text\", text)\n+                .field(\"linked_location\", linked_location)\n+                .field(\n+                    \"tooltip\",\n+                    &tooltip.as_ref().map_or(\"\", |it| match it {\n+                        InlayTooltip::String(it) | InlayTooltip::Markdown(it) => it,\n+                    }),\n+                )\n                 .finish(),\n         }\n     }\n@@ -249,6 +276,7 @@ impl InlayHintLabelBuilder<'_> {\n         self.result.parts.push(InlayHintLabelPart {\n             text: take(&mut self.last_part),\n             linked_location: self.location.take(),\n+            tooltip: None,\n         });\n     }\n "}, {"sha": "9c4caec605fe746c45274108f96d9ff59ebfc48b", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -44,27 +44,12 @@ pub(super) fn hints(\n         mode_and_needs_parens_for_adjustment_hints(expr, config.adjustment_hints_mode);\n \n     if needs_outer_parens {\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::OpeningParenthesis,\n-            label: \"(\".into(),\n-            tooltip: None,\n-        });\n+        acc.push(InlayHint::opening_paren(expr.syntax().text_range()));\n     }\n \n     if postfix && needs_inner_parens {\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::OpeningParenthesis,\n-            label: \"(\".into(),\n-            tooltip: None,\n-        });\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::ClosingParenthesis,\n-            label: \")\".into(),\n-            tooltip: None,\n-        });\n+        acc.push(InlayHint::opening_paren(expr.syntax().text_range()));\n+        acc.push(InlayHint::closing_paren(expr.syntax().text_range()));\n     }\n \n     let (mut tmp0, mut tmp1);\n@@ -118,30 +103,14 @@ pub(super) fn hints(\n                 InlayKind::AdjustmentHint\n             },\n             label: if postfix { format!(\".{}\", text.trim_end()).into() } else { text.into() },\n-            tooltip: None,\n         });\n     }\n     if !postfix && needs_inner_parens {\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::OpeningParenthesis,\n-            label: \"(\".into(),\n-            tooltip: None,\n-        });\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::ClosingParenthesis,\n-            label: \")\".into(),\n-            tooltip: None,\n-        });\n+        acc.push(InlayHint::opening_paren(expr.syntax().text_range()));\n+        acc.push(InlayHint::closing_paren(expr.syntax().text_range()));\n     }\n     if needs_outer_parens {\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::ClosingParenthesis,\n-            label: \")\".into(),\n-            tooltip: None,\n-        });\n+        acc.push(InlayHint::closing_paren(expr.syntax().text_range()));\n     }\n     Some(())\n }"}, {"sha": "1a4bd353e77360d0e90f4c488b6ab4dfa80ffcf0", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -12,17 +12,15 @@ use syntax::{\n     match_ast,\n };\n \n-use crate::{\n-    inlay_hints::closure_has_block_body, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n-};\n+use crate::{inlay_hints::closure_has_block_body, InlayHint, InlayHintsConfig, InlayKind};\n \n use super::label_of_ty;\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n-    file_id: FileId,\n+    _file_id: FileId,\n     pat: &ast::IdentPat,\n ) -> Option<()> {\n     if !config.type_hints {\n@@ -52,10 +50,6 @@ pub(super) fn hints(\n         },\n         kind: InlayKind::TypeHint,\n         label,\n-        tooltip: pat\n-            .name()\n-            .map(|it| it.syntax().text_range())\n-            .map(|it| InlayTooltip::HoverRanged(file_id, it)),\n     });\n \n     Some(())\n@@ -326,14 +320,6 @@ fn main(a: SliceIter<'_, Container>) {\n                         label: [\n                             \"impl Iterator<Item = impl Iterator<Item = &&str>>\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                484..554,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 484..485,\n@@ -350,6 +336,7 @@ fn main(a: SliceIter<'_, Container>) {\n                                         range: 289..298,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"<\",\n                             InlayHintLabelPart {\n@@ -362,17 +349,10 @@ fn main(a: SliceIter<'_, Container>) {\n                                         range: 238..247,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \">\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                484..485,\n-                            ),\n-                        ),\n                     },\n                 ]\n             \"#]],"}, {"sha": "d0e42bc9141b0e0d376b28e584d443ee2fe20ff5", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -7,7 +7,7 @@ use ide_db::RootDatabase;\n \n use syntax::ast::{self, AstNode};\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+use crate::{InlayHint, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -44,7 +44,6 @@ pub(super) fn hints(\n             range,\n             kind: InlayKind::BindingModeHint,\n             label: r.to_string().into(),\n-            tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n         });\n     });\n     match pat {\n@@ -59,22 +58,11 @@ pub(super) fn hints(\n                 range: pat.syntax().text_range(),\n                 kind: InlayKind::BindingModeHint,\n                 label: bm.to_string().into(),\n-                tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n             });\n         }\n         ast::Pat::OrPat(pat) if !pattern_adjustments.is_empty() && outer_paren_pat.is_none() => {\n-            acc.push(InlayHint {\n-                range: pat.syntax().text_range(),\n-                kind: InlayKind::OpeningParenthesis,\n-                label: \"(\".into(),\n-                tooltip: None,\n-            });\n-            acc.push(InlayHint {\n-                range: pat.syntax().text_range(),\n-                kind: InlayKind::ClosingParenthesis,\n-                label: \")\".into(),\n-                tooltip: None,\n-            });\n+            acc.push(InlayHint::opening_paren(pat.syntax().text_range()));\n+            acc.push(InlayHint::closing_paren(pat.syntax().text_range()));\n         }\n         _ => (),\n     }"}, {"sha": "c00fb83a88e194c33525c11949c1ac1ca681793f", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 26, "deletions": 132, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -5,15 +5,15 @@ use syntax::{\n     Direction, NodeOrToken, SyntaxKind, T,\n };\n \n-use crate::{FileId, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+use crate::{FileId, InlayHint, InlayHintsConfig, InlayKind};\n \n use super::label_of_ty;\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n-    file_id: FileId,\n+    _file_id: FileId,\n     expr: &ast::Expr,\n ) -> Option<()> {\n     if !config.chaining_hints {\n@@ -61,7 +61,6 @@ pub(super) fn hints(\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n                 label: label_of_ty(famous_defs, config, ty)?,\n-                tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n     }\n@@ -124,17 +123,10 @@ fn main() {\n                                         range: 63..64,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                147..172,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 147..154,\n@@ -151,17 +143,10 @@ fn main() {\n                                         range: 7..8,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                147..154,\n-                            ),\n-                        ),\n                     },\n                 ]\n             \"#]],\n@@ -214,29 +199,13 @@ fn main() {\n                         label: [\n                             \"C\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                143..190,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 143..179,\n                         kind: ChainingHint,\n                         label: [\n                             \"B\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                143..179,\n-                            ),\n-                        ),\n                     },\n                 ]\n             \"#]],\n@@ -282,17 +251,10 @@ fn main() {\n                                         range: 51..52,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                143..190,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 143..179,\n@@ -309,17 +271,10 @@ fn main() {\n                                         range: 29..30,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                143..179,\n-                            ),\n-                        ),\n                     },\n                 ]\n             \"#]],\n@@ -366,6 +321,7 @@ fn main() {\n                                         range: 23..24,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"<\",\n                             InlayHintLabelPart {\n@@ -378,17 +334,10 @@ fn main() {\n                                         range: 55..56,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"<i32, bool>>\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                246..283,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 246..265,\n@@ -405,6 +354,7 @@ fn main() {\n                                         range: 7..8,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"<\",\n                             InlayHintLabelPart {\n@@ -417,17 +367,10 @@ fn main() {\n                                         range: 55..56,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"<i32, bool>>\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                246..265,\n-                            ),\n-                        ),\n                     },\n                 ]\n             \"#]],\n@@ -467,44 +410,20 @@ fn main() {\n                         label: [\n                             \"impl Iterator<Item = ()>\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..241,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 174..224,\n                         kind: ChainingHint,\n                         label: [\n                             \"impl Iterator<Item = ()>\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..224,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 174..206,\n                         kind: ChainingHint,\n                         label: [\n                             \"impl Iterator<Item = ()>\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..206,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 174..189,\n@@ -521,17 +440,10 @@ fn main() {\n                                         range: 24..30,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                174..189,\n-                            ),\n-                        ),\n                     },\n                 ]\n             \"#]],\n@@ -577,17 +489,10 @@ fn main() {\n                                         range: 7..13,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                124..130,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 145..185,\n@@ -604,17 +509,10 @@ fn main() {\n                                         range: 7..13,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                145..185,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 145..168,\n@@ -631,32 +529,28 @@ fn main() {\n                                         range: 7..13,\n                                     },\n                                 ),\n+                                tooltip: \"\",\n                             },\n                             \"\",\n                         ],\n-                        tooltip: Some(\n-                            HoverRanged(\n-                                FileId(\n-                                    0,\n-                                ),\n-                                145..168,\n-                            ),\n-                        ),\n                     },\n                     InlayHint {\n                         range: 222..228,\n                         kind: ParameterHint,\n                         label: [\n-                            \"self\",\n-                        ],\n-                        tooltip: Some(\n-                            HoverOffset(\n-                                FileId(\n-                                    0,\n+                            InlayHintLabelPart {\n+                                text: \"self\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 42..46,\n+                                    },\n                                 ),\n-                                42,\n-                            ),\n-                        ),\n+                                tooltip: \"\",\n+                            },\n+                        ],\n                     },\n                 ]\n             \"#]],"}, {"sha": "684d74282bd953a444ea7d5d888b9d58633a0d2b", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -5,15 +5,12 @@\n //! ```\n use hir::{HirDisplay, Semantics};\n use ide_db::{base_db::FileRange, RootDatabase};\n-use smallvec::smallvec;\n use syntax::{\n     ast::{self, AstNode, HasName},\n     match_ast, SyntaxKind, SyntaxNode, T,\n };\n \n-use crate::{\n-    inlay_hints::InlayHintLabelPart, FileId, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n-};\n+use crate::{FileId, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -117,10 +114,7 @@ pub(super) fn hints(\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n-        label: InlayHintLabel {\n-            parts: smallvec![InlayHintLabelPart { text: label, linked_location }],\n-        },\n-        tooltip: None, // provided by label part location\n+        label: InlayHintLabel::simple(label, None, linked_location),\n     });\n \n     None"}, {"sha": "b1aa726ba5e2a5461b415a5d5b332ec5d58b112e", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::{self, AstNode};\n \n use crate::{\n     inlay_hints::closure_has_block_body, ClosureReturnTypeHints, InlayHint, InlayHintsConfig,\n-    InlayKind, InlayTooltip,\n+    InlayKind,\n };\n \n use super::label_of_ty;\n@@ -13,7 +13,7 @@ pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n-    file_id: FileId,\n+    _file_id: FileId,\n     closure: ast::ClosureExpr,\n ) -> Option<()> {\n     if config.closure_return_type_hints == ClosureReturnTypeHints::Never {\n@@ -43,7 +43,6 @@ pub(super) fn hints(\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: label_of_ty(famous_defs, config, ty)?,\n-        tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())\n }"}, {"sha": "6afc4b6330700f33069d975b9022ef5885143eb3", "filename": "crates/ide/src/inlay_hints/discriminant.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -7,7 +7,9 @@\n use ide_db::{base_db::FileId, famous_defs::FamousDefs};\n use syntax::ast::{self, AstNode, HasName};\n \n-use crate::{DiscriminantHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+use crate::{\n+    DiscriminantHints, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind, InlayTooltip,\n+};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -42,14 +44,17 @@ pub(super) fn hints(\n             None => name.syntax().text_range(),\n         },\n         kind: InlayKind::DiscriminantHint,\n-        label: match &d {\n-            Ok(v) => format!(\"{}\", v).into(),\n-            Err(_) => \"?\".into(),\n-        },\n-        tooltip: Some(InlayTooltip::String(match &d {\n-            Ok(_) => \"enum variant discriminant\".into(),\n-            Err(e) => format!(\"{e:?}\").into(),\n-        })),\n+        label: InlayHintLabel::simple(\n+            match &d {\n+                Ok(v) => format!(\"{}\", v),\n+                Err(_) => \"?\".into(),\n+            },\n+            Some(InlayTooltip::String(match &d {\n+                Ok(_) => \"enum variant discriminant\".into(),\n+                Err(e) => format!(\"{e:?}\").into(),\n+            })),\n+            None,\n+        ),\n     });\n \n     Some(())"}, {"sha": "ce6f2e486c0be7a6efe6037cca1191086ad427a3", "filename": "crates/ide/src/inlay_hints/fn_lifetime_fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n     SyntaxToken,\n };\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints};\n+use crate::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -25,7 +25,6 @@ pub(super) fn hints(\n         range: t.text_range(),\n         kind: InlayKind::LifetimeHint,\n         label: label.into(),\n-        tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n     };\n \n     let param_list = func.param_list()?;\n@@ -190,14 +189,12 @@ pub(super) fn hints(\n                     if is_empty { \"\" } else { \", \" }\n                 )\n                 .into(),\n-                tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n             });\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamListHint,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n-            tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n         }),\n     }\n     Some(())"}, {"sha": "f65b1d09a4067375d18922c8c4101359d44e347c", "filename": "crates/ide/src/inlay_hints/implicit_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     SyntaxKind,\n };\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints};\n+use crate::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -34,7 +34,6 @@ pub(super) fn hints(\n                 range: t.text_range(),\n                 kind: InlayKind::LifetimeHint,\n                 label: \"'static\".to_owned().into(),\n-                tooltip: Some(InlayTooltip::String(\"Elided static lifetime\".into())),\n             });\n         }\n     }"}, {"sha": "dbbc35d5893c5e0b709d311512a56146bc037c91", "filename": "crates/ide/src/inlay_hints/param_name.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -10,7 +10,7 @@ use ide_db::{base_db::FileRange, RootDatabase};\n use stdx::to_lower_snake_case;\n use syntax::ast::{self, AstNode, HasArgList, HasName, UnaryOp};\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+use crate::{InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -43,21 +43,20 @@ pub(super) fn hints(\n             !should_hide_param_name_hint(sema, &callable, param_name, arg)\n         })\n         .map(|(param, param_name, _, FileRange { range, .. })| {\n-            let mut tooltip = None;\n+            let mut linked_location = None;\n             if let Some(name) = param {\n                 if let hir::CallableKind::Function(f) = callable.kind() {\n                     // assert the file is cached so we can map out of macros\n                     if let Some(_) = sema.source(f) {\n-                        tooltip = sema.original_range_opt(name.syntax());\n+                        linked_location = sema.original_range_opt(name.syntax());\n                     }\n                 }\n             }\n \n             InlayHint {\n                 range,\n                 kind: InlayKind::ParameterHint,\n-                label: param_name.into(),\n-                tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n+                label: InlayHintLabel::simple(param_name, None, linked_location),\n             }\n         });\n "}, {"sha": "8424d82aa18300dfe3fb83e937a1f45c108703d3", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -82,7 +82,8 @@ pub use crate::{\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n         AdjustmentHints, AdjustmentHintsMode, ClosureReturnTypeHints, DiscriminantHints, InlayHint,\n-        InlayHintLabel, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints,\n+        InlayHintLabel, InlayHintLabelPart, InlayHintsConfig, InlayKind, InlayTooltip,\n+        LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "033ef75cca0de1a3eb4d054cfb9d6c3a5af2d303", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -29,7 +29,6 @@ use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n-use tracing::error;\n use vfs::AbsPathBuf;\n \n use crate::{\n@@ -1360,55 +1359,10 @@ pub(crate) fn handle_inlay_hints(\n }\n \n pub(crate) fn handle_inlay_hints_resolve(\n-    snap: GlobalStateSnapshot,\n-    mut hint: InlayHint,\n+    _snap: GlobalStateSnapshot,\n+    hint: InlayHint,\n ) -> Result<InlayHint> {\n     let _p = profile::span(\"handle_inlay_hints_resolve\");\n-    let data = match hint.data.take() {\n-        Some(it) => it,\n-        None => return Ok(hint),\n-    };\n-\n-    let resolve_data: lsp_ext::InlayHintResolveData = serde_json::from_value(data)?;\n-\n-    match snap.url_file_version(&resolve_data.text_document.uri) {\n-        Some(version) if version == resolve_data.text_document.version => {}\n-        Some(version) => {\n-            error!(\n-                \"attempted inlayHints/resolve of '{}' at version {} while server version is {}\",\n-                resolve_data.text_document.uri, resolve_data.text_document.version, version,\n-            );\n-            return Ok(hint);\n-        }\n-        None => {\n-            error!(\n-                \"attempted inlayHints/resolve of unknown file '{}' at version {}\",\n-                resolve_data.text_document.uri, resolve_data.text_document.version,\n-            );\n-            return Ok(hint);\n-        }\n-    }\n-    let file_range = from_proto::file_range_uri(\n-        &snap,\n-        &resolve_data.text_document.uri,\n-        match resolve_data.position {\n-            PositionOrRange::Position(pos) => Range::new(pos, pos),\n-            PositionOrRange::Range(range) => range,\n-        },\n-    )?;\n-    let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n-        None => return Ok(hint),\n-        Some(info) => info,\n-    };\n-\n-    let markup_kind =\n-        snap.config.hover().documentation.map_or(ide::HoverDocFormat::Markdown, |kind| kind);\n-\n-    // FIXME: hover actions?\n-    hint.tooltip = Some(lsp_types::InlayHintTooltip::MarkupContent(to_proto::markup_content(\n-        info.info.markup,\n-        markup_kind,\n-    )));\n     Ok(hint)\n }\n "}, {"sha": "b117acd1b0f7cb97064de044a0034130d50943ac", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -3,11 +3,11 @@\n use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n+use lsp_types::PositionEncodingKind;\n use lsp_types::{\n     notification::Notification, CodeActionKind, DocumentOnTypeFormattingParams,\n     PartialResultParams, Position, Range, TextDocumentIdentifier, WorkDoneProgressParams,\n };\n-use lsp_types::{PositionEncodingKind, VersionedTextDocumentIdentifier};\n use serde::{Deserialize, Serialize};\n \n pub enum AnalyzerStatus {}\n@@ -568,10 +568,7 @@ pub struct CompletionResolveData {\n }\n \n #[derive(Debug, Serialize, Deserialize)]\n-pub struct InlayHintResolveData {\n-    pub text_document: VersionedTextDocumentIdentifier,\n-    pub position: PositionOrRange,\n-}\n+pub struct InlayHintResolveData {}\n \n #[derive(Debug, Serialize, Deserialize)]\n pub struct CompletionImport {"}, {"sha": "d9cbb2bc206a20be87cbc28dfc9b7b2ff57e257a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 60, "deletions": 57, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60075a6625bb5d4064ef02123b84bd81e574c8e6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=60075a6625bb5d4064ef02123b84bd81e574c8e6", "patch": "@@ -9,9 +9,9 @@ use ide::{\n     Annotation, AnnotationKind, Assist, AssistKind, Cancellable, CompletionItem,\n     CompletionItemKind, CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit,\n     Fold, FoldKind, Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint,\n-    InlayHintLabel, InlayKind, Markup, NavigationTarget, ReferenceCategory, RenameError, Runnable,\n-    Severity, SignatureHelp, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange,\n-    TextSize,\n+    InlayHintLabel, InlayHintLabelPart, InlayKind, Markup, NavigationTarget, ReferenceCategory,\n+    RenameError, Runnable, Severity, SignatureHelp, SourceChange, StructureNodeKind, SymbolKind,\n+    TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n use serde_json::to_value;\n@@ -438,6 +438,8 @@ pub(crate) fn inlay_hint(\n         _ => {}\n     }\n \n+    let (label, tooltip) = inlay_hint_label(snap, inlay_hint.label)?;\n+\n     Ok(lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n@@ -481,7 +483,9 @@ pub(crate) fn inlay_hint(\n             | InlayKind::TypeHint\n             | InlayKind::DiscriminantHint\n             | InlayKind::ClosingBraceHint => false,\n-            InlayKind::BindingModeHint => inlay_hint.label.as_simple_str() != Some(\"&\"),\n+            InlayKind::BindingModeHint => {\n+                matches!(&label, lsp_types::InlayHintLabel::String(s) if s != \"&\")\n+            }\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n         kind: match inlay_hint.kind {\n@@ -500,68 +504,67 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,\n-        data: (|| match inlay_hint.tooltip {\n-            Some(ide::InlayTooltip::HoverOffset(file_id, offset)) => {\n-                let uri = url(snap, file_id);\n-                let line_index = snap.file_line_index(file_id).ok()?;\n-\n-                let text_document = lsp_types::VersionedTextDocumentIdentifier {\n-                    version: snap.url_file_version(&uri)?,\n-                    uri,\n-                };\n-                to_value(lsp_ext::InlayHintResolveData {\n-                    text_document,\n-                    position: lsp_ext::PositionOrRange::Position(position(&line_index, offset)),\n-                })\n-                .ok()\n-            }\n-            Some(ide::InlayTooltip::HoverRanged(file_id, text_range)) => {\n-                let uri = url(snap, file_id);\n-                let text_document = lsp_types::VersionedTextDocumentIdentifier {\n-                    version: snap.url_file_version(&uri)?,\n-                    uri,\n-                };\n-                let line_index = snap.file_line_index(file_id).ok()?;\n-                to_value(lsp_ext::InlayHintResolveData {\n-                    text_document,\n-                    position: lsp_ext::PositionOrRange::Range(range(&line_index, text_range)),\n-                })\n-                .ok()\n-            }\n-            _ => None,\n-        })(),\n-        tooltip: Some(match inlay_hint.tooltip {\n-            Some(ide::InlayTooltip::String(s)) => lsp_types::InlayHintTooltip::String(s),\n-            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label.to_string()),\n-        }),\n-        label: inlay_hint_label(snap, inlay_hint.label)?,\n+        data: None,\n+        tooltip,\n+        label,\n     })\n }\n \n fn inlay_hint_label(\n     snap: &GlobalStateSnapshot,\n-    label: InlayHintLabel,\n-) -> Cancellable<lsp_types::InlayHintLabel> {\n-    Ok(match label.as_simple_str() {\n-        Some(s) => lsp_types::InlayHintLabel::String(s.into()),\n-        None => lsp_types::InlayHintLabel::LabelParts(\n-            label\n+    mut label: InlayHintLabel,\n+) -> Cancellable<(lsp_types::InlayHintLabel, Option<lsp_types::InlayHintTooltip>)> {\n+    let res = match &*label.parts {\n+        [InlayHintLabelPart { linked_location: None, .. }] => {\n+            let InlayHintLabelPart { text, tooltip, .. } = label.parts.pop().unwrap();\n+            (\n+                lsp_types::InlayHintLabel::String(text),\n+                match tooltip {\n+                    Some(ide::InlayTooltip::String(s)) => {\n+                        Some(lsp_types::InlayHintTooltip::String(s))\n+                    }\n+                    Some(ide::InlayTooltip::Markdown(s)) => {\n+                        Some(lsp_types::InlayHintTooltip::MarkupContent(lsp_types::MarkupContent {\n+                            kind: lsp_types::MarkupKind::Markdown,\n+                            value: s,\n+                        }))\n+                    }\n+                    None => None,\n+                },\n+            )\n+        }\n+        _ => {\n+            let parts = label\n                 .parts\n                 .into_iter()\n                 .map(|part| {\n-                    Ok(lsp_types::InlayHintLabelPart {\n-                        value: part.text,\n-                        tooltip: None,\n-                        location: part\n-                            .linked_location\n-                            .map(|range| location(snap, range))\n-                            .transpose()?,\n-                        command: None,\n-                    })\n+                    part.linked_location.map(|range| location(snap, range)).transpose().map(\n+                        |location| lsp_types::InlayHintLabelPart {\n+                            value: part.text,\n+                            tooltip: match part.tooltip {\n+                                Some(ide::InlayTooltip::String(s)) => {\n+                                    Some(lsp_types::InlayHintLabelPartTooltip::String(s))\n+                                }\n+                                Some(ide::InlayTooltip::Markdown(s)) => {\n+                                    Some(lsp_types::InlayHintLabelPartTooltip::MarkupContent(\n+                                        lsp_types::MarkupContent {\n+                                            kind: lsp_types::MarkupKind::Markdown,\n+                                            value: s,\n+                                        },\n+                                    ))\n+                                }\n+                                None => None,\n+                            },\n+                            location,\n+                            command: None,\n+                        },\n+                    )\n                 })\n-                .collect::<Cancellable<Vec<_>>>()?,\n-        ),\n-    })\n+                .collect::<Cancellable<_>>()?;\n+            (lsp_types::InlayHintLabel::LabelParts(parts), None)\n+        }\n+    };\n+    Ok(res)\n }\n \n static TOKEN_RESULT_COUNTER: AtomicU32 = AtomicU32::new(1);"}]}