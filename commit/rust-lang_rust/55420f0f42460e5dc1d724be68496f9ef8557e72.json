{"sha": "55420f0f42460e5dc1d724be68496f9ef8557e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NDIwZjBmNDI0NjBlNWRjMWQ3MjRiZTY4NDk2ZjllZjg1NTdlNzI=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2018-12-11T01:31:53Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2018-12-11T01:31:53Z"}, "message": "Fix iterator nits", "tree": {"sha": "05f0a89b1939030c29c9645321271818b03a6e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f0a89b1939030c29c9645321271818b03a6e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55420f0f42460e5dc1d724be68496f9ef8557e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55420f0f42460e5dc1d724be68496f9ef8557e72", "html_url": "https://github.com/rust-lang/rust/commit/55420f0f42460e5dc1d724be68496f9ef8557e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55420f0f42460e5dc1d724be68496f9ef8557e72/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083585859b2e499998c5b10ff5241f1f81ce6032", "url": "https://api.github.com/repos/rust-lang/rust/commits/083585859b2e499998c5b10ff5241f1f81ce6032", "html_url": "https://github.com/rust-lang/rust/commit/083585859b2e499998c5b10ff5241f1f81ce6032"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "935466d927c9f6b53f924e54ca5de5f289111455", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/55420f0f42460e5dc1d724be68496f9ef8557e72/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55420f0f42460e5dc1d724be68496f9ef8557e72/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=55420f0f42460e5dc1d724be68496f9ef8557e72", "patch": "@@ -31,7 +31,7 @@ pub fn args() -> Args {\n             lp_cmd_line as *const u16,\n             || current_exe().map(PathBuf::into_os_string).unwrap_or_else(|_| OsString::new()));\n \n-        Args { parsed_args_list: parsed_args_list }\n+        Args { parsed_args_list: parsed_args_list.into_iter() }\n     }\n }\n \n@@ -50,7 +50,7 @@ pub fn args() -> Args {\n /// <https://gist.github.com/notriddle/dde431930c392e428055b2dc22e638f5> or\n /// <https://paste.gg/p/anonymous/47d6ed5f5bd549168b1c69c799825223>.\n unsafe fn parse_lp_cmd_line<F: Fn() -> OsString>(lp_cmd_line: *const u16, exe_name: F)\n-                                                 -> vec::IntoIter<OsString> {\n+                                                 -> Vec<OsString> {\n     const BACKSLASH: u16 = '\\\\' as u16;\n     const QUOTE: u16 = '\"' as u16;\n     const TAB: u16 = '\\t' as u16;\n@@ -62,7 +62,7 @@ unsafe fn parse_lp_cmd_line<F: Fn() -> OsString>(lp_cmd_line: *const u16, exe_na\n     let mut cur = Vec::new();\n     if lp_cmd_line.is_null() || *lp_cmd_line == 0 {\n         ret_val.push(exe_name());\n-        return ret_val.into_iter();\n+        return ret_val;\n     }\n     let mut i = 0;\n     // The executable name at the beginning is special.\n@@ -77,7 +77,7 @@ unsafe fn parse_lp_cmd_line<F: Fn() -> OsString>(lp_cmd_line: *const u16, exe_na\n                     ret_val.push(OsString::from_wide(\n                         slice::from_raw_parts(lp_cmd_line.offset(1), i as usize - 1)\n                     ));\n-                    return ret_val.into_iter();\n+                    return ret_val;\n                 }\n                 if c == QUOTE {\n                     break;\n@@ -107,7 +107,7 @@ unsafe fn parse_lp_cmd_line<F: Fn() -> OsString>(lp_cmd_line: *const u16, exe_na\n                     ret_val.push(OsString::from_wide(\n                         slice::from_raw_parts(lp_cmd_line, i as usize)\n                     ));\n-                    return ret_val.into_iter();\n+                    return ret_val;\n                 }\n                 if c > 0 && c <= SPACE {\n                     break;\n@@ -170,7 +170,7 @@ unsafe fn parse_lp_cmd_line<F: Fn() -> OsString>(lp_cmd_line: *const u16, exe_na\n         }\n         i += 1;\n     }\n-    ret_val.into_iter()\n+    ret_val\n }\n \n pub struct Args {\n@@ -183,18 +183,7 @@ pub struct ArgsInnerDebug<'a> {\n \n impl<'a> fmt::Debug for ArgsInnerDebug<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.write_str(\"[\")?;\n-        let mut first = true;\n-        for i in self.args.parsed_args_list.as_slice() {\n-            if !first {\n-                f.write_str(\", \")?;\n-            }\n-            first = false;\n-\n-            fmt::Debug::fmt(i, f)?;\n-        }\n-        f.write_str(\"]\")?;\n-        Ok(())\n+        self.args.parsed_args_list.as_slice().fmt(f)\n     }\n }\n "}]}