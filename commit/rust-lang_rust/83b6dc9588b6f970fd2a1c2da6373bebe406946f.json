{"sha": "83b6dc9588b6f970fd2a1c2da6373bebe406946f", "node_id": "C_kwDOAAsO6NoAKDgzYjZkYzk1ODhiNmY5NzBmZDJhMWMyZGE2MzczYmViZTQwNjk0NmY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T04:31:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-01T23:47:54Z"}, "message": "Move almost all of the function in `query_callbacks` to a generic function", "tree": {"sha": "097e323ac59eb60d6a4264df3edf4dc235e56eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097e323ac59eb60d6a4264df3edf4dc235e56eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b6dc9588b6f970fd2a1c2da6373bebe406946f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b6dc9588b6f970fd2a1c2da6373bebe406946f", "html_url": "https://github.com/rust-lang/rust/commit/83b6dc9588b6f970fd2a1c2da6373bebe406946f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b6dc9588b6f970fd2a1c2da6373bebe406946f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "html_url": "https://github.com/rust-lang/rust/commit/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "49afa3b3634310ff2381b849b60f136e2d86f7e3", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/83b6dc9588b6f970fd2a1c2da6373bebe406946f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b6dc9588b6f970fd2a1c2da6373bebe406946f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=83b6dc9588b6f970fd2a1c2da6373bebe406946f", "patch": "@@ -7,14 +7,16 @@ use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n use rustc_errors::{Diagnostic, Handler};\n-use rustc_middle::dep_graph::{self, DepKind, DepNode, DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{\n+    self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n+};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::{DepNodeParams, HasDepContext};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    force_query, QueryContext, QueryDescription, QueryJobId, QueryMap, QuerySideEffects,\n-    QueryStackFrame,\n+    force_query, QueryConfig, QueryContext, QueryDescription, QueryJobId, QueryMap,\n+    QuerySideEffects, QueryStackFrame,\n };\n use std::any::Any;\n use std::num::NonZeroU64;\n@@ -303,19 +305,19 @@ pub(crate) fn try_load_from_on_disk_cache<'tcx, K: DepNodeParams<TyCtxt<'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     dep_node: DepNode,\n     cache_on_disk: fn(TyCtxt<'tcx>, &K) -> bool,\n-    do_query: fn(TyCtxt<'tcx>, K) -> V,\n+    cache_query_deps: fn(TyCtxt<'tcx>, K) -> V,\n ) {\n     debug_assert!(tcx.dep_graph.is_green(&dep_node));\n \n     let key = K::recover(tcx, &dep_node).unwrap_or_else(|| {\n         panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash)\n     });\n     if cache_on_disk(tcx, &key) {\n-        let _ = do_query(tcx, key);\n+        let _ = cache_query_deps(tcx, key);\n     }\n }\n \n-fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n+pub(crate) fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n where\n     Q: QueryDescription<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n@@ -331,6 +333,39 @@ where\n     }\n }\n \n+pub(crate) fn query_callback<'tcx, Q: QueryConfig>(\n+    // NOTE: we can't remove these function pointers, because `recover` is invariant -> `try_load_from_on_disk_cache` takes a concrete lifetime, not a universal lifetime.\n+    // Instead, we infer the correct lifetime at the callsite, so we can pass in a HRTB function pointer to the DepKindStruct.\n+    try_load_from_on_disk_cache: fn(TyCtxt<'_>, DepNode),\n+    force_from_dep_node: fn(TyCtxt<'_>, DepNode) -> bool,\n+    is_anon: bool,\n+    is_eval_always: bool,\n+) -> DepKindStruct\n+where\n+    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+{\n+    let fingerprint_style = Q::Key::fingerprint_style();\n+\n+    if is_anon || !fingerprint_style.reconstructible() {\n+        return DepKindStruct {\n+            is_anon,\n+            is_eval_always,\n+            fingerprint_style,\n+            force_from_dep_node: None,\n+            try_load_from_on_disk_cache: None,\n+        };\n+    }\n+\n+    DepKindStruct {\n+        is_anon,\n+        is_eval_always,\n+        fingerprint_style,\n+        force_from_dep_node: Some(force_from_dep_node),\n+        try_load_from_on_disk_cache: Some(try_load_from_on_disk_cache),\n+    }\n+}\n+\n // NOTE: `$V` isn't used here, but we still need to match on it so it can be passed to other macros\n // invoked by `rustc_query_append`.\n macro_rules! define_queries {\n@@ -399,7 +434,6 @@ macro_rules! define_queries {\n         #[allow(nonstandard_style)]\n         mod query_callbacks {\n             use super::*;\n-            use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::QueryDescription;\n             use rustc_query_system::dep_graph::FingerprintStyle;\n \n@@ -458,29 +492,14 @@ macro_rules! define_queries {\n             $(pub(crate) fn $name()-> DepKindStruct {\n                 let is_anon = is_anon!([$($modifiers)*]);\n                 let is_eval_always = is_eval_always!([$($modifiers)*]);\n+                type Q<'tcx> = queries::$name<'tcx>;\n \n-                let fingerprint_style =\n-                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::fingerprint_style();\n-\n-                if is_anon || !fingerprint_style.reconstructible() {\n-                    return DepKindStruct {\n-                        is_anon,\n-                        is_eval_always,\n-                        fingerprint_style,\n-                        force_from_dep_node: None,\n-                        try_load_from_on_disk_cache: None,\n-                    }\n-                }\n-\n-                DepKindStruct {\n+                $crate::plumbing::query_callback::<Q<'_>>(\n+                    |tcx, key| $crate::plumbing::try_load_from_on_disk_cache::<<Q<'_> as QueryConfig>::Key, _>(tcx, key, <Q<'_>>::cache_on_disk, TyCtxt::$name),\n+                    |tcx, key| $crate::plumbing::force_from_dep_node::<Q<'_>>(tcx, key),\n                     is_anon,\n-                    is_eval_always,\n-                    fingerprint_style,\n-                    force_from_dep_node: Some(|tcx, dep_node| $crate::plumbing::force_from_dep_node::<queries::$name<'_>>(tcx, dep_node)),\n-                    try_load_from_on_disk_cache: Some(|tcx, key| $crate::plumbing::try_load_from_on_disk_cache::<\n-                        <queries::$name<'_> as QueryConfig>::Key, _\n-                    >(tcx, key, queries::$name::cache_on_disk, TyCtxt::$name)),\n-                }\n+                    is_eval_always\n+                )\n             })*\n         }\n "}]}