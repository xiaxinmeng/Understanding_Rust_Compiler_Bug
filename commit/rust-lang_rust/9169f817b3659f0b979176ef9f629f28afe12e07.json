{"sha": "9169f817b3659f0b979176ef9f629f28afe12e07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjlmODE3YjM2NTlmMGI5NzkxNzZlZjlmNjI5ZjI4YWZlMTJlMDc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-26T10:11:19Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-27T10:10:58Z"}, "message": "Add helpful logging statements.\n\nThis commit adds logging statements to `promote_consts` and\n`qualify_consts` to make it easier to understand what it is doing.", "tree": {"sha": "98b01ac119ea46bc416384108502e637bb07fc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b01ac119ea46bc416384108502e637bb07fc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9169f817b3659f0b979176ef9f629f28afe12e07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlvUObIACgkQAXYLT59T\n8VRojA/9GnGDkG3NIu25nusyDi2imQs+iH4639xjJ4jI9CBHAK6AchtlBKahcde2\natlmnuJMhDAaxjCJ8LlHGeeTwmbAw6c9zHZ1qZI/pxUMc5PrjOgm7ktw7zMsiYMe\n3FYTFsj/ZXnGKndln4If/HmAKEAGl5cJ+5iNXTPV40mQPkJO5UJ0PL9hHMthFOwY\n+tXxvzAUA7BZZwJ+KZgAiE6g3p1MUyMofB9JH+2fSSul0WlsuTDU+Qn2z7uBjUfB\n9YKMp4bUmuY0ViyQBKqzbVasCT/2gJEAV1JCVkjod8oX0ld3ja4aOgYIIxwWwAKm\ngVXE0j24S/62IQIW2P35sPd/lYKHraudKF8Uy0YpMjjuMZXUOAQ4JVALuihTutem\nLniDK6PV8nJIhgti5UBgJGA8780yNmyCfODrLDLY8LrAk4H7DNI5u0KmLBzm0wT5\nKU2L+8FAv4lcYMUfDDiDOHtYPtaVpY+KGKhyuuJyjDgsqlykdxKsY54AYUwd3jiL\nIIVbZq1CFtYSQyplfpyLL/KOTyY4yNy/5tCIxjz5nzVCGeMNHs1E5j0BbEcAfZWN\nLPohwk+UOnmKwYV5o5/qojeng3IYLZx5m7dXTxQl925dP60mXdMP2LHYIPzyQYMI\nuh1MDJBjkLDjDD64pyJ/itvOnMxIxdYaSY+lWiUl72Vj7MN5iK4=\n=mZcj\n-----END PGP SIGNATURE-----", "payload": "tree 98b01ac119ea46bc416384108502e637bb07fc29\nparent 42c11de47b6b1da71537eb161b102177d798a08d\nauthor David Wood <david@davidtw.co> 1540548679 +0200\ncommitter David Wood <david@davidtw.co> 1540635058 +0200\n\nAdd helpful logging statements.\n\nThis commit adds logging statements to `promote_consts` and\n`qualify_consts` to make it easier to understand what it is doing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9169f817b3659f0b979176ef9f629f28afe12e07", "html_url": "https://github.com/rust-lang/rust/commit/9169f817b3659f0b979176ef9f629f28afe12e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9169f817b3659f0b979176ef9f629f28afe12e07/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c11de47b6b1da71537eb161b102177d798a08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c11de47b6b1da71537eb161b102177d798a08d", "html_url": "https://github.com/rust-lang/rust/commit/42c11de47b6b1da71537eb161b102177d798a08d"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "8fb48e654bfe3882ce84b7465560cd35d7575b83", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9169f817b3659f0b979176ef9f629f28afe12e07/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169f817b3659f0b979176ef9f629f28afe12e07/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=9169f817b3659f0b979176ef9f629f28afe12e07", "patch": "@@ -53,6 +53,7 @@ pub enum TempState {\n \n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n+        debug!(\"is_promotable: self={:?}\", self);\n         if let TempState::Defined { uses, .. } = *self {\n             uses > 0\n         } else {\n@@ -88,6 +89,7 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                    &index: &Local,\n                    context: PlaceContext<'tcx>,\n                    location: Location) {\n+        debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries\n         if self.mir.local_kind(index) != LocalKind::Temp {\n             return;\n@@ -97,10 +99,15 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n         // then it's constant and thus drop is noop.\n         // Storage live ranges are also irrelevant.\n         if context.is_drop() || context.is_storage_marker() {\n+            debug!(\n+                \"visit_local: context.is_drop={:?} context.is_storage_marker={:?}\",\n+                context.is_drop(), context.is_storage_marker(),\n+            );\n             return;\n         }\n \n         let temp = &mut self.temps[index];\n+        debug!(\"visit_local: temp={:?}\", temp);\n         if *temp == TempState::Undefined {\n             match context {\n                 PlaceContext::Store |\n@@ -121,6 +128,7 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                 PlaceContext::Borrow {..} => true,\n                 _ => context.is_nonmutating_use()\n             };\n+            debug!(\"visit_local: allowed_use={:?}\", allowed_use);\n             if allowed_use {\n                 *uses += 1;\n                 return;"}, {"sha": "c9433ada1352544030e212ca681aa0756d929f9c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9169f817b3659f0b979176ef9f629f28afe12e07/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169f817b3659f0b979176ef9f629f28afe12e07/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9169f817b3659f0b979176ef9f629f28afe12e07", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx> Qualif {\n }\n \n /// What kind of item we are in.\n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum Mode {\n     Const,\n     Static,\n@@ -383,6 +383,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         // Collect all the temps we need to promote.\n         let mut promoted_temps = BitSet::new_empty(self.temp_promotion_state.len());\n \n+        debug!(\"qualify_const: promotion_candidates={:?}\", self.promotion_candidates);\n         for candidate in &self.promotion_candidates {\n             match *candidate {\n                 Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n@@ -414,6 +415,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                    &local: &Local,\n                    _: PlaceContext<'tcx>,\n                    _: Location) {\n+        debug!(\"visit_local: local={:?}\", local);\n         let kind = self.mir.local_kind(local);\n         match kind {\n             LocalKind::ReturnPointer => {\n@@ -435,6 +437,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n \n                 if !self.temp_promotion_state[local].is_promotable() {\n+                    debug!(\"visit_local: (not promotable) local={:?}\", local);\n                     self.add(Qualif::NOT_PROMOTABLE);\n                 }\n \n@@ -451,6 +454,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     place: &Place<'tcx>,\n                     context: PlaceContext<'tcx>,\n                     location: Location) {\n+        debug!(\"visit_place: place={:?} context={:?} location={:?}\", place, context, location);\n         match *place {\n             Place::Local(ref local) => self.visit_local(local, context, location),\n             Place::Promoted(_) => bug!(\"promoting already promoted MIR\"),\n@@ -557,6 +561,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n+        debug!(\"visit_operand: operand={:?} location={:?}\", operand, location);\n         self.super_operand(operand, location);\n \n         match *operand {\n@@ -591,6 +596,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        debug!(\"visit_rvalue: rvalue={:?} location={:?}\", rvalue, location);\n         // Recurse through operands and places.\n         if let Rvalue::Ref(region, kind, ref place) = *rvalue {\n             let mut is_reborrow = false;\n@@ -696,6 +702,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     }\n                 }\n \n+                debug!(\"visit_rvalue: forbidden_mut={:?}\", forbidden_mut);\n                 if forbidden_mut {\n                     self.add(Qualif::NOT_CONST);\n                 } else {\n@@ -709,15 +716,19 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         }\n                         place = &proj.base;\n                     }\n+                    debug!(\"visit_rvalue: place={:?}\", place);\n                     if let Place::Local(local) = *place {\n                         if self.mir.local_kind(local) == LocalKind::Temp {\n+                            debug!(\"visit_rvalue: local={:?}\", local);\n                             if let Some(qualif) = self.local_qualif[local] {\n                                 // `forbidden_mut` is false, so we can safely ignore\n                                 // `MUTABLE_INTERIOR` from the local's qualifications.\n                                 // This allows borrowing fields which don't have\n                                 // `MUTABLE_INTERIOR`, from a type that does, e.g.:\n                                 // `let _: &'static _ = &(Cell::new(1), 2).1;`\n+                                debug!(\"visit_rvalue: qualif={:?}\", qualif);\n                                 if (qualif - Qualif::MUTABLE_INTERIOR).is_empty() {\n+                                    debug!(\"visit_rvalue: candidate={:?}\", candidate);\n                                     self.promotion_candidates.push(candidate);\n                                 }\n                             }\n@@ -815,6 +826,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                              bb: BasicBlock,\n                              kind: &TerminatorKind<'tcx>,\n                              location: Location) {\n+        debug!(\"visit_terminator_kind: bb={:?} kind={:?} location={:?}\", bb, kind, location);\n         if let TerminatorKind::Call { ref func, ref args, ref destination, .. } = *kind {\n             self.visit_operand(func, location);\n \n@@ -972,6 +984,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     let candidate = Candidate::Argument { bb, index: i };\n                     if is_shuffle && i == 2 {\n                         if this.qualif.is_empty() {\n+                            debug!(\"visit_terminator_kind: candidate={:?}\", candidate);\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,\n@@ -998,6 +1011,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     // We can error out with a hard error if the argument is not\n                     // constant here.\n                     if (this.qualif - Qualif::NOT_PROMOTABLE).is_empty() {\n+                        debug!(\"visit_terminator_kind: candidate={:?}\", candidate);\n                         this.promotion_candidates.push(candidate);\n                     } else {\n                         this.tcx.sess.span_err(this.span,\n@@ -1075,6 +1089,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     dest: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n+        debug!(\"visit_assign: dest={:?} rvalue={:?} location={:?}\", dest, rvalue, location);\n         self.visit_rvalue(rvalue, location);\n \n         // Check the allowed const fn argument forms.\n@@ -1123,10 +1138,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     fn visit_source_info(&mut self, source_info: &SourceInfo) {\n+        debug!(\"visit_source_info: source_info={:?}\", source_info);\n         self.span = source_info.span;\n     }\n \n     fn visit_statement(&mut self, bb: BasicBlock, statement: &Statement<'tcx>, location: Location) {\n+        debug!(\"visit_statement: bb={:?} statement={:?} location={:?}\", bb, statement, location);\n         self.nest(|this| {\n             this.visit_source_info(&statement.source_info);\n             match statement.kind {\n@@ -1150,6 +1167,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         bb: BasicBlock,\n                         terminator: &Terminator<'tcx>,\n                         location: Location) {\n+        debug!(\"visit_terminator: bb={:?} terminator={:?} location={:?}\", bb, terminator, location);\n         self.nest(|this| this.super_terminator(bb, terminator, location));\n     }\n }\n@@ -1216,6 +1234,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             hir::BodyOwnerKind::Static(hir::MutMutable) => Mode::StaticMut,\n         };\n \n+        debug!(\"run_pass: mode={:?}\", mode);\n         if mode == Mode::Fn || mode == Mode::ConstFn {\n             // This is ugly because Qualifier holds onto mir,\n             // which can't be mutated until its scope ends.\n@@ -1258,6 +1277,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             // In `const` and `static` everything without `StorageDead`\n             // is `'static`, we don't have to create promoted MIR fragments,\n             // just remove `Drop` and `StorageDead` on \"promoted\" locals.\n+            debug!(\"run_pass: promoted_temps={:?}\", promoted_temps);\n             for block in mir.basic_blocks_mut() {\n                 block.statements.retain(|statement| {\n                     match statement.kind {"}]}