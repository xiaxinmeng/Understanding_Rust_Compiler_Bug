{"sha": "bfc86f64c3f1498ce0939ab75e301a20cb03b36b", "node_id": "C_kwDOAAsO6NoAKGJmYzg2ZjY0YzNmMTQ5OGNlMDkzOWFiNzVlMzAxYTIwY2IwM2IzNmI", "commit": {"author": {"name": "Pawe\u0142 Palenica", "email": "pawelpalenica11@gmail.com", "date": "2021-10-22T06:41:43Z"}, "committer": {"name": "Pawe\u0142 Palenica", "email": "pawelpalenica11@gmail.com", "date": "2021-10-22T06:42:14Z"}, "message": "apply code review suggestions", "tree": {"sha": "5ecb956f6186b77568c8bd18dc9c4a66a97a6465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ecb956f6186b77568c8bd18dc9c4a66a97a6465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc86f64c3f1498ce0939ab75e301a20cb03b36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc86f64c3f1498ce0939ab75e301a20cb03b36b", "html_url": "https://github.com/rust-lang/rust/commit/bfc86f64c3f1498ce0939ab75e301a20cb03b36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc86f64c3f1498ce0939ab75e301a20cb03b36b/comments", "author": {"login": "qepasa", "id": 18561325, "node_id": "MDQ6VXNlcjE4NTYxMzI1", "avatar_url": "https://avatars.githubusercontent.com/u/18561325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qepasa", "html_url": "https://github.com/qepasa", "followers_url": "https://api.github.com/users/qepasa/followers", "following_url": "https://api.github.com/users/qepasa/following{/other_user}", "gists_url": "https://api.github.com/users/qepasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/qepasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qepasa/subscriptions", "organizations_url": "https://api.github.com/users/qepasa/orgs", "repos_url": "https://api.github.com/users/qepasa/repos", "events_url": "https://api.github.com/users/qepasa/events{/privacy}", "received_events_url": "https://api.github.com/users/qepasa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qepasa", "id": 18561325, "node_id": "MDQ6VXNlcjE4NTYxMzI1", "avatar_url": "https://avatars.githubusercontent.com/u/18561325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qepasa", "html_url": "https://github.com/qepasa", "followers_url": "https://api.github.com/users/qepasa/followers", "following_url": "https://api.github.com/users/qepasa/following{/other_user}", "gists_url": "https://api.github.com/users/qepasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/qepasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qepasa/subscriptions", "organizations_url": "https://api.github.com/users/qepasa/orgs", "repos_url": "https://api.github.com/users/qepasa/repos", "events_url": "https://api.github.com/users/qepasa/events{/privacy}", "received_events_url": "https://api.github.com/users/qepasa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91988f46b7618c89652632f7052265e5d2b5cae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/91988f46b7618c89652632f7052265e5d2b5cae5", "html_url": "https://github.com/rust-lang/rust/commit/91988f46b7618c89652632f7052265e5d2b5cae5"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "43878879edf5564162803aecf82a1c9679fd6418", "filename": "crates/ide_assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bfc86f64c3f1498ce0939ab75e301a20cb03b36b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc86f64c3f1498ce0939ab75e301a20cb03b36b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=bfc86f64c3f1498ce0939ab75e301a20cb03b36b", "patch": "@@ -12,7 +12,7 @@ use crate::{\n \n // Assist: qualify_method_call\n //\n-// If the name is resolvable, provides fully qualified path for it.\n+// Replaces the method call with a qualified function call.\n //\n // ```\n // struct Foo;\n@@ -36,8 +36,10 @@ use crate::{\n // }\n // ```\n pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n-    let fn_name = &call.name_ref()?;\n+    let name: ast::NameRef = ctx.find_node_at_offset()?;\n+    let call = name.syntax().parent().and_then(ast::MethodCallExpr::cast)?;\n+\n+    let ident = name.ident_token()?;\n \n     let range = call.syntax().text_range();\n     let resolved_call = ctx.sema.resolve_method_call(&call)?;\n@@ -52,7 +54,7 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Opt\n \n     acc.add(\n         AssistId(\"qualify_method_call\", AssistKind::RefactorInline),\n-        format!(\"Qualify call `{}`\", fn_name),\n+        format!(\"Qualify `{}` method call\", ident.text()),\n         range,\n         |builder| {\n             qualify_candidate.qualify(\n@@ -68,7 +70,7 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Opt\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn struct_method() {\n@@ -480,6 +482,49 @@ fn main() {\n     let test_struct = TestStruct {};\n     TestTrait::test_method::<()>(&test_struct)\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_method_over_stuct_instance() {\n+        check_assist_not_applicable(\n+            qualify_method_call,\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    let foo = Foo {};\n+    f$0oo.foo()\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn trait_method_over_stuct_instance() {\n+        check_assist_not_applicable(\n+            qualify_method_call,\n+            r#\"\n+mod test_mod {\n+    pub trait TestTrait {\n+        fn test_method(&self);\n+    }\n+    pub struct TestStruct {}\n+    impl TestTrait for TestStruct {\n+        fn test_method(&self) {}\n+    }\n+}\n+\n+use test_mod::*;\n+\n+fn main() {\n+    let test_struct = test_mod::TestStruct {};\n+    tes$0t_struct.test_method()\n+}\n \"#,\n         );\n     }"}, {"sha": "29f2c785bc23d0277bc69dae90404f2f0ff697e8", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfc86f64c3f1498ce0939ab75e301a20cb03b36b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc86f64c3f1498ce0939ab75e301a20cb03b36b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=bfc86f64c3f1498ce0939ab75e301a20cb03b36b", "patch": "@@ -171,8 +171,7 @@ impl QualifyCandidate<'_> {\n         let trait_method_name = mcall_expr.name_ref()?;\n         let trait_ = item_as_trait(db, item)?;\n         let method = find_trait_method(db, trait_, &trait_method_name)?;\n-        Self::qualify_fn_call(db, mcall_expr, replacer, import, &method);\n-        Some(())\n+        Self::qualify_fn_call(db, mcall_expr, replacer, import, &method)\n     }\n }\n "}]}