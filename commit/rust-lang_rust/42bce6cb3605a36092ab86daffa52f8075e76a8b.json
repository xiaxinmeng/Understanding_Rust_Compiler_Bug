{"sha": "42bce6cb3605a36092ab86daffa52f8075e76a8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYmNlNmNiMzYwNWEzNjA5MmFiODZkYWZmYTUyZjgwNzVlNzZhOGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-24T15:44:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-24T15:44:04Z"}, "message": "rustup", "tree": {"sha": "89a09389eba6dd46366726e79470d45103737274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a09389eba6dd46366726e79470d45103737274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42bce6cb3605a36092ab86daffa52f8075e76a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42bce6cb3605a36092ab86daffa52f8075e76a8b", "html_url": "https://github.com/rust-lang/rust/commit/42bce6cb3605a36092ab86daffa52f8075e76a8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42bce6cb3605a36092ab86daffa52f8075e76a8b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee4aac62f4f14204194c391f0eac267c2eee077", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee4aac62f4f14204194c391f0eac267c2eee077", "html_url": "https://github.com/rust-lang/rust/commit/2ee4aac62f4f14204194c391f0eac267c2eee077"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b529e736900266c6a66e20eb770e6dc055fb8487", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42bce6cb3605a36092ab86daffa52f8075e76a8b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bce6cb3605a36092ab86daffa52f8075e76a8b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=42bce6cb3605a36092ab86daffa52f8075e76a8b", "patch": "@@ -104,7 +104,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n             start_mir.span,\n             start_mir,\n             Place::from_ptr(ret_ptr, align),\n-            StackPopCleanup::None,\n+            StackPopCleanup::None { cleanup: true },\n         )?;\n \n         let mut args = ecx.frame().mir.args_iter();\n@@ -124,9 +124,9 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         let foo = ecx.memory.allocate_static_bytes(b\"foo\\0\");\n         let foo_ty = ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8);\n         let foo_layout = ecx.layout_of(foo_ty)?;\n-        let foo_place = ecx.allocate(foo_layout, MemoryKind::Stack)?; // will be marked as static in just a second\n+        let foo_place = ecx.allocate(foo_layout, MemoryKind::Stack)?; // will be interned in just a second\n         ecx.write_scalar(Scalar::Ptr(foo), foo_place.into())?;\n-        ecx.memory.mark_static_initialized(foo_place.to_ptr()?.alloc_id, Mutability::Immutable)?; // marked as static\n+        ecx.memory.intern_static(foo_place.to_ptr()?.alloc_id, Mutability::Immutable)?;\n         ecx.write_scalar(foo_place.ptr, dest)?;\n \n         assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n@@ -136,7 +136,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n             main_mir.span,\n             main_mir,\n             Place::from_scalar_ptr(Scalar::from_int(1, ptr_size).into(), ty::layout::Align::from_bytes(1, 1).unwrap()),\n-            StackPopCleanup::None,\n+            StackPopCleanup::None { cleanup: true },\n         )?;\n \n         // No arguments\n@@ -338,7 +338,7 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n             // Don't do anything when we are done.  The statement() function will increment\n             // the old stack frame's stmt counter to the next statement, which means that when\n             // exchange_malloc returns, we go on evaluating exactly where we want to be.\n-            StackPopCleanup::None,\n+            StackPopCleanup::None { cleanup: true },\n         )?;\n \n         let mut args = ecx.frame().mir.args_iter();"}, {"sha": "6cec39483c46548b6da5801af9b43c8cabeff0ca", "filename": "src/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bce6cb3605a36092ab86daffa52f8075e76a8b/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bce6cb3605a36092ab86daffa52f8075e76a8b/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=42bce6cb3605a36092ab86daffa52f8075e76a8b", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 mir.span,\n                 mir,\n                 ret,\n-                StackPopCleanup::None,\n+                StackPopCleanup::None { cleanup: true },\n             )?;\n             let arg_local = self.frame().mir.args_iter().next().ok_or_else(\n                 || EvalErrorKind::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),"}]}