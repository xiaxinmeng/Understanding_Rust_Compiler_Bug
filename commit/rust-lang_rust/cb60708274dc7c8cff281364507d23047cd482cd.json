{"sha": "cb60708274dc7c8cff281364507d23047cd482cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjA3MDgyNzRkYzdjOGNmZjI4MTM2NDUwN2QyMzA0N2NkNDgyY2Q=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-14T18:57:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-14T20:08:20Z"}, "message": "Use shorthand field syntax in destructures", "tree": {"sha": "31ebdff3546086e3d0c784535ceaad1ed945cb8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ebdff3546086e3d0c784535ceaad1ed945cb8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb60708274dc7c8cff281364507d23047cd482cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb60708274dc7c8cff281364507d23047cd482cd", "html_url": "https://github.com/rust-lang/rust/commit/cb60708274dc7c8cff281364507d23047cd482cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb60708274dc7c8cff281364507d23047cd482cd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "924eecf4af4d57c597c2e77c5e58c22b2a37bdb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/924eecf4af4d57c597c2e77c5e58c22b2a37bdb6", "html_url": "https://github.com/rust-lang/rust/commit/924eecf4af4d57c597c2e77c5e58c22b2a37bdb6"}], "stats": {"total": 113, "additions": 84, "deletions": 29}, "files": [{"sha": "5693dd400e278a554f2ab7623b292311a9ba6bf2", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb60708274dc7c8cff281364507d23047cd482cd/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb60708274dc7c8cff281364507d23047cd482cd/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=cb60708274dc7c8cff281364507d23047cd482cd", "patch": "@@ -622,7 +622,7 @@ fn foo() {\n             expect![[r#\"\n                 f RECORD_FIELD FileId(0) 15..21 15..16 Other\n \n-                FileId(0) 55..56 Other Read\n+                FileId(0) 55..56 RecordFieldExprOrPat Read\n                 FileId(0) 68..69 Other Write\n             \"#]],\n         );\n@@ -757,7 +757,7 @@ fn f() -> m::En {\n             expect![[r#\"\n                 field RECORD_FIELD FileId(0) 56..65 56..61 Other\n \n-                FileId(0) 125..130 Other Read\n+                FileId(0) 125..130 RecordFieldExprOrPat Read\n             \"#]],\n         );\n     }"}, {"sha": "449cfa4aedb15dc1e595ad6df66193280f167e40", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 60, "deletions": 17, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/cb60708274dc7c8cff281364507d23047cd482cd/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb60708274dc7c8cff281364507d23047cd482cd/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=cb60708274dc7c8cff281364507d23047cd482cd", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{Module, ModuleDef, ModuleSource, Semantics};\n-use ide_db::base_db::SourceDatabaseExt;\n+use ide_db::base_db::{FileRange, SourceDatabaseExt};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -112,7 +112,6 @@ fn source_edit_from_reference(\n     new_name: &str,\n ) -> SourceFileEdit {\n     let mut replacement_text = String::new();\n-    let file_id = reference.file_range.file_id;\n     let range = match reference.kind {\n         ReferenceKind::FieldShorthandForField => {\n             mark::hit!(test_rename_struct_field_for_shorthand);\n@@ -126,28 +125,49 @@ fn source_edit_from_reference(\n             replacement_text.push_str(new_name);\n             TextRange::new(reference.file_range.range.end(), reference.file_range.range.end())\n         }\n-        ReferenceKind::RecordExprField => {\n+        ReferenceKind::RecordFieldExprOrPat => {\n             replacement_text.push_str(new_name);\n-            let mut range = reference.file_range.range;\n-            if let Some(field_expr) = syntax::algo::find_node_at_range::<ast::RecordExprField>(\n-                sema.parse(file_id).syntax(),\n-                reference.file_range.range,\n-            ) {\n-                // use shorthand initializer if we were to write foo: foo\n-                if let Some(name) = field_expr.expr().and_then(|e| e.name_ref()) {\n-                    if &name.to_string() == new_name {\n-                        range = field_expr.syntax().text_range();\n-                    }\n-                }\n-            }\n-            range\n+            edit_text_range_for_record_field_expr_or_pat(sema, reference.file_range, new_name)\n         }\n         _ => {\n             replacement_text.push_str(new_name);\n             reference.file_range.range\n         }\n     };\n-    SourceFileEdit { file_id, edit: TextEdit::replace(range, replacement_text) }\n+    SourceFileEdit {\n+        file_id: reference.file_range.file_id,\n+        edit: TextEdit::replace(range, replacement_text),\n+    }\n+}\n+\n+fn edit_text_range_for_record_field_expr_or_pat(\n+    sema: &Semantics<RootDatabase>,\n+    file_range: FileRange,\n+    new_name: &str,\n+) -> TextRange {\n+    let mut range = file_range.range;\n+    let source_file = sema.parse(file_range.file_id);\n+    let file_syntax = source_file.syntax();\n+    if let Some(field_expr) =\n+        syntax::algo::find_node_at_range::<ast::RecordExprField>(file_syntax, range)\n+    {\n+        match field_expr.expr().and_then(|e| e.name_ref()) {\n+            Some(name) if &name.to_string() == new_name => range = field_expr.syntax().text_range(),\n+            _ => (),\n+        }\n+    } else if let Some(field_pat) =\n+        syntax::algo::find_node_at_range::<ast::RecordPatField>(file_syntax, range)\n+    {\n+        match field_pat.pat() {\n+            Some(ast::Pat::IdentPat(pat))\n+                if pat.name().map(|n| n.to_string()).as_deref() == Some(new_name) =>\n+            {\n+                range = field_pat.syntax().text_range()\n+            }\n+            _ => (),\n+        }\n+    }\n+    range\n }\n \n fn rename_mod(\n@@ -1189,6 +1209,29 @@ fn foo(foo: Foo) {\n     let Foo { i: bar } = foo;\n     let _ = bar;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_field_destructure_into_shorthand() {\n+        check(\n+            \"baz\",\n+            r#\"\n+struct Foo { i<|>: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { i: baz } = foo;\n+    let _ = baz;\n+}\n+\"#,\n+            r#\"\n+struct Foo { baz: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { baz } = foo;\n+    let _ = baz;\n+}\n \"#,\n         );\n     }"}, {"sha": "a3e765d0598d92212795c24255468520e40c9846", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cb60708274dc7c8cff281364507d23047cd482cd/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb60708274dc7c8cff281364507d23047cd482cd/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=cb60708274dc7c8cff281364507d23047cd482cd", "patch": "@@ -30,7 +30,7 @@ pub enum ReferenceKind {\n     FieldShorthandForField,\n     FieldShorthandForLocal,\n     StructLiteral,\n-    RecordExprField,\n+    RecordFieldExprOrPat,\n     Other,\n }\n \n@@ -279,15 +279,13 @@ impl<'a> FindUsages<'a> {\n     ) -> bool {\n         match NameRefClass::classify(self.sema, &name_ref) {\n             Some(NameRefClass::Definition(def)) if &def == self.def => {\n-                let kind =\n-                    if name_ref.syntax().parent().and_then(ast::RecordExprField::cast).is_some() {\n-                        ReferenceKind::RecordExprField\n-                    } else if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref)\n-                    {\n-                        ReferenceKind::StructLiteral\n-                    } else {\n-                        ReferenceKind::Other\n-                    };\n+                let kind = if is_record_field_expr_or_pat(&name_ref) {\n+                    ReferenceKind::RecordFieldExprOrPat\n+                } else if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref) {\n+                    ReferenceKind::StructLiteral\n+                } else {\n+                    ReferenceKind::Other\n+                };\n \n                 let reference = Reference {\n                     file_range: self.sema.original_range(name_ref.syntax()),\n@@ -389,3 +387,17 @@ fn is_record_lit_name_ref(name_ref: &ast::NameRef) -> bool {\n         .map(|p| p.name_ref().as_ref() == Some(name_ref))\n         .unwrap_or(false)\n }\n+\n+fn is_record_field_expr_or_pat(name_ref: &ast::NameRef) -> bool {\n+    if let Some(parent) = name_ref.syntax().parent() {\n+        match_ast! {\n+            match parent {\n+                ast::RecordExprField(it) => true,\n+                ast::RecordPatField(_it) => true,\n+                _ => false,\n+            }\n+        }\n+    } else {\n+        false\n+    }\n+}"}]}