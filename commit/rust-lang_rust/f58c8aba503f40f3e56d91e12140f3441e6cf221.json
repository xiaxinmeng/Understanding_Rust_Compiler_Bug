{"sha": "f58c8aba503f40f3e56d91e12140f3441e6cf221", "node_id": "C_kwDOAAsO6NoAKGY1OGM4YWJhNTAzZjQwZjNlNTZkOTFlMTIxNDBmMzQ0MWU2Y2YyMjE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-21T14:02:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-21T15:26:06Z"}, "message": "Fix duplicated attributes for first reexport", "tree": {"sha": "3c1667197fb93df7bdb3bc8f14353618009d2536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1667197fb93df7bdb3bc8f14353618009d2536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f58c8aba503f40f3e56d91e12140f3441e6cf221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f58c8aba503f40f3e56d91e12140f3441e6cf221", "html_url": "https://github.com/rust-lang/rust/commit/f58c8aba503f40f3e56d91e12140f3441e6cf221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f58c8aba503f40f3e56d91e12140f3441e6cf221/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebdfb55fce148676c24555505aebf648123b2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de", "html_url": "https://github.com/rust-lang/rust/commit/eebdfb55fce148676c24555505aebf648123b2de"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "5541136ef490d8f9192c414e25f9a8dbf559f5d4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f58c8aba503f40f3e56d91e12140f3441e6cf221/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58c8aba503f40f3e56d91e12140f3441e6cf221/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f58c8aba503f40f3e56d91e12140f3441e6cf221", "patch": "@@ -2114,17 +2114,29 @@ fn get_all_import_attributes<'hir>(\n     attributes: &mut Vec<ast::Attribute>,\n     is_inline: bool,\n ) {\n+    let mut first = true;\n     let hir_map = tcx.hir();\n     let mut visitor = OneLevelVisitor::new(hir_map, target_def_id);\n     let mut visited = FxHashSet::default();\n+\n     // If the item is an import and has at least a path with two parts, we go into it.\n     while let hir::ItemKind::Use(path, _) = item.kind && visited.insert(item.hir_id()) {\n-        // We add the attributes from this import into the list.\n-        add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()), is_inline);\n+        if first {\n+            // This is the \"original\" reexport so we get all its attributes without filtering them.\n+            attributes.extend_from_slice(hir_map.attrs(item.hir_id()));\n+            first = false;\n+        } else {\n+            add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()), is_inline);\n+        }\n \n-        let def_id = if path.segments.len() > 1 {\n-            match path.segments[path.segments.len() - 2].res {\n+        let def_id = if let [.., parent_segment, _] = &path.segments {\n+            match parent_segment.res {\n                 hir::def::Res::Def(_, def_id) => def_id,\n+                _ if parent_segment.ident.name == kw::Crate => {\n+                    // In case the \"parent\" is the crate, it'll give `Res::Err` so we need to\n+                    // circumvent it this way.\n+                    tcx.parent(item.owner_id.def_id.to_def_id())\n+                }\n                 _ => break,\n             }\n         } else {\n@@ -2341,9 +2353,7 @@ fn clean_maybe_renamed_item<'tcx>(\n         if let Some(import_id) = import_id &&\n             let Some(hir::Node::Item(use_node)) = cx.tcx.hir().find_by_def_id(import_id)\n         {\n-            // First, we add the attributes from the current import.\n-            extra_attrs.extend_from_slice(inline::load_attrs(cx, import_id.to_def_id()));\n-            let is_inline = extra_attrs.lists(sym::doc).get_word_attr(sym::inline).is_some();\n+            let is_inline = inline::load_attrs(cx, import_id.to_def_id()).lists(sym::doc).get_word_attr(sym::inline).is_some();\n             // Then we get all the various imports' attributes.\n             get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs, is_inline);\n             add_without_unwanted_attributes(&mut extra_attrs, inline::load_attrs(cx, def_id), is_inline);"}]}