{"sha": "efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2JmMWIwMGJiODk5N2YxZTFlZTA3NDA2NDBmNjdmYmUzMmM2MTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-11-18T12:49:39Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-11-18T13:16:35Z"}, "message": "Permit standalone generic parameters as const generic arguments in macros", "tree": {"sha": "cd16352437a70f8f9d66ff8ece04c211dedaaf56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd16352437a70f8f9d66ff8ece04c211dedaaf56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "html_url": "https://github.com/rust-lang/rust/commit/efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f836ad1aceb83507810d9499f56988fd24578d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f836ad1aceb83507810d9499f56988fd24578d", "html_url": "https://github.com/rust-lang/rust/commit/c4f836ad1aceb83507810d9499f56988fd24578d"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "350a372a684cc5e7b6f829f1e13026c0f61a37c7", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "patch": "@@ -1808,9 +1808,13 @@ impl<'a> Parser<'a> {\n         return Ok(false); // Don't continue.\n     }\n \n-    /// Handle a generic const argument that had not been enclosed in braces, and suggest enclosing\n-    /// it braces. In this situation, unlike in `handle_ambiguous_unbraced_const_arg`, this is\n-    /// almost certainly a const argument, so we always offer a suggestion.\n+    /// Attempt to parse a generic const argument that has not been enclosed in braces.\n+    /// There are a limited number of expressions that are permitted without being encoded\n+    /// in braces:\n+    /// - Literals.\n+    /// - Single-segment paths (i.e. standalone generic const parameters).\n+    /// All other expressions that can be parsed will emit an error suggesting the expression be\n+    /// wrapped in braces.\n     pub fn handle_unambiguous_unbraced_const_arg(&mut self) -> PResult<'a, P<Expr>> {\n         let start = self.token.span;\n         let expr = self.parse_expr_res(Restrictions::CONST_EXPR, None).map_err(|mut err| {"}, {"sha": "d64fd59b0a6574501dd7f79e81bb1a0339136f1f", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "patch": "@@ -489,13 +489,21 @@ impl<'a> Parser<'a> {\n     /// - An expression surrounded in `{}`.\n     /// - A literal.\n     /// - A numeric literal prefixed by `-`.\n+    /// - A single-segment path.\n     pub(super) fn expr_is_valid_const_arg(&self, expr: &P<rustc_ast::Expr>) -> bool {\n         match &expr.kind {\n             ast::ExprKind::Block(_, _) | ast::ExprKind::Lit(_) => true,\n             ast::ExprKind::Unary(ast::UnOp::Neg, expr) => match &expr.kind {\n                 ast::ExprKind::Lit(_) => true,\n                 _ => false,\n             },\n+            // We can only resolve single-segment paths at the moment, because multi-segment paths\n+            // require type-checking: see `visit_generic_arg` in `src/librustc_resolve/late.rs`.\n+            ast::ExprKind::Path(None, path)\n+                if path.segments.len() == 1 && path.segments[0].args.is_none() =>\n+            {\n+                true\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "273766b0b0e714b54217c45fe5fadc316e84c3fa", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "patch": "@@ -1,14 +1,3 @@\n-error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:34:17\n-   |\n-LL |     let _: baz!(N);\n-   |                 ^\n-   |\n-help: enclose the `const` expression in braces\n-   |\n-LL |     let _: baz!({ N });\n-   |                 ^   ^\n-\n error: expressions must be enclosed in braces to be used as const generic arguments\n   --> $DIR/macro_rules-braces.rs:54:17\n    |\n@@ -68,5 +57,5 @@ LL |     let _: biz!({ N });\n    = note: this may fail depending on what value the parameter takes\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "10c2a596ca562b0299a980a20dc6543fa1595a4c", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "patch": "@@ -1,14 +1,3 @@\n-error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:34:17\n-   |\n-LL |     let _: baz!(N);\n-   |                 ^\n-   |\n-help: enclose the `const` expression in braces\n-   |\n-LL |     let _: baz!({ N });\n-   |                 ^   ^\n-\n error: expressions must be enclosed in braces to be used as const generic arguments\n   --> $DIR/macro_rules-braces.rs:54:17\n    |\n@@ -52,5 +41,5 @@ LL |     let _: biz!({ N });\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "bc2eca81b6182d5cb254c778e3364b72b4bfbd3d", "filename": "src/test/ui/const-generics/macro_rules-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcbf1b00bb8997f1e1ee0740640f67fbe32c615/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs?ref=efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "patch": "@@ -31,7 +31,7 @@ fn test<const N: usize>() {\n     let _: foo!({{ N }}); //[min]~ ERROR generic parameters may not\n     let _: bar!(N);\n     let _: bar!({ N }); //[min]~ ERROR generic parameters may not\n-    let _: baz!(N); //~ ERROR expressions must be enclosed in braces\n+    let _: baz!(N);\n     let _: baz!({ N });\n     let _: baz!({{ N }}); //[min]~ ERROR generic parameters may not\n     let _: biz!(N);"}]}