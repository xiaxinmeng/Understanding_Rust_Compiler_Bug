{"sha": "7f3744f07f0d32f9673af1563d70b22985b1c2cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzc0NGYwN2YwZDMyZjk2NzNhZjE1NjNkNzBiMjI5ODViMWMyY2Y=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-02T13:47:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-06T07:33:15Z"}, "message": "Get rid of ast::StructFieldKind", "tree": {"sha": "1df34ef92a75ce3d518a84b26dd46b4f6a2a7a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df34ef92a75ce3d518a84b26dd46b4f6a2a7a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3744f07f0d32f9673af1563d70b22985b1c2cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3744f07f0d32f9673af1563d70b22985b1c2cf", "html_url": "https://github.com/rust-lang/rust/commit/7f3744f07f0d32f9673af1563d70b22985b1c2cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3744f07f0d32f9673af1563d70b22985b1c2cf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "772c600d4d6f39daa6d07d1a60ee0df3d3426978", "url": "https://api.github.com/repos/rust-lang/rust/commits/772c600d4d6f39daa6d07d1a60ee0df3d3426978", "html_url": "https://github.com/rust-lang/rust/commit/772c600d4d6f39daa6d07d1a60ee0df3d3426978"}], "stats": {"total": 191, "additions": 55, "deletions": 136}, "files": [{"sha": "4ca30a041a541dfd5f9791b974602836315b68d2", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -622,9 +622,8 @@ pub fn lower_struct_field(lctx: &LoweringContext,\n     hir::StructField {\n         span: f.span,\n         id: f.node.id,\n-        name: f.node.ident().map(|ident| ident.name)\n-                            .unwrap_or(token::intern(&index.to_string())),\n-        vis: lower_visibility(lctx, f.node.kind.visibility()),\n+        name: f.node.ident.map(|ident| ident.name).unwrap_or(token::intern(&index.to_string())),\n+        vis: lower_visibility(lctx, f.node.vis),\n         ty: lower_ty(lctx, &f.node.ty),\n         attrs: lower_attrs(lctx, &f.node.attrs),\n     }"}, {"sha": "550628741c2099d31cfbd0db671a3bff86847ddf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -246,23 +246,22 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n     pub fn get_field_data(&self, field: &ast::StructField,\n                           scope: NodeId) -> Option<VariableData> {\n-        match field.node.kind {\n-            ast::NamedField(ident, _) => {\n-                let qualname = format!(\"::{}::{}\", self.tcx.map.path_to_string(scope), ident);\n-                let typ = self.tcx.node_types().get(&field.node.id).unwrap().to_string();\n-                let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n-                filter!(self.span_utils, sub_span, field.span, None);\n-                Some(VariableData {\n-                    id: field.node.id,\n-                    name: ident.to_string(),\n-                    qualname: qualname,\n-                    span: sub_span.unwrap(),\n-                    scope: scope,\n-                    value: \"\".to_owned(),\n-                    type_value: typ,\n-                })\n-            }\n-            _ => None,\n+        if let Some(ident) = field.node.ident {\n+            let qualname = format!(\"::{}::{}\", self.tcx.map.path_to_string(scope), ident);\n+            let typ = self.tcx.node_types().get(&field.node.id).unwrap().to_string();\n+            let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n+            filter!(self.span_utils, sub_span, field.span, None);\n+            Some(VariableData {\n+                id: field.node.id,\n+                name: ident.to_string(),\n+                qualname: qualname,\n+                span: sub_span.unwrap(),\n+                scope: scope,\n+                value: \"\".to_owned(),\n+                type_value: typ,\n+            })\n+        } else {\n+            None\n         }\n     }\n "}, {"sha": "fb6ae8b88bed2b072b5d4a01073afc0c09318d9b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::StructFieldKind::*;\n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n@@ -1878,45 +1877,15 @@ pub enum Visibility {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField_ {\n-    pub kind: StructFieldKind,\n+    pub ident: Option<Ident>,\n+    pub vis: Visibility,\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: Vec<Attribute>,\n }\n \n-impl StructField_ {\n-    pub fn ident(&self) -> Option<Ident> {\n-        match self.kind {\n-            NamedField(ref ident, _) => Some(ident.clone()),\n-            UnnamedField(_) => None\n-        }\n-    }\n-}\n-\n pub type StructField = Spanned<StructField_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum StructFieldKind {\n-    NamedField(Ident, Visibility),\n-    /// Element of a tuple-like struct\n-    UnnamedField(Visibility),\n-}\n-\n-impl StructFieldKind {\n-    pub fn is_unnamed(&self) -> bool {\n-        match *self {\n-            UnnamedField(..) => true,\n-            NamedField(..) => false,\n-        }\n-    }\n-\n-    pub fn visibility(&self) -> &Visibility {\n-        match *self {\n-            NamedField(_, ref vis) | UnnamedField(ref vis) => vis\n-        }\n-    }\n-}\n-\n /// Fields and Ids of enum variants and structs\n ///\n /// For enum variants: `NodeId` represents both an Id of the variant itself (relevant for all"}, {"sha": "671ba3b0996af9562349fe8b55b4940fcee058cf", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -95,12 +95,6 @@ pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident\n     token::gensym_ident(&pretty[..])\n }\n \n-pub fn struct_field_visibility(field: ast::StructField) -> Visibility {\n-    match field.node.kind {\n-        ast::NamedField(_, v) | ast::UnnamedField(v) => v\n-    }\n-}\n-\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n "}, {"sha": "a62832b928d60bf5fad7d86b3076da20c379696a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -1009,7 +1009,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n             Spanned { span: ty.span, node: ast::StructField_ {\n                 ty: ty,\n-                kind: ast::UnnamedField(ast::Visibility::Inherited),\n+                ident: None,\n+                vis: ast::Visibility::Inherited,\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n             }}"}, {"sha": "eb35d3fd9d35b5459fcb71695bfc8b112199369b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -847,15 +847,15 @@ pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> Poly\n }\n \n pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField {\n-    let StructField {node: StructField_ {id, kind, ty, attrs}, span} = f;\n     Spanned {\n         node: StructField_ {\n-            id: fld.new_id(id),\n-            kind: kind,\n-            ty: fld.fold_ty(ty),\n-            attrs: fold_attrs(attrs, fld),\n+            id: fld.new_id(f.node.id),\n+            ident: f.node.ident.map(|ident| fld.fold_ident(ident)),\n+            vis: f.node.vis,\n+            ty: fld.fold_ty(f.node.ty),\n+            attrs: fold_attrs(f.node.attrs, fld),\n         },\n-        span: fld.new_span(span)\n+        span: fld.new_span(f.span)\n     }\n }\n "}, {"sha": "00d60630eacebbfee0c24cfa55a12714d548e08b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -29,7 +29,6 @@ use ast::Local;\n use ast::MacStmtStyle;\n use ast::Mac_;\n use ast::{MutTy, Mutability};\n-use ast::NamedField;\n use ast::{Pat, PatKind};\n use ast::{PolyTraitRef, QSelf};\n use ast::{Stmt, StmtKind};\n@@ -38,7 +37,6 @@ use ast::StrStyle;\n use ast::SelfKind;\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n-use ast::UnnamedField;\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use attr::{ThinAttributes, ThinAttributesExt, AttributesExt};\n@@ -3848,7 +3846,8 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty_sum()?;\n         Ok(spanned(lo, self.last_span.hi, ast::StructField_ {\n-            kind: NamedField(name, pr),\n+            ident: Some(name),\n+            vis: pr,\n             id: ast::DUMMY_NODE_ID,\n             ty: ty,\n             attrs: attrs,\n@@ -5247,7 +5246,8 @@ impl<'a> Parser<'a> {\n                 let attrs = p.parse_outer_attributes()?;\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::StructField_ {\n-                    kind: UnnamedField(p.parse_visibility()?),\n+                    vis: p.parse_visibility()?,\n+                    ident: None,\n                     id: ast::DUMMY_NODE_ID,\n                     ty: p.parse_ty_sum()?,\n                     attrs: attrs,"}, {"sha": "c7a755aeeac561c6efbe2a4f97eb9606798f40ea", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -1407,14 +1407,9 @@ impl<'a> State<'a> {\n                 self.commasep(\n                     Inconsistent, struct_def.fields(),\n                     |s, field| {\n-                        match field.node.kind {\n-                            ast::NamedField(..) => panic!(\"unexpected named field\"),\n-                            ast::UnnamedField(ref vis) => {\n-                                s.print_visibility(vis)?;\n-                                s.maybe_print_comment(field.span.lo)?;\n-                                s.print_type(&field.node.ty)\n-                            }\n-                        }\n+                        s.print_visibility(field.node.vis)?;\n+                        s.maybe_print_comment(field.span.lo)?;\n+                        s.print_type(&field.node.ty)\n                     }\n                 )?;\n                 self.pclose()?;\n@@ -1432,19 +1427,14 @@ impl<'a> State<'a> {\n             self.hardbreak_if_not_bol()?;\n \n             for field in struct_def.fields() {\n-                match field.node.kind {\n-                    ast::UnnamedField(..) => panic!(\"unexpected unnamed field\"),\n-                    ast::NamedField(ident, ref visibility) => {\n-                        self.hardbreak_if_not_bol()?;\n-                        self.maybe_print_comment(field.span.lo)?;\n-                        self.print_outer_attributes(&field.node.attrs)?;\n-                        self.print_visibility(visibility)?;\n-                        self.print_ident(ident)?;\n-                        self.word_nbsp(\":\")?;\n-                        self.print_type(&field.node.ty)?;\n-                        word(&mut self.s, \",\")?;\n-                    }\n-                }\n+                self.hardbreak_if_not_bol()?;\n+                self.maybe_print_comment(field.span.lo)?;\n+                self.print_outer_attributes(&field.node.attrs)?;\n+                self.print_visibility(field.node.vis)?;\n+                self.print_ident(field.node.ident.unwrap())?;\n+                self.word_nbsp(\":\")?;\n+                self.print_type(&field.node.ty)?;\n+                word(&mut self.s, \",\")?;\n             }\n \n             self.bclose(span)"}, {"sha": "d97e2db6265141c670a2b196cb68e552ada0eacc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -619,7 +619,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              struct_field: &'v StructField) {\n-    walk_opt_ident(visitor, struct_field.span, struct_field.node.ident());\n+    walk_opt_ident(visitor, struct_field.span, struct_field.node.ident);\n     visitor.visit_ty(&struct_field.node.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.node.attrs);\n }"}, {"sha": "12a7270d5214b4f8f52bade8d3579bd19c3601d6", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 11, "deletions": 44, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3744f07f0d32f9673af1563d70b22985b1c2cf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=7f3744f07f0d32f9673af1563d70b22985b1c2cf", "patch": "@@ -186,7 +186,6 @@\n \n pub use self::StaticFields::*;\n pub use self::SubstructureFields::*;\n-use self::StructType::*;\n \n use std::cell::RefCell;\n use std::collections::HashSet;\n@@ -1409,11 +1408,6 @@ impl<'a> MethodDef<'a> {\n     }\n }\n \n-#[derive(PartialEq)] // dogfooding!\n-enum StructType {\n-    Unknown, Record, Tuple\n-}\n-\n // general helper methods.\n impl<'a> TraitDef<'a> {\n     fn set_expn_info(&self,\n@@ -1441,9 +1435,9 @@ impl<'a> TraitDef<'a> {\n         let mut just_spans = Vec::new();\n         for field in struct_def.fields(){\n             let sp = self.set_expn_info(cx, field.span);\n-            match field.node.kind {\n-                ast::NamedField(ident, _) => named_idents.push((ident, sp)),\n-                ast::UnnamedField(..) => just_spans.push(sp),\n+            match field.node.ident {\n+                Some(ident) => named_idents.push((ident, sp)),\n+                _ => just_spans.push(sp),\n             }\n         }\n \n@@ -1479,61 +1473,34 @@ impl<'a> TraitDef<'a> {\n                              -> (P<ast::Pat>, Vec<(Span, Option<Ident>,\n                                                    P<Expr>,\n                                                    &'a [ast::Attribute])>) {\n-        if struct_def.fields().is_empty() {\n-            if struct_def.is_struct() {\n-                return (cx.pat_struct(self.span, struct_path, vec![]), vec![]);\n-            } else {\n-                return (cx.pat_enum(self.span, struct_path, vec![]), vec![]);\n-            }\n-        }\n-\n         let mut paths = Vec::new();\n-        let mut ident_expr = Vec::new();\n-        let mut struct_type = Unknown;\n-\n+        let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n             let sp = self.set_expn_info(cx, struct_field.span);\n-            let opt_id = match struct_field.node.kind {\n-                ast::NamedField(ident, _) if (struct_type == Unknown ||\n-                                              struct_type == Record) => {\n-                    struct_type = Record;\n-                    Some(ident)\n-                }\n-                ast::UnnamedField(..) if (struct_type == Unknown ||\n-                                          struct_type == Tuple) => {\n-                    struct_type = Tuple;\n-                    None\n-                }\n-                _ => {\n-                    cx.span_bug(sp, \"a struct with named and unnamed fields in `derive`\");\n-                }\n-            };\n             let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i));\n             paths.push(codemap::Spanned{span: sp, node: ident});\n             let val = cx.expr_deref(sp, cx.expr_path(cx.path_ident(sp,ident)));\n             let val = cx.expr(sp, ast::ExprKind::Paren(val));\n-            ident_expr.push((sp, opt_id, val, &struct_field.node.attrs[..]));\n+            ident_exprs.push((sp, struct_field.node.ident, val, &struct_field.node.attrs[..]));\n         }\n \n         let subpats = self.create_subpatterns(cx, paths, mutbl);\n-\n-        // struct_type is definitely not Unknown, since struct_def.fields\n-        // must be nonempty to reach here\n         let pattern = if struct_def.is_struct() {\n-            let field_pats = subpats.into_iter().zip(&ident_expr)\n-                                    .map(|(pat, &(_, id, _, _))| {\n-                // id is guaranteed to be Some\n+            let field_pats = subpats.into_iter().zip(&ident_exprs).map(|(pat, &(sp, ident, _, _))| {\n+                if ident.is_none() {\n+                    cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n+                }\n                 codemap::Spanned {\n                     span: pat.span,\n-                    node: ast::FieldPat { ident: id.unwrap(), pat: pat, is_shorthand: false },\n+                    node: ast::FieldPat { ident: ident.unwrap(), pat: pat, is_shorthand: false },\n                 }\n             }).collect();\n             cx.pat_struct(self.span, struct_path, field_pats)\n         } else {\n             cx.pat_enum(self.span, struct_path, subpats)\n         };\n \n-        (pattern, ident_expr)\n+        (pattern, ident_exprs)\n     }\n \n     fn create_enum_variant_pattern(&self,"}]}