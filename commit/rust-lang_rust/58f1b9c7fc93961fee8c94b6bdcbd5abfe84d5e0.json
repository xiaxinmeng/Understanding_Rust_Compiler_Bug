{"sha": "58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZjFiOWM3ZmM5Mzk2MWZlZThjOTRiNmJkY2JkNWFiZmU4NGQ1ZTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-14T23:40:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-30T00:25:21Z"}, "message": "Get tests working on MSVC 32-bit", "tree": {"sha": "589fc4901bd39b9b91bfd20b0657e2b46dc30597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589fc4901bd39b9b91bfd20b0657e2b46dc30597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "html_url": "https://github.com/rust-lang/rust/commit/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9589c0f43af69544b042f50b886005613540f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9589c0f43af69544b042f50b886005613540f2", "html_url": "https://github.com/rust-lang/rust/commit/3e9589c0f43af69544b042f50b886005613540f2"}], "stats": {"total": 207, "additions": 105, "deletions": 102}, "files": [{"sha": "31aa2fff247ff2ea2e21a5c01f927e4066967f5a", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -1029,6 +1029,8 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(3)))\n $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(3)))\n+$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n+\texport MSVC_LIB := \"$$(CFG_MSVC_LIB_$$(HOST_$(3)))\"\n $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t\t$(S)src/test/run-make/%/Makefile \\\n \t\t$$(CSREQ$(1)_T_$(2)_H_$(3))"}, {"sha": "500c455136b511ad3239728778d3b26f8c9545eb", "filename": "src/test/auxiliary/extern-take-value.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Fauxiliary%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Fauxiliary%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-take-value.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub extern fn f() -> i32 { 1 }\n+pub extern fn g() -> i32 { 2 }\n+\n+pub fn get_f() -> extern fn() -> i32 { f }\n+pub fn get_g() -> extern fn() -> i32 { g }"}, {"sha": "5d380ea6a5aca14875a9adbf6543731303e8b7ea", "filename": "src/test/auxiliary/fn-abi.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Fauxiliary%2Ffn-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Fauxiliary%2Ffn-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ffn-abi.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern fn foo() {}"}, {"sha": "eb399e07d859d6cc95df3abeeb59f4b175293e47", "filename": "src/test/run-fail/mir_trans_calls_converging_drops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -7,7 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![feature(rustc_attrs)]\n+\n+// ignore-msvc: FIXME(#30941)\n // error-pattern:converging_fn called\n // error-pattern:0 dropped\n // error-pattern:exit"}, {"sha": "df4ead387b91fdb76c5e71bcf7ba279103e1afc2", "filename": "src/test/run-fail/mir_trans_calls_converging_drops_2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -7,7 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![feature(rustc_attrs)]\n+\n+// ignore-msvc: FIXME(#30941)\n // error-pattern:complex called\n // error-pattern:dropped\n // error-pattern:exit"}, {"sha": "cbe8793cceb22b0f0e34c37682f14ae67dd6f1a8", "filename": "src/test/run-fail/mir_trans_calls_diverging_drops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -7,9 +7,13 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![feature(rustc_attrs)]\n+\n+// ignore-msvc: FIXME(#30941)\n // error-pattern:diverging_fn called\n // error-pattern:0 dropped\n+\n use std::io::{self, Write};\n \n struct Droppable(u8);"}, {"sha": "c4d28223c1a84d6297505a363889be953af78d97", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -42,6 +42,12 @@ use syntax::diagnostics::registry::Registry;\n use syntax::parse::token;\n \n fn main() {\n+    // Currently trips an assertion on i686-msvc, presumably because the support\n+    // in LLVM is a little young.\n+    if cfg!(target_env = \"msvc\") && cfg!(target_arch = \"x86\") {\n+        return\n+    }\n+\n     let program = r#\"\n     #[no_mangle]\n     pub static TEST_STATIC: i32 = 42;"}, {"sha": "71a5407e882dd0e7a0b609a3c87f465044ed2862", "filename": "src/test/run-make/extern-fn-with-union/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-all: $(call NATIVE_STATICLIB,test)\n+all: $(call NATIVE_STATICLIB,ctest)\n \t$(RUSTC) testcrate.rs\n \t$(RUSTC) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "8c87c230693d1d0d490d2028ac9b302f2c0d12f3", "filename": "src/test/run-make/extern-fn-with-union/ctest.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Fctest.c", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Fctest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Fctest.c?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "previous_filename": "src/test/run-make/extern-fn-with-union/test.c"}, {"sha": "66978c38511eb40b474ae35ec2c2e8c66d92ef94", "filename": "src/test/run-make/extern-fn-with-union/testcrate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftestcrate.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -10,11 +10,12 @@\n \n #![crate_type = \"lib\"]\n \n+#[repr(C)]\n pub struct TestUnion {\n-    val: u64\n+    _val: u64\n }\n \n-#[link(name = \"test\", kind = \"static\")]\n+#[link(name = \"ctest\", kind = \"static\")]\n extern {\n     pub fn give_back(tu: TestUnion) -> u64;\n }"}, {"sha": "8be34ce4274602cb4b8bd5d22c486fa1d911a6ff", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -100,8 +100,13 @@ REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n \n %.a: %.o\n \tar crus $@ $<\n+ifdef IS_MSVC\n+%.lib: lib%.o\n+\t$(MSVC_LIB) -out:`cygpath -w $@` $<\n+else\n %.lib: lib%.o\n \tar crus $@ $<\n+endif\n %.dylib: %.o\n \t$(CC) -dynamiclib -Wl,-dylib -o $@ $<\n %.so: %.o"}, {"sha": "a8eade34cbcdd4eb802b6d3511499967e8c0bf32", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -27,12 +27,11 @@ macro_rules! pos {\n     () => ((file!(), line!()))\n }\n \n-#[cfg(any(all(unix,\n-              not(target_os = \"macos\"),\n-              not(target_os = \"ios\"),\n-              not(target_os = \"android\"),\n-              not(all(target_os = \"linux\", target_arch = \"arm\"))),\n-          all(windows, not(target_arch = \"x86\"))))]\n+#[cfg(all(unix,\n+          not(target_os = \"macos\"),\n+          not(target_os = \"ios\"),\n+          not(target_os = \"android\"),\n+          not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({\n         // FIXME(#18285): we cannot include the current position because\n@@ -43,12 +42,11 @@ macro_rules! dump_and_die {\n }\n \n // this does not work on Windows, Android, OSX or iOS\n-#[cfg(not(any(all(unix,\n+#[cfg(not(all(unix,\n               not(target_os = \"macos\"),\n               not(target_os = \"ios\"),\n               not(target_os = \"android\"),\n-              not(all(target_os = \"linux\", target_arch = \"arm\"))),\n-          all(windows, not(target_arch = \"x86\")))))]\n+              not(all(target_os = \"linux\", target_arch = \"arm\")))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({ let _ = [$($pos),*]; })\n }"}, {"sha": "f535e45e6cf6efc8d33b5e9fc40612ca59fd926f", "filename": "src/test/run-pass/extern-take-value.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:extern-take-value.rs\n \n-extern fn f() {\n-}\n-\n-extern fn g() {\n-}\n+extern crate extern_take_value;\n \n pub fn main() {\n-    let a: extern \"C\" fn() = f;\n-    let b: extern \"C\" fn() = f;\n-    let c: extern \"C\" fn() = g;\n+    let a: extern \"C\" fn() -> i32 = extern_take_value::get_f();\n+    let b: extern \"C\" fn() -> i32 = extern_take_value::get_f();\n+    let c: extern \"C\" fn() -> i32 = extern_take_value::get_g();\n \n     assert!(a == b);\n     assert!(a != c);"}, {"sha": "0e3005a2aaa65375d024d9dd3e531547431ebb33", "filename": "src/test/run-pass/fn-abi.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Ffn-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Ffn-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-abi.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -12,12 +12,16 @@\n // ABI (#9309).\n \n // pretty-expanded FIXME #23616\n+// aux-build:fn-abi.rs\n+\n+extern crate fn_abi;\n \n extern {\n-    fn printf();\n+    fn foo();\n }\n \n pub fn main() {\n-    // Will only type check if the type of _p and the decl of printf use the same ABI\n-    let _p: unsafe extern fn() = printf;\n+    // Will only type check if the type of _p and the decl of foo use the\n+    // same ABI\n+    let _p: unsafe extern fn() = foo;\n }"}, {"sha": "a2c55634749cbfef24f225727b07a2af0f74577a", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 32, "deletions": 79, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=58f1b9c7fc93961fee8c94b6bdcbd5abfe84d5e0", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(intrinsics, core)]\n-\n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({\n         let (a, b) = (&$a, &$b);\n@@ -19,96 +16,52 @@ macro_rules! assert_approx_eq {\n     })\n }\n \n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn sqrtf32(x: f32) -> f32;\n-        pub fn sqrtf64(x: f64) -> f64;\n-        pub fn powif32(a: f32, x: i32) -> f32;\n-        pub fn powif64(a: f64, x: i32) -> f64;\n-        pub fn sinf32(x: f32) -> f32;\n-        pub fn sinf64(x: f64) -> f64;\n-        pub fn cosf32(x: f32) -> f32;\n-        pub fn cosf64(x: f64) -> f64;\n-        pub fn powf32(a: f32, x: f32) -> f32;\n-        pub fn powf64(a: f64, x: f64) -> f64;\n-        pub fn expf32(x: f32) -> f32;\n-        pub fn expf64(x: f64) -> f64;\n-        pub fn exp2f32(x: f32) -> f32;\n-        pub fn exp2f64(x: f64) -> f64;\n-        pub fn logf32(x: f32) -> f32;\n-        pub fn logf64(x: f64) -> f64;\n-        pub fn log10f32(x: f32) -> f32;\n-        pub fn log10f64(x: f64) -> f64;\n-        pub fn log2f32(x: f32) -> f32;\n-        pub fn log2f64(x: f64) -> f64;\n-        pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n-        pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n-        pub fn fabsf32(x: f32) -> f32;\n-        pub fn fabsf64(x: f64) -> f64;\n-        pub fn floorf32(x: f32) -> f32;\n-        pub fn floorf64(x: f64) -> f64;\n-        pub fn ceilf32(x: f32) -> f32;\n-        pub fn ceilf64(x: f64) -> f64;\n-        pub fn truncf32(x: f32) -> f32;\n-        pub fn truncf64(x: f64) -> f64;\n-    }\n-}\n-\n pub fn main() {\n-    unsafe {\n-        use rusti::*;\n-\n-        use std::f32;\n-        use std::f64;\n-\n-        assert_approx_eq!(sqrtf32(64f32), 8f32);\n-        assert_approx_eq!(sqrtf64(64f64), 8f64);\n+    use std::f32;\n+    use std::f64;\n \n-        assert_approx_eq!(powif32(25f32, -2), 0.0016f32);\n-        assert_approx_eq!(powif64(23.2f64, 2), 538.24f64);\n+    assert_approx_eq!(64f32.sqrt(), 8f32);\n+    assert_approx_eq!(64f64.sqrt(), 8f64);\n \n-        assert_approx_eq!(sinf32(0f32), 0f32);\n-        assert_approx_eq!(sinf64(f64::consts::PI / 2f64), 1f64);\n+    assert_approx_eq!(25f32.powi(-2), 0.0016f32);\n+    assert_approx_eq!(23.2f64.powi(2), 538.24f64);\n \n-        assert_approx_eq!(cosf32(0f32), 1f32);\n-        assert_approx_eq!(cosf64(f64::consts::PI * 2f64), 1f64);\n+    assert_approx_eq!(0f32.sin(), 0f32);\n+    assert_approx_eq!((f64::consts::PI / 2f64).sin(), 1f64);\n \n-        assert_approx_eq!(powf32(25f32, -2f32), 0.0016f32);\n-        assert_approx_eq!(powf64(400f64, 0.5f64), 20f64);\n+    assert_approx_eq!(0f32.cos(), 1f32);\n+    assert_approx_eq!((f64::consts::PI * 2f64).cos(), 1f64);\n \n-        assert_approx_eq!(fabsf32(expf32(1f32) - f32::consts::E), 0f32);\n-        assert_approx_eq!(expf64(1f64), f64::consts::E);\n+    assert_approx_eq!(25f32.powf(-2f32), 0.0016f32);\n+    assert_approx_eq!(400f64.powf(0.5f64), 20f64);\n \n-        assert_approx_eq!(exp2f32(10f32), 1024f32);\n-        assert_approx_eq!(exp2f64(50f64), 1125899906842624f64);\n+    assert_approx_eq!((1f32.exp() - f32::consts::E).abs(), 0f32);\n+    assert_approx_eq!(1f64.exp(), f64::consts::E);\n \n-        assert_approx_eq!(fabsf32(logf32(f32::consts::E) - 1f32), 0f32);\n-        assert_approx_eq!(logf64(1f64), 0f64);\n+    assert_approx_eq!(10f32.exp2(), 1024f32);\n+    assert_approx_eq!(50f64.exp2(), 1125899906842624f64);\n \n-        assert_approx_eq!(log10f32(10f32), 1f32);\n-        assert_approx_eq!(log10f64(f64::consts::E), f64::consts::LOG10_E);\n+    assert_approx_eq!((f32::consts::E.ln() - 1f32).abs(), 0f32);\n+    assert_approx_eq!(1f64.ln(), 0f64);\n \n-        assert_approx_eq!(log2f32(8f32), 3f32);\n-        assert_approx_eq!(log2f64(f64::consts::E), f64::consts::LOG2_E);\n+    assert_approx_eq!(10f32.log10(), 1f32);\n+    assert_approx_eq!(f64::consts::E.log10(), f64::consts::LOG10_E);\n \n-        assert_approx_eq!(fmaf32(1.0f32, 2.0f32, 5.0f32), 7.0f32);\n-        assert_approx_eq!(fmaf64(0.0f64, -2.0f64, f64::consts::E), f64::consts::E);\n+    assert_approx_eq!(8f32.log2(), 3f32);\n+    assert_approx_eq!(f64::consts::E.log2(), f64::consts::LOG2_E);\n \n-        assert_approx_eq!(fabsf32(-1.0f32), 1.0f32);\n-        assert_approx_eq!(fabsf64(34.2f64), 34.2f64);\n+    assert_approx_eq!(1.0f32.mul_add(2.0f32, 5.0f32), 7.0f32);\n+    assert_approx_eq!(0.0f64.mul_add(-2.0f64, f64::consts::E), f64::consts::E);\n \n-        assert_approx_eq!(floorf32(3.8f32), 3.0f32);\n-        assert_approx_eq!(floorf64(-1.1f64), -2.0f64);\n+    assert_approx_eq!((-1.0f32).abs(), 1.0f32);\n+    assert_approx_eq!(34.2f64.abs(), 34.2f64);\n \n-        // Causes linker error\n-        // undefined reference to llvm.ceil.f32/64\n-        //assert_eq!(ceilf32(-2.3f32), -2.0f32);\n-        //assert_eq!(ceilf64(3.8f64), 4.0f64);\n+    assert_approx_eq!(3.8f32.floor(), 3.0f32);\n+    assert_approx_eq!((-1.1f64).floor(), -2.0f64);\n \n-        // Causes linker error\n-        // undefined reference to llvm.trunc.f32/64\n-        //assert_eq!(truncf32(0.1f32), 0.0f32);\n-        //assert_eq!(truncf64(-0.1f64), 0.0f64);\n-    }\n+    assert_approx_eq!((-2.3f32).ceil(), -2.0f32);\n+    assert_approx_eq!(3.8f64.ceil(), 4.0f64);\n \n+    assert_approx_eq!(0.1f32.trunc(), 0.0f32);\n+    assert_approx_eq!((-0.1f64).trunc(), 0.0f64);\n }"}]}