{"sha": "5394e34aa43687e36fb94656faf075b125c43bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTRlMzRhYTQzNjg3ZTM2ZmI5NDY1NmZhZjA3NWIxMjVjNDNiYjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-13T23:20:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-14T01:59:48Z"}, "message": "core: Camel case some lesser-used modules", "tree": {"sha": "2553a2abb61083a94278e956259a194cfecc470f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2553a2abb61083a94278e956259a194cfecc470f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5394e34aa43687e36fb94656faf075b125c43bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5394e34aa43687e36fb94656faf075b125c43bb5", "html_url": "https://github.com/rust-lang/rust/commit/5394e34aa43687e36fb94656faf075b125c43bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5394e34aa43687e36fb94656faf075b125c43bb5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b43c0c1add8d2caaa3c391d8d8daca2c609047e", "html_url": "https://github.com/rust-lang/rust/commit/6b43c0c1add8d2caaa3c391d8d8daca2c609047e"}], "stats": {"total": 356, "additions": 187, "deletions": 169}, "files": [{"sha": "060015c26cf5ddd866e7e91b8c0e56d002454320", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -14,7 +14,7 @@ export unsafe;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    fn vec_reserve_shared_actual(++t: *sys::type_desc,\n+    fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n                                  ++v: **vec::unsafe::vec_repr,\n                                  ++n: libc::size_t);\n }"}, {"sha": "b7b32722a1096a92eaa651f6867935e27fa0af33", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -4,22 +4,22 @@\n \n /// Interfaces used for comparison.\n \n-trait ord {\n+trait Ord {\n     pure fn lt(&&other: self) -> bool;\n }\n \n-trait eq {\n+trait Eq {\n     pure fn eq(&&other: self) -> bool;\n }\n \n-pure fn lt<T: ord>(v1: &T, v2: &T) -> bool {\n+pure fn lt<T: Ord>(v1: &T, v2: &T) -> bool {\n     v1.lt(*v2)\n }\n \n-pure fn le<T: ord eq>(v1: &T, v2: &T) -> bool {\n+pure fn le<T: Ord Eq>(v1: &T, v2: &T) -> bool {\n     v1.lt(*v2) || v1.eq(*v2)\n }\n \n-pure fn eq<T: eq>(v1: &T, v2: &T) -> bool {\n+pure fn eq<T: Eq>(v1: &T, v2: &T) -> bool {\n     v1.eq(*v2)\n }"}, {"sha": "96324c1b2974233a3fa1648589cd65c1bd7b8ff3", "filename": "src/libcore/core.rc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -159,17 +159,22 @@ mod ptr;\n mod vec;\n mod at_vec;\n mod bool;\n+#[warn(non_camel_case_types)]\n mod tuple;\n \n // Ubiquitous-utility-type modules\n \n #[cfg(notest)]\n mod ops;\n+#[warn(non_camel_case_types)]\n mod cmp;\n+#[warn(non_camel_case_types)]\n mod num;\n+#[warn(non_camel_case_types)]\n mod hash;\n mod either;\n mod iter;\n+#[warn(non_camel_case_types)]\n mod logging;\n mod option;\n #[path=\"iter-trait\"]\n@@ -178,8 +183,11 @@ mod option_iter {\n     mod inst;\n }\n mod result;\n+#[warn(non_camel_case_types)]\n mod to_str;\n+#[warn(non_camel_case_types)]\n mod to_bytes;\n+#[warn(non_camel_case_types)]\n mod util;\n \n // Data structure modules\n@@ -212,7 +220,9 @@ mod os;\n mod path;\n mod rand;\n mod run;\n+#[warn(non_camel_case_types)]\n mod sys;\n+#[warn(non_camel_case_types)]\n mod unsafe;\n \n \n@@ -227,9 +237,13 @@ mod rt;\n \n // For internal use, not exported\n \n+#[warn(non_camel_case_types)]\n mod unicode;\n+#[warn(non_camel_case_types)]\n mod priv;\n+#[warn(non_camel_case_types)]\n mod cmath;\n+#[warn(non_camel_case_types)]\n mod stackwalk;\n \n // Local Variables:"}, {"sha": "2f5e2cf6e0be24de66f19f78bff895dc17755a74", "filename": "src/libcore/core.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -5,27 +5,27 @@\n import option::{some, none};\n import option = option::option;\n import path = path::path;\n-import tuple::{tuple_ops, extended_tuple_ops};\n+import tuple::{TupleOps, ExtendedTupleOps};\n import str::{str_slice, unique_str};\n import vec::{const_vector, copyable_vector, immutable_vector};\n import vec::{immutable_copyable_vector, iter_trait_extensions};\n import iter::{base_iter, extended_iter, copyable_iter, times, timesi};\n-import num::num;\n+import num::Num;\n import ptr::ptr;\n-import to_str::to_str;\n+import to_str::ToStr;\n \n export path, option, some, none, unreachable;\n export extensions;\n // The following exports are the extension impls for numeric types\n-export num, times, timesi;\n+export Num, times, timesi;\n // The following exports are the common traits\n export str_slice, unique_str;\n export const_vector, copyable_vector, immutable_vector;\n export immutable_copyable_vector, iter_trait_extensions;\n export base_iter, copyable_iter, extended_iter;\n-export tuple_ops, extended_tuple_ops;\n+export TupleOps, ExtendedTupleOps;\n export ptr;\n-export to_str;\n+export ToStr;\n \n // The following exports are the core operators and kinds\n // The compiler has special knowlege of these so we must not duplicate them"}, {"sha": "17b8a2aa9e3f1e29c9b4a88472883cc1f17bf9cc", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -167,7 +167,7 @@ pure fn log2(n: f32) -> f32 {\n     return ln(n) / consts::ln_2;\n }\n \n-impl f32: num::num {\n+impl f32: num::Num {\n     pure fn add(&&other: f32)    -> f32 { return self + other; }\n     pure fn sub(&&other: f32)    -> f32 { return self - other; }\n     pure fn mul(&&other: f32)    -> f32 { return self * other; }"}, {"sha": "4f4fe391625f092b3f9c4e5186b23056e441b93b", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -194,7 +194,7 @@ pure fn log2(n: f64) -> f64 {\n     return ln(n) / consts::ln_2;\n }\n \n-impl f64: num::num {\n+impl f64: num::Num {\n     pure fn add(&&other: f64)    -> f64 { return self + other; }\n     pure fn sub(&&other: f64)    -> f64 { return self - other; }\n     pure fn mul(&&other: f64)    -> f64 { return self * other; }"}, {"sha": "040f321b513d85eeb70df897a3663036559b26a5", "filename": "src/libcore/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -409,7 +409,7 @@ pure fn sin(x: float) -> float { f64::sin(x as f64) as float }\n pure fn cos(x: float) -> float { f64::cos(x as f64) as float }\n pure fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n-impl float: num::num {\n+impl float: num::Num {\n     pure fn add(&&other: float)    -> float { return self + other; }\n     pure fn sub(&&other: float)    -> float { return self - other; }\n     pure fn mul(&&other: float)    -> float { return self * other; }\n@@ -516,7 +516,7 @@ fn test_to_str_inf() {\n \n #[test]\n fn test_traits() {\n-    fn test<U:num::num>(ten: U) {\n+    fn test<U:num::Num>(ten: U) {\n         assert (ten.to_int() == 10);\n \n         let two = ten.from_int(2);"}, {"sha": "dd0892f7100ab4f75800a25c60ede67fdbb416fa", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,5 +1,5 @@\n import T = inst::T;\n-import cmp::{eq, ord};\n+import cmp::{Eq, Ord};\n \n export min_value, max_value;\n export min, max;\n@@ -62,20 +62,20 @@ pure fn abs(i: T) -> T {\n     if is_negative(i) { -i } else { i }\n }\n \n-impl T: ord {\n+impl T: Ord {\n     pure fn lt(&&other: T) -> bool {\n         return self < other;\n     }\n }\n \n-impl T: eq {\n+impl T: Eq {\n     pure fn eq(&&other: T) -> bool {\n         return self == other;\n     }\n }\n \n \n-impl T: num::num {\n+impl T: num::Num {\n     pure fn add(&&other: T)    -> T { return self + other; }\n     pure fn sub(&&other: T)    -> T { return self - other; }\n     pure fn mul(&&other: T)    -> T { return self * other; }\n@@ -235,7 +235,7 @@ fn test_to_str() {\n \n #[test]\n fn test_interfaces() {\n-    fn test<U:num::num>(ten: U) {\n+    fn test<U:num::Num>(ten: U) {\n         assert (ten.to_int() == 10);\n \n         let two = ten.from_int(2);"}, {"sha": "a06c4e419e5ebf2cd4be292fee5c915251d4236d", "filename": "src/libcore/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,6 +1,6 @@\n /// An interface for numbers.\n \n-trait num {\n+trait Num {\n     // FIXME: Cross-crate overloading doesn't work yet. (#2615)\n     // FIXME: Trait composition. (#2616)\n     pure fn add(&&other: self) -> self;"}, {"sha": "d68401fadbe97186160efe9a3de5c8835a1c4caa", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -227,7 +227,7 @@ fn test_option_dance() {\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_option_too_much_dance() {\n-    let mut y = some(util::noncopyable());\n+    let mut y = some(util::NonCopyable());\n     let _y2 = swap_unwrap(&mut y);\n     let _y3 = swap_unwrap(&mut y);\n }"}, {"sha": "4f39c42137cf9ac7af56ec9b8307935138d0e38a", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1081,7 +1081,7 @@ impl<T: send> port<T>: selectable {\n }\n \n /// A channel that can be shared between many senders.\n-type shared_chan<T: send> = unsafe::exclusive<chan<T>>;\n+type shared_chan<T: send> = unsafe::Exclusive<chan<T>>;\n \n impl<T: send> shared_chan<T>: channel<T> {\n     fn send(+x: T) {"}, {"sha": "a844a0d6e1378aa6fc1d93df5480b8f8c1ff4470", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -5,6 +5,7 @@ export chan_from_global_ptr, weaken_task;\n import compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n import task::task_builder;\n \n+#[allow(non_camel_case_types)] // runtime type\n type rust_port_id = uint;\n \n extern mod rustrt {\n@@ -15,22 +16,22 @@ extern mod rustrt {\n     fn rust_task_unweaken(ch: rust_port_id);\n }\n \n-type global_ptr = *libc::uintptr_t;\n+type GlobalPtr = *libc::uintptr_t;\n \n /**\n  * Atomically gets a channel from a pointer to a pointer-sized memory location\n  * or, if no channel exists creates and installs a new channel and sets up a\n  * new task to receive from it.\n  */\n unsafe fn chan_from_global_ptr<T: send>(\n-    global: global_ptr,\n+    global: GlobalPtr,\n     task_fn: fn() -> task::task_builder,\n     +f: fn~(comm::port<T>)\n ) -> comm::chan<T> {\n \n-    enum msg {\n-        proceed,\n-        abort\n+    enum Msg {\n+        Proceed,\n+        Abort\n     }\n \n     log(debug,~\"ENTERING chan_from_global_ptr, before is_prob_zero check\");\n@@ -48,9 +49,9 @@ unsafe fn chan_from_global_ptr<T: send>(\n \n             // Wait to hear if we are the official instance of\n             // this global task\n-            match comm::recv::<msg>(setup_po) {\n-              proceed => f(po),\n-              abort => ()\n+            match comm::recv::<Msg>(setup_po) {\n+              Proceed => f(po),\n+              Abort => ()\n             }\n         };\n \n@@ -68,11 +69,11 @@ unsafe fn chan_from_global_ptr<T: send>(\n \n         if swapped {\n             // Success!\n-            comm::send(setup_ch, proceed);\n+            comm::send(setup_ch, Proceed);\n             ch\n         } else {\n             // Somebody else got in before we did\n-            comm::send(setup_ch, abort);\n+            comm::send(setup_ch, Abort);\n             unsafe::reinterpret_cast(*global)\n         }\n     } else {\n@@ -186,10 +187,10 @@ unsafe fn weaken_task(f: fn(comm::port<()>)) {\n     unsafe {\n         rustrt::rust_task_weaken(unsafe::reinterpret_cast(ch));\n     }\n-    let _unweaken = unweaken(ch);\n+    let _unweaken = Unweaken(ch);\n     f(po);\n \n-    class unweaken {\n+    class Unweaken {\n       let ch: comm::chan<()>;\n       new(ch: comm::chan<()>) { self.ch = ch; }\n       drop unsafe {"}, {"sha": "07c6ae6925e8b56a2789c7a595f6af225ef46fdd", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -4,32 +4,32 @@ import unsafe::reinterpret_cast;\n import ptr::offset;\n import sys::size_of;\n \n-type word = uint;\n+type Word = uint;\n \n-class frame {\n-    let fp: *word;\n+class Frame {\n+    let fp: *Word;\n \n-    new(fp: *word) {\n+    new(fp: *Word) {\n         self.fp = fp;\n     }\n }\n \n-fn walk_stack(visit: fn(frame) -> bool) {\n+fn walk_stack(visit: fn(Frame) -> bool) {\n \n     debug!{\"beginning stack walk\"};\n \n     do frame_address |frame_pointer| {\n-        let mut frame_address: *word = unsafe {\n+        let mut frame_address: *Word = unsafe {\n             reinterpret_cast(frame_pointer)\n         };\n         loop {\n-            let fr = frame(frame_address);\n+            let fr = Frame(frame_address);\n \n             debug!{\"frame: %x\", unsafe { reinterpret_cast(fr.fp) }};\n             visit(fr);\n \n             unsafe {\n-                let next_fp: **word = reinterpret_cast(frame_address);\n+                let next_fp: **Word = reinterpret_cast(frame_address);\n                 frame_address = *next_fp;\n                 if *frame_address == 0u {\n                     debug!{\"encountered task_start_wrapper. ending walk\"};"}, {"sha": "76f18a8c5d92bacc1bfadf8a1e7fe6b342fff8e0", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,6 +1,6 @@\n //! Misc low level stuff\n \n-export type_desc;\n+export TypeDesc;\n export get_type_desc;\n export size_of;\n export min_align_of;\n@@ -9,15 +9,16 @@ export refcount;\n export log_str;\n export shape_eq, shape_lt, shape_le;\n \n-enum type_desc = {\n+// Corresponds to runtime type_desc type\n+enum TypeDesc = {\n     size: uint,\n     align: uint\n     // Remaining fields not listed\n };\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    pure fn shape_log_str(t: *sys::type_desc, data: *()) -> ~str;\n+    pure fn shape_log_str(t: *sys::TypeDesc, data: *()) -> ~str;\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -48,8 +49,8 @@ pure fn shape_le<T>(x1: &T, x2: &T) -> bool {\n  * Useful for calling certain function in the Rust runtime or otherwise\n  * performing dark magick.\n  */\n-pure fn get_type_desc<T>() -> *type_desc {\n-    unchecked { rusti::get_tydesc::<T>() as *type_desc }\n+pure fn get_type_desc<T>() -> *TypeDesc {\n+    unchecked { rusti::get_tydesc::<T>() as *TypeDesc }\n }\n \n /// Returns the size of a type"}, {"sha": "244feb3f713d677b02e5caa3f50cfb74323e61ac", "filename": "src/libcore/task.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -188,7 +188,7 @@ type task_opts = {\n enum task_builder = {\n     opts: task_opts,\n     gen_body: fn@(+fn~()) -> fn~(),\n-    can_not_copy: option<util::noncopyable>,\n+    can_not_copy: option<util::NonCopyable>,\n     mut consumed: bool,\n };\n \n@@ -725,7 +725,7 @@ type taskgroup_data = {\n     // tasks in this group.\n     mut descendants: taskset,\n };\n-type taskgroup_arc = unsafe::exclusive<option<taskgroup_data>>;\n+type taskgroup_arc = unsafe::Exclusive<option<taskgroup_data>>;\n \n type taskgroup_inner = &mut option<taskgroup_data>;\n \n@@ -754,15 +754,15 @@ type ancestor_node = {\n     // Recursive rest of the list.\n     mut ancestors:    ancestor_list,\n };\n-enum ancestor_list = option<unsafe::exclusive<ancestor_node>>;\n+enum ancestor_list = option<unsafe::Exclusive<ancestor_node>>;\n \n // Accessors for taskgroup arcs and ancestor arcs that wrap the unsafety.\n #[inline(always)]\n fn access_group<U>(x: taskgroup_arc, blk: fn(taskgroup_inner) -> U) -> U {\n     unsafe { x.with(blk) }\n }\n #[inline(always)]\n-fn access_ancestors<U>(x: unsafe::exclusive<ancestor_node>,\n+fn access_ancestors<U>(x: unsafe::Exclusive<ancestor_node>,\n                        blk: fn(x: &mut ancestor_node) -> U) -> U {\n     unsafe { x.with(blk) }\n }"}, {"sha": "90026e1a1945160fb08925f6177eaaa562b003c9", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,19 +1,19 @@\n-trait to_bytes {\n+trait ToBytes {\n     fn to_bytes() -> ~[u8];\n }\n \n-impl ~[u8]: to_bytes {\n+impl ~[u8]: ToBytes {\n     fn to_bytes() -> ~[u8] { copy self }\n }\n \n-impl @~[u8]: to_bytes {\n+impl @~[u8]: ToBytes {\n     fn to_bytes() -> ~[u8] { copy *self }\n }\n \n-impl ~str: to_bytes {\n+impl ~str: ToBytes {\n     fn to_bytes() -> ~[u8] { str::bytes(self) }\n }\n \n-impl @(~str): to_bytes {\n+impl @(~str): ToBytes {\n     fn to_bytes() -> ~[u8] { str::bytes(*self) }\n }"}, {"sha": "93cae2772acd511694cd7ffb85015f082d9b0b0e", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,62 +1,62 @@\n-trait to_str { fn to_str() -> ~str; }\n+trait ToStr { fn to_str() -> ~str; }\n \n-impl int: to_str {\n+impl int: ToStr {\n     fn to_str() -> ~str { int::str(self) }\n }\n-impl i8: to_str {\n+impl i8: ToStr {\n     fn to_str() -> ~str { i8::str(self) }\n }\n-impl i16: to_str {\n+impl i16: ToStr {\n     fn to_str() -> ~str { i16::str(self) }\n }\n-impl i32: to_str {\n+impl i32: ToStr {\n     fn to_str() -> ~str { i32::str(self) }\n }\n-impl i64: to_str {\n+impl i64: ToStr {\n     fn to_str() -> ~str { i64::str(self) }\n }\n-impl uint: to_str {\n+impl uint: ToStr {\n     fn to_str() -> ~str { uint::str(self) }\n }\n-impl u8: to_str {\n+impl u8: ToStr {\n     fn to_str() -> ~str { u8::str(self) }\n }\n-impl u16: to_str {\n+impl u16: ToStr {\n     fn to_str() -> ~str { u16::str(self) }\n }\n-impl u32: to_str {\n+impl u32: ToStr {\n     fn to_str() -> ~str { u32::str(self) }\n }\n-impl u64: to_str {\n+impl u64: ToStr {\n     fn to_str() -> ~str { u64::str(self) }\n }\n-impl float: to_str {\n+impl float: ToStr {\n     fn to_str() -> ~str { float::to_str(self, 4u) }\n }\n-impl bool: to_str {\n+impl bool: ToStr {\n     fn to_str() -> ~str { bool::to_str(self) }\n }\n-impl (): to_str {\n+impl (): ToStr {\n     fn to_str() -> ~str { ~\"()\" }\n }\n-impl ~str: to_str {\n+impl ~str: ToStr {\n     fn to_str() -> ~str { self }\n }\n \n-impl<A: to_str copy, B: to_str copy> (A, B): to_str {\n+impl<A: ToStr copy, B: ToStr copy> (A, B): ToStr {\n     fn to_str() -> ~str {\n         let (a, b) = self;\n         ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\")\"\n     }\n }\n-impl<A: to_str copy, B: to_str copy, C: to_str copy> (A, B, C): to_str {\n+impl<A: ToStr copy, B: ToStr copy, C: ToStr copy> (A, B, C): ToStr {\n     fn to_str() -> ~str {\n         let (a, b, c) = self;\n         ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\", \" + c.to_str() + ~\")\"\n     }\n }\n \n-impl<A: to_str> ~[A]: to_str {\n+impl<A: ToStr> ~[A]: ToStr {\n     fn to_str() -> ~str {\n         let mut acc = ~\"[\", first = true;\n         for vec::each(self) |elt| {\n@@ -69,10 +69,10 @@ impl<A: to_str> ~[A]: to_str {\n     }\n }\n \n-impl<A: to_str> @A: to_str {\n+impl<A: ToStr> @A: ToStr {\n     fn to_str() -> ~str { ~\"@\" + (*self).to_str() }\n }\n-impl<A: to_str> ~A: to_str {\n+impl<A: ToStr> ~A: ToStr {\n     fn to_str() -> ~str { ~\"~\" + (*self).to_str() }\n }\n "}, {"sha": "749532c3f4b543e4d125fd998f170c0d912ab8c9", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,12 +1,12 @@\n //! Operations on tuples\n \n-trait tuple_ops<T,U> {\n+trait TupleOps<T,U> {\n     pure fn first() -> T;\n     pure fn second() -> U;\n     pure fn swap() -> (U, T);\n }\n \n-impl<T: copy, U: copy> (T, U): tuple_ops<T,U> {\n+impl<T: copy, U: copy> (T, U): TupleOps<T,U> {\n \n     /// Return the first element of self\n     pure fn first() -> T {\n@@ -28,12 +28,12 @@ impl<T: copy, U: copy> (T, U): tuple_ops<T,U> {\n \n }\n \n-trait extended_tuple_ops<A,B> {\n+trait ExtendedTupleOps<A,B> {\n     fn zip() -> ~[(A, B)];\n     fn map<C>(f: fn(A, B) -> C) -> ~[C];\n }\n \n-impl<A: copy, B: copy> (&[A], &[B]): extended_tuple_ops<A,B> {\n+impl<A: copy, B: copy> (&[A], &[B]): ExtendedTupleOps<A,B> {\n \n     fn zip() -> ~[(A, B)] {\n         let (a, b) = self;\n@@ -46,7 +46,7 @@ impl<A: copy, B: copy> (&[A], &[B]): extended_tuple_ops<A,B> {\n     }\n }\n \n-impl<A: copy, B: copy> (~[A], ~[B]): extended_tuple_ops<A,B> {\n+impl<A: copy, B: copy> (~[A], ~[B]): ExtendedTupleOps<A,B> {\n \n     fn zip() -> ~[(A, B)] {\n         let (a, b) = self;"}, {"sha": "162b0d398389fd71aecddb1c38960eea67d4f14c", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,5 +1,5 @@\n import T = inst::T;\n-import cmp::{eq, ord};\n+import cmp::{Eq, Ord};\n \n export min_value, max_value;\n export min, max;\n@@ -56,19 +56,19 @@ pure fn compl(i: T) -> T {\n     max_value ^ i\n }\n \n-impl T: ord {\n+impl T: Ord {\n     pure fn lt(&&other: T) -> bool {\n         return self < other;\n     }\n }\n \n-impl T: eq {\n+impl T: Eq {\n     pure fn eq(&&other: T) -> bool {\n         return self == other;\n     }\n }\n \n-impl T: num::num {\n+impl T: num::Num {\n     pure fn add(&&other: T)    -> T { return self + other; }\n     pure fn sub(&&other: T)    -> T { return self - other; }\n     pure fn mul(&&other: T)    -> T { return self * other; }"}, {"sha": "f8c6074abcf081b5e9c9694f6f557de23ba6f86f", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -2,9 +2,9 @@\n \n export reinterpret_cast, forget, bump_box_refcount, transmute;\n \n-export shared_mutable_state, clone_shared_mutable_state;\n+export SharedMutableState, shared_mutable_state, clone_shared_mutable_state;\n export get_shared_mutable_state, get_shared_immutable_state;\n-export exclusive;\n+export Exclusive, exclusive;\n \n import task::atomically;\n \n@@ -57,16 +57,16 @@ unsafe fn transmute<L, G>(-thing: L) -> G {\n  * Shared state & exclusive ARC\n  ****************************************************************************/\n \n-type arc_data<T> = {\n+type ArcData<T> = {\n     mut count: libc::intptr_t,\n     data: T\n };\n \n-class arc_destruct<T> {\n+class ArcDestruct<T> {\n    let data: *libc::c_void;\n    new(data: *libc::c_void) { self.data = data; }\n    drop unsafe {\n-      let data: ~arc_data<T> = unsafe::reinterpret_cast(self.data);\n+      let data: ~ArcData<T> = unsafe::reinterpret_cast(self.data);\n       let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n       assert new_count >= 0;\n       if new_count == 0 {\n@@ -83,31 +83,31 @@ class arc_destruct<T> {\n  * Data races between tasks can result in crashes and, with sufficient\n  * cleverness, arbitrary type coercion.\n  */\n-type shared_mutable_state<T: send> = arc_destruct<T>;\n+type SharedMutableState<T: send> = ArcDestruct<T>;\n \n-unsafe fn shared_mutable_state<T: send>(+data: T) -> shared_mutable_state<T> {\n+unsafe fn shared_mutable_state<T: send>(+data: T) -> SharedMutableState<T> {\n     let data = ~{mut count: 1, data: data};\n     unsafe {\n         let ptr = unsafe::transmute(data);\n-        arc_destruct(ptr)\n+        ArcDestruct(ptr)\n     }\n }\n \n-unsafe fn get_shared_mutable_state<T: send>(rc: &shared_mutable_state<T>)\n+unsafe fn get_shared_mutable_state<T: send>(rc: &SharedMutableState<T>)\n         -> &mut T {\n     unsafe {\n-        let ptr: ~arc_data<T> = unsafe::reinterpret_cast((*rc).data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast((*rc).data);\n         assert ptr.count > 0;\n         // Cast us back into the correct region\n         let r = unsafe::reinterpret_cast(&ptr.data);\n         unsafe::forget(ptr);\n         return r;\n     }\n }\n-unsafe fn get_shared_immutable_state<T: send>(rc: &shared_mutable_state<T>)\n+unsafe fn get_shared_immutable_state<T: send>(rc: &SharedMutableState<T>)\n         -> &T {\n     unsafe {\n-        let ptr: ~arc_data<T> = unsafe::reinterpret_cast((*rc).data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast((*rc).data);\n         assert ptr.count > 0;\n         // Cast us back into the correct region\n         let r = unsafe::reinterpret_cast(&ptr.data);\n@@ -116,19 +116,20 @@ unsafe fn get_shared_immutable_state<T: send>(rc: &shared_mutable_state<T>)\n     }\n }\n \n-unsafe fn clone_shared_mutable_state<T: send>(rc: &shared_mutable_state<T>)\n-        -> shared_mutable_state<T> {\n+unsafe fn clone_shared_mutable_state<T: send>(rc: &SharedMutableState<T>)\n+        -> SharedMutableState<T> {\n     unsafe {\n-        let ptr: ~arc_data<T> = unsafe::reinterpret_cast((*rc).data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast((*rc).data);\n         let new_count = rustrt::rust_atomic_increment(&mut ptr.count);\n         assert new_count >= 2;\n         unsafe::forget(ptr);\n     }\n-    arc_destruct((*rc).data)\n+    ArcDestruct((*rc).data)\n }\n \n /****************************************************************************/\n \n+#[allow(non_camel_case_types)] // runtime type\n type rust_little_lock = *libc::c_void;\n \n #[abi = \"cdecl\"]\n@@ -147,47 +148,47 @@ extern mod rustrt {\n     fn rust_unlock_little_lock(lock: rust_little_lock);\n }\n \n-class little_lock {\n+class LittleLock {\n     let l: rust_little_lock;\n     new() {\n         self.l = rustrt::rust_create_little_lock();\n     }\n     drop { rustrt::rust_destroy_little_lock(self.l); }\n }\n \n-impl little_lock {\n+impl LittleLock {\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n-        class unlock {\n+        class Unlock {\n             let l: rust_little_lock;\n             new(l: rust_little_lock) { self.l = l; }\n             drop { rustrt::rust_unlock_little_lock(self.l); }\n         }\n \n         do atomically {\n             rustrt::rust_lock_little_lock(self.l);\n-            let _r = unlock(self.l);\n+            let _r = Unlock(self.l);\n             f()\n         }\n     }\n }\n \n-struct ex_data<T: send> { lock: little_lock; mut failed: bool; mut data: T; }\n+struct ExData<T: send> { lock: LittleLock; mut failed: bool; mut data: T; }\n /**\n  * An arc over mutable data that is protected by a lock. For library use only.\n  */\n-struct exclusive<T: send> { x: shared_mutable_state<ex_data<T>>; }\n+struct Exclusive<T: send> { x: SharedMutableState<ExData<T>>; }\n \n-fn exclusive<T:send >(+user_data: T) -> exclusive<T> {\n-    let data = ex_data {\n-        lock: little_lock(), mut failed: false, mut data: user_data\n+fn exclusive<T:send >(+user_data: T) -> Exclusive<T> {\n+    let data = ExData {\n+        lock: LittleLock(), mut failed: false, mut data: user_data\n     };\n-    exclusive { x: unsafe { shared_mutable_state(data) } }\n+    Exclusive { x: unsafe { shared_mutable_state(data) } }\n }\n \n-impl<T: send> exclusive<T> {\n+impl<T: send> Exclusive<T> {\n     // Duplicate an exclusive ARC, as std::arc::clone.\n-    fn clone() -> exclusive<T> {\n-        exclusive { x: unsafe { clone_shared_mutable_state(&self.x) } }\n+    fn clone() -> Exclusive<T> {\n+        Exclusive { x: unsafe { clone_shared_mutable_state(&self.x) } }\n     }\n \n     // Exactly like std::arc::mutex_arc,access(), but with the little_lock"}, {"sha": "c8e1d72e305778f3556dfed86194b4a18abc37b2", "filename": "src/libcore/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -29,7 +29,7 @@ fn replace<T>(dest: &mut T, +src: T) -> T {\n }\n \n /// A non-copyable dummy type.\n-class noncopyable {\n+class NonCopyable {\n     i: ();\n     new() { self.i = (); }\n     drop { }\n@@ -52,7 +52,7 @@ mod tests {\n     }\n     #[test]\n     fn test_replace() {\n-        let mut x = some(noncopyable());\n+        let mut x = some(NonCopyable());\n         let y = replace(&mut x, none);\n         assert x.is_none();\n         assert y.is_some();"}, {"sha": "6bd0e8c8cd26050c1097c2244f8336c77006d24b", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -95,10 +95,10 @@ export vec_concat;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    fn vec_reserve_shared(++t: *sys::type_desc,\n+    fn vec_reserve_shared(++t: *sys::TypeDesc,\n                           ++v: **unsafe::vec_repr,\n                           ++n: libc::size_t);\n-    fn vec_from_buf_shared(++t: *sys::type_desc,\n+    fn vec_from_buf_shared(++t: *sys::TypeDesc,\n                            ++ptr: *(),\n                            ++count: libc::size_t) -> *unsafe::vec_repr;\n }"}, {"sha": "03261ec00250c28cdf22ca21f9e4e90b12a89c41", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -3,7 +3,8 @@\n  * between tasks.\n  */\n \n-import unsafe::{shared_mutable_state, clone_shared_mutable_state,\n+import unsafe::{SharedMutableState,\n+                shared_mutable_state, clone_shared_mutable_state,\n                 get_shared_mutable_state, get_shared_immutable_state};\n import sync;\n import sync::{mutex, rwlock};\n@@ -39,7 +40,7 @@ impl &condvar {\n  ****************************************************************************/\n \n /// An atomically reference counted wrapper for shared immutable state.\n-struct arc<T: const send> { x: shared_mutable_state<T>; }\n+struct arc<T: const send> { x: SharedMutableState<T>; }\n \n /// Create an atomically reference counted wrapper.\n fn arc<T: const send>(+data: T) -> arc<T> {\n@@ -71,7 +72,7 @@ fn clone<T: const send>(rc: &arc<T>) -> arc<T> {\n \n struct mutex_arc_inner<T: send> { lock: mutex; failed: bool; data: T; }\n /// An ARC with mutable data protected by a blocking mutex.\n-struct mutex_arc<T: send> { x: shared_mutable_state<mutex_arc_inner<T>>; }\n+struct mutex_arc<T: send> { x: SharedMutableState<mutex_arc_inner<T>>; }\n \n /// Create a mutex-protected ARC with the supplied data.\n fn mutex_arc<T: send>(+user_data: T) -> mutex_arc<T> {\n@@ -176,7 +177,7 @@ struct rw_arc_inner<T: const send> { lock: rwlock; failed: bool; data: T; }\n  * Unlike mutex_arcs, rw_arcs are safe, because they cannot be nested.\n  */\n struct rw_arc<T: const send> {\n-    x: shared_mutable_state<rw_arc_inner<T>>;\n+    x: SharedMutableState<rw_arc_inner<T>>;\n     mut cant_nest: ();\n }\n "}, {"sha": "736ad0e416a8440fded7b00e5c2846c0a66f8748", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -12,12 +12,12 @@ export breakpoint;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    fn debug_tydesc(td: *sys::type_desc);\n-    fn debug_opaque(td: *sys::type_desc, x: *());\n-    fn debug_box(td: *sys::type_desc, x: *());\n-    fn debug_tag(td: *sys::type_desc, x: *());\n-    fn debug_fn(td: *sys::type_desc, x: *());\n-    fn debug_ptrcast(td: *sys::type_desc, x: *()) -> *();\n+    fn debug_tydesc(td: *sys::TypeDesc);\n+    fn debug_opaque(td: *sys::TypeDesc, x: *());\n+    fn debug_box(td: *sys::TypeDesc, x: *());\n+    fn debug_tag(td: *sys::TypeDesc, x: *());\n+    fn debug_fn(td: *sys::TypeDesc, x: *());\n+    fn debug_ptrcast(td: *sys::TypeDesc, x: *()) -> *();\n     fn rust_dbg_breakpoint();\n }\n "}, {"sha": "f78e4be06da4e385b9d5e794635b31edef0d65f1", "filename": "src/libstd/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -622,11 +622,11 @@ impl <A: to_json> option<A>: to_json {\n     }\n }\n \n-impl json: to_str::to_str {\n+impl json: to_str::ToStr {\n     fn to_str() -> ~str { to_str(self) }\n }\n \n-impl error: to_str::to_str {\n+impl error: to_str::ToStr {\n     fn to_str() -> ~str {\n         fmt!{\"%u:%u: %s\", self.line, self.col, *self.msg}\n     }"}, {"sha": "071ef5952e0069e9bc8bc93846f5e17c4e214469", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -3,7 +3,7 @@\n #[warn(deprecated_mode)];\n \n import io::writer_util;\n-import to_str::to_str;\n+import to_str::ToStr;\n export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n export box_str_hash;\n export bytes_hash, int_hash, uint_hash, set_add;\n@@ -327,7 +327,7 @@ mod chained {\n         }\n     }\n \n-    impl<K: copy to_str, V: to_str copy> t<K, V>: to_str {\n+    impl<K: copy ToStr, V: ToStr copy> t<K, V>: ToStr {\n         fn to_writer(wr: io::writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");"}, {"sha": "e39eb777156ad467b18a54df6b5173b4dae6c107", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -673,7 +673,7 @@ fn to_str(url: url) -> ~str {\n                       fragment]);\n }\n \n-impl url: to_str::to_str {\n+impl url: to_str::ToStr {\n     fn to_str() -> ~str {\n         to_str(self)\n     }"}, {"sha": "df13fcba1afa7469cfc065a0ea4d40450495b4de", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,6 +1,6 @@\n //! Sorting methods\n import vec::{len, push};\n-import core::cmp::{eq, ord};\n+import core::cmp::{Eq, Ord};\n \n export le;\n export merge_sort;\n@@ -153,7 +153,7 @@ fn qsort3<T: copy>(compare_func_lt: le<T>, compare_func_eq: le<T>,\n  *\n  * This is an unstable sort.\n  */\n-fn quick_sort3<T: copy ord eq>(arr: ~[mut T]) {\n+fn quick_sort3<T: copy Ord Eq>(arr: ~[mut T]) {\n     if arr.len() <= 1 { return; }\n     qsort3(core::cmp::lt, core::cmp::eq, arr, 0, (arr.len() - 1) as int);\n }"}, {"sha": "20aa6846bcbdb9c4eb8041f3b6fd9a28ea048ea8", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -8,7 +8,7 @@\n export condvar, semaphore, mutex, rwlock;\n \n // FIXME (#3119) This shouldn't be a thing exported from core.\n-import unsafe::exclusive;\n+import unsafe::{Exclusive, exclusive};\n \n /****************************************************************************\n  * Internals\n@@ -55,7 +55,7 @@ struct sem_inner<Q> {\n     // a condition variable attached, others should.\n     blocked:   Q;\n }\n-enum sem<Q: send> = exclusive<sem_inner<Q>>;\n+enum sem<Q: send> = Exclusive<sem_inner<Q>>;\n \n fn new_sem<Q: send>(count: int, +q: Q) -> sem<Q> {\n     let (wait_tail, wait_head)  = pipes::stream();\n@@ -293,7 +293,7 @@ struct rwlock_inner {\n struct rwlock {\n     /* priv */ order_lock:  semaphore;\n     /* priv */ access_lock: sem<waitqueue>;\n-    /* priv */ state:       exclusive<rwlock_inner>;\n+    /* priv */ state:       Exclusive<rwlock_inner>;\n }\n \n /// Create a new rwlock."}, {"sha": "ef7562e0ffe66c3df5c8bdff4b9e2ac899186c6d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,6 +1,6 @@\n // A protocol compiler for Rust.\n \n-import to_str::to_str;\n+import to_str::ToStr;\n \n import dvec::dvec;\n "}, {"sha": "5fba31ed6e752aa7af0822776d3a9ae4ebc261c8", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,4 +1,4 @@\n-import to_str::to_str;\n+import to_str::ToStr;\n import dvec::dvec;\n \n import ast::{ident};\n@@ -9,7 +9,7 @@ enum direction {\n     send, recv\n }\n \n-impl direction: to_str {\n+impl direction: ToStr {\n     fn to_str() -> ~str {\n         match self {\n           send => ~\"send\","}, {"sha": "14a8fa1af5b8d3056705cf7ea0aa2bdca7cc37cf", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -152,11 +152,11 @@ fn check_crate(tcx: ty::ctxt,\n     return last_use_map;\n }\n \n-impl live_node: to_str::to_str {\n+impl live_node: to_str::ToStr {\n     fn to_str() -> ~str { fmt!{\"ln(%u)\", *self} }\n }\n \n-impl variable: to_str::to_str {\n+impl variable: to_str::ToStr {\n     fn to_str() -> ~str { fmt!{\"v(%u)\", *self} }\n }\n "}, {"sha": "64644f665d24980f5ce23c94242a5bd047eb8c10", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,9 +1,9 @@\n import to_str::*;\n-import to_str::to_str;\n+import to_str::ToStr;\n \n mod kitty {\n \n-class cat : to_str {\n+class cat : ToStr {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "ac7a8e47f26070b82e8187b7ec792ffa2d98d6fe", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,10 +1,10 @@\n #[link(name = \"a\", vers = \"0.1\")];\n #[crate_type = \"lib\"];\n \n-trait to_str {\n-    fn to_str() -> ~str;\n+trait to_strz {\n+    fn to_strz() -> ~str;\n }\n \n-impl ~str: to_str {\n-    fn to_str() -> ~str { self }\n+impl ~str: to_strz {\n+    fn to_strz() -> ~str { self }\n }"}, {"sha": "c8c120416d502e412b6fa5e2707a6cd3a9db7ef7", "filename": "src/test/auxiliary/issue_2242_b.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fissue_2242_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fissue_2242_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_b.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -2,8 +2,8 @@\n #[crate_type = \"lib\"];\n \n use a;\n-import a::to_str;\n+import a::to_strz;\n \n-impl int: to_str {\n-    fn to_str() -> ~str { fmt!{\"%?\", self} }\n+impl int: to_strz {\n+    fn to_strz() -> ~str { fmt!{\"%?\", self} }\n }"}, {"sha": "c0f73fdb220a06763d4644f78d2f743c7c0e702f", "filename": "src/test/auxiliary/issue_2242_c.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -3,8 +3,8 @@\n \n use a;\n \n-import a::to_str;\n+import a::to_strz;\n \n-impl bool: to_str {\n-    fn to_str() -> ~str { fmt!{\"%b\", self} }\n+impl bool: to_strz {\n+    fn to_strz() -> ~str { fmt!{\"%b\", self} }\n }"}, {"sha": "73061c85dfb9c9e15c485f1058ae4df70e85e2b4", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,17 +1,17 @@\n // xfail-fast\n // aux-build:cci_class_cast.rs\n use cci_class_cast;\n-import to_str::to_str;\n+import to_str::ToStr;\n import cci_class_cast::kitty::*;\n \n-fn print_out<T: to_str>(thing: T, expected: ~str) {\n+fn print_out<T: ToStr>(thing: T, expected: ~str) {\n   let actual = thing.to_str();\n   debug!{\"%s\", actual};\n   assert(actual == expected);\n }\n \n fn main() {\n-  let nyan : to_str  = cat(0u, 2, ~\"nyan\") as to_str;\n+  let nyan : ToStr  = cat(0u, 2, ~\"nyan\") as ToStr;\n   print_out(nyan, ~\"nyan\");\n }\n "}, {"sha": "097418cd884ce1eb5c0b0fc6ba069aa8ae4dada3", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -1,6 +1,6 @@\n // xfail-fast\n import to_str::*;\n-import to_str::to_str;\n+import to_str::ToStr;\n \n class cat {\n   priv {\n@@ -35,17 +35,17 @@ class cat {\n   }\n }\n \n-impl cat: to_str {\n+impl cat: ToStr {\n   fn to_str() -> ~str { self.name }\n }\n \n-fn print_out<T: to_str>(thing: T, expected: ~str) {\n+fn print_out<T: ToStr>(thing: T, expected: ~str) {\n   let actual = thing.to_str();\n   debug!{\"%s\", actual};\n   assert(actual == expected);\n }\n \n fn main() {\n-  let nyan : to_str  = cat(0u, 2, ~\"nyan\") as to_str;\n+  let nyan : ToStr = cat(0u, 2, ~\"nyan\") as ToStr;\n   print_out(nyan, ~\"nyan\");\n }"}, {"sha": "625bbf13ecb9e56a360aa8fe68f00f917e29e1e2", "filename": "src/test/run-pass/issue-2242-d.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fissue-2242-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fissue-2242-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2242-d.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -7,10 +7,10 @@ use a;\n use b;\n use c;\n \n-import a::to_str;\n+import a::to_strz;\n \n fn main() {\n-    io::println((~\"foo\").to_str());\n-    io::println(1.to_str());\n-    io::println(true.to_str());\n+    io::println((~\"foo\").to_strz());\n+    io::println(1.to_strz());\n+    io::println(true.to_strz());\n }"}, {"sha": "467ebd824ceab3d6b07aeb660ff20a1c8f78d271", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5394e34aa43687e36fb94656faf075b125c43bb5/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=5394e34aa43687e36fb94656faf075b125c43bb5", "patch": "@@ -13,7 +13,7 @@ enum square {\n     empty\n }\n \n-impl square: to_str::to_str {\n+impl square: to_str::ToStr {\n     fn to_str() -> ~str {\n         match self {\n           bot => { ~\"R\" }"}]}