{"sha": "0318f07bddd9911cb23d33eb668a911de2a02f3a", "node_id": "C_kwDOAAsO6NoAKDAzMThmMDdiZGRkOTkxMWNiMjNkMzNlYjY2OGE5MTFkZTJhMDJmM2E", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T14:47:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:08Z"}, "message": "various nits from review", "tree": {"sha": "d8c18addb24245c6a8d7ecf32f727a18ac2b34b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c18addb24245c6a8d7ecf32f727a18ac2b34b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0318f07bddd9911cb23d33eb668a911de2a02f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0318f07bddd9911cb23d33eb668a911de2a02f3a", "html_url": "https://github.com/rust-lang/rust/commit/0318f07bddd9911cb23d33eb668a911de2a02f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0318f07bddd9911cb23d33eb668a911de2a02f3a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cbd1066d711ef4b5de00fc105f05ee6a3db9ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbd1066d711ef4b5de00fc105f05ee6a3db9ae9", "html_url": "https://github.com/rust-lang/rust/commit/9cbd1066d711ef4b5de00fc105f05ee6a3db9ae9"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "94a2fb2fbddc298da7efde1311b555785bcda11a", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=0318f07bddd9911cb23d33eb668a911de2a02f3a", "patch": "@@ -369,7 +369,6 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n     while let Some(todo_item) = cx.todo.pop() {\n         let (data_id, alloc, section_name) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n-                //println!(\"alloc_id {}\", alloc_id);\n                 let alloc = match tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::VTable(..) => {"}, {"sha": "94ac71a4dd26366df67b981c1c6d7589fe9c982e", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=0318f07bddd9911cb23d33eb668a911de2a02f3a", "patch": "@@ -9,7 +9,10 @@ use crate::MemFlags;\n \n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{sym, Span};\n-use rustc_target::abi::{WrappingRange, call::{FnAbi, PassMode}};\n+use rustc_target::abi::{\n+    call::{FnAbi, PassMode},\n+    WrappingRange,\n+};\n \n fn copy_intrinsic<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,"}, {"sha": "967f8ece16cf9ff3554ae9d670e929577e299ca8", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=0318f07bddd9911cb23d33eb668a911de2a02f3a", "patch": "@@ -366,7 +366,7 @@ impl<'s> AllocDecodingSession<'s> {\n                 }\n                 AllocDiscriminant::VTable => {\n                     assert!(alloc_id.is_none());\n-                    trace!(\"creating static alloc ID\");\n+                    trace!(\"creating vtable alloc ID\");\n                     let ty = <Ty<'_> as Decodable<D>>::decode(decoder);\n                     let poly_trait_ref =\n                         <Option<ty::PolyExistentialTraitRef<'_>> as Decodable<D>>::decode(decoder);"}, {"sha": "68b65658c72b50503c3bc78635c84f30c771f62d", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0318f07bddd9911cb23d33eb668a911de2a02f3a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=0318f07bddd9911cb23d33eb668a911de2a02f3a", "patch": "@@ -1428,9 +1428,6 @@ fn collect_miri<'tcx>(tcx: TyCtxt<'tcx>, alloc_id: AllocId, output: &mut MonoIte\n             }\n         }\n         GlobalAlloc::VTable(ty, trait_ref) => {\n-            // FIXME(RJ) no ideas if this is correct. There is this nice\n-            // `create_mono_items_for_vtable_methods` method but I wouldn't know how to call it from\n-            // here. So instead we just generate the actual vtable and recurse.\n             let alloc_id = tcx.vtable_allocation((ty, trait_ref));\n             collect_miri(tcx, alloc_id, output)\n         }"}, {"sha": "cd5edee0460ad4a19b41f99ec55d56d31fa712fc", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0318f07bddd9911cb23d33eb668a911de2a02f3a/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0318f07bddd9911cb23d33eb668a911de2a02f3a/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=0318f07bddd9911cb23d33eb668a911de2a02f3a", "patch": "@@ -185,8 +185,7 @@ extern \"C\" {\n     /// Opaque type for accessing vtables.\n     ///\n     /// Private implementation detail of `DynMetadata::size_of` etc.\n-    /// Must be zero-sized since there is conceptually not actually any Abstract Machine memory behind this pointer.\n-    /// However, we can require pointer alignment.\n+    /// There is conceptually not actually any Abstract Machine memory behind this pointer.\n     type VTable;\n }\n "}]}