{"sha": "2689fd2402590961dae32f35369a8685c89022fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ODlmZDI0MDI1OTA5NjFkYWUzMmYzNTM2OWE4Njg1Yzg5MDIyZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T14:00:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T14:00:39Z"}, "message": "Auto merge of #45228 - theotherjimmy:ensure-query, r=michaelwoerister\n\nincr.comp.: Introduce `ensure` and `ensure` typeck_tables_of\n\nResolves #45210\n\nIn this Pull Request we introduce the `ensure` query/function. `ensure` has the\nsemantics and type of the function `Q1` below:\n```rust\nfn Q1::ensure(K){\n    Q(K);\n}\n```\nFurther, `ensure` avoids the need to load the result from disk (or execute the\nprovider, if we are not storing the results of Q to disk).\n\n@nikomatsakis", "tree": {"sha": "dbcee88cdfaed1aab6b3266af17f5cdf8f0db5bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcee88cdfaed1aab6b3266af17f5cdf8f0db5bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2689fd2402590961dae32f35369a8685c89022fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2689fd2402590961dae32f35369a8685c89022fb", "html_url": "https://github.com/rust-lang/rust/commit/2689fd2402590961dae32f35369a8685c89022fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2689fd2402590961dae32f35369a8685c89022fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df095cefe28f9fc781e8da02f655903600343506", "url": "https://api.github.com/repos/rust-lang/rust/commits/df095cefe28f9fc781e8da02f655903600343506", "html_url": "https://github.com/rust-lang/rust/commit/df095cefe28f9fc781e8da02f655903600343506"}, {"sha": "d0cb4d09cd4eb7626130cc9e59ef69dbfec04d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cb4d09cd4eb7626130cc9e59ef69dbfec04d0e", "html_url": "https://github.com/rust-lang/rust/commit/d0cb4d09cd4eb7626130cc9e59ef69dbfec04d0e"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "d6eaf6d1bc48fef0eee6daabc1b93134e8ca146d", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2689fd2402590961dae32f35369a8685c89022fb/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2689fd2402590961dae32f35369a8685c89022fb/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=2689fd2402590961dae32f35369a8685c89022fb", "patch": "@@ -344,6 +344,52 @@ macro_rules! define_maps {\n                 }\n             }\n \n+            /// Ensure that either this query has all green inputs or been executed.\n+            /// Executing query::ensure(D) is considered a read of the dep-node D.\n+            ///\n+            /// This function is particularly useful when executing passes for their\n+            /// side-effects -- e.g., in order to report errors for erroneous programs.\n+            ///\n+            /// Note: The optimization is only available during incr. comp.\n+            pub fn ensure(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> () {\n+                let dep_node = Self::to_dep_node(tcx, &key);\n+\n+                // Ensuring an \"input\" or anonymous query makes no sense\n+                assert!(!dep_node.kind.is_anon());\n+                assert!(!dep_node.kind.is_input());\n+                use dep_graph::DepNodeColor;\n+                match tcx.dep_graph.node_color(&dep_node) {\n+                    Some(DepNodeColor::Green(dep_node_index)) => {\n+                        tcx.dep_graph.read_index(dep_node_index);\n+                    }\n+                    Some(DepNodeColor::Red) => {\n+                        // A DepNodeColor::Red DepNode means that this query was executed\n+                        // before. We can not call `dep_graph.read()` here as we don't have\n+                        // the DepNodeIndex. Instead, We call the query again to issue the\n+                        // appropriate `dep_graph.read()` call. The performance cost this\n+                        // introduces should be negligible as we'll immediately hit the\n+                        // in-memory cache.\n+                        let _ = tcx.$name(key);\n+                    }\n+                    None => {\n+                        // Huh\n+                        if !tcx.dep_graph.is_fully_enabled() {\n+                            let _ = tcx.$name(key);\n+                            return;\n+                        }\n+                        match tcx.dep_graph.try_mark_green(tcx, &dep_node) {\n+                            Some(dep_node_index) => {\n+                                debug_assert!(tcx.dep_graph.is_green(dep_node_index));\n+                                tcx.dep_graph.read_index(dep_node_index);\n+                            }\n+                            None => {\n+                                let _ = tcx.$name(key);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n             fn compute_result(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> $V {\n                 let provider = tcx.maps.providers[key.map_crate()].$name;\n                 provider(tcx.global_tcx(), key)"}, {"sha": "6e263bdb1ad80281d4a9cddf1b91417f64c9087a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2689fd2402590961dae32f35369a8685c89022fb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2689fd2402590961dae32f35369a8685c89022fb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2689fd2402590961dae32f35369a8685c89022fb", "patch": "@@ -728,7 +728,7 @@ fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum\n     debug_assert!(crate_num == LOCAL_CRATE);\n     Ok(tcx.sess.track_errors(|| {\n         for body_owner_def_id in tcx.body_owners() {\n-            tcx.typeck_tables_of(body_owner_def_id);\n+            ty::maps::queries::typeck_tables_of::ensure(tcx, body_owner_def_id);\n         }\n     })?)\n }"}]}