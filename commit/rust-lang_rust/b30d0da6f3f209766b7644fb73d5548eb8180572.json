{"sha": "b30d0da6f3f209766b7644fb73d5548eb8180572", "node_id": "C_kwDOAAsO6NoAKGIzMGQwZGE2ZjNmMjA5NzY2Yjc2NDRmYjczZDU1NDhlYjgxODA1NzI", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-25T19:18:51Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-25T19:18:51Z"}, "message": "Update the output of the `check` descriptions", "tree": {"sha": "5efb2eb93935223b083d757e14c1fa9253d29bf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5efb2eb93935223b083d757e14c1fa9253d29bf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b30d0da6f3f209766b7644fb73d5548eb8180572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b30d0da6f3f209766b7644fb73d5548eb8180572", "html_url": "https://github.com/rust-lang/rust/commit/b30d0da6f3f209766b7644fb73d5548eb8180572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b30d0da6f3f209766b7644fb73d5548eb8180572/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcca6a375bd4eddb3deea7038ebf29d02af53b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcca6a375bd4eddb3deea7038ebf29d02af53b48", "html_url": "https://github.com/rust-lang/rust/commit/dcca6a375bd4eddb3deea7038ebf29d02af53b48"}], "stats": {"total": 88, "additions": 60, "deletions": 28}, "files": [{"sha": "cd19667139ab6274bf7105fc75accaa90d0e81a3", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 60, "deletions": 28, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b30d0da6f3f209766b7644fb73d5548eb8180572/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30d0da6f3f209766b7644fb73d5548eb8180572/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=b30d0da6f3f209766b7644fb73d5548eb8180572", "patch": "@@ -105,10 +105,15 @@ impl Step for Std {\n             cargo.arg(\"--lib\");\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} library artifacts ({} -> {})\",\n-            builder.top_stage, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} library artifacts ({target})\", builder.top_stage)\n+        } else {\n+            format!(\n+                \"Checking stage{} library artifacts ({} -> {})\",\n+                builder.top_stage, &compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -162,10 +167,18 @@ impl Step for Std {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} library test/bench/example targets ({} -> {})\",\n-            builder.top_stage, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\n+                \"Checking stage{} library test/bench/example targets ({target})\",\n+                builder.top_stage\n+            )\n+        } else {\n+            format!(\n+                \"Checking stage{} library test/bench/example targets ({} -> {})\",\n+                builder.top_stage, &compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -239,10 +252,15 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} compiler artifacts ({} -> {})\",\n-            builder.top_stage, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} compiler artifacts ({target})\", builder.top_stage)\n+        } else {\n+            format!(\n+                \"Checking stage{} compiler artifacts ({} -> {})\",\n+                builder.top_stage, &compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -299,10 +317,15 @@ impl Step for CodegenBackend {\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n         rustc_cargo_env(builder, &mut cargo, target);\n \n-        builder.info(&format!(\n-            \"Checking stage{} {} artifacts ({} -> {})\",\n-            builder.top_stage, backend, &compiler.host.triple, target.triple\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, backend)\n+        } else {\n+            format!(\n+                \"Checking stage{} {} library ({} -> {})\",\n+                builder.top_stage, backend, &compiler.host.triple, target.triple\n+            )\n+        };\n+        builder.info(&msg);\n \n         run_cargo(\n             builder,\n@@ -362,10 +385,15 @@ impl Step for RustAnalyzer {\n             cargo.arg(\"--benches\");\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} {} artifacts ({} -> {})\",\n-            compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} {} artifacts ({target})\", compiler.stage, \"rust-analyzer\")\n+        } else {\n+            format!(\n+                \"Checking stage{} {} artifacts ({} -> {})\",\n+                compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -432,14 +460,18 @@ macro_rules! tool_check_step {\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n                 // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n                 cargo.rustflag(\"-Zunstable-options\");\n-\n-                builder.info(&format!(\n-                    \"Checking stage{} {} artifacts ({} -> {})\",\n-                    builder.top_stage,\n-                    stringify!($name).to_lowercase(),\n-                    &compiler.host.triple,\n-                    target.triple\n-                ));\n+                let msg = if compiler.host == target {\n+                    format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, stringify!($name).to_lowercase())\n+                } else {\n+                    format!(\n+                        \"Checking stage{} {} artifacts ({} -> {})\",\n+                        builder.top_stage,\n+                        stringify!($name).to_lowercase(),\n+                        &compiler.host.triple,\n+                        target.triple\n+                    )\n+                };\n+                builder.info(&msg);\n                 run_cargo(\n                     builder,\n                     cargo,"}]}