{"sha": "69bbe79c5037eb3cd00744593d1836e45a6f56e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YmJlNzljNTAzN2ViM2NkMDA3NDQ1OTNkMTgzNmU0NWE2ZjU2ZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-22T11:44:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-22T12:07:31Z"}, "message": "implement feature flags", "tree": {"sha": "fc48327d9d70b320c60e6c9fc19fdc5bdbff88f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc48327d9d70b320c60e6c9fc19fdc5bdbff88f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69bbe79c5037eb3cd00744593d1836e45a6f56e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69bbe79c5037eb3cd00744593d1836e45a6f56e1", "html_url": "https://github.com/rust-lang/rust/commit/69bbe79c5037eb3cd00744593d1836e45a6f56e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69bbe79c5037eb3cd00744593d1836e45a6f56e1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd5afb7fe2eb20748ade9141e74b04f5dd2f922", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd5afb7fe2eb20748ade9141e74b04f5dd2f922", "html_url": "https://github.com/rust-lang/rust/commit/4dd5afb7fe2eb20748ade9141e74b04f5dd2f922"}], "stats": {"total": 186, "additions": 150, "deletions": 36}, "files": [{"sha": "f458ea300355df0f8565b730f8f8cbe925197474", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -3,7 +3,7 @@ use std::{collections::HashSet, error::Error, path::Path};\n use rustc_hash::FxHashMap;\n \n use ra_db::{CrateGraph, FileId, SourceRootId};\n-use ra_ide_api::{AnalysisChange, AnalysisHost};\n+use ra_ide_api::{AnalysisChange, AnalysisHost, FeatureFlags};\n use ra_project_model::{PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange};\n use ra_vfs_glob::RustPackageFilterBuilder;\n@@ -63,7 +63,7 @@ pub fn load(\n     vfs: &mut Vfs,\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n-    let mut host = AnalysisHost::new(lru_cap);\n+    let mut host = AnalysisHost::new(lru_cap, FeatureFlags::default());\n     let mut analysis_change = AnalysisChange::new();\n     analysis_change.set_crate_graph(crate_graph);\n "}, {"sha": "2b3f9848295c8b5feea16df5fca585c7fecc2ca6", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -118,7 +118,10 @@ impl Completions {\n             .set_documentation(func.docs(ctx.db))\n             .detail(detail);\n         // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none() && !ctx.is_call {\n+        if ctx.use_item_syntax.is_none()\n+            && !ctx.is_call\n+            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n+        {\n             tested_by!(inserts_parens_for_function_calls);\n             let snippet =\n                 if data.params().is_empty() || data.has_self_param() && data.params().len() == 1 {"}, {"sha": "f2e6b8f1264b034344efdc0b5eefaeda2dc14d3c", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -7,7 +7,7 @@ use ra_db::{\n \n use crate::{\n     symbol_index::{self, SymbolsDatabase},\n-    LineIndex,\n+    FeatureFlags, LineIndex,\n };\n \n #[salsa::database(\n@@ -22,6 +22,7 @@ use crate::{\n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n+    pub(crate) feature_flags: Arc<FeatureFlags>,\n     pub(crate) last_gc: time::Instant,\n     pub(crate) last_gc_check: time::Instant,\n }\n@@ -46,16 +47,17 @@ impl salsa::Database for RootDatabase {\n \n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n-        RootDatabase::new(None)\n+        RootDatabase::new(None, FeatureFlags::default())\n     }\n }\n \n impl RootDatabase {\n-    pub fn new(lru_capacity: Option<usize>) -> RootDatabase {\n+    pub fn new(lru_capacity: Option<usize>, feature_flags: FeatureFlags) -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: salsa::Runtime::default(),\n             last_gc: time::Instant::now(),\n             last_gc_check: time::Instant::now(),\n+            feature_flags: Arc::new(feature_flags),\n         };\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n@@ -74,6 +76,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n             runtime: self.runtime.snapshot(self),\n             last_gc: self.last_gc,\n             last_gc_check: self.last_gc_check,\n+            feature_flags: Arc::clone(&self.feature_flags),\n         })\n     }\n }"}, {"sha": "9f82ac71c1ef43b0de731831fff40f491095cde4", "filename": "crates/ra_ide_api/src/feature_flags.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffeature_flags.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -0,0 +1,67 @@\n+use rustc_hash::FxHashMap;\n+\n+/// Feature flags hold fine-grained toggles for all *user-visible* features of\n+/// rust-analyzer.\n+///\n+/// The exists such that users are able to disable any annoying feature (and,\n+/// with many users and many features,  some features are bound to be annoying\n+/// for some users)\n+///\n+/// Note that we purposefully use run-time checked strings, and not something\n+/// checked at compile time, to keep things simple and flexible.\n+///\n+/// Also note that, at the moment, `FeatureFlags` also store features for\n+/// `ra_lsp_server`. This should be benign layering violation.\n+#[derive(Debug)]\n+pub struct FeatureFlags {\n+    flags: FxHashMap<String, bool>,\n+}\n+\n+impl FeatureFlags {\n+    fn new(flags: &[(&str, bool)]) -> FeatureFlags {\n+        let flags = flags\n+            .iter()\n+            .map(|&(name, value)| {\n+                check_flag_name(name);\n+                (name.to_string(), value)\n+            })\n+            .collect();\n+        FeatureFlags { flags }\n+    }\n+\n+    pub fn set(&mut self, flag: &str, value: bool) -> Result<(), ()> {\n+        match self.flags.get_mut(flag) {\n+            None => Err(()),\n+            Some(slot) => {\n+                *slot = value;\n+                Ok(())\n+            }\n+        }\n+    }\n+\n+    pub fn get(&self, flag: &str) -> bool {\n+        match self.flags.get(flag) {\n+            None => panic!(\"unknown flag: {:?}\", flag),\n+            Some(value) => *value,\n+        }\n+    }\n+}\n+\n+impl Default for FeatureFlags {\n+    fn default() -> FeatureFlags {\n+        FeatureFlags::new(&[\n+            (\"lsp.diagnostics\", true),\n+            (\"completion.insertion.add-call-parenthesis\", true),\n+            (\"notifications.workspace-loaded\", true),\n+        ])\n+    }\n+}\n+\n+fn check_flag_name(flag: &str) {\n+    for c in flag.bytes() {\n+        match c {\n+            b'a'..=b'z' | b'-' | b'.' => (),\n+            _ => panic!(\"flag name does not match conventions: {:?}\", flag),\n+        }\n+    }\n+}"}, {"sha": "514dcaf9624c8e623200cefe4c31dc9842d6cb55", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -14,6 +14,7 @@ mod db;\n pub mod mock_analysis;\n mod symbol_index;\n mod change;\n+mod feature_flags;\n \n mod status;\n mod completion;\n@@ -63,6 +64,7 @@ pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n+    feature_flags::FeatureFlags,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n     inlay_hints::{InlayHint, InlayKind},\n@@ -247,20 +249,24 @@ pub struct AnalysisHost {\n \n impl Default for AnalysisHost {\n     fn default() -> AnalysisHost {\n-        AnalysisHost::new(None)\n+        AnalysisHost::new(None, FeatureFlags::default())\n     }\n }\n \n impl AnalysisHost {\n-    pub fn new(lru_capcity: Option<usize>) -> AnalysisHost {\n-        AnalysisHost { db: db::RootDatabase::new(lru_capcity) }\n+    pub fn new(lru_capcity: Option<usize>, feature_flags: FeatureFlags) -> AnalysisHost {\n+        AnalysisHost { db: db::RootDatabase::new(lru_capcity, feature_flags) }\n     }\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n         Analysis { db: self.db.snapshot() }\n     }\n \n+    pub fn feature_flags(&self) -> &FeatureFlags {\n+        &self.db.feature_flags\n+    }\n+\n     /// Applies changes to the current state of the world. If there are\n     /// outstanding snapshots, they will be canceled.\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n@@ -319,6 +325,10 @@ impl Analysis {\n         (host.analysis(), file_id)\n     }\n \n+    pub fn feature_flags(&self) -> &FeatureFlags {\n+        &self.db.feature_flags\n+    }\n+\n     /// Debug info about the current state of the analysis\n     pub fn status(&self) -> Cancelable<String> {\n         self.with_db(|db| status::status(&*db))"}, {"sha": "5c5ae3e18cdfcab384d6972c199c90fff29a431e", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -1,3 +1,5 @@\n+use rustc_hash::FxHashMap;\n+\n use serde::{Deserialize, Deserializer};\n \n /// Client provided initialization options\n@@ -12,29 +14,26 @@ pub struct ServerConfig {\n     #[serde(deserialize_with = \"nullable_bool_false\")]\n     pub publish_decorations: bool,\n \n-    /// Whether or not the workspace loaded notification should be sent\n-    ///\n-    /// Defaults to `true`\n-    #[serde(deserialize_with = \"nullable_bool_true\")]\n-    pub show_workspace_loaded: bool,\n-\n     pub exclude_globs: Vec<String>,\n \n     pub lru_capacity: Option<usize>,\n \n     /// For internal usage to make integrated tests faster.\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n     pub with_sysroot: bool,\n+\n+    /// Fine grained feature flags to disable specific features.\n+    pub feature_flags: FxHashMap<String, bool>,\n }\n \n impl Default for ServerConfig {\n     fn default() -> ServerConfig {\n         ServerConfig {\n             publish_decorations: false,\n-            show_workspace_loaded: true,\n             exclude_globs: Vec::new(),\n             lru_capacity: None,\n             with_sysroot: true,\n+            feature_flags: FxHashMap::default(),\n         }\n     }\n }"}, {"sha": "ce25ff162aaf6122cd9348346c8247a4a1e79ad1", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -9,7 +9,7 @@ use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n use lsp_types::{ClientCapabilities, NumberOrString};\n-use ra_ide_api::{Canceled, FileId, LibraryData};\n+use ra_ide_api::{Canceled, FeatureFlags, FileId, LibraryData};\n use ra_prof::profile;\n use ra_vfs::VfsTask;\n use serde::{de::DeserializeOwned, Serialize};\n@@ -56,7 +56,7 @@ pub fn main_loop(\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n-    log::debug!(\"server_config: {:?}\", config);\n+    log::info!(\"server_config: {:#?}\", config);\n     // FIXME: support dynamic workspace loading.\n     let workspaces = {\n         let ws_worker = workspace_loader(config.with_sysroot);\n@@ -83,20 +83,35 @@ pub fn main_loop(\n         .iter()\n         .map(|glob| ra_vfs_glob::Glob::new(glob))\n         .collect::<std::result::Result<Vec<_>, _>>()?;\n+    let feature_flags = {\n+        let mut ff = FeatureFlags::default();\n+        for (flag, value) in config.feature_flags {\n+            if let Err(_) = ff.set(flag.as_str(), value) {\n+                log::error!(\"unknown feature flag: {:?}\", flag);\n+                show_message(\n+                    req::MessageType::Error,\n+                    format!(\"unknown feature flag: {:?}\", flag),\n+                    msg_sender,\n+                );\n+            }\n+        }\n+        ff\n+    };\n+    log::info!(\"feature_flags: {:#?}\", feature_flags);\n     let mut state = WorldState::new(\n         ws_roots,\n         workspaces,\n         config.lru_capacity,\n         &globs,\n         Options {\n             publish_decorations: config.publish_decorations,\n-            show_workspace_loaded: config.show_workspace_loaded,\n             supports_location_link: client_caps\n                 .text_document\n                 .and_then(|it| it.definition)\n                 .and_then(|it| it.link_support)\n                 .unwrap_or(false),\n         },\n+        feature_flags,\n     );\n \n     let pool = ThreadPool::new(THREADPOOL_SIZE);\n@@ -276,7 +291,7 @@ fn main_loop_inner(\n             && in_flight_libraries == 0\n         {\n             let n_packages: usize = state.workspaces.iter().map(|it| it.n_packages()).sum();\n-            if state.options.show_workspace_loaded {\n+            if state.feature_flags().get(\"notifications.workspace-loaded\") {\n                 let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n                 show_message(req::MessageType::Info, msg, msg_sender);\n             }\n@@ -587,17 +602,20 @@ fn update_file_notifications_on_threadpool(\n     subscriptions: Vec<FileId>,\n ) {\n     log::trace!(\"updating notifications for {:?}\", subscriptions);\n+    let publish_diagnostics = world.feature_flags().get(\"lsp.diagnostics\");\n     pool.execute(move || {\n         for file_id in subscriptions {\n-            match handlers::publish_diagnostics(&world, file_id) {\n-                Err(e) => {\n-                    if !is_canceled(&e) {\n-                        log::error!(\"failed to compute diagnostics: {:?}\", e);\n+            if publish_diagnostics {\n+                match handlers::publish_diagnostics(&world, file_id) {\n+                    Err(e) => {\n+                        if !is_canceled(&e) {\n+                            log::error!(\"failed to compute diagnostics: {:?}\", e);\n+                        }\n+                    }\n+                    Ok(params) => {\n+                        let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n+                        sender.send(Task::Notify(not)).unwrap();\n                     }\n-                }\n-                Ok(params) => {\n-                    let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n-                    sender.send(Task::Notify(not)).unwrap();\n                 }\n             }\n             if publish_decorations {"}, {"sha": "6696dff71c61ec84129a5cbf4ba60139c339678e", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -7,7 +7,8 @@ use gen_lsp_server::ErrorCode;\n use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_ide_api::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FeatureFlags, FileId, LibraryData,\n+    SourceRootId,\n };\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n@@ -22,7 +23,6 @@ use crate::{\n #[derive(Debug, Clone)]\n pub struct Options {\n     pub publish_decorations: bool,\n-    pub show_workspace_loaded: bool,\n     pub supports_location_link: bool,\n }\n \n@@ -58,6 +58,7 @@ impl WorldState {\n         lru_capacity: Option<usize>,\n         exclude_globs: &[Glob],\n         options: Options,\n+        feature_flags: FeatureFlags,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n@@ -99,7 +100,7 @@ impl WorldState {\n         }\n         change.set_crate_graph(crate_graph);\n \n-        let mut analysis_host = AnalysisHost::new(lru_capacity);\n+        let mut analysis_host = AnalysisHost::new(lru_capacity, feature_flags);\n         analysis_host.apply_change(change);\n         WorldState {\n             options,\n@@ -184,6 +185,10 @@ impl WorldState {\n     pub fn complete_request(&mut self, request: CompletedRequest) {\n         self.latest_requests.write().record(request)\n     }\n+\n+    pub fn feature_flags(&self) -> &FeatureFlags {\n+        self.analysis_host.feature_flags()\n+    }\n }\n \n impl WorldSnapshot {\n@@ -246,4 +251,8 @@ impl WorldSnapshot {\n         let path = self.vfs.read().file2path(VfsFile(file_id.0));\n         self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n     }\n+\n+    pub fn feature_flags(&self) -> &FeatureFlags {\n+        self.analysis.feature_flags()\n+    }\n }"}, {"sha": "95ec6cff6f779c469c4c03f508cbcda3951add91", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -165,10 +165,10 @@\n                     \"default\": false,\n                     \"description\": \"When highlighting Rust code, use a unique color per identifier\"\n                 },\n-                \"rust-analyzer.showWorkspaceLoadedNotification\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Show notification when workspace was loaded\"\n+                \"rust-analyzer.featureFlags\": {\n+                    \"type\": \"object\",\n+                    \"default\": {},\n+                    \"description\": \"Fine grained feature flags to disable annoying features\"\n                 },\n                 \"rust-analyzer.enableEnhancedTyping\": {\n                     \"type\": \"boolean\","}, {"sha": "570ddca464b9858882de4528403beaf61eaf5348", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -23,6 +23,7 @@ export class Config {\n     public lruCapacity: null | number = null;\n     public displayInlayHints = true;\n     public excludeGlobs = [];\n+    public featureFlags = {};\n     public cargoWatchOptions: CargoWatchOptions = {\n         enableOnStartup: 'ask',\n         trace: 'off',\n@@ -132,5 +133,8 @@ export class Config {\n         if (config.has('excludeGlobs')) {\n             this.excludeGlobs = config.get('excludeGlobs') || [];\n         }\n+        if (config.has('featureFlags')) {\n+            this.featureFlags = config.get('featureFlags') || {};\n+        }\n     }\n }"}, {"sha": "0d2a99c70dc3088214a53c7da285f57f218b9c1e", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69bbe79c5037eb3cd00744593d1836e45a6f56e1/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69bbe79c5037eb3cd00744593d1836e45a6f56e1/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=69bbe79c5037eb3cd00744593d1836e45a6f56e1", "patch": "@@ -45,7 +45,8 @@ export class Server {\n                 showWorkspaceLoaded:\n                     Server.config.showWorkspaceLoadedNotification,\n                 lruCapacity: Server.config.lruCapacity,\n-                excludeGlobs: Server.config.excludeGlobs\n+                excludeGlobs: Server.config.excludeGlobs,\n+                featureFlags: Server.config.featureFlags\n             },\n             traceOutputChannel\n         };"}]}