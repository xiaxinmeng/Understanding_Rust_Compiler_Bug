{"sha": "6a67a050c62a14c75a314b498ab6dcf6620b29c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNjdhMDUwYzYyYTE0Yzc1YTMxNGI0OThhYjZkY2Y2NjIwYjI5Yzc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T23:51:07Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T23:51:07Z"}, "message": "Change make_run signature to taking a RunConfig struct for refactorability.", "tree": {"sha": "cd116caafab4366b2479a66c94b031511ed6d6b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd116caafab4366b2479a66c94b031511ed6d6b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a67a050c62a14c75a314b498ab6dcf6620b29c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a67a050c62a14c75a314b498ab6dcf6620b29c7", "html_url": "https://github.com/rust-lang/rust/commit/6a67a050c62a14c75a314b498ab6dcf6620b29c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a67a050c62a14c75a314b498ab6dcf6620b29c7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05af49086d50bf9f325070746975868f8c16f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05af49086d50bf9f325070746975868f8c16f0f", "html_url": "https://github.com/rust-lang/rust/commit/b05af49086d50bf9f325070746975868f8c16f0f"}], "stats": {"total": 556, "additions": 203, "deletions": 353}, "files": [{"sha": "7be391e5420278a6a8259844d5f014960b62bdb8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -79,12 +79,7 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// When path is `None`, we are executing in a context where no paths were\n     /// passed. When `./x.py build` is run, for example, this rule could get\n     /// called if it is in the correct list below with a path of `None`.\n-    fn make_run(\n-        _builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n+    fn make_run(_run: RunConfig) {\n         // It is reasonable to not have an implementation of make_run for rules\n         // who do not want to get called from the root context. This means that\n         // they are likely dependencies (e.g., sysroot creation) or similar, and\n@@ -93,13 +88,20 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     }\n }\n \n+pub struct RunConfig<'a> {\n+    pub builder: &'a Builder<'a>,\n+    pub host: Interned<String>,\n+    pub target: Interned<String>,\n+    pub path: Option<&'a Path>,\n+}\n+\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,\n     only_build_targets: bool,\n     only_build: bool,\n     should_run: fn(ShouldRun) -> ShouldRun,\n-    make_run: fn(&Builder, Option<&Path>, Interned<String>, Interned<String>),\n+    make_run: fn(RunConfig),\n }\n \n impl StepDescription {\n@@ -146,7 +148,13 @@ impl StepDescription {\n \n         for host in hosts {\n             for target in targets {\n-                (self.make_run)(builder, path, *host, *target);\n+                let run = RunConfig {\n+                    builder,\n+                    path,\n+                    host: *host,\n+                    target: *target,\n+                };\n+                (self.make_run)(run);\n             }\n         }\n     }"}, {"sha": "a07505edc2eb8724b9889b8cfc0eee15f007def5", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 59, "deletions": 116, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -31,7 +31,7 @@ use util::{self, dylib_path, dylib_path_var};\n \n use compile;\n use native;\n-use builder::{Kind, ShouldRun, Builder, Compiler, Step};\n+use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n use tool::{self, Tool};\n use cache::{INTERNER, Interned};\n \n@@ -119,13 +119,8 @@ impl Step for Linkcheck {\n         run.path(\"src/tools/linkchecker\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        path: Option<&Path>,\n-        host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n-        builder.ensure(Linkcheck { host });\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Linkcheck { host: run.host });\n     }\n }\n \n@@ -143,15 +138,10 @@ impl Step for Cargotest {\n         run.path(\"src/tools/cargotest\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n-        builder.ensure(Cargotest {\n-            stage: builder.top_stage,\n-            host: host,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Cargotest {\n+            stage: run.builder.top_stage,\n+            host: run.host,\n         });\n     }\n \n@@ -193,15 +183,10 @@ impl Step for Cargo {\n         run.path(\"src/tools/cargo\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(Cargo {\n-            stage: builder.top_stage,\n-            host: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Cargo {\n+            stage: run.builder.top_stage,\n+            host: run.target,\n         });\n     }\n \n@@ -242,15 +227,10 @@ impl Step for Rls {\n         run.path(\"src/tools/rls\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(Rls {\n-            stage: builder.top_stage,\n-            host: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rls {\n+            stage: run.builder.top_stage,\n+            host: run.target,\n         });\n     }\n \n@@ -320,14 +300,9 @@ impl Step for Tidy {\n         run.path(\"src/tools/tidy\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n-        builder.ensure(Tidy {\n-            host: builder.build.build,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Tidy {\n+            host: run.builder.build.build,\n         });\n     }\n }\n@@ -382,15 +357,10 @@ impl Step for DefaultCompiletest {\n         run\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        let compiler = builder.compiler(builder.top_stage, host);\n+    fn make_run(run: RunConfig) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n \n-        let test = path.map(|path| {\n+        let test = run.path.map(|path| {\n             DEFAULT_COMPILETESTS.iter().find(|&&test| {\n                 path.ends_with(test.path)\n             }).unwrap_or_else(|| {\n@@ -399,17 +369,17 @@ impl Step for DefaultCompiletest {\n         });\n \n         if let Some(test) = test {\n-            builder.ensure(DefaultCompiletest {\n+            run.builder.ensure(DefaultCompiletest {\n                 compiler,\n-                target,\n+                target: run.target,\n                 mode: test.mode,\n                 suite: test.suite,\n             });\n         } else {\n             for test in DEFAULT_COMPILETESTS {\n-                builder.ensure(DefaultCompiletest {\n+                run.builder.ensure(DefaultCompiletest {\n                     compiler,\n-                    target,\n+                    target: run.target,\n                     mode: test.mode,\n                     suite: test.suite\n                 });\n@@ -468,15 +438,10 @@ impl Step for HostCompiletest {\n         run\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        let compiler = builder.compiler(builder.top_stage, host);\n+    fn make_run(run: RunConfig) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n \n-        let test = path.map(|path| {\n+        let test = run.path.map(|path| {\n             HOST_COMPILETESTS.iter().find(|&&test| {\n                 path.ends_with(test.path)\n             }).unwrap_or_else(|| {\n@@ -485,17 +450,17 @@ impl Step for HostCompiletest {\n         });\n \n         if let Some(test) = test {\n-            builder.ensure(HostCompiletest {\n+            run.builder.ensure(HostCompiletest {\n                 compiler,\n-                target,\n+                target: run.target,\n                 mode: test.mode,\n                 suite: test.suite,\n             });\n         } else {\n             for test in HOST_COMPILETESTS {\n-                builder.ensure(HostCompiletest {\n+                run.builder.ensure(HostCompiletest {\n                     compiler,\n-                    target,\n+                    target: run.target,\n                     mode: test.mode,\n                     suite: test.suite\n                 });\n@@ -739,14 +704,9 @@ impl Step for Docs {\n         run.path(\"src/doc\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n-        builder.ensure(Docs {\n-            compiler: builder.compiler(builder.top_stage, host),\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Docs {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n         });\n     }\n \n@@ -802,14 +762,9 @@ impl Step for ErrorIndex {\n         run.path(\"src/tools/error_index_generator\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n-        builder.ensure(ErrorIndex {\n-            compiler: builder.compiler(builder.top_stage, host),\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(ErrorIndex {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n         });\n     }\n \n@@ -886,15 +841,11 @@ impl Step for CrateLibrustc {\n         run.krate(\"rustc-main\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        let compiler = builder.compiler(builder.top_stage, host);\n+    fn make_run(run: RunConfig) {\n+        let builder = run.builder;\n+        let compiler = builder.compiler(builder.top_stage, run.host);\n \n-        let run = |name: Option<Interned<String>>| {\n+        let make = |name: Option<Interned<String>>| {\n             let test_kind = if builder.kind == Kind::Test {\n                 TestKind::Test\n             } else if builder.kind == Kind::Bench {\n@@ -905,20 +856,20 @@ impl Step for CrateLibrustc {\n \n             builder.ensure(CrateLibrustc {\n                 compiler,\n-                target,\n+                target: run.target,\n                 test_kind: test_kind,\n                 krate: name,\n             });\n         };\n \n-        if let Some(path) = path {\n+        if let Some(path) = run.path {\n             for (name, krate_path) in builder.crates(\"rustc-main\") {\n                 if path.ends_with(krate_path) {\n-                    run(Some(name));\n+                    make(Some(name));\n                 }\n             }\n         } else {\n-            run(None);\n+            make(None);\n         }\n     }\n \n@@ -952,15 +903,11 @@ impl Step for Crate {\n         run.krate(\"std\").krate(\"test\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        let compiler = builder.compiler(builder.top_stage, host);\n+    fn make_run(run: RunConfig) {\n+        let builder = run.builder;\n+        let compiler = builder.compiler(builder.top_stage, run.host);\n \n-        let run = |mode: Mode, name: Option<Interned<String>>| {\n+        let make = |mode: Mode, name: Option<Interned<String>>| {\n             let test_kind = if builder.kind == Kind::Test {\n                 TestKind::Test\n             } else if builder.kind == Kind::Bench {\n@@ -970,27 +917,28 @@ impl Step for Crate {\n             };\n \n             builder.ensure(Crate {\n-                compiler, target,\n+                compiler,\n+                target: run.target,\n                 mode: mode,\n                 test_kind: test_kind,\n                 krate: name,\n             });\n         };\n \n-        if let Some(path) = path {\n+        if let Some(path) = run.path {\n             for (name, krate_path) in builder.crates(\"std\") {\n                 if path.ends_with(krate_path) {\n-                    run(Mode::Libstd, Some(name));\n+                    make(Mode::Libstd, Some(name));\n                 }\n             }\n             for (name, krate_path) in builder.crates(\"test\") {\n                 if path.ends_with(krate_path) {\n-                    run(Mode::Libtest, Some(name));\n+                    make(Mode::Libtest, Some(name));\n                 }\n             }\n         } else {\n-            run(Mode::Libstd, None);\n-            run(Mode::Libtest, None);\n+            make(Mode::Libstd, None);\n+            make(Mode::Libtest, None);\n         }\n     }\n \n@@ -1333,12 +1281,7 @@ impl Step for Bootstrap {\n         run.path(\"src/bootstrap\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        _target: Interned<String>,\n-    ) {\n-        builder.ensure(Bootstrap);\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Bootstrap);\n     }\n }"}, {"sha": "ddb2b27d60f91bee2d82d0f5eb5011eea3aeb067", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -34,7 +34,7 @@ use {Build, Compiler, Mode};\n use native;\n \n use cache::{INTERNER, Interned};\n-use builder::{Step, ShouldRun, Builder};\n+use builder::{Step, RunConfig, ShouldRun, Builder};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n@@ -50,15 +50,10 @@ impl Step for Std {\n         run.path(\"src/libstd\").krate(\"std\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(Std {\n-            compiler: builder.compiler(builder.top_stage, host),\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Std {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n         });\n     }\n \n@@ -233,15 +228,10 @@ impl Step for StartupObjects {\n         run.path(\"src/rtstartup\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(StartupObjects {\n-            compiler: builder.compiler(builder.top_stage, host),\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(StartupObjects {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n         });\n     }\n \n@@ -300,15 +290,10 @@ impl Step for Test {\n         run.path(\"src/libtest\").krate(\"test\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(Test {\n-            compiler: builder.compiler(builder.top_stage, host),\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Test {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n         });\n     }\n \n@@ -407,15 +392,10 @@ impl Step for Rustc {\n         run.path(\"src/librustc\").krate(\"rustc-main\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(Rustc {\n-            compiler: builder.compiler(builder.top_stage, host),\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustc {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n         });\n     }\n "}, {"sha": "9719b2472c63c03216301f0861c6aebdd80bd5d3", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 41, "deletions": 68, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -29,7 +29,7 @@ use build_helper::output;\n use {Build, Compiler, Mode};\n use channel;\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n-use builder::{Builder, ShouldRun, Step};\n+use builder::{Builder, RunConfig, ShouldRun, Step};\n use compile;\n use tool::{self, Tool};\n use cache::{INTERNER, Interned};\n@@ -72,12 +72,10 @@ impl Step for Docs {\n         run.path(\"src/doc\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, target: Interned<String>,\n-    ) {\n-        builder.ensure(Docs {\n-            stage: builder.top_stage,\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Docs {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -275,10 +273,8 @@ impl Step for Mingw {\n         run.never()\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Mingw { target });\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Mingw { target: run.target });\n     }\n \n     /// Build the `rust-mingw` installer component.\n@@ -338,12 +334,10 @@ impl Step for Rustc {\n         run.path(\"src/librustc\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Rustc {\n-            stage: builder.top_stage,\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -475,12 +469,10 @@ impl Step for DebuggerScripts {\n         run.path(\"src/lldb_batchmode.py\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(DebuggerScripts {\n-            sysroot: builder.sysroot(builder.compiler(builder.top_stage, host)),\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(DebuggerScripts {\n+            sysroot: run.builder.sysroot(run.builder.compiler(run.builder.top_stage, run.host)),\n+            target: run.target,\n         });\n     }\n \n@@ -535,12 +527,10 @@ impl Step for Std {\n         run.path(\"src/libstd\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Std {\n-            compiler: builder.compiler(builder.top_stage, host),\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Std {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n         });\n     }\n \n@@ -611,15 +601,10 @@ impl Step for Analysis {\n         run.path(\"analysis\").default_condition(builder.build.config.extended)\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        path: Option<&Path>,\n-        host: Interned<String>,\n-        target: Interned<String>\n-    ) {\n-        builder.ensure(Analysis {\n-            compiler: builder.compiler(builder.top_stage, host),\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Analysis {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n         });\n     }\n \n@@ -728,10 +713,8 @@ impl Step for Src {\n         run.path(\"src\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, _target: Interned<String>\n-    ) {\n-        builder.ensure(Src);\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Src);\n     }\n \n     /// Creates the `rust-src` installer component\n@@ -820,10 +803,8 @@ impl Step for PlainSourceTarball {\n         run.path(\"src\").default_condition(builder.config.rust_dist_src)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, _target: Interned<String>\n-    ) {\n-        builder.ensure(PlainSourceTarball);\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(PlainSourceTarball);\n     }\n \n     /// Creates the plain source tarball\n@@ -962,12 +943,10 @@ impl Step for Cargo {\n         run.path(\"cargo\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Cargo {\n-            stage: builder.top_stage,\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Cargo {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -1054,12 +1033,10 @@ impl Step for Rls {\n         run.path(\"rls\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Rls {\n-            stage: builder.top_stage,\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rls {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -1137,12 +1114,10 @@ impl Step for Extended {\n         run.path(\"cargo\").default_condition(builder.config.extended)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Extended {\n-            stage: builder.top_stage,\n-            target: target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Extended {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -1535,10 +1510,8 @@ impl Step for HashSign {\n         run.path(\"hash-and-sign\")\n     }\n \n-    fn make_run(\n-        builder: &Builder, _path: Option<&Path>, _host: Interned<String>, _target: Interned<String>\n-    ) {\n-        builder.ensure(HashSign);\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(HashSign);\n     }\n \n     fn run(self, builder: &Builder) {"}, {"sha": "8834fa24d698314a9e92915484bafdb61f574ea5", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 33, "deletions": 63, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -27,7 +27,7 @@ use Mode;\n use build_helper::up_to_date;\n \n use util::{cp_r, symlink_dir};\n-use builder::{Builder, ShouldRun, Step};\n+use builder::{Builder, RunConfig, ShouldRun, Step};\n use tool::Tool;\n use compile;\n use cache::{INTERNER, Interned};\n@@ -49,19 +49,9 @@ macro_rules! book {\n                 run.path($path).default_condition(builder.build.config.docs)\n             }\n \n-            fn make_run(\n-                builder: &Builder,\n-                path: Option<&Path>,\n-                _host: Interned<String>,\n-                target: Interned<String>\n-            ) {\n-                if path.is_none() && !builder.build.config.docs {\n-                    // Not a default rule if docs are disabled.\n-                    return;\n-                }\n-\n-                builder.ensure($name {\n-                    target,\n+            fn make_run(run: RunConfig) {\n+                run.builder.ensure($name {\n+                    target: run.target,\n                 });\n             }\n \n@@ -124,11 +114,9 @@ impl Step for UnstableBook {\n         run.path(\"src/doc/unstable-book\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(UnstableBook {\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(UnstableBook {\n+            target: run.target,\n         });\n     }\n \n@@ -202,11 +190,9 @@ impl Step for TheBook {\n         run.path(\"src/doc/book\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(TheBook {\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(TheBook {\n+            target: run.target,\n             name: \"book\",\n         });\n     }\n@@ -308,19 +294,13 @@ impl Step for Standalone {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/doc\")\n+        let builder = run.builder;\n+        run.path(\"src/doc\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        if path.is_none() && !builder.build.config.docs {\n-            // Not a default rule if docs are disabled.\n-            return;\n-        }\n-\n-        builder.ensure(Standalone {\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Standalone {\n+            target: run.target,\n         });\n     }\n \n@@ -414,12 +394,10 @@ impl Step for Std {\n         run.krate(\"std\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Std {\n-            stage: builder.top_stage,\n-            target\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Std {\n+            stage: run.builder.top_stage,\n+            target: run.target\n         });\n     }\n \n@@ -503,12 +481,10 @@ impl Step for Test {\n         run.krate(\"test\").default_condition(builder.config.compiler_docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Test {\n-            stage: builder.top_stage,\n-            target\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Test {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -567,12 +543,10 @@ impl Step for Rustc {\n         run.krate(\"rustc-main\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Rustc {\n-            stage: builder.top_stage,\n-            target\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -647,11 +621,9 @@ impl Step for ErrorIndex {\n         run.path(\"src/tools/error_index_generator\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(ErrorIndex {\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(ErrorIndex {\n+            target: run.target,\n         });\n     }\n \n@@ -695,11 +667,9 @@ impl Step for UnstableBookGen {\n         run.path(\"src/tools/unstable-book-gen\").default_condition(builder.build.config.docs)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>,\n-    ) {\n-        builder.ensure(UnstableBookGen {\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(UnstableBookGen {\n+            target: run.target,\n         });\n     }\n "}, {"sha": "85402e875d9adad28ec64481e28ae799aad065b5", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -20,7 +20,7 @@ use std::process::Command;\n \n use dist::{self, pkgname, sanitize_sh, tmpdir};\n \n-use builder::{Builder, ShouldRun, Step};\n+use builder::{Builder, RunConfig, ShouldRun, Step};\n use cache::Interned;\n \n pub fn install_docs(builder: &Builder, stage: u32, host: Interned<String>) {\n@@ -128,7 +128,7 @@ fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n }\n \n macro_rules! install {\n-    (($sel:ident, $builder:ident),\n+    (($sel:ident, $builder:ident, $_config:ident),\n        $($name:ident,\n        $path:expr,\n        $default_cond:expr,\n@@ -150,20 +150,15 @@ macro_rules! install {\n             $(const $c: bool = true;)*\n \n             fn should_run(run: ShouldRun) -> ShouldRun {\n-                let $builder = run.builder;\n+                let $_config = &run.builder.config;\n                 run.path($path).default_condition($default_cond)\n             }\n \n-            fn make_run(\n-                $builder: &Builder,\n-                path: Option<&Path>,\n-                host: Interned<String>,\n-                target: Interned<String>,\n-            ) {\n-                $builder.ensure($name {\n-                    stage: $builder.top_stage,\n-                    target,\n-                    host,\n+            fn make_run(run: RunConfig) {\n+                run.builder.ensure($name {\n+                    stage: run.builder.top_stage,\n+                    target: run.target,\n+                    host: run.host,\n                 });\n             }\n \n@@ -174,8 +169,8 @@ macro_rules! install {\n     }\n }\n \n-install!((self, builder),\n-    Docs, \"src/doc\", builder.build.config.docs, only_hosts: false, {\n+install!((self, builder, _config),\n+    Docs, \"src/doc\", _config.docs, only_hosts: false, {\n         builder.ensure(dist::Docs { stage: self.stage, target: self.target });\n         install_docs(builder, self.stage, self.target);\n     };\n@@ -186,26 +181,26 @@ install!((self, builder),\n         });\n         install_std(builder, self.stage);\n     };\n-    Cargo, \"cargo\", builder.build.config.extended, only_hosts: true, {\n+    Cargo, \"cargo\", _config.extended, only_hosts: true, {\n         builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n         install_cargo(builder, self.stage, self.target);\n     };\n-    Rls, \"rls\", builder.build.config.extended, only_hosts: true, {\n+    Rls, \"rls\", _config.extended, only_hosts: true, {\n         builder.ensure(dist::Rls { stage: self.stage, target: self.target });\n         install_rls(builder, self.stage, self.target);\n     };\n-    Analysis, \"analysis\", builder.build.config.extended, only_hosts: false, {\n+    Analysis, \"analysis\", _config.extended, only_hosts: false, {\n         builder.ensure(dist::Analysis {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    Src, \"src\", builder.build.config.extended, only_hosts: true, {\n+    Src, \"src\", _config.extended, only_hosts: true, {\n         builder.ensure(dist::Src);\n         install_src(builder, self.stage);\n     }, ONLY_BUILD;\n-    Rustc, \"src/librustc\", builder.build.config.extended, only_hosts: true, {\n+    Rustc, \"src/librustc\", _config.extended, only_hosts: true, {\n         builder.ensure(dist::Rustc { stage: self.stage, target: self.target });\n         install_rustc(builder, self.stage, self.target);\n     };"}, {"sha": "5b5ef3f07f98e839caf20904532bc2a2e4f33f98", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -96,7 +96,7 @@\n //! provide those libraries for it; they are mostly equivalent to constructing\n //! the stage1/bin compiler so we don't go through them individually.\n //!\n-//! ## Uplifiting stage1 {std,test,rustc}\n+//! ## Uplifting stage1 {std,test,rustc}\n //!\n //! This step copies the libraries from the stage1 compiler sysroot into the\n //! stage2 compiler. This is done to avoid rebuilding the compiler; libraries"}, {"sha": "f0dfd857ab619147b41e72e441d461b13c3cd434", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -32,7 +32,7 @@ use gcc;\n use Build;\n use util;\n use build_helper::up_to_date;\n-use builder::{Builder, ShouldRun, Step};\n+use builder::{Builder, RunConfig, ShouldRun, Step};\n use cache::Interned;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -247,13 +247,8 @@ impl Step for TestHelpers {\n         run.path(\"src/rt/rust_test_helpers.c\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        target: Interned<String>,\n-    ) {\n-        builder.ensure(TestHelpers { target })\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(TestHelpers { target: run.target })\n     }\n \n     /// Compiles the `rust_test_helpers.c` library which we used in various"}, {"sha": "b31d891051cf751ad5a7de02ef911972dc743838", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a67a050c62a14c75a314b498ab6dcf6620b29c7/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=6a67a050c62a14c75a314b498ab6dcf6620b29c7", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n use std::env;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::process::Command;\n \n use Mode;\n use Compiler;\n-use builder::{Step, ShouldRun, Builder};\n+use builder::{Step, RunConfig, ShouldRun, Builder};\n use util::{exe, add_lib_path};\n use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n use native;\n@@ -163,15 +163,10 @@ macro_rules! tool {\n                 run.path($path)\n             }\n \n-            fn make_run(\n-                builder: &Builder,\n-                _path: Option<&Path>,\n-                _host: Interned<String>,\n-                target: Interned<String>\n-            ) {\n-                builder.ensure($name {\n-                    stage: builder.top_stage,\n-                    target,\n+            fn make_run(run: RunConfig) {\n+                run.builder.ensure($name {\n+                    stage: run.builder.top_stage,\n+                    target: run.target,\n                 });\n             }\n \n@@ -214,15 +209,10 @@ impl Step for RemoteTestServer {\n         run.path(\"src/tools/remote-test-server\")\n     }\n \n-    fn make_run(\n-        builder: &Builder,\n-        _path: Option<&Path>,\n-        _host: Interned<String>,\n-        target: Interned<String>\n-    ) {\n-        builder.ensure(RemoteTestServer {\n-            stage: builder.top_stage,\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(RemoteTestServer {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -252,12 +242,10 @@ impl Step for Cargo {\n         run.path(\"src/tools/cargo\").default_condition(builder.build.config.extended)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Cargo {\n-            stage: builder.top_stage,\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Cargo {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n \n@@ -296,12 +284,10 @@ impl Step for Rls {\n         run.path(\"src/tools/rls\").default_condition(builder.build.config.extended)\n     }\n \n-    fn make_run(\n-        builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n-    ) {\n-        builder.ensure(Rls {\n-            stage: builder.top_stage,\n-            target,\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rls {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n         });\n     }\n "}]}