{"sha": "bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZGJkM2M2OWQzNWUzNDA5ZDZjNjUyYzE4OGViZDJkOTUxYjJlMGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-11T22:16:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-11T22:16:11Z"}, "message": "extra: add explicit ratchet-noise-percent option to benchmark ratchet, plus a few test breaking fixes.", "tree": {"sha": "70a6712544ad8db29932cf941d00ae175b4f6182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a6712544ad8db29932cf941d00ae175b4f6182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "html_url": "https://github.com/rust-lang/rust/commit/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83fb3d224a40022d6083b42f4296731a9edfdc70", "url": "https://api.github.com/repos/rust-lang/rust/commits/83fb3d224a40022d6083b42f4296731a9edfdc70", "html_url": "https://github.com/rust-lang/rust/commit/83fb3d224a40022d6083b42f4296731a9edfdc70"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "a411e714247ed4f9b547d3e40a09a986186b0d0c", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "patch": "@@ -79,7 +79,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n     let args_ = args.tail();\n     if args[1] == ~\"-h\" || args[1] == ~\"--help\" {\n         let message = fmt!(\"Usage: %s [OPTIONS] [TESTNAME...]\", argv0);\n-        io::println(getopts::groups::usage(message, groups));\n+        println(getopts::groups::usage(message, groups));\n         fail!()\n     }\n \n@@ -91,7 +91,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n \n     if getopts::opt_present(matches, \"h\") || getopts::opt_present(matches, \"help\") {\n         let message = fmt!(\"Usage: %s [OPTIONS]  [TESTNAME...]\", argv0);\n-        io::println(getopts::groups::usage(message, groups));\n+        println(getopts::groups::usage(message, groups));\n         fail!()\n     }\n \n@@ -216,8 +216,9 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n         logfile: copy config.logfile,\n         run_tests: true,\n         run_benchmarks: false,\n-        save_results: None,\n-        compare_results: None\n+        ratchet_metrics: None,\n+        ratchet_noise_percent: None,\n+        save_metrics: None,\n     }\n }\n "}, {"sha": "2f17e4a741761806d84d37d824b3e7c810ef9390", "filename": "src/libextra/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "patch": "@@ -1331,7 +1331,7 @@ impl<A:ToJson> ToJson for ~[A] {\n     fn to_json(&self) -> Json { List(self.map(|elt| elt.to_json())) }\n }\n \n-impl<A:ToJson + Copy> ToJson for HashMap<~str, A> {\n+impl<A:ToJson> ToJson for HashMap<~str, A> {\n     fn to_json(&self) -> Json {\n         let mut d = HashMap::new();\n         for self.iter().advance |(key, value)| {\n@@ -1341,7 +1341,7 @@ impl<A:ToJson + Copy> ToJson for HashMap<~str, A> {\n     }\n }\n \n-impl<A:ToJson + Copy> ToJson for TreeMap<~str, A> {\n+impl<A:ToJson> ToJson for TreeMap<~str, A> {\n     fn to_json(&self) -> Json {\n         let mut d = HashMap::new();\n         for self.iter().advance |(key, value)| {"}, {"sha": "96ca429676850ff47556b18cbaad0a8a8d1b3459", "filename": "src/libextra/test.rs", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=bbdbd3c69d35e3409d6c652c188ebd2d951b2e0e", "patch": "@@ -30,11 +30,11 @@ use treemap::TreeMap;\n use std::comm::{stream, SharedChan};\n use std::either;\n use std::io;\n-use std::option;\n use std::result;\n use std::task;\n use std::to_str::ToStr;\n use std::u64;\n+use std::f64;\n use std::hashmap::HashMap;\n use std::os;\n \n@@ -149,6 +149,7 @@ pub struct TestOpts {\n     run_tests: bool,\n     run_benchmarks: bool,\n     ratchet_metrics: Option<Path>,\n+    ratchet_noise_percent: Option<f64>,\n     save_metrics: Option<Path>,\n     logfile: Option<Path>\n }\n@@ -163,6 +164,7 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n                  getopts::optflag(\"bench\"),\n                  getopts::optopt(\"save-metrics\"),\n                  getopts::optopt(\"ratchet-metrics\"),\n+                 getopts::optopt(\"ratchet-noise-percent\"),\n                  getopts::optopt(\"logfile\")];\n     let matches =\n         match getopts::getopts(args_, opts) {\n@@ -172,8 +174,8 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n \n     let filter =\n         if matches.free.len() > 0 {\n-            option::Some(copy (matches).free[0])\n-        } else { option::None };\n+            Some(copy (matches).free[0])\n+        } else { None };\n \n     let run_ignored = getopts::opt_present(&matches, \"ignored\");\n \n@@ -187,6 +189,10 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n     let ratchet_metrics = getopts::opt_maybe_str(&matches, \"ratchet-metrics\");\n     let ratchet_metrics = ratchet_metrics.map(|s| Path(*s));\n \n+    let ratchet_noise_percent =\n+        getopts::opt_maybe_str(&matches, \"ratchet-noise-percent\");\n+    let ratchet_noise_percent = ratchet_noise_percent.map(|s| f64::from_str(*s).get());\n+\n     let save_metrics = getopts::opt_maybe_str(&matches, \"save-metrics\");\n     let save_metrics = save_metrics.map(|s| Path(*s));\n \n@@ -196,6 +202,7 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n         run_tests: run_tests,\n         run_benchmarks: run_benchmarks,\n         ratchet_metrics: ratchet_metrics,\n+        ratchet_noise_percent: ratchet_noise_percent,\n         save_metrics: save_metrics,\n         logfile: logfile\n     };\n@@ -405,14 +412,22 @@ impl ConsoleTestState {\n         }\n     }\n \n-    pub fn write_run_finish(&self, ratchet_metrics: &Option<Path>) -> bool {\n+    pub fn write_run_finish(&self,\n+                            ratchet_metrics: &Option<Path>,\n+                            ratchet_pct: Option<f64>) -> bool {\n         assert!(self.passed + self.failed + self.ignored + self.benchmarked == self.total);\n \n         let ratchet_success = match *ratchet_metrics {\n             None => true,\n             Some(ref pth) => {\n                 self.out.write_str(fmt!(\"\\nusing metrics ratchet: %s\\n\", pth.to_str()));\n-                let (diff, ok) = self.metrics.ratchet(pth);\n+                match ratchet_pct {\n+                    None => (),\n+                    Some(pct) =>\n+                    self.out.write_str(fmt!(\"with noise-tolerance forced to: %f%%\\n\",\n+                                            pct as float))\n+                }\n+                let (diff, ok) = self.metrics.ratchet(pth, ratchet_pct);\n                 self.write_metric_diff(&diff);\n                 ok\n             }\n@@ -488,7 +503,7 @@ pub fn run_tests_console(opts: &TestOpts,\n             st.out.write_str(fmt!(\"\\nmetrics saved to: %s\", pth.to_str()));\n         }\n     }\n-    return st.write_run_finish(&opts.ratchet_metrics);\n+    return st.write_run_finish(&opts.ratchet_metrics, opts.ratchet_noise_percent);\n }\n \n #[test]\n@@ -510,18 +525,19 @@ fn should_sort_failures_before_printing_them() {\n \n         let st = @ConsoleTestState {\n             out: wr,\n-            log_out: option::None,\n+            log_out: None,\n+            term: None,\n             use_color: false,\n             total: 0u,\n             passed: 0u,\n             failed: 0u,\n             ignored: 0u,\n             benchmarked: 0u,\n-            metrics: MetricsMap::new(),\n+            metrics: MetricMap::new(),\n             failures: ~[test_b, test_a]\n         };\n \n-        print_failures(st);\n+        st.write_failures();\n     };\n \n     let apos = s.find_str(\"a\").get();\n@@ -624,15 +640,17 @@ pub fn filter_tests(\n         filtered\n     } else {\n         let filter_str = match opts.filter {\n-          option::Some(ref f) => copy *f,\n-          option::None => ~\"\"\n+          Some(ref f) => copy *f,\n+          None => ~\"\"\n         };\n \n         fn filter_fn(test: TestDescAndFn, filter_str: &str) ->\n             Option<TestDescAndFn> {\n             if test.desc.name.to_str().contains(filter_str) {\n-                return option::Some(test);\n-            } else { return option::None; }\n+                return Some(test);\n+            } else {\n+                return None;\n+            }\n         }\n \n         filtered.consume_iter().filter_map(|x| filter_fn(x, filter_str)).collect()\n@@ -757,14 +775,19 @@ impl MetricMap {\n     }\n \n     /// Compare against another MetricMap\n-    pub fn compare_to_old(&self, old: MetricMap) -> MetricDiff {\n+    pub fn compare_to_old(&self, old: MetricMap,\n+                          noise_pct: Option<f64>) -> MetricDiff {\n         let mut diff : MetricDiff = TreeMap::new();\n         for old.iter().advance |(k, vold)| {\n             let r = match self.find(k) {\n                 None => MetricRemoved,\n                 Some(v) => {\n                     let delta = (v.value - vold.value);\n-                    if delta.abs() < vold.noise.abs() {\n+                    let noise = match noise_pct {\n+                        None => f64::max(vold.noise.abs(), v.noise.abs()),\n+                        Some(pct) => vold.value * pct / 100.0\n+                    };\n+                    if delta.abs() < noise {\n                         LikelyNoise\n                     } else {\n                         let pct = delta.abs() / v.value * 100.0;\n@@ -827,14 +850,14 @@ impl MetricMap {\n     /// file to contain the metrics in `self` if none of the\n     /// `MetricChange`s are `Regression`. Returns the diff as well\n     /// as a boolean indicating whether the ratchet succeeded.\n-    pub fn ratchet(&self, p: &Path) -> (MetricDiff, bool) {\n+    pub fn ratchet(&self, p: &Path, pct: Option<f64>) -> (MetricDiff, bool) {\n         let old = if os::path_exists(p) {\n             MetricMap::load(p)\n         } else {\n             MetricMap::new()\n         };\n \n-        let diff : MetricDiff = self.compare_to_old(old);\n+        let diff : MetricDiff = self.compare_to_old(old, pct);\n         let ok = do diff.iter().all() |(_, v)| {\n             match *v {\n                 Regression(_) => false,\n@@ -1092,12 +1115,14 @@ mod tests {\n         // unignored tests and flip the ignore flag on the rest to false\n \n         let opts = TestOpts {\n-            filter: option::None,\n+            filter: None,\n             run_ignored: true,\n-            logfile: option::None,\n+            logfile: None,\n             run_tests: true,\n             run_benchmarks: false,\n-            ratchet: option::None,\n+            ratchet_noise_percent: None,\n+            ratchet_metrics: None,\n+            save_metrics: None,\n         };\n \n         let tests = ~[\n@@ -1128,13 +1153,14 @@ mod tests {\n     #[test]\n     pub fn sort_tests() {\n         let opts = TestOpts {\n-            filter: option::None,\n+            filter: None,\n             run_ignored: false,\n-            logfile: option::None,\n+            logfile: None,\n             run_tests: true,\n             run_benchmarks: false,\n-            ratchet_metrics: option::None,\n-            save_metrics: option::None,\n+            ratchet_noise_percent: None,\n+            ratchet_metrics: None,\n+            save_metrics: None,\n         };\n \n         let names ="}]}