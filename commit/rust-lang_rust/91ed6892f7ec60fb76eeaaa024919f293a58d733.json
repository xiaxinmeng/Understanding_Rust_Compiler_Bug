{"sha": "91ed6892f7ec60fb76eeaaa024919f293a58d733", "node_id": "C_kwDOAAsO6NoAKDkxZWQ2ODkyZjdlYzYwZmI3NmVlYWFhMDI0OTE5ZjI5M2E1OGQ3MzM", "commit": {"author": {"name": "Mahdi Dibaiee", "email": "mdibaiee@pm.me", "date": "2022-01-10T08:54:42Z"}, "committer": {"name": "Mahdi Dibaiee", "email": "mdibaiee@pm.me", "date": "2022-01-10T17:42:20Z"}, "message": "rustc_pass_by_value lint: add test on custom types", "tree": {"sha": "220e24d714a7892d27f15869ac42728c1a6bd9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220e24d714a7892d27f15869ac42728c1a6bd9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ed6892f7ec60fb76eeaaa024919f293a58d733", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYxDoXUzfgu5d8FXXuroRW98MWYoFAmHccAYACgkQuroRW98M\nWYp84g//f6Xdq6AYPSnp0g89f9+CiGfkFD0KHCTIqhhwQg84sMXdwaPOimXhcLJv\ndv9SIAcNCm1O8TzRb8egw2U8k5qWLgTolZShStjQfVLJCtD8WTO1jzG0+M+D1Bss\n1pGDms5O+84BrYsSCHmBzy8kSNbIi3zzL4pmUAeIw7k+7wTHdXWbfnjSBM9xaotx\n4ibPeIAYveeLQZEuY/GjYIMkN+gmIncfqw4lb03HlQdk9chjeXs649DGjBLEXool\nsdUcJHzKHy3cgqgEo7yiFwjbixScJJqX+5mEgLrTZoAaeEdYLxuJUKNqTG9X8nUr\nWYdkW7ksnyMTHcjVzyt4dVJIITuHz2S2VD7vZ3EYSLnXrZb/PY+iIZMFWOtd9R4g\nXbOD1u1XOCgWGHExsxuXxOkdacHvD3rgEx2YWiLNzUZZdTpSfy0CebU0dWkYQpxM\ndAnDwiA8EYscgsmetOkB4SpAJPirfZhkafI9wY6DKDfpXkCZDsYmisB7p9Bu0c6H\nO6DgM9Rlgr3ptNJpYoPHGhpL6ZmJHDn68T37Jn/8mwl28J2REDLubH3kgLR8H0NH\nyPpSQDL1h6GMyFiPgVxUvHVTNhIbRQHITDGXIlMFlyXIuenp1eeo2T7EABHKxrMc\nuFg115qC3EhSqUYKuklOrMPVp9BLlv7BzIXwdjeALA391gOuDW8=\n=Kd/I\n-----END PGP SIGNATURE-----", "payload": "tree 220e24d714a7892d27f15869ac42728c1a6bd9f0\nparent 4c3e330a8c023af20beb23a3a46b5d6d77a62839\nauthor Mahdi Dibaiee <mdibaiee@pm.me> 1641804882 +0000\ncommitter Mahdi Dibaiee <mdibaiee@pm.me> 1641836540 +0000\n\nrustc_pass_by_value lint: add test on custom types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ed6892f7ec60fb76eeaaa024919f293a58d733", "html_url": "https://github.com/rust-lang/rust/commit/91ed6892f7ec60fb76eeaaa024919f293a58d733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ed6892f7ec60fb76eeaaa024919f293a58d733/comments", "author": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3e330a8c023af20beb23a3a46b5d6d77a62839", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3e330a8c023af20beb23a3a46b5d6d77a62839", "html_url": "https://github.com/rust-lang/rust/commit/4c3e330a8c023af20beb23a3a46b5d6d77a62839"}], "stats": {"total": 104, "additions": 82, "deletions": 22}, "files": [{"sha": "0847f600f9d14e9ce20d0c413fdbefa0c6c8dab1", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91ed6892f7ec60fb76eeaaa024919f293a58d733/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ed6892f7ec60fb76eeaaa024919f293a58d733/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=91ed6892f7ec60fb76eeaaa024919f293a58d733", "patch": "@@ -11,6 +11,7 @@ declare_tool_lint! {\n     /// The `rustc_pass_by_value` lint marks a type with `#[rustc_pass_by_value]` requiring it to always be passed by value.\n     /// This is usually used for types that are thin wrappers around references, so there is no benefit to an extra\n     /// layer of indirection. (Example: `Ty` which is a reference to a `TyS`)\n+    /// This lint relies on `#[rustc_diagnostic_item]` being available for the target.\n     pub rustc::PASS_BY_VALUE,\n     Warn,\n     \"pass by reference of a type flagged as `#[rustc_pass_by_value]`\","}, {"sha": "e700a61ce48abdbbbef0654041af13ec9eef7ec8", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91ed6892f7ec60fb76eeaaa024919f293a58d733/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ed6892f7ec60fb76eeaaa024919f293a58d733/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=91ed6892f7ec60fb76eeaaa024919f293a58d733", "patch": "@@ -1070,20 +1070,15 @@ impl CheckAttrVisitor<'_> {\n     /// Warns against some misuses of `#[pass_by_value]`\n     fn check_pass_by_value(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Struct\n-            | Target::Enum\n-            | Target::Union\n-            | Target::Trait\n-            | Target::TraitAlias\n-            | Target::TyAlias => true,\n+            Target::Struct | Target::Enum | Target::TyAlias => true,\n             _ => {\n                 self.tcx\n                     .sess\n                     .struct_span_err(\n                         attr.span,\n-                        \"`pass_by_value` attribute should be applied to a struct, enum, trait or type alias.\",\n+                        \"`pass_by_value` attribute should be applied to a struct, enum or type alias.\",\n                     )\n-                    .span_label(*span, \"is not a struct, enum, trait or type alias\")\n+                    .span_label(*span, \"is not a struct, enum or type alias\")\n                     .emit();\n                 false\n             }"}, {"sha": "bf2b1fbaf45fcafe846596250899060605aa4fd5", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/91ed6892f7ec60fb76eeaaa024919f293a58d733/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ed6892f7ec60fb76eeaaa024919f293a58d733/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs?ref=91ed6892f7ec60fb76eeaaa024919f293a58d733", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Z unstable-options\n \n+#![feature(rustc_attrs)]\n #![feature(rustc_private)]\n #![deny(rustc::pass_by_value)]\n #![allow(unused)]\n@@ -61,4 +62,43 @@ impl Foo {\n     //~^^ ERROR passing `TyCtxt<'_>` by reference\n }\n \n+#[rustc_diagnostic_item = \"CustomEnum\"]\n+#[rustc_pass_by_value]\n+enum CustomEnum {\n+    A,\n+    B,\n+}\n+\n+impl CustomEnum {\n+    fn test(\n+        value: CustomEnum,\n+        reference: &CustomEnum, //~ ERROR passing `CustomEnum` by reference\n+    ) {\n+    }\n+}\n+\n+#[rustc_diagnostic_item = \"CustomStruct\"]\n+#[rustc_pass_by_value]\n+struct CustomStruct {\n+    s: u8,\n+}\n+\n+#[rustc_diagnostic_item = \"CustomAlias\"]\n+#[rustc_pass_by_value]\n+type CustomAlias<'a> = &'a CustomStruct; //~ ERROR passing `CustomStruct` by reference\n+\n+impl CustomStruct {\n+    fn test(\n+        value: CustomStruct,\n+        reference: &CustomStruct, //~ ERROR passing `CustomStruct` by reference\n+    ) {\n+    }\n+\n+    fn test_alias(\n+        value: CustomAlias,\n+        reference: &CustomAlias, //~ ERROR passing `CustomAlias<>` by reference\n+    ) {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "c59c1adf8997d7b086f8c2fabc99994ad823cd3c", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.stderr", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/91ed6892f7ec60fb76eeaaa024919f293a58d733/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91ed6892f7ec60fb76eeaaa024919f293a58d733/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr?ref=91ed6892f7ec60fb76eeaaa024919f293a58d733", "patch": "@@ -1,80 +1,104 @@\n error: passing `Ty<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:13:13\n+  --> $DIR/rustc_pass_by_value.rs:14:13\n    |\n LL |     ty_ref: &Ty<'_>,\n    |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n    |\n note: the lint level is defined here\n-  --> $DIR/rustc_pass_by_value.rs:4:9\n+  --> $DIR/rustc_pass_by_value.rs:5:9\n    |\n LL | #![deny(rustc::pass_by_value)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:15:18\n+  --> $DIR/rustc_pass_by_value.rs:16:18\n    |\n LL |     ty_ctxt_ref: &TyCtxt<'_>,\n    |                  ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:19:28\n+  --> $DIR/rustc_pass_by_value.rs:20:28\n    |\n LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:19:55\n+  --> $DIR/rustc_pass_by_value.rs:20:55\n    |\n LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                                                       ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:26:17\n+  --> $DIR/rustc_pass_by_value.rs:27:17\n    |\n LL |         ty_ref: &Ty<'_>,\n    |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:28:22\n+  --> $DIR/rustc_pass_by_value.rs:29:22\n    |\n LL |         ty_ctxt_ref: &TyCtxt<'_>,\n    |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:31:41\n+  --> $DIR/rustc_pass_by_value.rs:32:41\n    |\n LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n    |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:31:68\n+  --> $DIR/rustc_pass_by_value.rs:32:68\n    |\n LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n    |                                                                    ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:53:17\n+  --> $DIR/rustc_pass_by_value.rs:54:17\n    |\n LL |         ty_ref: &Ty<'_>,\n    |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:55:22\n+  --> $DIR/rustc_pass_by_value.rs:56:22\n    |\n LL |         ty_ctxt_ref: &TyCtxt<'_>,\n    |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:59:38\n+  --> $DIR/rustc_pass_by_value.rs:60:38\n    |\n LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/rustc_pass_by_value.rs:59:65\n+  --> $DIR/rustc_pass_by_value.rs:60:65\n    |\n LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                                                                 ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n-error: aborting due to 12 previous errors\n+error: passing `CustomEnum` by reference\n+  --> $DIR/rustc_pass_by_value.rs:75:20\n+   |\n+LL |         reference: &CustomEnum,\n+   |                    ^^^^^^^^^^^ help: try passing by value: `CustomEnum`\n+\n+error: passing `CustomStruct` by reference\n+  --> $DIR/rustc_pass_by_value.rs:88:24\n+   |\n+LL | type CustomAlias<'a> = &'a CustomStruct;\n+   |                        ^^^^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n+\n+error: passing `CustomStruct` by reference\n+  --> $DIR/rustc_pass_by_value.rs:93:20\n+   |\n+LL |         reference: &CustomStruct,\n+   |                    ^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n+\n+error: passing `CustomAlias<>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:99:20\n+   |\n+LL |         reference: &CustomAlias,\n+   |                    ^^^^^^^^^^^^ help: try passing by value: `CustomAlias<>`\n+\n+error: aborting due to 16 previous errors\n "}]}