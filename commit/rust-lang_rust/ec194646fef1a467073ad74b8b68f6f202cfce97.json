{"sha": "ec194646fef1a467073ad74b8b68f6f202cfce97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTk0NjQ2ZmVmMWE0NjcwNzNhZDc0YjhiNjhmNmYyMDJjZmNlOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-02T15:09:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-02T15:09:41Z"}, "message": "Auto merge of #57243 - dingelish:master, r=sfackler\n\nBound sgx target_env with fortanix as target_vendor\n\nThis PR adds `target_vendor` check, as discussed in issue [57231](https://github.com/rust-lang/rust/issues/57231)\n\nSigned-off-by: Yu Ding <dingelish@gmail.com>", "tree": {"sha": "f83f8bce1f879b7e12e243f6198e7464ec928dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83f8bce1f879b7e12e243f6198e7464ec928dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec194646fef1a467073ad74b8b68f6f202cfce97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec194646fef1a467073ad74b8b68f6f202cfce97", "html_url": "https://github.com/rust-lang/rust/commit/ec194646fef1a467073ad74b8b68f6f202cfce97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec194646fef1a467073ad74b8b68f6f202cfce97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36b960df626cbb8bea74f01243318b73f0bd201", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36b960df626cbb8bea74f01243318b73f0bd201", "html_url": "https://github.com/rust-lang/rust/commit/a36b960df626cbb8bea74f01243318b73f0bd201"}, {"sha": "20e0395e66557a1be055ec3f11c35082bf9a5882", "url": "https://api.github.com/repos/rust-lang/rust/commits/20e0395e66557a1be055ec3f11c35082bf9a5882", "html_url": "https://github.com/rust-lang/rust/commit/20e0395e66557a1be055ec3f11c35082bf9a5882"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "d8dd2e0a1133755bed549e0ea2f75b71c77a1bc0", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=ec194646fef1a467073ad74b8b68f6f202cfce97", "patch": "@@ -12,6 +12,7 @@\n #![panic_runtime]\n #![allow(unused_features)]\n \n+#![feature(cfg_target_vendor)]\n #![feature(core_intrinsics)]\n #![feature(libc)]\n #![feature(nll)]\n@@ -57,7 +58,7 @@ pub unsafe extern fn __rust_start_panic(_payload: usize) -> u32 {\n         core::intrinsics::abort();\n     }\n \n-    #[cfg(target_env=\"sgx\")]\n+    #[cfg(all(target_vendor=\"fortanix\", target_env=\"sgx\"))]\n     unsafe fn abort() -> ! {\n         extern \"C\" { pub fn panic_exit() -> !; }\n         panic_exit();"}, {"sha": "92876f7f2d804a6608a941426183799995ba3a3c", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=ec194646fef1a467073ad74b8b68f6f202cfce97", "patch": "@@ -37,7 +37,7 @@ rustc_lsan = { path = \"../librustc_lsan\" }\n rustc_msan = { path = \"../librustc_msan\" }\n rustc_tsan = { path = \"../librustc_tsan\" }\n \n-[target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), target_env = \"sgx\"))'.dependencies]\n+[target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]"}, {"sha": "d42e39f16e66303be72922a9ee4ee2ad3a9447ea", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ec194646fef1a467073ad74b8b68f6f202cfce97", "patch": "@@ -302,9 +302,9 @@\n #![feature(non_exhaustive)]\n #![feature(alloc_layout_extra)]\n #![feature(maybe_uninit)]\n-#![cfg_attr(target_env = \"sgx\", feature(global_asm, range_contains, slice_index_methods,\n-                                        decl_macro, coerce_unsized, sgx_platform,\n-                                        min_const_unsafe_fn))]\n+#![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n+            feature(global_asm, range_contains, slice_index_methods,\n+                    decl_macro, coerce_unsized, sgx_platform))]\n \n #![default_lib_allocator]\n \n@@ -347,7 +347,7 @@ extern crate backtrace_sys;\n // testing gives test-std access to real-std lang items and globals. See #2912\n #[cfg(test)] extern crate std as realstd;\n \n-#[cfg(target_env = \"sgx\")]\n+#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n #[macro_use]\n #[allow(unused_imports)] // FIXME: without `#[macro_use]`, get error: \u201ccannot\n                          // determine resolution for the macro `usercalls_asm`\u201d"}, {"sha": "f398a2a6225ce598a5c7791965ea81d3a3bcb0f2", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=ec194646fef1a467073ad74b8b68f6f202cfce97", "patch": "@@ -38,7 +38,7 @@ cfg_if! {\n     } else if #[cfg(target_arch = \"wasm32\")] {\n         mod wasm;\n         pub use self::wasm::*;\n-    } else if #[cfg(target_env = \"sgx\")] {\n+    } else if #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] {\n         mod sgx;\n         pub use self::sgx::*;\n     } else {\n@@ -55,7 +55,9 @@ cfg_if! {\n     if #[cfg(any(unix, target_os = \"redox\"))] {\n         // On unix we'll document what's already available\n         pub use self::ext as unix_ext;\n-    } else if #[cfg(any(target_os = \"cloudabi\", target_arch = \"wasm32\", target_env = \"sgx\"))] {\n+    } else if #[cfg(any(target_os = \"cloudabi\",\n+                        target_arch = \"wasm32\",\n+                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         // On CloudABI and wasm right now the module below doesn't compile\n         // (missing things in `libc` which is empty) so just omit everything\n         // with an empty module\n@@ -76,7 +78,9 @@ cfg_if! {\n         // On windows we'll just be documenting what's already available\n         #[allow(missing_docs)]\n         pub use self::ext as windows_ext;\n-    } else if #[cfg(any(target_os = \"cloudabi\", target_arch = \"wasm32\", target_env = \"sgx\"))] {\n+    } else if #[cfg(any(target_os = \"cloudabi\",\n+                        target_arch = \"wasm32\",\n+                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         // On CloudABI and wasm right now the shim below doesn't compile, so\n         // just omit it\n         #[unstable(issue = \"0\", feature = \"std_internals\")]"}, {"sha": "c18b603a6356cb71f3c623fc9b07fdc84ac934f9", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=ec194646fef1a467073ad74b8b68f6f202cfce97", "patch": "@@ -51,7 +51,7 @@ cfg_if! {\n                  target_os = \"l4re\",\n                  target_os = \"redox\",\n                  all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-                 target_env = \"sgx\"))] {\n+                 all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         pub use sys::net;\n     } else {\n         pub mod net;"}, {"sha": "ec96ea067082f404adfb2283171221fdb491dd11", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec194646fef1a467073ad74b8b68f6f202cfce97/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ec194646fef1a467073ad74b8b68f6f202cfce97", "patch": "@@ -23,6 +23,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(asm)]\n+#![feature(cfg_target_vendor)]\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n #![feature(nll)]\n@@ -1015,7 +1016,7 @@ fn use_color(opts: &TestOpts) -> bool {\n #[cfg(any(target_os = \"cloudabi\",\n           target_os = \"redox\",\n           all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-          target_env = \"sgx\"))]\n+          all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n fn stdout_isatty() -> bool {\n     // FIXME: Implement isatty on Redox and SGX\n     false\n@@ -1246,7 +1247,8 @@ fn get_concurrency() -> usize {\n         1\n     }\n \n-    #[cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), target_env = \"sgx\"))]\n+    #[cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+              all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n     fn num_cpus() -> usize {\n         1\n     }"}]}