{"sha": "92cce78d066676f49524c07f72c7cdbf49cc0de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyY2NlNzhkMDY2Njc2ZjQ5NTI0YzA3ZjcyYzdjZGJmNDljYzBkZTg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-02T09:34:36Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-12T08:55:30Z"}, "message": "Move str::escape_* to libcore", "tree": {"sha": "7658b238251d38775df0901b186e6277823a25b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7658b238251d38775df0901b186e6277823a25b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92cce78d066676f49524c07f72c7cdbf49cc0de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92cce78d066676f49524c07f72c7cdbf49cc0de8", "html_url": "https://github.com/rust-lang/rust/commit/92cce78d066676f49524c07f72c7cdbf49cc0de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92cce78d066676f49524c07f72c7cdbf49cc0de8/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55216f82a69092fdb22fb779d3f64d3d756c7ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55216f82a69092fdb22fb779d3f64d3d756c7ed8", "html_url": "https://github.com/rust-lang/rust/commit/55216f82a69092fdb22fb779d3f64d3d756c7ed8"}], "stats": {"total": 334, "additions": 169, "deletions": 165}, "files": [{"sha": "a36804bddff32ec16b048e5ae2e2f1d3534071a6", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=92cce78d066676f49524c07f72c7cdbf49cc0de8", "patch": "@@ -29,13 +29,8 @@\n #![allow(unused_imports)]\n \n use core::borrow::Borrow;\n-use core::fmt::{self, Write};\n-use core::char;\n-use core::iter::{Chain, Flatten, FlatMap};\n use core::str::pattern::{Pattern, Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n-use core::ops::Try;\n-use core::option;\n use core::ptr;\n use core::iter::FusedIterator;\n use core::unicode::conversions;\n@@ -446,40 +441,6 @@ impl str {\n         return s;\n     }\n \n-    /// Escapes each char in `s` with [`char::escape_debug`].\n-    ///\n-    /// Note: only extended grapheme codepoints that begin the string will be\n-    /// escaped.\n-    ///\n-    /// [`char::escape_debug`]: primitive.char.html#method.escape_debug\n-    #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_debug(&self) -> EscapeDebug {\n-        let mut chars = self.chars();\n-        EscapeDebug {\n-            inner: chars.next()\n-                .map(|first| first.escape_debug_ext(true))\n-                .into_iter()\n-                .flatten()\n-                .chain(chars.flat_map(CharEscapeDebugContinue))\n-        }\n-    }\n-\n-    /// Escapes each char in `s` with [`char::escape_default`].\n-    ///\n-    /// [`char::escape_default`]: primitive.char.html#method.escape_default\n-    #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_default(&self) -> EscapeDefault {\n-        EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n-    }\n-\n-    /// Escapes each char in `s` with [`char::escape_unicode`].\n-    ///\n-    /// [`char::escape_unicode`]: primitive.char.html#method.escape_unicode\n-    #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_unicode(&self) -> EscapeUnicode {\n-        EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }\n-    }\n-\n     /// Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n     ///\n     /// [`String`]: string/struct.String.html\n@@ -611,82 +572,3 @@ pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     Box::from_raw(Box::into_raw(v) as *mut str)\n }\n \n-impl_fn_for_zst! {\n-    #[derive(Clone)]\n-    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n-        c.escape_debug_ext(false)\n-    };\n-\n-    #[derive(Clone)]\n-    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n-        c.escape_unicode()\n-    };\n-    #[derive(Clone)]\n-    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n-        c.escape_default()\n-    };\n-}\n-\n-macro_rules! escape_types {\n-    ($(\n-        struct $Name: ident<'a> {\n-            inner: $Inner: ty,\n-        }\n-    )+) => {$(\n-        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-        #[derive(Clone, Debug)]\n-        pub struct $Name<'a> {\n-            inner: $Inner,\n-        }\n-\n-        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-        impl<'a> fmt::Display for $Name<'a> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                self.clone().try_for_each(|c| f.write_char(c))\n-            }\n-        }\n-\n-        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-        impl<'a> Iterator for $Name<'a> {\n-            type Item = char;\n-\n-            #[inline]\n-            fn next(&mut self) -> Option<char> { self.inner.next() }\n-\n-            #[inline]\n-            fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n-\n-            #[inline]\n-            fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n-                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n-            {\n-                self.inner.try_fold(init, fold)\n-            }\n-\n-            #[inline]\n-            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n-                where Fold: FnMut(Acc, Self::Item) -> Acc,\n-            {\n-                self.inner.fold(init, fold)\n-            }\n-        }\n-\n-        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-        impl<'a> FusedIterator for $Name<'a> {}\n-    )+}\n-}\n-\n-escape_types! {\n-    struct EscapeDebug<'a> {\n-        inner: Chain<\n-            Flatten<option::IntoIter<char::EscapeDebug>>,\n-            FlatMap<Chars<'a>, char::EscapeDebug, CharEscapeDebugContinue>\n-        >,\n-    }\n-    struct EscapeUnicode<'a> {\n-        inner: FlatMap<Chars<'a>, char::EscapeUnicode, CharEscapeUnicode>,\n-    }\n-    struct EscapeDefault<'a> {\n-        inner: FlatMap<Chars<'a>, char::EscapeDefault, CharEscapeDefault>,\n-    }\n-}"}, {"sha": "9f0f6fd49fba1e930c41bfc08c4abc2b6d92d31f", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=92cce78d066676f49524c07f72c7cdbf49cc0de8", "patch": "@@ -75,3 +75,47 @@ macro_rules! forward_ref_op_assign {\n         }\n     }\n }\n+\n+/// Create a zero-size type similar to a closure type, but named.\n+#[unstable(feature = \"std_internals\", issue = \"0\")]\n+macro_rules! impl_fn_for_zst {\n+    ($(\n+        $( #[$attr: meta] )*\n+        // FIXME: when libcore is in the 2018 edition, use `?` repetition in\n+        // $( <$( $li : lifetime ),+> )?\n+        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )* Fn =\n+            |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n+            $body: block;\n+    )+) => {\n+        $(\n+            $( #[$attr] )*\n+            struct $Name;\n+\n+            impl $( <$( $lifetime ),+> )* Fn<($( $ArgTy, )*)> for $Name {\n+                #[inline]\n+                extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n+                    $body\n+                }\n+            }\n+\n+            impl $( <$( $lifetime ),+> )* FnMut<($( $ArgTy, )*)> for $Name {\n+                #[inline]\n+                extern \"rust-call\" fn call_mut(\n+                    &mut self,\n+                    ($( $arg, )*): ($( $ArgTy, )*)\n+                ) -> $ReturnTy {\n+                    Fn::call(&*self, ($( $arg, )*))\n+                }\n+            }\n+\n+            impl $( <$( $lifetime ),+> )* FnOnce<($( $ArgTy, )*)> for $Name {\n+                type Output = $ReturnTy;\n+\n+                #[inline]\n+                extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n+                    Fn::call(&self, ($( $arg, )*))\n+                }\n+            }\n+        )+\n+    }\n+}"}, {"sha": "664490c1997eff19c0dcf520ca8b2209da33fe2f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=92cce78d066676f49524c07f72c7cdbf49cc0de8", "patch": "@@ -749,49 +749,3 @@ mod builtin {\n         ($cond:expr, $($arg:tt)+) => ({ /* compiler built-in */ });\n     }\n }\n-\n-/// Create a named zero-size type similar to a closure.\n-#[doc(hidden)]\n-#[macro_export]\n-#[unstable(feature = \"std_internals\", issue = \"0\")]\n-macro_rules! impl_fn_for_zst {\n-    ($(\n-        $( #[$attr: meta] )*\n-        // FIXME: when libcore is in the 2018 edition, use `?` repetition in\n-        // $( <$( $li : lifetime ),+> )?\n-        struct $Name: ident impl$( <$( $lifetime : lifetime ),+> )* Fn =\n-            |$( $arg: ident: $ArgTy: ty ),*| -> $ReturnTy: ty\n-            $body: block;\n-    )+) => {\n-        $(\n-            $( #[$attr] )*\n-            struct $Name;\n-\n-            impl $( <$( $lifetime ),+> )* Fn<($( $ArgTy, )*)> for $Name {\n-                #[inline]\n-                extern \"rust-call\" fn call(&self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n-                    $body\n-                }\n-            }\n-\n-            impl $( <$( $lifetime ),+> )* FnMut<($( $ArgTy, )*)> for $Name {\n-                #[inline]\n-                extern \"rust-call\" fn call_mut(\n-                    &mut self,\n-                    ($( $arg, )*): ($( $ArgTy, )*)\n-                ) -> $ReturnTy {\n-                    Fn::call(&*self, ($( $arg, )*))\n-                }\n-            }\n-\n-            impl $( <$( $lifetime ),+> )* FnOnce<($( $ArgTy, )*)> for $Name {\n-                type Output = $ReturnTy;\n-\n-                #[inline]\n-                extern \"rust-call\" fn call_once(self, ($( $arg, )*): ($( $ArgTy, )*)) -> $ReturnTy {\n-                    Fn::call(&self, ($( $arg, )*))\n-                }\n-            }\n-        )+\n-    }\n-}"}, {"sha": "5a20e32a4191650bb2df7ff58545227ece3acdef", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cce78d066676f49524c07f72c7cdbf49cc0de8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=92cce78d066676f49524c07f72c7cdbf49cc0de8", "patch": "@@ -8,10 +8,13 @@ use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char;\n-use fmt;\n+use fmt::{self, Write};\n use iter::{Map, Cloned, FusedIterator, TrustedLen, TrustedRandomAccess, Filter};\n+use iter::{Flatten, FlatMap, Chain};\n use slice::{self, SliceIndex, Split as SliceSplit};\n use mem;\n+use ops::Try;\n+use option;\n \n pub mod pattern;\n \n@@ -3945,6 +3948,56 @@ impl str {\n         let me = unsafe { self.as_bytes_mut() };\n         me.make_ascii_lowercase()\n     }\n+\n+    /// Escapes each char in `s` with [`char::escape_debug`].\n+    ///\n+    /// Note: only extended grapheme codepoints that begin the string will be\n+    /// escaped.\n+    ///\n+    /// [`char::escape_debug`]: ../std/primitive.char.html#method.escape_debug\n+    #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+    pub fn escape_debug(&self) -> EscapeDebug {\n+        let mut chars = self.chars();\n+        EscapeDebug {\n+            inner: chars.next()\n+                .map(|first| first.escape_debug_ext(true))\n+                .into_iter()\n+                .flatten()\n+                .chain(chars.flat_map(CharEscapeDebugContinue))\n+        }\n+    }\n+\n+    /// Escapes each char in `s` with [`char::escape_default`].\n+    ///\n+    /// [`char::escape_default`]: ../std/primitive.char.html#method.escape_default\n+    #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+    pub fn escape_default(&self) -> EscapeDefault {\n+        EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n+    }\n+\n+    /// Escapes each char in `s` with [`char::escape_unicode`].\n+    ///\n+    /// [`char::escape_unicode`]: ../std/primitive.char.html#method.escape_unicode\n+    #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+    pub fn escape_unicode(&self) -> EscapeUnicode {\n+        EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }\n+    }\n+}\n+\n+impl_fn_for_zst! {\n+    #[derive(Clone)]\n+    struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n+        c.escape_debug_ext(false)\n+    };\n+\n+    #[derive(Clone)]\n+    struct CharEscapeUnicode impl Fn = |c: char| -> char::EscapeUnicode {\n+        c.escape_unicode()\n+    };\n+    #[derive(Clone)]\n+    struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {\n+        c.escape_default()\n+    };\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -4131,3 +4184,74 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EncodeUtf16<'_> {}\n+\n+/// The return type of [`str::escape_debug`].\n+///\n+/// [`str::escape_debug`]: ../../std/primitive.str.html#method.escape_debug\n+#[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+#[derive(Clone, Debug)]\n+pub struct EscapeDebug<'a> {\n+    inner: Chain<\n+        Flatten<option::IntoIter<char::EscapeDebug>>,\n+        FlatMap<Chars<'a>, char::EscapeDebug, CharEscapeDebugContinue>\n+    >,\n+}\n+\n+/// The return type of [`str::escape_default`].\n+///\n+/// [`str::escape_default`]: ../../std/primitive.str.html#method.escape_default\n+#[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+#[derive(Clone, Debug)]\n+pub struct EscapeDefault<'a> {\n+    inner: FlatMap<Chars<'a>, char::EscapeDefault, CharEscapeDefault>,\n+}\n+\n+/// The return type of [`str::escape_unicode`].\n+///\n+/// [`str::escape_unicode`]: ../../std/primitive.str.html#method.escape_unicode\n+#[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+#[derive(Clone, Debug)]\n+pub struct EscapeUnicode<'a> {\n+    inner: FlatMap<Chars<'a>, char::EscapeUnicode, CharEscapeUnicode>,\n+}\n+\n+macro_rules! escape_types_impls {\n+    ($( $Name: ident ),+) => {$(\n+        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+        impl<'a> fmt::Display for $Name<'a> {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                self.clone().try_for_each(|c| f.write_char(c))\n+            }\n+        }\n+\n+        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+        impl<'a> Iterator for $Name<'a> {\n+            type Item = char;\n+\n+            #[inline]\n+            fn next(&mut self) -> Option<char> { self.inner.next() }\n+\n+            #[inline]\n+            fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+\n+            #[inline]\n+            fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n+                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n+            {\n+                self.inner.try_fold(init, fold)\n+            }\n+\n+            #[inline]\n+            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n+                where Fold: FnMut(Acc, Self::Item) -> Acc,\n+            {\n+                self.inner.fold(init, fold)\n+            }\n+        }\n+\n+        #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+        impl<'a> FusedIterator for $Name<'a> {}\n+    )+}\n+}\n+\n+escape_types_impls!(EscapeDebug, EscapeDefault, EscapeUnicode);"}]}