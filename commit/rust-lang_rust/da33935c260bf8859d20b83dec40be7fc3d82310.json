{"sha": "da33935c260bf8859d20b83dec40be7fc3d82310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzM5MzVjMjYwYmY4ODU5ZDIwYjgzZGVjNDBiZTdmYzNkODIzMTA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-22T00:52:54Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T04:50:59Z"}, "message": "rustc_target: treat enum variants like union members, in call ABIs.", "tree": {"sha": "6dd92c533f447c308f481cdd50c7074e94a1f3c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd92c533f447c308f481cdd50c7074e94a1f3c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da33935c260bf8859d20b83dec40be7fc3d82310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da33935c260bf8859d20b83dec40be7fc3d82310", "html_url": "https://github.com/rust-lang/rust/commit/da33935c260bf8859d20b83dec40be7fc3d82310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da33935c260bf8859d20b83dec40be7fc3d82310/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f81593d6c9b731973c0f8e57548948101dda928", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f81593d6c9b731973c0f8e57548948101dda928", "html_url": "https://github.com/rust-lang/rust/commit/8f81593d6c9b731973c0f8e57548948101dda928"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "e3cbf176c350eb6bf678dbf55ffa618ab5ae5302", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da33935c260bf8859d20b83dec40be7fc3d82310/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da33935c260bf8859d20b83dec40be7fc3d82310/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=da33935c260bf8859d20b83dec40be7fc3d82310", "patch": "@@ -308,7 +308,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n \n             Abi::ScalarPair(..) | Abi::Aggregate { .. } => {\n                 // Helper for computing `homogenous_aggregate`, allowing a custom\n-                // starting offset (TODO(eddyb): use this to handle variants).\n+                // starting offset (used below for handling variants).\n                 let from_fields_at =\n                     |layout: Self,\n                      start: Size|\n@@ -354,6 +354,32 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n \n                 let (mut result, mut total) = from_fields_at(*self, Size::ZERO)?;\n \n+                match &self.variants {\n+                    abi::Variants::Single { .. } => {}\n+                    abi::Variants::Multiple { variants, .. } => {\n+                        // Treat enum variants like union members.\n+                        // HACK(eddyb) pretend the `enum` field (discriminant)\n+                        // is at the start of every variant (otherwise the gap\n+                        // at the start of all variants would disqualify them).\n+                        //\n+                        // NB: for all tagged `enum`s (which include all non-C-like\n+                        // `enum`s with defined FFI representation), this will\n+                        // match the homogenous computation on the equivalent\n+                        // `struct { tag; union { variant1; ... } }` and/or\n+                        // `union { struct { tag; variant1; } ... }`\n+                        // (the offsets of variant fields should be identical\n+                        // between the two for either to be a homogenous aggregate).\n+                        let variant_start = total;\n+                        for variant_idx in variants.indices() {\n+                            let (variant_result, variant_total) =\n+                                from_fields_at(self.for_variant(cx, variant_idx), variant_start)?;\n+\n+                            result = result.merge(variant_result)?;\n+                            total = total.max(variant_total);\n+                        }\n+                    }\n+                }\n+\n                 // There needs to be no padding.\n                 if total != self.size {\n                     Err(Heterogeneous)"}, {"sha": "4c192c46786befb34b17df34686d0a069c02bc06", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da33935c260bf8859d20b83dec40be7fc3d82310/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da33935c260bf8859d20b83dec40be7fc3d82310/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=da33935c260bf8859d20b83dec40be7fc3d82310", "patch": "@@ -56,16 +56,24 @@ where\n \n             Abi::Vector { .. } => Class::Sse,\n \n-            Abi::ScalarPair(..) | Abi::Aggregate { .. } => match layout.variants {\n-                abi::Variants::Single { .. } => {\n-                    for i in 0..layout.fields.count() {\n-                        let field_off = off + layout.fields.offset(i);\n-                        classify(cx, layout.field(cx, i), cls, field_off)?;\n+            Abi::ScalarPair(..) | Abi::Aggregate { .. } => {\n+                for i in 0..layout.fields.count() {\n+                    let field_off = off + layout.fields.offset(i);\n+                    classify(cx, layout.field(cx, i), cls, field_off)?;\n+                }\n+\n+                match &layout.variants {\n+                    abi::Variants::Single { .. } => {}\n+                    abi::Variants::Multiple { variants, .. } => {\n+                        // Treat enum variants like union members.\n+                        for variant_idx in variants.indices() {\n+                            classify(cx, layout.for_variant(cx, variant_idx), cls, off)?;\n+                        }\n                     }\n-                    return Ok(());\n                 }\n-                abi::Variants::Multiple { .. } => return Err(Memory),\n-            },\n+\n+                return Ok(());\n+            }\n         };\n \n         // Fill in `cls` for scalars (Int/Sse) and vectors (Sse)."}]}