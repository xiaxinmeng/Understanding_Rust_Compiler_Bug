{"sha": "04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODI0ZjMwMmE5ZDI4ZTY0MzdkMmFkMDc0OWM5ZTNjYzRmMzZiOWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-03T11:31:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-03T11:31:30Z"}, "message": "Rollup merge of #70731 - JohnTitor:follow-up-rustc-middle, r=eddyb\n\nMinor follow-up after renaming librustc(_middle)\n\nFixes #70537\nr? @Centril @eddyb", "tree": {"sha": "68b65d471e17b32ff485deb6729da70e8b24b283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68b65d471e17b32ff485deb6729da70e8b24b283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehx6SCRBK7hj4Ov3rIwAAdHIIADFbG8uUnwj6cBxszGC+oxnE\nDFQSQVm/qdwucwkajxLn8WEK1xQACpNsjGPwxbMRTnHCcsR3MDzjr9KkD3bLA8dQ\nA/gC/TsHKVUM5s/+IUB1lFE6r0mHmqUeP6edu6YSZnRNAoYArjtfWCoPwgQI7kS4\nXUlrCkOZ6aZFoXhaMShkJAHk4Lfphd9Oujwf5ZiNouQbw/QaFSEKs9Hy834T25kF\ncOIFdTDcPxBUIBpFG4tHq1RY+b+20EfKOP4UDUTvi3AvsSnpYbOVsI71H8RU5x+n\nURRWAEX/1nNE5DBktR42fm0mO/noFlV4lNiPn0R34WfiQBcOPFUgDUuRTYnEJMo=\n=Cg6p\n-----END PGP SIGNATURE-----\n", "payload": "tree 68b65d471e17b32ff485deb6729da70e8b24b283\nparent 15be59ddb3086909e6833e3b71d831ef46707875\nparent 99e0d8ed799600aa9dc7ad2e7412035b39d992a1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585913490 +0200\ncommitter GitHub <noreply@github.com> 1585913490 +0200\n\nRollup merge of #70731 - JohnTitor:follow-up-rustc-middle, r=eddyb\n\nMinor follow-up after renaming librustc(_middle)\n\nFixes #70537\nr? @Centril @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "html_url": "https://github.com/rust-lang/rust/commit/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15be59ddb3086909e6833e3b71d831ef46707875", "url": "https://api.github.com/repos/rust-lang/rust/commits/15be59ddb3086909e6833e3b71d831ef46707875", "html_url": "https://github.com/rust-lang/rust/commit/15be59ddb3086909e6833e3b71d831ef46707875"}, {"sha": "99e0d8ed799600aa9dc7ad2e7412035b39d992a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e0d8ed799600aa9dc7ad2e7412035b39d992a1", "html_url": "https://github.com/rust-lang/rust/commit/99e0d8ed799600aa9dc7ad2e7412035b39d992a1"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "6165941eb3dae0e68d8aefe1a90ddb682ccce41c", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -169,7 +169,8 @@ pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n /// Implementations of `Clone` for primitive types.\n ///\n /// Implementations that cannot be described in Rust\n-/// are implemented in `SelectionContext::copy_clone_conditions()` in librustc_middle.\n+/// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n+/// in `rustc_trait_selection`.\n mod impls {\n \n     use super::Clone;"}, {"sha": "35bceaa25c36e8dc8fce428a30d37695aa994331", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -759,7 +759,8 @@ impl<T: ?Sized> Unpin for *mut T {}\n /// Implementations of `Copy` for primitive types.\n ///\n /// Implementations that cannot be described in Rust\n-/// are implemented in `SelectionContext::copy_clone_conditions()` in librustc_middle.\n+/// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n+/// in `rustc_trait_selection`.\n mod copy_impls {\n \n     use super::Copy;"}, {"sha": "cb0fb8795e581edbd5dd7c6acdae66e4758e65f1", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -6,7 +6,8 @@\n //! They can be used as targets of transmutes in unsafe code for manipulating\n //! the raw representations directly.\n //!\n-//! Their definition should always match the ABI defined in `rustc_target::abi`.\n+//! Their definition should always match the ABI defined in\n+//! `rustc_middle::ty::layout`.\n \n /// The representation of a trait object like `&SomeTrait`.\n ///"}, {"sha": "141424fc0c7819aafbdf62aaa738126eefc85c21", "filename": "src/librustc_infer/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -1,5 +1,5 @@\n //! This module provides linkage between libgraphviz traits and\n-//! `rustc_middle::middle::typeck::infer::region_constraints`, generating a\n+//! `rustc_trait_selection::infer::region_constraints`, generating a\n //! rendering of the graph represented by the list of `Constraint`\n //! instances (which make up the edges of the graph), as well as the\n //! origin for each constraint (which are attached to the labels on"}, {"sha": "303f43b0ee210c558de521fdcb547e210461ad18", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -202,7 +202,7 @@ pub(crate) enum Cause {\n ///\n /// For more information about this translation, see\n /// `InferCtxt::process_registered_region_obligations` and\n-/// `InferCtxt::type_must_outlive` in `rustc_middle::infer::outlives`.\n+/// `InferCtxt::type_must_outlive` in `rustc_infer::infer::InferCtxt`.\n #[derive(Clone, Debug)]\n pub struct TypeTest<'tcx> {\n     /// The type `T` that must outlive the region."}, {"sha": "a118fe2db712425fdacf74fffc4301eaad999e7b", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -1053,7 +1053,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     /// regions which are extracted and stored as having occurred at\n     /// `locations`.\n     ///\n-    /// **Any `rustc_middle::infer` operations that might generate region\n+    /// **Any `rustc_infer::infer` operations that might generate region\n     /// constraints should occur within this method so that those\n     /// constraints can be properly localized!**\n     fn fully_perform_op<R>("}, {"sha": "485480d020f5b9f6d3083684143ae25a47caec1c", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -27,8 +27,8 @@ pub struct Context {\n     /// of the innermost fn body. Each fn forms its own disjoint tree\n     /// in the region hierarchy. These fn bodies are themselves\n     /// arranged into a tree. See the \"Modeling closures\" section of\n-    /// the README in `infer::region_constraints` for more\n-    /// details.\n+    /// the README in `rustc_trait_selection::infer::region_constraints`\n+    /// for more details.\n     root_id: Option<hir::ItemLocalId>,\n \n     /// The scope that contains any new variables declared, plus its depth in"}, {"sha": "ad81aa306857b121ac28922b2e4c4387b3ca7990", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -438,7 +438,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n         // If the `-Z force-unstable-if-unmarked` flag is passed then we provide\n         // a parent stability annotation which indicates that this is private\n         // with the `rustc_private` feature. This is intended for use when\n-        // compiling librustc_middle crates themselves so we can leverage crates.io\n+        // compiling `librustc_*` crates themselves so we can leverage crates.io\n         // while maintaining the invariant that all sysroot crates are unstable\n         // by default and are unable to be used.\n         if tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {"}, {"sha": "4347512eda01caf9edec860bcad9a1e3f3a7f9b1", "filename": "src/librustc_session/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -143,8 +143,8 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n     // FIXME: This is a quick hack to make the rustc binary able to locate\n     // Rust libraries in Linux environments where libraries might be installed\n     // to lib64/lib32. This would be more foolproof by basing the sysroot off\n-    // of the directory where librustc_middle is located, rather than where the rustc\n-    // binary is.\n+    // of the directory where `librustc_driver` is located, rather than\n+    // where the rustc binary is.\n     // If --libdir is set during configuration to the value other than\n     // \"lib\" (i.e., non-default), this value is used (see issue #16552).\n "}, {"sha": "b16d513d9239fea2bef065694e5eb0687fc945df", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -195,7 +195,7 @@ pub enum BuiltinLintDiagnostics {\n }\n \n /// Lints that are buffered up early on in the `Session` before the\n-/// `LintLevels` is calculated. These are later passed to `librustc_middle`.\n+/// `LintLevels` is calculated.\n #[derive(PartialEq)]\n pub struct BufferedEarlyLint {\n     /// The span of code that we are linting on.\n@@ -207,7 +207,8 @@ pub struct BufferedEarlyLint {\n     /// The `NodeId` of the AST node that generated the lint.\n     pub node_id: NodeId,\n \n-    /// A lint Id that can be passed to `rustc_session::lint::Lint::from_parser_lint_id`.\n+    /// A lint Id that can be passed to\n+    /// `rustc_lint::early::EarlyContextAndPass::check_id`.\n     pub lint_id: LintId,\n \n     /// Customization of the `DiagnosticBuilder<'_>` for the lint."}, {"sha": "e4ca7d4cde7dc3a97beeec55131cddb348e2f52b", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -1010,7 +1010,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // type.\n                 //\n                 // NOTE: This should be kept in sync with the similar code in\n-                // `rustc_middle::ty::instance::resolve_associated_item()`.\n+                // `rustc_ty::instance::resolve_associated_item()`.\n                 let node_item =\n                     assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)\n                         .map_err(|ErrorReported| ())?;"}, {"sha": "33ecbe72a8c4f361408113500cc762f5b7d2f23b", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -1,5 +1,6 @@\n //! Provider for the `implied_outlives_bounds` query.\n-//! Do not call this query directory. See [`rustc_middle::traits::query::implied_outlives_bounds`].\n+//! Do not call this query directory. See\n+//! [`rustc_trait_selection::traits::query::type_op::implied_outlives_bounds`].\n \n use rustc_hir as hir;\n use rustc_infer::infer::canonical::{self, Canonical};"}, {"sha": "677e373f2f4894c2aab5cd41f0ef91a786d8ac51", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -118,7 +118,7 @@ fn resolve_associated_item<'tcx>(\n             // Since this is a trait item, we need to see if the item is either a trait default item\n             // or a specialization because we can't resolve those unless we can `Reveal::All`.\n             // NOTE: This should be kept in sync with the similar code in\n-            // `rustc_middle::traits::project::assemble_candidates_from_impls()`.\n+            // `rustc_trait_selection::traits::project::assemble_candidates_from_impls()`.\n             let eligible = if leaf_def.is_final() {\n                 // Non-specializable items are always projectable.\n                 true"}, {"sha": "9840cfa43044f2a3a930a3e45c66f912cdf96504", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04824f302a9d28e6437d2ad0749c9e3cc4f36b9e/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=04824f302a9d28e6437d2ad0749c9e3cc4f36b9e", "patch": "@@ -289,10 +289,10 @@ pub fn rust_oom(layout: Layout) -> ! {\n pub mod __default_lib_allocator {\n     use super::{GlobalAlloc, Layout, System};\n     // These magic symbol names are used as a fallback for implementing the\n-    // `__rust_alloc` etc symbols (see `src/liballoc/alloc.rs) when there is\n+    // `__rust_alloc` etc symbols (see `src/liballoc/alloc.rs`) when there is\n     // no `#[global_allocator]` attribute.\n \n-    // for symbol names src/librustc_middle/middle/allocator.rs\n+    // for symbol names src/librustc_ast/expand/allocator.rs\n     // for signatures src/librustc_allocator/lib.rs\n \n     // linkage directives are provided as part of the current compiler allocator"}]}