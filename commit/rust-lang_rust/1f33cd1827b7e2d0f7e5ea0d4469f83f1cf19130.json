{"sha": "1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "node_id": "C_kwDOAAsO6NoAKDFmMzNjZDE4MjdiN2UyZDBmN2U1ZWEwZDQ0NjlmODNmMWNmMTkxMzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T18:41:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T18:41:53Z"}, "message": "Rollup merge of #95407 - xfix:inline-u8-is_utf8_char_boundary, r=scottmcm\n\nInline u8::is_utf8_char_boundary\n\nSince Rust beta, Rust is incapable of inlining this function in the following example function.\n\n```rust\npub fn safe_substr_to(s: &str, mut length: usize) -> &str {\n    loop {\n        if let Some(s) = s.get(..length) {\n            return s;\n        }\n        length -= 1;\n    }\n}\n```\n\nWhen compiled with beta or nightly compiler on Godbolt with `-C opt-level=3` flag it prints the following assembly.\n\n```asm\nexample::safe_substr_to:\n        push    r15\n        push    r14\n        push    r12\n        push    rbx\n        push    rax\n        mov     r14, rdi\n        test    rdx, rdx\n        je      .LBB0_8\n        mov     rbx, rdx\n        mov     r15, rsi\n        mov     r12, qword ptr [rip + core::num::<impl u8>::is_utf8_char_boundary@GOTPCREL]\n        jmp     .LBB0_4\n.LBB0_2:\n        je      .LBB0_9\n.LBB0_3:\n        add     rbx, -1\n        je      .LBB0_8\n.LBB0_4:\n        cmp     rbx, r15\n        jae     .LBB0_2\n        movzx   edi, byte ptr [r14 + rbx]\n        call    r12\n        test    al, al\n        je      .LBB0_3\n        mov     r15, rbx\n        jmp     .LBB0_9\n.LBB0_8:\n        xor     r15d, r15d\n.LBB0_9:\n        mov     rax, r14\n        mov     rdx, r15\n        add     rsp, 8\n        pop     rbx\n        pop     r12\n        pop     r14\n        pop     r15\n        ret\n```\n\n`qword ptr [rip + core::num::<impl u8>::is_utf8_char_boundary@GOTPCREL]` is not inlined. `-C remark=all` outputs the following message:\n\n```\nnote: /rustc/7bccde19767082c7865a12902fa614ed4f8fed73/library/core/src/str/mod.rs:214:25: inline: _ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hace9f12f5ba07a7fE will not be inlined into _ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17hf2587e9a6b8c5e43E because its definition is unavailable\n```\n\nStable compiler outputs more reasonable code:\n\n```asm\nexample::safe_substr_to:\n        mov     rcx, rdx\n        mov     rax, rdi\n        test    rdx, rdx\n        je      .LBB0_9\n        mov     rdx, rsi\n        jmp     .LBB0_4\n.LBB0_2:\n        cmp     rdx, rcx\n        je      .LBB0_7\n.LBB0_3:\n        add     rcx, -1\n        je      .LBB0_9\n.LBB0_4:\n        cmp     rcx, rdx\n        jae     .LBB0_2\n        cmp     byte ptr [rax + rcx], -64\n        jl      .LBB0_3\n        mov     rdx, rcx\n.LBB0_7:\n        ret\n.LBB0_9:\n        xor     edx, edx\n        ret\n```", "tree": {"sha": "9932eb4cd774d38276337184a18432f49db158c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9932eb4cd774d38276337184a18432f49db158c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQgFyCRBK7hj4Ov3rIwAAhgkIAIIqwtzC5ZwaB6fAca7JUEM7\n+17VdAEbpY5QnKiQaSbSuxHYVhsCN3ZPN8PwqFkXssBGtuqctZMVC3QMSoqRcyjd\nMVG9sGV0YM7oKkZew7gYSlwqreUb/z2Y+gdK5nTluv/5keVr1nY2/19m7SV7tQFP\n3VN404gfHqZWUSuEsiHkMjXfFgOMGK1ypJCk/m1D2wahtE3irerO9hgbxrSEujRv\nJtGL/LK3WKYfQPunn/o9sUNToXC+qUBD5VG3pAbWoyiUKJJRfVFkRyYmKF2P/RXk\nx5/X+bnoXYqlYRytERLHc7lXlpA1Cqvmfat+F176bqAUos6A8em0FEzkYIw8NtU=\n=aZpr\n-----END PGP SIGNATURE-----\n", "payload": "tree 9932eb4cd774d38276337184a18432f49db158c8\nparent 4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec\nparent 12c085a05729f6f795cc854032f99cdb9b833946\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648492913 +0200\ncommitter GitHub <noreply@github.com> 1648492913 +0200\n\nRollup merge of #95407 - xfix:inline-u8-is_utf8_char_boundary, r=scottmcm\n\nInline u8::is_utf8_char_boundary\n\nSince Rust beta, Rust is incapable of inlining this function in the following example function.\n\n```rust\npub fn safe_substr_to(s: &str, mut length: usize) -> &str {\n    loop {\n        if let Some(s) = s.get(..length) {\n            return s;\n        }\n        length -= 1;\n    }\n}\n```\n\nWhen compiled with beta or nightly compiler on Godbolt with `-C opt-level=3` flag it prints the following assembly.\n\n```asm\nexample::safe_substr_to:\n        push    r15\n        push    r14\n        push    r12\n        push    rbx\n        push    rax\n        mov     r14, rdi\n        test    rdx, rdx\n        je      .LBB0_8\n        mov     rbx, rdx\n        mov     r15, rsi\n        mov     r12, qword ptr [rip + core::num::<impl u8>::is_utf8_char_boundary@GOTPCREL]\n        jmp     .LBB0_4\n.LBB0_2:\n        je      .LBB0_9\n.LBB0_3:\n        add     rbx, -1\n        je      .LBB0_8\n.LBB0_4:\n        cmp     rbx, r15\n        jae     .LBB0_2\n        movzx   edi, byte ptr [r14 + rbx]\n        call    r12\n        test    al, al\n        je      .LBB0_3\n        mov     r15, rbx\n        jmp     .LBB0_9\n.LBB0_8:\n        xor     r15d, r15d\n.LBB0_9:\n        mov     rax, r14\n        mov     rdx, r15\n        add     rsp, 8\n        pop     rbx\n        pop     r12\n        pop     r14\n        pop     r15\n        ret\n```\n\n`qword ptr [rip + core::num::<impl u8>::is_utf8_char_boundary@GOTPCREL]` is not inlined. `-C remark=all` outputs the following message:\n\n```\nnote: /rustc/7bccde19767082c7865a12902fa614ed4f8fed73/library/core/src/str/mod.rs:214:25: inline: _ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hace9f12f5ba07a7fE will not be inlined into _ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17hf2587e9a6b8c5e43E because its definition is unavailable\n```\n\nStable compiler outputs more reasonable code:\n\n```asm\nexample::safe_substr_to:\n        mov     rcx, rdx\n        mov     rax, rdi\n        test    rdx, rdx\n        je      .LBB0_9\n        mov     rdx, rsi\n        jmp     .LBB0_4\n.LBB0_2:\n        cmp     rdx, rcx\n        je      .LBB0_7\n.LBB0_3:\n        add     rcx, -1\n        je      .LBB0_9\n.LBB0_4:\n        cmp     rcx, rdx\n        jae     .LBB0_2\n        cmp     byte ptr [rax + rcx], -64\n        jl      .LBB0_3\n        mov     rdx, rcx\n.LBB0_7:\n        ret\n.LBB0_9:\n        xor     edx, edx\n        ret\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "html_url": "https://github.com/rust-lang/rust/commit/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "html_url": "https://github.com/rust-lang/rust/commit/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec"}, {"sha": "12c085a05729f6f795cc854032f99cdb9b833946", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c085a05729f6f795cc854032f99cdb9b833946", "html_url": "https://github.com/rust-lang/rust/commit/12c085a05729f6f795cc854032f99cdb9b833946"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "c09f642d9696c0932899b6a030f86ae90e6e912d", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "patch": "@@ -809,6 +809,7 @@ impl u8 {\n         ascii::escape_default(self)\n     }\n \n+    #[inline]\n     pub(crate) const fn is_utf8_char_boundary(self) -> bool {\n         // This is bit magic equivalent to: b < 128 || b >= 192\n         (self as i8) >= -0x40"}]}