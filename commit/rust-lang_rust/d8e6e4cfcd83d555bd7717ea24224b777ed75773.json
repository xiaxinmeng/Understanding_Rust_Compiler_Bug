{"sha": "d8e6e4cfcd83d555bd7717ea24224b777ed75773", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZTZlNGNmY2Q4M2Q1NTViZDc3MTdlYTI0MjI0Yjc3N2VkNzU3NzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-19T15:26:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-19T15:26:41Z"}, "message": "Auto merge of #5342 - flip1995:rollup-77s2pmt, r=flip1995\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #5326 (rustup https://github.com/rust-lang/rust/pull/69838)\n - #5333 (rustup https://github.com/rust-lang/rust/pull/69189)\n - #5336 (rustup https://github.com/rust-lang/rust/pull/69920/)\n - #5341 (Rustup to rust-lang/rust#66131)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: none", "tree": {"sha": "7c40bb5bad800e464e904f612f9019a13b29e797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c40bb5bad800e464e904f612f9019a13b29e797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8e6e4cfcd83d555bd7717ea24224b777ed75773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e6e4cfcd83d555bd7717ea24224b777ed75773", "html_url": "https://github.com/rust-lang/rust/commit/d8e6e4cfcd83d555bd7717ea24224b777ed75773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8e6e4cfcd83d555bd7717ea24224b777ed75773/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c036c4f4a5199a6650929b2da0c9c31e0494d57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c036c4f4a5199a6650929b2da0c9c31e0494d57b", "html_url": "https://github.com/rust-lang/rust/commit/c036c4f4a5199a6650929b2da0c9c31e0494d57b"}, {"sha": "e4fc9316cd25fca678b6a37ec53a21fb6bdc8dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fc9316cd25fca678b6a37ec53a21fb6bdc8dbb", "html_url": "https://github.com/rust-lang/rust/commit/e4fc9316cd25fca678b6a37ec53a21fb6bdc8dbb"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "6675a1029bbc8ad2cf7b86adbc6fc65c672530c2", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -208,8 +208,9 @@ jobs:\n     - name: Extract Binaries\n       run: |\n         DIR=$CARGO_TARGET_DIR/debug\n+        rm $DIR/deps/integration-*.d\n+        mv $DIR/deps/integration-* $DIR/integration\n         find $DIR ! -executable -o -type d ! -path $DIR | xargs rm -rf\n-        mv $DIR/integration-* $DIR/integration\n         rm -rf $CARGO_TARGET_DIR/release\n \n     - name: Upload Binaries"}, {"sha": "697486c1af093a57c25c993611be09757d41c9b0", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -486,7 +486,7 @@ fn is_mutable_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, tys: &mut FxHash\n     if let hir::PatKind::Wild = pat.kind {\n         return false; // ignore `_` patterns\n     }\n-    let def_id = pat.hir_id.owner_def_id();\n+    let def_id = pat.hir_id.owner.to_def_id();\n     if cx.tcx.has_typeck_tables(def_id) {\n         is_mutable_ty(cx, &cx.tcx.typeck_tables_of(def_id).pat_ty(pat), pat.span, tys)\n     } else {\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n             Call(_, args) | MethodCall(_, _, args) => {\n                 let mut tys = FxHashSet::default();\n                 for arg in args {\n-                    let def_id = arg.hir_id.owner_def_id();\n+                    let def_id = arg.hir_id.owner.to_def_id();\n                     if self.cx.tcx.has_typeck_tables(def_id)\n                         && is_mutable_ty(\n                             self.cx,"}, {"sha": "cd034f916cef43b5cd39d1049fdc23cd8f761ffb", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro\n             if !in_macro(item.span) && generics.params.is_empty() {\n-                self.impls.insert(item.hir_id.owner_def_id(), item.span);\n+                self.impls.insert(item.hir_id.owner.to_def_id(), item.span);\n             }\n         }\n     }\n@@ -69,7 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n             // Retrieve all inherent implementations from the crate, grouped by type\n             for impls in cx\n                 .tcx\n-                .crate_inherent_impls(item.hir_id.owner_def_id().krate)\n+                .crate_inherent_impls(item.hir_id.owner.to_def_id().krate)\n                 .inherent_impls\n                 .values()\n             {"}, {"sha": "1c81d78a2b9523e8b36965227bb91707f3c18eb2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -56,9 +56,9 @@ extern crate rustc_trait_selection;\n #[allow(unused_extern_crates)]\n extern crate rustc_typeck;\n \n-use rustc::session::Session;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n+use rustc_session::Session;\n \n /// Macro used to declare a Clippy lint.\n ///"}, {"sha": "475e60736e07f718e4948c7bb4ca22c000b2a596", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -1679,7 +1679,7 @@ fn check_for_mutation(\n         span_low: None,\n         span_high: None,\n     };\n-    let def_id = def_id::DefId::local(body.hir_id.owner);\n+    let def_id = body.hir_id.owner.to_def_id();\n     cx.tcx.infer_ctxt().enter(|infcx| {\n         ExprUseVisitor::new(&mut delegate, &infcx, def_id, cx.param_env, cx.tables).walk_expr(body);\n     });"}, {"sha": "e03f9e36095b379b0f9e26c6da89a06b6188f9b8", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym!(main) {\n-                    let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n+                    let def_id = it.hir_id.owner;\n                     let def_key = cx.tcx.hir().def_key(def_id);\n                     if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n                         return;"}, {"sha": "22b56c28b6bc1aa018c2ae15dccef612f998ba12", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -69,7 +69,7 @@ fn check_missing_inline_attrs(cx: &LateContext<'_, '_>, attrs: &[ast::Attribute]\n }\n \n fn is_executable(cx: &LateContext<'_, '_>) -> bool {\n-    use rustc::session::config::CrateType;\n+    use rustc_session::config::CrateType;\n \n     cx.tcx.sess.crate_types.get().iter().any(|t: &CrateType| match t {\n         CrateType::Executable => true,"}, {"sha": "f69b145fa39fbb5413aa294442453583518d0f47", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -149,9 +149,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                     if_chain! {\n                                         if let Some(ref impling_types) = self.impling_types;\n                                         if let Some(self_def) = cx.tcx.type_of(self_did).ty_adt_def();\n-                                        if self_def.did.is_local();\n+                                        if let Some(self_def_id) = self_def.did.as_local();\n                                         then {\n-                                            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_def.did.to_local());\n+                                            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_def_id);\n                                             if impling_types.contains(&self_id) {\n                                                 return;\n                                             }"}, {"sha": "d532efbec749249c346e98963f2ec34f4ba12b90", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -99,7 +99,7 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block<'_>) {\n             then {\n                 if let ExprKind::Field(ref lhs1, _) = lhs1.kind {\n                     if let ExprKind::Field(ref lhs2, _) = lhs2.kind {\n-                        if lhs1.hir_id.owner_def_id() == lhs2.hir_id.owner_def_id() {\n+                        if lhs1.hir_id.owner == lhs2.hir_id.owner {\n                             return;\n                         }\n                     }"}, {"sha": "194e11ac9bdf92a4c4056c5d2a99f1101875dbfd", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -3,13 +3,13 @@ use std::cmp;\n use crate::utils::{is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use matches::matches;\n-use rustc::session::config::Config as SessionConfig;\n use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::config::Config as SessionConfig;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n use rustc_target::abi::LayoutOf;"}, {"sha": "e27e1b7f2e6cfec6dad60fc65b53aa11c12f7e4b", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -1,6 +1,6 @@\n-use rustc::session::Session;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n+use rustc_session::Session;\n use std::str::FromStr;\n \n /// Deprecation status of attributes known by Clippy."}, {"sha": "4fcaf4264d778fbedabc59254a20cb6bae1e77be", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -3,14 +3,14 @@\n \n use crate::utils::{get_attr, higher};\n use rustc::hir::map::Map;\n-use rustc::session::Session;\n use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "c6a47f05e2482a98cf3b67a69865c02a4be20bd5", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -1,11 +1,11 @@\n //! checks for attributes\n \n use crate::utils::get_attr;\n-use rustc::session::Session;\n use rustc_ast::ast::Attribute;\n use rustc_hir as hir;\n use rustc_hir::print;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "c1c5bcc1dd1bb42eb1030b28cc3fa82f1c42d37e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -297,8 +297,8 @@ pub fn qpath_res(cx: &LateContext<'_, '_>, qpath: &hir::QPath<'_>, id: hir::HirI\n     match qpath {\n         hir::QPath::Resolved(_, path) => path.res,\n         hir::QPath::TypeRelative(..) => {\n-            if cx.tcx.has_typeck_tables(id.owner_def_id()) {\n-                cx.tcx.typeck_tables_of(id.owner_def_id()).qpath_res(qpath, id)\n+            if cx.tcx.has_typeck_tables(id.owner.to_def_id()) {\n+                cx.tcx.typeck_tables_of(id.owner.to_def_id()).qpath_res(qpath, id)\n             } else {\n                 Res::Err\n             }"}, {"sha": "a08251c1a4eb22a8f2f8b2b34e5ac987a9acc78c", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{def_id, Expr, HirId, Path};\n+use rustc_hir::{Expr, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_span::symbol::Ident;\n@@ -17,7 +17,7 @@ pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a,\n         used_mutably: FxHashSet::default(),\n         skip: false,\n     };\n-    let def_id = def_id::DefId::local(expr.hir_id.owner);\n+    let def_id = expr.hir_id.owner.to_def_id();\n     cx.tcx.infer_ctxt().enter(|infcx| {\n         ExprUseVisitor::new(&mut delegate, &infcx, def_id, cx.param_env, cx.tables).walk_expr(expr);\n     });"}, {"sha": "348d13ef41f10b7c9101d29495ac8855e84c6ed3", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -85,7 +85,7 @@ impl LateLintPass<'_, '_> for WildcardImports {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             // don't lint prelude glob imports\n             if !use_path.segments.iter().last().map_or(false, |ps| ps.ident.as_str() == \"prelude\");\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner_def_id());\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner.to_def_id());\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "5ad43ad55a36ab7ae3cb7012ee765dba490764f9", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -357,7 +357,7 @@ impl Write {\n         };\n         let tts = tts.clone();\n \n-        let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, None, false, false, None);\n+        let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, false, None);\n         let mut expr: Option<Expr> = None;\n         if is_write {\n             expr = match parser.parse_expr().map_err(|mut err| err.cancel()) {"}, {"sha": "4be46161e8b74f2cb88978d5761b1c61509ab377", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -35,21 +35,21 @@ LL |     let _: String = rrrstring.to_string();\n    |\n    = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n+error: calling `to_string` on `&&std::borrow::Cow<str>`\n   --> $DIR/inefficient_to_string.rs:29:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n-   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n+   = help: `&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n+error: calling `to_string` on `&&&std::borrow::Cow<str>`\n   --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n    |\n-   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n+   = help: `&&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8582080498f3e4febde7b3ef68d942c6a8eaf3bd", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -1,4 +1,4 @@\n-error: transmute from a type (`&'a T`) to itself\n+error: transmute from a type (`&T`) to itself\n   --> $DIR/transmute.rs:19:20\n    |\n LL |     let _: &'a T = core::intrinsics::transmute(t);"}, {"sha": "61fbea1c164eae8847d100014870f6eb27f96d06", "filename": "tests/ui/transmute_ptr_to_ptr.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -1,3 +1,17 @@\n+error: transmute from a type (`&T`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:8:5\n+   |\n+LL |     std::mem::transmute::<&'a T, &'static T>(t)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n+\n+error: transmute from a type (`&T`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:13:5\n+   |\n+LL |     std::mem::transmute::<&'a T, &'b T>(t)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: transmute from a pointer to a pointer\n   --> $DIR/transmute_ptr_to_ptr.rs:29:29\n    |\n@@ -36,5 +50,17 @@ error: transmute from a reference to a reference\n LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n \n-error: aborting due to 6 previous errors\n+error: transmute from a type (`&LifetimeParam`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:50:47\n+   |\n+LL |     let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`&GenericParam<&LifetimeParam>`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:51:62\n+   |\n+LL |     let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "df0598a58cd3617cdb539261d29416537215802f", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e6e4cfcd83d555bd7717ea24224b777ed75773/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=d8e6e4cfcd83d555bd7717ea24224b777ed75773", "patch": "@@ -42,13 +42,13 @@ error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:32:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:34:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };"}]}