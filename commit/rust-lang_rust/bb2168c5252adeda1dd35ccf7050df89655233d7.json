{"sha": "bb2168c5252adeda1dd35ccf7050df89655233d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjE2OGM1MjUyYWRlZGExZGQzNWNjZjcwNTBkZjg5NjU1MjMzZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-14T08:17:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-14T08:17:19Z"}, "message": "auto merge of #18840 : huonw/rust/tweaks, r=alexcrichton\n\nFix some old papercuts with diagnostics, e.g. tweaking spans, rewording messages. See individual commits.", "tree": {"sha": "92a9000b4fbf28afbb55bd93a337bcc9255ed9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a9000b4fbf28afbb55bd93a337bcc9255ed9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2168c5252adeda1dd35ccf7050df89655233d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2168c5252adeda1dd35ccf7050df89655233d7", "html_url": "https://github.com/rust-lang/rust/commit/bb2168c5252adeda1dd35ccf7050df89655233d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2168c5252adeda1dd35ccf7050df89655233d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f7081fad5889c7b41460103fc8abc98f3285c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7081fad5889c7b41460103fc8abc98f3285c60", "html_url": "https://github.com/rust-lang/rust/commit/6f7081fad5889c7b41460103fc8abc98f3285c60"}, {"sha": "661598cef0ffafb0a5446d4b2b2aea89466102ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/661598cef0ffafb0a5446d4b2b2aea89466102ec", "html_url": "https://github.com/rust-lang/rust/commit/661598cef0ffafb0a5446d4b2b2aea89466102ec"}], "stats": {"total": 161, "additions": 129, "deletions": 32}, "files": [{"sha": "c3d92a19a20560bdcb8ab2ca4f6b02f8b4dbeced", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -307,7 +307,8 @@ impl<'a> Context<'a> {\n             format!(\"found possibly newer version of crate `{}`\",\n                     self.ident)\n         } else if self.rejected_via_triple.len() > 0 {\n-            format!(\"found incorrect triple for crate `{}`\", self.ident)\n+            format!(\"couldn't find crate `{}` with expected target triple {}\",\n+                    self.ident, self.triple)\n         } else {\n             format!(\"can't find crate for `{}`\", self.ident)\n         };\n@@ -318,15 +319,12 @@ impl<'a> Context<'a> {\n         };\n         self.sess.span_err(self.span, message.as_slice());\n \n-        let mismatches = self.rejected_via_triple.iter();\n         if self.rejected_via_triple.len() > 0 {\n-            self.sess.span_note(self.span,\n-                                format!(\"expected triple of {}\",\n-                                        self.triple).as_slice());\n+            let mismatches = self.rejected_via_triple.iter();\n             for (i, &CrateMismatch{ ref path, ref got }) in mismatches.enumerate() {\n                 self.sess.fileline_note(self.span,\n-                    format!(\"crate `{}` path {}{}, triple {}: {}\",\n-                            self.ident, \"#\", i+1, got, path.display()).as_slice());\n+                    format!(\"crate `{}`, path #{}, triple {}: {}\",\n+                            self.ident, i+1, got, path.display()).as_slice());\n             }\n         }\n         if self.rejected_via_hash.len() > 0 {"}, {"sha": "01a66243a965fe22f3f04e7d850172b00b26b50b", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -806,6 +806,13 @@ impl<'a> StringReader<'a> {\n                                     if ascii_only { \"unknown byte escape\" }\n                                     else { \"unknown character escape\" },\n                                     c);\n+                                if e == '\\r' {\n+                                    let sp = codemap::mk_sp(escaped_pos, last_pos);\n+                                    self.span_diagnostic.span_help(\n+                                        sp,\n+                                        \"this is an isolated carriage return; consider checking \\\n+                                         your editor and version control settings.\")\n+                                }\n                                 false\n                             }\n                         }"}, {"sha": "db10dc1bc90ca18501817e64ad59059344ee0444", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -66,6 +66,7 @@ use ast_util::{as_prec, ident_to_path, operator_prec};\n use ast_util;\n use codemap::{Span, BytePos, Spanned, spanned, mk_sp};\n use codemap;\n+use diagnostic;\n use ext::tt::macro_parser;\n use parse;\n use parse::attr::ParserAttr;\n@@ -941,6 +942,11 @@ impl<'a> Parser<'a> {\n     pub fn span_fatal(&mut self, sp: Span, m: &str) -> ! {\n         self.sess.span_diagnostic.span_fatal(sp, m)\n     }\n+    pub fn span_fatal_help(&mut self, sp: Span, m: &str, help: &str) -> ! {\n+        self.span_err(sp, m);\n+        self.span_help(sp, help);\n+        panic!(diagnostic::FatalError);\n+    }\n     pub fn span_note(&mut self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_note(sp, m)\n     }\n@@ -1641,7 +1647,8 @@ impl<'a> Parser<'a> {\n             token::LitByte(i) => LitByte(parse::byte_lit(i.as_str()).val0()),\n             token::LitChar(i) => LitChar(parse::char_lit(i.as_str()).val0()),\n             token::LitInteger(s) => parse::integer_lit(s.as_str(),\n-                                                        &self.sess.span_diagnostic, self.span),\n+                                                        &self.sess.span_diagnostic,\n+                                                       self.last_span),\n             token::LitFloat(s) => parse::float_lit(s.as_str()),\n             token::LitStr(s) => {\n                 LitStr(token::intern_and_get_ident(parse::str_lit(s.as_str()).as_slice()),\n@@ -3710,7 +3717,14 @@ impl<'a> Parser<'a> {\n         maybe_whole!(no_clone self, NtBlock);\n \n         let lo = self.span.lo;\n-        self.expect(&token::OpenDelim(token::Brace));\n+\n+        if !self.eat(&token::OpenDelim(token::Brace)) {\n+            let sp = self.span;\n+            let tok = self.this_token_to_string();\n+            self.span_fatal_help(sp,\n+                                 format!(\"expected `{{`, found `{}`\", tok).as_slice(),\n+                                 \"place this code inside a block\");\n+        }\n \n         return self.parse_block_tail_(lo, DefaultBlock, Vec::new());\n     }\n@@ -4701,9 +4715,10 @@ impl<'a> Parser<'a> {\n             _ => {\n                 let span = self.span;\n                 let token_str = self.this_token_to_string();\n-                self.span_fatal(span,\n-                                format!(\"expected `,`, or `}}`, found `{}`\",\n-                                        token_str).as_slice())\n+                self.span_fatal_help(span,\n+                                     format!(\"expected `,`, or `}}`, found `{}`\",\n+                                             token_str).as_slice(),\n+                                     \"struct fields should be separated by commas\")\n             }\n         }\n         a_var\n@@ -4905,19 +4920,24 @@ impl<'a> Parser<'a> {\n                     (true, false) => (default_path, false),\n                     (false, true) => (secondary_path, true),\n                     (false, false) => {\n-                        self.span_fatal(id_sp,\n-                                        format!(\"file not found for module \\\n-                                                 `{}`\",\n-                                                 mod_name).as_slice());\n+                        self.span_fatal_help(id_sp,\n+                                             format!(\"file not found for module `{}`\",\n+                                                     mod_name).as_slice(),\n+                                             format!(\"name the file either {} or {} inside \\\n+                                                     the directory {}\",\n+                                                     default_path_str,\n+                                                     secondary_path_str,\n+                                                     dir_path.display()).as_slice());\n                     }\n                     (true, true) => {\n-                        self.span_fatal(\n+                        self.span_fatal_help(\n                             id_sp,\n                             format!(\"file for module `{}` found at both {} \\\n                                      and {}\",\n                                     mod_name,\n                                     default_path_str,\n-                                    secondary_path_str).as_slice());\n+                                    secondary_path_str).as_slice(),\n+                            \"delete or rename one of them to remove the ambiguity\");\n                     }\n                 }\n             }\n@@ -5070,9 +5090,10 @@ impl<'a> Parser<'a> {\n                     // skip the ident if there is one\n                     if self.token.is_ident() { self.bump(); }\n \n-                    self.span_err(span,\n-                                  format!(\"expected `;`, found `as`; perhaps you meant \\\n-                                          to enclose the crate name `{}` in a string?\",\n+                    self.span_err(span, \"expected `;`, found `as`\");\n+                    self.span_help(span,\n+                                   format!(\"perhaps you meant to enclose the crate name `{}` in \\\n+                                           a string?\",\n                                           the_ident.as_str()).as_slice());\n                     None\n                 } else {\n@@ -5582,16 +5603,12 @@ impl<'a> Parser<'a> {\n         }\n \n         // FAILURE TO PARSE ITEM\n-        if visibility != Inherited {\n-            let mut s = String::from_str(\"unmatched visibility `\");\n-            if visibility == Public {\n-                s.push_str(\"pub\")\n-            } else {\n-                s.push_str(\"priv\")\n+        match visibility {\n+            Inherited => {}\n+            Public => {\n+                let last_span = self.last_span;\n+                self.span_fatal(last_span, \"unmatched visibility `pub`\");\n             }\n-            s.push('`');\n-            let last_span = self.last_span;\n-            self.span_fatal(last_span, s.as_slice());\n         }\n         return IoviNone(attrs);\n     }\n@@ -5913,4 +5930,3 @@ impl<'a> Parser<'a> {\n         }\n     }\n }\n-"}, {"sha": "825f664bf9f5ff387d032e7a5ff351636ddfec9b", "filename": "src/test/compile-fail/.gitattributes", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2F.gitattributes?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -0,0 +1 @@\n+trailing-carriage-return-in-string.rs -text\n\\ No newline at end of file"}, {"sha": "5cc52f6f6dbff8c052a3f9c6a4a183b24bc59176", "filename": "src/test/compile-fail/extern-crate-as-no-string-help.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Fextern-crate-as-no-string-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Fextern-crate-as-no-string-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-as-no-string-help.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -11,4 +11,5 @@\n // Tests that the proper help is displayed in the error message\n \n extern crate foo as bar;\n-//~^ ERROR expected `;`, found `as`; perhaps you meant to enclose the crate name `foo` in a string?\n+//~^ ERROR expected `;`, found `as`\n+//~^^ HELP perhaps you meant to enclose the crate name `foo` in a string?"}, {"sha": "8a496c934b9c9e7687c16c67518918c996e9bebe", "filename": "src/test/compile-fail/int-literal-too-large-span.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// issue #17123\n+\n+fn main() {\n+    100000000000000000000000000000000 //~ ERROR int literal is too large\n+\n+        ; // the span shouldn't point to this.\n+}"}, {"sha": "bbf2152d5b795c3d0a7524ea3cf2fef6756f346c", "filename": "src/test/compile-fail/mod_file_not_exist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n mod not_a_real_file; //~ ERROR file not found for module `not_a_real_file`\n+//~^ HELP name the file either not_a_real_file.rs or not_a_real_file/mod.rs inside the directory\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);"}, {"sha": "810983332615ed344164de847b9c07d4ea1499b2", "filename": "src/test/compile-fail/trailing-carriage-return-in-string.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Ftrailing-carriage-return-in-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Fcompile-fail%2Ftrailing-carriage-return-in-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrailing-carriage-return-in-string.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-cr\n+// Issue #11669\n+\n+fn main() {\n+    // \\r\\n\n+    let ok = \"This is \\\n+ a test\";\n+    // \\r only\n+    let bad = \"This is \\\r a test\";\n+    //~^ ERROR unknown character escape: \\r\n+    //~^^ HELP this is an isolated carriage return\n+\n+}"}, {"sha": "e79abf822337cb1cb8dabbb9feaa327819b47875", "filename": "src/test/run-make/mismatching-target-triples/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2FMakefile?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+# Issue #10814\n+#\n+# these are no_std to avoid having to have the standard library or any\n+# linkers/assemblers for the relevant platform\n+\n+all:\n+\t$(RUSTC) foo.rs --target=i686-unknown-linux-gnu\n+\t$(RUSTC) bar.rs --target=x86_64-unknown-linux-gnu 2>&1 \\\n+\t\t| grep \"couldn't find crate .foo. with expected target triple x86_64-unknown-linux-gnu\""}, {"sha": "ed15e5d880a9baa5b7e76077dcbe869d890c795e", "filename": "src/test/run-make/mismatching-target-triples/bar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![no_std]\n+extern crate foo;"}, {"sha": "8afa43710dd93cc01a2412d6497d49dbbf580fa8", "filename": "src/test/run-make/mismatching-target-triples/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2168c5252adeda1dd35ccf7050df89655233d7/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs?ref=bb2168c5252adeda1dd35ccf7050df89655233d7", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![no_std]\n+#![crate_type = \"lib\"]"}]}