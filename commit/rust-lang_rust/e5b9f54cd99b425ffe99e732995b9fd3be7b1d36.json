{"sha": "e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjlmNTRjZDk5YjQyNWZmZTk5ZTczMjk5NWI5ZmQzYmU3YjFkMzY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-03T18:51:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-04T02:10:46Z"}, "message": "rustc: collapse relevant DefPathData variants into TypeNs.", "tree": {"sha": "4be6fa3aea5c212a46ea86fc6438a374a7fd5265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be6fa3aea5c212a46ea86fc6438a374a7fd5265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "html_url": "https://github.com/rust-lang/rust/commit/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13fde05b12c28e1ed66bd13fdf1ea392f166b811", "url": "https://api.github.com/repos/rust-lang/rust/commits/13fde05b12c28e1ed66bd13fdf1ea392f166b811", "html_url": "https://github.com/rust-lang/rust/commit/13fde05b12c28e1ed66bd13fdf1ea392f166b811"}], "stats": {"total": 151, "additions": 61, "deletions": 90}, "files": [{"sha": "e3e451a61f578267d2e1157a3cfbaf2f5d1454d1", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -139,14 +139,13 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into, the better\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n-            ItemKind::Trait(..) => DefPathData::Trait(i.ident.as_interned_str()),\n-            ItemKind::TraitAlias(..) => DefPathData::TraitAlias(i.ident.as_interned_str()),\n-            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::Existential(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n-            ItemKind::Ty(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n+            ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n+            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n+            ItemKind::Existential(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n+            ItemKind::Ty(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n             ItemKind::Fn(\n                 ref decl,\n                 ref header,\n@@ -163,7 +162,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body,\n                 )\n             }\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.as_interned_str()),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n                 DefPathData::ValueNs(i.ident.as_interned_str()),\n             ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.as_interned_str()),\n@@ -211,7 +209,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) {\n         let def = self.create_def(v.node.id,\n-                                  DefPathData::EnumVariant(v.node.ident.as_interned_str()),\n+                                  DefPathData::TypeNs(v.node.ident.as_interned_str()),\n                                   REGULAR_SPACE,\n                                   v.span);\n         self.with_parent(def, |this| {\n@@ -239,7 +237,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let name = param.ident.as_interned_str();\n         let def_path_data = match param.kind {\n             GenericParamKind::Lifetime { .. } => DefPathData::LifetimeParam(name),\n-            GenericParamKind::Type { .. } => DefPathData::TypeParam(name),\n+            GenericParamKind::Type { .. } => DefPathData::TypeNs(name),\n             GenericParamKind::Const { .. } => DefPathData::ConstParam(name),\n         };\n         self.create_def(param.id, def_path_data, REGULAR_SPACE, param.ident.span);\n@@ -252,7 +250,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.as_interned_str()),\n             TraitItemKind::Type(..) => {\n-                DefPathData::AssocTypeInTrait(ti.ident.as_interned_str())\n+                DefPathData::TypeNs(ti.ident.as_interned_str())\n             },\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n@@ -279,9 +277,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.as_interned_str()),\n-            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.as_interned_str()),\n+            ImplItemKind::Type(..) |\n             ImplItemKind::Existential(..) => {\n-                DefPathData::AssocExistentialInImpl(ii.ident.as_interned_str())\n+                DefPathData::TypeNs(ii.ident.as_interned_str())\n             },\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };"}, {"sha": "99b3865c82a1a9a49351a953e847c799236b93da", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -337,33 +337,19 @@ pub enum DefPathData {\n     // Different kinds of items and item-like things:\n     /// An impl\n     Impl,\n-    /// A trait\n-    Trait(InternedString),\n-    /// An associated type **declaration** (i.e., in a trait)\n-    AssocTypeInTrait(InternedString),\n-    /// An associated type **value** (i.e., in an impl)\n-    AssocTypeInImpl(InternedString),\n-    /// An existential associated type **value** (i.e., in an impl)\n-    AssocExistentialInImpl(InternedString),\n     /// Something in the type NS\n     TypeNs(InternedString),\n     /// Something in the value NS\n     ValueNs(InternedString),\n-    /// A module declaration\n-    Module(InternedString),\n     /// A macro rule\n     MacroDef(InternedString),\n     /// A closure expression\n     ClosureExpr,\n     // Subportions of items\n-    /// A type (generic) parameter\n-    TypeParam(InternedString),\n     /// A lifetime (generic) parameter\n     LifetimeParam(InternedString),\n     /// A const (generic) parameter\n     ConstParam(InternedString),\n-    /// A variant of a enum\n-    EnumVariant(InternedString),\n     /// A struct field\n     Field(InternedString),\n     /// Implicit ctor for a unit or tuple-like struct or enum variant.\n@@ -376,8 +362,6 @@ pub enum DefPathData {\n     /// a whole crate (as opposed to just one item). GlobalMetaData components\n     /// are only supposed to show up right below the crate root.\n     GlobalMetaData(InternedString),\n-    /// A trait alias.\n-    TraitAlias(InternedString),\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -633,18 +617,10 @@ impl DefPathData {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) |\n-            Trait(name) |\n-            TraitAlias(name) |\n-            AssocTypeInTrait(name) |\n-            AssocTypeInImpl(name) |\n-            AssocExistentialInImpl(name) |\n             ValueNs(name) |\n-            Module(name) |\n             MacroDef(name) |\n-            TypeParam(name) |\n             LifetimeParam(name) |\n             ConstParam(name) |\n-            EnumVariant(name) |\n             Field(name) |\n             GlobalMetaData(name) => Some(name),\n \n@@ -662,18 +638,10 @@ impl DefPathData {\n         use self::DefPathData::*;\n         let s = match *self {\n             TypeNs(name) |\n-            Trait(name) |\n-            TraitAlias(name) |\n-            AssocTypeInTrait(name) |\n-            AssocTypeInImpl(name) |\n-            AssocExistentialInImpl(name) |\n             ValueNs(name) |\n-            Module(name) |\n             MacroDef(name) |\n-            TypeParam(name) |\n             LifetimeParam(name) |\n             ConstParam(name) |\n-            EnumVariant(name) |\n             Field(name) |\n             GlobalMetaData(name) => {\n                 return name"}, {"sha": "c66610c98d5e36296c19b1e03343f451c112cdec", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -355,7 +355,6 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             // the children of the visible parent (as was done when computing\n             // `visible_parent_map`), looking for the specific child we currently have and then\n             // have access to the re-exported name.\n-            DefPathData::Module(ref mut name) |\n             DefPathData::TypeNs(ref mut name) if Some(visible_parent) != actual_parent => {\n                 let reexport = self.tcx().item_children(visible_parent)\n                     .iter()\n@@ -367,7 +366,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             }\n             // Re-exported `extern crate` (#43189).\n             DefPathData::CrateRoot => {\n-                data = DefPathData::Module(\n+                data = DefPathData::TypeNs(\n                     self.tcx().original_crate_name(def_id.krate).as_interned_str(),\n                 );\n             }\n@@ -860,7 +859,6 @@ impl TyCtxt<'_, '_, '_> {\n     fn guess_def_namespace(self, def_id: DefId) -> Namespace {\n         match self.def_key(def_id).disambiguated_data.data {\n             DefPathData::ValueNs(..) |\n-            DefPathData::EnumVariant(..) |\n             DefPathData::Field(..) |\n             DefPathData::AnonConst |\n             DefPathData::ConstParam(..) |"}, {"sha": "4c8ed71a57ca6181298d618847d6fa36e7c27ed2", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -1,6 +1,7 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n use crate::hir;\n+use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n use crate::mir::interpret::{sign_extend, truncate};\n@@ -529,21 +530,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).\n     pub fn is_trait(self, def_id: DefId) -> bool {\n-        if let DefPathData::Trait(_) = self.def_key(def_id).disambiguated_data.data {\n-            true\n-        } else {\n-            false\n-        }\n+        self.def_kind(def_id) == Some(DefKind::Trait)\n     }\n \n     /// Returns `true` if `def_id` refers to a trait alias (i.e., `trait Foo = ...;`),\n     /// and `false` otherwise.\n     pub fn is_trait_alias(self, def_id: DefId) -> bool {\n-        if let DefPathData::TraitAlias(_) = self.def_key(def_id).disambiguated_data.data {\n-            true\n-        } else {\n-            false\n-        }\n+        self.def_kind(def_id) == Some(DefKind::TraitAlias)\n     }\n \n     /// Returns `true` if this `DefId` refers to the implicit constructor for"}, {"sha": "0946dad53203dc7e8ace26ac69b2e09511fc7023", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -586,8 +586,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n+            // FIXME(eddyb) deduplicate these with `encode_enum_variant_ctor`.\n             ctor: variant.ctor_def_id.map(|did| did.index),\n-            ctor_sig: None,\n+            ctor_sig: if variant.ctor_kind == CtorKind::Fn {\n+                variant.ctor_def_id.map(|ctor_def_id| self.lazy(&tcx.fn_sig(ctor_def_id)))\n+            } else {\n+                None\n+            },\n         };\n \n         let enum_id = tcx.hir().as_local_hir_id(enum_did).unwrap();"}, {"sha": "f321e05d68115120b68be82aacbdd743d962b388", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -99,11 +99,11 @@ use std::sync::Arc;\n use syntax::symbol::InternedString;\n use rustc::dep_graph::{WorkProductId, WorkProduct, DepNode, DepConstructor};\n use rustc::hir::{CodegenFnAttrFlags, HirId};\n+use rustc::hir::def::DefKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n-use rustc::hir::map::DefPathData;\n use rustc::mir::mono::{Linkage, Visibility, CodegenUnitNameBuilder};\n use rustc::middle::exported_symbols::SymbolExportLevel;\n-use rustc::ty::{self, TyCtxt, InstanceDef};\n+use rustc::ty::{self, DefIdTree, TyCtxt, InstanceDef};\n use rustc::ty::print::characteristic_def_id_of_type;\n use rustc::ty::query::Providers;\n use rustc::util::common::time;\n@@ -805,33 +805,27 @@ fn compute_codegen_unit_name(tcx: TyCtxt<'_, '_, '_>,\n     let mut cgu_def_id = None;\n     // Walk backwards from the item we want to find the module for:\n     loop {\n-        let def_key = tcx.def_key(current_def_id);\n-\n-        match def_key.disambiguated_data.data {\n-            DefPathData::Module(..) => {\n-                if cgu_def_id.is_none() {\n-                    cgu_def_id = Some(current_def_id);\n-                }\n+        if current_def_id.index == CRATE_DEF_INDEX {\n+            if cgu_def_id.is_none() {\n+                // If we have not found a module yet, take the crate root.\n+                cgu_def_id = Some(DefId {\n+                    krate: def_id.krate,\n+                    index: CRATE_DEF_INDEX,\n+                });\n             }\n-            DefPathData::CrateRoot { .. } => {\n-                if cgu_def_id.is_none() {\n-                    // If we have not found a module yet, take the crate root.\n-                    cgu_def_id = Some(DefId {\n-                        krate: def_id.krate,\n-                        index: CRATE_DEF_INDEX,\n-                    });\n-                }\n-                break\n-            }\n-            _ => {\n-                // If we encounter something that is not a module, throw away\n-                // any module that we've found so far because we now know that\n-                // it is nested within something else.\n-                cgu_def_id = None;\n+            break\n+        } else if tcx.def_kind(current_def_id) == Some(DefKind::Mod) {\n+            if cgu_def_id.is_none() {\n+                cgu_def_id = Some(current_def_id);\n             }\n+        } else {\n+            // If we encounter something that is not a module, throw away\n+            // any module that we've found so far because we now know that\n+            // it is nested within something else.\n+            cgu_def_id = None;\n         }\n \n-        current_def_id.index = def_key.parent.unwrap();\n+        current_def_id = tcx.parent(current_def_id).unwrap();\n     }\n \n     let cgu_def_id = cgu_def_id.unwrap();"}, {"sha": "50c2130263295dba85129f6d45f3757da162349c", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -1,5 +1,6 @@\n mod environment;\n \n+use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n@@ -157,13 +158,27 @@ crate fn program_clauses_for<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n+    // FIXME(eddyb) this should only be using `def_kind`.\n     match tcx.def_key(def_id).disambiguated_data.data {\n-        DefPathData::Trait(_) |\n-        DefPathData::TraitAlias(_) => program_clauses_for_trait(tcx, def_id),\n+        DefPathData::TypeNs(..) => match tcx.def_kind(def_id) {\n+            Some(DefKind::Trait)\n+            | Some(DefKind::TraitAlias) => program_clauses_for_trait(tcx, def_id),\n+            // FIXME(eddyb) deduplicate this `associated_item` call with\n+            // `program_clauses_for_associated_type_{value,def}`.\n+            Some(DefKind::AssociatedTy) => match tcx.associated_item(def_id).container {\n+                ty::AssociatedItemContainer::ImplContainer(_) =>\n+                    program_clauses_for_associated_type_value(tcx, def_id),\n+                ty::AssociatedItemContainer::TraitContainer(_) =>\n+                    program_clauses_for_associated_type_def(tcx, def_id)\n+            },\n+            Some(DefKind::Struct)\n+            | Some(DefKind::Enum)\n+            | Some(DefKind::TyAlias)\n+            | Some(DefKind::Union)\n+            | Some(DefKind::Existential) => program_clauses_for_type_def(tcx, def_id),\n+            _ => List::empty(),\n+        },\n         DefPathData::Impl => program_clauses_for_impl(tcx, def_id),\n-        DefPathData::AssocTypeInImpl(..) => program_clauses_for_associated_type_value(tcx, def_id),\n-        DefPathData::AssocTypeInTrait(..) => program_clauses_for_associated_type_def(tcx, def_id),\n-        DefPathData::TypeNs(..) => program_clauses_for_type_def(tcx, def_id),\n         _ => List::empty(),\n     }\n }"}, {"sha": "7539cbada8b7b5a258d4993fc1ad08fedad63372", "filename": "src/test/ui/symbol-names/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -1,4 +1,4 @@\n-error: symbol-name(_ZN5basic4main17h08bcaf310214ed52E)\n+error: symbol-name(_ZN5basic4main17hd72940ef9669d526E)\n   --> $DIR/basic.rs:3:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "20e48782a3a9e5dfeafeab1c854b5cc9234155e6", "filename": "src/test/ui/symbol-names/impl1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b9f54cd99b425ffe99e732995b9fd3be7b1d36/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr?ref=e5b9f54cd99b425ffe99e732995b9fd3be7b1d36", "patch": "@@ -1,4 +1,4 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17hc487d6ec13fe9124E)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17he53b9bee7600ed8dE)\n   --> $DIR/impl1.rs:8:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -10,7 +10,7 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h38577281258e1527E)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h86c41f0462d901d4E)\n   --> $DIR/impl1.rs:18:9\n    |\n LL |         #[rustc_symbol_name]"}]}