{"sha": "3d77a2b8617f914b1e5503dd93f67a8334693ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzdhMmI4NjE3ZjkxNGIxZTU1MDNkZDkzZjY3YTgzMzQ2OTNjZTA=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-06T19:02:24Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-26T21:53:13Z"}, "message": "Use break api config for enum_variant_names", "tree": {"sha": "142fdf86d714b7a218746b777b6ad0b1c34117c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142fdf86d714b7a218746b777b6ad0b1c34117c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d77a2b8617f914b1e5503dd93f67a8334693ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d77a2b8617f914b1e5503dd93f67a8334693ce0", "html_url": "https://github.com/rust-lang/rust/commit/3d77a2b8617f914b1e5503dd93f67a8334693ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d77a2b8617f914b1e5503dd93f67a8334693ce0/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee79077d8008006f25fb591946bdc17e99c0b91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee79077d8008006f25fb591946bdc17e99c0b91a", "html_url": "https://github.com/rust-lang/rust/commit/ee79077d8008006f25fb591946bdc17e99c0b91a"}], "stats": {"total": 142, "additions": 59, "deletions": 83}, "files": [{"sha": "04f3d77464f98aa764a9549279bbb9d0e63c741c", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d77a2b8617f914b1e5503dd93f67a8334693ce0/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d77a2b8617f914b1e5503dd93f67a8334693ce0/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=3d77a2b8617f914b1e5503dd93f67a8334693ce0", "patch": "@@ -142,6 +142,16 @@ declare_deprecated_lint! {\n     \"this lint has been replaced by `manual_filter_map`, a more specific lint\"\n }\n \n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The `avoid_breaking_exported_api` config option was added, which\n+    /// enables the `enum_variant_names` lint for public items.\n+    /// ```\n+    pub PUB_ENUM_VARIANT_NAMES,\n+    \"set the `avoid_breaking_exported_api` config option to `false` to enable the `enum_variant_names` lint for public items\"\n+}\n+\n declare_deprecated_lint! {\n     /// **What it does:** Nothing. This lint has been deprecated.\n     ///"}, {"sha": "b1a105a51c106974b39710be3b241142cd30991f", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 29, "deletions": 51, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3d77a2b8617f914b1e5503dd93f67a8334693ce0/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d77a2b8617f914b1e5503dd93f67a8334693ce0/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=3d77a2b8617f914b1e5503dd93f67a8334693ce0", "patch": "@@ -3,8 +3,8 @@\n use clippy_utils::camel_case;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n-use rustc_ast::ast::{EnumDef, Item, ItemKind, VisibilityKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n+use rustc_hir::{EnumDef, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -39,36 +39,6 @@ declare_clippy_lint! {\n     \"enums where all variants share a prefix/postfix\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Detects public enumeration variants that are\n-    /// prefixed or suffixed by the same characters.\n-    ///\n-    /// **Why is this bad?** Public enumeration variant names should specify their variant,\n-    /// not repeat the enumeration name.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// pub enum Cake {\n-    ///     BlackForestCake,\n-    ///     HummingbirdCake,\n-    ///     BattenbergCake,\n-    /// }\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// pub enum Cake {\n-    ///     BlackForest,\n-    ///     Hummingbird,\n-    ///     Battenberg,\n-    /// }\n-    /// ```\n-    pub PUB_ENUM_VARIANT_NAMES,\n-    pedantic,\n-    \"public enums where all variants share a prefix/postfix\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Detects type names that are prefixed or suffixed by the\n     /// containing module's name.\n@@ -127,21 +97,22 @@ declare_clippy_lint! {\n pub struct EnumVariantNames {\n     modules: Vec<(Symbol, String)>,\n     threshold: u64,\n+    avoid_breaking_exported_api: bool,\n }\n \n impl EnumVariantNames {\n     #[must_use]\n-    pub fn new(threshold: u64) -> Self {\n+    pub fn new(threshold: u64, avoid_breaking_exported_api: bool) -> Self {\n         Self {\n             modules: Vec::new(),\n             threshold,\n+            avoid_breaking_exported_api,\n         }\n     }\n }\n \n impl_lint_pass!(EnumVariantNames => [\n     ENUM_VARIANT_NAMES,\n-    PUB_ENUM_VARIANT_NAMES,\n     MODULE_NAME_REPETITIONS,\n     MODULE_INCEPTION\n ]);\n@@ -167,33 +138,42 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n }\n \n fn check_variant(\n-    cx: &EarlyContext<'_>,\n+    cx: &LateContext<'_>,\n     threshold: u64,\n-    def: &EnumDef,\n+    def: &EnumDef<'_>,\n     item_name: &str,\n     item_name_chars: usize,\n     span: Span,\n-    lint: &'static Lint,\n ) {\n     if (def.variants.len() as u64) < threshold {\n         return;\n     }\n-    for var in &def.variants {\n+    for var in def.variants {\n         let name = var.ident.name.as_str();\n         if partial_match(item_name, &name) == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n             && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n-            span_lint(cx, lint, var.span, \"variant name starts with the enum's name\");\n+            span_lint(\n+                cx,\n+                ENUM_VARIANT_NAMES,\n+                var.span,\n+                \"variant name starts with the enum's name\",\n+            );\n         }\n         if partial_rmatch(item_name, &name) == item_name_chars {\n-            span_lint(cx, lint, var.span, \"variant name ends with the enum's name\");\n+            span_lint(\n+                cx,\n+                ENUM_VARIANT_NAMES,\n+                var.span,\n+                \"variant name ends with the enum's name\",\n+            );\n         }\n     }\n     let first = &def.variants[0].ident.name.as_str();\n     let mut pre = &first[..camel_case::until(&*first)];\n     let mut post = &first[camel_case::from(&*first)..];\n-    for var in &def.variants {\n+    for var in def.variants {\n         let name = var.ident.name.as_str();\n \n         let pre_match = partial_match(pre, &name);\n@@ -226,7 +206,7 @@ fn check_variant(\n     };\n     span_lint_and_help(\n         cx,\n-        lint,\n+        ENUM_VARIANT_NAMES,\n         span,\n         &format!(\"all variants have the same {}fix: `{}`\", what, value),\n         None,\n@@ -261,14 +241,14 @@ fn to_camel_case(item_name: &str) -> String {\n     s\n }\n \n-impl EarlyLintPass for EnumVariantNames {\n-    fn check_item_post(&mut self, _cx: &EarlyContext<'_>, _item: &Item) {\n+impl LateLintPass<'_> for EnumVariantNames {\n+    fn check_item_post(&mut self, _cx: &LateContext<'_>, _item: &Item<'_>) {\n         let last = self.modules.pop();\n         assert!(last.is_some());\n     }\n \n     #[allow(clippy::similar_names)]\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let item_name = item.ident.name.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n@@ -286,7 +266,7 @@ impl EarlyLintPass for EnumVariantNames {\n                             );\n                         }\n                     }\n-                    if item.vis.kind.is_pub() {\n+                    if item.vis.node.is_pub() {\n                         let matching = partial_match(mod_camel, &item_camel);\n                         let rmatching = partial_rmatch(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n@@ -317,11 +297,9 @@ impl EarlyLintPass for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let lint = match item.vis.kind {\n-                VisibilityKind::Public => PUB_ENUM_VARIANT_NAMES,\n-                _ => ENUM_VARIANT_NAMES,\n-            };\n-            check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span, lint);\n+            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.hir_id())) {\n+                check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n+            }\n         }\n         self.modules.push((item.ident.name, item_camel));\n     }"}, {"sha": "bab389d2c052def14f6bb84717d483a052a8ebbd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d77a2b8617f914b1e5503dd93f67a8334693ce0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d77a2b8617f914b1e5503dd93f67a8334693ce0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3d77a2b8617f914b1e5503dd93f67a8334693ce0", "patch": "@@ -505,6 +505,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::filter_map\",\n         \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n     );\n+    store.register_removed(\n+        \"clippy::pub_enum_variant_names\",\n+        \"set the `avoid_breaking_exported_api` config option to `false` to enable the `enum_variant_names` lint for public items\",\n+    );\n     store.register_removed(\n         \"clippy::wrong_pub_self_convention\",\n         \"set the `avoid_breaking_exported_api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n@@ -622,7 +626,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         enum_variants::ENUM_VARIANT_NAMES,\n         enum_variants::MODULE_INCEPTION,\n         enum_variants::MODULE_NAME_REPETITIONS,\n-        enum_variants::PUB_ENUM_VARIANT_NAMES,\n         eq_op::EQ_OP,\n         eq_op::OP_REF,\n         erasing_op::ERASING_OP,\n@@ -1080,7 +1083,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(doc::MISSING_PANICS_DOC),\n         LintId::of(empty_enum::EMPTY_ENUM),\n         LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n-        LintId::of(enum_variants::PUB_ENUM_VARIANT_NAMES),\n         LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n         LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n         LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n@@ -2015,7 +2017,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n+    store.register_late_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n     store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));"}, {"sha": "083f5143e6e4d75c662975f2f847b63d83ea41bb", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d77a2b8617f914b1e5503dd93f67a8334693ce0/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d77a2b8617f914b1e5503dd93f67a8334693ce0/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=3d77a2b8617f914b1e5503dd93f67a8334693ce0", "patch": "@@ -1,5 +1,4 @@\n-#![feature(non_ascii_idents)]\n-#![warn(clippy::enum_variant_names, clippy::pub_enum_variant_names)]\n+#![warn(clippy::enum_variant_names)]\n #![allow(non_camel_case_types, clippy::upper_case_acronyms)]\n \n enum FakeCallType {\n@@ -97,8 +96,8 @@ pub enum PubSeall {\n     WithOut,\n }\n \n-#[allow(clippy::pub_enum_variant_names)]\n-mod allowed {\n+#[allow(clippy::enum_variant_names)]\n+pub mod allowed {\n     pub enum PubAllowed {\n         SomeThis,\n         SomeThat,"}, {"sha": "447fbb9e1bff3440c35200354408ccdeb9fe60b1", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3d77a2b8617f914b1e5503dd93f67a8334693ce0/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d77a2b8617f914b1e5503dd93f67a8334693ce0/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=3d77a2b8617f914b1e5503dd93f67a8334693ce0", "patch": "@@ -1,31 +1,31 @@\n error: variant name ends with the enum's name\n-  --> $DIR/enum_variants.rs:16:5\n+  --> $DIR/enum_variants.rs:15:5\n    |\n LL |     cFoo,\n    |     ^^^^\n    |\n    = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n \n error: variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:27:5\n+  --> $DIR/enum_variants.rs:26:5\n    |\n LL |     FoodGood,\n    |     ^^^^^^^^\n \n error: variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:28:5\n+  --> $DIR/enum_variants.rs:27:5\n    |\n LL |     FoodMiddle,\n    |     ^^^^^^^^^^\n \n error: variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:29:5\n+  --> $DIR/enum_variants.rs:28:5\n    |\n LL |     FoodBad,\n    |     ^^^^^^^\n \n error: all variants have the same prefix: `Food`\n-  --> $DIR/enum_variants.rs:26:1\n+  --> $DIR/enum_variants.rs:25:1\n    |\n LL | / enum Food {\n LL | |     FoodGood,\n@@ -37,7 +37,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `CallType`\n-  --> $DIR/enum_variants.rs:36:1\n+  --> $DIR/enum_variants.rs:35:1\n    |\n LL | / enum BadCallType {\n LL | |     CallTypeCall,\n@@ -49,7 +49,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `Constant`\n-  --> $DIR/enum_variants.rs:48:1\n+  --> $DIR/enum_variants.rs:47:1\n    |\n LL | / enum Consts {\n LL | |     ConstantInt,\n@@ -61,7 +61,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `With`\n-  --> $DIR/enum_variants.rs:82:1\n+  --> $DIR/enum_variants.rs:81:1\n    |\n LL | / enum Seallll {\n LL | |     WithOutCake,\n@@ -73,7 +73,7 @@ LL | | }\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same prefix: `Prefix`\n-  --> $DIR/enum_variants.rs:88:1\n+  --> $DIR/enum_variants.rs:87:1\n    |\n LL | / enum NonCaps {\n LL | |     Prefix\u7684,\n@@ -84,21 +84,8 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: all variants have the same prefix: `With`\n-  --> $DIR/enum_variants.rs:94:1\n-   |\n-LL | / pub enum PubSeall {\n-LL | |     WithOutCake,\n-LL | |     WithOutTea,\n-LL | |     WithOut,\n-LL | | }\n-   | |_^\n-   |\n-   = note: `-D clippy::pub-enum-variant-names` implied by `-D warnings`\n-   = help: remove the prefixes and use full paths to the variants instead of glob imports\n-\n error: all variants have the same postfix: `IData`\n-  --> $DIR/enum_variants.rs:137:1\n+  --> $DIR/enum_variants.rs:136:1\n    |\n LL | / enum IDataRequest {\n LL | |     PutIData(String),\n@@ -110,7 +97,7 @@ LL | | }\n    = help: remove the postfixes and use full paths to the variants instead of glob imports\n \n error: all variants have the same postfix: `HIData`\n-  --> $DIR/enum_variants.rs:143:1\n+  --> $DIR/enum_variants.rs:142:1\n    |\n LL | / enum HIDataRequest {\n LL | |     PutHIData(String),\n@@ -121,5 +108,5 @@ LL | | }\n    |\n    = help: remove the postfixes and use full paths to the variants instead of glob imports\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}]}