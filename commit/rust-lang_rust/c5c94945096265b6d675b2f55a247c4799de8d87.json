{"sha": "c5c94945096265b6d675b2f55a247c4799de8d87", "node_id": "C_kwDOAAsO6NoAKGM1Yzk0OTQ1MDk2MjY1YjZkNjc1YjJmNTVhMjQ3YzQ3OTlkZThkODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-07T11:18:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-07T11:18:26Z"}, "message": "Auto merge of #91627 - matthiaskrgr:rollup-z3e2peg, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87614 (Recommend fix `count()` -> `len()` on slices)\n - #91065 (Add test for evaluate_obligation: Ok(EvaluatedToOkModuloRegions) ICE)\n - #91312 (Fix AnonConst ICE)\n - #91341 (Add `array::IntoIter::{empty, from_raw_parts}`)\n - #91493 (Remove a dead code path.)\n - #91503 (Tweak \"call this function\" suggestion to have smaller span)\n - #91547 (Suggest try_reserve in try_reserve_exact)\n - #91562 (Pretty print async block without redundant space)\n - #91620 (Update books)\n - #91622 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\n - #91571 (Remove unneeded access to pretty printer's `s` field in favor of deref)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "db23a9bb573dcc1e2d8bdf2801585803b5a7d99c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db23a9bb573dcc1e2d8bdf2801585803b5a7d99c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c94945096265b6d675b2f55a247c4799de8d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c94945096265b6d675b2f55a247c4799de8d87", "html_url": "https://github.com/rust-lang/rust/commit/c5c94945096265b6d675b2f55a247c4799de8d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c94945096265b6d675b2f55a247c4799de8d87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67497a5da33eb3167a33e938920ce04d2b883a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67497a5da33eb3167a33e938920ce04d2b883a5", "html_url": "https://github.com/rust-lang/rust/commit/c67497a5da33eb3167a33e938920ce04d2b883a5"}, {"sha": "099412ee0e3a46592ff952ab9fd78087cc0ed0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/099412ee0e3a46592ff952ab9fd78087cc0ed0b0", "html_url": "https://github.com/rust-lang/rust/commit/099412ee0e3a46592ff952ab9fd78087cc0ed0b0"}], "stats": {"total": 658, "additions": 606, "deletions": 52}, "files": [{"sha": "921ac785e815e72c00313638a793bd1942e6b02c", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -2077,7 +2077,6 @@ impl<'a> State<'a> {\n             ast::ExprKind::Async(capture_clause, _, ref blk) => {\n                 self.word_nbsp(\"async\");\n                 self.print_capture_clause(capture_clause);\n-                self.s.space();\n                 // cbox/ibox in analogy to the `ExprKind::Block` arm above\n                 self.cbox(INDENT_UNIT);\n                 self.ibox(0);"}, {"sha": "d9ab4ae1eda295ed86911ebeed4b6e5555589431", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -461,10 +461,6 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                     if let Some(def_id) = def_id.as_local() {\n                         let opaque_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n                         let parent_def_id = self.infcx.defining_use_anchor;\n-                        let def_scope_default = || {\n-                            let opaque_parent_hir_id = tcx.hir().get_parent_item(opaque_hir_id);\n-                            parent_def_id == tcx.hir().local_def_id(opaque_parent_hir_id)\n-                        };\n                         let (in_definition_scope, origin) = match tcx.hir().expect_item(def_id).kind\n                         {\n                             // Anonymous `impl Trait`\n@@ -481,7 +477,14 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                             }) => {\n                                 (may_define_opaque_type(tcx, parent_def_id, opaque_hir_id), origin)\n                             }\n-                            _ => (def_scope_default(), hir::OpaqueTyOrigin::TyAlias),\n+                            ref itemkind => {\n+                                span_bug!(\n+                                    self.value_span,\n+                                    \"weird opaque type: {:#?}, {:#?}\",\n+                                    ty.kind(),\n+                                    itemkind\n+                                )\n+                            }\n                         };\n                         if in_definition_scope {\n                             let opaque_type_key ="}, {"sha": "49947cc1fa45493d37ba405d77a9ad4196463589", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -499,6 +499,7 @@ symbols! {\n         core_panic_macro,\n         cosf32,\n         cosf64,\n+        count,\n         cr,\n         crate_id,\n         crate_in_paths,"}, {"sha": "ad38885dbd8bdf86c917b28e814faf8872a36b0e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -67,6 +67,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn is_slice_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n+        self.autoderef(span, ty).any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n+    }\n+\n     pub fn report_method_error(\n         &self,\n         mut span: Span,\n@@ -691,7 +695,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let mut restrict_type_params = false;\n                 let mut unsatisfied_bounds = false;\n-                if !unsatisfied_predicates.is_empty() {\n+                if item_name.name == sym::count && self.is_slice_ty(actual, span) {\n+                    let msg = \"consider using `len` instead\";\n+                    if let SelfSource::MethodCall(_expr) = source {\n+                        err.span_suggestion_short(\n+                            span,\n+                            msg,\n+                            String::from(\"len\"),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_label(span, msg);\n+                    }\n+                    if let Some(iterator_trait) = self.tcx.get_diagnostic_item(sym::Iterator) {\n+                        let iterator_trait = self.tcx.def_path_str(iterator_trait);\n+                        err.note(&format!(\"`count` is defined on `{iterator_trait}`, which `{actual}` does not implement\"));\n+                    }\n+                } else if !unsatisfied_predicates.is_empty() {\n                     let def_span = |def_id| {\n                         self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id))\n                     };\n@@ -990,9 +1010,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let mut fallback_span = true;\n-                let msg = \"remove this method call\";\n                 if item_name.name == sym::as_str && actual.peel_refs().is_str() {\n+                    let msg = \"remove this method call\";\n+                    let mut fallback_span = true;\n                     if let SelfSource::MethodCall(expr) = source {\n                         let call_expr =\n                             self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));"}, {"sha": "4956321eb5cd49ed26e897e3ef0839c76b03305b", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -492,7 +492,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> bool /* did we suggest to call a function because of missing parentheses? */ {\n         err.span_label(span, ty.to_string());\n         if let FnDef(def_id, _) = *ty.kind() {\n-            let source_map = self.tcx.sess.source_map();\n             if !self.tcx.has_typeck_results(def_id) {\n                 return false;\n             }\n@@ -517,20 +516,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .lookup_op_method(fn_sig.output(), &[other_ty], Op::Binary(op, is_assign))\n                 .is_ok()\n             {\n-                if let Ok(snippet) = source_map.span_to_snippet(span) {\n-                    let (variable_snippet, applicability) = if !fn_sig.inputs().is_empty() {\n-                        (format!(\"{}( /* arguments */ )\", snippet), Applicability::HasPlaceholders)\n-                    } else {\n-                        (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n-                    };\n+                let (variable_snippet, applicability) = if !fn_sig.inputs().is_empty() {\n+                    (\"( /* arguments */ )\".to_string(), Applicability::HasPlaceholders)\n+                } else {\n+                    (\"()\".to_string(), Applicability::MaybeIncorrect)\n+                };\n \n-                    err.span_suggestion(\n-                        span,\n-                        \"you might have forgotten to call this function\",\n-                        variable_snippet,\n-                        applicability,\n-                    );\n-                }\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n+                    \"you might have forgotten to call this function\",\n+                    variable_snippet,\n+                    applicability,\n+                );\n                 return true;\n             }\n         }"}, {"sha": "b684844744de3c4d49729fb75db2e81ef273d129", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -172,7 +172,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 // We've encountered an `AnonConst` in some path, so we need to\n                 // figure out which generic parameter it corresponds to and return\n                 // the relevant type.\n-                let (arg_index, segment) = path\n+                let filtered = path\n                     .segments\n                     .iter()\n                     .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n@@ -181,10 +181,17 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                             .filter(|arg| arg.is_const())\n                             .position(|arg| arg.id() == hir_id)\n                             .map(|index| (index, seg))\n-                    })\n-                    .unwrap_or_else(|| {\n-                        bug!(\"no arg matching AnonConst in path\");\n                     });\n+                let (arg_index, segment) = match filtered {\n+                    None => {\n+                        tcx.sess.delay_span_bug(\n+                            tcx.def_span(def_id),\n+                            \"no arg matching AnonConst in path\",\n+                        );\n+                        return None;\n+                    }\n+                    Some(inner) => inner,\n+                };\n \n                 // Try to use the segment resolution if it is valid, otherwise we\n                 // default to the path resolution."}, {"sha": "702d97858eb45a43d2e6d3b277ec599a17443bc2", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -720,9 +720,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n     ///\n-    /// [`reserve`]: VecDeque::reserve\n+    /// [`try_reserve`]: VecDeque::try_reserve\n     ///\n     /// # Errors\n     ///"}, {"sha": "b151842458d355789feaac777ac36da32be195b2", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1044,9 +1044,9 @@ impl String {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n     ///\n-    /// [`reserve`]: String::reserve\n+    /// [`try_reserve`]: String::try_reserve\n     ///\n     /// # Errors\n     ///"}, {"sha": "f1b70fa280214364843eebec90683a90585998ff", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -881,9 +881,9 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n     ///\n-    /// [`reserve`]: Vec::reserve\n+    /// [`try_reserve`]: Vec::try_reserve\n     ///\n     /// # Errors\n     ///"}, {"sha": "0dc277785e8250255490c17da4bd146cc8ad3268", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -84,6 +84,135 @@ impl<T, const N: usize> IntoIter<T, N> {\n         IntoIterator::into_iter(array)\n     }\n \n+    /// Creates an iterator over the elements in a partially-initialized buffer.\n+    ///\n+    /// If you have a fully-initialized array, then use [`IntoIterator`].\n+    /// But this is useful for returning partial results from unsafe code.\n+    ///\n+    /// # Safety\n+    ///\n+    /// - The `buffer[initialized]` elements must all be initialized.\n+    /// - The range must be canonical, with `initialized.start <= initialized.end`.\n+    /// - The range must in in-bounds for the buffer, with `initialized.end <= N`.\n+    ///   (Like how indexing `[0][100..100]` fails despite the range being empty.)\n+    ///\n+    /// It's sound to have more elements initialized than mentioned, though that\n+    /// will most likely result in them being leaked.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(array_into_iter_constructors)]\n+    ///\n+    /// #![feature(maybe_uninit_array_assume_init)]\n+    /// #![feature(maybe_uninit_uninit_array)]\n+    /// use std::array::IntoIter;\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// # // Hi!  Thanks for reading the code.  This is restricted to `Copy` because\n+    /// # // otherwise it could leak.  A fully-general version this would need a drop\n+    /// # // guard to handle panics from the iterator, but this works for an example.\n+    /// fn next_chunk<T: Copy, const N: usize>(\n+    ///     it: &mut impl Iterator<Item = T>,\n+    /// ) -> Result<[T; N], IntoIter<T, N>> {\n+    ///     let mut buffer = MaybeUninit::uninit_array();\n+    ///     let mut i = 0;\n+    ///     while i < N {\n+    ///         match it.next() {\n+    ///             Some(x) => {\n+    ///                 buffer[i].write(x);\n+    ///                 i += 1;\n+    ///             }\n+    ///             None => {\n+    ///                 // SAFETY: We've initialized the first `i` items\n+    ///                 unsafe {\n+    ///                     return Err(IntoIter::new_unchecked(buffer, 0..i));\n+    ///                 }\n+    ///             }\n+    ///         }\n+    ///     }\n+    ///\n+    ///     // SAFETY: We've initialized all N items\n+    ///     unsafe { Ok(MaybeUninit::array_assume_init(buffer)) }\n+    /// }\n+    ///\n+    /// let r: [_; 4] = next_chunk(&mut (10..16)).unwrap();\n+    /// assert_eq!(r, [10, 11, 12, 13]);\n+    /// let r: IntoIter<_, 40> = next_chunk(&mut (10..16)).unwrap_err();\n+    /// assert_eq!(r.collect::<Vec<_>>(), vec![10, 11, 12, 13, 14, 15]);\n+    /// ```\n+    #[unstable(feature = \"array_into_iter_constructors\", issue = \"91583\")]\n+    #[rustc_const_unstable(feature = \"const_array_into_iter_constructors\", issue = \"91583\")]\n+    pub const unsafe fn new_unchecked(\n+        buffer: [MaybeUninit<T>; N],\n+        initialized: Range<usize>,\n+    ) -> Self {\n+        Self { data: buffer, alive: initialized }\n+    }\n+\n+    /// Creates an iterator over `T` which returns no elements.\n+    ///\n+    /// If you just need an empty iterator, then use\n+    /// [`iter::empty()`](crate::iter::empty) instead.\n+    /// And if you need an empty array, use `[]`.\n+    ///\n+    /// But this is useful when you need an `array::IntoIter<T, N>` *specifically*.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(array_into_iter_constructors)]\n+    /// use std::array::IntoIter;\n+    ///\n+    /// let empty = IntoIter::<i32, 3>::empty();\n+    /// assert_eq!(empty.len(), 0);\n+    /// assert_eq!(empty.as_slice(), &[]);\n+    ///\n+    /// let empty = IntoIter::<std::convert::Infallible, 200>::empty();\n+    /// assert_eq!(empty.len(), 0);\n+    /// ```\n+    ///\n+    /// `[1, 2].into_iter()` and `[].into_iter()` have different types\n+    /// ```should_fail,edition2021\n+    /// #![feature(array_into_iter_constructors)]\n+    /// use std::array::IntoIter;\n+    ///\n+    /// pub fn get_bytes(b: bool) -> IntoIter<i8, 4> {\n+    ///     if b {\n+    ///         [1, 2, 3, 4].into_iter()\n+    ///     } else {\n+    ///         [].into_iter() // error[E0308]: mismatched types\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// But using this method you can get an empty iterator of appropriate size:\n+    /// ```edition2021\n+    /// #![feature(array_into_iter_constructors)]\n+    /// use std::array::IntoIter;\n+    ///\n+    /// pub fn get_bytes(b: bool) -> IntoIter<i8, 4> {\n+    ///     if b {\n+    ///         [1, 2, 3, 4].into_iter()\n+    ///     } else {\n+    ///         IntoIter::empty()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(get_bytes(true).collect::<Vec<_>>(), vec![1, 2, 3, 4]);\n+    /// assert_eq!(get_bytes(false).collect::<Vec<_>>(), vec![]);\n+    /// ```\n+    #[unstable(feature = \"array_into_iter_constructors\", issue = \"91583\")]\n+    #[rustc_const_unstable(feature = \"const_array_into_iter_constructors\", issue = \"91583\")]\n+    pub const fn empty() -> Self {\n+        let buffer = MaybeUninit::uninit_array();\n+        let initialized = 0..0;\n+\n+        // SAFETY: We're telling it that none of the elements are initialized,\n+        // which is trivially true.  And \u2200N: usize, 0 <= N.\n+        unsafe { Self::new_unchecked(buffer, initialized) }\n+    }\n+\n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet.\n     #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]"}, {"sha": "78383b54c5d1e410b7f02557a0fb6e5852a8869b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -101,6 +101,7 @@\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n+#![feature(const_array_into_iter_constructors)]\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n@@ -138,6 +139,7 @@\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n #![feature(duration_consts_float)]\n+#![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(str_internals)]"}, {"sha": "5f9358faeb1f46e19b8a23a21e79fd7fe150491e", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit a5e0c5b2c5f9054be3b961aea2c7edfeea591de8\n+Subproject commit 5f9358faeb1f46e19b8a23a21e79fd7fe150491e"}, {"sha": "beea0a3cdc3885375342fd010f9ad658e6a5e09a", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit 8e0ec8c77d8b28b86159fdee9d33a758225ecf9c\n+Subproject commit beea0a3cdc3885375342fd010f9ad658e6a5e09a"}, {"sha": "49681ea4a9fa81173dbe9ffed74b4d4a35eae9e3", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit c6b4bf831e9a40aec34f53067d20634839a6778b\n+Subproject commit 49681ea4a9fa81173dbe9ffed74b4d4a35eae9e3"}, {"sha": "954f3d441ad880737a13e241108f791a4d2a38cd", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit c0f222da23568477155991d391c9ce918e381351\n+Subproject commit 954f3d441ad880737a13e241108f791a4d2a38cd"}, {"sha": "1ca6a7bd1d73edc4a3e6c7d6a40f5d4b66c1e517", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit 43f82530210b83cf888282b207ed13d5893da9b2\n+Subproject commit 1ca6a7bd1d73edc4a3e6c7d6a40f5d4b66c1e517"}, {"sha": "a374e7d8bb6b79de45b92295d06b4ac0ef35bc09", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit a2fc9635029c04e692474965a6606f8e286d539a\n+Subproject commit a374e7d8bb6b79de45b92295d06b4ac0ef35bc09"}, {"sha": "1796c9d197c2b372dcf220d0fc19f5cd02d06ce0", "filename": "src/test/incremental/issue-85360-eval-obligation-ice.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,118 @@\n+// revisions:cfail1 cfail2\n+//[cfail1] compile-flags: --crate-type=lib --edition=2021 -Zassert-incr-state=not-loaded\n+//[cfail2] compile-flags: --crate-type=lib --edition=2021 -Zassert-incr-state=loaded\n+// build-pass\n+\n+use core::any::Any;\n+use core::marker::PhantomData;\n+\n+struct DerefWrap<T>(T);\n+\n+impl<T> core::ops::Deref for DerefWrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+struct Storage<T, D> {\n+    phantom: PhantomData<(T, D)>,\n+}\n+\n+type ReadStorage<T> = Storage<T, DerefWrap<MaskedStorage<T>>>;\n+\n+pub trait Component {\n+    type Storage;\n+}\n+\n+struct VecStorage;\n+\n+struct Pos;\n+\n+impl Component for Pos {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp<T> {\n+    type Storage = VecStorage;\n+}\n+struct ReadData {\n+    pos_interpdata: ReadStorage<GenericComp<Pos>>,\n+}\n+\n+trait System {\n+    type SystemData;\n+\n+    fn run(data: Self::SystemData, any: Box<dyn Any>);\n+}\n+\n+struct Sys;\n+\n+impl System for Sys {\n+    type SystemData = (ReadData, ReadStorage<Pos>);\n+\n+    fn run((data, pos): Self::SystemData, any: Box<dyn Any>) {\n+        <ReadStorage<GenericComp<Pos>> as SystemData>::setup(any);\n+\n+        ParJoin::par_join((&pos, &data.pos_interpdata));\n+    }\n+}\n+\n+trait ParJoin {\n+    fn par_join(self)\n+    where\n+        Self: Sized,\n+    {\n+    }\n+}\n+\n+impl<'a, T, D> ParJoin for &'a Storage<T, D>\n+where\n+    T: Component,\n+    D: core::ops::Deref<Target = MaskedStorage<T>>,\n+    T::Storage: Sync,\n+{\n+}\n+\n+impl<A, B> ParJoin for (A, B)\n+where\n+    A: ParJoin,\n+    B: ParJoin,\n+{\n+}\n+\n+pub trait SystemData {\n+    fn setup(any: Box<dyn Any>);\n+}\n+\n+impl<T: 'static> SystemData for ReadStorage<T>\n+where\n+    T: Component,\n+{\n+    fn setup(any: Box<dyn Any>) {\n+        let storage: &MaskedStorage<T> = any.downcast_ref().unwrap();\n+\n+        <dyn Any as CastFrom<MaskedStorage<T>>>::cast(&storage);\n+    }\n+}\n+\n+pub struct MaskedStorage<T: Component> {\n+    _inner: T::Storage,\n+}\n+\n+pub unsafe trait CastFrom<T> {\n+    fn cast(t: &T) -> &Self;\n+}\n+\n+unsafe impl<T> CastFrom<T> for dyn Any\n+where\n+    T: Any + 'static,\n+{\n+    fn cast(t: &T) -> &Self {\n+        t\n+    }\n+}"}, {"sha": "573e79bffd7ef579e4fedd0343aa840c76e6161f", "filename": "src/test/pretty/async.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fpretty%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fpretty%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasync.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,9 @@\n+// pp-exact\n+// pretty-compare-only\n+// edition:2021\n+\n+async fn f() {\n+    let first = async { 1 };\n+    let second = async move { 2 };\n+    join(first, second).await\n+}"}, {"sha": "a8165ae6c32693f24034b9528af8f17f9eb06152", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -3,5 +3,5 @@\n // edition:2018\n // pp-exact\n \n-fn main() { let _a = (async  { }); }\n+fn main() { let _a = (async { }); }\n //~^ WARNING unnecessary parentheses around assigned value"}, {"sha": "e3ed0b53356d42f9dccaeaac9170df5bf3a827c9", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1,14 +1,14 @@\n warning: unnecessary parentheses around assigned value\n   --> $DIR/issue-54752-async-block.rs:6:22\n    |\n-LL | fn main() { let _a = (async  { }); }\n-   |                      ^          ^\n+LL | fn main() { let _a = (async { }); }\n+   |                      ^         ^\n    |\n    = note: `#[warn(unused_parens)]` on by default\n help: remove these parentheses\n    |\n-LL - fn main() { let _a = (async  { }); }\n-LL + fn main() { let _a = async  { }; }\n+LL - fn main() { let _a = (async { }); }\n+LL + fn main() { let _a = async { }; }\n    | \n \n warning: 1 warning emitted"}, {"sha": "096440225b99907c57b1f73d35043c2198a12e3e", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -9,11 +9,11 @@ LL |     let x = f == g;\n help: you might have forgotten to call this function\n    |\n LL |     let x = f() == g;\n-   |             ~~~\n+   |              ++\n help: you might have forgotten to call this function\n    |\n LL |     let x = f == g();\n-   |                  ~~~\n+   |                   ++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-compare-mismatch.rs:4:18"}, {"sha": "47fd9fdb65472970bebb8eca51ef764796b9f287", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -5,7 +5,11 @@ LL |     foo > 12;\n    |     --- ^ -- {integer}\n    |     |\n    |     fn() -> i32 {foo}\n-   |     help: you might have forgotten to call this function: `foo()`\n+   |\n+help: you might have forgotten to call this function\n+   |\n+LL |     foo() > 12;\n+   |        ++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:14:11\n@@ -23,7 +27,11 @@ LL |     bar > 13;\n    |     --- ^ -- {integer}\n    |     |\n    |     fn(i64) -> i64 {bar}\n-   |     help: you might have forgotten to call this function: `bar( /* arguments */ )`\n+   |\n+help: you might have forgotten to call this function\n+   |\n+LL |     bar( /* arguments */ ) > 13;\n+   |        +++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:18:11\n@@ -45,11 +53,11 @@ LL |     foo > foo;\n help: you might have forgotten to call this function\n    |\n LL |     foo() > foo;\n-   |     ~~~~~\n+   |        ++\n help: you might have forgotten to call this function\n    |\n LL |     foo > foo();\n-   |           ~~~~~\n+   |              ++\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n   --> $DIR/issue-59488.rs:25:9"}, {"sha": "4c11f3544948e694becba10e8d13aa8c0c0699f1", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -6,9 +6,12 @@ LL |     assert_eq!(a, 0);\n    |     |\n    |     fn() -> i32 {a}\n    |     {integer}\n-   |     help: you might have forgotten to call this function: `*left_val()`\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: you might have forgotten to call this function\n+   |\n+LL |                 if !(*left_val() == *right_val) {\n+   |                               ++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-70724-add_type_neq_err_label-unwrap.rs:6:5"}, {"sha": "f11a789efbc5b16aa6d52d7d44b16f93395fdf6b", "filename": "src/test/ui/suggestions/count2len.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let slice = [1,2,3,4];\n+    let vec = vec![1,2,3,4];\n+\n+    slice.count(); //~ERROR: E0599\n+    vec.count(); //~ERROR: E0599\n+    vec.as_slice().count(); //~ERROR: E0599\n+}"}, {"sha": "6394a84dd47e17a62fe5e24cc98e34d6f11ca4a3", "filename": "src/test/ui/suggestions/count2len.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,36 @@\n+error[E0599]: no method named `count` found for array `[{integer}; 4]` in the current scope\n+  --> $DIR/count2len.rs:5:11\n+   |\n+LL |     slice.count();\n+   |           ^^^^^\n+   |           |\n+   |           method cannot be called on `[{integer}; 4]` due to unsatisfied trait bounds\n+   |           help: consider using `len` instead\n+   |\n+   = note: `count` is defined on `Iterator`, which `[{integer}; 4]` does not implement\n+\n+error[E0599]: no method named `count` found for struct `Vec<{integer}>` in the current scope\n+  --> $DIR/count2len.rs:6:9\n+   |\n+LL |     vec.count();\n+   |         ^^^^^\n+   |         |\n+   |         method cannot be called on `Vec<{integer}>` due to unsatisfied trait bounds\n+   |         help: consider using `len` instead\n+   |\n+   = note: `count` is defined on `Iterator`, which `Vec<{integer}>` does not implement\n+\n+error[E0599]: no method named `count` found for reference `&[{integer}]` in the current scope\n+  --> $DIR/count2len.rs:7:20\n+   |\n+LL |     vec.as_slice().count();\n+   |                    ^^^^^\n+   |                    |\n+   |                    method cannot be called on `&[{integer}]` due to unsatisfied trait bounds\n+   |                    help: consider using `len` instead\n+   |\n+   = note: `count` is defined on `Iterator`, which `&[{integer}]` does not implement\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "19131684a481b66df9fbd83745ca054e0aa8ce12", "filename": "src/test/ui/traits/issue-85360-eval-obligation-ice.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,143 @@\n+// compile-flags: --edition=2021\n+\n+#![feature(rustc_attrs)]\n+\n+use core::any::Any;\n+use core::marker::PhantomData;\n+\n+fn main() {\n+    test::<MaskedStorage<GenericComp<Pos>>>(make());\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+\n+    test::<MaskedStorage<GenericComp2<Pos>>>(make());\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn test<T: Sized>(_: T) {}\n+\n+fn make<T>() -> T {\n+    todo!()\n+}\n+\n+struct DerefWrap<T>(T);\n+\n+impl<T> core::ops::Deref for DerefWrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+struct Storage<T, D> {\n+    phantom: PhantomData<(T, D)>,\n+}\n+\n+type ReadStorage<T> = Storage<T, DerefWrap<MaskedStorage<T>>>;\n+\n+pub trait Component {\n+    type Storage;\n+}\n+\n+struct VecStorage;\n+\n+struct Pos;\n+\n+impl Component for Pos {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp<T> {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp2<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp2<T> where for<'a> &'a bool: 'a {\n+    type Storage = VecStorage;\n+}\n+\n+struct ReadData {\n+    pos_interpdata: ReadStorage<GenericComp<Pos>>,\n+}\n+\n+trait System {\n+    type SystemData;\n+\n+    fn run(data: Self::SystemData, any: Box<dyn Any>);\n+}\n+\n+struct Sys;\n+\n+impl System for Sys {\n+    type SystemData = (ReadData, ReadStorage<Pos>);\n+\n+    fn run((data, pos): Self::SystemData, any: Box<dyn Any>) {\n+        <ReadStorage<GenericComp<Pos>> as SystemData>::setup(any);\n+\n+        ParJoin::par_join((&pos, &data.pos_interpdata));\n+    }\n+}\n+\n+trait ParJoin {\n+    fn par_join(self)\n+    where\n+        Self: Sized,\n+    {\n+    }\n+}\n+\n+impl<'a, T, D> ParJoin for &'a Storage<T, D>\n+where\n+    T: Component,\n+    D: core::ops::Deref<Target = MaskedStorage<T>>,\n+    T::Storage: Sync,\n+{\n+}\n+\n+impl<A, B> ParJoin for (A, B)\n+where\n+    A: ParJoin,\n+    B: ParJoin,\n+{\n+}\n+\n+pub trait SystemData {\n+    fn setup(any: Box<dyn Any>);\n+}\n+\n+impl<T: 'static> SystemData for ReadStorage<T>\n+where\n+    T: Component,\n+{\n+    fn setup(any: Box<dyn Any>) {\n+        let storage: &MaskedStorage<T> = any.downcast_ref().unwrap();\n+\n+        <dyn Any as CastFrom<MaskedStorage<T>>>::cast(&storage);\n+    }\n+}\n+\n+pub struct MaskedStorage<T: Component> {\n+    _inner: T::Storage,\n+}\n+\n+pub unsafe trait CastFrom<T> {\n+    fn cast(t: &T) -> &Self;\n+}\n+\n+unsafe impl<T> CastFrom<T> for dyn Any\n+where\n+    T: Any + 'static,\n+{\n+    fn cast(t: &T) -> &Self {\n+        t\n+    }\n+}"}, {"sha": "ebf977dd6805140376614a89a62a690030e795ac", "filename": "src/test/ui/traits/issue-85360-eval-obligation-ice.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,38 @@\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:9:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |         - predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:9:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |            ----- predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:13:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp2<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |         - predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:13:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp2<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |            ----- predicate\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f5a37e9cb86f8c89d723ea5b8f2b324758923d1a", "filename": "src/test/ui/typeck/issue-91267.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.rs?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    0: u8<e<5>=e>\n+    //~^ ERROR: cannot find type `e` in this scope [E0412]\n+    //~| ERROR: associated type bindings are not allowed here [E0229]\n+    //~| ERROR: mismatched types [E0308]\n+}"}, {"sha": "aac00b9b6a941eaae5e6ad9ff8f74c684cb2784c", "filename": "src/test/ui/typeck/issue-91267.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c94945096265b6d675b2f55a247c4799de8d87/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.stderr?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -0,0 +1,27 @@\n+error[E0412]: cannot find type `e` in this scope\n+  --> $DIR/issue-91267.rs:2:16\n+   |\n+LL |     0: u8<e<5>=e>\n+   |                ^\n+   |                |\n+   |                not found in this scope\n+   |                help: maybe you meant to write an assignment here: `let e`\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-91267.rs:2:11\n+   |\n+LL |     0: u8<e<5>=e>\n+   |           ^^^^^^ associated type not allowed here\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-91267.rs:2:5\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+LL |     0: u8<e<5>=e>\n+   |     ^^^^^^^^^^^^^ expected `()`, found `u8`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0229, E0308, E0412.\n+For more information about an error, try `rustc --explain E0229`."}, {"sha": "7d6fcbc0be2151bfa85ec146545b42d8be2fb28c", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=c5c94945096265b6d675b2f55a247c4799de8d87", "patch": "@@ -1 +1 @@\n-Subproject commit d9b2291f546abc77d24499339a72a89127464b95\n+Subproject commit 7d6fcbc0be2151bfa85ec146545b42d8be2fb28c"}]}