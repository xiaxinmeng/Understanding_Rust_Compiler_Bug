{"sha": "9086c8c6632b4e2aa480311152f91b2ed2f1288c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODZjOGM2NjMyYjRlMmFhNDgwMzExMTUyZjkxYjJlZDJmMTI4OGM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-07-15T10:14:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-07-15T10:14:51Z"}, "message": "Add --memory-usage to analysis-bench", "tree": {"sha": "15ca6236d447a89795700cef00bba80e0da19066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15ca6236d447a89795700cef00bba80e0da19066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9086c8c6632b4e2aa480311152f91b2ed2f1288c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9086c8c6632b4e2aa480311152f91b2ed2f1288c", "html_url": "https://github.com/rust-lang/rust/commit/9086c8c6632b4e2aa480311152f91b2ed2f1288c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9086c8c6632b4e2aa480311152f91b2ed2f1288c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77425c21c797bab5ae66c418751d689691229651", "url": "https://api.github.com/repos/rust-lang/rust/commits/77425c21c797bab5ae66c418751d689691229651", "html_url": "https://github.com/rust-lang/rust/commit/77425c21c797bab5ae66c418751d689691229651"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "3210416ee175376d33a69d6c81d98339b9a66d20", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=9086c8c6632b4e2aa480311152f91b2ed2f1288c", "patch": "@@ -35,6 +35,7 @@ pub(crate) enum Command {\n         with_proc_macro: bool,\n     },\n     Bench {\n+        memory_usage: bool,\n         path: PathBuf,\n         what: BenchWhat,\n         load_output_dirs: bool,\n@@ -165,7 +166,7 @@ USAGE:\n FLAGS:\n     -o, --only              Only analyze items matching this path\n     -h, --help              Prints help information\n-        --memory-usage      Collect memory usage statistics (requires `--feature jemalloc`)\n+        --memory-usage      Collect memory usage statistics (requires `--features jemalloc`)\n         --randomize         Randomize order in which crates, modules, and items are processed\n         --parallel          Run type inference in parallel\n         --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n@@ -220,6 +221,7 @@ USAGE:\n \n FLAGS:\n     -h, --help          Prints help information\n+    --memory-usage      Collect memory usage statistics (requires `--features jemalloc`)\n     --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n     --with-proc-macro   Use ra-proc-macro-srv for proc-macro expanding\n     -v, --verbose\n@@ -251,9 +253,10 @@ ARGS:\n                         \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n                     ),\n                 };\n+                let memory_usage = matches.contains(\"--memory-usage\");\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n                 let with_proc_macro = matches.contains(\"--with-proc-macro\");\n-                Command::Bench { path, what, load_output_dirs, with_proc_macro }\n+                Command::Bench { memory_usage, path, what, load_output_dirs, with_proc_macro }\n             }\n             \"diagnostics\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {"}, {"sha": "408892eabad449c04f5c4d352d6dae8476ba9db9", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=9086c8c6632b4e2aa480311152f91b2ed2f1288c", "patch": "@@ -49,11 +49,12 @@ fn main() -> Result<()> {\n             load_output_dirs,\n             with_proc_macro,\n         )?,\n-        args::Command::Bench { path, what, load_output_dirs, with_proc_macro } => {\n+        args::Command::Bench { memory_usage, path, what, load_output_dirs, with_proc_macro } => {\n             cli::analysis_bench(\n                 args.verbosity,\n                 path.as_ref(),\n                 what,\n+                memory_usage,\n                 load_output_dirs,\n                 with_proc_macro,\n             )?"}, {"sha": "9299879b758a8fd234cbfc8b89381010e4c25bf6", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=9086c8c6632b4e2aa480311152f91b2ed2f1288c", "patch": "@@ -10,7 +10,10 @@ use ra_db::{\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosition, LineCol};\n use vfs::AbsPathBuf;\n \n-use crate::cli::{load_cargo::load_cargo, Verbosity};\n+use crate::{\n+    cli::{load_cargo::load_cargo, Verbosity},\n+    print_memory_usage,\n+};\n \n pub enum BenchWhat {\n     Highlight { path: AbsPathBuf },\n@@ -44,6 +47,7 @@ pub fn analysis_bench(\n     verbosity: Verbosity,\n     path: &Path,\n     what: BenchWhat,\n+    memory_usage: bool,\n     load_output_dirs: bool,\n     with_proc_macro: bool,\n ) -> Result<()> {\n@@ -99,6 +103,11 @@ pub fn analysis_bench(\n             }\n         }\n     }\n+\n+    if memory_usage {\n+        print_memory_usage(host, vfs);\n+    }\n+\n     Ok(())\n }\n "}, {"sha": "ddb3db6c3fe29736372fca367e7453365ab05f63", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=9086c8c6632b4e2aa480311152f91b2ed2f1288c", "patch": "@@ -21,7 +21,10 @@ use ra_db::{\n use ra_syntax::AstNode;\n use stdx::format_to;\n \n-use crate::cli::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity};\n+use crate::{\n+    cli::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity},\n+    print_memory_usage,\n+};\n \n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);\n@@ -43,7 +46,7 @@ pub fn analysis_stats(\n     with_proc_macro: bool,\n ) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (mut host, vfs) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n+    let (host, vfs) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     println!(\"Database loaded {:?}\", db_load_time.elapsed());\n     let analysis_time = Instant::now();\n@@ -273,22 +276,7 @@ pub fn analysis_stats(\n     println!(\"Total: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n \n     if memory_usage {\n-        let mut mem = host.per_query_memory_usage();\n-\n-        let before = ra_prof::memory_usage();\n-        drop(vfs);\n-        let vfs = before.allocated - ra_prof::memory_usage().allocated;\n-        mem.push((\"VFS\".into(), vfs));\n-\n-        let before = ra_prof::memory_usage();\n-        drop(host);\n-        mem.push((\"Unaccounted\".into(), before.allocated - ra_prof::memory_usage().allocated));\n-\n-        mem.push((\"Remaining\".into(), ra_prof::memory_usage().allocated));\n-\n-        for (name, bytes) in mem {\n-            println!(\"{:>8} {}\", bytes, name)\n-        }\n+        print_memory_usage(host, vfs);\n     }\n \n     Ok(())"}, {"sha": "369830973a6113fa3762d8b1853d65870c35d3bb", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9086c8c6632b4e2aa480311152f91b2ed2f1288c/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=9086c8c6632b4e2aa480311152f91b2ed2f1288c", "patch": "@@ -40,7 +40,9 @@ use serde::de::DeserializeOwned;\n \n pub type Result<T, E = Box<dyn std::error::Error + Send + Sync>> = std::result::Result<T, E>;\n pub use crate::{caps::server_capabilities, main_loop::main_loop};\n+use ra_ide::AnalysisHost;\n use std::fmt;\n+use vfs::Vfs;\n \n pub fn from_json<T: DeserializeOwned>(what: &'static str, json: serde_json::Value) -> Result<T> {\n     let res = T::deserialize(&json)\n@@ -67,3 +69,22 @@ impl fmt::Display for LspError {\n }\n \n impl std::error::Error for LspError {}\n+\n+fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n+    let mut mem = host.per_query_memory_usage();\n+\n+    let before = ra_prof::memory_usage();\n+    drop(vfs);\n+    let vfs = before.allocated - ra_prof::memory_usage().allocated;\n+    mem.push((\"VFS\".into(), vfs));\n+\n+    let before = ra_prof::memory_usage();\n+    drop(host);\n+    mem.push((\"Unaccounted\".into(), before.allocated - ra_prof::memory_usage().allocated));\n+\n+    mem.push((\"Remaining\".into(), ra_prof::memory_usage().allocated));\n+\n+    for (name, bytes) in mem {\n+        println!(\"{:>8} {}\", bytes, name);\n+    }\n+}"}]}