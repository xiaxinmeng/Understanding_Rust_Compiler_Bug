{"sha": "1e8350387c57582561874aa2a5aeb4d5370cfc04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlODM1MDM4N2M1NzU4MjU2MTg3NGFhMmE1YWViNGQ1MzcwY2ZjMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-07T11:48:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-07T11:48:35Z"}, "message": "Auto merge of #30317 - jseyfried:refactor_type_folder, r=nikomatsakis\n\n`TypeFoldable`s can currently be visited inefficiently with an identity folder that is run only for its side effects. This creates a more efficient visitor for `TypeFoldable`s and uses it to implement `RegionEscape` and `HasProjectionTypes`, fixing cleanup issue #20298.\nThis is a pure refactoring.", "tree": {"sha": "416ca869d7ea442df32d87dd4b55f89a856e6b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/416ca869d7ea442df32d87dd4b55f89a856e6b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e8350387c57582561874aa2a5aeb4d5370cfc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8350387c57582561874aa2a5aeb4d5370cfc04", "html_url": "https://github.com/rust-lang/rust/commit/1e8350387c57582561874aa2a5aeb4d5370cfc04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e8350387c57582561874aa2a5aeb4d5370cfc04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2edb1d9b96bdf78ee06b73d37f1382a30bc67882", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edb1d9b96bdf78ee06b73d37f1382a30bc67882", "html_url": "https://github.com/rust-lang/rust/commit/2edb1d9b96bdf78ee06b73d37f1382a30bc67882"}, {"sha": "632756396375ea0e74463ed9e239662d887ed3c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/632756396375ea0e74463ed9e239662d887ed3c1", "html_url": "https://github.com/rust-lang/rust/commit/632756396375ea0e74463ed9e239662d887ed3c1"}], "stats": {"total": 1562, "additions": 689, "deletions": 873}, "files": [{"sha": "d25084bbdffb5e5794cc0840f0c4cf9d7b4750e9", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -14,7 +14,7 @@ use middle::def_id::DefId;\n use middle::infer::{InferCtxt, GenericKind};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n+use middle::ty::{self, ToPredicate, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use syntax::ast;\n@@ -404,7 +404,7 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n     }\n \n     fn fully_normalize<T>(&self, value: &T) -> Result<T,ErrorReported>\n-        where T : TypeFoldable<'tcx> + ty::HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         let value =\n             traits::fully_normalize(self.infcx,"}, {"sha": "faf1bdb0ce504b87358bfac3203a718bbdbc8baa", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -318,7 +318,7 @@ impl<'cx, 'tcx> ty::fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n                 }\n             }\n             _ => {\n-                ty::fold::super_fold_ty(self, t)\n+                t.super_fold_with(self)\n             }\n         }\n     }"}, {"sha": "f390d85a28d66370e29dc8c124ea59b23bb4416d", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -82,7 +82,7 @@ use middle::def_id::DefId;\n use middle::infer::{self, TypeOrigin};\n use middle::region;\n use middle::subst;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::{Region, ReFree};\n use middle::ty::error::TypeError;\n \n@@ -250,7 +250,7 @@ pub trait ErrorReporting<'tcx> {\n \n     fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String>;\n \n-    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + HasTypeFlags>(\n+    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: &ty::error::ExpectedFound<T>)\n         -> Option<String>;\n@@ -575,7 +575,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + HasTypeFlags>(\n+    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: &ty::error::ExpectedFound<T>)\n         -> Option<String>"}, {"sha": "76dd62383f1b1f1c65c1de47961185094967b2ec", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -30,8 +30,7 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty::fold::TypeFoldable;\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::fold::TypeFolder;\n use std::collections::hash_map::{self, Entry};\n \n@@ -169,7 +168,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::TyTuple(..) |\n             ty::TyProjection(..) |\n             ty::TyParam(..) => {\n-                ty::fold::super_fold_ty(self, t)\n+                t.super_fold_with(self)\n             }\n         }\n     }"}, {"sha": "e8f542db933cbf0c309aac04961aa8641cfd36ec", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -14,9 +14,8 @@\n use super::{CombinedSnapshot, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::CombineFields;\n \n-use middle::ty::{self, Binder};\n+use middle::ty::{self, Binder, TypeFoldable};\n use middle::ty::error::TypeError;\n-use middle::ty::fold::TypeFoldable;\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use syntax::codemap::Span;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n@@ -557,7 +556,7 @@ pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                              snapshot: &CombinedSnapshot,\n                              value: &T)\n                              -> T\n-    where T : TypeFoldable<'tcx> + ty::HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     debug_assert!(leak_check(infcx, &skol_map, snapshot).is_ok());\n "}, {"sha": "922d4c251bb64a08402b9df9d026826205a72419", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -30,7 +30,7 @@ use middle::subst::Subst;\n use middle::traits;\n use middle::ty::adjustment;\n use middle::ty::{TyVid, IntVid, FloatVid};\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty};\n use middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n@@ -512,7 +512,7 @@ pub struct CombinedSnapshot {\n }\n \n pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     debug!(\"normalize_associated_type(t={:?})\", value);\n \n@@ -546,7 +546,7 @@ pub fn drain_fulfillment_cx_or_panic<'a,'tcx,T>(span: Span,\n                                                 fulfill_cx: &mut traits::FulfillmentContext<'tcx>,\n                                                 result: &T)\n                                                 -> T\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     match drain_fulfillment_cx(infcx, fulfill_cx, result) {\n         Ok(v) => v,\n@@ -570,7 +570,7 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                                        fulfill_cx: &mut traits::FulfillmentContext<'tcx>,\n                                        result: &T)\n                                        -> Result<T,Vec<traits::FulfillmentError<'tcx>>>\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     debug!(\"drain_fulfillment_cx(result={:?})\",\n            result);\n@@ -929,7 +929,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                          snapshot: &CombinedSnapshot,\n                          value: &T)\n                          -> T\n-        where T : TypeFoldable<'tcx> + HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         /*! See `higher_ranked::plug_leaks` */\n \n@@ -1201,7 +1201,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T\n-        where T: TypeFoldable<'tcx> + HasTypeFlags\n+        where T: TypeFoldable<'tcx>\n     {\n         /*!\n          * Where possible, replaces type/int/float variables in"}, {"sha": "c68d0a9fa5683948af04daabf08ac25d21e361e6", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use super::{InferCtxt, FixupError, FixupResult};\n-use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty::fold::{TypeFoldable};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n ///////////////////////////////////////////////////////////////////////////\n // OPPORTUNISTIC TYPE RESOLVER\n@@ -40,7 +39,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t0 = self.infcx.shallow_resolve(t);\n-            ty::fold::super_fold_ty(self, t0)\n+            t0.super_fold_with(self)\n         }\n     }\n }\n@@ -68,7 +67,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t0 = self.infcx.shallow_resolve(t);\n-            ty::fold::super_fold_ty(self, t0)\n+            t0.super_fold_with(self)\n         }\n     }\n \n@@ -133,7 +132,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n                                 t));\n                 }\n                 _ => {\n-                    ty::fold::super_fold_ty(self, t)\n+                    t.super_fold_with(self)\n                 }\n             }\n         }"}, {"sha": "69b952ca1f3fcf3ae42320e8d02d3c294cdb46cf", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -13,7 +13,7 @@ use middle::def::DefFn;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n use middle::ty::{TransmuteRestriction, ctxt, TyBareFn};\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n "}, {"sha": "61f7b2db4c43233769af36b0b8b5b185a49297b8", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -14,7 +14,7 @@ pub use self::ParamSpace::*;\n pub use self::RegionSubsts::*;\n \n use middle::cstore;\n-use middle::ty::{self, Ty, HasTypeFlags, RegionEscape};\n+use middle::ty::{self, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use serialize::{Encodable, Encoder, Decodable, Decoder};\n@@ -674,7 +674,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 self.ty_for_param(p, t)\n             }\n             _ => {\n-                ty::fold::super_fold_ty(self, t)\n+                t.super_fold_with(self)\n             }\n         };\n "}, {"sha": "883c5e7bb40eb2713f37ea37fb5afc5d3761e9fe", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -26,9 +26,8 @@ use super::{\n use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n-use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef, Ty};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TypeFoldable};\n use middle::ty::fast_reject;\n-use middle::ty::fold::TypeFoldable;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n use std::cmp;\n@@ -185,7 +184,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n pub fn report_overflow_error<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n                                           obligation: &Obligation<'tcx, T>)\n                                           -> !\n-    where T: fmt::Display + TypeFoldable<'tcx> + HasTypeFlags\n+    where T: fmt::Display + TypeFoldable<'tcx>\n {\n     let predicate =\n         infcx.resolve_type_vars_if_possible(&obligation.predicate);"}, {"sha": "4f8f6b846a6f419d272526b7ea20719c608fa8a5", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::infer::InferCtxt;\n-use middle::ty::{self, RegionEscape, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use syntax::ast;\n use util::common::ErrorReported;"}, {"sha": "6cf841cc47756557c91f67111dd2bf8686d212dc", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -19,9 +19,8 @@ use dep_graph::DepNode;\n use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use middle::subst;\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::fast_reject;\n-use middle::ty::fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n \n use std::rc::Rc;\n@@ -470,7 +469,7 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                                   cause: ObligationCause<'tcx>,\n                                   value: &T)\n                                   -> Result<T, Vec<FulfillmentError<'tcx>>>\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     debug!(\"normalize_param_env(value={:?})\", value);\n "}, {"sha": "0e4a42bd15134050e47e9b39bcffe3b9e272e96e", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -23,7 +23,7 @@ use super::elaborate_predicates;\n use middle::def_id::DefId;\n use middle::subst::{self, SelfSpace, TypeSpace};\n use middle::traits;\n-use middle::ty::{self, HasTypeFlags, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPolyTraitRef, Ty, TypeFoldable};\n use std::rc::Rc;\n use syntax::ast;\n "}, {"sha": "ad3524661d326a4b8abb0023c97dae8292510073", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -23,7 +23,7 @@ use super::util;\n \n use middle::infer::{self, TypeOrigin};\n use middle::subst::Subst;\n-use middle::ty::{self, ToPredicate, RegionEscape, HasTypeFlags, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n use syntax::parse::token;\n use util::common::FN_OUTPUT_NAME;\n@@ -202,7 +202,7 @@ pub fn normalize<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,\n                                cause: ObligationCause<'tcx>,\n                                value: &T)\n                                -> Normalized<'tcx, T>\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     normalize_with_depth(selcx, cause, 0, value)\n }\n@@ -213,7 +213,7 @@ pub fn normalize_with_depth<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tc\n                                           depth: usize,\n                                           value: &T)\n                                           -> Normalized<'tcx, T>\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     let mut normalizer = AssociatedTypeNormalizer::new(selcx, cause, depth);\n     let result = normalizer.fold(value);\n@@ -245,7 +245,7 @@ impl<'a,'b,'tcx> AssociatedTypeNormalizer<'a,'b,'tcx> {\n         }\n     }\n \n-    fn fold<T:TypeFoldable<'tcx> + HasTypeFlags>(&mut self, value: &T) -> T {\n+    fn fold<T:TypeFoldable<'tcx>>(&mut self, value: &T) -> T {\n         let value = self.selcx.infcx().resolve_type_vars_if_possible(value);\n \n         if !value.has_projection_types() {\n@@ -273,7 +273,7 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n         // normalize it when we instantiate those bound regions (which\n         // should occur eventually).\n \n-        let ty = ty::fold::super_fold_ty(self, ty);\n+        let ty = ty.super_fold_with(self);\n         match ty.sty {\n             ty::TyProjection(ref data) if !data.has_escaping_regions() => { // (*)\n "}, {"sha": "f544f8ce362341f1c4ef71f3e5f088a1b0b8348f", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -39,9 +39,8 @@ use middle::def_id::DefId;\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener, TypeOrigin};\n use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, ToPredicate, RegionEscape, ToPolyTraitRef, Ty, HasTypeFlags};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TypeFoldable};\n use middle::ty::fast_reject;\n-use middle::ty::fold::TypeFoldable;\n use middle::ty::relate::TypeRelation;\n \n use std::cell::RefCell;\n@@ -965,7 +964,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match *candidate {\n             Ok(Some(_)) | Err(_) => true,\n             Ok(None) => {\n-                cache_fresh_trait_pred.0.input_types().has_infer_types()\n+                cache_fresh_trait_pred.0.trait_ref.substs.types.has_infer_types()\n             }\n         }\n     }"}, {"sha": "453420e2a54dccfcd2e20a062fd4dcdcf48160bc", "filename": "src/librustc/middle/traits/structural_impls.rs", "status": "modified", "additions": 49, "deletions": 75, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fstructural_impls.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -10,8 +10,7 @@\n \n use middle::traits;\n use middle::traits::project::Normalized;\n-use middle::ty::{HasTypeFlags, TypeFlags, RegionEscape};\n-use middle::ty::fold::{TypeFoldable, TypeFolder};\n+use middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use std::fmt;\n \n@@ -131,130 +130,89 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n     }\n }\n \n-impl<'tcx, P: RegionEscape> RegionEscape for traits::Obligation<'tcx,P> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.predicate.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx, T: HasTypeFlags> HasTypeFlags for traits::Obligation<'tcx, T> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.predicate.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx, T: HasTypeFlags> HasTypeFlags for Normalized<'tcx, T> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.value.has_type_flags(flags) ||\n-            self.obligations.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx, N: HasTypeFlags> HasTypeFlags for traits::VtableImplData<'tcx, N> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.substs.has_type_flags(flags) ||\n-            self.nested.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx, N: HasTypeFlags> HasTypeFlags for traits::VtableClosureData<'tcx, N> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.substs.has_type_flags(flags) ||\n-            self.nested.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx, N: HasTypeFlags> HasTypeFlags for traits::VtableDefaultImplData<N> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.nested.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx, N: HasTypeFlags> HasTypeFlags for traits::VtableBuiltinData<N> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.nested.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for traits::VtableObjectData<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.upcast_trait_ref.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx, N: HasTypeFlags> HasTypeFlags for traits::Vtable<'tcx, N> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        match *self {\n-            traits::VtableImpl(ref v) => v.has_type_flags(flags),\n-            traits::VtableDefaultImpl(ref t) => t.has_type_flags(flags),\n-            traits::VtableClosure(ref d) => d.has_type_flags(flags),\n-            traits::VtableFnPointer(ref d) => d.has_type_flags(flags),\n-            traits::VtableParam(ref n) => n.has_type_flags(flags),\n-            traits::VtableBuiltin(ref d) => d.has_type_flags(flags),\n-            traits::VtableObject(ref d) => d.has_type_flags(flags)\n-        }\n-    }\n-}\n-\n impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O>\n {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Obligation<'tcx, O> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::Obligation {\n             cause: self.cause.clone(),\n             recursion_depth: self.recursion_depth,\n             predicate: self.predicate.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.predicate.visit_with(visitor)\n+    }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableImplData<'tcx, N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableImplData<'tcx, N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableImplData {\n             impl_def_id: self.impl_def_id,\n             substs: self.substs.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.substs.visit_with(visitor) || self.nested.visit_with(visitor)\n+    }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableClosureData<'tcx, N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableClosureData<'tcx, N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableClosureData {\n             closure_def_id: self.closure_def_id,\n             substs: self.substs.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.substs.visit_with(visitor) || self.nested.visit_with(visitor)\n+    }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultImplData<N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableDefaultImplData<N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableDefaultImplData {\n             trait_def_id: self.trait_def_id,\n             nested: self.nested.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.nested.visit_with(visitor)\n+    }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableBuiltinData<N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableBuiltinData {\n             nested: self.nested.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.nested.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableObjectData<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableObjectData {\n             upcast_trait_ref: self.upcast_trait_ref.fold_with(folder),\n             vtable_base: self.vtable_base\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.upcast_trait_ref.visit_with(visitor)\n+    }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<'tcx, N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n             traits::VtableDefaultImpl(ref t) => traits::VtableDefaultImpl(t.fold_with(folder)),\n@@ -269,13 +227,29 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n             traits::VtableObject(ref d) => traits::VtableObject(d.fold_with(folder)),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match *self {\n+            traits::VtableImpl(ref v) => v.visit_with(visitor),\n+            traits::VtableDefaultImpl(ref t) => t.visit_with(visitor),\n+            traits::VtableClosure(ref d) => d.visit_with(visitor),\n+            traits::VtableFnPointer(ref d) => d.visit_with(visitor),\n+            traits::VtableParam(ref n) => n.visit_with(visitor),\n+            traits::VtableBuiltin(ref d) => d.visit_with(visitor),\n+            traits::VtableObject(ref d) => d.visit_with(visitor),\n+        }\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Normalized<'tcx, T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Normalized<'tcx, T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Normalized {\n             value: self.value.fold_with(folder),\n             obligations: self.obligations.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.value.visit_with(visitor) || self.obligations.visit_with(visitor)\n+    }\n }"}, {"sha": "6cab0baa55325ecebc5adf11ced7205208edbabb", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -11,8 +11,7 @@\n pub use self::AutoAdjustment::*;\n pub use self::AutoRef::*;\n \n-use middle::ty::{self, Ty, TypeAndMut};\n-use middle::ty::HasTypeFlags;\n+use middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use middle::ty::LvaluePreference::{NoPreference};\n \n use syntax::ast;"}, {"sha": "a0b03fe8126dd18aabbff7dca7cab7be8a5450a4", "filename": "src/librustc/middle/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::subst;\n-use middle::ty::{self, HasTypeFlags, Ty, TypeFlags};\n+use middle::ty::{self, Ty, TypeFlags, TypeFoldable};\n \n pub struct FlagComputation {\n     pub flags: TypeFlags,"}, {"sha": "da0245a8d25205cb5f3c87dd964e993399ccfce4", "filename": "src/librustc/middle/ty/fold.rs", "status": "modified", "additions": 167, "deletions": 209, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -14,41 +14,98 @@\n //! instance of a \"folder\" (a type which implements `TypeFolder`). Then\n //! the setup is intended to be:\n //!\n-//!     T.fold_with(F) --calls--> F.fold_T(T) --calls--> super_fold_T(F, T)\n+//!   T.fold_with(F) --calls--> F.fold_T(T) --calls--> T.super_fold_with(F)\n //!\n //! This way, when you define a new folder F, you can override\n-//! `fold_T()` to customize the behavior, and invoke `super_fold_T()`\n+//! `fold_T()` to customize the behavior, and invoke `T.super_fold_with()`\n //! to get the original behavior. Meanwhile, to actually fold\n //! something, you can just write `T.fold_with(F)`, which is\n //! convenient. (Note that `fold_with` will also transparently handle\n //! things like a `Vec<T>` where T is foldable and so on.)\n //!\n //! In this ideal setup, the only function that actually *does*\n-//! anything is `super_fold_T`, which traverses the type `T`. Moreover,\n-//! `super_fold_T` should only ever call `T.fold_with()`.\n+//! anything is `T.super_fold_with()`, which traverses the type `T`.\n+//! Moreover, `T.super_fold_with()` should only ever call `T.fold_with()`.\n //!\n //! In some cases, we follow a degenerate pattern where we do not have\n-//! a `fold_T` nor `super_fold_T` method. Instead, `T.fold_with`\n-//! traverses the structure directly. This is suboptimal because the\n-//! behavior cannot be overridden, but it's much less work to implement.\n-//! If you ever *do* need an override that doesn't exist, it's not hard\n-//! to convert the degenerate pattern into the proper thing.\n+//! a `fold_T` method. Instead, `T.fold_with` traverses the structure directly.\n+//! This is suboptimal because the behavior cannot be overridden, but it's\n+//! much less work to implement. If you ever *do* need an override that\n+//! doesn't exist, it's not hard to convert the degenerate pattern into the\n+//! proper thing.\n+//!\n+//! A `TypeFoldable` T can also be visited by a `TypeVisitor` V using similar setup:\n+//!   T.visit_with(V) --calls--> V.visit_T(T) --calls--> T.super_visit_with(V).\n+//! These methods return true to indicate that the visitor has found what it is looking for\n+//! and does not need to visit anything else.\n \n use middle::region;\n use middle::subst;\n use middle::ty::adjustment;\n-use middle::ty::{self, Binder, Ty, RegionEscape};\n+use middle::ty::{self, Binder, Ty, TypeFlags};\n \n use std::fmt;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n-///////////////////////////////////////////////////////////////////////////\n-// Two generic traits\n-\n /// The TypeFoldable trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in TypeFolder.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        self.super_fold_with(folder)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.super_visit_with(visitor)\n+    }\n+\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.visit_with(&mut HasEscapingRegionsVisitor { depth: depth })\n+    }\n+    fn has_escaping_regions(&self) -> bool {\n+        self.has_regions_escaping_depth(0)\n+    }\n+\n+    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags: flags })\n+    }\n+    fn has_projection_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_PROJECTION)\n+    }\n+    fn references_error(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_ERR)\n+    }\n+    fn has_param_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_PARAMS)\n+    }\n+    fn has_self_ty(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_SELF)\n+    }\n+    fn has_infer_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_INFER)\n+    }\n+    fn needs_infer(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n+    }\n+    fn needs_subst(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n+    }\n+    fn has_closure_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n+    }\n+    fn has_erasable_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n+                            TypeFlags::HAS_RE_INFER |\n+                            TypeFlags::HAS_FREE_REGIONS)\n+    }\n+    /// Indicates whether this value references only 'global'\n+    /// types/lifetimes that are the same regardless of what fn we are\n+    /// in. This is used for caching. Errs on the side of returning\n+    /// false.\n+    fn is_global(&self) -> bool {\n+        !self.has_type_flags(TypeFlags::HAS_LOCAL_NAMES)\n+    }\n }\n \n /// The TypeFolder trait defines the actual *folding*. There is a\n@@ -74,248 +131,77 @@ pub trait TypeFolder<'tcx> : Sized {\n         where T : TypeFoldable<'tcx>\n     {\n         // FIXME(#20526) this should replace `enter_region_binder`/`exit_region_binder`.\n-        super_fold_binder(self, t)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        super_fold_ty(self, t)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_mt(&mut self, t: &ty::TypeAndMut<'tcx>) -> ty::TypeAndMut<'tcx> {\n-        super_fold_mt(self, t)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_trait_ref(&mut self, t: &ty::TraitRef<'tcx>) -> ty::TraitRef<'tcx> {\n-        super_fold_trait_ref(self, t)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_substs(&mut self,\n                    substs: &subst::Substs<'tcx>)\n                    -> subst::Substs<'tcx> {\n-        super_fold_substs(self, substs)\n+        substs.super_fold_with(self)\n     }\n \n     fn fold_fn_sig(&mut self,\n                    sig: &ty::FnSig<'tcx>)\n                    -> ty::FnSig<'tcx> {\n-        super_fold_fn_sig(self, sig)\n+        sig.super_fold_with(self)\n     }\n \n     fn fold_output(&mut self,\n                       output: &ty::FnOutput<'tcx>)\n                       -> ty::FnOutput<'tcx> {\n-        super_fold_output(self, output)\n+        output.super_fold_with(self)\n     }\n \n     fn fold_bare_fn_ty(&mut self,\n                        fty: &ty::BareFnTy<'tcx>)\n                        -> ty::BareFnTy<'tcx>\n     {\n-        super_fold_bare_fn_ty(self, fty)\n+        fty.super_fold_with(self)\n     }\n \n     fn fold_closure_ty(&mut self,\n                        fty: &ty::ClosureTy<'tcx>)\n                        -> ty::ClosureTy<'tcx> {\n-        super_fold_closure_ty(self, fty)\n+        fty.super_fold_with(self)\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n-        r\n+        r.super_fold_with(self)\n     }\n \n     fn fold_existential_bounds(&mut self, s: &ty::ExistentialBounds<'tcx>)\n                                -> ty::ExistentialBounds<'tcx> {\n-        super_fold_existential_bounds(self, s)\n+        s.super_fold_with(self)\n     }\n \n     fn fold_autoref(&mut self, ar: &adjustment::AutoRef<'tcx>)\n                     -> adjustment::AutoRef<'tcx> {\n-        super_fold_autoref(self, ar)\n+        ar.super_fold_with(self)\n     }\n-\n-    fn fold_item_substs(&mut self, i: ty::ItemSubsts<'tcx>) -> ty::ItemSubsts<'tcx> {\n-        super_fold_item_substs(self, i)\n-    }\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// \"super\" routines: these are the default implementations for TypeFolder.\n-//\n-// They should invoke `foo.fold_with()` to do recursive folding.\n-\n-pub fn super_fold_binder<'tcx, T, U>(this: &mut T,\n-                                     binder: &Binder<U>)\n-                                     -> Binder<U>\n-    where T : TypeFolder<'tcx>, U : TypeFoldable<'tcx>\n-{\n-    this.enter_region_binder();\n-    let result = Binder(binder.0.fold_with(this));\n-    this.exit_region_binder();\n-    result\n }\n \n-pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                ty: Ty<'tcx>)\n-                                                -> Ty<'tcx> {\n-    let sty = match ty.sty {\n-        ty::TyBox(typ) => {\n-            ty::TyBox(typ.fold_with(this))\n-        }\n-        ty::TyRawPtr(ref tm) => {\n-            ty::TyRawPtr(tm.fold_with(this))\n-        }\n-        ty::TyArray(typ, sz) => {\n-            ty::TyArray(typ.fold_with(this), sz)\n-        }\n-        ty::TySlice(typ) => {\n-            ty::TySlice(typ.fold_with(this))\n-        }\n-        ty::TyEnum(tid, ref substs) => {\n-            let substs = substs.fold_with(this);\n-            ty::TyEnum(tid, this.tcx().mk_substs(substs))\n-        }\n-        ty::TyTrait(box ty::TraitTy { ref principal, ref bounds }) => {\n-            ty::TyTrait(box ty::TraitTy {\n-                principal: principal.fold_with(this),\n-                bounds: bounds.fold_with(this),\n-            })\n-        }\n-        ty::TyTuple(ref ts) => {\n-            ty::TyTuple(ts.fold_with(this))\n-        }\n-        ty::TyBareFn(opt_def_id, ref f) => {\n-            let bfn = f.fold_with(this);\n-            ty::TyBareFn(opt_def_id, this.tcx().mk_bare_fn(bfn))\n-        }\n-        ty::TyRef(r, ref tm) => {\n-            let r = r.fold_with(this);\n-            ty::TyRef(this.tcx().mk_region(r), tm.fold_with(this))\n-        }\n-        ty::TyStruct(did, ref substs) => {\n-            let substs = substs.fold_with(this);\n-            ty::TyStruct(did, this.tcx().mk_substs(substs))\n-        }\n-        ty::TyClosure(did, ref substs) => {\n-            let s = substs.fold_with(this);\n-            ty::TyClosure(did, s)\n-        }\n-        ty::TyProjection(ref data) => {\n-            ty::TyProjection(data.fold_with(this))\n-        }\n-        ty::TyBool | ty::TyChar | ty::TyStr |\n-        ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-        ty::TyError | ty::TyInfer(_) |\n-        ty::TyParam(..) => {\n-            ty.sty.clone()\n-        }\n-    };\n-    this.tcx().mk_ty(sty)\n-}\n-\n-pub fn super_fold_substs<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                    substs: &subst::Substs<'tcx>)\n-                                                    -> subst::Substs<'tcx> {\n-    let regions = match substs.regions {\n-        subst::ErasedRegions => {\n-            subst::ErasedRegions\n-        }\n-        subst::NonerasedRegions(ref regions) => {\n-            subst::NonerasedRegions(regions.fold_with(this))\n-        }\n-    };\n-\n-    subst::Substs { regions: regions,\n-                    types: substs.types.fold_with(this) }\n-}\n-\n-pub fn super_fold_fn_sig<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                    sig: &ty::FnSig<'tcx>)\n-                                                    -> ty::FnSig<'tcx>\n-{\n-    ty::FnSig { inputs: sig.inputs.fold_with(this),\n-                output: sig.output.fold_with(this),\n-                variadic: sig.variadic }\n-}\n-\n-pub fn super_fold_output<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                    output: &ty::FnOutput<'tcx>)\n-                                                    -> ty::FnOutput<'tcx> {\n-    match *output {\n-        ty::FnConverging(ref ty) => ty::FnConverging(ty.fold_with(this)),\n-        ty::FnDiverging => ty::FnDiverging\n-    }\n-}\n-\n-pub fn super_fold_bare_fn_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                        fty: &ty::BareFnTy<'tcx>)\n-                                                        -> ty::BareFnTy<'tcx>\n-{\n-    ty::BareFnTy { sig: fty.sig.fold_with(this),\n-                   abi: fty.abi,\n-                   unsafety: fty.unsafety }\n-}\n-\n-pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                        fty: &ty::ClosureTy<'tcx>)\n-                                                        -> ty::ClosureTy<'tcx>\n-{\n-    ty::ClosureTy {\n-        sig: fty.sig.fold_with(this),\n-        unsafety: fty.unsafety,\n-        abi: fty.abi,\n-    }\n-}\n-\n-pub fn super_fold_trait_ref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                       t: &ty::TraitRef<'tcx>)\n-                                                       -> ty::TraitRef<'tcx>\n-{\n-    let substs = t.substs.fold_with(this);\n-    ty::TraitRef {\n-        def_id: t.def_id,\n-        substs: this.tcx().mk_substs(substs),\n-    }\n-}\n-\n-pub fn super_fold_mt<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                mt: &ty::TypeAndMut<'tcx>)\n-                                                -> ty::TypeAndMut<'tcx> {\n-    ty::TypeAndMut {ty: mt.ty.fold_with(this),\n-            mutbl: mt.mutbl}\n-}\n-\n-pub fn super_fold_existential_bounds<'tcx, T: TypeFolder<'tcx>>(\n-    this: &mut T,\n-    bounds: &ty::ExistentialBounds<'tcx>)\n-    -> ty::ExistentialBounds<'tcx>\n-{\n-    ty::ExistentialBounds {\n-        region_bound: bounds.region_bound.fold_with(this),\n-        builtin_bounds: bounds.builtin_bounds,\n-        projection_bounds: bounds.projection_bounds.fold_with(this),\n-    }\n-}\n+pub trait TypeVisitor<'tcx> : Sized {\n+    fn enter_region_binder(&mut self) { }\n+    fn exit_region_binder(&mut self) { }\n \n-pub fn super_fold_autoref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                     autoref: &adjustment::AutoRef<'tcx>)\n-                                                     -> adjustment::AutoRef<'tcx>\n-{\n-    match *autoref {\n-        adjustment::AutoPtr(r, m) => {\n-            let r = r.fold_with(this);\n-            adjustment::AutoPtr(this.tcx().mk_region(r), m)\n-        }\n-        adjustment::AutoUnsafe(m) => adjustment::AutoUnsafe(m)\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+        t.super_visit_with(self)\n     }\n-}\n \n-pub fn super_fold_item_substs<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n-                                                         substs: ty::ItemSubsts<'tcx>)\n-                                                         -> ty::ItemSubsts<'tcx>\n-{\n-    ty::ItemSubsts {\n-        substs: substs.substs.fold_with(this),\n+    fn visit_region(&mut self, r: ty::Region) -> bool {\n+        r.super_visit_with(self)\n     }\n }\n \n@@ -333,7 +219,7 @@ impl<'a, 'tcx, F> TypeFolder<'tcx> for BottomUpFolder<'a, 'tcx, F> where\n     fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let t1 = super_fold_ty(self, ty);\n+        let t1 = ty.super_fold_with(self);\n         (self.fldop)(t1)\n     }\n }\n@@ -495,7 +381,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n     }\n \n     pub fn no_late_bound_regions<T>(&self, value: &Binder<T>) -> Option<T>\n-        where T : TypeFoldable<'tcx> + RegionEscape\n+        where T : TypeFoldable<'tcx>\n     {\n         if value.0.has_escaping_regions() {\n             None\n@@ -561,7 +447,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>\n             return t;\n         }\n \n-        super_fold_ty(self, t)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n@@ -612,7 +498,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                     Some(u) => return u\n                 }\n \n-                let t_norm = ty::fold::super_fold_ty(self, ty);\n+                let t_norm = ty.super_fold_with(self);\n                 self.tcx().normalized_cache.borrow_mut().insert(ty, t_norm);\n                 return t_norm;\n             }\n@@ -621,7 +507,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                 where T : TypeFoldable<'tcx>\n             {\n                 let u = self.tcx().anonymize_late_bound_regions(t);\n-                ty::fold::super_fold_binder(self, &u)\n+                u.super_fold_with(self)\n             }\n \n             fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n@@ -678,3 +564,75 @@ pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>>(tcx: &ty::ctxt<'tcx>,\n         shift_region(region, amount)\n     }))\n }\n+\n+/// An \"escaping region\" is a bound region whose binder is not part of `t`.\n+///\n+/// So, for example, consider a type like the following, which has two binders:\n+///\n+///    for<'a> fn(x: for<'b> fn(&'a isize, &'b isize))\n+///    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ outer scope\n+///                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~  inner scope\n+///\n+/// This type has *bound regions* (`'a`, `'b`), but it does not have escaping regions, because the\n+/// binders of both `'a` and `'b` are part of the type itself. However, if we consider the *inner\n+/// fn type*, that type has an escaping region: `'a`.\n+///\n+/// Note that what I'm calling an \"escaping region\" is often just called a \"free region\". However,\n+/// we already use the term \"free region\". It refers to the regions that we use to represent bound\n+/// regions on a fn definition while we are typechecking its body.\n+///\n+/// To clarify, conceptually there is no particular difference between an \"escaping\" region and a\n+/// \"free\" region. However, there is a big difference in practice. Basically, when \"entering\" a\n+/// binding level, one is generally required to do some sort of processing to a bound region, such\n+/// as replacing it with a fresh/skolemized region, or making an entry in the environment to\n+/// represent the scope to which it is attached, etc. An escaping region represents a bound region\n+/// for which this processing has not yet been done.\n+struct HasEscapingRegionsVisitor {\n+    depth: u32,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor {\n+    fn enter_region_binder(&mut self) {\n+        self.depth += 1;\n+    }\n+\n+    fn exit_region_binder(&mut self) {\n+        self.depth -= 1;\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+        t.region_depth > self.depth\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region) -> bool {\n+        r.escapes_depth(self.depth)\n+    }\n+}\n+\n+struct HasTypeFlagsVisitor {\n+    flags: ty::TypeFlags,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+    fn visit_ty(&mut self, t: Ty) -> bool {\n+        t.flags.get().intersects(self.flags)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region) -> bool {\n+        if self.flags.intersects(ty::TypeFlags::HAS_LOCAL_NAMES) {\n+            // does this represent a region that cannot be named\n+            // in a global way? used in fulfillment caching.\n+            match r {\n+                ty::ReStatic | ty::ReEmpty => {}\n+                _ => return true,\n+            }\n+        }\n+        if self.flags.intersects(ty::TypeFlags::HAS_RE_INFER) {\n+            match r {\n+                ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n+                _ => {}\n+            }\n+        }\n+        false\n+    }\n+}"}, {"sha": "852d9d80a9148ff46df750b1d24c184952e98eea", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 70, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -17,6 +17,7 @@ pub use self::BorrowKind::*;\n pub use self::ImplOrTraitItem::*;\n pub use self::IntVarValue::*;\n pub use self::LvaluePreference::*;\n+pub use self::fold::TypeFoldable;\n \n use dep_graph::{self, DepNode};\n use front::map as ast_map;\n@@ -2667,73 +2668,3 @@ impl<'tcx> ctxt<'tcx> {\n         trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n     }\n }\n-\n-/// An \"escaping region\" is a bound region whose binder is not part of `t`.\n-///\n-/// So, for example, consider a type like the following, which has two binders:\n-///\n-///    for<'a> fn(x: for<'b> fn(&'a isize, &'b isize))\n-///    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ outer scope\n-///                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~  inner scope\n-///\n-/// This type has *bound regions* (`'a`, `'b`), but it does not have escaping regions, because the\n-/// binders of both `'a` and `'b` are part of the type itself. However, if we consider the *inner\n-/// fn type*, that type has an escaping region: `'a`.\n-///\n-/// Note that what I'm calling an \"escaping region\" is often just called a \"free region\". However,\n-/// we already use the term \"free region\". It refers to the regions that we use to represent bound\n-/// regions on a fn definition while we are typechecking its body.\n-///\n-/// To clarify, conceptually there is no particular difference between an \"escaping\" region and a\n-/// \"free\" region. However, there is a big difference in practice. Basically, when \"entering\" a\n-/// binding level, one is generally required to do some sort of processing to a bound region, such\n-/// as replacing it with a fresh/skolemized region, or making an entry in the environment to\n-/// represent the scope to which it is attached, etc. An escaping region represents a bound region\n-/// for which this processing has not yet been done.\n-pub trait RegionEscape {\n-    fn has_escaping_regions(&self) -> bool {\n-        self.has_regions_escaping_depth(0)\n-    }\n-\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool;\n-}\n-\n-pub trait HasTypeFlags {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool;\n-    fn has_projection_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_PROJECTION)\n-    }\n-    fn references_error(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_ERR)\n-    }\n-    fn has_param_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_PARAMS)\n-    }\n-    fn has_self_ty(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_SELF)\n-    }\n-    fn has_infer_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER)\n-    }\n-    fn needs_infer(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n-    }\n-    fn needs_subst(&self) -> bool {\n-        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n-    }\n-    fn has_closure_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n-    }\n-    fn has_erasable_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n-                            TypeFlags::HAS_RE_INFER |\n-                            TypeFlags::HAS_FREE_REGIONS)\n-    }\n-    /// Indicates whether this value references only 'global'\n-    /// types/lifetimes that are the same regardless of what fn we are\n-    /// in. This is used for caching. Errs on the side of returning\n-    /// false.\n-    fn is_global(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_LOCAL_NAMES)\n-    }\n-}"}, {"sha": "fc20c1bcb85feec89e73ba01e7100ce15a6f56a2", "filename": "src/librustc/middle/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -13,7 +13,7 @@\n // RFC for reference.\n \n use middle::infer::InferCtxt;\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {"}, {"sha": "46bc13bd5988be5e27302c6207b0492c8b6dd371", "filename": "src/librustc/middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -15,9 +15,8 @@\n \n use middle::def_id::DefId;\n use middle::subst::{ErasedRegions, NonerasedRegions, ParamSpace, Substs};\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::error::{ExpectedFound, TypeError};\n-use middle::ty::fold::TypeFoldable;\n use std::rc::Rc;\n use syntax::abi;\n use rustc_front::hir as ast;\n@@ -80,7 +79,7 @@ pub trait TypeRelation<'a,'tcx> : Sized {\n         where T: Relate<'a,'tcx>;\n }\n \n-pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> + HasTypeFlags {\n+pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> {\n     fn relate<R:TypeRelation<'a,'tcx>>(relation: &mut R,\n                                        a: &Self,\n                                        b: &Self)"}, {"sha": "01b2bd36b4f07a7f7e4b3ae73b0b5083132106a6", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 389, "deletions": 424, "changes": 813, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -10,400 +10,15 @@\n \n use middle::subst::{self, VecPerParamSpace};\n use middle::traits;\n-use middle::ty::{self, TraitRef, Ty, TypeAndMut};\n-use middle::ty::{HasTypeFlags, Lift, TypeFlags, RegionEscape};\n-use middle::ty::fold::{TypeFoldable, TypeFolder};\n+use middle::ty::{self, Lift, TraitRef, Ty};\n+use middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use std::rc::Rc;\n use syntax::abi;\n use syntax::ptr::P;\n \n use rustc_front::hir;\n \n-// FIXME(#20298) -- all of these traits basically walk various\n-// structures to test whether types/regions are reachable with various\n-// properties. It should be possible to express them in terms of one\n-// common \"walker\" trait or something.\n-\n-impl<'tcx> RegionEscape for Ty<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.region_depth > depth\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::TraitTy<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.principal.has_regions_escaping_depth(depth) ||\n-            self.bounds.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::ExistentialBounds<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.region_bound.has_regions_escaping_depth(depth) ||\n-            self.projection_bounds.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::InstantiatedPredicates<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.predicates.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for subst::Substs<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.types.has_regions_escaping_depth(depth) ||\n-            self.regions.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::ClosureSubsts<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.func_substs.has_regions_escaping_depth(depth) ||\n-            self.upvar_tys.iter().any(|t| t.has_regions_escaping_depth(depth))\n-    }\n-}\n-\n-impl<T:RegionEscape> RegionEscape for Vec<T> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.iter().any(|t| t.has_regions_escaping_depth(depth))\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::FnSig<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.inputs.has_regions_escaping_depth(depth) ||\n-            self.output.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx,T:RegionEscape> RegionEscape for VecPerParamSpace<T> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.iter_enumerated().any(|(space, _, t)| {\n-            if space == subst::FnSpace {\n-                t.has_regions_escaping_depth(depth+1)\n-            } else {\n-                t.has_regions_escaping_depth(depth)\n-            }\n-        })\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::TypeScheme<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.ty.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl RegionEscape for ty::Region {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.escapes_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::GenericPredicates<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.predicates.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::Predicate<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        match *self {\n-            ty::Predicate::Trait(ref data) => data.has_regions_escaping_depth(depth),\n-            ty::Predicate::Equate(ref data) => data.has_regions_escaping_depth(depth),\n-            ty::Predicate::RegionOutlives(ref data) => data.has_regions_escaping_depth(depth),\n-            ty::Predicate::TypeOutlives(ref data) => data.has_regions_escaping_depth(depth),\n-            ty::Predicate::Projection(ref data) => data.has_regions_escaping_depth(depth),\n-            ty::Predicate::WellFormed(ty) => ty.has_regions_escaping_depth(depth),\n-            ty::Predicate::ObjectSafe(_trait_def_id) => false,\n-        }\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for TraitRef<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.substs.types.iter().any(|t| t.has_regions_escaping_depth(depth)) ||\n-            self.substs.regions.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for subst::RegionSubsts {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        match *self {\n-            subst::ErasedRegions => false,\n-            subst::NonerasedRegions(ref r) => {\n-                r.iter().any(|t| t.has_regions_escaping_depth(depth))\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx,T:RegionEscape> RegionEscape for ty::Binder<T> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.0.has_regions_escaping_depth(depth + 1)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::FnOutput<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        match *self {\n-            ty::FnConverging(t) => t.has_regions_escaping_depth(depth),\n-            ty::FnDiverging => false\n-        }\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::EquatePredicate<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.0.has_regions_escaping_depth(depth) || self.1.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::TraitPredicate<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.trait_ref.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<T:RegionEscape,U:RegionEscape> RegionEscape for ty::OutlivesPredicate<T,U> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.0.has_regions_escaping_depth(depth) || self.1.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::ProjectionPredicate<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.projection_ty.has_regions_escaping_depth(depth) ||\n-            self.ty.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl<'tcx> RegionEscape for ty::ProjectionTy<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.trait_ref.has_regions_escaping_depth(depth)\n-    }\n-}\n-\n-impl HasTypeFlags for () {\n-    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n-        false\n-    }\n-}\n-\n-impl<'tcx,T:HasTypeFlags> HasTypeFlags for Vec<T> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self[..].has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx,T:HasTypeFlags> HasTypeFlags for [T] {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.iter().any(|p| p.has_type_flags(flags))\n-    }\n-}\n-\n-impl<'tcx,T:HasTypeFlags> HasTypeFlags for VecPerParamSpace<T> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.iter().any(|p| p.has_type_flags(flags))\n-    }\n-}\n-\n-impl HasTypeFlags for abi::Abi {\n-    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n-        false\n-    }\n-}\n-\n-impl HasTypeFlags for hir::Unsafety {\n-    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n-        false\n-    }\n-}\n-\n-impl HasTypeFlags for ty::BuiltinBounds {\n-    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n-        false\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::ClosureTy<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.sig.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::ClosureUpvar<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.ty.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::ExistentialBounds<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.projection_bounds.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::InstantiatedPredicates<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.predicates.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::Predicate<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        match *self {\n-            ty::Predicate::Trait(ref data) => data.has_type_flags(flags),\n-            ty::Predicate::Equate(ref data) => data.has_type_flags(flags),\n-            ty::Predicate::RegionOutlives(ref data) => data.has_type_flags(flags),\n-            ty::Predicate::TypeOutlives(ref data) => data.has_type_flags(flags),\n-            ty::Predicate::Projection(ref data) => data.has_type_flags(flags),\n-            ty::Predicate::WellFormed(data) => data.has_type_flags(flags),\n-            ty::Predicate::ObjectSafe(_trait_def_id) => false,\n-        }\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::TraitPredicate<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.trait_ref.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::EquatePredicate<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.0.has_type_flags(flags) || self.1.has_type_flags(flags)\n-    }\n-}\n-\n-impl HasTypeFlags for ty::Region {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        if flags.intersects(TypeFlags::HAS_LOCAL_NAMES) {\n-            // does this represent a region that cannot be named in a global\n-            // way? used in fulfillment caching.\n-            match *self {\n-                ty::ReStatic | ty::ReEmpty => {}\n-                _ => return true\n-            }\n-        }\n-        if flags.intersects(TypeFlags::HAS_RE_INFER) {\n-            match *self {\n-                ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n-                _ => {}\n-            }\n-        }\n-        false\n-    }\n-}\n-\n-impl<T:HasTypeFlags,U:HasTypeFlags> HasTypeFlags for ty::OutlivesPredicate<T,U> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.0.has_type_flags(flags) || self.1.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::ProjectionPredicate<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.projection_ty.has_type_flags(flags) || self.ty.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::ProjectionTy<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.trait_ref.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for Ty<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.flags.get().intersects(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for TypeAndMut<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.ty.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for TraitRef<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.substs.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for subst::Substs<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.types.has_type_flags(flags) || match self.regions {\n-            subst::ErasedRegions => false,\n-            subst::NonerasedRegions(ref r) => r.has_type_flags(flags)\n-        }\n-    }\n-}\n-\n-impl<'tcx,T> HasTypeFlags for Option<T>\n-    where T : HasTypeFlags\n-{\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.iter().any(|t| t.has_type_flags(flags))\n-    }\n-}\n-\n-impl<'tcx,T> HasTypeFlags for Rc<T>\n-    where T : HasTypeFlags\n-{\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        (**self).has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx,T> HasTypeFlags for Box<T>\n-    where T : HasTypeFlags\n-{\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        (**self).has_type_flags(flags)\n-    }\n-}\n-\n-impl<T> HasTypeFlags for ty::Binder<T>\n-    where T : HasTypeFlags\n-{\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.0.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::FnOutput<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        match *self {\n-            ty::FnConverging(t) => t.has_type_flags(flags),\n-            ty::FnDiverging => false,\n-        }\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::FnSig<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.inputs.iter().any(|t| t.has_type_flags(flags)) ||\n-            self.output.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::BareFnTy<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.sig.has_type_flags(flags)\n-    }\n-}\n-\n-impl<'tcx> HasTypeFlags for ty::ClosureSubsts<'tcx> {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.func_substs.has_type_flags(flags) ||\n-            self.upvar_tys.iter().any(|t| t.has_type_flags(flags))\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Lift implementations\n \n@@ -508,9 +123,13 @@ macro_rules! CopyImpls {\n     ($($ty:ty),+) => {\n         $(\n             impl<'tcx> TypeFoldable<'tcx> for $ty {\n-                fn fold_with<F:TypeFolder<'tcx>>(&self, _: &mut F) -> $ty {\n+                fn super_fold_with<F:TypeFolder<'tcx>>(&self, _: &mut F) -> $ty {\n                     *self\n                 }\n+\n+                fn super_visit_with<F: TypeVisitor<'tcx>>(&self, _: &mut F) -> bool {\n+                    false\n+                }\n             }\n         )+\n     }\n@@ -519,50 +138,88 @@ macro_rules! CopyImpls {\n CopyImpls! { (), hir::Unsafety, abi::Abi }\n \n impl<'tcx, T:TypeFoldable<'tcx>, U:TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> (T, U) {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> (T, U) {\n         (self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.0.visit_with(visitor) || self.1.visit_with(visitor)\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Option<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Option<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.as_ref().map(|t| t.fold_with(folder))\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Rc<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Rc::new((**self).fold_with(folder))\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        (**self).visit_with(visitor)\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Box<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let content: T = (**self).fold_with(folder);\n         box content\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        (**self).visit_with(visitor)\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Vec<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n }\n \n impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Binder<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.enter_region_binder();\n+        let result = ty::Binder(self.0.fold_with(folder));\n+        folder.exit_region_binder();\n+        result\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_binder(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.enter_region_binder();\n+        if self.0.visit_with(visitor) { return true }\n+        visitor.exit_region_binder();\n+        false\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for P<[T]> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> P<[T]> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> VecPerParamSpace<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n \n         // Things in the Fn space take place under an additional level\n         // of region binding relative to the other spaces. This is\n@@ -582,100 +239,325 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n         }\n         result\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        let mut entered_region_binder = false;\n+        let result = self.iter_enumerated().any(|(space, index, t)| {\n+            if space == subst::FnSpace && index == 0 {\n+                visitor.enter_region_binder();\n+                entered_region_binder = true;\n+            }\n+            t.visit_with(visitor)\n+        });\n+        if entered_region_binder {\n+            visitor.exit_region_binder();\n+        }\n+        result\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::TraitTy<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::TraitTy {\n+            principal: self.principal.fold_with(folder),\n+            bounds: self.bounds.fold_with(folder),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.principal.visit_with(visitor) || self.bounds.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Ty<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        let sty = match self.sty {\n+            ty::TyBox(typ) => ty::TyBox(typ.fold_with(folder)),\n+            ty::TyRawPtr(ref tm) => ty::TyRawPtr(tm.fold_with(folder)),\n+            ty::TyArray(typ, sz) => ty::TyArray(typ.fold_with(folder), sz),\n+            ty::TySlice(typ) => ty::TySlice(typ.fold_with(folder)),\n+            ty::TyEnum(tid, ref substs) => {\n+                let substs = substs.fold_with(folder);\n+                ty::TyEnum(tid, folder.tcx().mk_substs(substs))\n+            }\n+            ty::TyTrait(ref trait_ty) => ty::TyTrait(trait_ty.fold_with(folder)),\n+            ty::TyTuple(ref ts) => ty::TyTuple(ts.fold_with(folder)),\n+            ty::TyBareFn(opt_def_id, ref f) => {\n+                let bfn = f.fold_with(folder);\n+                ty::TyBareFn(opt_def_id, folder.tcx().mk_bare_fn(bfn))\n+            }\n+            ty::TyRef(r, ref tm) => {\n+                let r = r.fold_with(folder);\n+                ty::TyRef(folder.tcx().mk_region(r), tm.fold_with(folder))\n+            }\n+            ty::TyStruct(did, ref substs) => {\n+                let substs = substs.fold_with(folder);\n+                ty::TyStruct(did, folder.tcx().mk_substs(substs))\n+            }\n+            ty::TyClosure(did, ref substs) => {\n+                ty::TyClosure(did, substs.fold_with(folder))\n+            }\n+            ty::TyProjection(ref data) => ty::TyProjection(data.fold_with(folder)),\n+            ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n+            ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n+            ty::TyParam(..) => self.sty.clone(),\n+        };\n+        folder.tcx().mk_ty(sty)\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_ty(*self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match self.sty {\n+            ty::TyBox(typ) => typ.visit_with(visitor),\n+            ty::TyRawPtr(ref tm) => tm.visit_with(visitor),\n+            ty::TyArray(typ, _sz) => typ.visit_with(visitor),\n+            ty::TySlice(typ) => typ.visit_with(visitor),\n+            ty::TyEnum(_tid, ref substs) => substs.visit_with(visitor),\n+            ty::TyTrait(ref trait_ty) => trait_ty.visit_with(visitor),\n+            ty::TyTuple(ref ts) => ts.visit_with(visitor),\n+            ty::TyBareFn(_opt_def_id, ref f) => f.visit_with(visitor),\n+            ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n+            ty::TyStruct(_did, ref substs) => substs.visit_with(visitor),\n+            ty::TyClosure(_did, ref substs) => substs.visit_with(visitor),\n+            ty::TyProjection(ref data) => data.visit_with(visitor),\n+            ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n+            ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n+            ty::TyParam(..) => false,\n+        }\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.visit_ty(self)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::BareFnTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::BareFnTy<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::BareFnTy { sig: self.sig.fold_with(folder),\n+                       abi: self.abi,\n+                       unsafety: self.unsafety }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_bare_fn_ty(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.sig.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureTy<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+       ty::ClosureTy {\n+            sig: self.sig.fold_with(folder),\n+            unsafety: self.unsafety,\n+            abi: self.abi,\n+        }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_closure_ty(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.sig.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeAndMut<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::TypeAndMut { ty: self.ty.fold_with(folder), mutbl: self.mutbl }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_mt(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.ty.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::FnOutput<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::FnOutput<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        match *self {\n+            ty::FnConverging(ref ty) => ty::FnConverging(ty.fold_with(folder)),\n+            ty::FnDiverging => ty::FnDiverging\n+        }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_output(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match *self {\n+            ty::FnConverging(ref ty) => ty.visit_with(visitor),\n+            ty::FnDiverging => false,\n+        }\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::FnSig<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::FnSig { inputs: self.inputs.fold_with(folder),\n+                    output: self.output.fold_with(folder),\n+                    variadic: self.variadic }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_fn_sig(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.inputs.visit_with(visitor) || self.output.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TraitRef<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        let substs = self.substs.fold_with(folder);\n+        ty::TraitRef {\n+            def_id: self.def_id,\n+            substs: folder.tcx().mk_substs(substs),\n+        }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_trait_ref(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.substs.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Region {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Region {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n+        *self\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_region(*self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.visit_region(*self)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for subst::Substs<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> subst::Substs<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        let regions = match self.regions {\n+            subst::ErasedRegions => subst::ErasedRegions,\n+            subst::NonerasedRegions(ref regions) => {\n+                subst::NonerasedRegions(regions.fold_with(folder))\n+            }\n+        };\n+\n+        subst::Substs { regions: regions,\n+                        types: self.types.fold_with(folder) }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_substs(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.types.visit_with(visitor) || match self.regions {\n+            subst::ErasedRegions => false,\n+            subst::NonerasedRegions(ref regions) => regions.visit_with(visitor),\n+        }\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureSubsts<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureSubsts<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let func_substs = self.func_substs.fold_with(folder);\n         ty::ClosureSubsts {\n             func_substs: folder.tcx().mk_substs(func_substs),\n             upvar_tys: self.upvar_tys.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.func_substs.visit_with(visitor) || self.upvar_tys.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ItemSubsts<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ItemSubsts<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ItemSubsts {\n             substs: self.substs.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.substs.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoRef<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::adjustment::AutoRef<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        match *self {\n+            ty::adjustment::AutoPtr(r, m) => {\n+                let r = r.fold_with(folder);\n+                ty::adjustment::AutoPtr(folder.tcx().mk_region(r), m)\n+            }\n+            ty::adjustment::AutoUnsafe(m) => ty::adjustment::AutoUnsafe(m)\n+        }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_autoref(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match *self {\n+            ty::adjustment::AutoPtr(r, _m) => r.visit_with(visitor),\n+            ty::adjustment::AutoUnsafe(_m) => false,\n+        }\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::BuiltinBounds {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> ty::BuiltinBounds {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n         *self\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialBounds<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ExistentialBounds<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::ExistentialBounds {\n+            region_bound: self.region_bound.fold_with(folder),\n+            builtin_bounds: self.builtin_bounds,\n+            projection_bounds: self.projection_bounds.fold_with(folder),\n+        }\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_existential_bounds(self)\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.region_bound.visit_with(visitor) || self.projection_bounds.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeParameterDef<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TypeParameterDef {\n             name: self.name,\n             def_id: self.def_id,\n@@ -686,10 +568,15 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n             object_lifetime_default: self.object_lifetime_default.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.default.visit_with(visitor) ||\n+            self.object_lifetime_default.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ObjectLifetimeDefault {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ty::ObjectLifetimeDefault::Ambiguous =>\n                 ty::ObjectLifetimeDefault::Ambiguous,\n@@ -701,10 +588,17 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n                 ty::ObjectLifetimeDefault::Specific(r.fold_with(folder)),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match *self {\n+            ty::ObjectLifetimeDefault::Specific(r) => r.visit_with(visitor),\n+            _ => false,\n+        }\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::RegionParameterDef {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::RegionParameterDef {\n             name: self.name,\n             def_id: self.def_id,\n@@ -713,27 +607,39 @@ impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef {\n             bounds: self.bounds.fold_with(folder)\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.bounds.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Generics<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::Generics {\n             types: self.types.fold_with(folder),\n             regions: self.regions.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.types.visit_with(visitor) || self.regions.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::GenericPredicates<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::GenericPredicates {\n             predicates: self.predicates.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.predicates.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Predicate<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ty::Predicate::Trait(ref a) =>\n                 ty::Predicate::Trait(a.fold_with(folder)),\n@@ -751,71 +657,111 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n                 ty::Predicate::ObjectSafe(trait_def_id),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        match *self {\n+            ty::Predicate::Trait(ref a) => a.visit_with(visitor),\n+            ty::Predicate::Equate(ref binder) => binder.visit_with(visitor),\n+            ty::Predicate::RegionOutlives(ref binder) => binder.visit_with(visitor),\n+            ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),\n+            ty::Predicate::Projection(ref binder) => binder.visit_with(visitor),\n+            ty::Predicate::WellFormed(data) => data.visit_with(visitor),\n+            ty::Predicate::ObjectSafe(_trait_def_id) => false,\n+        }\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionPredicate<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ProjectionPredicate<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ProjectionPredicate {\n             projection_ty: self.projection_ty.fold_with(folder),\n             ty: self.ty.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.projection_ty.visit_with(visitor) || self.ty.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ProjectionTy<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ProjectionTy {\n             trait_ref: self.trait_ref.fold_with(folder),\n             item_name: self.item_name,\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.trait_ref.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::InstantiatedPredicates<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::InstantiatedPredicates {\n             predicates: self.predicates.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.predicates.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::EquatePredicate<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::EquatePredicate(self.0.fold_with(folder),\n                             self.1.fold_with(folder))\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.0.visit_with(visitor) || self.1.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TraitPredicate<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TraitPredicate {\n             trait_ref: self.trait_ref.fold_with(folder)\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.trait_ref.visit_with(visitor)\n+    }\n }\n \n impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U>\n     where T : TypeFoldable<'tcx>,\n           U : TypeFoldable<'tcx>,\n {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::OutlivesPredicate<T,U> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::OutlivesPredicate(self.0.fold_with(folder),\n                               self.1.fold_with(folder))\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.0.visit_with(visitor) || self.1.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureUpvar<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ClosureUpvar {\n             def: self.def,\n             span: self.span,\n             ty: self.ty.fold_with(folder),\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.ty.visit_with(visitor)\n+    }\n }\n \n impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where 'tcx: 'a {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ParameterEnvironment<'a, 'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ParameterEnvironment {\n             tcx: self.tcx,\n             free_substs: self.free_substs.fold_with(folder),\n@@ -826,4 +772,23 @@ impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where '\n             free_id_outlive: self.free_id_outlive,\n         }\n     }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.free_substs.visit_with(visitor) ||\n+            self.implicit_region_bound.visit_with(visitor) ||\n+            self.caller_bounds.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::TypeScheme<'tcx>  {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::TypeScheme {\n+            generics: self.generics.fold_with(folder),\n+            ty: self.ty.fold_with(folder),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.generics.visit_with(visitor) || self.ty.visit_with(visitor)\n+    }\n }"}, {"sha": "7e8d38ae8e79708700b7eb7cde7e53e9b4b4c71e", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -15,8 +15,7 @@ use middle::def_id::DefId;\n use middle::region;\n use middle::subst::{self, Substs};\n use middle::traits;\n-use middle::ty::{self, AdtDef, TypeFlags, Ty, TyS};\n-use middle::ty::{RegionEscape, ToPredicate};\n+use middle::ty::{self, AdtDef, ToPredicate, TypeFlags, Ty, TyS, TypeFoldable};\n use util::common::ErrorReported;\n \n use collections::enum_set::{self, EnumSet, CLike};"}, {"sha": "af23efe2bf4bad052e40b32a8e1992768d03883c", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -18,9 +18,8 @@ use middle::subst::{self, Subst, Substs};\n use middle::infer;\n use middle::pat_util;\n use middle::traits;\n-use middle::ty::{self, Ty, TypeAndMut, TypeFlags};\n+use middle::ty::{self, Ty, TypeAndMut, TypeFlags, TypeFoldable};\n use middle::ty::{Disr, ParameterEnvironment};\n-use middle::ty::{HasTypeFlags, RegionEscape};\n use middle::ty::TypeVariants::*;\n use util::num::ToPrimitive;\n "}, {"sha": "5f0fc306c24f8897da6299f2b563962bbacc3949", "filename": "src/librustc/middle/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -13,7 +13,7 @@ use middle::infer::InferCtxt;\n use middle::ty::outlives::{self, Component};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n+use middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "77e39bba54afcd834725abc42c3d63d3f4474e7b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -17,8 +17,7 @@ use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n-use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty::fold::TypeFoldable;\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n use syntax::{abi};\n@@ -252,10 +251,13 @@ fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,\n struct TraitAndProjections<'tcx>(ty::TraitRef<'tcx>, Vec<ty::ProjectionPredicate<'tcx>>);\n \n impl<'tcx> TypeFoldable<'tcx> for TraitAndProjections<'tcx> {\n-    fn fold_with<F:ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F)\n-                                              -> TraitAndProjections<'tcx> {\n+    fn super_fold_with<F:ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         TraitAndProjections(self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n+\n+    fn super_visit_with<V: ty::fold::TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.0.visit_with(visitor) || self.1.visit_with(visitor)\n+    }\n }\n \n impl<'tcx> fmt::Display for TraitAndProjections<'tcx> {"}, {"sha": "8f3366eacb3645ceade26085e26160d1da174f03", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -21,7 +21,7 @@ use rustc_typeck::middle::resolve_lifetime;\n use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;\n use rustc_typeck::middle::subst::Subst;\n-use rustc_typeck::middle::ty::{self, Ty, RegionEscape};\n+use rustc_typeck::middle::ty::{self, Ty, TypeFoldable};\n use rustc_typeck::middle::ty::relate::TypeRelation;\n use rustc_typeck::middle::infer::{self, TypeOrigin};\n use rustc_typeck::middle::infer::lub::Lub;"}, {"sha": "b8dfb9f74c6a42b55f85c266a467394fad6056ed", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -33,7 +33,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use rustc::mir;\n use rustc::mir::visit::MutVisitor;"}, {"sha": "5a48d6019d69937b455ea860d760ed43e10e048f", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -22,7 +22,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{self, ToPredicate, Ty, HasTypeFlags};\n+use middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n \n use rbml;\n use rbml::leb128;"}, {"sha": "d694374acc927898e8effc4e517ccfb7678f34cc", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -42,7 +42,7 @@ use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n use middle::pat_util::simple_name;\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc::util::common::time;"}, {"sha": "e3b7502b69c0e164423bf7e34f18ed271934da4c", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -50,7 +50,7 @@ use trans::meth;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{self, Ty, HasTypeFlags, RegionEscape};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::MethodCall;\n use rustc_front::hir;\n "}, {"sha": "5046c2e29207cef7dea60f92cc0e65d69d0b0f5f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -37,7 +37,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use middle::traits;\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use rustc_front::hir;\n use rustc::mir::repr::Mir;\n@@ -469,7 +469,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     }\n \n     pub fn monomorphize<T>(&self, value: &T) -> T\n-        where T : TypeFoldable<'tcx> + HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         monomorphize::apply_param_substs(self.ccx.tcx(),\n                                          self.param_substs,\n@@ -650,7 +650,7 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n     }\n \n     pub fn monomorphize<T>(&self, value: &T) -> T\n-        where T : TypeFoldable<'tcx> + HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         monomorphize::apply_param_substs(self.tcx(),\n                                          self.fcx.param_substs,"}, {"sha": "07cc6ec8fbd1133c68640b5628946d46ef6dede1", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -35,7 +35,7 @@ use trans::glue;\n use trans::type_of;\n use trans::machine;\n use trans::type_::Type;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::subst::Substs;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;"}, {"sha": "bd12dd8c3effcc9ad49ad5185daa835fd8e555c1", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -34,7 +34,7 @@ use trans::machine;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of::*;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::MethodCall;\n \n use syntax::ast;"}, {"sha": "e461a1c05bcf39323b44687915094870bd57e8fa", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -11,7 +11,7 @@\n use back::abi;\n use llvm::ValueRef;\n use middle::subst::Substs;\n-use middle::ty::{Ty, HasTypeFlags};\n+use middle::ty::{Ty, TypeFoldable};\n use rustc::middle::const_eval::ConstVal;\n use rustc::mir::repr as mir;\n use trans::common::{self, Block, C_bool, C_bytes, C_floating_f64, C_integral, C_str_slice};"}, {"sha": "0e2387e3e349e3839725964fb9d8ced5c8e529a8", "filename": "src/librustc_trans/trans/mir/did.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -12,7 +12,7 @@\n \n use syntax::codemap::DUMMY_SP;\n use rustc::front::map;\n-use rustc::middle::ty::{self, Ty, HasTypeFlags};\n+use rustc::middle::ty::{self, Ty, TypeFoldable};\n use rustc::middle::subst::Substs;\n use rustc::middle::const_eval;\n use rustc::middle::def_id::DefId;"}, {"sha": "ba0427ec3d6862918a4ea8cd83563f3d19f629b0", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::middle::ty::{self, Ty, HasTypeFlags};\n+use rustc::middle::ty::{self, Ty, TypeFoldable};\n use rustc::mir::repr as mir;\n use rustc::mir::tcx::LvalueTy;\n use trans::adt;"}, {"sha": "6240473b78ec3ecd4875414961ebb4b2c36e6946", "filename": "src/librustc_trans/trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::middle::ty::{Ty, HasTypeFlags};\n+use rustc::middle::ty::{Ty, TypeFoldable};\n use rustc::mir::repr as mir;\n use trans::base;\n use trans::common::{self, Block};"}, {"sha": "416c1908c973ec5bd5285a0951d7742cfa3e23db", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -23,7 +23,7 @@ use trans::base;\n use trans::common::*;\n use trans::declare;\n use trans::foreign;\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty};\n use rustc::front::map as hir_map;\n \n use rustc_front::hir;\n@@ -299,7 +299,7 @@ pub fn apply_param_substs<'tcx,T>(tcx: &ty::ctxt<'tcx>,\n                                   param_substs: &Substs<'tcx>,\n                                   value: &T)\n                                   -> T\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     let substituted = value.subst(tcx, param_substs);\n     normalize_associated_type(tcx, &substituted)"}, {"sha": "8696bdd60e2915df6e664b0c866ea7c01324f513", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -17,7 +17,7 @@ use trans::adt;\n use trans::common::*;\n use trans::foreign;\n use trans::machine;\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use trans::type_::Type;\n "}, {"sha": "98effeefad2a74fa9aaba4cc421683248c295368", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -57,7 +57,7 @@ use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use middle::traits;\n-use middle::ty::{self, Ty, ToPredicate, HasTypeFlags};\n+use middle::ty::{self, Ty, ToPredicate, TypeFoldable};\n use middle::ty::wf::object_region_bounds;\n use require_c_abi_if_variadic;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,"}, {"sha": "926d7fd6e25eb10ccffb4ff385b755651dfc17da", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -14,7 +14,7 @@ use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding};\n use middle::pat_util::pat_is_resolved_const;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, HasTypeFlags, LvaluePreference};\n+use middle::ty::{self, Ty, TypeFoldable, LvaluePreference};\n use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n use check::{check_expr_with_lvalue_pref};"}, {"sha": "91916efa882778226c992ec971cc40d6f8c50eaa", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -11,7 +11,6 @@\n use middle::infer::InferCtxt;\n use middle::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n                      SelectionContext, ObligationCause};\n-use middle::ty::HasTypeFlags;\n use middle::ty::fold::TypeFoldable;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -23,7 +22,7 @@ pub fn normalize_associated_types_in<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                                                 body_id: ast::NodeId,\n                                                 value: &T)\n                                                 -> T\n-    where T : TypeFoldable<'tcx> + HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     debug!(\"normalize_associated_types_in(value={:?})\", value);\n     let mut selcx = SelectionContext::new(infcx);"}, {"sha": "fd6c4f44ba42809d9ffb62e056b49b5f1dae95b3", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -45,7 +45,7 @@ use super::structurally_resolved_type;\n \n use lint;\n use middle::def_id::DefId;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::cast::{CastKind, CastTy};\n use syntax::codemap::Span;\n use rustc_front::hir;"}, {"sha": "44b36294cb480d56867c65231661c9d9ecb784b1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -17,7 +17,7 @@ use middle::def_id::DefId;\n use middle::privacy::{AllPublic, DependsOn, LastPrivate, LastMod};\n use middle::subst;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPredicate, ToPolyTraitRef, TraitRef};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use middle::ty::adjustment::{AdjustDerefRef, AutoDerefRef, AutoPtr};\n use middle::infer;\n "}, {"sha": "44dd0ef7b17d836e055127ba664ee6aa1733316e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -19,9 +19,7 @@ use middle::def_id::DefId;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n-use middle::ty::{self, NoPreference, RegionEscape, Ty, ToPolyTraitRef, TraitRef};\n-use middle::ty::HasTypeFlags;\n-use middle::ty::fold::TypeFoldable;\n+use middle::ty::{self, NoPreference, Ty, ToPolyTraitRef, TraitRef, TypeFoldable};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeOrigin};\n use syntax::ast;"}, {"sha": "560e84b52d1d6966a8e2ee9fd70ff9703ce0632a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -16,7 +16,7 @@ use CrateCtxt;\n use astconv::AstConv;\n use check::{self, FnCtxt};\n use front::map as hir_map;\n-use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate, HasTypeFlags};\n+use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use middle::cstore::{self, CrateStore, DefLike};\n use middle::def;\n use middle::def_id::DefId;"}, {"sha": "3cf75483fea0f28bb17c466556fb79e2b9549dbb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -97,7 +97,7 @@ use middle::traits::{self, report_fulfillment_errors};\n use middle::ty::{GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n-use middle::ty::{self, HasTypeFlags, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPolyTraitRef, Ty};\n use middle::ty::{MethodCall, MethodCallee};\n use middle::ty::adjustment;\n use middle::ty::error::TypeError;\n@@ -318,7 +318,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n                                         body_id: ast::NodeId,\n                                         value: &T)\n                                         -> T\n-        where T : TypeFoldable<'tcx> + HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         let mut fulfillment_cx = self.infcx.fulfillment_cx.borrow_mut();\n         assoc::normalize_associated_types_in(&self.infcx,\n@@ -1334,7 +1334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                   substs: &Substs<'tcx>,\n                                   value: &T)\n                                   -> T\n-        where T : TypeFoldable<'tcx> + HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         let value = value.subst(self.tcx(), substs);\n         let result = self.normalize_associated_types_in(span, &value);\n@@ -1360,7 +1360,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n \n     fn normalize_associated_types_in<T>(&self, span: Span, value: &T) -> T\n-        where T : TypeFoldable<'tcx> + HasTypeFlags\n+        where T : TypeFoldable<'tcx>\n     {\n         self.inh.normalize_associated_types_in(span, self.body_id, value)\n     }"}, {"sha": "f4841b75d13d55e8da0b3beb3efa8d158e3d60cd", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -19,7 +19,7 @@ use super::{\n     FnCtxt,\n };\n use middle::def_id::DefId;\n-use middle::ty::{Ty, HasTypeFlags, PreferMutLvalue};\n+use middle::ty::{Ty, TypeFoldable, PreferMutLvalue};\n use syntax::ast;\n use syntax::parse::token;\n use rustc_front::hir;"}, {"sha": "47cd31d9898d19bb9f4e48fc14f45ae8bbc3718f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -92,7 +92,7 @@ use middle::mem_categorization::Categorization;\n use middle::region::{self, CodeExtent};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, Ty, MethodCall, HasTypeFlags};\n+use middle::ty::{self, Ty, MethodCall, TypeFoldable};\n use middle::infer::{self, GenericKind, InferCtxt, SubregionOrigin, TypeOrigin, VerifyBound};\n use middle::pat_util;\n use middle::ty::adjustment;"}, {"sha": "c2abb074efa136690a25fca2cf752e37f0dbe5ca", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -17,7 +17,7 @@ use astconv::AstConv;\n use check::FnCtxt;\n use middle::def_id::DefId;\n use middle::pat_util;\n-use middle::ty::{self, Ty, MethodCall, MethodCallee, HasTypeFlags};\n+use middle::ty::{self, Ty, MethodCall, MethodCallee};\n use middle::ty::adjustment;\n use middle::ty::fold::{TypeFolder,TypeFoldable};\n use middle::infer;"}, {"sha": "2c8fedb46a7b7b52e770f9194875b1c8854a2be9", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -20,8 +20,7 @@ use middle::def_id::DefId;\n use middle::lang_items::UnsizeTraitLangItem;\n use middle::subst::{self, Subst};\n use middle::traits;\n-use middle::ty;\n-use middle::ty::RegionEscape;\n+use middle::ty::{self, TypeFoldable};\n use middle::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use middle::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use middle::ty::{Ty, TyBool, TyChar, TyEnum, TyError};"}, {"sha": "867d12a1def92eeef016d512918a40263ae3d30b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8350387c57582561874aa2a5aeb4d5370cfc04/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=1e8350387c57582561874aa2a5aeb4d5370cfc04", "patch": "@@ -103,7 +103,7 @@ use front::map as hir_map;\n use middle::def;\n use middle::infer::{self, TypeOrigin};\n use middle::subst;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use session::config;\n use util::common::time;\n use rustc_front::hir;"}]}