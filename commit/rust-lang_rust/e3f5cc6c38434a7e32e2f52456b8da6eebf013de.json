{"sha": "e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "node_id": "C_kwDOAAsO6NoAKGUzZjVjYzZjMzg0MzRhN2UzMmUyZjUyNDU2YjhkYTZlZWJmMDEzZGU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-12-23T09:01:51Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-12-23T09:09:35Z"}, "message": "implement `generic_arg_infer` for array lengths", "tree": {"sha": "3916973e95bca57176243c04d0ff0a29ab83c4cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3916973e95bca57176243c04d0ff0a29ab83c4cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "html_url": "https://github.com/rust-lang/rust/commit/e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "html_url": "https://github.com/rust-lang/rust/commit/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2"}], "stats": {"total": 212, "additions": 161, "deletions": 51}, "files": [{"sha": "75f384405bb2b5c434940ae89f634d5a6aea57d5", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -34,7 +34,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Repeat(ref expr, ref count) => {\n                     let expr = self.lower_expr(expr);\n-                    let count = self.lower_anon_const(count);\n+                    let count = self.lower_array_length(count);\n                     hir::ExprKind::Repeat(expr, count)\n                 }\n                 ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),"}, {"sha": "35eb716949a13ccf38368ef890119a70e14a3854", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -56,6 +56,7 @@ use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::LintBuffer;\n+use rustc_session::parse::feature_err;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n@@ -1248,7 +1249,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 ))\n             }\n             TyKind::Array(ref ty, ref length) => {\n-                hir::TyKind::Array(self.lower_ty(ty, itctx), self.lower_anon_const(length))\n+                hir::TyKind::Array(self.lower_ty(ty, itctx), self.lower_array_length(length))\n             }\n             TyKind::Typeof(ref expr) => hir::TyKind::Typeof(self.lower_anon_const(expr)),\n             TyKind::TraitObject(ref bounds, kind) => {\n@@ -2039,6 +2040,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.expr_block(block, AttrVec::new())\n     }\n \n+    fn lower_array_length(&mut self, c: &AnonConst) -> hir::ArrayLen {\n+        match c.value.kind {\n+            ExprKind::Underscore => {\n+                if self.sess.features_untracked().generic_arg_infer {\n+                    hir::ArrayLen::Infer(self.lower_node_id(c.id), c.value.span)\n+                } else {\n+                    feature_err(\n+                        &self.sess.parse_sess,\n+                        sym::generic_arg_infer,\n+                        c.value.span,\n+                        \"using `_` for array lengths is unstable\",\n+                    )\n+                    .emit();\n+                    hir::ArrayLen::Body(self.lower_anon_const(c))\n+                }\n+            }\n+            _ => hir::ArrayLen::Body(self.lower_anon_const(c)),\n+        }\n+    }\n+\n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| hir::AnonConst {\n             hir_id: this.lower_node_id(c.id),"}, {"sha": "698472565fbfaa76ef4d909839d06657be9fe102", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -1407,6 +1407,20 @@ impl fmt::Display for ConstContext {\n /// A literal.\n pub type Lit = Spanned<LitKind>;\n \n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n+pub enum ArrayLen {\n+    Infer(HirId, Span),\n+    Body(AnonConst),\n+}\n+\n+impl ArrayLen {\n+    pub fn hir_id(&self) -> HirId {\n+        match self {\n+            &ArrayLen::Infer(hir_id, _) | &ArrayLen::Body(AnonConst { hir_id, body: _ }) => hir_id,\n+        }\n+    }\n+}\n+\n /// A constant (expression) that's not an item or associated item,\n /// but needs its own `DefId` for type-checking, const-eval, etc.\n /// These are usually found nested inside types (e.g., array lengths)\n@@ -1756,7 +1770,7 @@ pub enum ExprKind<'hir> {\n     ///\n     /// E.g., `[1; 5]`. The first expression is the element\n     /// to be repeated; the second is the number of times to repeat it.\n-    Repeat(&'hir Expr<'hir>, AnonConst),\n+    Repeat(&'hir Expr<'hir>, ArrayLen),\n \n     /// A suspension point for generators (i.e., `yield <expr>`).\n     Yield(&'hir Expr<'hir>, YieldSource),\n@@ -2266,7 +2280,7 @@ pub enum TyKind<'hir> {\n     /// A variable length slice (i.e., `[T]`).\n     Slice(&'hir Ty<'hir>),\n     /// A fixed length array (i.e., `[T; n]`).\n-    Array(&'hir Ty<'hir>, AnonConst),\n+    Array(&'hir Ty<'hir>, ArrayLen),\n     /// A raw pointer (i.e., `*const T` or `*mut T`).\n     Ptr(MutTy<'hir>),\n     /// A reference (i.e., `&'a T` or `&'a mut T`)."}, {"sha": "d0eee422202afff8a23a2e114c42c013f0859749", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -383,6 +383,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_pat(&mut self, p: &'v Pat<'v>) {\n         walk_pat(self, p)\n     }\n+    fn visit_array_length(&mut self, len: &'v ArrayLen) {\n+        walk_array_len(self, len)\n+    }\n     fn visit_anon_const(&mut self, c: &'v AnonConst) {\n         walk_anon_const(self, c)\n     }\n@@ -753,7 +756,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n-            visitor.visit_anon_const(length)\n+            visitor.visit_array_length(length)\n         }\n         TyKind::TraitObject(bounds, ref lifetime, _syntax) => {\n             for bound in bounds {\n@@ -1124,6 +1127,13 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {\n     }\n }\n \n+pub fn walk_array_len<'v, V: Visitor<'v>>(visitor: &mut V, len: &'v ArrayLen) {\n+    match len {\n+        &ArrayLen::Infer(hir_id, _span) => visitor.visit_id(hir_id),\n+        ArrayLen::Body(c) => visitor.visit_anon_const(c),\n+    }\n+}\n+\n pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonConst) {\n     visitor.visit_id(constant.hir_id);\n     visitor.visit_nested_body(constant.body);\n@@ -1147,7 +1157,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n-            visitor.visit_anon_const(count)\n+            visitor.visit_array_length(count)\n         }\n         ExprKind::Struct(ref qpath, fields, ref optional_base) => {\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);"}, {"sha": "54ee553a4f66a939e91d8b9e75b3aec2ddf9d15b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -358,7 +358,7 @@ impl<'a> State<'a> {\n                 self.word(\"[\");\n                 self.print_type(&ty);\n                 self.word(\"; \");\n-                self.print_anon_const(length);\n+                self.print_array_length(length);\n                 self.word(\"]\");\n             }\n             hir::TyKind::Typeof(ref e) => {\n@@ -1065,6 +1065,13 @@ impl<'a> State<'a> {\n         self.print_else(elseopt)\n     }\n \n+    pub fn print_array_length(&mut self, len: &hir::ArrayLen) {\n+        match len {\n+            hir::ArrayLen::Infer(_, _) => self.word(\"_\"),\n+            hir::ArrayLen::Body(ct) => self.print_anon_const(ct),\n+        }\n+    }\n+\n     pub fn print_anon_const(&mut self, constant: &hir::AnonConst) {\n         self.ann.nested(self, Nested::Body(constant.body))\n     }\n@@ -1140,12 +1147,12 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n-    fn print_expr_repeat(&mut self, element: &hir::Expr<'_>, count: &hir::AnonConst) {\n+    fn print_expr_repeat(&mut self, element: &hir::Expr<'_>, count: &hir::ArrayLen) {\n         self.ibox(INDENT_UNIT);\n         self.word(\"[\");\n         self.print_expr(element);\n         self.word_space(\";\");\n-        self.print_anon_const(count);\n+        self.print_array_length(count);\n         self.word(\"]\");\n         self.end()\n     }"}, {"sha": "bdde6b4a356c195206cb146b006d1df6946aa919", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -583,9 +583,12 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::ConstBlock { value }\n             }\n             // Now comes the rote stuff:\n-            hir::ExprKind::Repeat(ref v, ref count) => {\n-                let count_def_id = self.tcx.hir().local_def_id(count.hir_id);\n-                let count = ty::Const::from_anon_const(self.tcx, count_def_id);\n+            hir::ExprKind::Repeat(ref v, _) => {\n+                let ty = self.typeck_results().expr_ty(expr);\n+                let count = match ty.kind() {\n+                    ty::Array(_, ct) => ct,\n+                    _ => span_bug!(expr.span, \"unexpected repeat expr ty: {:?}\", ty),\n+                };\n \n                 ExprKind::Repeat { value: self.mirror_expr(v), count }\n             }"}, {"sha": "23f5b17fa78893187e796d3fe5c5fa452041cb27", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -1326,12 +1326,18 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 }\n                 intravisit::walk_qpath(self, path, t.hir_id, t.span);\n             }\n-            hir::TyKind::Array(ref ty, ref anon_const) => {\n+            hir::TyKind::Array(ref ty, ref length) => {\n                 self.visit_ty(ty);\n                 let map = self.tcx.hir();\n-                self.nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n-                    v.visit_expr(&map.body(anon_const.body).value)\n-                });\n+                match length {\n+                    // FIXME(generic_arg_infer): We probably want to\n+                    // output the inferred type here? :shrug:\n+                    hir::ArrayLen::Infer(..) => {}\n+                    hir::ArrayLen::Body(anon_const) => self\n+                        .nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n+                            v.visit_expr(&map.body(anon_const.body).value)\n+                        }),\n+                }\n             }\n             hir::TyKind::OpaqueDef(item_id, _) => {\n                 let item = self.tcx.hir().item(item_id);\n@@ -1390,12 +1396,18 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     v.visit_expr(&body.value)\n                 });\n             }\n-            hir::ExprKind::Repeat(ref expr, ref anon_const) => {\n+            hir::ExprKind::Repeat(ref expr, ref length) => {\n                 self.visit_expr(expr);\n                 let map = self.tcx.hir();\n-                self.nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n-                    v.visit_expr(&map.body(anon_const.body).value)\n-                });\n+                match length {\n+                    // FIXME(generic_arg_infer): We probably want to\n+                    // output the inferred type here? :shrug:\n+                    hir::ArrayLen::Infer(..) => {}\n+                    hir::ArrayLen::Body(anon_const) => self\n+                        .nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n+                            v.visit_expr(&map.body(anon_const.body).value)\n+                        }),\n+                }\n             }\n             // In particular, we take this branch for call and path expressions,\n             // where we'll index the idents involved just by continuing to walk."}, {"sha": "5d0de4441992a03224776e4661e600bae07a8881", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -310,9 +310,13 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let nested = bounds_to_string(&bounds);\n                 Ok(text_sig(nested))\n             }\n-            hir::TyKind::Array(ref ty, ref anon_const) => {\n+            hir::TyKind::Array(ref ty, ref length) => {\n                 let nested_ty = ty.make(offset + 1, id, scx)?;\n-                let expr = id_to_string(&scx.tcx.hir(), anon_const.body.hir_id).replace('\\n', \" \");\n+                let hir_id = match length {\n+                    &hir::ArrayLen::Infer(hir_id, _) => hir_id,\n+                    hir::ArrayLen::Body(anon_const) => anon_const.hir_id,\n+                };\n+                let expr = id_to_string(&scx.tcx.hir(), hir_id).replace('\\n', \" \");\n                 let text = format!(\"[{}; {}]\", nested_ty.text, expr);\n                 Ok(replace_text(nested_ty, text))\n             }"}, {"sha": "956696546da8ef9a9298bab17427d54f17c522ca", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -104,7 +104,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n                 GenericParamDefKind::Const { .. },\n             ) if tcx.type_of(param.def_id) == tcx.types.usize => {\n-                let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id));\n+                let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id()));\n                 if let Ok(snippet) = snippet {\n                     err.span_suggestion(\n                         arg.span(),"}, {"sha": "8226ffbccc4316a53244c4facc3f6243cd0915ee", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -2363,8 +2363,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.normalize_ty(span, tcx.at(span).type_of(def_id).subst(tcx, substs))\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n-                let length_def_id = tcx.hir().local_def_id(length.hir_id);\n-                let length = ty::Const::from_anon_const(tcx, length_def_id);\n+                let length = match length {\n+                    &hir::ArrayLen::Infer(_, span) => self.ct_infer(tcx.types.usize, None, span),\n+                    hir::ArrayLen::Body(constant) => {\n+                        let length_def_id = tcx.hir().local_def_id(constant.hir_id);\n+                        ty::Const::from_anon_const(tcx, length_def_id)\n+                    }\n+                };\n+\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }"}, {"sha": "ea46478450977598ca7348fdca11f41d862a5268", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -1238,12 +1238,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_expr_repeat(\n         &self,\n         element: &'tcx hir::Expr<'tcx>,\n-        count: &'tcx hir::AnonConst,\n+        count: &'tcx hir::ArrayLen,\n         expected: Expectation<'tcx>,\n         _expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let count = self.to_const(count);\n+        let count = self.array_length_to_const(count);\n \n         let uty = match expected {\n             ExpectHasType(uty) => match *uty.kind() {"}, {"sha": "1aca2911533ad0d8af297a55205011aca1bffe71", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -498,6 +498,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n+    pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> &'tcx ty::Const<'tcx> {\n+        match length {\n+            &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n+            hir::ArrayLen::Body(anon_const) => self.to_const(anon_const),\n+        }\n+    }\n+\n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n         let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n         let c = ty::Const::from_anon_const(self.tcx, const_def_id);"}, {"sha": "dc303ad5e04f2c447a4bc38f0f1c6535a1f5ab21", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -182,7 +182,7 @@ crate fn placeholder_type_error<'tcx>(\n         sugg.push((span, format!(\", {}\", type_name)));\n     }\n \n-    let mut err = bad_placeholder_type(tcx, placeholder_types, kind);\n+    let mut err = bad_placeholder(tcx, \"type\", placeholder_types, kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -314,8 +314,9 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Utility types and common code for the above passes.\n \n-fn bad_placeholder_type<'tcx>(\n+fn bad_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    placeholder_kind: &'static str,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n ) -> rustc_errors::DiagnosticBuilder<'tcx> {\n@@ -326,7 +327,8 @@ fn bad_placeholder_type<'tcx>(\n         tcx.sess,\n         spans.clone(),\n         E0121,\n-        \"the type placeholder `_` is not allowed within types on item signatures for {}\",\n+        \"the {} placeholder `_` is not allowed within types on item signatures for {}\",\n+        placeholder_kind,\n         kind\n     );\n     for span in spans {\n@@ -393,7 +395,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder_type(self.tcx(), vec![span], \"generic\").emit();\n+        bad_placeholder(self.tcx(), \"const\", vec![span], \"generic\").emit();\n         // Typeck doesn't expect erased regions to be returned from `type_of`.\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n@@ -1482,7 +1484,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     // `enum` discriminants (i.e. `D` in `enum Foo { Bar = D }`),\n                     // as they shouldn't be able to cause query cycle errors.\n                     Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n-                    | Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n+                        if constant.hir_id() == hir_id =>\n+                    {\n+                        Some(parent_def_id.to_def_id())\n+                    }\n+                    Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n                         if constant.hir_id == hir_id =>\n                     {\n                         Some(parent_def_id.to_def_id())\n@@ -1788,7 +1794,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n+                    let mut diag = bad_placeholder(tcx, \"type\", visitor.0, \"return type\");\n                     let ret_ty = fn_sig.skip_binder().output();\n                     if !ret_ty.references_error() {\n                         if !ret_ty.is_closure() {"}, {"sha": "04e887bf7420f80a893c6856af57b133a8e9e653", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -13,7 +13,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n use super::ItemCtxt;\n-use super::{bad_placeholder_type, is_suggestable_infer_ty};\n+use super::{bad_placeholder, is_suggestable_infer_ty};\n \n /// Computes the relevant generic parameter for a potential generic const argument.\n ///\n@@ -490,7 +490,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n-                    if constant.hir_id == hir_id =>\n+                    if constant.hir_id() == hir_id =>\n                 {\n                     tcx.types.usize\n                 }\n@@ -788,7 +788,7 @@ fn infer_placeholder_type<'a>(\n             err.emit();\n         }\n         None => {\n-            let mut diag = bad_placeholder_type(tcx, vec![span], kind);\n+            let mut diag = bad_placeholder(tcx, \"type\", vec![span], kind);\n \n             if !ty.references_error() {\n                 let mut mk_nameable = MakeNameable::new(tcx);"}, {"sha": "56b88a426a1a8256623c64b31cd1091a7eae6c0f", "filename": "src/test/ui/const-generics/generic_arg_infer/array-in-sig.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -0,0 +1,12 @@\n+// To avoid having to `or` gate `_` as an expr.\n+#![feature(generic_arg_infer)]\n+\n+fn foo() -> [u8; _] {\n+    //~^ ERROR the const placeholder `_` is not allowed within types on item signatures for generics\n+    // FIXME(generic_arg_infer): this error message should say in the return type or sth like that.\n+    [0; 3]\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "eaa12b4192dc60c4b55e68a91a274806913b01fb", "filename": "src/test/ui/const-generics/generic_arg_infer/array-in-sig.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the const placeholder `_` is not allowed within types on item signatures for generics\n+  --> $DIR/array-in-sig.rs:4:18\n+   |\n+LL | fn foo() -> [u8; _] {\n+   |                  ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "d3e53d7a89267c7c467428d350401cda3f902730", "filename": "src/test/ui/const-generics/generic_arg_infer/array-repeat-expr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-repeat-expr.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+// To avoid having to `or` gate `_` as an expr.\n+#![feature(generic_arg_infer)]\n+\n+fn foo() -> [u8; 3] {\n+    let x: [u8; _] = [0; _];\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!([0; _], foo());\n+}"}, {"sha": "29aa0f59d74380eab6a225c26e5786d7bb37c3c1", "filename": "src/test/ui/const-generics/generic_arg_infer/infer-arg-test.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.rs?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -18,7 +18,5 @@ fn main() {\n   let a: All<_, _, _>;\n   all_fn();\n   let v: [u8; _];\n-  //~^ ERROR in expressions\n   let v: [u8; 10] = [0; _];\n-  //~^ ERROR in expressions\n }", "previous_filename": "src/test/ui/inference/infer-arg-test.rs"}, {"sha": "e6d0c743d01b9b6395228a081528f474ab02fe3c", "filename": "src/test/ui/const-generics/generic_arg_infer/infer-arg-test.stderr", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3f5cc6c38434a7e32e2f52456b8da6eebf013de/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.stderr?ref=e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "patch": "@@ -10,18 +10,6 @@ error: expected identifier, found reserved identifier `_`\n LL | fn bad_infer_fn<_>() {}\n    |                 ^ expected identifier, found reserved identifier\n \n-error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/infer-arg-test.rs:20:15\n-   |\n-LL |   let v: [u8; _];\n-   |               ^ `_` not allowed here\n-\n-error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/infer-arg-test.rs:22:25\n-   |\n-LL |   let v: [u8; 10] = [0; _];\n-   |                         ^ `_` not allowed here\n-\n error[E0392]: parameter `_` is never used\n   --> $DIR/infer-arg-test.rs:7:17\n    |\n@@ -31,6 +19,6 @@ LL | struct BadInfer<_>;\n    = help: consider removing `_`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `_` to be a const parameter, use `const _: usize` instead\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0392`.", "previous_filename": "src/test/ui/inference/infer-arg-test.stderr"}]}