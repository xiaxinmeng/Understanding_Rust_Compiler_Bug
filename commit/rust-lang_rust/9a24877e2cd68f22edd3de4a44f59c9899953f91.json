{"sha": "9a24877e2cd68f22edd3de4a44f59c9899953f91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMjQ4NzdlMmNkNjhmMjJlZGQzZGU0YTQ0ZjU5Yzk4OTk5NTNmOTE=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:06:25Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:16:10Z"}, "message": "Move fn_to_numeric_cast_with_truncation to its own module", "tree": {"sha": "78cb64bf7add1259a6e39352c4175988c7d5f26b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78cb64bf7add1259a6e39352c4175988c7d5f26b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a24877e2cd68f22edd3de4a44f59c9899953f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a24877e2cd68f22edd3de4a44f59c9899953f91", "html_url": "https://github.com/rust-lang/rust/commit/9a24877e2cd68f22edd3de4a44f59c9899953f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a24877e2cd68f22edd3de4a44f59c9899953f91/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458f6d19d0c51ee97b7ac90ce60994f627983824", "url": "https://api.github.com/repos/rust-lang/rust/commits/458f6d19d0c51ee97b7ac90ce60994f627983824", "html_url": "https://github.com/rust-lang/rust/commit/458f6d19d0c51ee97b7ac90ce60994f627983824"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "0085c7b27b2906021fdccc7e706067207fae7c20", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_with_truncation.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9a24877e2cd68f22edd3de4a44f59c9899953f91/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a24877e2cd68f22edd3de4a44f59c9899953f91/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs?ref=9a24877e2cd68f22edd3de4a44f59c9899953f91", "patch": "@@ -0,0 +1,39 @@\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n+\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+\n+use super::{utils, FN_TO_NUMERIC_CAST_WITH_TRUNCATION};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    // We only want to check casts to `ty::Uint` or `ty::Int`\n+    match cast_to.kind() {\n+        ty::Uint(_) | ty::Int(..) => { /* continue on */ },\n+        _ => return,\n+    }\n+    match cast_from.kind() {\n+        ty::FnDef(..) | ty::FnPtr(_) => {\n+            let mut applicability = Applicability::MaybeIncorrect;\n+            let from_snippet = snippet_with_applicability(cx, cast_expr.span, \"x\", &mut applicability);\n+\n+            let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n+            if to_nbits < cx.tcx.data_layout.pointer_size.bits() {\n+                span_lint_and_sugg(\n+                    cx,\n+                    FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+                    expr.span,\n+                    &format!(\n+                        \"casting function pointer `{}` to `{}`, which truncates the value\",\n+                        from_snippet, cast_to\n+                    ),\n+                    \"try\",\n+                    format!(\"{} as usize\", from_snippet),\n+                    applicability,\n+                );\n+            }\n+        },\n+        _ => {},\n+    }\n+}"}, {"sha": "a80de01cfaf362afe549122066fb29df485f5246", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9a24877e2cd68f22edd3de4a44f59c9899953f91/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a24877e2cd68f22edd3de4a44f59c9899953f91/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=9a24877e2cd68f22edd3de4a44f59c9899953f91", "patch": "@@ -4,6 +4,7 @@ mod cast_possible_wrap;\n mod cast_precision_loss;\n mod cast_sign_loss;\n mod fn_to_numeric_cast;\n+mod fn_to_numeric_cast_with_truncation;\n mod unnecessary_cast;\n mod utils;\n \n@@ -304,7 +305,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             }\n \n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n-            lint_fn_to_numeric_cast(cx, expr, cast_expr, cast_from, cast_to);\n+            fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n             lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n                 cast_possible_truncation::check(cx, expr, cast_from, cast_to);\n@@ -358,43 +359,6 @@ fn lint_cast_ptr_alignment<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, cast_f\n     }\n }\n \n-fn lint_fn_to_numeric_cast(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_expr: &Expr<'_>,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n-) {\n-    // We only want to check casts to `ty::Uint` or `ty::Int`\n-    match cast_to.kind() {\n-        ty::Uint(_) | ty::Int(..) => { /* continue on */ },\n-        _ => return,\n-    }\n-    match cast_from.kind() {\n-        ty::FnDef(..) | ty::FnPtr(_) => {\n-            let mut applicability = Applicability::MaybeIncorrect;\n-            let from_snippet = snippet_with_applicability(cx, cast_expr.span, \"x\", &mut applicability);\n-\n-            let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n-            if to_nbits < cx.tcx.data_layout.pointer_size.bits() {\n-                span_lint_and_sugg(\n-                    cx,\n-                    FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-                    expr.span,\n-                    &format!(\n-                        \"casting function pointer `{}` to `{}`, which truncates the value\",\n-                        from_snippet, cast_to\n-                    ),\n-                    \"try\",\n-                    format!(\"{} as usize\", from_snippet),\n-                    applicability,\n-                );\n-            }\n-        },\n-        _ => {},\n-    }\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for casts of `&T` to `&mut T` anywhere in the code.\n     ///"}]}