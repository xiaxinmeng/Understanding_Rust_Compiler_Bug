{"sha": "56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZWNiNTFiYTYyYjk3M2UzYTQxNWNjMGQ2ZDY5NzlkZDdhZWVlN2Q=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-19T23:06:41Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcore: use unboxed closures in `Option` methods", "tree": {"sha": "444b159829470717a6cccb975157d2cac73d5536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/444b159829470717a6cccb975157d2cac73d5536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d", "html_url": "https://github.com/rust-lang/rust/commit/56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d/comments", "author": null, "committer": null, "parents": [{"sha": "567b90ff095076054c98fa2f08d6c552ae60968d", "url": "https://api.github.com/repos/rust-lang/rust/commits/567b90ff095076054c98fa2f08d6c552ae60968d", "html_url": "https://github.com/rust-lang/rust/commit/567b90ff095076054c98fa2f08d6c552ae60968d"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "7be47f73e9ee7feef36c4ffee572de7a7fd9cc9b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=56ecb51ba62b973e3a415cc0d6d6979dd7aeee7d", "patch": "@@ -156,7 +156,7 @@ use result::Result::{Ok, Err};\n use slice;\n use slice::AsSlice;\n use clone::Clone;\n-use ops::Deref;\n+use ops::{Deref, FnOnce};\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -389,7 +389,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for conventions\"]\n-    pub fn unwrap_or_else(self, f: || -> T) -> T {\n+    pub fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n         match self {\n             Some(x) => x,\n             None => f()\n@@ -413,7 +413,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn map<U>(self, f: |T| -> U) -> Option<U> {\n+    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n         match self {\n             Some(x) => Some(f(x)),\n             None => None\n@@ -433,7 +433,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn map_or<U>(self, def: U, f: |T| -> U) -> U {\n+    pub fn map_or<U, F: FnOnce(T) -> U>(self, def: U, f: F) -> U {\n         match self {\n             Some(t) => f(t),\n             None => def\n@@ -455,7 +455,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn map_or_else<U>(self, def: || -> U, f: |T| -> U) -> U {\n+    pub fn map_or_else<U, D: FnOnce() -> U, F: FnOnce(T) -> U>(self, def: D, f: F) -> U {\n         match self {\n             Some(t) => f(t),\n             None => def()\n@@ -497,7 +497,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[experimental]\n-    pub fn ok_or_else<E>(self, err: || -> E) -> Result<T, E> {\n+    pub fn ok_or_else<E, F: FnOnce() -> E>(self, err: F) -> Result<T, E> {\n         match self {\n             Some(v) => Ok(v),\n             None => Err(err()),\n@@ -615,7 +615,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn and_then<U>(self, f: |T| -> Option<U>) -> Option<U> {\n+    pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {\n         match self {\n             Some(x) => f(x),\n             None => None,\n@@ -667,7 +667,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn or_else(self, f: || -> Option<T>) -> Option<T> {\n+    pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n         match self {\n             Some(_) => self,\n             None => f()"}]}