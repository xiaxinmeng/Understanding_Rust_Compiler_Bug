{"sha": "7c23ff278ee1314b8cb30ec37b04c686f47056ad", "node_id": "C_kwDOAAsO6NoAKDdjMjNmZjI3OGVlMTMxNGI4Y2IzMGVjMzdiMDRjNjg2ZjQ3MDU2YWQ", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-30T02:33:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T02:33:36Z"}, "message": "Rollup merge of #89098 - GuillaumeGomez:where-bounds-order, r=camelid\n\nFix generics where bounds order\n\nFixes #88809.\n\nLike said on the above issue, the issue is that we were expecting `Symbol` comparisons to be string-based but they are integer-based (because `Symbol` is an integer), messing up the bounds order. To fix it, I simply stored into a `FxIndexMap` instead.\n\nr? ``@jyn514``", "tree": {"sha": "b7e9fe33b9a95bfb1081623c34db11dfbf20486f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e9fe33b9a95bfb1081623c34db11dfbf20486f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c23ff278ee1314b8cb30ec37b04c686f47056ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVSIACRBK7hj4Ov3rIwAA3ToIABnLVGFk4C9M/nGnKAIOHq4s\nTqLFRz0tH5mFhpUkyTD/ApCbOh+BzQD5uEVibjPOns+a0LhqenZZTccoV7/JifP5\nJDT71FoDjLMPLBQQ72Sy6yNAMiOy+nuI8A5yLYykF+mCLza7ZOpuFBmzyfPFhTaU\nrrUmuDQcyHAffjLMHk9S1mDA12Y/jfCWol7+4J89S1oyLNrOT4DfjMkKMpmWJ3xu\nUxvCbWPks4fN8f7VQW+TTj2Ook27tOOzYoQ+UtNMn1ZlBmDCgU9U9T/fNX5u8+ad\nq6AESBJ0cBfyAsjaZa7uODJ2Q+8d7npWGk5SwglZ7zJCUHO5+HuffqjiFZ5DCHw=\n=1xdA\n-----END PGP SIGNATURE-----\n", "payload": "tree b7e9fe33b9a95bfb1081623c34db11dfbf20486f\nparent e24f52294a7dd1ffc9bebe92bde8102a45496f7b\nparent b226d1751d16d22aa51969702757fa620d3b1eab\nauthor Eric Huss <eric@huss.org> 1632969216 -0700\ncommitter GitHub <noreply@github.com> 1632969216 -0700\n\nRollup merge of #89098 - GuillaumeGomez:where-bounds-order, r=camelid\n\nFix generics where bounds order\n\nFixes #88809.\n\nLike said on the above issue, the issue is that we were expecting `Symbol` comparisons to be string-based but they are integer-based (because `Symbol` is an integer), messing up the bounds order. To fix it, I simply stored into a `FxIndexMap` instead.\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c23ff278ee1314b8cb30ec37b04c686f47056ad", "html_url": "https://github.com/rust-lang/rust/commit/7c23ff278ee1314b8cb30ec37b04c686f47056ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c23ff278ee1314b8cb30ec37b04c686f47056ad/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "html_url": "https://github.com/rust-lang/rust/commit/e24f52294a7dd1ffc9bebe92bde8102a45496f7b"}, {"sha": "b226d1751d16d22aa51969702757fa620d3b1eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b226d1751d16d22aa51969702757fa620d3b1eab", "html_url": "https://github.com/rust-lang/rust/commit/b226d1751d16d22aa51969702757fa620d3b1eab"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "257af6ab910163d9bd91b7d2cfa053870c5b6d52", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c23ff278ee1314b8cb30ec37b04c686f47056ad/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c23ff278ee1314b8cb30ec37b04c686f47056ad/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=7c23ff278ee1314b8cb30ec37b04c686f47056ad", "patch": "@@ -11,8 +11,7 @@\n //! This module attempts to reconstruct the original where and/or parameter\n //! bounds by special casing scenarios such as these. Fun!\n \n-use std::collections::BTreeMap;\n-\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_span::Symbol;\n@@ -23,8 +22,11 @@ use crate::clean::WherePredicate as WP;\n use crate::core::DocContext;\n \n crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n-    // First, partition the where clause into its separate components\n-    let mut params: BTreeMap<_, (Vec<_>, Vec<_>)> = BTreeMap::new();\n+    // First, partition the where clause into its separate components.\n+    //\n+    // We use `FxIndexMap` so that the insertion order is preserved to prevent messing up to\n+    // the order of the generated bounds.\n+    let mut params: FxIndexMap<Symbol, (Vec<_>, Vec<_>)> = FxIndexMap::default();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();"}]}