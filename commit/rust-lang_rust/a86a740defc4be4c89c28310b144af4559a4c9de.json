{"sha": "a86a740defc4be4c89c28310b144af4559a4c9de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NmE3NDBkZWZjNGJlNGM4OWMyODMxMGIxNDRhZjQ1NTlhNGM5ZGU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T09:28:29Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T18:32:13Z"}, "message": "Use DiagnosticInfo for `report_diagnostic`", "tree": {"sha": "808b5fc53ae42cb04f727384d651cdccfd66d86c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808b5fc53ae42cb04f727384d651cdccfd66d86c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a86a740defc4be4c89c28310b144af4559a4c9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a86a740defc4be4c89c28310b144af4559a4c9de", "html_url": "https://github.com/rust-lang/rust/commit/a86a740defc4be4c89c28310b144af4559a4c9de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a86a740defc4be4c89c28310b144af4559a4c9de/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661acbc8bc9f9f0669e27c8af37faf4effff7c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/661acbc8bc9f9f0669e27c8af37faf4effff7c53", "html_url": "https://github.com/rust-lang/rust/commit/661acbc8bc9f9f0669e27c8af37faf4effff7c53"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "8ce30dfddc6e2e3f59dbea55f50ed2b0b932efe6", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 29, "deletions": 39, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a86a740defc4be4c89c28310b144af4559a4c9de/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86a740defc4be4c89c28310b144af4559a4c9de/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a86a740defc4be4c89c28310b144af4559a4c9de", "patch": "@@ -1144,15 +1144,7 @@ impl LinkCollector<'_, '_> {\n                 diag.note(&note);\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &ori_link.range);\n             };\n-            report_diagnostic(\n-                self.cx.tcx,\n-                BROKEN_INTRA_DOC_LINKS,\n-                &msg,\n-                &item,\n-                dox,\n-                &ori_link.range,\n-                callback,\n-            );\n+            report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n         };\n \n         let verify = |kind: DefKind, id: DefId| {\n@@ -1192,7 +1184,7 @@ impl LinkCollector<'_, '_> {\n                 if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n                     && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n                 {\n-                    privacy_error(self.cx, diag_info, &path_str);\n+                    privacy_error(self.cx, &diag_info, &path_str);\n                 }\n             }\n \n@@ -1665,9 +1657,7 @@ fn report_diagnostic(\n     tcx: TyCtxt<'_>,\n     lint: &'static Lint,\n     msg: &str,\n-    item: &Item,\n-    dox: &str,\n-    link_range: &Range<usize>,\n+    DiagnosticInfo { item, ori_link: _, dox, link_range }: &DiagnosticInfo<'_>,\n     decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n     let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n@@ -1721,7 +1711,7 @@ fn report_diagnostic(\n /// `std::io::Error::x`, this will resolve `std::io::Error`.\n fn resolution_failure(\n     collector: &mut LinkCollector<'_, '_>,\n-    DiagnosticInfo { item, ori_link: _, dox, link_range }: DiagnosticInfo<'_>,\n+    diag_info: DiagnosticInfo<'_>,\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n@@ -1731,9 +1721,7 @@ fn resolution_failure(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n         &format!(\"unresolved link to `{}`\", path_str),\n-        item,\n-        dox,\n-        &link_range,\n+        &diag_info,\n         |diag, sp| {\n             let item = |res: Res| format!(\"the {} `{}`\", res.descr(), res.name(tcx),);\n             let assoc_item_not_allowed = |res: Res| {\n@@ -1893,9 +1881,9 @@ fn resolution_failure(\n                                 disambiguator,\n                                 diag,\n                                 path_str,\n-                                dox,\n+                                diag_info.dox,\n                                 sp,\n-                                &link_range,\n+                                &diag_info.link_range,\n                             )\n                         }\n \n@@ -1942,21 +1930,19 @@ fn resolution_failure(\n }\n \n /// Report an anchor failure.\n-fn anchor_failure(\n-    cx: &DocContext<'_>,\n-    DiagnosticInfo { item, ori_link, dox, link_range }: DiagnosticInfo<'_>,\n-    failure: AnchorFailure,\n-) {\n+fn anchor_failure(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, failure: AnchorFailure) {\n     let msg = match failure {\n-        AnchorFailure::MultipleAnchors => format!(\"`{}` contains multiple anchors\", ori_link),\n+        AnchorFailure::MultipleAnchors => {\n+            format!(\"`{}` contains multiple anchors\", diag_info.ori_link)\n+        }\n         AnchorFailure::RustdocAnchorConflict(res) => format!(\n             \"`{}` contains an anchor, but links to {kind}s are already anchored\",\n-            ori_link,\n+            diag_info.ori_link,\n             kind = res.descr(),\n         ),\n     };\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"contains invalid anchor\");\n         }\n@@ -1966,17 +1952,18 @@ fn anchor_failure(\n /// Report an error in the link disambiguator.\n fn disambiguator_error(\n     cx: &DocContext<'_>,\n-    DiagnosticInfo { item, ori_link: _, dox, link_range: _ }: DiagnosticInfo<'_>,\n+    mut diag_info: DiagnosticInfo<'_>,\n     disambiguator_range: Range<usize>,\n     msg: &str,\n ) {\n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &disambiguator_range, |_diag, _sp| {});\n+    diag_info.link_range = disambiguator_range;\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |_diag, _sp| {});\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions.\n fn ambiguity_error(\n     cx: &DocContext<'_>,\n-    DiagnosticInfo { item, ori_link: _, dox, link_range }: DiagnosticInfo<'_>,\n+    diag_info: DiagnosticInfo<'_>,\n     path_str: &str,\n     candidates: Vec<Res>,\n ) {\n@@ -2004,7 +1991,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -2013,7 +2000,14 @@ fn ambiguity_error(\n \n         for res in candidates {\n             let disambiguator = Disambiguator::from_res(res);\n-            suggest_disambiguator(disambiguator, diag, path_str, dox, sp, &link_range);\n+            suggest_disambiguator(\n+                disambiguator,\n+                diag,\n+                path_str,\n+                diag_info.dox,\n+                sp,\n+                &diag_info.link_range,\n+            );\n         }\n     });\n }\n@@ -2045,13 +2039,9 @@ fn suggest_disambiguator(\n }\n \n /// Report a link from a public item to a private one.\n-fn privacy_error(\n-    cx: &DocContext<'_>,\n-    DiagnosticInfo { item, ori_link: _, dox, link_range }: DiagnosticInfo<'_>,\n-    path_str: &str,\n-) {\n+fn privacy_error(cx: &DocContext<'_>, diag_info: &DiagnosticInfo<'_>, path_str: &str) {\n     let sym;\n-    let item_name = match item.name {\n+    let item_name = match diag_info.item.name {\n         Some(name) => {\n             sym = name.as_str();\n             &*sym\n@@ -2061,7 +2051,7 @@ fn privacy_error(\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n \n-    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, &msg, diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"this item is private\");\n         }"}]}