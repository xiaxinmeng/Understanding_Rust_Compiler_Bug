{"sha": "9a2e500928538e3ba91c467ea577fcfa8ca5bb6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmU1MDA5Mjg1MzhlM2JhOTFjNDY3ZWE1NzdmY2ZhOGNhNWJiNmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T10:35:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T10:35:17Z"}, "message": "Auto merge of #4715 - rust-lang:rustup, r=phansch\n\nRustup to rust-lang/rust#65647\n\ncc rust-lang/rust#65647\n\nwaiting on rust-lang/rust#65690\n\nchangelog: none", "tree": {"sha": "f74b31057dfb9451bd1bd87d3d848c9340478383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74b31057dfb9451bd1bd87d3d848c9340478383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2e500928538e3ba91c467ea577fcfa8ca5bb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2e500928538e3ba91c467ea577fcfa8ca5bb6e", "html_url": "https://github.com/rust-lang/rust/commit/9a2e500928538e3ba91c467ea577fcfa8ca5bb6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2e500928538e3ba91c467ea577fcfa8ca5bb6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d0f62570b2f58b09b991f7312dd1f1564c613f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0f62570b2f58b09b991f7312dd1f1564c613f0", "html_url": "https://github.com/rust-lang/rust/commit/1d0f62570b2f58b09b991f7312dd1f1564c613f0"}, {"sha": "e8d5a9e95c145a3a9be89c582d8a6f88d4ea7037", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d5a9e95c145a3a9be89c582d8a6f88d4ea7037", "html_url": "https://github.com/rust-lang/rust/commit/e8d5a9e95c145a3a9be89c582d8a6f88d4ea7037"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "d8b20a5df61598fab4d221c6ebe5e56f913a1540", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e500928538e3ba91c467ea577fcfa8ca5bb6e/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e500928538e3ba91c467ea577fcfa8ca5bb6e/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=9a2e500928538e3ba91c467ea577fcfa8ca5bb6e", "patch": "@@ -2,10 +2,11 @@ use crate::consts::{constant_context, constant_simple};\n use crate::utils::differing_macro_contexts;\n use rustc::hir::ptr::P;\n use rustc::hir::*;\n+use rustc::ich::StableHashingContextProvider;\n use rustc::lint::LateContext;\n use rustc::ty::TypeckTables;\n-use std::collections::hash_map::DefaultHasher;\n-use std::hash::{Hash, Hasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use std::hash::Hash;\n use syntax::ast::Name;\n \n /// Type used to check whether two ast are the same. This is different from the\n@@ -348,19 +349,19 @@ pub struct SpanlessHash<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n     tables: &'a TypeckTables<'tcx>,\n-    s: DefaultHasher,\n+    s: StableHasher,\n }\n \n impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>, tables: &'a TypeckTables<'tcx>) -> Self {\n         Self {\n             cx,\n             tables,\n-            s: DefaultHasher::new(),\n+            s: StableHasher::new(),\n         }\n     }\n \n-    pub fn finish(&self) -> u64 {\n+    pub fn finish(self) -> u64 {\n         self.s.finish()\n     }\n \n@@ -411,15 +412,17 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(r);\n             },\n             ExprKind::AssignOp(ref o, ref l, ref r) => {\n-                o.hash(&mut self.s);\n+                o.node\n+                    .hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n             },\n             ExprKind::Block(ref b, _) => {\n                 self.hash_block(b);\n             },\n             ExprKind::Binary(op, ref l, ref r) => {\n-                op.node.hash(&mut self.s);\n+                op.node\n+                    .hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n             },\n@@ -460,7 +463,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             ExprKind::InlineAsm(..) | ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n-                l.hash(&mut self.s);\n+                l.node.hash(&mut self.s);\n             },\n             ExprKind::Loop(ref b, ref i, _) => {\n                 self.hash_block(b);\n@@ -519,7 +522,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_exprs(v);\n             },\n             ExprKind::Unary(lop, ref le) => {\n-                lop.hash(&mut self.s);\n+                lop.hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n                 self.hash_expr(le);\n             },\n         }"}]}