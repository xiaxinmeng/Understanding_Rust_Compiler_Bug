{"sha": "a42d2d408a74f677bb58a799f995d69f9fdd8438", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MmQyZDQwOGE3NGY2NzdiYjU4YTc5OWY5OTVkNjlmOWZkZDg0Mzg=", "commit": {"author": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-11-03T18:48:02Z"}, "committer": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-11-03T18:48:02Z"}, "message": "Fix a bug where .write([]) would always fail.", "tree": {"sha": "41b41c4c670fc956500a04ebe39df30df5fe5f21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41b41c4c670fc956500a04ebe39df30df5fe5f21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a42d2d408a74f677bb58a799f995d69f9fdd8438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a42d2d408a74f677bb58a799f995d69f9fdd8438", "html_url": "https://github.com/rust-lang/rust/commit/a42d2d408a74f677bb58a799f995d69f9fdd8438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a42d2d408a74f677bb58a799f995d69f9fdd8438/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444a16a7e8a8d8d08c7804fda1bc6d0f1c44e3a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/444a16a7e8a8d8d08c7804fda1bc6d0f1c44e3a3", "html_url": "https://github.com/rust-lang/rust/commit/444a16a7e8a8d8d08c7804fda1bc6d0f1c44e3a3"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "c0e17230010f33ea2986a6ab6d565efb4638f59f", "filename": "src/libcore/io.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a42d2d408a74f677bb58a799f995d69f9fdd8438/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42d2d408a74f677bb58a799f995d69f9fdd8438/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=a42d2d408a74f677bb58a799f995d69f9fdd8438", "patch": "@@ -377,9 +377,8 @@ impl<T: Writer, C> {base: T, cleanup: C}: Writer {\n impl *libc::FILE: Writer {\n     fn write(v: &[const u8]) {\n         do vec::as_const_buf(v) |vbuf, len| {\n-            let nout = libc::fwrite(vbuf as *c_void, len as size_t,\n-                                    1u as size_t, self);\n-            if nout < 1 as size_t {\n+            let nout = libc::fwrite(vbuf as *c_void, 1, len as size_t, self);\n+            if nout != len as size_t {\n                 error!(\"error writing buffer\");\n                 log(error, os::last_os_error());\n                 fail;\n@@ -959,6 +958,13 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_write_empty() {\n+        let file = io::file_writer(&Path(\"tmp/lib-io-test-write-empty.tmp\"),\n+                                   [io::Create]).get();\n+        file.write([]);\n+    }\n+\n     #[test]\n     fn file_writer_bad_name() {\n         match io::file_writer(&Path(\"?/?\"), ~[]) {"}]}