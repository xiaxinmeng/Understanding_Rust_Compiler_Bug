{"sha": "d4c8cb63a474c2365664a68e35153adef3cdd9b9", "node_id": "C_kwDOAAsO6NoAKGQ0YzhjYjYzYTQ3NGMyMzY1NjY0YTY4ZTM1MTUzYWRlZjNjZGQ5Yjk", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-11-12T17:01:35Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-11-12T17:01:35Z"}, "message": "Change cast_lossless message for bools only", "tree": {"sha": "727ec2e0c7cfeff9824043d75879d83978453d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/727ec2e0c7cfeff9824043d75879d83978453d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c8cb63a474c2365664a68e35153adef3cdd9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c8cb63a474c2365664a68e35153adef3cdd9b9", "html_url": "https://github.com/rust-lang/rust/commit/d4c8cb63a474c2365664a68e35153adef3cdd9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c8cb63a474c2365664a68e35153adef3cdd9b9/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e84f00045e20cbd9f9d2695f67e9fc0852134d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e84f00045e20cbd9f9d2695f67e9fc0852134d4", "html_url": "https://github.com/rust-lang/rust/commit/6e84f00045e20cbd9f9d2695f67e9fc0852134d4"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "4a95bed1148dc4f89df5069527f7d6c0d4b3f7c4", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8cb63a474c2365664a68e35153adef3cdd9b9/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8cb63a474c2365664a68e35153adef3cdd9b9/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=d4c8cb63a474c2365664a68e35153adef3cdd9b9", "patch": "@@ -40,14 +40,23 @@ pub(super) fn check(\n         },\n     );\n \n+    let message = if cast_from.is_bool() {\n+        format!(\n+            \"casting `{0:}` to `{1:}` is more cleanly stated with `{1:}::from(_)`\",\n+            cast_from, cast_to\n+        )\n+    } else {\n+        format!(\n+            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n+            cast_from, cast_to\n+        )\n+    };\n+\n     span_lint_and_sugg(\n         cx,\n         CAST_LOSSLESS,\n         expr.span,\n-        &format!(\n-            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n-            cast_from, cast_to\n-        ),\n+        &message,\n         \"try\",\n         format!(\"{}::from({})\", cast_to, sugg),\n         applicability,"}, {"sha": "6b148336011d5924f42311a47507a9ba08635f37", "filename": "tests/ui/cast_lossless_bool.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8cb63a474c2365664a68e35153adef3cdd9b9/tests%2Fui%2Fcast_lossless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8cb63a474c2365664a68e35153adef3cdd9b9/tests%2Fui%2Fcast_lossless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.stderr?ref=d4c8cb63a474c2365664a68e35153adef3cdd9b9", "patch": "@@ -1,78 +1,78 @@\n-error: casting `bool` to `u8` may become silently lossy if you later change the type\n+error: casting `bool` to `u8` is more cleanly stated with `u8::from(_)`\n   --> $DIR/cast_lossless_bool.rs:8:13\n    |\n LL |     let _ = true as u8;\n    |             ^^^^^^^^^^ help: try: `u8::from(true)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n-error: casting `bool` to `u16` may become silently lossy if you later change the type\n+error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n   --> $DIR/cast_lossless_bool.rs:9:13\n    |\n LL |     let _ = true as u16;\n    |             ^^^^^^^^^^^ help: try: `u16::from(true)`\n \n-error: casting `bool` to `u32` may become silently lossy if you later change the type\n+error: casting `bool` to `u32` is more cleanly stated with `u32::from(_)`\n   --> $DIR/cast_lossless_bool.rs:10:13\n    |\n LL |     let _ = true as u32;\n    |             ^^^^^^^^^^^ help: try: `u32::from(true)`\n \n-error: casting `bool` to `u64` may become silently lossy if you later change the type\n+error: casting `bool` to `u64` is more cleanly stated with `u64::from(_)`\n   --> $DIR/cast_lossless_bool.rs:11:13\n    |\n LL |     let _ = true as u64;\n    |             ^^^^^^^^^^^ help: try: `u64::from(true)`\n \n-error: casting `bool` to `u128` may become silently lossy if you later change the type\n+error: casting `bool` to `u128` is more cleanly stated with `u128::from(_)`\n   --> $DIR/cast_lossless_bool.rs:12:13\n    |\n LL |     let _ = true as u128;\n    |             ^^^^^^^^^^^^ help: try: `u128::from(true)`\n \n-error: casting `bool` to `usize` may become silently lossy if you later change the type\n+error: casting `bool` to `usize` is more cleanly stated with `usize::from(_)`\n   --> $DIR/cast_lossless_bool.rs:13:13\n    |\n LL |     let _ = true as usize;\n    |             ^^^^^^^^^^^^^ help: try: `usize::from(true)`\n \n-error: casting `bool` to `i8` may become silently lossy if you later change the type\n+error: casting `bool` to `i8` is more cleanly stated with `i8::from(_)`\n   --> $DIR/cast_lossless_bool.rs:15:13\n    |\n LL |     let _ = true as i8;\n    |             ^^^^^^^^^^ help: try: `i8::from(true)`\n \n-error: casting `bool` to `i16` may become silently lossy if you later change the type\n+error: casting `bool` to `i16` is more cleanly stated with `i16::from(_)`\n   --> $DIR/cast_lossless_bool.rs:16:13\n    |\n LL |     let _ = true as i16;\n    |             ^^^^^^^^^^^ help: try: `i16::from(true)`\n \n-error: casting `bool` to `i32` may become silently lossy if you later change the type\n+error: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`\n   --> $DIR/cast_lossless_bool.rs:17:13\n    |\n LL |     let _ = true as i32;\n    |             ^^^^^^^^^^^ help: try: `i32::from(true)`\n \n-error: casting `bool` to `i64` may become silently lossy if you later change the type\n+error: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`\n   --> $DIR/cast_lossless_bool.rs:18:13\n    |\n LL |     let _ = true as i64;\n    |             ^^^^^^^^^^^ help: try: `i64::from(true)`\n \n-error: casting `bool` to `i128` may become silently lossy if you later change the type\n+error: casting `bool` to `i128` is more cleanly stated with `i128::from(_)`\n   --> $DIR/cast_lossless_bool.rs:19:13\n    |\n LL |     let _ = true as i128;\n    |             ^^^^^^^^^^^^ help: try: `i128::from(true)`\n \n-error: casting `bool` to `isize` may become silently lossy if you later change the type\n+error: casting `bool` to `isize` is more cleanly stated with `isize::from(_)`\n   --> $DIR/cast_lossless_bool.rs:20:13\n    |\n LL |     let _ = true as isize;\n    |             ^^^^^^^^^^^^^ help: try: `isize::from(true)`\n \n-error: casting `bool` to `u16` may become silently lossy if you later change the type\n+error: casting `bool` to `u16` is more cleanly stated with `u16::from(_)`\n   --> $DIR/cast_lossless_bool.rs:23:13\n    |\n LL |     let _ = (true | false) as u16;"}]}