{"sha": "ee930b0262520e25c5b66b037c65dab538ce5e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTMwYjAyNjI1MjBlMjVjNWI2NmIwMzdjNjVkYWI1MzhjZTVlNjQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-17T16:50:44Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-19T23:58:06Z"}, "message": "Enabled new pattern API in the libstd facade", "tree": {"sha": "ce0e9b98a9bc9952421a1c61161af58cf2631ba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0e9b98a9bc9952421a1c61161af58cf2631ba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee930b0262520e25c5b66b037c65dab538ce5e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee930b0262520e25c5b66b037c65dab538ce5e64", "html_url": "https://github.com/rust-lang/rust/commit/ee930b0262520e25c5b66b037c65dab538ce5e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee930b0262520e25c5b66b037c65dab538ce5e64/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ef8cd55512842f2481aac6332dbfb92df58c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ef8cd55512842f2481aac6332dbfb92df58c52", "html_url": "https://github.com/rust-lang/rust/commit/f9ef8cd55512842f2481aac6332dbfb92df58c52"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "d355421039e0cbe88861c754474529407d894718", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ee930b0262520e25c5b66b037c65dab538ce5e64/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee930b0262520e25c5b66b037c65dab538ce5e64/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ee930b0262520e25c5b66b037c65dab538ce5e64", "patch": "@@ -82,6 +82,8 @@ pub use core::str::{SplitN, RSplitN};\n pub use core::str::{from_utf8, CharEq, Chars, CharIndices, Bytes};\n pub use core::str::{from_utf8_unchecked, from_c_str, ParseBoolError};\n pub use unicode::str::{Words, Graphemes, GraphemeIndices};\n+pub use core::str::Pattern;\n+pub use core::str::{Searcher, ReverseSearcher, DoubleEndedSearcher, SearchStep};\n \n /*\n Section: Creating a string\n@@ -530,7 +532,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert!(\"bananas\".contains(\"nana\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn contains(&self, pat: &str) -> bool {\n+    fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::contains(&self[..], pat)\n     }\n \n@@ -547,7 +549,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// ```\n     #[unstable(feature = \"collections\",\n                reason = \"might get removed in favour of a more generic contains()\")]\n-    fn contains_char<P: CharEq>(&self, pat: P) -> bool {\n+    fn contains_char<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::contains_char(&self[..], pat)\n     }\n \n@@ -603,7 +605,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(v, vec![\"\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn split<P: CharEq>(&self, pat: P) -> Split<P> {\n+    fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(&self[..], pat)\n     }\n \n@@ -630,7 +632,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(v, vec![\"\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn splitn<P: CharEq>(&self, count: usize, pat: P) -> SplitN<P> {\n+    fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> {\n         core_str::StrExt::splitn(&self[..], count, pat)\n     }\n \n@@ -659,7 +661,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(v, vec![\"leopard\", \"tiger\", \"\", \"lion\"]);\n     /// ```\n     #[unstable(feature = \"collections\", reason = \"might get removed\")]\n-    fn split_terminator<P: CharEq>(&self, pat: P) -> SplitTerminator<P> {\n+    fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n         core_str::StrExt::split_terminator(&self[..], pat)\n     }\n \n@@ -680,7 +682,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(v, vec![\"leopard\", \"tiger\", \"lionX\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rsplitn<P: CharEq>(&self, count: usize, pat: P) -> RSplitN<P> {\n+    fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P> {\n         core_str::StrExt::rsplitn(&self[..], count, pat)\n     }\n \n@@ -706,7 +708,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// ```\n     #[unstable(feature = \"collections\",\n                reason = \"might have its iterator type changed\")]\n-    fn match_indices<'a, 'b>(&'a self, pat: &'b str) -> MatchIndices<'a, &'b str> {\n+    fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(&self[..], pat)\n     }\n \n@@ -723,7 +725,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// ```\n     #[unstable(feature = \"collections\",\n                reason = \"might get removed in the future in favor of a more generic split()\")]\n-    fn split_str<'a, 'b>(&'a self, pat: &'b str) -> SplitStr<'a, &'b str> {\n+    fn split_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitStr<'a, P> {\n         core_str::StrExt::split_str(&self[..], pat)\n     }\n \n@@ -825,7 +827,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert!(\"banana\".starts_with(\"ba\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn starts_with(&self, pat: &str) -> bool {\n+    fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::starts_with(&self[..], pat)\n     }\n \n@@ -837,7 +839,8 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert!(\"banana\".ends_with(\"nana\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn ends_with(&self, pat: &str) -> bool {\n+    fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n+    where P::Searcher: ReverseSearcher<'a> {\n         core_str::StrExt::ends_with(&self[..], pat)\n     }\n \n@@ -857,7 +860,8 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(\"123foo1bar123\".trim_matches(|c: char| c.is_numeric()), \"foo1bar\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn trim_matches<P: CharEq>(&self, pat: P) -> &str {\n+    fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n+    where P::Searcher: DoubleEndedSearcher<'a> {\n         core_str::StrExt::trim_matches(&self[..], pat)\n     }\n \n@@ -877,7 +881,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(\"123foo1bar123\".trim_left_matches(|c: char| c.is_numeric()), \"foo1bar123\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn trim_left_matches<P: CharEq>(&self, pat: P) -> &str {\n+    fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n         core_str::StrExt::trim_left_matches(&self[..], pat)\n     }\n \n@@ -897,7 +901,8 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(\"123foo1bar123\".trim_right_matches(|c: char| c.is_numeric()), \"123foo1bar\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn trim_right_matches<P: CharEq>(&self, pat: P) -> &str {\n+    fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n+    where P::Searcher: ReverseSearcher<'a> {\n         core_str::StrExt::trim_right_matches(&self[..], pat)\n     }\n \n@@ -1074,7 +1079,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(s.find(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn find<P: CharEq>(&self, pat: P) -> Option<usize> {\n+    fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n         core_str::StrExt::find(&self[..], pat)\n     }\n \n@@ -1102,7 +1107,8 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(s.rfind(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rfind<P: CharEq>(&self, pat: P) -> Option<usize> {\n+    fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n+    where P::Searcher: ReverseSearcher<'a> {\n         core_str::StrExt::rfind(&self[..], pat)\n     }\n \n@@ -1127,7 +1133,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// ```\n     #[unstable(feature = \"collections\",\n                reason = \"might get removed in favor of a more generic find in the future\")]\n-    fn find_str(&self, needle: &str) -> Option<usize> {\n+    fn find_str<'a, P: Pattern<'a>>(&'a self, needle: P) -> Option<usize> {\n         core_str::StrExt::find_str(&self[..], needle)\n     }\n "}]}