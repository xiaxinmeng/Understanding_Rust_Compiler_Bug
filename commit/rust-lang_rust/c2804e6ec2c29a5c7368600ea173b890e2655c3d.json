{"sha": "c2804e6ec2c29a5c7368600ea173b890e2655c3d", "node_id": "C_kwDOAAsO6NoAKGMyODA0ZTZlYzJjMjlhNWM3MzY4NjAwZWExNzNiODkwZTI2NTVjM2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-07T21:17:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-07T21:17:30Z"}, "message": "Auto merge of #101544 - matthiaskrgr:rollup-4urx917, r=matthiaskrgr\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #101343 (Add -api-level to pm command)\n - #101416 (stdio: Document no support for writing to non-blocking stdio/stderr)\n - #101435 (Remove unnecessary `EMIT_MIR_FOR_EACH_BITWIDTH`)\n - #101493 (Pass ImplTraitContext as &mut to avoid the need of ImplTraitContext::reborrow)\n - #101502 (Do not suggest a semicolon for a macro without `!`)\n - #101503 (Add debug calls)\n - #101506 (rustdoc: remove unused CSS `#main-content > .since`)\n - #101507 (rustdoc: remove unused CSS `#main-content > table td`)\n - #101521 (Rustdoc-Json: More accurate struct type.)\n - #101525 (Fix typo in pass_manager.rs)\n - #101534 (rustdoc: remove unused mobile CSS `.rustdoc { flex-direction }`)\n - #101535 (Fix error printing mistake in tidy)\n - #101536 (Add documentation for Attr::is_doc_comment)\n - #101538 (rustdoc: remove unused CSS `.content .methods > div`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "466a4e69430b3932571c803fe46577f55d94546b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/466a4e69430b3932571c803fe46577f55d94546b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2804e6ec2c29a5c7368600ea173b890e2655c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2804e6ec2c29a5c7368600ea173b890e2655c3d", "html_url": "https://github.com/rust-lang/rust/commit/c2804e6ec2c29a5c7368600ea173b890e2655c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2804e6ec2c29a5c7368600ea173b890e2655c3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "html_url": "https://github.com/rust-lang/rust/commit/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b"}, {"sha": "eae48c31cb79f74f68aab6e59e28be55a89092c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae48c31cb79f74f68aab6e59e28be55a89092c3", "html_url": "https://github.com/rust-lang/rust/commit/eae48c31cb79f74f68aab6e59e28be55a89092c3"}], "stats": {"total": 1687, "additions": 326, "deletions": 1361}, "files": [{"sha": "6b0dac7c2f0b8d539bff0bf06ba0b622777bfd65", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -232,6 +232,8 @@ impl AttrItem {\n }\n \n impl Attribute {\n+    /// Returns `true` if it is a sugared doc comment (`///` or `//!` for example).\n+    /// So `#[doc = \"doc\"]` will return `false`.\n     pub fn is_doc_comment(&self) -> bool {\n         match self.kind {\n             AttrKind::Normal(..) => false,"}, {"sha": "90bb01aa2165dee8b9deaf969f7b243e73dd2436", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 &sym.qself,\n                                 &sym.path,\n                                 ParamMode::Optional,\n-                                ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                             );\n                             hir::InlineAsmOperand::SymStatic { path, def_id }\n                         } else {"}, {"sha": "7465706d1a9bb78b039f86ebdf8df23ab6ac7ecf", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -84,10 +84,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> &'hir hir::Local<'hir> {\n-        let ty = l\n-            .ty\n-            .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n+        let ty = l.ty.as_ref().map(|t| {\n+            self.lower_ty(t, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Variable))\n+        });\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);"}, {"sha": "6fa8d7f0fcdd9b52c0b0b75fe6012791c6d25354", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -66,7 +66,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         seg,\n                         ParamMode::Optional,\n                         ParenthesizedGenericArgs::Err,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n                     let receiver = self.lower_expr(receiver);\n                     let args =\n@@ -89,14 +89,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty =\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty =\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ref ohs) => {\n@@ -219,7 +219,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     hir::ExprKind::Path(qpath)\n                 }\n@@ -253,7 +253,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             &se.qself,\n                             &se.path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         )),\n                         self.arena\n                             .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n@@ -550,12 +550,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n-        let output = match ret_ty {\n-            Some(ty) => hir::FnRetTy::Return(\n-                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock)),\n-            ),\n-            None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n-        };\n+        let output =\n+            match ret_ty {\n+                Some(ty) => hir::FnRetTy::Return(self.lower_ty(\n+                    &ty,\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock),\n+                )),\n+                None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n+            };\n \n         // Resume argument type. We let the compiler infer this to simplify the lowering. It is\n         // fully constrained by `future::from_generator`.\n@@ -1123,7 +1125,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a tuple struct.\n                     let tuple_struct_pat =\n@@ -1139,7 +1141,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a unit struct.\n                     let unit_struct_pat = hir::PatKind::Path(qpath);\n@@ -1163,7 +1165,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &se.qself,\n                     &se.path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {"}, {"sha": "f0717b51d4b18f8489090d69692a86e21055613e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 56, "deletions": 43, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -264,8 +264,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n-                    let itctx = ImplTraitContext::Universal;\n-                    let (generics, decl) = this.lower_generics(generics, id, itctx, |this| {\n+                    let mut itctx = ImplTraitContext::Universal;\n+                    let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n                         this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n                     });\n@@ -311,8 +311,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.lower_ty(ty, &mut ImplTraitContext::TypeAliasesOpaqueTy),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n@@ -324,7 +324,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.arena.alloc(this.ty(span, hir::TyKind::Err)),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -333,7 +333,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, variants) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         this.arena.alloc_from_iter(\n                             enum_definition.variants.iter().map(|x| this.lower_variant(x)),\n@@ -346,7 +346,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, struct_def) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.lower_variant_data(hir_id, struct_def),\n                 );\n                 hir::ItemKind::Struct(struct_def, generics)\n@@ -355,7 +355,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, vdata) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.lower_variant_data(hir_id, vdata),\n                 );\n                 hir::ItemKind::Union(vdata, generics)\n@@ -383,18 +383,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let itctx = ImplTraitContext::Universal;\n+                let mut itctx = ImplTraitContext::Universal;\n                 let (generics, (trait_ref, lowered_ty)) =\n-                    self.lower_generics(ast_generics, id, itctx, |this| {\n+                    self.lower_generics(ast_generics, id, &mut itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n-                                ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n                             )\n                         });\n \n-                        let lowered_ty = this\n-                            .lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                        let lowered_ty = this.lower_ty(\n+                            ty,\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        );\n \n                         (trait_ref, lowered_ty)\n                     });\n@@ -433,11 +435,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, (unsafety, items, bounds)) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let bounds = this.lower_param_bounds(\n                             bounds,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                         );\n                         let items = this.arena.alloc_from_iter(\n                             items.iter().map(|item| this.lower_trait_item_ref(item)),\n@@ -452,11 +454,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, bounds) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         this.lower_param_bounds(\n                             bounds,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                         )\n                     },\n                 );\n@@ -479,7 +481,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+        let ty = self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -652,9 +654,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n-                    let itctx = ImplTraitContext::Universal;\n+                    let mut itctx = ImplTraitContext::Universal;\n                     let (generics, (fn_dec, fn_args)) =\n-                        self.lower_generics(generics, i.id, itctx, |this| {\n+                        self.lower_generics(generics, i.id, &mut itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n@@ -665,8 +667,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m, _) => {\n-                    let ty =\n-                        self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(t, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -734,11 +736,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 qself,\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n-                ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+            self.lower_ty(&f.ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -761,7 +763,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind, has_default) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n@@ -796,15 +799,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, kind) = self.lower_generics(\n                     &generics,\n                     i.id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let ty = ty.as_ref().map(|x| {\n-                            this.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                            this.lower_ty(\n+                                x,\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                            )\n                         });\n                         hir::TraitItemKind::Type(\n                             this.lower_param_bounds(\n                                 bounds,\n-                                ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                             ),\n                             ty,\n                         )\n@@ -857,7 +863,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -884,14 +891,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_generics(\n                     &generics,\n                     i.id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| match ty {\n                         None => {\n                             let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(ty, &mut ImplTraitContext::TypeAliasesOpaqueTy);\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                     },\n@@ -1234,8 +1241,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<NodeId>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let itctx = ImplTraitContext::Universal;\n-        let (generics, decl) = self.lower_generics(generics, id, itctx, |this| {\n+        let mut itctx = ImplTraitContext::Universal;\n+        let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n             this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n@@ -1301,7 +1308,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         generics: &Generics,\n         parent_node_id: NodeId,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> (&'hir hir::Generics<'hir>, T) {\n         debug_assert!(self.impl_trait_defs.is_empty());\n@@ -1406,7 +1413,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id: NodeId,\n         kind: &GenericParamKind,\n         bounds: &[GenericBound],\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n         origin: PredicateOrigin,\n     ) -> Option<hir::WherePredicate<'hir>> {\n         // Do not create a clause if we do not have anything inside it.\n@@ -1481,12 +1488,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                 bound_generic_params: self.lower_generic_params(bound_generic_params),\n-                bounded_ty: self\n-                    .lower_ty(bounded_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                bounded_ty: self.lower_ty(\n+                    bounded_ty,\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                ),\n                 bounds: self.arena.alloc_from_iter(bounds.iter().map(|bound| {\n                     self.lower_param_bound(\n                         bound,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                     )\n                 })),\n                 span: self.lower_span(span),\n@@ -1501,16 +1510,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 lifetime: self.lower_lifetime(lifetime),\n                 bounds: self.lower_param_bounds(\n                     bounds,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                 ),\n                 in_where_clause: true,\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    lhs_ty: self\n-                        .lower_ty(lhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n-                    rhs_ty: self\n-                        .lower_ty(rhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    lhs_ty: self.lower_ty(\n+                        lhs_ty,\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    ),\n+                    rhs_ty: self.lower_ty(\n+                        rhs_ty,\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    ),\n                     span: self.lower_span(span),\n                 })\n             }"}, {"sha": "e7bbf7dbdec295d2084e5d4f5845a279fa27414b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -660,6 +660,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// actually used in the HIR, as that would trigger an assertion in the\n     /// `HirIdValidator` later on, which makes sure that all `NodeId`s got mapped\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n@@ -693,6 +694,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     /// Generate a new `HirId` without a backing `NodeId`.\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn next_id(&mut self) -> hir::HirId {\n         let owner = self.current_hir_id_owner;\n         let local_id = self.item_local_id_counter;\n@@ -953,7 +955,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n         // lower generic arguments of identifier in constraint\n@@ -976,6 +978,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n+        let mut itctx_tait = ImplTraitContext::TypeAliasesOpaqueTy;\n \n         let kind = match constraint.kind {\n             AssocConstraintKind::Equality { ref term } => {\n@@ -1014,7 +1017,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => {\n-                        (true, ImplTraitContext::TypeAliasesOpaqueTy)\n+                        (true, &mut itctx_tait)\n                     }\n \n                     // We are in the parameter position, but not within a dyn type:\n@@ -1096,7 +1099,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::GenericArg<'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n@@ -1158,7 +1161,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n+    fn lower_ty(&mut self, t: &Ty, itctx: &mut ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n \n@@ -1168,7 +1171,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         path: &Path,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::Ty<'hir> {\n         // Check whether we should interpret this as a bare trait object.\n         // This check mirrors the one in late resolution.  We only introduce this special case in\n@@ -1210,7 +1213,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.ty(span, hir::TyKind::Tup(tys))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, itctx: ImplTraitContext) -> hir::Ty<'hir> {\n+    fn lower_ty_direct(&mut self, t: &Ty, itctx: &mut ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n@@ -1307,16 +1310,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let span = t.span;\n                 match itctx {\n                     ImplTraitContext::ReturnPositionOpaqueTy { origin } => {\n-                        self.lower_opaque_impl_trait(span, origin, def_node_id, bounds, itctx)\n+                        self.lower_opaque_impl_trait(span, *origin, def_node_id, bounds, itctx)\n                     }\n                     ImplTraitContext::TypeAliasesOpaqueTy => {\n-                        let nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n+                        let mut nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n                         self.lower_opaque_impl_trait(\n                             span,\n                             hir::OpaqueTyOrigin::TyAlias,\n                             def_node_id,\n                             bounds,\n-                            nested_itctx,\n+                            &mut nested_itctx,\n                         )\n                     }\n                     ImplTraitContext::Universal => {\n@@ -1381,14 +1384,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// added explicitly in the HIR). But this includes all the lifetimes, and we only want to\n     /// capture the lifetimes that are referenced in the bounds. Therefore, we add *extra* lifetime parameters\n     /// for the lifetimes that get captured (`'x`, in our example above) and reference those.\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_opaque_impl_trait(\n         &mut self,\n         span: Span,\n         origin: hir::OpaqueTyOrigin,\n         opaque_ty_node_id: NodeId,\n         bounds: &GenericBounds,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::TyKind<'hir> {\n         // Make sure we know that some funky desugaring has been going on here.\n         // This is a first: there is code in other places like for loop\n@@ -1635,11 +1638,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n             if fn_node_id.is_some() {\n-                self.lower_ty_direct(&param.ty, ImplTraitContext::Universal)\n+                self.lower_ty_direct(&param.ty, &mut ImplTraitContext::Universal)\n             } else {\n                 self.lower_ty_direct(\n                     &param.ty,\n-                    ImplTraitContext::Disallowed(match kind {\n+                    &mut ImplTraitContext::Disallowed(match kind {\n                         FnDeclKind::Fn | FnDeclKind::Inherent => {\n                             unreachable!(\"fn should allow in-band lifetimes\")\n                         }\n@@ -1662,7 +1665,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n-                    let context = match fn_node_id {\n+                    let mut context = match fn_node_id {\n                         Some(fn_node_id) if kind.impl_trait_return_allowed() => {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n@@ -1680,7 +1683,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n                         }),\n                     };\n-                    hir::FnRetTy::Return(self.lower_ty(ty, context))\n+                    hir::FnRetTy::Return(self.lower_ty(ty, &mut context))\n                 }\n                 FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n             }\n@@ -1959,10 +1962,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n                 // `impl Future` opaque type that `async fn` implicitly\n                 // generates.\n-                let context = ImplTraitContext::ReturnPositionOpaqueTy {\n+                let mut context = ImplTraitContext::ReturnPositionOpaqueTy {\n                     origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n                 };\n-                self.lower_ty(ty, context)\n+                self.lower_ty(ty, &mut context)\n             }\n             FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };\n@@ -1988,7 +1991,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         match tpb {\n             GenericBound::Trait(p, modifier) => hir::GenericBound::Trait(\n@@ -2100,15 +2103,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { ref default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                        self.lower_ty(x, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n-                let ty = self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(&ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 (\n                     hir::ParamName::Plain(self.lower_ident(param.ident)),\n@@ -2118,7 +2122,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: ImplTraitContext) -> hir::TraitRef<'hir> {\n+    fn lower_trait_ref(\n+        &mut self,\n+        p: &TraitRef,\n+        itctx: &mut ImplTraitContext,\n+    ) -> hir::TraitRef<'hir> {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path,\n             qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n@@ -2130,34 +2138,37 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n         let bound_generic_params =\n             self.lower_lifetime_binder(p.trait_ref.ref_id, &p.bound_generic_params);\n         let trait_ref = self.lower_trait_ref(&p.trait_ref, itctx);\n         hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n-    fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext) -> hir::MutTy<'hir> {\n+    fn lower_mt(&mut self, mt: &MutTy, itctx: &mut ImplTraitContext) -> hir::MutTy<'hir> {\n         hir::MutTy { ty: self.lower_ty(&mt.ty, itctx), mutbl: mt.mutbl }\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_param_bounds(\n         &mut self,\n         bounds: &[GenericBound],\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::GenericBounds<'hir> {\n         self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx))\n     }\n \n-    fn lower_param_bounds_mut<'s>(\n+    fn lower_param_bounds_mut<'s, 'b>(\n         &'s mut self,\n         bounds: &'s [GenericBound],\n-        itctx: ImplTraitContext,\n-    ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> {\n+        itctx: &'b mut ImplTraitContext,\n+    ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> + Captures<'b>\n+    {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn lower_generic_and_bounds(\n         &mut self,\n         node_id: NodeId,\n@@ -2183,7 +2194,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             node_id,\n             &GenericParamKind::Type { default: None },\n             bounds,\n-            ImplTraitContext::Universal,\n+            &mut ImplTraitContext::Universal,\n             hir::PredicateOrigin::ImplTrait,\n         );\n "}, {"sha": "69e6c2c8ad0bc2ea9d5ad69d168fdc0eb1a71c25", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                         break hir::PatKind::TupleStruct(qpath, pats, ddpos);\n@@ -53,7 +53,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         break hir::PatKind::Path(qpath);\n                     }\n@@ -63,7 +63,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| {"}, {"sha": "a3d864023a9ff6319eb6991f427870a566ca25a6", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -22,7 +22,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n@@ -156,7 +156,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     segment,\n                     param_mode,\n                     ParenthesizedGenericArgs::Err,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -180,7 +180,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         segment: &PathSegment,\n         param_mode: ParamMode,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::PathSegment<'hir> {\n         debug!(\"path_span: {:?}, lower_path_segment(segment: {:?})\", path_span, segment,);\n         let (mut generic_args, infer_args) = if let Some(ref generic_args) = segment.args {\n@@ -316,7 +316,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         let has_non_lt_args = data.args.iter().any(|arg| match arg {\n             AngleBracketedArg::Arg(ast::GenericArg::Lifetime(_))\n@@ -350,12 +350,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we generally don't permit such things (see #51008).\n         let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|ty| {\n-            self.lower_ty_direct(ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n+            self.lower_ty_direct(\n+                ty,\n+                &mut ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam),\n+            )\n         }));\n         let output_ty = match output {\n-            FnRetTy::Ty(ty) => {\n-                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n-            }\n+            FnRetTy::Ty(ty) => self\n+                .lower_ty(&ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn)),\n             FnRetTy::Default(_) => self.arena.alloc(self.ty_tup(*span, &[])),\n         };\n         let args = smallvec![GenericArg::Type(self.arena.alloc(self.ty_tup(*inputs_span, inputs)))];"}, {"sha": "75233495040ca561dfed4ab9a4425641bd816e64", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -50,13 +50,13 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn param_bound(&self, param_ty: ty::ParamTy) -> VerifyBound<'tcx> {\n-        debug!(\"param_bound(param_ty={:?})\", param_ty);\n-\n         // Start with anything like `T: 'a` we can scrape from the\n         // environment. If the environment contains something like\n         // `for<'a> T: 'a`, then we know that `T` outlives everything.\n         let declared_bounds_from_env = self.declared_generic_bounds_from_env(param_ty);\n+        debug!(?declared_bounds_from_env);\n         let mut param_bounds = vec![];\n         for declared_bound in declared_bounds_from_env {\n             let bound_region = declared_bound.map_bound(|outlives| outlives.1);\n@@ -65,13 +65,15 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 param_bounds.push(VerifyBound::OutlivedBy(region));\n             } else {\n                 // This is `for<'a> T: 'a`. This means that `T` outlives everything! All done here.\n+                debug!(\"found that {param_ty:?} outlives any lifetime, returning empty vector\");\n                 return VerifyBound::AllBounds(vec![]);\n             }\n         }\n \n         // Add in the default bound of fn body that applies to all in\n         // scope type parameters:\n         if let Some(r) = self.implicit_region_bound {\n+            debug!(\"adding implicit region bound of {r:?}\");\n             param_bounds.push(VerifyBound::OutlivedBy(r));\n         }\n "}, {"sha": "8631ee91fa456c280b9b01eb80339c1565e20519", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -328,6 +328,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self, tcx))]\n     fn instantiate_into(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "67dae71468f9079ba0be9df85bc8f6940a9be5f4", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -103,7 +103,7 @@ fn run_passes_inner<'tcx>(\n         let name = pass.name();\n \n         // Gather information about what we should be doing for this pass\n-        let overriden =\n+        let overridden =\n             overridden_passes.iter().rev().find(|(s, _)| s == &*name).map(|(_name, polarity)| {\n                 trace!(\n                     pass = %name,\n@@ -112,7 +112,7 @@ fn run_passes_inner<'tcx>(\n                 );\n                 *polarity\n             });\n-        let is_enabled = overriden.unwrap_or_else(|| pass.is_enabled(&tcx.sess));\n+        let is_enabled = overridden.unwrap_or_else(|| pass.is_enabled(&tcx.sess));\n         let new_phase = pass.phase_change();\n         let dump_enabled = (is_enabled && pass.is_mir_dump_enabled()) || new_phase.is_some();\n         let validate = (validate && is_enabled)"}, {"sha": "ed37ede65d514bf992c4e3fe9bb9a7b33054db58", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1977,6 +1977,9 @@ impl<'a> Parser<'a> {\n         open_delim_span: Span,\n     ) -> PResult<'a, ()> {\n         if self.token.kind == token::Comma {\n+            if !self.sess.source_map().is_multiline(prev_span.until(self.token.span)) {\n+                return Ok(());\n+            }\n             let mut snapshot = self.create_snapshot_for_diagnostic();\n             snapshot.bump();\n             match snapshot.parse_seq_to_before_end("}, {"sha": "3bb8c0bb48c5f3b00771355529f517a7686296b0", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n-                Max ItemLocalId = {}, missing IDs = {:?}; seens IDs = {:?}\",\n+                Max ItemLocalId = {}, missing IDs = {:#?}; seens IDs = {:#?}\",\n                     self.hir_map.def_path(owner).to_string_no_crate_verbose(),\n                     max,\n                     missing_items,"}, {"sha": "101679aa6dc93fade0f481b74e1cd03dff34f7dd", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -525,6 +525,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match &item.kind {\n             hir::ItemKind::Impl(hir::Impl { of_trait, .. }) => {\n@@ -839,6 +840,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n         match trait_item.kind {\n@@ -888,6 +890,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n         match impl_item.kind {"}, {"sha": "9a571837e9f5a04521b7aeaa9553af7d18e41003", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -434,6 +434,7 @@ impl<'tcx> WfPredicates<'tcx> {\n     }\n \n     /// Pushes all the predicates needed to validate that `ty` is WF into `out`.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn compute(&mut self, arg: GenericArg<'tcx>) {\n         let mut walker = arg.walk();\n         let param_env = self.param_env;\n@@ -488,6 +489,8 @@ impl<'tcx> WfPredicates<'tcx> {\n                 }\n             };\n \n+            debug!(\"wf bounds for ty={:?} ty.kind={:#?}\", ty, ty.kind());\n+\n             match *ty.kind() {\n                 ty::Bool\n                 | ty::Char"}, {"sha": "801063583e633e42928ee7b42e1ab92092d4bf19", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -2697,6 +2697,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         result_ty\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn impl_trait_ty_to_ty(\n         &self,\n         def_id: DefId,\n@@ -2745,9 +2746,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n         debug!(\"impl_trait_ty_to_ty: substs={:?}\", substs);\n \n-        let ty = tcx.mk_opaque(def_id, substs);\n-        debug!(\"impl_trait_ty_to_ty: {}\", ty);\n-        ty\n+        tcx.mk_opaque(def_id, substs)\n     }\n \n     pub fn ty_of_arg(&self, ty: &hir::Ty<'_>, expected_ty: Option<Ty<'tcx>>) -> Ty<'tcx> {"}, {"sha": "e70f728d7dcce3db1bdff7e48aa5e20b8be200a5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -573,6 +573,7 @@ fn get_new_lifetime_name<'tcx>(\n \n /// Returns the predicates defined on `item_def_id` of the form\n /// `X: Foo` where `X` is the type parameter `def_id`.\n+#[instrument(level = \"trace\", skip(tcx))]\n fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n     (item_def_id, def_id, assoc_name): (DefId, LocalDefId, Ident),\n@@ -679,7 +680,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n-        debug!(?param_def_id);\n+        trace!(?param_def_id);\n         ast_generics\n             .predicates\n             .iter()\n@@ -708,9 +709,8 @@ impl<'tcx> ItemCtxt<'tcx> {\n             .collect()\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn bound_defines_assoc_item(&self, b: &hir::GenericBound<'_>, assoc_name: Ident) -> bool {\n-        debug!(\"bound_defines_assoc_item(b={:?}, assoc_name={:?})\", b, assoc_name);\n-\n         match b {\n             hir::GenericBound::Trait(poly_trait_ref, _) => {\n                 let trait_ref = &poly_trait_ref.trait_ref;\n@@ -2105,11 +2105,10 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n-    debug!(\"explicit_predicates_of(def_id={:?})\", def_id);\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let node = tcx.hir().get(hir_id);\n \n@@ -2224,6 +2223,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         + has_own_self as u32\n         + early_bound_lifetimes_from_generics(tcx, ast_generics).count() as u32;\n \n+    trace!(?predicates);\n+    trace!(?ast_generics);\n+\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T: Foo>`).\n     for param in ast_generics.params {\n@@ -2244,7 +2246,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     Some((param.hir_id, ast_generics.predicates)),\n                     param.span,\n                 );\n+                trace!(?bounds);\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n+                trace!(?predicates);\n             }\n             GenericParamKind::Const { .. } => {\n                 // Bounds on const parameters are currently not possible.\n@@ -2253,6 +2257,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         }\n     }\n \n+    trace!(?predicates);\n     // Add in the bounds that appear in the where-clause.\n     for predicate in ast_generics.predicates {\n         match predicate {\n@@ -2338,12 +2343,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         );\n     }\n \n-    let result = ty::GenericPredicates {\n+    ty::GenericPredicates {\n         parent: generics.parent,\n         predicates: tcx.arena.alloc_from_iter(predicates),\n-    };\n-    debug!(\"explicit_predicates_of(def_id={:?}) = {:?}\", def_id, result);\n-    result\n+    }\n }\n \n fn const_evaluatable_predicates_of<'tcx>("}, {"sha": "318e8f581f7c8b42f711887229ff2133ebfe058b", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -53,6 +53,7 @@ fn associated_type_bounds<'tcx>(\n /// impl trait it isn't possible to write a suitable predicate on the\n /// containing function and for type-alias impl trait we don't have a backwards\n /// compatibility issue.\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n fn opaque_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     opaque_def_id: DefId,\n@@ -67,6 +68,8 @@ fn opaque_type_bounds<'tcx>(\n         let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n+        debug!(?bounds);\n+\n         tcx.arena.alloc_from_iter(bounds.predicates(tcx, item_ty))\n     })\n }"}, {"sha": "2dc12a18a8a66f029d657cfcb54af6185288a5c6", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -992,6 +992,9 @@ pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {\n /// the global stream.\n ///\n /// However, if the actual I/O causes an error, this function does panic.\n+///\n+/// Writing to non-blocking stdout/stderr can cause an error, which will lead\n+/// this function to panic.\n fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)\n where\n     T: Write,"}, {"sha": "6e4ba1404e55172333fe7897b6f78e62e07c4486", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -49,6 +49,9 @@ macro_rules! panic {\n ///\n /// Panics if writing to `io::stdout()` fails.\n ///\n+/// Writing to non-blocking stdout can cause an error, which will lead\n+/// this macro to panic.\n+///\n /// # Examples\n ///\n /// ```\n@@ -107,6 +110,9 @@ macro_rules! print {\n ///\n /// Panics if writing to [`io::stdout`] fails.\n ///\n+/// Writing to non-blocking stdout can cause an error, which will lead\n+/// this macro to panic.\n+///\n /// [`io::stdout`]: crate::io::stdout\n ///\n /// # Examples\n@@ -147,6 +153,9 @@ macro_rules! println {\n ///\n /// Panics if writing to `io::stderr` fails.\n ///\n+/// Writing to non-blocking stdout can cause an error, which will lead\n+/// this macro to panic.\n+///\n /// # Examples\n ///\n /// ```\n@@ -179,6 +188,9 @@ macro_rules! eprint {\n ///\n /// Panics if writing to `io::stderr` fails.\n ///\n+/// Writing to non-blocking stdout can cause an error, which will lead\n+/// this macro to panic.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "1d5ad3cce1840bd44930b80f62e83642b88d84b1", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -422,6 +422,7 @@ Next, we'll build a package manifest as defined by our manifest:\n \n ```sh\n ${SDK_PATH}/tools/${ARCH}/pm \\\n+    -api-level $(${SDK_PATH}/tools/${ARCH}/ffx version -v | grep \"api-level\" | head -1 |  awk -F ' ' '{print $2}') \\\n     -o pkg/hello_fuchsia_manifest \\\n     -m pkg/hello_fuchsia.manifest \\\n     build \\"}, {"sha": "991c881bae10d8b707b2e1c3cd43ba4725fb7076", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -132,9 +132,11 @@ def check_type(ty):\n         work_list |= set(item[\"inner\"][\"items\"]) - visited\n     elif item[\"kind\"] == \"struct\":\n         check_generics(item[\"inner\"][\"generics\"])\n-        work_list |= (\n-            set(item[\"inner\"][\"fields\"]) | set(item[\"inner\"][\"impls\"])\n-        ) - visited\n+        work_list |= set(item[\"inner\"][\"impls\"]) - visited\n+        if \"tuple\" in item[\"inner\"][\"kind\"]:\n+            work_list |= set(filter(None, item[\"inner\"][\"kind\"][\"tuple\"])) - visited\n+        elif \"plain\" in item[\"inner\"][\"kind\"]:\n+            work_list |= set(item[\"inner\"][\"kind\"][\"plain\"][\"fields\"]) - visited\n     elif item[\"kind\"] == \"struct_field\":\n         check_type(item[\"inner\"])\n     elif item[\"kind\"] == \"enum\":"}, {"sha": "7665417cb5c9beff84f5a80d359a0fc7f5c8cfd9", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -699,9 +699,6 @@ pre, .rustdoc.source .example-wrap {\n #main-content {\n \tposition: relative;\n }\n-#main-content > .since {\n-\ttop: inherit;\n-}\n \n .content table {\n \tborder-spacing: 0 5px;\n@@ -747,11 +744,6 @@ pre, .rustdoc.source .example-wrap {\n \tfont-size: 0.875rem;\n }\n \n-.content .methods > div:not(.notable-traits):not(.method) {\n-\tmargin-left: 40px;\n-\tmargin-bottom: 15px;\n-}\n-\n .item-info {\n \tdisplay: block;\n }\n@@ -1751,7 +1743,6 @@ in storage.js plus the media query with (min-width: 701px)\n \t\tpadding-top: 0px;\n \t}\n \n-\t.rustdoc,\n \t.main-heading {\n \t\tflex-direction: column;\n \t}\n@@ -2038,11 +2029,6 @@ in storage.js plus the media query with (min-width: 701px)\n \t\theight: 73px;\n \t}\n \n-\t#main-content > table td {\n-\t\tword-break: break-word;\n-\t\twidth: 50%;\n-\t}\n-\n \t#crate-search {\n \t\tborder-radius: 4px;\n \t}"}, {"sha": "1177d482ac06d94784f05b78896df638355d5429", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -304,11 +304,19 @@ impl FromWithTcx<clean::Struct> for Struct {\n     fn from_tcx(struct_: clean::Struct, tcx: TyCtxt<'_>) -> Self {\n         let fields_stripped = struct_.has_stripped_entries();\n         let clean::Struct { struct_type, generics, fields } = struct_;\n+\n+        let kind = match struct_type {\n+            CtorKind::Fn => StructKind::Tuple(ids_keeping_stripped(fields, tcx)),\n+            CtorKind::Const => {\n+                assert!(fields.is_empty());\n+                StructKind::Unit\n+            }\n+            CtorKind::Fictive => StructKind::Plain { fields: ids(fields, tcx), fields_stripped },\n+        };\n+\n         Struct {\n-            struct_type: from_ctor_kind(struct_type),\n+            kind,\n             generics: generics.into_tcx(tcx),\n-            fields_stripped,\n-            fields: ids(fields, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -327,14 +335,6 @@ impl FromWithTcx<clean::Union> for Union {\n     }\n }\n \n-pub(crate) fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n-    match struct_type {\n-        CtorKind::Fictive => StructType::Plain,\n-        CtorKind::Fn => StructType::Tuple,\n-        CtorKind::Const => StructType::Unit,\n-    }\n-}\n-\n pub(crate) fn from_fn_header(header: &rustc_hir::FnHeader) -> Header {\n     Header {\n         async_: header.is_async(),\n@@ -644,20 +644,6 @@ impl FromWithTcx<clean::Enum> for Enum {\n     }\n }\n \n-impl FromWithTcx<clean::VariantStruct> for Struct {\n-    fn from_tcx(struct_: clean::VariantStruct, tcx: TyCtxt<'_>) -> Self {\n-        let fields_stripped = struct_.has_stripped_entries();\n-        let clean::VariantStruct { struct_type, fields } = struct_;\n-        Struct {\n-            struct_type: from_ctor_kind(struct_type),\n-            generics: Generics { params: vec![], where_predicates: vec![] },\n-            fields_stripped,\n-            fields: ids(fields, tcx),\n-            impls: Vec::new(),\n-        }\n-    }\n-}\n-\n impl FromWithTcx<clean::Variant> for Variant {\n     fn from_tcx(variant: clean::Variant, tcx: TyCtxt<'_>) -> Self {\n         use clean::Variant::*;"}, {"sha": "13bafa506e4a6c6753d3435ce976e12ed96388c9", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 20;\n+pub const FORMAT_VERSION: u32 = 21;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -289,13 +289,39 @@ pub struct Union {\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Struct {\n-    pub struct_type: StructType,\n+    pub kind: StructKind,\n     pub generics: Generics,\n-    pub fields_stripped: bool,\n-    pub fields: Vec<Id>,\n     pub impls: Vec<Id>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum StructKind {\n+    /// A struct with no fields and no parentheses.\n+    ///\n+    /// ```rust\n+    /// pub struct Unit;\n+    /// ```\n+    Unit,\n+    /// A struct with unnamed fields.\n+    ///\n+    /// ```rust\n+    /// pub struct TupleStruct(i32);\n+    /// pub struct EmptyTupleStruct();\n+    /// ```\n+    ///\n+    /// All [`Id`]'s will point to [`ItemEnum::StructField`]. Private and\n+    /// `#[doc(hidden)]` fields will be given as `None`\n+    Tuple(Vec<Option<Id>>),\n+    /// A struct with nammed fields.\n+    ///\n+    /// ```rust\n+    /// pub struct PlainStruct { x: i32 }\n+    /// pub struct EmptyPlainStruct {}\n+    /// ```\n+    Plain { fields: Vec<Id>, fields_stripped: bool },\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Enum {\n     pub generics: Generics,\n@@ -357,14 +383,6 @@ pub struct Discriminant {\n     pub value: String,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n-#[serde(rename_all = \"snake_case\")]\n-pub enum StructType {\n-    Plain,\n-    Tuple,\n-    Unit,\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Header {\n     #[serde(rename = \"const\")]"}, {"sha": "399ff54b294977a12b3613805c6f6743c6f19108", "filename": "src/rustdoc-json-types/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Frustdoc-json-types%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Frustdoc-json-types%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Ftests.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -3,10 +3,8 @@ use super::*;\n #[test]\n fn test_struct_info_roundtrip() {\n     let s = ItemEnum::Struct(Struct {\n-        struct_type: StructType::Plain,\n         generics: Generics { params: vec![], where_predicates: vec![] },\n-        fields_stripped: false,\n-        fields: vec![],\n+        kind: StructKind::Plain { fields: vec![], fields_stripped: false },\n         impls: vec![],\n     });\n "}, {"sha": "e7bde81d4ca36204fe9642958546f34714226aa2", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -7,7 +7,7 @@ unsafe fn foo(z: *mut usize) -> u32 {\n     99\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = [42, 43, 44];"}, {"sha": "27f883ed321ae658cd865ccae2c94111cfe9aab1", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,64 +0,0 @@\n-// MIR for `main` after SimplifyCfg-elaborate-drops\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +0:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-        scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-            scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-                scope 4 {\n-                }\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:+1:17: +1:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:31: +3:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:+4:21: +4:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n-                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:26: +4:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    }\n-\n-    bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:28: +4:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:29: +4:30\n-        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +5:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:+5:2: +5:2\n-    }\n-}"}, {"sha": "27f883ed321ae658cd865ccae2c94111cfe9aab1", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir"}, {"sha": "232bcc7b27d465dc327ed666410f825ecd34ada2", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,7 +1,7 @@\n // ignore-endian-big\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=4\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n #![feature(box_syntax)]\n // EMIT_MIR inline_into_box_place.main.Inline.diff\n fn main() {"}, {"sha": "7017413ad38a6440b1634cc7372ee207fbde8e65", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,82 +0,0 @@\n-- // MIR for `main` before Inline\n-+ // MIR for `main` after Inline\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-+     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-      scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      }\n-      scope 2 {\n-      }\n-+     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         let mut _9: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+     }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-                                           // mir::Constant\n-                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _9 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n--                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n--     }\n-- \n--     bb2: {\n-+                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n-+         Deinit((*_8));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_8).0: alloc::raw_vec::RawVec<u32>) = move _9; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n--         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-      }\n-  \n--     bb3: {\n-+     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:+2:2: +2:2\n-      }\n-  \n--     bb4 (cleanup): {\n-+     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n--     }\n-- \n--     bb5 (cleanup): {\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n--                                          // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n-      }\n-  }\n-  "}, {"sha": "7017413ad38a6440b1634cc7372ee207fbde8e65", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff"}, {"sha": "cbd8633a345c7fdf16fa3bf449272ccf545db7ee", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -13,7 +13,7 @@ trait Foo {\n     fn get(&self) -> [u8; 2];\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.mir\n impl Foo for [u8; 1+1] {\n     fn get(&self) -> [u8; 2] {"}, {"sha": "ebb5f5042fccb7084b85226017187e67d603f417", "filename": "src/test/mir-opt/issue-72181.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -11,14 +11,14 @@ union Foo {\n     b: Never\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_72181.foo.mir_map.0.mir\n fn foo(xs: [(Never, u32); 1]) -> u32 { xs[0].1 }\n \n // EMIT_MIR issue_72181.bar.mir_map.0.mir\n fn bar([(_, x)]: [(Never, u32); 1]) -> u32 { x }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_72181.main.mir_map.0.mir\n fn main() {\n     let _ = mem::size_of::<Foo>();"}, {"sha": "be114cab719c0c77fb5abdb715f464b549126fdc", "filename": "src/test/mir-opt/issue-73223.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     assert_eq!(split, 1);\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_73223.main.SimplifyArmIdentity.diff"}, {"sha": "047b24db46643fe1aaed39e2f6cac7d355fc70b6", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,20 +0,0 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}` after SimplifyCfg-promote-consts\n-\n-<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}: usize = {\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-\n-    bb0: {\n-        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    }\n-\n-    bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    }\n-}"}, {"sha": "047b24db46643fe1aaed39e2f6cac7d355fc70b6", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir"}, {"sha": "972ce1d5078543d60d5d2c4700885c6fb2d42575", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,17 +0,0 @@\n-// MIR for `bar` 0 mir_map\n-\n-fn bar(_1: [(Never, u32); 1]) -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:40: +0:43\n-    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-    scope 1 {\n-        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:+0:13: +0:14\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:+0:46: +0:47\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:48: +0:49\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+0:49: +0:49\n-    }\n-}"}, {"sha": "972ce1d5078543d60d5d2c4700885c6fb2d42575", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.32bit.mir"}, {"sha": "534f131ea936b44f719c4fc8da5067aacd02fc24", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,27 +0,0 @@\n-// MIR for `foo` 0 mir_map\n-\n-fn foo(_1: [(Never, u32); 1]) -> u32 {\n-    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:+0:8: +0:10\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:34: +0:37\n-    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-        _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-    }\n-\n-    bb1: {\n-        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:+0:40: +0:47\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:48: +0:49\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+0:49: +0:49\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:+0:1: +0:49\n-    }\n-}"}, {"sha": "534f131ea936b44f719c4fc8da5067aacd02fc24", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir"}, {"sha": "425906f84fcd6a42b784d21b7afd8b8629b22407", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,62 +0,0 @@\n-// MIR for `main` 0 mir_map\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:+0:11: +0:11\n-    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:+3:14: +3:27\n-    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:+3:29: +3:42\n-    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:+4:13: +4:30\n-    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:+4:24: +4:25\n-    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:+4:22: +4:26\n-    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:+4:22: +4:26\n-    scope 1 {\n-        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        scope 2 {\n-            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:+3:9: +3:10\n-            scope 3 {\n-            }\n-            scope 4 {\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n-                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:+1:34: +1:35\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:+3:14: +3:27\n-        _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:+3:14: +3:27\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:+3:29: +3:42\n-        _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:+3:29: +3:42\n-        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:+3:13: +3:43\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:+3:42: +3:43\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:+3:42: +3:43\n-        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:+4:13: +4:30\n-        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:+4:24: +4:25\n-        _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:+4:24: +4:25\n-        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-    }\n-\n-    bb2: {\n-        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:+4:22: +4:28\n-        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:+4:30: +4:31\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:+4:30: +4:31\n-        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:+0:11: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+5:2: +5:2\n-    }\n-\n-    bb3 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:+0:1: +5:2\n-    }\n-}"}, {"sha": "425906f84fcd6a42b784d21b7afd8b8629b22407", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir"}, {"sha": "ac7fe31f3b39ce5282b1d97f9b6d72f52708012b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "removed", "additions": 0, "deletions": 161, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,161 +0,0 @@\n-- // MIR for `main` before SimplifyArmIdentity\n-+ // MIR for `main` after SimplifyArmIdentity\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:+2:9: +2:16\n-      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:+6:22: +6:27\n-      let _8: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:+7:23: +7:24\n-      let mut _15: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          scope 3 {\n-              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n-              let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              scope 4 {\n-                  debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  scope 5 {\n-                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  }\n-              }\n-          }\n-      }\n-      scope 2 {\n-          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n-      }\n-  \n-      bb1: {\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      }\n-  \n-      bb3: {\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:27: +6:28\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb4: {\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-      }\n-  \n-      bb5: {\n-          nop;                             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "ac7fe31f3b39ce5282b1d97f9b6d72f52708012b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff"}, {"sha": "f9eeb1ea5b96095be840b3afd1c193409cdb55ba", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,88 +0,0 @@\n-- // MIR for `bar` before MatchBranchSimplification\n-+ // MIR for `bar` after MatchBranchSimplification\n-  \n-  fn bar(_1: i32) -> (bool, bool, bool, bool) {\n-      debug i => _1;                       // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:9\n-      let mut _0: (bool, bool, bool, bool); // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:19: +0:43\n-      let _2: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:10\n-      let _6: ();                          // in scope 0 at $DIR/matches_reduce_branches.rs:+6:5: +21:6\n-      let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+23:6: +23:7\n-      let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+23:9: +23:10\n-      let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n-      let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-+     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-      scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:+1:9: +1:10\n-          let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:+2:9: +2:10\n-          scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/matches_reduce_branches.rs:+2:9: +2:10\n-              let _4: bool;                // in scope 2 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug c => _4;           // in scope 3 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n-                  let _5: bool;            // in scope 3 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n-                  scope 4 {\n-                      debug d => _5;       // in scope 4 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:+2:9: +2:10\n-          StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n-          StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n-          StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +21:6\n--         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n--     }\n-- \n--     bb1: {\n--         _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+15:13: +15:21\n--         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+16:13: +16:22\n--         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+17:13: +17:22\n--         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+18:13: +18:21\n--         Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n--     }\n-- \n--     bb2: {\n--         _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+8:13: +8:22\n--         _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n-+         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-+         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-+         _2 = Ne(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+8:13: +8:22\n-+         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n-          _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+10:13: +10:22\n-          _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+11:13: +11:21\n-          Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n--     }\n-- \n--     bb3: {\n-+         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-          StorageDead(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:+21:6: +21:7\n-          StorageLive(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:6: +23:7\n-          _7 = _2;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:6: +23:7\n-          StorageLive(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:9: +23:10\n-          _8 = _3;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:9: +23:10\n-          StorageLive(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n-          _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n-          StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-          _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.3: bool) = move _10;         // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          StorageDead(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          StorageDead(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          StorageDead(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+24:2: +24:2\n-      }\n-  }\n-  "}, {"sha": "f9eeb1ea5b96095be840b3afd1c193409cdb55ba", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff"}, {"sha": "0b40b3be8bdd41efd5e773ab32228a05b64f394c", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,55 +0,0 @@\n-- // MIR for `foo` before MatchBranchSimplification\n-+ // MIR for `foo` after MatchBranchSimplification\n-  \n-  fn foo(_1: Option<()>) -> () {\n-      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:11\n-      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:25\n-      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+1:22: +1:26\n-+     let mut _4: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n--         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _4 = move _3;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageDead(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb1: {\n--         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb2: {\n--         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb4: {\n-          Deinit(_0);                      // scope 0 at $DIR/matches_reduce_branches.rs:+2:9: +2:11\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-      }\n-  \n--     bb5: {\n-+     bb2: {\n-          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:+3:6: +3:6\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-      }\n-  \n--     bb6: {\n-+     bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "0b40b3be8bdd41efd5e773ab32228a05b64f394c", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff"}, {"sha": "b8c7722cd3713c905b31331b98b0cc2623594660", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,113 +0,0 @@\n-- // MIR for `match_nested_if` before MatchBranchSimplification\n-+ // MIR for `match_nested_if` after MatchBranchSimplification\n-  \n-  fn match_nested_if() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:29\n-      let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-+     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-      scope 1 {\n-          debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-          Deinit(_2);                      // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--     }\n-- \n--     bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:31: +2:35\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n--     }\n-- \n--     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n--     }\n-- \n--     bb3: {\n-+         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n-+         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n--     }\n-- \n--     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:55: +2:59\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n--     }\n-- \n--     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n--     }\n-- \n--     bb6: {\n-+         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-+         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-+         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n-+         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:75: +2:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n--     }\n-- \n--     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:13: +3:17\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n--     }\n-- \n--     bb8: {\n--         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n--     }\n-- \n--     bb9: {\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n--     }\n-- \n--     bb10: {\n-+         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n-+         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-+         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n-          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n--         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n--     }\n-- \n--     bb11: {\n--         StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n--         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n--         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n--     }\n-- \n--     bb12: {\n-+         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n-+         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+11:6: +11:7\n-          _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:+12:5: +12:8\n-          StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+13:1: +13:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+13:2: +13:2\n-      }\n-  }\n-  "}, {"sha": "b8c7722cd3713c905b31331b98b0cc2623594660", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff"}, {"sha": "a81d5f7b4e8bc7a529a69fb680b449b7f7fe67fa", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,6 @@\n // unit-test: MatchBranchSimplification\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR matches_reduce_branches.foo.MatchBranchSimplification.diff\n // EMIT_MIR matches_reduce_branches.bar.MatchBranchSimplification.diff\n // EMIT_MIR matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff"}, {"sha": "1b4dddc1d43a030a725a4793feb833d5ae40cad4", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,32 +0,0 @@\n-- // MIR for `exhaustive_match` before MatchBranchSimplification\n-+ // MIR for `exhaustive_match` after MatchBranchSimplification\n-  \n-  fn exhaustive_match(_1: E) -> u8 {\n-      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:+0:25: +0:26\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/matches_u8.rs:+0:34: +0:36\n-      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:+2:9: +2:13\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "1b4dddc1d43a030a725a4793feb833d5ae40cad4", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff"}, {"sha": "6e734852e1af490fec52362d823beb6ab07e7b2d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,32 +0,0 @@\n-- // MIR for `exhaustive_match_i8` before MatchBranchSimplification\n-+ // MIR for `exhaustive_match_i8` after MatchBranchSimplification\n-  \n-  fn exhaustive_match_i8(_1: E) -> i8 {\n-      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:+0:28: +0:29\n-      let mut _0: i8;                      // return place in scope 0 at $DIR/matches_u8.rs:+0:37: +0:39\n-      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:+2:9: +2:13\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "6e734852e1af490fec52362d823beb6ab07e7b2d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff"}, {"sha": "422c3a95e8efa3cd894bb7a2dbc1e5036d806ce5", "filename": "src/test/mir-opt/matches_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,6 @@\n // unit-test: MatchBranchSimplification\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR matches_u8.exhaustive_match.MatchBranchSimplification.diff\n // EMIT_MIR matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff\n "}, {"sha": "cb65242609086e0ef04ca11b20eb2b74e0fd7e35", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "f9ed1036f0060ef1680f5da15f96c57132cf4355", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,60 +0,0 @@\n-// MIR for `main` after SimplifyCfg-elaborate-drops\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:11: +0:11\n-    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-        StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        Deinit(_3);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        Deinit(_2);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        (_2.0: Droppy) = move _3;        // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:41: +1:42\n-        Deinit(_1);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:17: +1:43\n-        (_1.0: Aligned) = move _2;       // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:17: +1:43\n-        StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:42: +1:43\n-        StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        Deinit(_5);                      // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        (_5.0: usize) = const 0_usize;   // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        Deinit(_4);                      // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        (_4.0: Droppy) = move _5;        // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:28: +2:29\n-        StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-    }\n-\n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:2: +3:2\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:1: +3:2\n-    }\n-\n-    bb3 (cleanup): {\n-        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:28: +2:29\n-        _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:11: +3:2\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-    }\n-}"}, {"sha": "f9ed1036f0060ef1680f5da15f96c57132cf4355", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir"}, {"sha": "103033c4e2b861072f03d35aed92333f8cdbb274", "filename": "src/test/mir-opt/simple-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,6 @@\n // Test that we don't generate unnecessarily large MIR for very simple matches\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR simple_match.match_bool.mir_map.0.mir\n fn match_bool(x: bool) -> usize {\n     match x {"}, {"sha": "3bef6aa0579a77a32611f3130eb95f8b46dc15a3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,29 +0,0 @@\n-// MIR for `match_bool` 0 mir_map\n-\n-fn match_bool(_1: bool) -> usize {\n-    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:+0:15: +0:16\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:+0:27: +0:32\n-\n-    bb0: {\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:+1:11: +1:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:+1:5: +1:12\n-    }\n-\n-    bb1: {\n-        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:+2:9: +2:13\n-    }\n-\n-    bb2: {\n-        _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:+3:14: +3:16\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:+3:14: +3:16\n-    }\n-\n-    bb3: {\n-        _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:+2:17: +2:19\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:+2:17: +2:19\n-    }\n-\n-    bb4: {\n-        return;                          // scope 0 at $DIR/simple-match.rs:+5:2: +5:2\n-    }\n-}"}, {"sha": "3bef6aa0579a77a32611f3130eb95f8b46dc15a3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir"}, {"sha": "d09bd92c4e81d176328a1159f1c23aadd8c1e723", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -11,5 +11,4 @@ fn main() {\n     map(None);\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff"}, {"sha": "51d26b08b2a1c69217fbf247a24d4bf5f43efa4d", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,52 +0,0 @@\n-- // MIR for `map` before SimplifyLocals\n-+ // MIR for `map` after SimplifyLocals\n-  \n-  fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:8: +0:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:31: +0:46\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:9: +2:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-      let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n-      scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-      }\n-  \n-      bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n-          _4 = move _3;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-      }\n-  \n-      bb4: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "51d26b08b2a1c69217fbf247a24d4bf5f43efa4d", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff"}, {"sha": "344c1af2c91347c661ace0a5476d8dd05e5dd894", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir\n fn main() {\n     let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);"}, {"sha": "b4b317e84afb7181280b38a90c3ba0f197c19e40", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.64bit.mir", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,101 +0,0 @@\n-// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n-\n-fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _4: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _5: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _6: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _7: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _9: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _10: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _11: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _13: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _14: bool;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-\n-    bb0: {\n-        goto -> bb15;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb1: {\n-        return;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb3 (cleanup): {\n-        _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb4 (cleanup): {\n-        _6 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb5: {\n-        _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb6: {\n-        _8 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb7: {\n-        _4 = const 0_usize;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb8: {\n-        goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb9 (cleanup): {\n-        _11 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb10 (cleanup): {\n-        _12 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb11: {\n-        _13 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb12: {\n-        _14 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb13: {\n-        _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = move _15 as *mut std::string::String (Misc); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        goto -> bb12;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb14: {\n-        goto -> bb13;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb15: {\n-        _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _3 = Len((*_1));                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _2) -> [0_usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-}"}, {"sha": "b4b317e84afb7181280b38a90c3ba0f197c19e40", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.32bit.mir"}, {"sha": "9ef3d86472db2158c11d09934758ae4b107ab321", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,7 +1,7 @@\n // Test that we don't ICE when trying to dump MIR for unusual item types and\n // that we don't create filenames containing `<` and `>`\n // compile-flags: -Zmir-opt-level=0\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n \n struct A;\n "}, {"sha": "a72e00ecde75fa343b9a88c316592c0ccaa8d502", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,10 +0,0 @@\n-// MIR for `E::V::{constant#0}` 0 mir_map\n-\n-E::V::{constant#0}: isize = {\n-    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-\n-    bb0: {\n-        _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-    }\n-}"}, {"sha": "a72e00ecde75fa343b9a88c316592c0ccaa8d502", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.32bit.mir"}, {"sha": "0686af46ed58ea5d6b97c8389e1fd8928e3b6a65", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,12 +0,0 @@\n-// MIR for `Test::X` 0 mir_map\n-\n-fn Test::X(_1: usize) -> Test {\n-    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-\n-    bb0: {\n-        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-    }\n-}"}, {"sha": "0686af46ed58ea5d6b97c8389e1fd8928e3b6a65", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.32bit.mir"}, {"sha": "7ffd242e0dc3b49a836dd0eff2f1dd3eca8fddc1", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,39 +0,0 @@\n-// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n-\n-fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-\n-    bb0: {\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb1: {\n-        return;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb3: {\n-        goto -> bb1;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb5: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb6: {\n-        _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(<ZST>) }\n-    }\n-}"}, {"sha": "7ffd242e0dc3b49a836dd0eff2f1dd3eca8fddc1", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir"}, {"sha": "e2633f61b5fe435b1f288c3277201be1312cafc3", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,10 +0,0 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` 0 mir_map\n-\n-const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:+0:32: +0:35\n-\n-    bb0: {\n-        _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:39\n-    }\n-}"}, {"sha": "e2633f61b5fe435b1f288c3277201be1312cafc3", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir"}, {"sha": "eef7011149d3e5341cb26a448cab0e620bf4df92", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,55 +0,0 @@\n-- // MIR for `change_loop_body` before ConstProp\n-+ // MIR for `change_loop_body` after ConstProp\n-  \n-  fn change_loop_body() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n-      let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:+0:1: +6:2\n-      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n-      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:33: +5:6\n-      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let _7: ();                          // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n-          scope 2 {\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-          _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n-          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n--         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      }\n-  \n-      bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      }\n-  \n-      bb2: {\n-          _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:+3:9: +3:15\n-          nop;                             // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n-          goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n-      }\n-  \n-      bb3: {\n-          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n-          goto -> bb4;                     // scope 1 at no-location\n-      }\n-  \n-      bb4: {\n-          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n-          StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "eef7011149d3e5341cb26a448cab0e620bf4df92", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff"}, {"sha": "15b0aece8f54b7e4dd873b272f66881e6854f4b7", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=9682b5d3a34b3167d7f2f2d0cf6ddc485cd51b4b", "patch": "@@ -1,17 +0,0 @@\n-// MIR for `change_loop_body` after PreCodegen\n-\n-fn change_loop_body() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n-    let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-    scope 1 {\n-        debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n-        scope 2 {\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-        StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "15b0aece8f54b7e4dd873b272f66881e6854f4b7", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.32bit.mir"}, {"sha": "fc56cd6985d69a901049bb0fa65f0e4faea8a840", "filename": "src/test/mir-opt/while_let_loops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,5 @@\n // EMIT_MIR while_let_loops.change_loop_body.ConstProp.diff\n // EMIT_MIR while_let_loops.change_loop_body.PreCodegen.after.mir\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "ee2d2efa960e8be06730af0da18b58befb87c9ee", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -17,7 +17,7 @@ pub mod l1 {\n     pub mod l3 {\n \n         // @is \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n-        // @is \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n+        // @is \"$.index[*][?(@.name=='L4')].inner.kind\" \\\"unit\\\"\n         // @set l4_id = \"$.index[*][?(@.name=='L4')].id\"\n         // @ismany \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;"}, {"sha": "b86ab93c264d5f5c3459617a823bbcdbe3c1f20f", "filename": "src/test/rustdoc-json/structs/plain_all_pub.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,11 @@\n+pub struct Demo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+// @set x = \"$.index[*][?(@.name=='x')].id\"\n+// @set y = \"$.index[*][?(@.name=='y')].id\"\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[1]\" $y\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 2\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" false"}, {"sha": "7800b55a481ac485c8ed778ae576587ac2dabbe6", "filename": "src/test/rustdoc-json/structs/plain_doc_hidden.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,11 @@\n+pub struct Demo {\n+    pub x: i32,\n+    #[doc(hidden)]\n+    pub y: i32,\n+}\n+\n+// @set x = \"$.index[*][?(@.name=='x')].id\"\n+// @!has \"$.index[*][?(@.name=='y')].id\"\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 1\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" true"}, {"sha": "1d01b8bc14a81819381a00d1a37346a4323246cb", "filename": "src/test/rustdoc-json/structs/plain_empty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,6 +1,5 @@\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.struct_type\" \\\"plain\\\"\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.fields_stripped\" false\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.fields\" []\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.kind.plain.fields_stripped\" false\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.kind.plain.fields\" []\n pub struct PlainEmpty {}"}, {"sha": "9b771224d97417c15d7a8e20993ce3bde70de2fc", "filename": "src/test/rustdoc-json/structs/plain_pub_priv.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,9 @@\n+pub struct Demo {\n+    pub x: i32,\n+    y: i32,\n+}\n+\n+// @set x = \"$.index[*][?(@.name=='x')].id\"\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 1\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" true"}, {"sha": "6bdb753ee0136c7541a4b7454d9dcb60460f4fce", "filename": "src/test/rustdoc-json/structs/tuple.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,5 +1,4 @@\n-// @has \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='Tuple')].inner.struct_type\" \\\"tuple\\\"\n-// @has \"$.index[*][?(@.name=='Tuple')].inner.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple\" '[null, null]'\n pub struct Tuple(u32, String);"}, {"sha": "0ad6a89547fc3343f2eaef3c2c58bc62a5cb0105", "filename": "src/test/rustdoc-json/structs/tuple_empty.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,2 @@\n+// @is \"$.index[*][?(@.name=='TupleUnit')].inner.kind.tuple\" []\n+pub struct TupleUnit();"}, {"sha": "9d5a1d1c8be7fccbc45268aa864a36069a76a885", "filename": "src/test/rustdoc-json/structs/tuple_pub_priv.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,13 @@\n+pub struct Demo(\n+    i32,\n+    /// field\n+    pub i32,\n+    #[doc(hidden)] i32,\n+);\n+\n+// @set field = \"$.index[*][?(@.docs=='field')].id\"\n+\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[0]\" null\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[1]\" $field\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[2]\" null\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[*]\" 3"}, {"sha": "265709717212f492e1d720cd3d14eb1264678267", "filename": "src/test/rustdoc-json/structs/unit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,5 +1,4 @@\n-// @has \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='Unit')].inner.struct_type\" \\\"unit\\\"\n-// @has \"$.index[*][?(@.name=='Unit')].inner.fields\" []\n+// @is \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='Unit')].inner.kind\" \\\"unit\\\"\n pub struct Unit;"}, {"sha": "00474800a0e54c76328169e5b88cf9bc2d11cafc", "filename": "src/test/rustdoc-json/structs/with_generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,13 +1,13 @@\n use std::collections::HashMap;\n \n-// @has \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.struct_type\" \\\"plain\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type.bounds\" []\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type.bounds\" []\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.kind.plain.fields\" []\n pub struct WithGenerics<T, U> {\n     stuff: Vec<T>,\n     things: HashMap<U, U>,"}, {"sha": "9c5a37f3957c03ab2f68eca8b02cbcec0b5c5d8a", "filename": "src/test/rustdoc-json/structs/with_primitives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,9 +1,9 @@\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.struct_type\" \\\"plain\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.kind.plain.fields\" []\n pub struct WithPrimitives<'a> {\n     num: u32,\n     s: &'a str,"}, {"sha": "7ebf3f6b0d89981c4a2f5fb6c1c726473c18b2f5", "filename": "src/test/ui/parser/do-not-suggest-semicolon-before-array.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-before-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-before-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-before-array.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/ui/parser/do-not-suggest-suggest-semicolon-before-array.rs"}, {"sha": "a9dd526321f5c58f0f7978d113829fa54ff72d8c", "filename": "src/test/ui/parser/do-not-suggest-semicolon-before-array.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-before-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-before-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-before-array.stderr?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `.`, `?`, `]`, or an operator, found `,`\n-  --> $DIR/do-not-suggest-suggest-semicolon-before-array.rs:5:5\n+  --> $DIR/do-not-suggest-semicolon-before-array.rs:5:5\n    |\n LL |     [1, 3)\n    |     ^ ^ help: `]` may belong here", "previous_filename": "src/test/ui/parser/do-not-suggest-suggest-semicolon-before-array.stderr"}, {"sha": "d6f7981813fc5fabac05113541706b8ed62df1a3", "filename": "src/test/ui/parser/do-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let _x = vec[1, 2, 3]; //~ ERROR expected one of `.`, `?`, `]`, or an operator\n+}"}, {"sha": "2fe6a28eeb41207ac3397115a928f69f6a883fe3", "filename": "src/test/ui/parser/do-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.stderr?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `.`, `?`, `]`, or an operator, found `,`\n+  --> $DIR/do-not-suggest-semicolon-between-macro-without-exclamation-mark-and-array.rs:2:19\n+   |\n+LL |     let _x = vec[1, 2, 3];\n+   |                   ^ expected one of `.`, `?`, `]`, or an operator\n+\n+error: aborting due to previous error\n+"}, {"sha": "a06b58b2740fa2175a46e02d205df1f323e3807c", "filename": "src/test/ui/parser/suggest-semicolon-before-array.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.fixed?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/ui/parser/suggest-suggest-semicolon-before-array.fixed"}, {"sha": "f601ca2aef54efe8e8d4316d668ee0413caa043b", "filename": "src/test/ui/parser/suggest-semicolon-before-array.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "previous_filename": "src/test/ui/parser/suggest-suggest-semicolon-before-array.rs"}, {"sha": "8a33321fbd56332df9ce8cd99f451d4c6da9e8fa", "filename": "src/test/ui/parser/suggest-semicolon-before-array.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-semicolon-before-array.stderr?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -1,5 +1,5 @@\n error: expected `;`, found `[`\n-  --> $DIR/suggest-suggest-semicolon-before-array.rs:8:5\n+  --> $DIR/suggest-semicolon-before-array.rs:8:5\n    |\n LL |     [1, 3]\n    |     ^", "previous_filename": "src/test/ui/parser/suggest-suggest-semicolon-before-array.stderr"}, {"sha": "b306a527a7ce11f74e9de546a99f870e02f8ff29", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2804e6ec2c29a5c7368600ea173b890e2655c3d/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=c2804e6ec2c29a5c7368600ea173b890e2655c3d", "patch": "@@ -199,8 +199,7 @@ pub fn check(\n         if channel != \"nightly\" && since == Version::CurrentPlaceholder {\n             tidy_error!(\n                 bad,\n-                \"The placeholder use of {kind} feature `{feature_name}` is not allowed on the {} channel\",\n-                version::VERSION_PLACEHOLDER\n+                \"The placeholder use of {kind} feature `{feature_name}` is not allowed on the {channel} channel\",\n             );\n         }\n     }"}]}