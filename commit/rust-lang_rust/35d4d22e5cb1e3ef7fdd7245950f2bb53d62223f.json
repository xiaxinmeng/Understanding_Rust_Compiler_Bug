{"sha": "35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZDRkMjJlNWNiMWUzZWY3ZmRkNzI0NTk1MGYyYmI1M2Q2MjIyM2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-22T09:06:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-22T09:06:09Z"}, "message": "Rustup to rustc 1.31.0-nightly (424a749a0 2018-10-21)", "tree": {"sha": "af552ebe1ab789d463b23cba832364527fb400d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af552ebe1ab789d463b23cba832364527fb400d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f", "html_url": "https://github.com/rust-lang/rust/commit/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397c6843d06ad440b1c4e19101e0e4c4e201a1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/397c6843d06ad440b1c4e19101e0e4c4e201a1f0", "html_url": "https://github.com/rust-lang/rust/commit/397c6843d06ad440b1c4e19101e0e4c4e201a1f0"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "fb823f1e81c5a8e0fff0ee2ff2b94d7e668922b1", "filename": "src/constant.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f", "patch": "@@ -4,7 +4,7 @@ use crate::rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use crate::rustc::ty::Const;\n-use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, OpTy, PlaceTy};\n+use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer};\n use std::borrow::Cow;\n \n #[derive(Default)]\n@@ -127,7 +127,6 @@ fn trans_const_place<'a, 'tcx: 'a>(\n             fx.tcx.at(DUMMY_SP),\n             ty::ParamEnv::reveal_all(),\n             TransPlaceInterpreter,\n-            (),\n         );\n         let op = ecx.const_to_op(const_)?;\n         let ptr = ecx.allocate(op.layout, MemoryKind::Stack)?;\n@@ -188,7 +187,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n     module: &mut Module<B>,\n     cx: &mut ConstantCx,\n ) {\n-    let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP), ());\n+    let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP));\n \n     while let Some(todo_item) = pop_set(&mut cx.todo) {\n         let (data_id, alloc) = match todo_item {\n@@ -278,11 +277,12 @@ fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T>\n struct TransPlaceInterpreter;\n \n impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n-    type MemoryData = ();\n-    type MemoryKinds = ();\n-    type MemoryMap = FxHashMap<AllocId, (MemoryKind<()>, Allocation<()>)>;\n+    type MemoryKinds = !;\n     type PointerTag = ();\n-    const STATIC_KIND: Option<()> = None;\n+    type AllocExtra = ();\n+    type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n+    const STATIC_KIND: Option<!> = None;\n+    const ENABLE_PTR_TRACKING_HOOKS: bool = false;\n \n     fn enforce_validity(_: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n         false\n@@ -336,4 +336,12 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     fn box_alloc(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> EvalResult<'tcx> {\n         panic!();\n     }\n+\n+    fn tag_reference(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: Pointer<()>, _: Ty<'tcx>, _: Size, _: Option<BorrowKind>) -> EvalResult<'tcx> {\n+        panic!();\n+    }\n+\n+    fn tag_dereference(_: &EvalContext<'a, 'mir, 'tcx, Self>, _: Pointer<()>, _: Ty<'tcx>) -> EvalResult<'tcx> {\n+        panic!();\n+    }\n }"}, {"sha": "c95aa0a0cbad26cae1444c58ee354f8d8428a562", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=35d4d22e5cb1e3ef7fdd7245950f2bb53d62223f", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, macro_at_most_once_rep)]\n+#![feature(rustc_private, macro_at_most_once_rep, never_type)]\n #![allow(intra_doc_link_resolution_failure)]\n \n extern crate byteorder;"}]}