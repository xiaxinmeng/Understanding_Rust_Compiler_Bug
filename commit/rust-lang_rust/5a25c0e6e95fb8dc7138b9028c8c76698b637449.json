{"sha": "5a25c0e6e95fb8dc7138b9028c8c76698b637449", "node_id": "C_kwDOAAsO6NoAKDVhMjVjMGU2ZTk1ZmI4ZGM3MTM4YjkwMjhjOGM3NjY5OGI2Mzc0NDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-18T09:58:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-18T09:58:39Z"}, "message": "Auto merge of #87648 - JulianKnodt:const_eq_constrain, r=oli-obk\n\nallow eq constraints on associated constants\n\nUpdates #70256\n\n(cc `@varkor,` `@Centril)`", "tree": {"sha": "978ef522d9007dd4e9a1feeb83c0d68ab0c5dc1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978ef522d9007dd4e9a1feeb83c0d68ab0c5dc1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a25c0e6e95fb8dc7138b9028c8c76698b637449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a25c0e6e95fb8dc7138b9028c8c76698b637449", "html_url": "https://github.com/rust-lang/rust/commit/5a25c0e6e95fb8dc7138b9028c8c76698b637449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a25c0e6e95fb8dc7138b9028c8c76698b637449/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2cabb431c25682bf74fd9396f2fb14992c0ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2cabb431c25682bf74fd9396f2fb14992c0ac2", "html_url": "https://github.com/rust-lang/rust/commit/7a2cabb431c25682bf74fd9396f2fb14992c0ac2"}, {"sha": "109583e215a99e9998283c165e9f396f79194b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/109583e215a99e9998283c165e9f396f79194b83", "html_url": "https://github.com/rust-lang/rust/commit/109583e215a99e9998283c165e9f396f79194b83"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "2af3555e370a4b8ec15f0c4204e24276abe324c1", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=5a25c0e6e95fb8dc7138b9028c8c76698b637449", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n+    Term, AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n     IsAsync, ItemKind, LifetimeName, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -140,7 +140,7 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n         if binding.ident.name == sym::Output;\n-        if let TypeBindingKind::Equality{ty: output} = binding.kind;\n+        if let TypeBindingKind::Equality{term: Term::Ty(output)} = binding.kind;\n         then {\n             return Some(output)\n         }"}, {"sha": "a9a06c3db75545703a387dd16d86efa763841408", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5a25c0e6e95fb8dc7138b9028c8c76698b637449", "patch": "@@ -2178,12 +2178,16 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n+                        let assoc_ty = match projection_predicate.term {\n+                          ty::Term::Ty(ty) => ty,\n+                          ty::Term::Const(_c) => continue,\n+                        };\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(assoc_ty, self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(assoc_ty, self_ty) {\n                             return;\n                         }\n                     }"}, {"sha": "9162de3cceafa3b377c67020154ece42f4c170cd", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=5a25c0e6e95fb8dc7138b9028c8c76698b637449", "patch": "@@ -243,9 +243,10 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.ty);\n+                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n-                    && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\") == Some(normalized_ty)\n+                    && get_associated_type(cx, receiver_ty, deref_trait_id,\n+                    \"Target\").map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n             } else {\n                 false\n             }"}, {"sha": "68156df2ecea879c1067e9c184131cbd53579d28", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=5a25c0e6e95fb8dc7138b9028c8c76698b637449", "patch": "@@ -98,9 +98,10 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n                         if trait_pred.self_ty() == inp;\n                         if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n                         then {\n-                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                            if ord_preds.iter().any(|ord| Some(ord.self_ty()) ==\n+                            return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"Ord\".to_string()));\n-                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.term.ty().unwrap()) {\n                                 args_to_check.push((i, \"PartialOrd\".to_string()));\n                             }\n                         }"}, {"sha": "604c95d2bc81f17c4a3fe86ea71337bf8fb158e1", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a25c0e6e95fb8dc7138b9028c8c76698b637449/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=5a25c0e6e95fb8dc7138b9028c8c76698b637449", "patch": "@@ -645,11 +645,19 @@ pub fn eq_generic_bound(l: &GenericBound, r: &GenericBound) -> bool {\n     }\n }\n \n-pub fn eq_assoc_constraint(l: &AssocTyConstraint, r: &AssocTyConstraint) -> bool {\n-    use AssocTyConstraintKind::*;\n+fn eq_term(l: &Term, r: &Term) -> bool {\n+  match (l, r) {\n+    (Term::Ty(l), Term::Ty(r)) => eq_ty(l,r),\n+    (Term::Const(l), Term::Const(r)) => eq_anon_const(l,r),\n+    _ => false,\n+  }\n+}\n+\n+pub fn eq_assoc_constraint(l: &AssocConstraint, r: &AssocConstraint) -> bool {\n+    use AssocConstraintKind::*;\n     eq_id(l.ident, r.ident)\n         && match (&l.kind, &r.kind) {\n-            (Equality { ty: l }, Equality { ty: r }) => eq_ty(l, r),\n+            (Equality { term: l }, Equality { term: r }) => eq_term(l, r),\n             (Bound { bounds: l }, Bound { bounds: r }) => over(l, r, eq_generic_bound),\n             _ => false,\n         }"}]}