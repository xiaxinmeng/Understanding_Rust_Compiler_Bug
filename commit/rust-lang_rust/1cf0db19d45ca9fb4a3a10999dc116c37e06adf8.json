{"sha": "1cf0db19d45ca9fb4a3a10999dc116c37e06adf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZjBkYjE5ZDQ1Y2E5ZmI0YTNhMTA5OTlkYzExNmMzN2UwNmFkZjg=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2019-12-04T23:01:03Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2019-12-05T12:44:03Z"}, "message": "Use deref target in Pin trait implementations\n\nUsing deref target instead of pointer itself avoids providing access to\n`&Rc<T>` for malicious implementations, which would allow calling\n`Rc::get_mut`.\n\nThis is a breaking change necessary due to unsoundness, however\nthe impact of it should be minimal.\n\nThis only fixes the issue with malicious `PartialEq` implementations,\nother `Pin` soundness issues are still here.\n\nSee <https://internals.rust-lang.org/t/unsoundness-in-pin/11311/73>\nfor more details.", "tree": {"sha": "c7ed4b8448ae906090cb7c042af688a50754d599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ed4b8448ae906090cb7c042af688a50754d599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cf0db19d45ca9fb4a3a10999dc116c37e06adf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf0db19d45ca9fb4a3a10999dc116c37e06adf8", "html_url": "https://github.com/rust-lang/rust/commit/1cf0db19d45ca9fb4a3a10999dc116c37e06adf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cf0db19d45ca9fb4a3a10999dc116c37e06adf8/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d825e35ee8325146e6c175a4c61bcb645b347d5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d825e35ee8325146e6c175a4c61bcb645b347d5e", "html_url": "https://github.com/rust-lang/rust/commit/d825e35ee8325146e6c175a4c61bcb645b347d5e"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "f4e0e647434165cc3e232932de65c84b82c509b2", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1cf0db19d45ca9fb4a3a10999dc116c37e06adf8/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf0db19d45ca9fb4a3a10999dc116c37e06adf8/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=1cf0db19d45ca9fb4a3a10999dc116c37e06adf8", "patch": "@@ -376,6 +376,7 @@\n \n use crate::cmp::{self, PartialEq, PartialOrd};\n use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n use crate::marker::{Sized, Unpin};\n use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n \n@@ -390,55 +391,72 @@ use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n /// [`pin` module]: ../../std/pin/index.html\n //\n-// Note: the derives below, and the explicit `PartialEq` and `PartialOrd`\n-// implementations, are allowed because they all only use `&P`, so they cannot move\n-// the value behind `pointer`.\n+// Note: the `Clone` derive below causes unsoundness as it's possible to implement\n+// `Clone` for mutable references.\n+// See <https://internals.rust-lang.org/t/unsoundness-in-pin/11311> for more details.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[lang = \"pin\"]\n #[fundamental]\n #[repr(transparent)]\n-#[derive(Copy, Clone, Hash, Eq, Ord)]\n+#[derive(Copy, Clone)]\n pub struct Pin<P> {\n     pointer: P,\n }\n \n-#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n-impl<P, Q> PartialEq<Pin<Q>> for Pin<P>\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref, Q: Deref> PartialEq<Pin<Q>> for Pin<P>\n where\n-    P: PartialEq<Q>,\n+    P::Target: PartialEq<Q::Target>,\n {\n     fn eq(&self, other: &Pin<Q>) -> bool {\n-        self.pointer == other.pointer\n+        **self == **other\n     }\n \n     fn ne(&self, other: &Pin<Q>) -> bool {\n-        self.pointer != other.pointer\n+        **self != **other\n     }\n }\n \n-#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n-impl<P, Q> PartialOrd<Pin<Q>> for Pin<P>\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref<Target: Eq>> Eq for Pin<P> {}\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref, Q: Deref> PartialOrd<Pin<Q>> for Pin<P>\n where\n-    P: PartialOrd<Q>,\n+    P::Target: PartialOrd<Q::Target>,\n {\n     fn partial_cmp(&self, other: &Pin<Q>) -> Option<cmp::Ordering> {\n-        self.pointer.partial_cmp(&other.pointer)\n+        (**self).partial_cmp(other)\n     }\n \n     fn lt(&self, other: &Pin<Q>) -> bool {\n-        self.pointer < other.pointer\n+        **self < **other\n     }\n \n     fn le(&self, other: &Pin<Q>) -> bool {\n-        self.pointer <= other.pointer\n+        **self <= **other\n     }\n \n     fn gt(&self, other: &Pin<Q>) -> bool {\n-        self.pointer > other.pointer\n+        **self > **other\n     }\n \n     fn ge(&self, other: &Pin<Q>) -> bool {\n-        self.pointer >= other.pointer\n+        **self >= **other\n+    }\n+}\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref<Target: Ord>> Ord for Pin<P> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n+        (**self).cmp(other)\n+    }\n+}\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref<Target: Hash>> Hash for Pin<P> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        (**self).hash(state);\n     }\n }\n "}]}