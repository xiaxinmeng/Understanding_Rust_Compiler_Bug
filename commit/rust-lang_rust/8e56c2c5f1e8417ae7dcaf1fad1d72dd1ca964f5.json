{"sha": "8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "node_id": "C_kwDOAAsO6NoAKDhlNTZjMmM1ZjFlODQxN2FlN2RjYWYxZmFkMWQ3MmRkMWNhOTY0ZjU", "commit": {"author": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-24T06:24:25Z"}, "committer": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-24T06:24:25Z"}, "message": "Suggest ..= when someone tries to create an overflowing range", "tree": {"sha": "b7b6e9dc98ad234e4d4c760be769bb740320332e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b6e9dc98ad234e4d4c760be769bb740320332e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "html_url": "https://github.com/rust-lang/rust/commit/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf073ec2cbf0b90ded7893f429020b81dd28e6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf073ec2cbf0b90ded7893f429020b81dd28e6c3", "html_url": "https://github.com/rust-lang/rust/commit/cf073ec2cbf0b90ded7893f429020b81dd28e6c3"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "db93f6d3402008ccb994e839dfff059868083847", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "patch": "@@ -136,6 +136,13 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     expr: &'tcx hir::Expr<'tcx>,\n     ty: &str,\n ) -> bool {\n+    let (expr, cast_ty) = if let Node::Expr(par_expr) = cx.tcx.hir().get(cx.tcx.hir().parent_id(expr.hir_id))\n+      && let ExprKind::Cast(_, ty) = par_expr.kind {\n+        (par_expr, Some(ty))\n+    } else {\n+        (expr, None)\n+    };\n+\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n     let par_id = cx.tcx.hir().parent_id(expr.hir_id);\n@@ -157,13 +164,19 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     };\n     let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n \n-    use rustc_ast::{LitIntType, LitKind};\n-    let suffix = match lit.node {\n-        LitKind::Int(_, LitIntType::Signed(s)) => s.name_str(),\n-        LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str(),\n-        LitKind::Int(_, LitIntType::Unsuffixed) => \"\",\n-        _ => bug!(),\n+    let suffix = if let Some(cast_ty) = cast_ty {\n+        let Ok(ty) = cx.sess().source_map().span_to_snippet(cast_ty.span) else { return false };\n+        format!(\" as {}\", ty)\n+    } else {\n+        use rustc_ast::{LitIntType, LitKind};\n+        match lit.node {\n+            LitKind::Int(_, LitIntType::Signed(s)) => s.name_str().to_owned(),\n+            LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str().to_owned(),\n+            LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_owned(),\n+            _ => bug!(),\n+        }\n     };\n+\n     cx.emit_spanned_lint(\n         OVERFLOWING_LITERALS,\n         struct_expr.span,\n@@ -172,7 +185,7 @@ fn lint_overflowing_range_endpoint<'tcx>(\n             suggestion: struct_expr.span,\n             start,\n             literal: lit_val - 1,\n-            suffix,\n+            suffix: &suffix,\n         },\n     );\n "}, {"sha": "f6829d0c76a557672fbc22d0f04c51c09f418f50", "filename": "tests/ui/lint/issue-109529.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/tests%2Fui%2Flint%2Fissue-109529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/tests%2Fui%2Flint%2Fissue-109529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.rs?ref=8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    for i in 0..256 as u8 { //~ ERROR range endpoint is out of range\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "87c9119ee6f1c322bd0c1dd272f624af50353028", "filename": "tests/ui/lint/issue-109529.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/tests%2Fui%2Flint%2Fissue-109529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5/tests%2Fui%2Flint%2Fissue-109529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.stderr?ref=8e56c2c5f1e8417ae7dcaf1fad1d72dd1ca964f5", "patch": "@@ -0,0 +1,10 @@\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/issue-109529.rs:2:14\n+   |\n+LL |     for i in 0..256 as u8 {\n+   |              ^^^^^^^^^^^^ help: use an inclusive range instead: `0..=255 as u8`\n+   |\n+   = note: `#[deny(overflowing_literals)]` on by default\n+\n+error: aborting due to previous error\n+"}]}