{"sha": "16cacbe2586fb37521679664798d006cd6831504", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Y2FjYmUyNTg2ZmIzNzUyMTY3OTY2NDc5OGQwMDZjZDY4MzE1MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-18T07:16:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-18T07:16:10Z"}, "message": "Auto merge of #27866 - arielb1:really-fast-reject, r=nikomatsakis\n\nalso, use the right caching logic for type_moves_by_default (this was\r\nbroken by @jroesch).\r\n\r\n```\r\nbefore:\r\n593.10user 5.21system 7:51.41elapsed 126%CPU (0avgtext+0avgdata 1150016maxresident)k\r\n\r\nafter:\r\n567.03user 4.00system 7:28.23elapsed 127%CPU (0avgtext+0avgdata 1133112maxresident)k\r\n```\r\n\r\nA nice 4.5% improvement. For reference, on the last run LLVM takes 429.267s, which is 75% - hopefully this can be reduced.\r\n\r\nI think the regression since #27751 is because of the wf patch - need to investigate it through.\r\n\r\nr? @nikomatsakis", "tree": {"sha": "232f43632906e8868d0b6cce76881c0fe6cb724d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232f43632906e8868d0b6cce76881c0fe6cb724d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16cacbe2586fb37521679664798d006cd6831504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16cacbe2586fb37521679664798d006cd6831504", "html_url": "https://github.com/rust-lang/rust/commit/16cacbe2586fb37521679664798d006cd6831504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16cacbe2586fb37521679664798d006cd6831504/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0ffc0e38f1a00925935dce859262cb4e4d6f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ffc0e38f1a00925935dce859262cb4e4d6f55", "html_url": "https://github.com/rust-lang/rust/commit/4c0ffc0e38f1a00925935dce859262cb4e4d6f55"}, {"sha": "13809ffff7022a24b33d93f63a2cbdb6ecd20805", "url": "https://api.github.com/repos/rust-lang/rust/commits/13809ffff7022a24b33d93f63a2cbdb6ecd20805", "html_url": "https://github.com/rust-lang/rust/commit/13809ffff7022a24b33d93f63a2cbdb6ecd20805"}], "stats": {"total": 110, "additions": 86, "deletions": 24}, "files": [{"sha": "11d9512034440e445daf54e8e170669193103bd5", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -85,11 +85,13 @@ pub fn simplify_type(tcx: &ty::ctxt,\n         ty::TyBareFn(_, ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }\n-        ty::TyProjection(_) => {\n-            None\n-        }\n-        ty::TyParam(_) => {\n+        ty::TyProjection(_) | ty::TyParam(_) => {\n             if can_simplify_params {\n+                // In normalized types, projections don't unify with\n+                // anything. when lazy normalization happens, this\n+                // will change. It would still be nice to have a way\n+                // to deal with known-not-to-unify-with-anything\n+                // projections (e.g. the likes of <__S as Encoder>::Error).\n                 Some(ParameterSimplifiedType)\n             } else {\n                 None"}, {"sha": "5f2f4df2f16012fc6727680f8122eadc018c7d06", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -614,7 +614,7 @@ pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                              snapshot: &CombinedSnapshot,\n                              value: &T)\n                              -> T\n-    where T : TypeFoldable<'tcx>\n+    where T : TypeFoldable<'tcx> + ty::HasTypeFlags\n {\n     debug_assert!(leak_check(infcx, &skol_map, snapshot).is_ok());\n "}, {"sha": "d56a73c36570c61bdf41de5c6675a348dc515df8", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -985,7 +985,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                          snapshot: &CombinedSnapshot,\n                          value: &T)\n                          -> T\n-        where T : TypeFoldable<'tcx>\n+        where T : TypeFoldable<'tcx> + HasTypeFlags\n     {\n         /*! See `higher_ranked::plug_leaks` */\n \n@@ -1256,7 +1256,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn resolve_type_vars_if_possible<T:TypeFoldable<'tcx>>(&self, value: &T) -> T {\n+    pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T\n+        where T: TypeFoldable<'tcx> + HasTypeFlags\n+    {\n         /*!\n          * Where possible, replaces type/int/float variables in\n          * `value` with their final value. Note that region variables\n@@ -1266,6 +1268,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n          * at will.\n          */\n \n+        if !value.needs_infer() {\n+            return value.clone(); // avoid duplicated subst-folding\n+        }\n         let mut r = resolve::OpportunisticTypeResolver::new(self);\n         value.fold_with(&mut r)\n     }\n@@ -1456,9 +1461,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n-        !traits::type_known_to_meet_builtin_bound(self, ty, ty::BoundCopy, span)\n-        // FIXME(@jroesch): should be able to use:\n-        // ty.moves_by_default(&self.parameter_environment, span)\n+        if ty.needs_infer() {\n+            // this can get called from typeck (by euv), and moves_by_default\n+            // rightly refuses to work with inference variables, but\n+            // moves_by_default has a cache, which we want to use in other\n+            // cases.\n+            !traits::type_known_to_meet_builtin_bound(self, ty, ty::BoundCopy, span)\n+        } else {\n+            ty.moves_by_default(&self.parameter_environment, span)\n+        }\n     }\n \n     pub fn node_method_ty(&self, method_call: ty::MethodCall)"}, {"sha": "3be05c45c4de2f310f42eba0be563379c85d6e66", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -160,7 +160,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n pub fn report_overflow_error<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n                                           obligation: &Obligation<'tcx, T>)\n                                           -> !\n-    where T: fmt::Display + TypeFoldable<'tcx>\n+    where T: fmt::Display + TypeFoldable<'tcx> + HasTypeFlags\n {\n     let predicate =\n         infcx.resolve_type_vars_if_possible(&obligation.predicate);"}, {"sha": "99e12b7428d2a32beeccfa4775b1912a8e55a4dc", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -12,11 +12,10 @@ use middle::infer::InferCtxt;\n use middle::ty::{self, RegionEscape, Ty, HasTypeFlags};\n use middle::wf;\n \n-use std::collections::HashSet;\n use std::fmt;\n use syntax::ast;\n use util::common::ErrorReported;\n-use util::nodemap::NodeMap;\n+use util::nodemap::{FnvHashSet, NodeMap};\n \n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n@@ -33,7 +32,7 @@ use super::Unimplemented;\n use super::util::predicate_for_builtin_bound;\n \n pub struct FulfilledPredicates<'tcx> {\n-    set: HashSet<(RFC1214Warning, ty::Predicate<'tcx>)>\n+    set: FnvHashSet<(RFC1214Warning, ty::Predicate<'tcx>)>\n }\n \n /// The fulfillment context is used to drive trait resolution.  It\n@@ -540,7 +539,7 @@ fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,\n impl<'tcx> FulfilledPredicates<'tcx> {\n     pub fn new() -> FulfilledPredicates<'tcx> {\n         FulfilledPredicates {\n-            set: HashSet::new()\n+            set: FnvHashSet()\n         }\n     }\n "}, {"sha": "cacefbb1a8551885eaad798151934f4c162683cb", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -927,6 +927,13 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Normalized<'tcx, T> {\n     }\n }\n \n+impl<'tcx, T: HasTypeFlags> HasTypeFlags for Normalized<'tcx, T> {\n+    fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {\n+        self.value.has_type_flags(flags) ||\n+            self.obligations.has_type_flags(flags)\n+    }\n+}\n+\n impl<'tcx, T:fmt::Debug> fmt::Debug for Normalized<'tcx, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Normalized({:?},{:?})\","}, {"sha": "45225475e6b9b21adab56d9b68374cb3da7b01bb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -3192,6 +3192,8 @@ impl<'tcx> TraitDef<'tcx> {\n         }\n     }\n \n+    /// Iterate over every impl that could possibly match the\n+    /// self-type `self_ty`.\n     pub fn for_each_relevant_impl<F: FnMut(DefId)>(&self,\n                                                    tcx: &ctxt<'tcx>,\n                                                    self_ty: Ty<'tcx>,\n@@ -3203,18 +3205,29 @@ impl<'tcx> TraitDef<'tcx> {\n             f(impl_def_id);\n         }\n \n-        if let Some(simp) = fast_reject::simplify_type(tcx, self_ty, false) {\n+        // simplify_type(.., false) basically replaces type parameters and\n+        // projections with infer-variables. This is, of course, done on\n+        // the impl trait-ref when it is instantiated, but not on the\n+        // predicate trait-ref which is passed here.\n+        //\n+        // for example, if we match `S: Copy` against an impl like\n+        // `impl<T:Copy> Copy for Option<T>`, we replace the type variable\n+        // in `Option<T>` with an infer variable, to `Option<_>` (this\n+        // doesn't actually change fast_reject output), but we don't\n+        // replace `S` with anything - this impl of course can't be\n+        // selected, and as there are hundreds of similar impls,\n+        // considering them would significantly harm performance.\n+        if let Some(simp) = fast_reject::simplify_type(tcx, self_ty, true) {\n             if let Some(impls) = self.nonblanket_impls.borrow().get(&simp) {\n                 for &impl_def_id in impls {\n                     f(impl_def_id);\n                 }\n-                return; // we don't need to process the other non-blanket impls\n             }\n-        }\n-\n-        for v in self.nonblanket_impls.borrow().values() {\n-            for &impl_def_id in v {\n-                f(impl_def_id);\n+        } else {\n+            for v in self.nonblanket_impls.borrow().values() {\n+                for &impl_def_id in v {\n+                    f(impl_def_id);\n+                }\n             }\n         }\n     }\n@@ -7267,6 +7280,24 @@ impl<'tcx,T:HasTypeFlags> HasTypeFlags for VecPerParamSpace<T> {\n     }\n }\n \n+impl HasTypeFlags for abi::Abi {\n+    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n+        false\n+    }\n+}\n+\n+impl HasTypeFlags for ast::Unsafety {\n+    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n+        false\n+    }\n+}\n+\n+impl HasTypeFlags for BuiltinBounds {\n+    fn has_type_flags(&self, _flags: TypeFlags) -> bool {\n+        false\n+    }\n+}\n+\n impl<'tcx> HasTypeFlags for ClosureTy<'tcx> {\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n         self.sig.has_type_flags(flags)\n@@ -7279,6 +7310,12 @@ impl<'tcx> HasTypeFlags for ClosureUpvar<'tcx> {\n     }\n }\n \n+impl<'tcx> HasTypeFlags for ExistentialBounds<'tcx> {\n+    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n+        self.projection_bounds.has_type_flags(flags)\n+    }\n+}\n+\n impl<'tcx> HasTypeFlags for ty::InstantiatedPredicates<'tcx> {\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n         self.predicates.has_type_flags(flags)\n@@ -7354,6 +7391,12 @@ impl<'tcx> HasTypeFlags for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> HasTypeFlags for TypeAndMut<'tcx> {\n+    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n+        self.ty.has_type_flags(flags)\n+    }\n+}\n+\n impl<'tcx> HasTypeFlags for TraitRef<'tcx> {\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n         self.substs.has_type_flags(flags)"}, {"sha": "f307f674732a1b23cdc045247cd9c30276f1975e", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cacbe2586fb37521679664798d006cd6831504/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=16cacbe2586fb37521679664798d006cd6831504", "patch": "@@ -14,7 +14,7 @@\n //! type equality, etc.\n \n use middle::subst::{ErasedRegions, NonerasedRegions, ParamSpace, Substs};\n-use middle::ty::{self, Ty, TypeError};\n+use middle::ty::{self, HasTypeFlags, Ty, TypeError};\n use middle::ty_fold::TypeFoldable;\n use std::rc::Rc;\n use syntax::abi;\n@@ -78,7 +78,7 @@ pub trait TypeRelation<'a,'tcx> : Sized {\n         where T: Relate<'a,'tcx>;\n }\n \n-pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> {\n+pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> + HasTypeFlags {\n     fn relate<R:TypeRelation<'a,'tcx>>(relation: &mut R,\n                                        a: &Self,\n                                        b: &Self)"}]}