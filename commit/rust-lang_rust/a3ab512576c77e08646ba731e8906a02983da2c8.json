{"sha": "a3ab512576c77e08646ba731e8906a02983da2c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYWI1MTI1NzZjNzdlMDg2NDZiYTczMWU4OTA2YTAyOTgzZGEyYzg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-04T08:48:24Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-04T08:48:24Z"}, "message": "Fix `collapsible_if` error", "tree": {"sha": "06ef7616d5cb3816bcd837422ead833b5c4fb22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ef7616d5cb3816bcd837422ead833b5c4fb22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3ab512576c77e08646ba731e8906a02983da2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ab512576c77e08646ba731e8906a02983da2c8", "html_url": "https://github.com/rust-lang/rust/commit/a3ab512576c77e08646ba731e8906a02983da2c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3ab512576c77e08646ba731e8906a02983da2c8/comments", "author": null, "committer": null, "parents": [{"sha": "0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3", "html_url": "https://github.com/rust-lang/rust/commit/0c1ffc1d1fdfd73bf326d1e7a886f59367374dc3"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "69aabcb7949a3bf26bf91e9f7ad14c9f1b857614", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3ab512576c77e08646ba731e8906a02983da2c8/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ab512576c77e08646ba731e8906a02983da2c8/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=a3ab512576c77e08646ba731e8906a02983da2c8", "patch": "@@ -186,21 +186,19 @@ fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if let ast::ExprKind::Array(ref array) = expr.node {\n         for element in array {\n             if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n-                if has_unary_equivalent(op.node) {\n-                    if !differing_macro_contexts(lhs.span, op.span) {\n-                        let space_span = lhs.span.between(op.span);\n-                        if let Some(space_snippet) = snippet_opt(cx, space_span) {\n-                            let lint_span = lhs.span.with_lo(lhs.span.hi());\n-                            if space_snippet.contains('\\n') {\n-                                span_note_and_lint(\n-                                    cx,\n-                                    POSSIBLE_MISSING_COMMA,\n-                                    lint_span,\n-                                    \"possibly missing a comma here\",\n-                                    lint_span,\n-                                    \"to remove this lint, add a comma or write the expr in a single line\",\n-                                );\n-                            }\n+                if has_unary_equivalent(op.node) && !differing_macro_contexts(lhs.span, op.span) {\n+                    let space_span = lhs.span.between(op.span);\n+                    if let Some(space_snippet) = snippet_opt(cx, space_span) {\n+                        let lint_span = lhs.span.with_lo(lhs.span.hi());\n+                        if space_snippet.contains('\\n') {\n+                            span_note_and_lint(\n+                                cx,\n+                                POSSIBLE_MISSING_COMMA,\n+                                lint_span,\n+                                \"possibly missing a comma here\",\n+                                lint_span,\n+                                \"to remove this lint, add a comma or write the expr in a single line\",\n+                            );\n                         }\n                     }\n                 }"}]}