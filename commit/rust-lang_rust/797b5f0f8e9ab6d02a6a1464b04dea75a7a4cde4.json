{"sha": "797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "node_id": "C_kwDOAAsO6NoAKDc5N2I1ZjBmOGU5YWI2ZDAyYTZhMTQ2NGIwNGRlYTc1YTdhNGNkZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-25T23:47:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-25T23:47:11Z"}, "message": "Auto merge of #106143 - matthiaskrgr:rollup-3kpy1dc, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #105375 (Fix an outdated comment mentioning parameter that doesn't exist anymore)\n - #105955 (Remove wrapper functions for some unstable options)\n - #106137 (fix more clippy::style findings)\n - #106140 (Migrate links-color.goml to functions)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "811ca661f067af0af334b460c71448460ccb81bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811ca661f067af0af334b460c71448460ccb81bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "html_url": "https://github.com/rust-lang/rust/commit/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfb3395411555e93399671d0c41a4ac9ed62b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfb3395411555e93399671d0c41a4ac9ed62b95", "html_url": "https://github.com/rust-lang/rust/commit/8dfb3395411555e93399671d0c41a4ac9ed62b95"}, {"sha": "a054e703b1d6335d7145c7280d63add754bb0d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/a054e703b1d6335d7145c7280d63add754bb0d93", "html_url": "https://github.com/rust-lang/rust/commit/a054e703b1d6335d7145c7280d63add754bb0d93"}], "stats": {"total": 384, "additions": 173, "deletions": 211}, "files": [{"sha": "4abb1d90f4485e6a3998da2ef721c69d858eb1b4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -259,8 +259,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         body.as_deref(),\n                     );\n \n-                    let mut itctx = ImplTraitContext::Universal;\n-                    let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n+                    let itctx = ImplTraitContext::Universal;\n+                    let (generics, decl) = this.lower_generics(generics, id, &itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n                         this.lower_fn_decl(&decl, id, *fn_sig_span, FnDeclKind::Fn, ret_id)\n                     });\n@@ -369,9 +369,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let mut itctx = ImplTraitContext::Universal;\n+                let itctx = ImplTraitContext::Universal;\n                 let (generics, (trait_ref, lowered_ty)) =\n-                    self.lower_generics(ast_generics, id, &mut itctx, |this| {\n+                    self.lower_generics(ast_generics, id, &itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n@@ -590,9 +590,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match &i.kind {\n                 ForeignItemKind::Fn(box Fn { sig, generics, .. }) => {\n                     let fdec = &sig.decl;\n-                    let mut itctx = ImplTraitContext::Universal;\n+                    let itctx = ImplTraitContext::Universal;\n                     let (generics, (fn_dec, fn_args)) =\n-                        self.lower_generics(generics, i.id, &mut itctx, |this| {\n+                        self.lower_generics(generics, i.id, &itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(\n@@ -1184,8 +1184,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<(NodeId, Span)>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let mut itctx = ImplTraitContext::Universal;\n-        let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n+        let itctx = ImplTraitContext::Universal;\n+        let (generics, decl) = self.lower_generics(generics, id, &itctx, |this| {\n             this.lower_fn_decl(&sig.decl, id, sig.span, kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })"}, {"sha": "a089510493effe6425a3702bd8029f2c65d19967", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1656,9 +1656,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // Lowers a function declaration.\n     //\n     // `decl`: the unlowered (AST) function declaration.\n-    // `fn_def_id`: if `Some`, impl Trait arguments are lowered into generic parameters on the\n-    //      given DefId, otherwise impl Trait is disallowed. Must be `Some` if\n-    //      `make_ret_async` is also `Some`.\n+    // `fn_node_id`: `impl Trait` arguments are lowered into generic parameters on the given `NodeId`.\n     // `make_ret_async`: if `Some`, converts `-> T` into `-> impl Future<Output = T>` in the\n     //      return type. This is used for `async fn` declarations. The `NodeId` is the ID of the\n     //      return type `impl Trait` item, and the `Span` points to the `async` keyword.\n@@ -1789,7 +1787,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     //     type OpaqueTy<generics_from_parent_fn> = impl Future<Output = T>;\n     //\n     // `output`: unlowered output type (`T` in `-> T`)\n-    // `fn_def_id`: `DefId` of the parent function (used to create child impl trait definition)\n+    // `fn_node_id`: `NodeId` of the parent function (used to create child impl trait definition)\n     // `opaque_ty_node_id`: `NodeId` of the opaque `impl Trait` type that should be created\n     #[instrument(level = \"debug\", skip(self))]\n     fn lower_async_fn_ret_ty(\n@@ -2031,15 +2029,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         output: &FnRetTy,\n         span: Span,\n-        mut nested_impl_trait_context: ImplTraitContext,\n+        nested_impl_trait_context: ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n             FnRetTy::Ty(ty) => {\n                 // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n                 // `impl Future` opaque type that `async fn` implicitly\n                 // generates.\n-                self.lower_ty(ty, &mut nested_impl_trait_context)\n+                self.lower_ty(ty, &nested_impl_trait_context)\n             }\n             FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };"}, {"sha": "06d885a45fb7d9c015620804e806972aa8480364", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                         break hir::PatKind::TupleStruct(qpath, pats, ddpos);\n@@ -53,7 +53,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         break hir::PatKind::Path(qpath);\n                     }\n@@ -63,7 +63,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| {"}, {"sha": "8fa43f8528cca2a6b0f7b1b1e96c633ae7761adc", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -37,31 +37,30 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // those.\n         //\n         // e.g., `|x: FxHashMap<_, &'static u32>| ...`\n-        let user_provided_sig;\n-        if !self.tcx().is_closure(mir_def_id.to_def_id()) {\n-            user_provided_sig = None;\n+        let user_provided_sig = if !self.tcx().is_closure(mir_def_id.to_def_id()) {\n+            None\n         } else {\n             let typeck_results = self.tcx().typeck(mir_def_id);\n-            user_provided_sig =\n-                typeck_results.user_provided_sigs.get(&mir_def_id).map(|user_provided_poly_sig| {\n-                    // Instantiate the canonicalized variables from\n-                    // user-provided signature (e.g., the `_` in the code\n-                    // above) with fresh variables.\n-                    let poly_sig = self.instantiate_canonical_with_fresh_inference_vars(\n-                        body.span,\n-                        &user_provided_poly_sig,\n-                    );\n-\n-                    // Replace the bound items in the fn sig with fresh\n-                    // variables, so that they represent the view from\n-                    // \"inside\" the closure.\n-                    self.infcx.replace_bound_vars_with_fresh_vars(\n-                        body.span,\n-                        LateBoundRegionConversionTime::FnCall,\n-                        poly_sig,\n-                    )\n-                });\n-        }\n+\n+            typeck_results.user_provided_sigs.get(&mir_def_id).map(|user_provided_poly_sig| {\n+                // Instantiate the canonicalized variables from\n+                // user-provided signature (e.g., the `_` in the code\n+                // above) with fresh variables.\n+                let poly_sig = self.instantiate_canonical_with_fresh_inference_vars(\n+                    body.span,\n+                    &user_provided_poly_sig,\n+                );\n+\n+                // Replace the bound items in the fn sig with fresh\n+                // variables, so that they represent the view from\n+                // \"inside\" the closure.\n+                self.infcx.replace_bound_vars_with_fresh_vars(\n+                    body.span,\n+                    LateBoundRegionConversionTime::FnCall,\n+                    poly_sig,\n+                )\n+            })\n+        };\n \n         debug!(?normalized_input_tys, ?body.local_decls);\n "}, {"sha": "95baa95b02183601ff022eaac84e1f3b9622ae07", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -102,10 +102,10 @@ pub fn uwtable_attr(llcx: &llvm::Context) -> &Attribute {\n \n pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n     let mut fp = cx.sess().target.frame_pointer;\n+    let opts = &cx.sess().opts;\n     // \"mcount\" function relies on stack pointer.\n     // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>.\n-    if cx.sess().instrument_mcount() || matches!(cx.sess().opts.cg.force_frame_pointers, Some(true))\n-    {\n+    if opts.unstable_opts.instrument_mcount || matches!(opts.cg.force_frame_pointers, Some(true)) {\n         fp = FramePointer::Always;\n     }\n     let attr_value = match fp {\n@@ -119,7 +119,7 @@ pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attr\n /// Tell LLVM what instrument function to insert.\n #[inline]\n fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n-    if cx.sess().instrument_mcount() {\n+    if cx.sess().opts.unstable_opts.instrument_mcount {\n         // Similar to `clang -pg` behavior. Handled by the\n         // `post-inline-ee-instrument` LLVM pass.\n "}, {"sha": "e23c88b62c14b4bb92ff0be5078120a0e16ecc79", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -203,7 +203,7 @@ pub fn target_machine_factory(\n         sess.opts.unstable_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);\n     let emit_stack_size_section = sess.opts.unstable_opts.emit_stack_sizes;\n \n-    let asm_comments = sess.asm_comments();\n+    let asm_comments = sess.opts.unstable_opts.asm_comments;\n     let relax_elf_relocations =\n         sess.opts.unstable_opts.relax_elf_relocations.unwrap_or(sess.target.relax_elf_relocations);\n "}, {"sha": "79b243f73d1a0598925e0ee69c1657c40c89e968", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -81,10 +81,10 @@ unsafe fn configure_llvm(sess: &Session) {\n         };\n         // Set the llvm \"program name\" to make usage and invalid argument messages more clear.\n         add(\"rustc -Cllvm-args=\\\"...\\\" with\", true);\n-        if sess.time_llvm_passes() {\n+        if sess.opts.unstable_opts.time_llvm_passes {\n             add(\"-time-passes\", false);\n         }\n-        if sess.print_llvm_passes() {\n+        if sess.opts.unstable_opts.print_llvm_passes {\n             add(\"-debug-pass=Structure\", false);\n         }\n         if sess.target.generate_arange_section"}, {"sha": "1a7de1a184a9c1b642c3d8bdbbe67f964323753c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1899,7 +1899,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n         // FIXME: time_llvm_passes support - does this use a global context or\n         // something?\n-        if sess.codegen_units() == 1 && sess.time_llvm_passes() {\n+        if sess.codegen_units() == 1 && sess.opts.unstable_opts.time_llvm_passes {\n             self.backend.print_pass_timings()\n         }\n "}, {"sha": "8b34be3858006f763849e55cb4954dd5c764464a", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -681,7 +681,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n \n     let mut total_codegen_time = Duration::new(0, 0);\n-    let start_rss = tcx.sess.time_passes().then(|| get_resident_set_size());\n+    let start_rss = tcx.sess.opts.unstable_opts.time_passes.then(|| get_resident_set_size());\n \n     // The non-parallel compiler can only translate codegen units to LLVM IR\n     // on a single thread, leading to a staircase effect where the N LLVM\n@@ -781,7 +781,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Since the main thread is sometimes blocked during codegen, we keep track\n     // -Ztime-passes output manually.\n-    if tcx.sess.time_passes() {\n+    if tcx.sess.opts.unstable_opts.time_passes {\n         let end_rss = get_resident_set_size();\n \n         print_time_passes_entry("}, {"sha": "3ae6c531b4453bedb7b466291d3ef6bd6726ea07", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -509,7 +509,7 @@ pub fn compute_debuginfo_vtable_name<'tcx>(\n         visited.clear();\n         push_generic_params_internal(tcx, trait_ref.substs, &mut vtable_name, &mut visited);\n     } else {\n-        vtable_name.push_str(\"_\");\n+        vtable_name.push('_');\n     }\n \n     push_close_angle_bracket(cpp_like_debuginfo, &mut vtable_name);"}, {"sha": "31e08c44d29812a12d2a62fbc34d4cbd0fa435d8", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -653,7 +653,7 @@ fn print_crate_info(\n     for req in &sess.opts.prints {\n         match *req {\n             TargetList => {\n-                let mut targets = rustc_target::spec::TARGETS.iter().copied().collect::<Vec<_>>();\n+                let mut targets = rustc_target::spec::TARGETS.to_vec();\n                 targets.sort_unstable();\n                 println!(\"{}\", targets.join(\"\\n\"));\n             }"}, {"sha": "b03352d5fec6b9274f4944ab122743cb646e2215", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1212,8 +1212,8 @@ impl HandlerInner {\n         self.taught_diagnostics.insert(code.clone())\n     }\n \n-    fn force_print_diagnostic(&mut self, mut db: Diagnostic) {\n-        self.emitter.emit_diagnostic(&mut db);\n+    fn force_print_diagnostic(&mut self, db: Diagnostic) {\n+        self.emitter.emit_diagnostic(&db);\n     }\n \n     /// Emit all stashed diagnostics."}, {"sha": "3e6bc81f67232f74b5df6b0809a9bd17b46981ec", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1166,11 +1166,7 @@ fn check_matcher_core<'tt>(\n                                     err.note(&format!(\n                                         \"{}{} or {}\",\n                                         msg,\n-                                        ts[..ts.len() - 1]\n-                                            .iter()\n-                                            .copied()\n-                                            .collect::<Vec<_>>()\n-                                            .join(\", \"),\n+                                        ts[..ts.len() - 1].to_vec().join(\", \"),\n                                         ts[ts.len() - 1],\n                                     ));\n                                 }"}, {"sha": "4f27068429c6d0777f96c8d3f479b408c3d95f03", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -410,10 +410,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                             tcx,\n                             param_env,\n                             item_hir_id,\n-                            tcx.explicit_item_bounds(item_def_id)\n-                                .iter()\n-                                .copied()\n-                                .collect::<Vec<_>>(),\n+                            tcx.explicit_item_bounds(item_def_id).to_vec(),\n                             &FxIndexSet::default(),\n                             gat_def_id.def_id,\n                             gat_generics,"}, {"sha": "a16bb7f1a5f47aaaf3e1b5105c3e16c3090c1866", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -355,14 +355,12 @@ impl LintStore {\n                     sub: RequestedLevel { level, lint_name },\n                 });\n             }\n-            CheckLintNameResult::Tool(result) => {\n-                if let Err((Some(_), new_name)) = result {\n-                    sess.emit_warning(CheckNameDeprecated {\n-                        lint_name: lint_name.clone(),\n-                        new_name,\n-                        sub: RequestedLevel { level, lint_name },\n-                    });\n-                }\n+            CheckLintNameResult::Tool(Err((Some(_), new_name))) => {\n+                sess.emit_warning(CheckNameDeprecated {\n+                    lint_name: lint_name.clone(),\n+                    new_name,\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n             }\n             CheckLintNameResult::NoTool => {\n                 sess.emit_err(CheckNameUnknownTool {"}, {"sha": "65beb744cf80c30239f2d6b8ec10e7386f32a31e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -713,7 +713,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let computed_total_bytes: usize = stats.iter().map(|(_, size)| size).sum();\n         assert_eq!(total_bytes, computed_total_bytes);\n \n-        if tcx.sess.meta_stats() {\n+        if tcx.sess.opts.unstable_opts.meta_stats {\n             self.opaque.flush();\n \n             // Rewind and re-read all the metadata to count the zero bytes we wrote.\n@@ -1564,7 +1564,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {\n                     let trait_def = self.tcx.trait_def(trait_ref.def_id);\n-                    if let Some(mut an) = trait_def.ancestors(self.tcx, def_id).ok() {\n+                    if let Ok(mut an) = trait_def.ancestors(self.tcx, def_id) {\n                         if let Some(specialization_graph::Node::Impl(parent)) = an.nth(1) {\n                             self.tables.impl_parent.set(def_id.index, parent.into());\n                         }"}, {"sha": "99e692ccb584a8ac30c9f60e0c6b224cfaa814c7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -704,12 +704,10 @@ impl<'hir> Map<'hir> {\n     pub fn get_return_block(self, id: HirId) -> Option<HirId> {\n         let mut iter = self.parent_iter(id).peekable();\n         let mut ignore_tail = false;\n-        if let Some(node) = self.find(id) {\n-            if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = node {\n-                // When dealing with `return` statements, we don't care about climbing only tail\n-                // expressions.\n-                ignore_tail = true;\n-            }\n+        if let Some(Node::Expr(Expr { kind: ExprKind::Ret(_), .. })) = self.find(id) {\n+            // When dealing with `return` statements, we don't care about climbing only tail\n+            // expressions.\n+            ignore_tail = true;\n         }\n         while let Some((hir_id, node)) = iter.next() {\n             if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {"}, {"sha": "a89e6566d56affcb6dfeddb285a18e373bf3c663", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -2894,7 +2894,7 @@ fn pretty_print_const_value<'tcx>(\n                 if let Some(contents) = tcx.try_destructure_mir_constant(\n                     ty::ParamEnv::reveal_all().and(ConstantKind::Val(ct, ty)),\n                 ) {\n-                    let fields = contents.fields.iter().copied().collect::<Vec<_>>();\n+                    let fields = contents.fields.to_vec();\n                     match *ty.kind() {\n                         ty::Array(..) => {\n                             fmt.write_str(\"[\")?;"}, {"sha": "4f25fc71314ea1ae738d29bc4ceff7bc61695c2a", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -305,7 +305,7 @@ where\n                 );\n             }\n \n-            let _ = writeln!(s, \"\");\n+            let _ = writeln!(s);\n         }\n \n         std::mem::take(s)"}, {"sha": "c59c06ac31ed7ca11f82b8d649fd8e14f997c40b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1090,9 +1090,7 @@ impl CheckAttrVisitor<'_> {\n                                     errors::DocTestUnknownInclude {\n                                         path,\n                                         value: value.to_string(),\n-                                        inner: (attr.style == AttrStyle::Inner)\n-                                            .then_some(\"!\")\n-                                            .unwrap_or(\"\"),\n+                                        inner: if attr.style == AttrStyle::Inner { \"!\" } else { \"\" },\n                                         sugg: (attr.meta().unwrap().span, applicability),\n                                     }\n                                 );"}, {"sha": "ae01efebacc21e9f4ffc41ef8a25e6b07a93f871", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1214,7 +1214,6 @@ options! {\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata (default: no)\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::asm_comments` instead of this field\")]\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n     assert_incr_state: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1363,7 +1362,6 @@ options! {\n         `=except-unused-generics`\n         `=except-unused-functions`\n         `=off` (default)\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::instrument_mcount` instead of this field\")]\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n@@ -1392,7 +1390,6 @@ options! {\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking \\\n         the same values as the target option of the same name\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::meta_stats` instead of this field\")]\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather metadata statistics (default: no)\"),\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n@@ -1469,7 +1466,6 @@ options! {\n         See #77382 and #74551.\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"make rustc print the total optimization fuel used by a crate\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::print_llvm_passes` instead of this field\")]\n     print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"print the LLVM optimization passes being run (default: no)\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1583,10 +1579,8 @@ options! {\n     #[rustc_lint_opt_deny_field_access(\"use `Session::threads` instead of this field\")]\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::time_llvm_passes` instead of this field\")]\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each LLVM pass (default: no)\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\")]\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]"}, {"sha": "4a3d29414d6e598f2b24efe90835e626f916b34a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -976,34 +976,10 @@ impl Session {\n         self.opts.unstable_opts.verbose\n     }\n \n-    pub fn instrument_mcount(&self) -> bool {\n-        self.opts.unstable_opts.instrument_mcount\n-    }\n-\n-    pub fn time_passes(&self) -> bool {\n-        self.opts.unstable_opts.time_passes\n-    }\n-\n-    pub fn time_llvm_passes(&self) -> bool {\n-        self.opts.unstable_opts.time_llvm_passes\n-    }\n-\n-    pub fn meta_stats(&self) -> bool {\n-        self.opts.unstable_opts.meta_stats\n-    }\n-\n-    pub fn asm_comments(&self) -> bool {\n-        self.opts.unstable_opts.asm_comments\n-    }\n-\n     pub fn verify_llvm_ir(&self) -> bool {\n         self.opts.unstable_opts.verify_llvm_ir || option_env!(\"RUSTC_VERIFY_LLVM_IR\").is_some()\n     }\n \n-    pub fn print_llvm_passes(&self) -> bool {\n-        self.opts.unstable_opts.print_llvm_passes\n-    }\n-\n     pub fn binary_dep_depinfo(&self) -> bool {\n         self.opts.unstable_opts.binary_dep_depinfo\n     }"}, {"sha": "472086eca8feb698bafb629b699d9c9b803984db", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -1291,29 +1291,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code().peel_derives() {\n             let hir = self.tcx.hir();\n-            if let Some(node) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n-                if let hir::Node::Expr(expr) = node {\n-                    // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n-                    // and if not maybe suggest doing something else? If we kept the expression around we\n-                    // could also check if it is an fn call (very likely) and suggest changing *that*, if\n-                    // it is from the local crate.\n-                    err.span_suggestion(\n-                        span,\n-                        \"remove the `.await`\",\n-                        \"\",\n-                        Applicability::MachineApplicable,\n-                    );\n-                    // FIXME: account for associated `async fn`s.\n-                    if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n-                        if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n-                            obligation.predicate.kind().skip_binder()\n-                        {\n-                            err.span_label(\n-                                *span,\n-                                &format!(\"this call returns `{}`\", pred.self_ty()),\n-                            );\n-                        }\n-                        if let Some(typeck_results) = &self.typeck_results\n+            if let Some(hir::Node::Expr(expr)) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n+                // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n+                // and if not maybe suggest doing something else? If we kept the expression around we\n+                // could also check if it is an fn call (very likely) and suggest changing *that*, if\n+                // it is from the local crate.\n+                err.span_suggestion(\n+                    span,\n+                    \"remove the `.await`\",\n+                    \"\",\n+                    Applicability::MachineApplicable,\n+                );\n+                // FIXME: account for associated `async fn`s.\n+                if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n+                    if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n+                        obligation.predicate.kind().skip_binder()\n+                    {\n+                        err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n+                    }\n+                    if let Some(typeck_results) = &self.typeck_results\n                             && let ty = typeck_results.expr_ty_adjusted(base)\n                             && let ty::FnDef(def_id, _substs) = ty.kind()\n                             && let Some(hir::Node::Item(hir::Item { ident, span, vis_span, .. })) =\n@@ -1339,7 +1335,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 );\n                             }\n                         }\n-                    }\n                 }\n             }\n         }"}, {"sha": "9402c09eb69e719c27b1fa93800b3a89e3851d10", "filename": "src/test/rustdoc-gui/links-color.goml", "status": "modified", "additions": 87, "deletions": 74, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml?ref=797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "patch": "@@ -4,82 +4,95 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // This is needed so that the text color is computed.\n show-text: true\n \n-// Ayu theme\n-local-storage: {\n-    \"rustdoc-theme\": \"ayu\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-assert-css: (\".item-table .mod\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n-assert-css: (\".item-table .macro\", {\"color\": \"rgb(163, 122, 204)\"}, ALL)\n-assert-css: (\".item-table .struct\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n-assert-css: (\".item-table .enum\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n-assert-css: (\".item-table .trait\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n-assert-css: (\".item-table .fn\", {\"color\": \"rgb(253, 214, 135)\"}, ALL)\n-assert-css: (\".item-table .type\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n-assert-css: (\".item-table .union\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n-assert-css: (\".item-table .keyword\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n-\n-assert-css: (\n-    \".sidebar-elems a:not(.current)\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".sidebar-elems a.current\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"500\"},\n-    ALL,\n+define-function: (\n+    \"check-colors\",\n+    (theme, mod, macro, struct, enum, trait, fn, type, union, keyword,\n+     sidebar, sidebar_current, sidebar_current_background),\n+    [\n+        (\"local-storage\", {\n+            \"rustdoc-theme\": |theme|,\n+            \"rustdoc-use-system-theme\": \"false\",\n+        }),\n+        (\"reload\"),\n+        // Checking results colors.\n+        (\"assert-css\", (\".item-table .mod\", {\"color\": |mod|}, ALL)),\n+        (\"assert-css\", (\".item-table .macro\", {\"color\": |macro|}, ALL)),\n+        (\"assert-css\", (\".item-table .struct\", {\"color\": |struct|}, ALL)),\n+        (\"assert-css\", (\".item-table .enum\", {\"color\": |enum|}, ALL)),\n+        (\"assert-css\", (\".item-table .trait\", {\"color\": |trait|}, ALL)),\n+        (\"assert-css\", (\".item-table .fn\", {\"color\": |fn|}, ALL)),\n+        (\"assert-css\", (\".item-table .type\", {\"color\": |type|}, ALL)),\n+        (\"assert-css\", (\".item-table .union\", {\"color\": |union|}, ALL)),\n+        (\"assert-css\", (\".item-table .keyword\", {\"color\": |keyword|}, ALL)),\n+        // Checking sidebar elements.\n+        (\"assert-css\", (\n+            \".sidebar-elems a:not(.current)\",\n+            {\"color\": |sidebar|, \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n+            ALL,\n+        )),\n+        (\"assert-css\", (\n+            \".sidebar-elems a.current\",\n+            {\n+                \"color\": |sidebar_current|,\n+                \"background-color\": |sidebar_current_background|,\n+                \"font-weight\": \"500\",\n+            },\n+            ALL,\n+        )),\n+    ],\n )\n \n-\n-// Dark theme\n-local-storage: {\"rustdoc-theme\": \"dark\"}\n-reload:\n-\n-assert-css: (\".item-table .mod\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n-assert-css: (\".item-table .macro\", {\"color\": \"rgb(9, 189, 0)\"}, ALL)\n-assert-css: (\".item-table .struct\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n-assert-css: (\".item-table .enum\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n-assert-css: (\".item-table .trait\", {\"color\": \"rgb(183, 140, 242)\"}, ALL)\n-assert-css: (\".item-table .fn\", {\"color\": \"rgb(43, 171, 99)\"}, ALL)\n-assert-css: (\".item-table .type\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n-assert-css: (\".item-table .union\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n-assert-css: (\".item-table .keyword\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n-\n-assert-css: (\n-    \".sidebar-elems a:not(.current)\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n-    ALL,\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"mod\": \"rgb(57, 175, 215)\",\n+        \"macro\": \"rgb(163, 122, 204)\",\n+        \"struct\": \"rgb(255, 160, 165)\",\n+        \"enum\": \"rgb(255, 160, 165)\",\n+        \"trait\": \"rgb(57, 175, 215)\",\n+        \"fn\": \"rgb(253, 214, 135)\",\n+        \"type\": \"rgb(255, 160, 165)\",\n+        \"union\": \"rgb(255, 160, 165)\",\n+        \"keyword\": \"rgb(57, 175, 215)\",\n+        \"sidebar\": \"rgb(83, 177, 219)\",\n+        \"sidebar_current\": \"rgb(255, 180, 76)\",\n+        \"sidebar_current_background\": \"rgba(0, 0, 0, 0)\",\n+    },\n )\n-assert-css: (\n-    \".sidebar-elems a.current\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\", \"font-weight\": \"500\"},\n-    ALL,\n-)\n-\n-\n-// Light theme\n-local-storage: {\"rustdoc-theme\": \"light\"}\n-reload:\n-\n-assert-css: (\".item-table .mod\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)\n-assert-css: (\".item-table .macro\", {\"color\": \"rgb(6, 128, 0)\"}, ALL)\n-assert-css: (\".item-table .struct\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n-assert-css: (\".item-table .enum\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n-assert-css: (\".item-table .trait\", {\"color\": \"rgb(110, 79, 201)\"}, ALL)\n-assert-css: (\".item-table .fn\", {\"color\": \"rgb(173, 124, 55)\"}, ALL)\n-assert-css: (\".item-table .type\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n-assert-css: (\".item-table .union\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n-assert-css: (\".item-table .keyword\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)\n-\n-assert-css: (\n-    \".sidebar-elems a:not(.current)\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n-    ALL,\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"mod\": \"rgb(210, 153, 29)\",\n+        \"macro\": \"rgb(9, 189, 0)\",\n+        \"struct\": \"rgb(45, 191, 184)\",\n+        \"enum\": \"rgb(45, 191, 184)\",\n+        \"trait\": \"rgb(183, 140, 242)\",\n+        \"fn\": \"rgb(43, 171, 99)\",\n+        \"type\": \"rgb(45, 191, 184)\",\n+        \"union\": \"rgb(45, 191, 184)\",\n+        \"keyword\": \"rgb(210, 153, 29)\",\n+        \"sidebar\": \"rgb(253, 191, 53)\",\n+        \"sidebar_current\": \"rgb(253, 191, 53)\",\n+        \"sidebar_current_background\": \"rgb(68, 68, 68)\",\n+    },\n )\n-assert-css: (\n-    \".sidebar-elems a.current\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\", \"font-weight\": \"500\"},\n-    ALL,\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"mod\": \"rgb(56, 115, 173)\",\n+        \"macro\": \"rgb(6, 128, 0)\",\n+        \"struct\": \"rgb(173, 55, 138)\",\n+        \"enum\": \"rgb(173, 55, 138)\",\n+        \"trait\": \"rgb(110, 79, 201)\",\n+        \"fn\": \"rgb(173, 124, 55)\",\n+        \"type\": \"rgb(173, 55, 138)\",\n+        \"union\": \"rgb(173, 55, 138)\",\n+        \"keyword\": \"rgb(56, 115, 173)\",\n+        \"sidebar\": \"rgb(53, 109, 164)\",\n+        \"sidebar_current\": \"rgb(53, 109, 164)\",\n+        \"sidebar_current_background\": \"rgb(255, 255, 255)\",\n+    },\n )"}]}