{"sha": "9e4e739209e77274b574cfc8cd80c956fb08bfa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGU3MzkyMDllNzcyNzRiNTc0Y2ZjOGNkODBjOTU2ZmIwOGJmYTQ=", "commit": {"author": {"name": "LinkTed", "email": "link.ted@mailbox.org", "date": "2021-02-27T13:07:30Z"}, "committer": {"name": "LinkTed", "email": "link.ted@mailbox.org", "date": "2021-02-28T12:33:09Z"}, "message": "unix: Non-mutable bufs in send_vectored_with_ancillary_to\n\nChange the arguments of `send_vectored_with_ancillary` and\n`send_vectored_with_ancillary_to` to take an non-mutable bufs.", "tree": {"sha": "984c9f6bfe4b8cd568bfc91b25a9ca6bb04df08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/984c9f6bfe4b8cd568bfc91b25a9ca6bb04df08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4e739209e77274b574cfc8cd80c956fb08bfa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e739209e77274b574cfc8cd80c956fb08bfa4", "html_url": "https://github.com/rust-lang/rust/commit/9e4e739209e77274b574cfc8cd80c956fb08bfa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e739209e77274b574cfc8cd80c956fb08bfa4/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e863eb59a10fb0900d7377524a0dc7bf44b9ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e863eb59a10fb0900d7377524a0dc7bf44b9ae3", "html_url": "https://github.com/rust-lang/rust/commit/8e863eb59a10fb0900d7377524a0dc7bf44b9ae3"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "33d6a39af07f64ae0b8edbbf99777dc8cbdbb5e5", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=9e4e739209e77274b574cfc8cd80c956fb08bfa4", "patch": "@@ -1,6 +1,6 @@\n use super::{sockaddr_un, SocketAddr};\n use crate::convert::TryFrom;\n-use crate::io::{self, IoSliceMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::marker::PhantomData;\n use crate::mem::{size_of, zeroed};\n use crate::os::unix::io::RawFd;\n@@ -68,7 +68,7 @@ pub(super) fn recv_vectored_with_ancillary_from(\n pub(super) fn send_vectored_with_ancillary_to(\n     socket: &Socket,\n     path: Option<&Path>,\n-    bufs: &mut [IoSliceMut<'_>],\n+    bufs: &[IoSlice<'_>],\n     ancillary: &mut SocketAncillary<'_>,\n ) -> io::Result<usize> {\n     unsafe {\n@@ -78,7 +78,7 @@ pub(super) fn send_vectored_with_ancillary_to(\n         let mut msg: libc::msghdr = zeroed();\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = msg_namelen;\n-        msg.msg_iov = bufs.as_mut_ptr().cast();\n+        msg.msg_iov = bufs.as_ptr() as *mut _;\n         msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n@@ -567,7 +567,7 @@ impl<'a> SocketAncillary<'a> {\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixStream, SocketAncillary};\n     /// use std::os::unix::io::AsRawFd;\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixStream::connect(\"/tmp/sock\")?;\n@@ -577,7 +577,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     ancillary.add_fds(&[sock.as_raw_fd()][..]);\n     ///\n     ///     let mut buf = [1; 8];\n-    ///     let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n+    ///     let mut bufs = &mut [IoSlice::new(&mut buf[..])][..];\n     ///     sock.send_vectored_with_ancillary(bufs, &mut ancillary)?;\n     ///     Ok(())\n     /// }"}, {"sha": "a8c13fbb874808f64a90669864cd00aeb057a0d0", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=9e4e739209e77274b574cfc8cd80c956fb08bfa4", "patch": "@@ -19,7 +19,7 @@ use super::{sockaddr_un, SocketAddr};\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n ))]\n-use crate::io::IoSliceMut;\n+use crate::io::{IoSlice, IoSliceMut};\n use crate::net::Shutdown;\n use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::path::Path;\n@@ -506,23 +506,24 @@ impl UnixDatagram {\n     /// ```no_run\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary};\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n-    ///     let mut buf1 = [1; 8];\n-    ///     let mut buf2 = [2; 16];\n-    ///     let mut buf3 = [3; 8];\n-    ///     let mut bufs = &mut [\n-    ///         IoSliceMut::new(&mut buf1),\n-    ///         IoSliceMut::new(&mut buf2),\n-    ///         IoSliceMut::new(&mut buf3),\n+    ///     let buf1 = [1; 8];\n+    ///     let buf2 = [2; 16];\n+    ///     let buf3 = [3; 8];\n+    ///     let bufs = &[\n+    ///         IoSlice::new(&buf1),\n+    ///         IoSlice::new(&buf2),\n+    ///         IoSlice::new(&buf3),\n     ///     ][..];\n     ///     let fds = [0, 1, 2];\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     ancillary.add_fds(&fds[..]);\n-    ///     sock.send_vectored_with_ancillary_to(bufs, &mut ancillary, \"/some/sock\").expect(\"send_vectored_with_ancillary_to function failed\");\n+    ///     sock.send_vectored_with_ancillary_to(bufs, &mut ancillary, \"/some/sock\")\n+    ///         .expect(\"send_vectored_with_ancillary_to function failed\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -538,7 +539,7 @@ impl UnixDatagram {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary_to<P: AsRef<Path>>(\n         &self,\n-        bufs: &mut [IoSliceMut<'_>],\n+        bufs: &[IoSlice<'_>],\n         ancillary: &mut SocketAncillary<'_>,\n         path: P,\n     ) -> io::Result<usize> {\n@@ -554,23 +555,24 @@ impl UnixDatagram {\n     /// ```no_run\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixDatagram, SocketAncillary};\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n-    ///     let mut buf1 = [1; 8];\n-    ///     let mut buf2 = [2; 16];\n-    ///     let mut buf3 = [3; 8];\n-    ///     let mut bufs = &mut [\n-    ///         IoSliceMut::new(&mut buf1),\n-    ///         IoSliceMut::new(&mut buf2),\n-    ///         IoSliceMut::new(&mut buf3),\n+    ///     let buf1 = [1; 8];\n+    ///     let buf2 = [2; 16];\n+    ///     let buf3 = [3; 8];\n+    ///     let bufs = &[\n+    ///         IoSlice::new(&buf1),\n+    ///         IoSlice::new(&buf2),\n+    ///         IoSlice::new(&buf3),\n     ///     ][..];\n     ///     let fds = [0, 1, 2];\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     ancillary.add_fds(&fds[..]);\n-    ///     sock.send_vectored_with_ancillary(bufs, &mut ancillary).expect(\"send_vectored_with_ancillary function failed\");\n+    ///     sock.send_vectored_with_ancillary(bufs, &mut ancillary)\n+    ///         .expect(\"send_vectored_with_ancillary function failed\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -586,7 +588,7 @@ impl UnixDatagram {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,\n-        bufs: &mut [IoSliceMut<'_>],\n+        bufs: &[IoSlice<'_>],\n         ancillary: &mut SocketAncillary<'_>,\n     ) -> io::Result<usize> {\n         send_vectored_with_ancillary_to(&self.0, None, bufs, ancillary)"}, {"sha": "fc08edacb828dbb5e7c6bc84df41819414b88397", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=9e4e739209e77274b574cfc8cd80c956fb08bfa4", "patch": "@@ -530,23 +530,24 @@ impl UnixStream {\n     /// ```no_run\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::{UnixStream, SocketAncillary};\n-    /// use std::io::IoSliceMut;\n+    /// use std::io::IoSlice;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n-    ///     let mut buf1 = [1; 8];\n-    ///     let mut buf2 = [2; 16];\n-    ///     let mut buf3 = [3; 8];\n-    ///     let mut bufs = &mut [\n-    ///         IoSliceMut::new(&mut buf1),\n-    ///         IoSliceMut::new(&mut buf2),\n-    ///         IoSliceMut::new(&mut buf3),\n+    ///     let buf1 = [1; 8];\n+    ///     let buf2 = [2; 16];\n+    ///     let buf3 = [3; 8];\n+    ///     let bufs = &[\n+    ///         IoSlice::new(&buf1),\n+    ///         IoSlice::new(&buf2),\n+    ///         IoSlice::new(&buf3),\n     ///     ][..];\n     ///     let fds = [0, 1, 2];\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     ancillary.add_fds(&fds[..]);\n-    ///     socket.send_vectored_with_ancillary(bufs, &mut ancillary).expect(\"send_vectored_with_ancillary function failed\");\n+    ///     socket.send_vectored_with_ancillary(bufs, &mut ancillary)\n+    ///         .expect(\"send_vectored_with_ancillary function failed\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -562,7 +563,7 @@ impl UnixStream {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,\n-        bufs: &mut [IoSliceMut<'_>],\n+        bufs: &[IoSlice<'_>],\n         ancillary: &mut SocketAncillary<'_>,\n     ) -> io::Result<usize> {\n         send_vectored_with_ancillary_to(&self.0, None, bufs, ancillary)"}, {"sha": "bd9b6dd727b96a2babdd8cdfe4eeff47515f02f9", "filename": "library/std/src/sys/unix/ext/net/tests.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e739209e77274b574cfc8cd80c956fb08bfa4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs?ref=9e4e739209e77274b574cfc8cd80c956fb08bfa4", "patch": "@@ -485,14 +485,14 @@ fn test_unix_datagram_peek_from() {\n fn test_send_vectored_fds_unix_stream() {\n     let (s1, s2) = or_panic!(UnixStream::pair());\n \n-    let mut buf1 = [1; 8];\n-    let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];\n+    let buf1 = [1; 8];\n+    let bufs_send = &[IoSlice::new(&buf1[..])][..];\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n     assert!(ancillary1.add_fds(&[s1.as_raw_fd()][..]));\n \n-    let usize = or_panic!(s1.send_vectored_with_ancillary(&mut bufs_send, &mut ancillary1));\n+    let usize = or_panic!(s1.send_vectored_with_ancillary(&bufs_send, &mut ancillary1));\n     assert_eq!(usize, 8);\n \n     let mut buf2 = [0; 8];\n@@ -542,8 +542,8 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n \n     or_panic!(bsock2.set_passcred(true));\n \n-    let mut buf1 = [1; 8];\n-    let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];\n+    let buf1 = [1; 8];\n+    let bufs_send = &[IoSlice::new(&buf1[..])][..];\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n@@ -554,7 +554,7 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     assert!(ancillary1.add_creds(&[cred1.clone()][..]));\n \n     let usize =\n-        or_panic!(bsock1.send_vectored_with_ancillary_to(&mut bufs_send, &mut ancillary1, &path2));\n+        or_panic!(bsock1.send_vectored_with_ancillary_to(&bufs_send, &mut ancillary1, &path2));\n     assert_eq!(usize, 8);\n \n     let mut buf2 = [0; 8];\n@@ -603,15 +603,15 @@ fn test_send_vectored_with_ancillary_unix_datagram() {\n     let bsock1 = or_panic!(UnixDatagram::bind(&path1));\n     let bsock2 = or_panic!(UnixDatagram::bind(&path2));\n \n-    let mut buf1 = [1; 8];\n-    let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];\n+    let buf1 = [1; 8];\n+    let bufs_send = &[IoSlice::new(&buf1[..])][..];\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n     assert!(ancillary1.add_fds(&[bsock1.as_raw_fd()][..]));\n \n     or_panic!(bsock1.connect(&path2));\n-    let usize = or_panic!(bsock1.send_vectored_with_ancillary(&mut bufs_send, &mut ancillary1));\n+    let usize = or_panic!(bsock1.send_vectored_with_ancillary(&bufs_send, &mut ancillary1));\n     assert_eq!(usize, 8);\n \n     let mut buf2 = [0; 8];"}]}