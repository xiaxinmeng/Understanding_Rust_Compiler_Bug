{"sha": "302935ff2a169d57cdde78f17591e13e8aa47f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjkzNWZmMmExNjlkNTdjZGRlNzhmMTc1OTFlMTNlOGFhNDdmOWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-06-21T18:34:33Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-06-26T02:08:12Z"}, "message": "Revert a few changes", "tree": {"sha": "c87bcb3a9cd5e519866cea587d189230df19754b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87bcb3a9cd5e519866cea587d189230df19754b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302935ff2a169d57cdde78f17591e13e8aa47f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302935ff2a169d57cdde78f17591e13e8aa47f9e", "html_url": "https://github.com/rust-lang/rust/commit/302935ff2a169d57cdde78f17591e13e8aa47f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302935ff2a169d57cdde78f17591e13e8aa47f9e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4012b8dc4abb4915b3804a88c8e5c6d5de91d410", "url": "https://api.github.com/repos/rust-lang/rust/commits/4012b8dc4abb4915b3804a88c8e5c6d5de91d410", "html_url": "https://github.com/rust-lang/rust/commit/4012b8dc4abb4915b3804a88c8e5c6d5de91d410"}], "stats": {"total": 75, "additions": 19, "deletions": 56}, "files": [{"sha": "c969aef675ff9e0a162ad8410cc074d80da72625", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/302935ff2a169d57cdde78f17591e13e8aa47f9e/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302935ff2a169d57cdde78f17591e13e8aa47f9e/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=302935ff2a169d57cdde78f17591e13e8aa47f9e", "patch": "@@ -55,19 +55,12 @@ impl Clone for DefPathTable {\n }\n \n impl DefPathTable {\n-    pub fn new() -> Self {\n-        DefPathTable {\n-            index_to_key: [vec![], vec![]],\n-            key_to_index: FxHashMap(),\n-            def_path_hashes: [vec![], vec![]],\n-        }\n-    }\n \n-    pub fn allocate(&mut self,\n-                    key: DefKey,\n-                    def_path_hash: DefPathHash,\n-                    address_space: DefIndexAddressSpace)\n-                    -> DefIndex {\n+    fn allocate(&mut self,\n+                key: DefKey,\n+                def_path_hash: DefPathHash,\n+                address_space: DefIndexAddressSpace)\n+                -> DefIndex {\n         let index = {\n             let index_to_key = &mut self.index_to_key[address_space.index()];\n             let index = DefIndex::new(index_to_key.len() + address_space.start());\n@@ -248,7 +241,7 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    pub fn compute_stable_hash(&self, parent_hash: DefPathHash) -> DefPathHash {\n+    fn compute_stable_hash(&self, parent_hash: DefPathHash) -> DefPathHash {\n         let mut hasher = StableHasher::new();\n \n         // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n@@ -291,7 +284,7 @@ impl DefKey {\n         DefPathHash(hasher.finish())\n     }\n \n-    pub fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> DefPathHash {\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> DefPathHash {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n@@ -453,7 +446,11 @@ impl Definitions {\n     /// Create new empty definition map.\n     pub fn new() -> Definitions {\n         Definitions {\n-            table: DefPathTable::new(),\n+            table: DefPathTable {\n+                index_to_key: [vec![], vec![]],\n+                key_to_index: FxHashMap(),\n+                def_path_hashes: [vec![], vec![]],\n+            },\n             node_to_def_index: NodeMap(),\n             def_index_to_node: [vec![], vec![]],\n             node_to_hir_id: IndexVec::new(),"}, {"sha": "27c2d22168c8b84aa4f3c639302c4b18ac2579fc", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/302935ff2a169d57cdde78f17591e13e8aa47f9e/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302935ff2a169d57cdde78f17591e13e8aa47f9e/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=302935ff2a169d57cdde78f17591e13e8aa47f9e", "patch": "@@ -14,7 +14,7 @@ use cstore::{self, CStore, CrateSource, MetadataBlob};\n use locator::{self, CratePaths};\n use schema::{CrateRoot, Tracked};\n \n-use rustc::hir::def_id::{CrateNum, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::DepKind;\n use rustc::session::Session;\n@@ -26,8 +26,7 @@ use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::middle::cstore::NativeLibrary;\n-use rustc::hir::map::{Definitions, DefKey, DefPathData, DisambiguatedDefPathData, ITEM_LIKE_SPACE};\n-use rustc::hir::map::definitions::DefPathTable;\n+use rustc::hir::map::Definitions;\n \n use std::cell::{RefCell, Cell};\n use std::ops::Deref;\n@@ -308,16 +307,9 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n-        let proc_macros = crate_root.macro_derive_registrar.map(|_| {\n-            self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n+        let def_path_table = record_time(&self.sess.perf_stats.decode_def_path_tables_time, || {\n+            crate_root.def_path_table.decode(&metadata)\n         });\n-        let def_path_table = if let Some(ref proc_macros) = proc_macros {\n-            proc_macro_def_path_table(proc_macros)\n-        } else {\n-            record_time(&self.sess.perf_stats.decode_def_path_tables_time, || {\n-                crate_root.def_path_table.decode(&metadata)\n-            })\n-        };\n \n         let exported_symbols = crate_root.exported_symbols\n                                          .map(|x| x.decode(&metadata).collect());\n@@ -336,7 +328,9 @@ impl<'a> CrateLoader<'a> {\n             def_path_table: Rc::new(def_path_table),\n             exported_symbols: exported_symbols,\n             trait_impls: trait_impls,\n-            proc_macros: proc_macros,\n+            proc_macros: crate_root.macro_derive_registrar.map(|_| {\n+                self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n+            }),\n             root: crate_root,\n             blob: metadata,\n             cnum_map: RefCell::new(cnum_map),\n@@ -1219,31 +1213,3 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n     }\n }\n-\n-fn proc_macro_def_path_table(proc_macros: &[(ast::Name, Rc<SyntaxExtension>)]) -> DefPathTable {\n-    let mut table = DefPathTable::new();\n-    let root = DefKey {\n-        parent: None,\n-        disambiguated_data: DisambiguatedDefPathData {\n-            data: DefPathData::CrateRoot,\n-            disambiguator: 0,\n-        },\n-    };\n-\n-    let initial_hash = DefKey::root_parent_stable_hash(\"\", \"\");\n-    let root_hash = root.compute_stable_hash(initial_hash);\n-    let root_id = table.allocate(root, root_hash, ITEM_LIKE_SPACE);\n-    let root_path_hash = table.def_path_hash(root_id);\n-    for proc_macro in proc_macros {\n-        let key = DefKey {\n-            parent: Some(CRATE_DEF_INDEX),\n-            disambiguated_data: DisambiguatedDefPathData {\n-                data: DefPathData::MacroDef(proc_macro.0),\n-                disambiguator: 0,\n-            },\n-        };\n-        let def_path_hash = key.compute_stable_hash(root_path_hash);\n-        table.allocate(key, def_path_hash, ITEM_LIKE_SPACE);\n-    }\n-    table\n-}"}]}