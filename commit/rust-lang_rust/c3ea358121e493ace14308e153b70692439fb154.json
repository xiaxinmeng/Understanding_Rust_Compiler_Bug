{"sha": "c3ea358121e493ace14308e153b70692439fb154", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZWEzNTgxMjFlNDkzYWNlMTQzMDhlMTUzYjcwNjkyNDM5ZmIxNTQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-11-05T14:20:59Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-11-07T01:36:48Z"}, "message": "Display all emission types in error msg if user inputs invalid option.\n\nbefore:\n\n```\n> rustc --emit foo\nerror: unknown emission type: `foo`\n```\n\nafter:\n\n```\n> rustc --emit foo\nerror: unknown emission type: `foo` - expected one of: `llvm-bc`, `asm`, `llvm-ir`, `mir`, `obj`, `metadata`, `link`, `dep-info`\n```", "tree": {"sha": "f709c9bec26fe46569febded999b1a30d9b07c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f709c9bec26fe46569febded999b1a30d9b07c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ea358121e493ace14308e153b70692439fb154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ea358121e493ace14308e153b70692439fb154", "html_url": "https://github.com/rust-lang/rust/commit/c3ea358121e493ace14308e153b70692439fb154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ea358121e493ace14308e153b70692439fb154/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efcc660f09ce3e83d194889f6d1161bf865f788", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efcc660f09ce3e83d194889f6d1161bf865f788", "html_url": "https://github.com/rust-lang/rust/commit/4efcc660f09ce3e83d194889f6d1161bf865f788"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "a27371926de8693c0eb72a94a2f34b02e1140be2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c3ea358121e493ace14308e153b70692439fb154/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ea358121e493ace14308e153b70692439fb154/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c3ea358121e493ace14308e153b70692439fb154", "patch": "@@ -138,6 +138,34 @@ impl OutputType {\n         }\n     }\n \n+    fn from_shorthand(shorthand: &str) -> Option<Self> {\n+        Some(match shorthand {\n+             \"asm\" => OutputType::Assembly,\n+             \"llvm-ir\" => OutputType::LlvmAssembly,\n+             \"mir\" => OutputType::Mir,\n+             \"llvm-bc\" => OutputType::Bitcode,\n+             \"obj\" => OutputType::Object,\n+             \"metadata\" => OutputType::Metadata,\n+             \"link\" => OutputType::Exe,\n+             \"dep-info\" => OutputType::DepInfo,\n+            _ => return None,\n+        })\n+    }\n+\n+    fn shorthands_display() -> String {\n+        format!(\n+            \"`{}`, `{}`, `{}`, `{}`, `{}`, `{}`, `{}`, `{}`\",\n+            OutputType::Bitcode.shorthand(),\n+            OutputType::Assembly.shorthand(),\n+            OutputType::LlvmAssembly.shorthand(),\n+            OutputType::Mir.shorthand(),\n+            OutputType::Object.shorthand(),\n+            OutputType::Metadata.shorthand(),\n+            OutputType::Exe.shorthand(),\n+            OutputType::DepInfo.shorthand(),\n+        )\n+    }\n+\n     pub fn extension(&self) -> &'static str {\n         match *self {\n             OutputType::Bitcode => \"bc\",\n@@ -1479,19 +1507,13 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');\n-                let output_type = match parts.next().unwrap() {\n-                    \"asm\" => OutputType::Assembly,\n-                    \"llvm-ir\" => OutputType::LlvmAssembly,\n-                    \"mir\" => OutputType::Mir,\n-                    \"llvm-bc\" => OutputType::Bitcode,\n-                    \"obj\" => OutputType::Object,\n-                    \"metadata\" => OutputType::Metadata,\n-                    \"link\" => OutputType::Exe,\n-                    \"dep-info\" => OutputType::DepInfo,\n-                    part => {\n-                        early_error(error_format, &format!(\"unknown emission type: `{}`\",\n-                                                    part))\n-                    }\n+                let shorthand = parts.next().unwrap();\n+                let output_type = match OutputType::from_shorthand(shorthand) {\n+                    Some(output_type) => output_type,\n+                    None => early_error(error_format, &format!(\n+                        \"unknown emission type: `{}` - expected one of: {}\",\n+                        shorthand, OutputType::shorthands_display(),\n+                    )),\n                 };\n                 let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);"}]}