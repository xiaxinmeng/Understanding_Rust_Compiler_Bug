{"sha": "5f7c9da0a774cdc4a4768a3873521286b632224b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmN2M5ZGEwYTc3NGNkYzRhNDc2OGEzODczNTIxMjg2YjYzMjIyNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T00:58:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T00:58:29Z"}, "message": "Auto merge of #51287 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #51135 (Tweak output on E0599 for assoc fn used as method)\n - #51152 (Replace `if` with `if and only if` in the definition dox of `Sync`)\n - #51262 (Add missing whitespace in num example)\n - #51272 (Remove feature flag from fs::read_to_string example)\n - #51286 (Pull 1.26.2 release notes into master)\n\nFailed merges:", "tree": {"sha": "145a2e14a4c1cf1cdf96f52f5d589ffcf1cf4779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/145a2e14a4c1cf1cdf96f52f5d589ffcf1cf4779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f7c9da0a774cdc4a4768a3873521286b632224b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7c9da0a774cdc4a4768a3873521286b632224b", "html_url": "https://github.com/rust-lang/rust/commit/5f7c9da0a774cdc4a4768a3873521286b632224b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f7c9da0a774cdc4a4768a3873521286b632224b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfa41f28010b336e43e2896693b26853ecc1f492", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa41f28010b336e43e2896693b26853ecc1f492", "html_url": "https://github.com/rust-lang/rust/commit/bfa41f28010b336e43e2896693b26853ecc1f492"}, {"sha": "c8f9b7ce712172bef0f03ab9f8fb08b3419cd4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f9b7ce712172bef0f03ab9f8fb08b3419cd4ca", "html_url": "https://github.com/rust-lang/rust/commit/c8f9b7ce712172bef0f03ab9f8fb08b3419cd4ca"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "0403a2ac1feb3c71f6f3e42f1c948bd5908ce067", "filename": "RELEASES.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -1,3 +1,13 @@\n+Version 1.26.2 (2018-06-05)\n+==========================\n+\n+Compatibility Notes\n+-------------------\n+\n+- [The borrow checker was fixed to avoid unsoundness when using match ergonomics][51117]\n+\n+[51117]: https://github.com/rust-lang/rust/issues/51117\n+\n Version 1.26.1 (2018-05-29)\n ==========================\n "}, {"sha": "3d3f63ecf37d57e1c5eb46ca640ef449ef336ab2", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -294,7 +294,7 @@ pub trait Copy : Clone {\n /// This trait is automatically implemented when the compiler determines\n /// it's appropriate.\n ///\n-/// The precise definition is: a type `T` is `Sync` if `&T` is\n+/// The precise definition is: a type `T` is `Sync` if and only if `&T` is\n /// [`Send`][send]. In other words, if there is no possibility of\n /// [undefined behavior][ub] (including data races) when passing\n /// `&T` references between threads."}, {"sha": "2418b5e8c75cc9af242525c842d15aeec5a57995", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -2313,7 +2313,7 @@ Basic usage:\n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(1), \",\n \"Some(\", stringify!($SelfT), \"::max_value() - 1));\n-assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3),None);\", $EndFeature, \"\n+assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]"}, {"sha": "6031984350b958b6f5045ee67d93f54df45666cc", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -119,11 +119,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         };\n \n-                        let note_str = format!(\"candidate #{} is defined in an impl{} \\\n-                                                for the type `{}`\",\n-                                               idx + 1,\n-                                               insertion,\n-                                               impl_ty);\n+                        let note_str = if sources.len() > 1 {\n+                            format!(\"candidate #{} is defined in an impl{} for the type `{}`\",\n+                                    idx + 1,\n+                                    insertion,\n+                                    impl_ty)\n+                        } else {\n+                            format!(\"the candidate is defined in an impl{} for the type `{}`\",\n+                                    insertion,\n+                                    impl_ty)\n+                        };\n                         if let Some(note_span) = note_span {\n                             // We have a span pointing to the method. Show note with snippet.\n                             err.span_note(self.tcx.sess.codemap().def_span(note_span), &note_str);\n@@ -137,11 +142,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             .unwrap();\n                         let item_span = self.tcx.sess.codemap()\n                             .def_span(self.tcx.def_span(item.def_id));\n-                        span_note!(err,\n-                                   item_span,\n-                                   \"candidate #{} is defined in the trait `{}`\",\n-                                   idx + 1,\n-                                   self.tcx.item_path_str(trait_did));\n+                        if sources.len() > 1 {\n+                            span_note!(err,\n+                                       item_span,\n+                                       \"candidate #{} is defined in the trait `{}`\",\n+                                       idx + 1,\n+                                       self.tcx.item_path_str(trait_did));\n+                        } else {\n+                            span_note!(err,\n+                                       item_span,\n+                                       \"the candidate is defined in the trait `{}`\",\n+                                       self.tcx.item_path_str(trait_did));\n+                        }\n                         err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n                                           instead\",\n                                           self.tcx.item_path_str(trait_did),\n@@ -285,7 +297,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.sess.diagnostic().struct_dummy()\n                 };\n \n-                if let Some(def) =  actual.ty_adt_def() {\n+                if let Some(def) = actual.ty_adt_def() {\n                     if let Some(full_sp) = tcx.hir.span_if_local(def.did) {\n                         let def_sp = tcx.sess.codemap().def_span(full_sp);\n                         err.span_label(def_sp, format!(\"{} `{}` not found {}\",\n@@ -368,7 +380,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if !static_sources.is_empty() {\n                     err.note(\"found the following associated functions; to be used as methods, \\\n                               functions must have a `self` parameter\");\n-                    err.help(&format!(\"try with `{}::{}`\", self.ty_to_string(actual), item_name));\n+                    err.span_label(span, \"this is an associated function, not a method\");\n+                }\n+                if static_sources.len() == 1 {\n+                    if let Some(expr) = rcvr_expr {\n+                        err.span_suggestion(expr.span.to(span),\n+                                            \"use associated function syntax instead\",\n+                                            format!(\"{}::{}\",\n+                                                    self.ty_to_string(actual),\n+                                                    item_name));\n+                    } else {\n+                        err.help(&format!(\"try with `{}::{}`\",\n+                                          self.ty_to_string(actual), item_name));\n+                    }\n+\n+                    report_candidates(&mut err, static_sources);\n+                } else if static_sources.len() > 1 {\n \n                     report_candidates(&mut err, static_sources);\n                 }\n@@ -468,9 +495,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n-                msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n-                                        i + 1,\n-                                        self.tcx.item_path_str(*trait_did)));\n+                if candidates.len() > 1 {\n+                    msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n+                                            i + 1,\n+                                            self.tcx.item_path_str(*trait_did)));\n+                } else {\n+                    msg.push_str(&format!(\"\\n`use {};`\",\n+                                            self.tcx.item_path_str(*trait_did)));\n+                }\n             }\n             if candidates.len() > limit {\n                 msg.push_str(&format!(\"\\nand {} others\", candidates.len() - limit));"}, {"sha": "987687ea8e865b7acbe575ddceedc5c07b16aaa6", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -295,8 +295,6 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// # Examples\n ///\n /// ```no_run\n-/// #![feature(fs_read_write)]\n-///\n /// use std::fs;\n /// use std::net::SocketAddr;\n ///"}, {"sha": "b3d82e9094ba732ebc6001ee6a355914943984bf", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -22,7 +22,7 @@ LL |         ().clone() //~ ERROR no method named `clone` found\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use std::clone::Clone;`\n+           `use std::clone::Clone;`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1b2975bcf1c284f3488462cc0099a79cdb1913d4", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -9,7 +9,7 @@ LL |     pub macro m() { ().f() } //~ ERROR no method named `f` found for type `\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use foo::T;`\n+           `use foo::T;`\n \n error: aborting due to previous error\n "}, {"sha": "e31134f843b72e7913434879f2589394309cc8b8", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7c9da0a774cdc4a4768a3873521286b632224b/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=5f7c9da0a774cdc4a4768a3873521286b632224b", "patch": "@@ -2,10 +2,9 @@ error[E0599]: no method named `f9` found for type `usize` in the current scope\n   --> $DIR/issue-7575.rs:74:18\n    |\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                  ^^\n+   |                  ^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `usize::f9`\n note: candidate #1 is defined in the trait `CtxtFn`\n   --> $DIR/issue-7575.rs:16:5\n    |\n@@ -37,11 +36,13 @@ LL | struct Myisize(isize);\n    | ---------------------- method `fff` not found for this\n ...\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                              ^^^\n+   |                            --^^^\n+   |                            | |\n+   |                            | this is an associated function, not a method\n+   |                            help: use associated function syntax instead: `Myisize::fff`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `Myisize::fff`\n-note: candidate #1 is defined in an impl for the type `Myisize`\n+note: the candidate is defined in an impl for the type `Myisize`\n   --> $DIR/issue-7575.rs:51:5\n    |\n LL |     fn fff(i: isize) -> isize {\n@@ -51,11 +52,10 @@ error[E0599]: no method named `is_str` found for type `T` in the current scope\n   --> $DIR/issue-7575.rs:82:7\n    |\n LL |     t.is_str()\n-   |       ^^^^^^\n+   |       ^^^^^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `T::is_str`\n-note: candidate #1 is defined in the trait `ManyImplTrait`\n+note: the candidate is defined in the trait `ManyImplTrait`\n   --> $DIR/issue-7575.rs:57:5\n    |\n LL |     fn is_str() -> bool {"}]}