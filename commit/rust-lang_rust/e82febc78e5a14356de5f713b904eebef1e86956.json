{"sha": "e82febc78e5a14356de5f713b904eebef1e86956", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MmZlYmM3OGU1YTE0MzU2ZGU1ZjcxM2I5MDRlZWJlZjFlODY5NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T04:01:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T04:01:00Z"}, "message": "Auto merge of #67900 - nikic:prepare-llvm-10, r=nagisa\n\nPrepare for LLVM 10 upgrade\n\nSplit off from #67759, this just adds the necessary compatibility bits and updates codegen tests, without performing the actual LLVM upgrade.\n\nr? @alexcrichton", "tree": {"sha": "e1c8bffd16e5b0f003d8d9d61415cfb72a2549c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1c8bffd16e5b0f003d8d9d61415cfb72a2549c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82febc78e5a14356de5f713b904eebef1e86956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82febc78e5a14356de5f713b904eebef1e86956", "html_url": "https://github.com/rust-lang/rust/commit/e82febc78e5a14356de5f713b904eebef1e86956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82febc78e5a14356de5f713b904eebef1e86956/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "html_url": "https://github.com/rust-lang/rust/commit/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a"}, {"sha": "c9e996f05cff70e69240b9a9d2d56e57af21eb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e996f05cff70e69240b9a9d2d56e57af21eb3a", "html_url": "https://github.com/rust-lang/rust/commit/c9e996f05cff70e69240b9a9d2d56e57af21eb3a"}], "stats": {"total": 1209, "additions": 218, "deletions": 991}, "files": [{"sha": "8adcff67800fe2dc757395c6c0589f0b2f1ecbb9", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -21,7 +21,6 @@ fn main() {\n         \"InstrProfilingPlatformLinux.c\",\n         \"InstrProfilingPlatformOther.c\",\n         \"InstrProfilingPlatformWindows.c\",\n-        \"InstrProfilingRuntime.cc\",\n         \"InstrProfilingUtil.c\",\n         \"InstrProfilingValue.c\",\n         \"InstrProfilingWriter.c\",\n@@ -68,10 +67,17 @@ fn main() {\n     let root = env::var_os(\"RUST_COMPILER_RT_ROOT\").unwrap();\n     let root = Path::new(&root);\n \n+    let src_root = root.join(\"lib\").join(\"profile\");\n     for src in profile_sources {\n-        cfg.file(root.join(\"lib\").join(\"profile\").join(src));\n+        cfg.file(src_root.join(src));\n     }\n \n+    // The file was renamed in LLVM 10.\n+    let old_runtime_path = src_root.join(\"InstrProfilingRuntime.cc\");\n+    let new_runtime_path = src_root.join(\"InstrProfilingRuntime.cpp\");\n+    cfg.file(if old_runtime_path.exists() { old_runtime_path } else { new_runtime_path });\n+\n+    cfg.include(root.join(\"include\"));\n     cfg.warnings(false);\n     cfg.compile(\"profiler-rt\");\n }"}, {"sha": "50a35fe3dcf1db17f988566c0de2b0bc54de926b", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -143,6 +143,10 @@ fn strip_function_ptr_alignment(data_layout: String) -> String {\n     data_layout.replace(\"-Fi8-\", \"-\")\n }\n \n+fn strip_x86_address_spaces(data_layout: String) -> String {\n+    data_layout.replace(\"-p270:32:32-p271:32:32-p272:64:64-\", \"-\")\n+}\n+\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -156,6 +160,11 @@ pub unsafe fn create_module(\n     if llvm_util::get_major_version() < 9 {\n         target_data_layout = strip_function_ptr_alignment(target_data_layout);\n     }\n+    if llvm_util::get_major_version() < 10 {\n+        if sess.target.target.arch == \"x86\" || sess.target.target.arch == \"x86_64\" {\n+            target_data_layout = strip_x86_address_spaces(target_data_layout);\n+        }\n+    }\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {"}, {"sha": "a6c1d24fa62a17150f01c7012a71bf23130de087", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -8,7 +8,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:128-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "033b87b110e12c54034d9db550de0775a437b7b8", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -20,7 +20,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:128-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"macos\".to_string(),\n         target_env: String::new(),"}, {"sha": "79242f240269c2fba5f26e0412b931303a3451c6", "filename": "src/librustc_target/spec/i686_linux_android.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -18,7 +18,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: String::new(),"}, {"sha": "35fbf87573137ef3cc39a20145f8a8fc0bf17bf0", "filename": "src/librustc_target/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -18,7 +18,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            i64:64-f80:32-n8:16:32-a:0:32-S32\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "ffb66afc7618270dc74a36a8b15ba499ec7c5adf", "filename": "src/librustc_target/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -19,7 +19,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            i64:64-f80:32-n8:16:32-a:0:32-S32\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),"}, {"sha": "729b1f68e005c516b9536c86508dcf7bc5d5d0f6", "filename": "src/librustc_target/spec/i686_unknown_cloudabi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -13,7 +13,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n         target_env: String::new(),"}, {"sha": "88c944a6cb7eb6ad015944d8a6d5300fb5edfc31", "filename": "src/librustc_target/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "4dc27af30dadb3ae6d26862419325507f75cfa8e", "filename": "src/librustc_target/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"haiku\".to_string(),\n         target_env: String::new(),"}, {"sha": "0d578f22f9825d0d00b714de8dad342703c6e99d", "filename": "src/librustc_target/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "699a0ab45e87234563c374f71a12769fdef9d92b", "filename": "src/librustc_target/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_musl.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -27,7 +27,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "88b1ae7d53c085155f9d3277331ce87222e9f6fc", "filename": "src/librustc_target/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "829cd1ac1a3975aac04d02842065b0bd99ea7e29", "filename": "src/librustc_target/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -13,7 +13,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"openbsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "345590a00be8bbfae4b8a02a19376e12df547a72", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -86,7 +86,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            i64:64-f80:32-n8:16:32-a:0:32-S32\"\n+            .to_string(),\n         target_os: \"uefi\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),"}, {"sha": "93f396de0a0512e6c8dc6838c658457d88188331", "filename": "src/librustc_target/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -18,7 +18,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            i64:64-f80:32-n8:16:32-a:0:32-S32\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "ed2dba53589ede286599e6d8e95448002dffbd97", "filename": "src/librustc_target/spec/i686_uwp_windows_msvc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -11,7 +11,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            i64:64-f80:32-n8:16:32-a:0:32-S32\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),"}, {"sha": "f5f66cabb2cfd4bc3e80b91da57e81276632845e", "filename": "src/librustc_target/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "e846f42f8f849b9b10b8e5225a06057f889aff18", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -20,7 +20,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: arch.to_string(),\n         target_os: \"macos\".to_string(),\n         target_env: String::new(),"}, {"sha": "ca02e2deabcf2d0cd7e690b0d995fb448860a452", "filename": "src/librustc_target/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -8,7 +8,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "5f4f6ade682d8138875a2cf39a65fddd1d5370ae", "filename": "src/librustc_target/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -8,7 +8,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "3e9552ef0cf34106501f698456a5b6146020e21a", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -81,7 +81,8 @@ pub fn target() -> Result<Target, String> {\n         target_os: \"unknown\".into(),\n         target_env: \"sgx\".into(),\n         target_vendor: \"fortanix\".into(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".into(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n         arch: \"x86_64\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,"}, {"sha": "37b6d57366cf569fdf7fe1bb50f72077ba47a9f1", "filename": "src/librustc_target/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n         target_env: String::new(),"}, {"sha": "74097f5bf6f5e08ef34d9e99873e1f2836cb7741", "filename": "src/librustc_target/spec/x86_64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -14,7 +14,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: String::new(),"}, {"sha": "89070c99e39410090dcacd838126a6d5636e604d", "filename": "src/librustc_target/spec/x86_64_linux_kernel.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -19,7 +19,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),"}, {"sha": "8f523a3b6c6d9c3c8c1ca226ab00d86045d4ce4f", "filename": "src/librustc_target/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "75ff6b97a2e1e1935a5c00f7d2fb52aefee553e5", "filename": "src/librustc_target/spec/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),"}, {"sha": "fbade02c5569037845aa399678bab9690206d5bc", "filename": "src/librustc_target/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -18,7 +18,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "53f4df9651819d6a66426d3b0ed1de59946ad1f9", "filename": "src/librustc_target/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"solaris\".to_string(),\n         target_env: String::new(),"}, {"sha": "dbc5f965020e947986e1e4907e92037834f69071", "filename": "src/librustc_target/spec/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -13,7 +13,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n         target_env: String::new(),"}, {"sha": "fd1871b1a57c3361e7b177856842923b3415a9e1", "filename": "src/librustc_target/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n         target_env: String::new(),"}, {"sha": "a124f582bf3fc3d1fb1cfd9583cba85b19b7b6a2", "filename": "src/librustc_target/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "51237697714a4de17ce033dc19fe4718246132b3", "filename": "src/librustc_target/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -14,7 +14,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"haiku\".to_string(),\n         target_env: String::new(),"}, {"sha": "4a526f90ed5bc0f3d9ab504ece7e5476ef284207", "filename": "src/librustc_target/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"hermit\".to_string(),\n         target_env: String::new(),"}, {"sha": "c25cd0809eed810d80b5f3dafcfa83a82301ad30", "filename": "src/librustc_target/spec/x86_64_unknown_hermit_kernel.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit_kernel.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -14,7 +14,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"hermit\".to_string(),\n         target_env: String::new(),"}, {"sha": "cab19f149a77c51827aa82e15aa32c5cd43547ea", "filename": "src/librustc_target/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -10,7 +10,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"l4re\".to_string(),\n         target_env: \"uclibc\".to_string(),"}, {"sha": "29cbb777db5d7549526e80625ca535c3df3fc254", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "0a37399e2fac3f7649e733274d193137b5be064d", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -16,7 +16,9 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "34c628e8f67bd2da63dd3ee11f6bd269f4f403f9", "filename": "src/librustc_target/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "adf09c89c426b624f1131e0a2bc78b41376a6870", "filename": "src/librustc_target/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "dbd163db36b4573138eaa20a9cf6e782e19eea88", "filename": "src/librustc_target/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"openbsd\".to_string(),\n         target_env: String::new(),"}, {"sha": "3d40bafbe1fd401a8e9c3992472d5a36c94a3f3a", "filename": "src/librustc_target/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -12,7 +12,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"redox\".to_string(),\n         target_env: \"relibc\".to_string(),"}, {"sha": "7660b68aae62e447f5631763f5032bf2cd0ccab5", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -38,7 +38,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         target_os: \"uefi\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),"}, {"sha": "48366e24a39e4daf738528e93b531a0192b67a20", "filename": "src/librustc_target/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "258df010aae0cf1a6a019f0ef6bb8940e0c2b3e3", "filename": "src/librustc_target/spec/x86_64_uwp_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -11,7 +11,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),"}, {"sha": "f1e27f4d8beaf95c4f0edf67042b5728bbd5e2f0", "filename": "src/librustc_target/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -13,7 +13,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "678d787571ed7c368fb3d05bf05f758df1b593b6", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -89,7 +89,11 @@ extern \"C\" void LLVMRustDestroyArchive(LLVMRustArchiveRef RustArchive) {\n extern \"C\" LLVMRustArchiveIteratorRef\n LLVMRustArchiveIteratorNew(LLVMRustArchiveRef RustArchive) {\n   Archive *Archive = RustArchive->getBinary();\n+#if LLVM_VERSION_GE(10, 0)\n+  std::unique_ptr<Error> Err = std::make_unique<Error>(Error::success());\n+#else\n   std::unique_ptr<Error> Err = llvm::make_unique<Error>(Error::success());\n+#endif\n   auto Cur = Archive->child_begin(*Err);\n   if (*Err) {\n     LLVMRustSetLastError(toString(std::move(*Err)).c_str());"}, {"sha": "69176f9cb1f6d528134a2109e5ca4348d1cbea90", "filename": "src/rustllvm/Linker.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FLinker.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FLinker.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FLinker.cpp?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -18,8 +18,7 @@ extern \"C\" RustLinker*\n LLVMRustLinkerNew(LLVMModuleRef DstRef) {\n   Module *Dst = unwrap(DstRef);\n \n-  auto Ret = llvm::make_unique<RustLinker>(*Dst);\n-  return Ret.release();\n+  return new RustLinker(*Dst);\n }\n \n extern \"C\" void"}, {"sha": "eaa845a279fe8f8da6fca0fe12fe8a2b99aa5f66", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -8,6 +8,7 @@\n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n #include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n+#include \"llvm/InitializePasses.h\"\n #include \"llvm/IR/AutoUpgrade.h\"\n #include \"llvm/IR/AssemblyAnnotationWriter.h\"\n #include \"llvm/IR/IntrinsicInst.h\"\n@@ -532,6 +533,18 @@ enum class LLVMRustFileType {\n   ObjectFile,\n };\n \n+#if LLVM_VERSION_GE(10, 0)\n+static CodeGenFileType fromRust(LLVMRustFileType Type) {\n+  switch (Type) {\n+  case LLVMRustFileType::AssemblyFile:\n+    return CGFT_AssemblyFile;\n+  case LLVMRustFileType::ObjectFile:\n+    return CGFT_ObjectFile;\n+  default:\n+    report_fatal_error(\"Bad FileType.\");\n+  }\n+}\n+#else\n static TargetMachine::CodeGenFileType fromRust(LLVMRustFileType Type) {\n   switch (Type) {\n   case LLVMRustFileType::AssemblyFile:\n@@ -542,6 +555,7 @@ static TargetMachine::CodeGenFileType fromRust(LLVMRustFileType Type) {\n     report_fatal_error(\"Bad FileType.\");\n   }\n }\n+#endif\n \n extern \"C\" LLVMRustResult\n LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n@@ -849,7 +863,11 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                           int num_modules,\n                           const char **preserved_symbols,\n                           int num_symbols) {\n+#if LLVM_VERSION_GE(10, 0)\n+  auto Ret = std::make_unique<LLVMRustThinLTOData>();\n+#else\n   auto Ret = llvm::make_unique<LLVMRustThinLTOData>();\n+#endif\n \n   // Load each module's summary and merge it into one combined index\n   for (int i = 0; i < num_modules; i++) {\n@@ -944,13 +962,23 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n         ExportedGUIDs.insert(GUID);\n     }\n   }\n+#if LLVM_VERSION_GE(10, 0)\n+  auto isExported = [&](StringRef ModuleIdentifier, ValueInfo VI) {\n+    const auto &ExportList = Ret->ExportLists.find(ModuleIdentifier);\n+    return (ExportList != Ret->ExportLists.end() &&\n+      ExportList->second.count(VI)) ||\n+      ExportedGUIDs.count(VI.getGUID());\n+  };\n+  thinLTOInternalizeAndPromoteInIndex(Ret->Index, isExported, isPrevailing);\n+#else\n   auto isExported = [&](StringRef ModuleIdentifier, GlobalValue::GUID GUID) {\n     const auto &ExportList = Ret->ExportLists.find(ModuleIdentifier);\n     return (ExportList != Ret->ExportLists.end() &&\n       ExportList->second.count(GUID)) ||\n       ExportedGUIDs.count(GUID);\n   };\n   thinLTOInternalizeAndPromoteInIndex(Ret->Index, isExported);\n+#endif\n \n   return Ret.release();\n }\n@@ -1081,7 +1109,11 @@ struct LLVMRustThinLTOBuffer {\n \n extern \"C\" LLVMRustThinLTOBuffer*\n LLVMRustThinLTOBufferCreate(LLVMModuleRef M) {\n+#if LLVM_VERSION_GE(10, 0)\n+  auto Ret = std::make_unique<LLVMRustThinLTOBuffer>();\n+#else\n   auto Ret = llvm::make_unique<LLVMRustThinLTOBuffer>();\n+#endif\n   {\n     raw_string_ostream OS(Ret->data);\n     {"}, {"sha": "46e467011b91a4e2fa17ab0d84d203bd80d27016", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -496,9 +496,11 @@ static DINode::DIFlags fromRust(LLVMRustDIFlags Flags) {\n   if (isSet(Flags & LLVMRustDIFlags::FlagAppleBlock)) {\n     Result |= DINode::DIFlags::FlagAppleBlock;\n   }\n+#if LLVM_VERSION_LT(10, 0)\n   if (isSet(Flags & LLVMRustDIFlags::FlagBlockByrefStruct)) {\n     Result |= DINode::DIFlags::FlagBlockByrefStruct;\n   }\n+#endif\n   if (isSet(Flags & LLVMRustDIFlags::FlagVirtual)) {\n     Result |= DINode::DIFlags::FlagVirtual;\n   }\n@@ -825,6 +827,9 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n   llvm::DIGlobalVariableExpression *VarExpr = Builder->createGlobalVariableExpression(\n       unwrapDI<DIDescriptor>(Context), Name, LinkageName,\n       unwrapDI<DIFile>(File), LineNo, unwrapDI<DIType>(Ty), IsLocalToUnit,\n+#if LLVM_VERSION_GE(10, 0)\n+      /* isDefined */ true,\n+#endif\n       InitExpr, unwrapDIPtr<MDNode>(Decl),\n #if LLVM_VERSION_GE(8, 0)\n       /* templateParams */ nullptr,\n@@ -998,11 +1003,19 @@ inline section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n \n extern \"C\" size_t LLVMRustGetSectionName(LLVMSectionIteratorRef SI,\n                                          const char **Ptr) {\n+#if LLVM_VERSION_GE(10, 0)\n+  auto NameOrErr = (*unwrap(SI))->getName();\n+  if (!NameOrErr)\n+    report_fatal_error(NameOrErr.takeError());\n+  *Ptr = NameOrErr->data();\n+  return NameOrErr->size();\n+#else\n   StringRef Ret;\n   if (std::error_code EC = (*unwrap(SI))->getName(Ret))\n     report_fatal_error(EC.message());\n   *Ptr = Ret.data();\n   return Ret.size();\n+#endif\n }\n \n // LLVMArrayType function does not support 64-bit ElementCount\n@@ -1253,20 +1266,34 @@ extern \"C\" LLVMValueRef LLVMRustBuildMemCpy(LLVMBuilderRef B,\n                                             LLVMValueRef Dst, unsigned DstAlign,\n                                             LLVMValueRef Src, unsigned SrcAlign,\n                                             LLVMValueRef Size, bool IsVolatile) {\n+#if LLVM_VERSION_GE(10, 0)\n+  return wrap(unwrap(B)->CreateMemCpy(\n+      unwrap(Dst), MaybeAlign(DstAlign),\n+      unwrap(Src), MaybeAlign(SrcAlign),\n+      unwrap(Size), IsVolatile));\n+#else\n   return wrap(unwrap(B)->CreateMemCpy(\n       unwrap(Dst), DstAlign,\n       unwrap(Src), SrcAlign,\n       unwrap(Size), IsVolatile));\n+#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildMemMove(LLVMBuilderRef B,\n                                              LLVMValueRef Dst, unsigned DstAlign,\n                                              LLVMValueRef Src, unsigned SrcAlign,\n                                              LLVMValueRef Size, bool IsVolatile) {\n+#if LLVM_VERSION_GE(10, 0)\n+  return wrap(unwrap(B)->CreateMemMove(\n+      unwrap(Dst), MaybeAlign(DstAlign),\n+      unwrap(Src), MaybeAlign(SrcAlign),\n+      unwrap(Size), IsVolatile));\n+#else\n   return wrap(unwrap(B)->CreateMemMove(\n       unwrap(Dst), DstAlign,\n       unwrap(Src), SrcAlign,\n       unwrap(Size), IsVolatile));\n+#endif\n }\n \n extern \"C\" LLVMValueRef\n@@ -1450,7 +1477,11 @@ struct LLVMRustModuleBuffer {\n \n extern \"C\" LLVMRustModuleBuffer*\n LLVMRustModuleBufferCreate(LLVMModuleRef M) {\n+#if LLVM_VERSION_GE(10, 0)\n+  auto Ret = std::make_unique<LLVMRustModuleBuffer>();\n+#else\n   auto Ret = llvm::make_unique<LLVMRustModuleBuffer>();\n+#endif\n   {\n     raw_string_ostream OS(Ret->data);\n     {"}, {"sha": "a7a4520ff95454901edd774117e05a100ad5d48f", "filename": "src/test/codegen/abi-main-signature-32bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fabi-main-signature-32bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fabi-main-signature-32bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-main-signature-32bit-c-int.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -7,4 +7,4 @@\n fn main() {\n }\n \n-// CHECK: define i32 @main(i32, i8**)\n+// CHECK: define i32 @main(i32{{( %0)?}}, i8**{{( %1)?}})"}, {"sha": "5090f7c378c3662f23071ee6edd9b7ee2ecb1503", "filename": "src/test/codegen/bool-cmp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fbool-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fbool-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbool-cmp.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -10,8 +10,9 @@ use std::cmp::Ordering;\n // CHECK-LABEL: @cmp_bool\n #[no_mangle]\n pub fn cmp_bool(a: bool, b: bool) -> Ordering {\n+// LLVM 10 produces (zext a) + (sext b), but the final lowering is (zext a) - (zext b).\n // CHECK: zext i1\n-// CHECK: zext i1\n-// CHECK: sub nsw\n+// CHECK: {{z|s}}ext i1\n+// CHECK: {{sub|add}} nsw\n     a.cmp(&b)\n }"}, {"sha": "3511c7c5185eee446bca720270ab120b1ccb181f", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -73,7 +73,7 @@ pub fn _box(x: Box<i32>) -> Box<i32> {\n   x\n }\n \n-// CHECK: @struct_return(%S* noalias nocapture sret dereferenceable(32))\n+// CHECK: @struct_return(%S* noalias nocapture sret dereferenceable(32){{( %0)?}})\n #[no_mangle]\n pub fn struct_return() -> S {\n   S {\n@@ -117,7 +117,7 @@ pub fn str(_: &[u8]) {\n pub fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_box({}* noalias nonnull align 1, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}))\n+// CHECK: @trait_box({}* noalias nonnull align 1{{( %0)?}}, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n #[no_mangle]\n pub fn trait_box(_: Box<Drop>) {\n }"}, {"sha": "2386fc43007a272e03dc80f96a233b3838b1dbae", "filename": "src/test/codegen/intrinsics/prefetch.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fintrinsics%2Fprefetch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fintrinsics%2Fprefetch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fprefetch.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -9,55 +9,55 @@ use std::intrinsics::{prefetch_read_data, prefetch_write_data,\n #[no_mangle]\n pub fn check_prefetch_read_data(data: &[i8]) {\n     unsafe {\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 0, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 0, i32 1)\n         prefetch_read_data(data.as_ptr(), 0);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 1, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 1, i32 1)\n         prefetch_read_data(data.as_ptr(), 1);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 2, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 2, i32 1)\n         prefetch_read_data(data.as_ptr(), 2);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 3, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 3, i32 1)\n         prefetch_read_data(data.as_ptr(), 3);\n     }\n }\n \n #[no_mangle]\n pub fn check_prefetch_write_data(data: &[i8]) {\n     unsafe {\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 0, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 0, i32 1)\n         prefetch_write_data(data.as_ptr(), 0);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 1, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 1, i32 1)\n         prefetch_write_data(data.as_ptr(), 1);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 2, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 2, i32 1)\n         prefetch_write_data(data.as_ptr(), 2);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 3, i32 1)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 3, i32 1)\n         prefetch_write_data(data.as_ptr(), 3);\n     }\n }\n \n #[no_mangle]\n pub fn check_prefetch_read_instruction(data: &[i8]) {\n     unsafe {\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 0, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 0, i32 0)\n         prefetch_read_instruction(data.as_ptr(), 0);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 1, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 1, i32 0)\n         prefetch_read_instruction(data.as_ptr(), 1);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 2, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 2, i32 0)\n         prefetch_read_instruction(data.as_ptr(), 2);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 0, i32 3, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 0, i32 3, i32 0)\n         prefetch_read_instruction(data.as_ptr(), 3);\n     }\n }\n \n #[no_mangle]\n pub fn check_prefetch_write_instruction(data: &[i8]) {\n     unsafe {\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 0, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 0, i32 0)\n         prefetch_write_instruction(data.as_ptr(), 0);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 1, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 1, i32 0)\n         prefetch_write_instruction(data.as_ptr(), 1);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 2, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 2, i32 0)\n         prefetch_write_instruction(data.as_ptr(), 2);\n-        // CHECK: call void @llvm.prefetch(i8* %{{.*}}, i32 1, i32 3, i32 0)\n+        // CHECK: call void @llvm.prefetch{{.*}}(i8* %{{.*}}, i32 1, i32 3, i32 0)\n         prefetch_write_instruction(data.as_ptr(), 3);\n     }\n }"}, {"sha": "5050ed149941483a8c585fc0509ba2b6d4938977", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -17,7 +17,7 @@ pub fn naked_empty() {\n // CHECK: Function Attrs: naked\n #[no_mangle]\n #[naked]\n-// CHECK-NEXT: define void @naked_with_args(i{{[0-9]+}})\n+// CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %0)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n@@ -36,7 +36,7 @@ pub fn naked_with_return() -> isize {\n }\n \n // CHECK: Function Attrs: naked\n-// CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}})\n+// CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %0)?}})\n #[no_mangle]\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {"}, {"sha": "8fbe712065bde2e8453bb3cae4a2d08cbd15fbf2", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -13,6 +13,6 @@ pub fn helper(_: usize) {\n // CHECK-LABEL: @repeat_take_collect\n #[no_mangle]\n pub fn repeat_take_collect() -> Vec<u8> {\n-// CHECK: call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}align 1 %{{[0-9]+}}, i8 42, [[USIZE]] 100000, i1 false)\n+// CHECK: call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}align 1{{.*}} %{{[0-9]+}}, i8 42, [[USIZE]] 100000, i1 false)\n     iter::repeat(42).take(100000).collect()\n }"}, {"sha": "886b0dd9e7b08900ca522850e0732eece8cb03a5", "filename": "src/test/codegen/repr-transparent-sysv64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -10,7 +10,7 @@ pub struct Rgb8 { r: u8, g: u8, b: u8 }\n #[repr(transparent)]\n pub struct Rgb8Wrap(Rgb8);\n \n-// CHECK: i24 @test_Rgb8Wrap(i24)\n+// CHECK: i24 @test_Rgb8Wrap(i24{{( %0)?}})\n #[no_mangle]\n pub extern \"sysv64\" fn test_Rgb8Wrap(_: Rgb8Wrap) -> Rgb8Wrap { loop {} }\n \n@@ -23,6 +23,6 @@ pub union FloatBits {\n #[repr(transparent)]\n pub struct SmallUnion(FloatBits);\n \n-// CHECK: i32 @test_SmallUnion(i32)\n+// CHECK: i32 @test_SmallUnion(i32{{( %0)?}})\n #[no_mangle]\n pub extern \"sysv64\" fn test_SmallUnion(_: SmallUnion) -> SmallUnion { loop {} }"}, {"sha": "afea01e9a2d035a75ac2125b7f3d4d8a87e825bb", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82febc78e5a14356de5f713b904eebef1e86956/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=e82febc78e5a14356de5f713b904eebef1e86956", "patch": "@@ -54,7 +54,7 @@ pub fn test_UnionF32F32(_: UnionF32F32) -> UnionF32F32 { loop {} }\n \n pub union UnionF32U32{a:f32, b:u32}\n \n-// CHECK: define i32 @test_UnionF32U32(i32)\n+// CHECK: define i32 @test_UnionF32U32(i32{{( %0)?}})\n #[no_mangle]\n pub fn test_UnionF32U32(_: UnionF32U32) -> UnionF32U32 { loop {} }\n "}, {"sha": "9a973ed74e8672548296b47857770d3768527985", "filename": "src/test/debuginfo/borrowed-enum-legacy.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fborrowed-enum-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fborrowed-enum-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,84 +0,0 @@\n-// ignore-tidy-linelength\n-// min-lldb-version: 310\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:run\n-\n-// gdb-command:print *the_a_ref\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, [...]}}\n-// gdbr-check:$1 = borrowed_enum_legacy::ABC::TheA{x: 0, y: 8970181431921507452}\n-\n-// gdb-command:print *the_b_ref\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = TheB, [...]}, {RUST$ENUM$DISR = TheB, __0 = 0, __1 = 286331153, __2 = 286331153}}\n-// gdbr-check:$2 = borrowed_enum_legacy::ABC::TheB(0, 286331153, 286331153)\n-\n-// gdb-command:print *univariant_ref\n-// gdbg-check:$3 = {{__0 = 4820353753753434}}\n-// gdbr-check:$3 = borrowed_enum_legacy::Univariant::TheOnlyCase(4820353753753434)\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print *the_a_ref\n-// lldbg-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n-// lldbr-check:(borrowed_enum_legacy::ABC::TheA) *the_a_ref = TheA { borrowed_enum_legacy::ABC::TheA: 0, borrowed_enum_legacy::ABC::TheB: 8970181431921507452 }\n-// lldb-command:print *the_b_ref\n-// lldbg-check:[...]$1 = TheB(0, 286331153, 286331153)\n-// lldbr-check:(borrowed_enum_legacy::ABC::TheB) *the_b_ref = { = 0 = 286331153 = 286331153 }\n-// lldb-command:print *univariant_ref\n-// lldbg-check:[...]$2 = TheOnlyCase(4820353753753434)\n-// lldbr-check:(borrowed_enum_legacy::Univariant) *univariant_ref = { borrowed_enum_legacy::TheOnlyCase = { = 4820353753753434 } }\n-\n-#![allow(unused_variables)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum ABC {\n-    TheA { x: i64, y: i64 },\n-    TheB (i64, i32, i32),\n-}\n-\n-// This is a special case since it does not have the implicit discriminant field.\n-enum Univariant {\n-    TheOnlyCase(i64)\n-}\n-\n-fn main() {\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let the_a = ABC::TheA { x: 0, y: 8970181431921507452 };\n-    let the_a_ref: &ABC = &the_a;\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let the_b = ABC::TheB (0, 286331153, 286331153);\n-    let the_b_ref: &ABC = &the_b;\n-\n-    let univariant = Univariant::TheOnlyCase(4820353753753434);\n-    let univariant_ref: &Univariant = &univariant;\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "4f17e48c6a437a2022a9902dc754ef4555485868", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes-legacy.rs", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,105 +0,0 @@\n-// ignore-tidy-linelength\n-// ignore-lldb: FIXME(#27089)\n-// min-lldb-version: 310\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-// gdb-command:run\n-\n-// gdb-command:print eight_bytes1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Variant1, __0 = 100}, {RUST$ENUM$DISR = Variant1, __0 = 100}}\n-// gdbr-check:$1 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant1(100)\n-\n-// gdb-command:print four_bytes1\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Variant1, __0 = 101}, {RUST$ENUM$DISR = Variant1, __0 = 101}}\n-// gdbr-check:$2 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant1(101)\n-\n-// gdb-command:print two_bytes1\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Variant1, __0 = 102}, {RUST$ENUM$DISR = Variant1, __0 = 102}}\n-// gdbr-check:$3 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant1(102)\n-\n-// gdb-command:print one_byte1\n-// gdbg-check:$4 = {{RUST$ENUM$DISR = Variant1, __0 = 65 'A'}, {RUST$ENUM$DISR = Variant1, __0 = 65 'A'}}\n-// gdbr-check:$4 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant1(65)\n-\n-\n-// gdb-command:print eight_bytes2\n-// gdbg-check:$5 = {{RUST$ENUM$DISR = Variant2, __0 = 100}, {RUST$ENUM$DISR = Variant2, __0 = 100}}\n-// gdbr-check:$5 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant2(100)\n-\n-// gdb-command:print four_bytes2\n-// gdbg-check:$6 = {{RUST$ENUM$DISR = Variant2, __0 = 101}, {RUST$ENUM$DISR = Variant2, __0 = 101}}\n-// gdbr-check:$6 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant2(101)\n-\n-// gdb-command:print two_bytes2\n-// gdbg-check:$7 = {{RUST$ENUM$DISR = Variant2, __0 = 102}, {RUST$ENUM$DISR = Variant2, __0 = 102}}\n-// gdbr-check:$7 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant2(102)\n-\n-// gdb-command:print one_byte2\n-// gdbg-check:$8 = {{RUST$ENUM$DISR = Variant2, __0 = 65 'A'}, {RUST$ENUM$DISR = Variant2, __0 = 65 'A'}}\n-// gdbr-check:$8 = generic_enum_with_different_disr_sizes_legacy::Enum::Variant2(65)\n-\n-// gdb-command:continue\n-\n-// === LLDB TESTS ==================================================================================\n-// lldb-command:run\n-\n-// lldb-command:print eight_bytes1\n-// lldb-check:[...]$0 = Variant1(100)\n-// lldb-command:print four_bytes1\n-// lldb-check:[...]$1 = Variant1(101)\n-// lldb-command:print two_bytes1\n-// lldb-check:[...]$2 = Variant1(102)\n-// lldb-command:print one_byte1\n-// lldb-check:[...]$3 = Variant1('A')\n-\n-// lldb-command:print eight_bytes2\n-// lldb-check:[...]$4 = Variant2(100)\n-// lldb-command:print four_bytes2\n-// lldb-check:[...]$5 = Variant2(101)\n-// lldb-command:print two_bytes2\n-// lldb-check:[...]$6 = Variant2(102)\n-// lldb-command:print one_byte2\n-// lldb-check:[...]$7 = Variant2('A')\n-\n-// lldb-command:continue\n-\n-#![allow(unused_variables)]\n-#![allow(dead_code)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-// This test case makes sure that we get correct type descriptions for the enum\n-// discriminant of different instantiations of the same generic enum type where,\n-// dependending on the generic type parameter(s), the discriminant has a\n-// different size in memory.\n-\n-enum Enum<T> {\n-    Variant1(T),\n-    Variant2(T)\n-}\n-\n-fn main() {\n-    // These are ordered for descending size on purpose\n-    let eight_bytes1 = Enum::Variant1(100.0f64);\n-    let four_bytes1 = Enum::Variant1(101i32);\n-    let two_bytes1 = Enum::Variant1(102i16);\n-    let one_byte1 = Enum::Variant1(65u8);\n-\n-    let eight_bytes2 = Enum::Variant2(100.0f64);\n-    let four_bytes2 = Enum::Variant2(101i32);\n-    let two_bytes2 = Enum::Variant2(102i16);\n-    let one_byte2 = Enum::Variant2(65u8);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() { () }"}, {"sha": "37a875a4188c16fbb92b8c5da8fa044c68fc4812", "filename": "src/test/debuginfo/generic-struct-style-enum-legacy.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,86 +0,0 @@\n-// ignore-tidy-linelength\n-// min-lldb-version: 310\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// gdb-command:set print union on\n-// gdb-command:run\n-\n-// gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n-// gdbr-check:$1 = generic_struct_style_enum_legacy::Regular::Case1{a: 0, b: 31868, c: 31868, d: 31868, e: 31868}\n-\n-// gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n-// gdbr-check:$2 = generic_struct_style_enum_legacy::Regular::Case2{a: 0, b: 286331153, c: 286331153}\n-\n-// gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n-// gdbr-check:$3 = generic_struct_style_enum_legacy::Regular::Case3{a: 0, b: 6438275382588823897}\n-\n-// gdb-command:print univariant\n-// gdbg-check:$4 = {{a = -1}}\n-// gdbr-check:$4 = generic_struct_style_enum_legacy::Univariant<i32>::TheOnlyCase{a: -1}\n-\n-\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-use self::Regular::{Case1, Case2, Case3};\n-use self::Univariant::TheOnlyCase;\n-\n-// NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n-// substituted with something of size `xx` bits and the same alignment as an integer type of the\n-// same size.\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum Regular<T16, T32, T64> {\n-    Case1 { a: T64, b: T16, c: T16, d: T16, e: T16},\n-    Case2 { a: T64, b: T32, c: T32},\n-    Case3 { a: T64, b: T64 }\n-}\n-\n-enum Univariant<T> {\n-    TheOnlyCase { a: T }\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianness trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let case1: Regular<u16, u32, i64> = Case1 { a: 0, b: 31868, c: 31868, d: 31868, e: 31868 };\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let case2: Regular<i16, u32, i64>  = Case2 { a: 0, b: 286331153, c: 286331153 };\n-\n-    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n-    // 0b01011001010110010101100101011001 = 1499027801\n-    // 0b0101100101011001 = 22873\n-    // 0b01011001 = 89\n-    let case3: Regular<u16, i32, u64>  = Case3 { a: 0, b: 6438275382588823897 };\n-\n-    let univariant = TheOnlyCase { a: -1 };\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "452e90008ea6020eea7a0e2f1abfb3bbe1c564df", "filename": "src/test/debuginfo/generic-tuple-style-enum-legacy.rs", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,108 +0,0 @@\n-// ignore-tidy-linelength\n-// min-lldb-version: 310\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:set print union on\n-// gdb-command:run\n-\n-// gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, __0 = 0, __1 = 31868, __2 = 31868, __3 = 31868, __4 = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n-// gdbr-check:$1 = generic_tuple_style_enum_legacy::Regular::Case1(0, 31868, 31868, 31868, 31868)\n-\n-// gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 286331153, __2 = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n-// gdbr-check:$2 = generic_tuple_style_enum_legacy::Regular::Case2(0, 286331153, 286331153)\n-\n-// gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 6438275382588823897}}\n-// gdbr-check:$3 = generic_tuple_style_enum_legacy::Regular::Case3(0, 6438275382588823897)\n-\n-// gdb-command:print univariant\n-// gdbg-check:$4 = {{__0 = -1}}\n-// gdbr-check:$4 = generic_tuple_style_enum_legacy::Univariant<i64>::TheOnlyCase(-1)\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print case1\n-// lldbg-check:[...]$0 = Case1(0, 31868, 31868, 31868, 31868)\n-// lldbr-check:(generic_tuple_style_enum_legacy::Regular<u16, u32, u64>::Case1) case1 = { = 0 = 31868 = 31868 = 31868 = 31868 }\n-\n-// lldb-command:print case2\n-// lldbg-check:[...]$1 = Case2(0, 286331153, 286331153)\n-// lldbr-check:(generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case2) case2 = Regular<i16, i32, i64>::Case2 { generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case1: 0, generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case2: 286331153, generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case3: 286331153 }\n-\n-// lldb-command:print case3\n-// lldbg-check:[...]$2 = Case3(0, 6438275382588823897)\n-// lldbr-check:(generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case3) case3 = Regular<i16, i32, i64>::Case3 { generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case1: 0, generic_tuple_style_enum_legacy::Regular<i16, i32, i64>::Case2: 6438275382588823897 }\n-\n-// lldb-command:print univariant\n-// lldbg-check:[...]$3 = TheOnlyCase(-1)\n-// lldbr-check:(generic_tuple_style_enum_legacy::Univariant<i64>) univariant = { generic_tuple_style_enum_legacy::TheOnlyCase = { = -1 } }\n-\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-use self::Regular::{Case1, Case2, Case3};\n-use self::Univariant::TheOnlyCase;\n-\n-// NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n-// substituted with something of size `xx` bits and the same alignment as an integer type of the\n-// same size.\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum Regular<T16, T32, T64> {\n-    Case1(T64, T16, T16, T16, T16),\n-    Case2(T64, T32, T32),\n-    Case3(T64, T64)\n-}\n-\n-enum Univariant<T64> {\n-    TheOnlyCase(T64)\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianness trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let case1: Regular<u16, u32, u64> = Case1(0_u64, 31868_u16, 31868_u16, 31868_u16, 31868_u16);\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let case2: Regular<i16, i32, i64> = Case2(0_i64, 286331153_i32, 286331153_i32);\n-\n-    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n-    // 0b01011001010110010101100101011001 = 1499027801\n-    // 0b0101100101011001 = 22873\n-    // 0b01011001 = 89\n-    let case3: Regular<i16, i32, i64> = Case3(0_i64, 6438275382588823897_i64);\n-\n-    let univariant = TheOnlyCase(-1_i64);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() { () }"}, {"sha": "99286708ae24321bbdb67db3f35ada6d79e9172e", "filename": "src/test/debuginfo/recursive-struct-legacy.rs", "status": "removed", "additions": 0, "deletions": 235, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Frecursive-struct-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Frecursive-struct-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,235 +0,0 @@\n-// ignore-tidy-linelength\n-// ignore-lldb\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// gdb-command:run\n-\n-// gdb-command:print stack_unique.value\n-// gdb-check:$1 = 0\n-// gdbg-command:print stack_unique.next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdbr-command:print stack_unique.next.val.value\n-// gdb-check:$2 = 1\n-\n-// gdbg-command:print unique_unique->value\n-// gdbr-command:print unique_unique.value\n-// gdb-check:$3 = 2\n-// gdbg-command:print unique_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdbr-command:print unique_unique.next.val.value\n-// gdb-check:$4 = 3\n-\n-// gdb-command:print vec_unique[0].value\n-// gdb-check:$5 = 6.5\n-// gdbg-command:print vec_unique[0].next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdbr-command:print vec_unique[0].next.val.value\n-// gdb-check:$6 = 7.5\n-\n-// gdbg-command:print borrowed_unique->value\n-// gdbr-command:print borrowed_unique.value\n-// gdb-check:$7 = 8.5\n-// gdbg-command:print borrowed_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdbr-command:print borrowed_unique.next.val.value\n-// gdb-check:$8 = 9.5\n-\n-// LONG CYCLE\n-// gdb-command:print long_cycle1.value\n-// gdb-check:$9 = 20\n-// gdbg-command:print long_cycle1.next->value\n-// gdbr-command:print long_cycle1.next.value\n-// gdb-check:$10 = 21\n-// gdbg-command:print long_cycle1.next->next->value\n-// gdbr-command:print long_cycle1.next.next.value\n-// gdb-check:$11 = 22\n-// gdbg-command:print long_cycle1.next->next->next->value\n-// gdbr-command:print long_cycle1.next.next.next.value\n-// gdb-check:$12 = 23\n-\n-// gdb-command:print long_cycle2.value\n-// gdb-check:$13 = 24\n-// gdbg-command:print long_cycle2.next->value\n-// gdbr-command:print long_cycle2.next.value\n-// gdb-check:$14 = 25\n-// gdbg-command:print long_cycle2.next->next->value\n-// gdbr-command:print long_cycle2.next.next.value\n-// gdb-check:$15 = 26\n-\n-// gdb-command:print long_cycle3.value\n-// gdb-check:$16 = 27\n-// gdbg-command:print long_cycle3.next->value\n-// gdbr-command:print long_cycle3.next.value\n-// gdb-check:$17 = 28\n-\n-// gdb-command:print long_cycle4.value\n-// gdb-check:$18 = 29.5\n-\n-// gdbg-command:print (*****long_cycle_w_anonymous_types).value\n-// gdbr-command:print long_cycle_w_anonymous_types.value\n-// gdb-check:$19 = 30\n-\n-// gdbg-command:print (*****((*****long_cycle_w_anonymous_types).next.RUST$ENCODED$ENUM$0$Empty.val)).value\n-// gdbr-command:print long_cycle_w_anonymous_types.next.val.value\n-// gdb-check:$20 = 31\n-\n-// gdb-command:continue\n-\n-#![allow(unused_variables)]\n-#![feature(box_syntax)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-use self::Opt::{Empty, Val};\n-\n-enum Opt<T> {\n-    Empty,\n-    Val { val: T }\n-}\n-\n-struct UniqueNode<T> {\n-    next: Opt<Box<UniqueNode<T>>>,\n-    value: T\n-}\n-\n-struct LongCycle1<T> {\n-    next: Box<LongCycle2<T>>,\n-    value: T,\n-}\n-\n-struct LongCycle2<T> {\n-    next: Box<LongCycle3<T>>,\n-    value: T,\n-}\n-\n-struct LongCycle3<T> {\n-    next: Box<LongCycle4<T>>,\n-    value: T,\n-}\n-\n-struct LongCycle4<T> {\n-    next: Option<Box<LongCycle1<T>>>,\n-    value: T,\n-}\n-\n-struct LongCycleWithAnonymousTypes {\n-    next: Opt<Box<Box<Box<Box<Box<LongCycleWithAnonymousTypes>>>>>>,\n-    value: usize,\n-}\n-\n-// This test case makes sure that recursive structs are properly described. The Node structs are\n-// generic so that we can have a new type (that newly needs to be described) for the different\n-// cases. The potential problem with recursive types is that the DI generation algorithm gets\n-// trapped in an endless loop. To make sure, we actually test this in the different cases, we have\n-// to operate on a new type each time, otherwise we would just hit the DI cache for all but the\n-// first case.\n-\n-// The different cases below (stack_*, unique_*, box_*, etc) are set up so that the type description\n-// algorithm will enter the type reference cycle that is created by a recursive definition from a\n-// different context each time.\n-\n-// The \"long cycle\" cases are constructed to span a longer, indirect recursion cycle between types.\n-// The different locals will cause the DI algorithm to enter the type reference cycle at different\n-// points.\n-\n-fn main() {\n-    let stack_unique: UniqueNode<u16> = UniqueNode {\n-        next: Val {\n-            val: box UniqueNode {\n-                next: Empty,\n-                value: 1,\n-            }\n-        },\n-        value: 0,\n-    };\n-\n-    let unique_unique: Box<UniqueNode<u32>> = box UniqueNode {\n-        next: Val {\n-            val: box UniqueNode {\n-                next: Empty,\n-                value: 3,\n-            }\n-        },\n-        value: 2,\n-    };\n-\n-    let vec_unique: [UniqueNode<f32>; 1] = [UniqueNode {\n-        next: Val {\n-            val: box UniqueNode {\n-                next: Empty,\n-                value: 7.5,\n-            }\n-        },\n-        value: 6.5,\n-    }];\n-\n-    let borrowed_unique: &UniqueNode<f64> = &UniqueNode {\n-        next: Val {\n-            val: box UniqueNode {\n-                next: Empty,\n-                value: 9.5,\n-            }\n-        },\n-        value: 8.5,\n-    };\n-\n-    // LONG CYCLE\n-    let long_cycle1: LongCycle1<u16> = LongCycle1 {\n-        next: box LongCycle2 {\n-            next: box LongCycle3 {\n-                next: box LongCycle4 {\n-                    next: None,\n-                    value: 23,\n-                },\n-                value: 22,\n-            },\n-            value: 21\n-        },\n-        value: 20\n-    };\n-\n-    let long_cycle2: LongCycle2<u32> = LongCycle2 {\n-        next: box LongCycle3 {\n-            next: box LongCycle4 {\n-                next: None,\n-                value: 26,\n-            },\n-            value: 25,\n-        },\n-        value: 24\n-    };\n-\n-    let long_cycle3: LongCycle3<u64> = LongCycle3 {\n-        next: box LongCycle4 {\n-            next: None,\n-            value: 28,\n-        },\n-        value: 27,\n-    };\n-\n-    let long_cycle4: LongCycle4<f32> = LongCycle4 {\n-        next: None,\n-        value: 29.5,\n-    };\n-\n-    // It's important that LongCycleWithAnonymousTypes is encountered only at the end of the\n-    // `box` chain.\n-    let long_cycle_w_anonymous_types = box box box box box LongCycleWithAnonymousTypes {\n-        next: Val {\n-            val: box box box box box LongCycleWithAnonymousTypes {\n-                next: Empty,\n-                value: 31,\n-            }\n-        },\n-        value: 30\n-    };\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "1433493fd5d0f87b18984779f4e4a3caf1ecf448", "filename": "src/test/debuginfo/struct-style-enum-legacy.rs", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,105 +0,0 @@\n-// ignore-tidy-linelength\n-// min-lldb-version: 310\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:set print union on\n-// gdb-command:run\n-\n-// gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n-// gdbr-check:$1 = struct_style_enum_legacy::Regular::Case1{a: 0, b: 31868, c: 31868, d: 31868, e: 31868}\n-\n-// gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n-// gdbr-check:$2 = struct_style_enum_legacy::Regular::Case2{a: 0, b: 286331153, c: 286331153}\n-\n-// gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n-// gdbr-check:$3 = struct_style_enum_legacy::Regular::Case3{a: 0, b: 6438275382588823897}\n-\n-// gdb-command:print univariant\n-// gdbg-check:$4 = {{a = -1}}\n-// gdbr-check:$4 = struct_style_enum_legacy::Univariant::TheOnlyCase{a: -1}\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print case1\n-// lldbg-check:[...]$0 = Case1 { a: 0, b: 31868, c: 31868, d: 31868, e: 31868 }\n-// lldbr-check:(struct_style_enum_legacy::Regular::Case1) case1 = { a = 0 b = 31868 c = 31868 d = 31868 e = 31868 }\n-\n-// lldb-command:print case2\n-// lldbg-check:[...]$1 = Case2 { a: 0, b: 286331153, c: 286331153 }\n-// lldbr-check:(struct_style_enum_legacy::Regular::Case2) case2 = Case2 { struct_style_enum_legacy::Regular::Case1: 0, struct_style_enum_legacy::Regular::Case2: 286331153, struct_style_enum_legacy::Regular::Case3: 286331153 }\n-\n-// lldb-command:print case3\n-// lldbg-check:[...]$2 = Case3 { a: 0, b: 6438275382588823897 }\n-// lldbr-check:(struct_style_enum_legacy::Regular::Case3) case3 = Case3 { struct_style_enum_legacy::Regular::Case1: 0, struct_style_enum_legacy::Regular::Case2: 6438275382588823897 }\n-\n-// lldb-command:print univariant\n-// lldbg-check:[...]$3 = TheOnlyCase { a: -1 }\n-// lldbr-check:(struct_style_enum_legacy::Univariant) univariant = Univariant { struct_style_enum_legacy::TheOnlyCase: TheOnlyCase { a: -1 } }\n-\n-#![allow(unused_variables)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-use self::Regular::{Case1, Case2, Case3};\n-use self::Univariant::TheOnlyCase;\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum Regular {\n-    Case1 { a: u64, b: u16, c: u16, d: u16, e: u16},\n-    Case2 { a: u64, b: u32, c: u32},\n-    Case3 { a: u64, b: u64 }\n-}\n-\n-enum Univariant {\n-    TheOnlyCase { a: i64 }\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianness trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let case1 = Case1 { a: 0, b: 31868, c: 31868, d: 31868, e: 31868 };\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let case2 = Case2 { a: 0, b: 286331153, c: 286331153 };\n-\n-    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n-    // 0b01011001010110010101100101011001 = 1499027801\n-    // 0b0101100101011001 = 22873\n-    // 0b01011001 = 89\n-    let case3 = Case3 { a: 0, b: 6438275382588823897 };\n-\n-    let univariant = TheOnlyCase { a: -1 };\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "ebc8e03443881a581e58a76611c9bd7f06795a78", "filename": "src/test/debuginfo/tuple-style-enum-legacy.rs", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,105 +0,0 @@\n-// ignore-tidy-linelength\n-// min-lldb-version: 310\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:set print union on\n-// gdb-command:run\n-\n-// gdb-command:print case1\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = Case1, __0 = 0, __1 = 31868, __2 = 31868, __3 = 31868, __4 = 31868}, {RUST$ENUM$DISR = Case1, [...]}, {RUST$ENUM$DISR = Case1, [...]}}\n-// gdbr-check:$1 = tuple_style_enum_legacy::Regular::Case1(0, 31868, 31868, 31868, 31868)\n-\n-// gdb-command:print case2\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = Case2, [...]}, {RUST$ENUM$DISR = Case2, __0 = 0, __1 = 286331153, __2 = 286331153}, {RUST$ENUM$DISR = Case2, [...]}}\n-// gdbr-check:$2 = tuple_style_enum_legacy::Regular::Case2(0, 286331153, 286331153)\n-\n-// gdb-command:print case3\n-// gdbg-check:$3 = {{RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, [...]}, {RUST$ENUM$DISR = Case3, __0 = 0, __1 = 6438275382588823897}}\n-// gdbr-check:$3 = tuple_style_enum_legacy::Regular::Case3(0, 6438275382588823897)\n-\n-// gdb-command:print univariant\n-// gdbg-check:$4 = {{__0 = -1}}\n-// gdbr-check:$4 = tuple_style_enum_legacy::Univariant::TheOnlyCase(-1)\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print case1\n-// lldbg-check:[...]$0 = Case1(0, 31868, 31868, 31868, 31868)\n-// lldbr-check:(tuple_style_enum_legacy::Regular::Case1) case1 = { = 0 = 31868 = 31868 = 31868 = 31868 }\n-\n-// lldb-command:print case2\n-// lldbg-check:[...]$1 = Case2(0, 286331153, 286331153)\n-// lldbr-check:(tuple_style_enum_legacy::Regular::Case2) case2 = Case2 { tuple_style_enum_legacy::Regular::Case1: 0, tuple_style_enum_legacy::Regular::Case2: 286331153, tuple_style_enum_legacy::Regular::Case3: 286331153 }\n-\n-// lldb-command:print case3\n-// lldbg-check:[...]$2 = Case3(0, 6438275382588823897)\n-// lldbr-check:(tuple_style_enum_legacy::Regular::Case3) case3 = Case3 { tuple_style_enum_legacy::Regular::Case1: 0, tuple_style_enum_legacy::Regular::Case2: 6438275382588823897 }\n-\n-// lldb-command:print univariant\n-// lldbg-check:[...]$3 = TheOnlyCase(-1)\n-// lldbr-check:(tuple_style_enum_legacy::Univariant) univariant = { tuple_style_enum_legacy::TheOnlyCase = { = -1 } }\n-\n-#![allow(unused_variables)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-use self::Regular::{Case1, Case2, Case3};\n-use self::Univariant::TheOnlyCase;\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum Regular {\n-    Case1(u64, u16, u16, u16, u16),\n-    Case2(u64, u32, u32),\n-    Case3(u64, u64)\n-}\n-\n-enum Univariant {\n-    TheOnlyCase(i64)\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianness trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let case1 = Case1(0, 31868, 31868, 31868, 31868);\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let case2 = Case2(0, 286331153, 286331153);\n-\n-    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n-    // 0b01011001010110010101100101011001 = 1499027801\n-    // 0b0101100101011001 = 22873\n-    // 0b01011001 = 89\n-    let case3 = Case3(0, 6438275382588823897);\n-\n-    let univariant = TheOnlyCase(-1);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}, {"sha": "e7c9357752897d09ca2aec003711445af08065c2", "filename": "src/test/debuginfo/unique-enum-legacy.rs", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Funique-enum-legacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a/src%2Ftest%2Fdebuginfo%2Funique-enum-legacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum-legacy.rs?ref=3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "patch": "@@ -1,88 +0,0 @@\n-// ignore-tidy-linelength\n-// min-lldb-version: 310\n-\n-// As long as LLVM 5 and LLVM 6 are supported, we want to test the\n-// enum debuginfo fallback mode.  Once those are desupported, this\n-// test can be removed, as there is another (non-\"legacy\") test that\n-// tests the new mode.\n-// ignore-llvm-version: 7.0 - 9.9.9\n-// ignore-gdb-version: 7.11.90 - 7.12.9\n-// ignore-gdb-version: 8.2 - 9.9\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:run\n-\n-// gdb-command:print *the_a\n-// gdbg-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, [...]}}\n-// gdbr-check:$1 = unique_enum_legacy::ABC::TheA{x: 0, y: 8970181431921507452}\n-\n-// gdb-command:print *the_b\n-// gdbg-check:$2 = {{RUST$ENUM$DISR = TheB, [...]}, {RUST$ENUM$DISR = TheB, __0 = 0, __1 = 286331153, __2 = 286331153}}\n-// gdbr-check:$2 = unique_enum_legacy::ABC::TheB(0, 286331153, 286331153)\n-\n-// gdb-command:print *univariant\n-// gdbg-check:$3 = {{__0 = 123234}}\n-// gdbr-check:$3 = unique_enum_legacy::Univariant::TheOnlyCase(123234)\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print *the_a\n-// lldbg-check:[...]$0 = TheA { x: 0, y: 8970181431921507452 }\n-// lldbr-check:(unique_enum_legacy::ABC::TheA) *the_a = TheA { unique_enum_legacy::ABC::TheA: 0, unique_enum_legacy::ABC::TheB: 8970181431921507452 }\n-\n-// lldb-command:print *the_b\n-// lldbg-check:[...]$1 = TheB(0, 286331153, 286331153)\n-// lldbr-check:(unique_enum_legacy::ABC::TheB) *the_b = { = 0 = 286331153 = 286331153 }\n-\n-// lldb-command:print *univariant\n-// lldbg-check:[...]$2 = TheOnlyCase(123234)\n-// lldbr-check:(unique_enum_legacy::Univariant) *univariant = { unique_enum_legacy::TheOnlyCase = { = 123234 } }\n-\n-#![allow(unused_variables)]\n-#![feature(box_syntax)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n-// the size of the discriminant value is machine dependent, this has be taken into account when\n-// datatype layout should be predictable as in this case.\n-enum ABC {\n-    TheA { x: i64, y: i64 },\n-    TheB (i64, i32, i32),\n-}\n-\n-// This is a special case since it does not have the implicit discriminant field.\n-enum Univariant {\n-    TheOnlyCase(i64)\n-}\n-\n-fn main() {\n-\n-    // In order to avoid endianness trouble all of the following test values consist of a single\n-    // repeated byte. This way each interpretation of the union should look the same, no matter if\n-    // this is a big or little endian machine.\n-\n-    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n-    // 0b01111100011111000111110001111100 = 2088533116\n-    // 0b0111110001111100 = 31868\n-    // 0b01111100 = 124\n-    let the_a: Box<_> = box ABC::TheA { x: 0, y: 8970181431921507452 };\n-\n-    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n-    // 0b00010001000100010001000100010001 = 286331153\n-    // 0b0001000100010001 = 4369\n-    // 0b00010001 = 17\n-    let the_b: Box<_> = box ABC::TheB (0, 286331153, 286331153);\n-\n-    let univariant: Box<_> = box Univariant::TheOnlyCase(123234);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {()}"}]}