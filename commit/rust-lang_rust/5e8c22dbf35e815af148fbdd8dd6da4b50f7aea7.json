{"sha": "5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOGMyMmRiZjM1ZTgxNWFmMTQ4ZmJkZDhkZDZkYTRiNTBmN2FlYTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-18T11:36:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-18T11:36:11Z"}, "message": "More sources", "tree": {"sha": "acc9507f5910be3b2f722a28b6dccac795bca53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc9507f5910be3b2f722a28b6dccac795bca53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7", "html_url": "https://github.com/rust-lang/rust/commit/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcd98e956a46d90c708abb9739f067a88ae3c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcd98e956a46d90c708abb9739f067a88ae3c4a", "html_url": "https://github.com/rust-lang/rust/commit/9fcd98e956a46d90c708abb9739f067a88ae3c4a"}], "stats": {"total": 73, "additions": 32, "deletions": 41}, "files": [{"sha": "b30ef8e054b70d3bf9d4c2dab0b7394727c20f51", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n     SyntaxKind::{self, BIND_PAT},\n-    SyntaxNode, TextRange,\n+    TextRange,\n };\n \n use crate::{db::RootDatabase, expand::original_range, FileSymbol};\n@@ -86,7 +86,7 @@ impl NavigationTarget {\n                 name,\n                 None,\n                 frange.range,\n-                src.ast.syntax(),\n+                src.ast.syntax().kind(),\n                 src.ast.doc_comment_text(),\n                 src.ast.short_label(),\n             );\n@@ -141,23 +141,22 @@ impl NavigationTarget {\n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n     pub(crate) fn from_named(\n         db: &RootDatabase,\n-        file_id: hir::HirFileId,\n-        node: &impl ast::NameOwner,\n+        node: Source<&dyn ast::NameOwner>,\n         docs: Option<String>,\n         description: Option<String>,\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n-        let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n+        let name = node.ast.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range =\n-            node.name().map(|it| original_range(db, Source::new(file_id, it.syntax())).range);\n-        let frange = original_range(db, Source::new(file_id, node.syntax()));\n+            node.ast.name().map(|it| original_range(db, node.with_ast(it.syntax())).range);\n+        let frange = original_range(db, node.map(|it| it.syntax()));\n \n         NavigationTarget::from_syntax(\n             frange.file_id,\n             name,\n             focus_range,\n             frange.range,\n-            node.syntax(),\n+            node.ast.syntax().kind(),\n             docs,\n             description,\n         )\n@@ -168,14 +167,14 @@ impl NavigationTarget {\n         name: SmolStr,\n         focus_range: Option<TextRange>,\n         full_range: TextRange,\n-        node: &SyntaxNode,\n+        kind: SyntaxKind,\n         docs: Option<String>,\n         description: Option<String>,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n             name,\n-            kind: node.kind(),\n+            kind,\n             full_range,\n             focus_range,\n             container_name: None,\n@@ -220,8 +219,7 @@ where\n         let src = self.source(db);\n         NavigationTarget::from_named(\n             db,\n-            src.file_id,\n-            &src.ast,\n+            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n             src.ast.doc_comment_text(),\n             src.ast.short_label(),\n         )\n@@ -241,7 +239,7 @@ impl ToNav for hir::Module {\n                     name,\n                     None,\n                     frange.range,\n-                    node.syntax(),\n+                    node.syntax().kind(),\n                     None,\n                     None,\n                 )\n@@ -254,7 +252,7 @@ impl ToNav for hir::Module {\n                     name,\n                     None,\n                     frange.range,\n-                    node.syntax(),\n+                    node.syntax().kind(),\n                     node.doc_comment_text(),\n                     node.short_label(),\n                 )\n@@ -273,7 +271,7 @@ impl ToNav for hir::ImplBlock {\n             \"impl\".into(),\n             None,\n             frange.range,\n-            src.ast.syntax(),\n+            src.ast.syntax().kind(),\n             None,\n             None,\n         )\n@@ -287,8 +285,7 @@ impl ToNav for hir::StructField {\n         match &src.ast {\n             FieldSource::Named(it) => NavigationTarget::from_named(\n                 db,\n-                src.file_id,\n-                it,\n+                src.with_ast(it),\n                 it.doc_comment_text(),\n                 it.short_label(),\n             ),\n@@ -299,7 +296,7 @@ impl ToNav for hir::StructField {\n                     \"\".into(),\n                     None,\n                     frange.range,\n-                    it.syntax(),\n+                    it.syntax().kind(),\n                     None,\n                     None,\n                 )\n@@ -312,7 +309,12 @@ impl ToNav for hir::MacroDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         log::debug!(\"nav target {:#?}\", src.ast.syntax());\n-        NavigationTarget::from_named(db, src.file_id, &src.ast, src.ast.doc_comment_text(), None)\n+        NavigationTarget::from_named(\n+            db,\n+            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n+            src.ast.doc_comment_text(),\n+            None,\n+        )\n     }\n }\n "}, {"sha": "3f16e9566134388cc53b54a4aeb1ea30d01b5ab0", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=5e8c22dbf35e815af148fbdd8dd6da4b50f7aea7", "patch": "@@ -120,98 +120,87 @@ fn named_target(db: &RootDatabase, node: Source<&SyntaxNode>) -> Option<Navigati\n             ast::StructDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::EnumDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::EnumVariant(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::FnDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::TypeAliasDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::ConstDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::StaticDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::TraitDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::RecordFieldDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::Module(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     it.short_label(),\n                 ))\n             },\n             ast::MacroCall(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    node.file_id,\n-                    &it,\n+                    node.with_ast(&it),\n                     it.doc_comment_text(),\n                     None,\n                 ))"}]}