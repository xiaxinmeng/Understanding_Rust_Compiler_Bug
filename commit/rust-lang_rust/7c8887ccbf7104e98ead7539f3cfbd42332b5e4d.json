{"sha": "7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjODg4N2NjYmY3MTA0ZTk4ZWFkNzUzOWYzY2ZiZDQyMzMyYjVlNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-24T00:31:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-24T19:12:40Z"}, "message": "introduce (but do not use) `ascribe_user_type` goal\n\nLots of annoying boilerplate.", "tree": {"sha": "e0045abb25811d5fa20190a1fe463dac05ed9deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0045abb25811d5fa20190a1fe463dac05ed9deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "html_url": "https://github.com/rust-lang/rust/commit/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99911a4a0bead7dd1f9ef2f90442844434cc391", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "html_url": "https://github.com/rust-lang/rust/commit/f99911a4a0bead7dd1f9ef2f90442844434cc391"}], "stats": {"total": 141, "additions": 133, "deletions": 8}, "files": [{"sha": "4d6d3bd56f2d803292145685b45275f90c4cad0d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -72,8 +72,9 @@ use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n use traits;\n use traits::query::{\n-    CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n-    CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n+    CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n+    CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, CanonicalPredicateGoal,\n+    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n          ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n@@ -654,6 +655,7 @@ define_dep_nodes!( <'tcx>\n     [] ImpliedOutlivesBounds(CanonicalTyGoal<'tcx>),\n     [] DropckOutlives(CanonicalTyGoal<'tcx>),\n     [] EvaluateObligation(CanonicalPredicateGoal<'tcx>),\n+    [] TypeOpAscribeUserType(CanonicalTypeOpAscribeUserTypeGoal<'tcx>),\n     [] TypeOpEq(CanonicalTypeOpEqGoal<'tcx>),\n     [] TypeOpSubtype(CanonicalTypeOpSubtypeGoal<'tcx>),\n     [] TypeOpProvePredicate(CanonicalTypeOpProvePredicateGoal<'tcx>),"}, {"sha": "571beaae4596b88c014e56b694a0641f63b9546f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -2438,6 +2438,14 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n+EnumLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for UserTypeAnnotation<'a> {\n+        type Lifted = UserTypeAnnotation<'tcx>;\n+        (UserTypeAnnotation::Ty)(ty),\n+        (UserTypeAnnotation::TypeOf)(def, substs),\n+    }\n+}\n+\n newtype_index! {\n     pub struct Promoted {\n         DEBUG_FORMAT = \"promoted[{}]\""}, {"sha": "13683d8544496477fdc55699ca763ec0e1768bf7", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -34,6 +34,9 @@ pub type CanonicalTyGoal<'tcx> = Canonical<'tcx, ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n pub type CanonicalPredicateGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>>;\n \n+pub type CanonicalTypeOpAscribeUserTypeGoal<'tcx> =\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::ascribe_user_type::AscribeUserType<'tcx>>>;\n+\n pub type CanonicalTypeOpEqGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::eq::Eq<'tcx>>>;\n "}, {"sha": "607cfa0ec7a7c7e4bd2ba2096fea612da05c2fa9", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use mir::UserTypeAnnotation;\n+use traits::query::Fallible;\n+use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+pub struct AscribeUserType<'tcx> {\n+    pub mir_ty: Ty<'tcx>,\n+    pub variance: ty::Variance,\n+    pub user_ty: UserTypeAnnotation<'tcx>,\n+}\n+\n+impl<'tcx> AscribeUserType<'tcx> {\n+    pub fn new(\n+        mir_ty: Ty<'tcx>,\n+        variance: ty::Variance,\n+        user_ty: UserTypeAnnotation<'tcx>,\n+    ) -> Self {\n+        AscribeUserType { mir_ty, variance, user_ty }\n+    }\n+}\n+\n+impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for AscribeUserType<'tcx> {\n+    type QueryResponse = ();\n+\n+    fn try_fast_path(\n+        _tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        _key: &ParamEnvAnd<'tcx, Self>,\n+    ) -> Option<Self::QueryResponse> {\n+        None\n+    }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n+        tcx.type_op_ascribe_user_type(canonicalized)\n+    }\n+\n+    fn shrink_to_tcx_lifetime(\n+        v: &'a CanonicalizedQueryResponse<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n+        v\n+    }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for AscribeUserType<'tcx> {\n+        mir_ty, variance, user_ty\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for AscribeUserType<'a> {\n+        type Lifted = AscribeUserType<'tcx>;\n+        mir_ty, variance, user_ty\n+    }\n+}\n+\n+impl_stable_hash_for! {\n+    struct AscribeUserType<'tcx> {\n+        mir_ty, variance, user_ty\n+    }\n+}"}, {"sha": "d20d43cf7578c3917bc37563ca04b2da0587042e", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -20,6 +20,7 @@ use traits::ObligationCause;\n use ty::fold::TypeFoldable;\n use ty::{Lift, ParamEnvAnd, TyCtxt};\n \n+pub mod ascribe_user_type;\n pub mod custom;\n pub mod eq;\n pub mod implied_outlives_bounds;"}, {"sha": "cad90031e970b6b6e01bd96f0a582ba58561fab2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -328,7 +328,7 @@ impl Visibility {\n     }\n }\n \n-#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Copy)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Hash)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell"}, {"sha": "0f6ff93c52336c859b3f240391b8c001c9b755a1", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -14,8 +14,9 @@ use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::GlobalId;\n use traits;\n use traits::query::{\n-    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n-    CanonicalTypeOpNormalizeGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n+    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n+    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n+    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n@@ -115,6 +116,15 @@ impl<'tcx> QueryDescription<'tcx> for queries::evaluate_obligation<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_ascribe_user_type<'tcx> {\n+    fn describe(\n+        _tcx: TyCtxt<'_, '_, '_>,\n+        goal: CanonicalTypeOpAscribeUserTypeGoal<'tcx>,\n+    ) -> Cow<'static, str> {\n+        format!(\"evaluating `type_op_ascribe_user_type` `{:?}`\", goal).into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::type_op_eq<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpEqGoal<'tcx>) -> Cow<'static, str> {\n         format!(\"evaluating `type_op_eq` `{:?}`\", goal).into()"}, {"sha": "a59a15da08d999842e28adb54f3711e764431bed", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -34,9 +34,12 @@ use mir::interpret::GlobalId;\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n-use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal,\n-                    CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n-                    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal, NoSolution};\n+use traits::query::{\n+    CanonicalPredicateGoal, CanonicalProjectionGoal,\n+    CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal,\n+    CanonicalTypeOpSubtypeGoal, CanonicalTypeOpProvePredicateGoal,\n+    CanonicalTypeOpNormalizeGoal, NoSolution,\n+};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::query::outlives_bounds::OutlivesBound;\n@@ -589,6 +592,14 @@ define_queries! { <'tcx>\n             CanonicalPredicateGoal<'tcx>\n         ) -> Result<traits::EvaluationResult, traits::OverflowError>,\n \n+        /// Do not call this query directly: part of the `Eq` type-op\n+        [] fn type_op_ascribe_user_type: TypeOpAscribeUserType(\n+            CanonicalTypeOpAscribeUserTypeGoal<'tcx>\n+        ) -> Result<\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            NoSolution,\n+        >,\n+\n         /// Do not call this query directly: part of the `Eq` type-op\n         [] fn type_op_eq: TypeOpEq(\n             CanonicalTypeOpEqGoal<'tcx>"}, {"sha": "789658dcf72dc25b45452464643ddd8393ebf66e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -1079,6 +1079,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::ImpliedOutlivesBounds |\n         DepKind::DropckOutlives |\n         DepKind::EvaluateObligation |\n+        DepKind::TypeOpAscribeUserType |\n         DepKind::TypeOpEq |\n         DepKind::TypeOpSubtype |\n         DepKind::TypeOpProvePredicate |"}, {"sha": "ace012777c7a795132576e3cc5e6b3e10e1be29c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -1008,6 +1008,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n                 let ty = self.tcx().type_of(def_id);\n                 let ty = ty.subst(tcx, substs);\n+                debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n                 let ty = self.normalize(ty, locations);\n \n                 self.relate_types(ty, v1, a, locations, category)?;"}, {"sha": "bf4e5bda4ebae0e343bd9456ae827bec219f1164", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8887ccbf7104e98ead7539f3cfbd42332b5e4d/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=7c8887ccbf7104e98ead7539f3cfbd42332b5e4d", "patch": "@@ -10,6 +10,7 @@\n \n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::InferCtxt;\n+use rustc::traits::query::type_op::ascribe_user_type::AscribeUserType;\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::type_op::normalize::Normalize;\n use rustc::traits::query::type_op::prove_predicate::ProvePredicate;\n@@ -24,6 +25,7 @@ use std::fmt;\n \n crate fn provide(p: &mut Providers) {\n     *p = Providers {\n+        type_op_ascribe_user_type,\n         type_op_eq,\n         type_op_prove_predicate,\n         type_op_subtype,\n@@ -35,6 +37,18 @@ crate fn provide(p: &mut Providers) {\n     };\n }\n \n+fn type_op_ascribe_user_type<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, AscribeUserType<'tcx>>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+    tcx.infer_ctxt()\n+        .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n+            let (param_env, AscribeUserType { mir_ty, variance, user_ty }) = key.into_parts();\n+            drop((infcx, fulfill_cx, param_env, mir_ty, variance, user_ty));\n+            Ok(())\n+        })\n+}\n+\n fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,"}]}