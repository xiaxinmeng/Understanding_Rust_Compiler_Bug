{"sha": "582ccec1c577eedf6394078e93366714273f922b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmNjZWMxYzU3N2VlZGY2Mzk0MDc4ZTkzMzY2NzE0MjczZjkyMmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-04T11:15:04Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:31Z"}, "message": "Remove predicates on associated types from traits\n\nThese need to only be bounds to avoid cycle errors in trait checking.", "tree": {"sha": "d7da427f4b20fefdae2cbb24d65e54a59a29f2d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7da427f4b20fefdae2cbb24d65e54a59a29f2d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582ccec1c577eedf6394078e93366714273f922b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582ccec1c577eedf6394078e93366714273f922b", "html_url": "https://github.com/rust-lang/rust/commit/582ccec1c577eedf6394078e93366714273f922b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582ccec1c577eedf6394078e93366714273f922b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8787090964e33cd633671025d9acf20dfeaf8765", "url": "https://api.github.com/repos/rust-lang/rust/commits/8787090964e33cd633671025d9acf20dfeaf8765", "html_url": "https://github.com/rust-lang/rust/commit/8787090964e33cd633671025d9acf20dfeaf8765"}], "stats": {"total": 183, "additions": 141, "deletions": 42}, "files": [{"sha": "240f2c0792cf276f2cded9845dc580d27e868808", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -391,6 +391,24 @@ rustc_queries! {\n             desc { |tcx| \"computing predicates of `{}`\", tcx.def_path_str(key) }\n         }\n \n+        /// Returns everything that looks like a predicate written explicitly\n+        /// by the user on a trait item.\n+        ///\n+        /// Traits are unusual, because predicates on associated types are\n+        /// converted into bounds on that type for backwards compatibility:\n+        ///\n+        /// trait X where Self::U: Copy { type U; }\n+        ///\n+        /// becomes\n+        ///\n+        /// trait X { type U: Copy; }\n+        ///\n+        /// `explicit_predicates_of` and `explicit_item_bounds` will then take\n+        /// the appropriate subsets of the predicates here.\n+        query trait_explicit_predicates_and_bounds(key: LocalDefId) -> ty::GenericPredicates<'tcx> {\n+            desc { |tcx| \"computing explicit predicates of trait `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        }\n+\n         /// Returns the predicates written explicitly by the user.\n         query explicit_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing explicit predicates of `{}`\", tcx.def_path_str(key) }"}, {"sha": "7e125481671f531438be04665629e2e8f7443333", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -77,6 +77,7 @@ pub fn provide(providers: &mut Providers) {\n         projection_ty_from_predicates,\n         explicit_predicates_of,\n         super_predicates_of,\n+        trait_explicit_predicates_and_bounds,\n         type_param_predicates,\n         trait_def,\n         adt_def,\n@@ -1731,7 +1732,7 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n-fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n+fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n     debug!(\"explicit_predicates_of(def_id={:?})\", def_id);\n@@ -2116,6 +2117,71 @@ fn const_evaluatable_predicates_of<'tcx>(\n     collector.preds\n }\n \n+fn trait_explicit_predicates_and_bounds(\n+    tcx: TyCtxt<'_>,\n+    def_id: LocalDefId,\n+) -> ty::GenericPredicates<'_> {\n+    assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n+    gather_explicit_predicates_of(tcx, def_id.to_def_id())\n+}\n+\n+fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n+    if let DefKind::Trait = tcx.def_kind(def_id) {\n+        // Remove bounds on associated types from the predicates, they will be\n+        // returned by `explicit_item_bounds`.\n+        let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id.expect_local());\n+        let trait_identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n+\n+        let is_assoc_item_ty = |ty: Ty<'_>| {\n+            // For a predicate from a where clause to become a bound on an\n+            // associated type:\n+            // * It must use the identity substs of the item.\n+            //     * Since any generic parameters on the item are not in scope,\n+            //       this means that the item is not a GAT, and its identity substs\n+            //       are the same as the trait's.\n+            // * It must be an associated type for this trait (*not* a\n+            //   supertrait).\n+            if let ty::Projection(projection) = ty.kind {\n+                if projection.substs == trait_identity_substs\n+                    && tcx.associated_item(projection.item_def_id).container.id() == def_id\n+                {\n+                    true\n+                } else {\n+                    false\n+                }\n+            } else {\n+                false\n+            }\n+        };\n+\n+        let predicates: Vec<_> = predicates_and_bounds\n+            .predicates\n+            .iter()\n+            .copied()\n+            .filter(|(pred, _)| match pred.kind() {\n+                ty::PredicateKind::Trait(tr, _) => !is_assoc_item_ty(tr.skip_binder().self_ty()),\n+                ty::PredicateKind::Projection(proj) => {\n+                    !is_assoc_item_ty(proj.skip_binder().projection_ty.self_ty())\n+                }\n+                ty::PredicateKind::TypeOutlives(outlives) => {\n+                    !is_assoc_item_ty(outlives.skip_binder().0)\n+                }\n+                _ => true,\n+            })\n+            .collect();\n+        if predicates.len() == predicates_and_bounds.predicates.len() {\n+            predicates_and_bounds\n+        } else {\n+            ty::GenericPredicates {\n+                parent: predicates_and_bounds.parent,\n+                predicates: tcx.arena.alloc_slice(&predicates),\n+            }\n+        }\n+    } else {\n+        gather_explicit_predicates_of(tcx, def_id)\n+    }\n+}\n+\n fn projection_ty_from_predicates(\n     tcx: TyCtxt<'tcx>,\n     key: ("}, {"sha": "c9af86f70fd92c18893184ceb5d4d16963ac4543", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -34,7 +34,7 @@ fn associated_type_bounds<'tcx>(\n     );\n \n     let trait_def_id = tcx.associated_item(assoc_item_def_id).container.id();\n-    let trait_predicates = tcx.predicates_of(trait_def_id);\n+    let trait_predicates = tcx.trait_explicit_predicates_and_bounds(trait_def_id.expect_local());\n \n     let bounds_from_parent =\n         trait_predicates.predicates.iter().copied().filter(|(pred, _)| match pred.kind() {"}, {"sha": "9e449de0cf5acdf4357ea119e43b5132f2cd53cd", "filename": "src/test/incremental/issue-54242.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fincremental%2Fissue-54242.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fincremental%2Fissue-54242.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-54242.rs?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -1,6 +1,9 @@\n // revisions: rpass cfail\n \n-trait Tr where Self::Arr: Sized {\n+trait Tr\n+where\n+    (Self::Arr,): Sized,\n+{\n     type Arr;\n \n     const C: usize = 0;"}, {"sha": "49f11140741c2e45da3fbaa410b5e9c7b0f330bd", "filename": "src/test/ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-bound-through-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-bound-through-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-bound-through-where-clause.rs?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -0,0 +1,16 @@\n+// Check that `where Self::Output: Copy` is turned into a bound on `Op::Output`.\n+\n+//check-pass\n+\n+trait Op\n+where\n+    Self::Output: Copy,\n+{\n+    type Output;\n+}\n+\n+fn duplicate<T: Op>(x: T::Output) -> (T::Output, T::Output) {\n+    (x, x)\n+}\n+\n+fn main() {}"}, {"sha": "4b3d6e9d6067f1a5842e54b026996656c44647f8", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.rs?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -5,20 +5,24 @@ trait Foo {\n }\n \n impl Foo for () {\n-    // Doesn't error because we abort compilation after the errors below.\n-    // See point-at-type-on-obligation-failure-3.rs\n-    type Assoc = bool;\n+    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n }\n \n-trait Baz where Self::Assoc: Bar {\n+trait Baz\n+where\n+    Self::Assoc: Bar,\n+{\n     type Assoc;\n }\n \n impl Baz for () {\n     type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n }\n \n-trait Bat where <Self as Bat>::Assoc: Bar {\n+trait Bat\n+where\n+    <Self as Bat>::Assoc: Bar,\n+{\n     type Assoc;\n }\n "}, {"sha": "b23030d7cb52b37b59bbb60e412328ab5cd6e736", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -1,21 +1,36 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:18:18\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n    |\n-LL | trait Baz where Self::Assoc: Bar {\n-   |                              --- required by this bound in `Baz`\n+LL |     type Assoc: Bar;\n+   |                 --- required by this bound in `Foo::Assoc`\n ...\n LL |     type Assoc = bool;\n-   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:26:18\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:19:5\n    |\n-LL | trait Bat where <Self as Bat>::Assoc: Bar {\n-   |                                       --- required by this bound in `Bat`\n+LL |     Self::Assoc: Bar,\n+   |                  --- required by this bound in `Baz::Assoc`\n+LL | {\n+LL |     type Assoc;\n+   |          ----- required by a bound in this\n ...\n LL |     type Assoc = bool;\n-   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the trait bound `bool: Bar` is not satisfied\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:30:5\n+   |\n+LL |     <Self as Bat>::Assoc: Bar,\n+   |                           --- required by this bound in `Bat::Assoc`\n+LL | {\n+LL |     type Assoc;\n+   |          ----- required by a bound in this\n+...\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "9360d96f05e174a29c7a38389f3f37c7e6e621a8", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-3.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8787090964e33cd633671025d9acf20dfeaf8765/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8787090964e33cd633671025d9acf20dfeaf8765/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.rs?ref=8787090964e33cd633671025d9acf20dfeaf8765", "patch": "@@ -1,11 +0,0 @@\n-trait Bar {}\n-\n-trait Foo {\n-    type Assoc: Bar;\n-}\n-\n-impl Foo for () {\n-    type Assoc = bool; //~ ERROR the trait bound `bool: Bar` is not satisfied\n-}\n-\n-fn main() {}"}, {"sha": "6ab3d94e10248805dbaeb757cfe306a084df09e6", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-3.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8787090964e33cd633671025d9acf20dfeaf8765/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8787090964e33cd633671025d9acf20dfeaf8765/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-3.stderr?ref=8787090964e33cd633671025d9acf20dfeaf8765", "patch": "@@ -1,12 +0,0 @@\n-error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-3.rs:8:5\n-   |\n-LL |     type Assoc: Bar;\n-   |                 --- required by this bound in `Foo::Assoc`\n-...\n-LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "832b736ad86424112888bff610d11007ab97c253", "filename": "src/test/ui/async-await/issue-67765-async-diagnostic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582ccec1c577eedf6394078e93366714273f922b/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr?ref=582ccec1c577eedf6394078e93366714273f922b", "patch": "@@ -1,11 +1,11 @@\n error[E0515]: cannot return value referencing local variable `s`\n-  --> $DIR/issue-67765-async-diagnostic.rs:13:11\n+  --> $DIR/issue-67765-async-diagnostic.rs:13:5\n    |\n LL |     let b = &s[..];\n    |              - `s` is borrowed here\n LL | \n LL |     Err(b)?;\n-   |           ^ returns a value referencing data owned by the current function\n+   |     ^^^^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n "}]}