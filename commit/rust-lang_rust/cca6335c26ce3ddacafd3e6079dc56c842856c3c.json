{"sha": "cca6335c26ce3ddacafd3e6079dc56c842856c3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYTYzMzVjMjZjZTNkZGFjYWZkM2U2MDc5ZGM1NmM4NDI4NTZjM2M=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-11T19:35:01Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-11T19:35:01Z"}, "message": "Implement the \"attempted dynamic environment-capture\" error in rustc.", "tree": {"sha": "909b80973fb4aa6b8dd6a486aa6bf207945218dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909b80973fb4aa6b8dd6a486aa6bf207945218dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca6335c26ce3ddacafd3e6079dc56c842856c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca6335c26ce3ddacafd3e6079dc56c842856c3c", "html_url": "https://github.com/rust-lang/rust/commit/cca6335c26ce3ddacafd3e6079dc56c842856c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca6335c26ce3ddacafd3e6079dc56c842856c3c/comments", "author": null, "committer": null, "parents": [{"sha": "4bd8dcccbc6437a29a684633ddca66508ad940a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd8dcccbc6437a29a684633ddca66508ad940a3", "html_url": "https://github.com/rust-lang/rust/commit/4bd8dcccbc6437a29a684633ddca66508ad940a3"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "9b2d88e8ffd12adf06a7806c46461f64ff4f43da", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=cca6335c26ce3ddacafd3e6079dc56c842856c3c", "patch": "@@ -6,6 +6,7 @@ import front.token;\n import front.eval;\n import middle.trans;\n import middle.resolve;\n+import middle.capture;\n import middle.ty;\n import middle.typeck;\n import middle.typestate_check;\n@@ -67,6 +68,7 @@ impure fn compile_input(session.session sess,\n     if (parse_only) {ret;}\n     crate = creader.read_crates(sess, crate, library_search_paths);\n     crate = resolve.resolve_crate(sess, crate);\n+    capture.check_for_captures(sess, crate);\n     auto typeck_result = typeck.check_crate(sess, crate);\n     crate = typeck_result._0;\n     auto type_cache = typeck_result._1;"}, {"sha": "73c8fef8045975bbf8052914ceeee7f316e37037", "filename": "src/comp/middle/capture.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Fcomp%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Fcomp%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcapture.rs?ref=cca6335c26ce3ddacafd3e6079dc56c842856c3c", "patch": "@@ -0,0 +1,118 @@\n+import driver.session;\n+import front.ast;\n+import std.map.hashmap;\n+import std.option;\n+import std.option.some;\n+import std.option.none;\n+import std._int;\n+import util.common;\n+\n+type fn_id_of_local = std.map.hashmap[ast.def_id, ast.def_id];\n+type env = rec(option.t[ast.def_id] current_context, // fn or obj\n+               fn_id_of_local idmap,\n+               session.session sess);\n+\n+fn update_env_for_item(&env e, @ast.item i) -> env {\n+    alt (i.node) {\n+        case (ast.item_fn(?name, _, _, ?id, _)) {\n+            ret rec(current_context = some(id) with e);\n+        }\n+        case (ast.item_obj(_, _, _, ?ids, _)) {\n+            ret rec(current_context = some(ids.ty) with e);\n+        }\n+        case (_) {\n+            ret e;\n+        }\n+    }\n+}\n+\n+fn update_env_for_expr(&env e, @ast.expr x) -> env {\n+    alt (x.node) {\n+        case (ast.expr_for(?d, _, _, _)) {\n+            alt (d.node) {\n+                case (ast.decl_local(?local)) {\n+                    auto curr_context =\n+                        option.get[ast.def_id](e.current_context);\n+                    e.idmap.insert(local.id, curr_context);\n+                }\n+                case (_) {\n+                }\n+            }\n+        }\n+        case (ast.expr_for_each(?d, _, _, _)) {\n+            alt (d.node) {\n+                case (ast.decl_local(?local)) {\n+                    auto curr_context =\n+                        option.get[ast.def_id](e.current_context);\n+                    e.idmap.insert(local.id, curr_context);\n+                }\n+                case (_) {\n+                }\n+            }\n+        }\n+        case (_) { }\n+    }\n+    ret e;\n+}\n+\n+fn update_env_for_block(&env e, &ast.block b) -> env {\n+    auto curr_context = option.get[ast.def_id](e.current_context);\n+\n+    for each (@tup(ast.ident, ast.block_index_entry) it in\n+              b.node.index.items()) {\n+        alt (it._1) {\n+            case (ast.bie_local(?local)) {\n+                e.idmap.insert(local.id, curr_context);\n+            }\n+            case (_) {\n+            }\n+        }\n+    }\n+\n+    ret e;\n+}\n+\n+fn fold_expr_path(&env e, &ast.span sp, &ast.path p, &option.t[ast.def] d,\n+                  ast.ann a) -> @ast.expr {\n+    auto local_id;\n+    alt (option.get[ast.def](d)) {\n+        case (ast.def_local(?id)) {\n+            local_id = id;\n+        }\n+        case (_) {\n+            ret @fold.respan[ast.expr_](sp, ast.expr_path(p, d, a));\n+        }\n+    }\n+\n+    auto curr_context = option.get[ast.def_id](e.current_context);\n+    auto x = ast.def_id_of_def(option.get[ast.def](d));\n+    auto def_context = option.get[ast.def_id](e.idmap.find(x));\n+\n+    if (curr_context != def_context) {\n+        e.sess.span_err(sp, \"attempted dynamic environment-capture\");\n+    }\n+\n+    ret @fold.respan[ast.expr_](sp, ast.expr_path(p, d, a));\n+}\n+\n+fn check_for_captures(session.session sess, @ast.crate crate) {\n+    let fold.ast_fold[env] fld = fold.new_identity_fold[env]();\n+    fld = @rec( update_env_for_item = bind update_env_for_item(_,_),\n+                update_env_for_block = bind update_env_for_block(_,_),\n+                update_env_for_expr = bind update_env_for_expr(_,_),\n+                fold_expr_path = bind fold_expr_path(_,_,_,_,_)\n+                with *fld);\n+    auto idmap = common.new_def_hash[ast.def_id]();\n+    auto e = rec(current_context = none[ast.def_id], idmap = idmap,\n+                 sess = sess);\n+    fold.fold_crate[env](e, fld, crate);\n+}\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "8e57ff4d90f62573408af51932d08a7a04596d28", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=cca6335c26ce3ddacafd3e6079dc56c842856c3c", "patch": "@@ -18,6 +18,7 @@ mod middle {\n     mod fold;\n     mod metadata;\n     mod resolve;\n+    mod capture;\n     mod trans;\n     mod ty;\n     mod typeck;"}, {"sha": "fb1d82fe5a083d1cfd6d966bded1cf7a51c71775", "filename": "src/test/compile-fail/capture1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcapture1.rs?ref=cca6335c26ce3ddacafd3e6079dc56c842856c3c", "patch": "@@ -0,0 +1,12 @@\n+// -*- rust -*-\n+\n+// error-pattern: attempted dynamic environment-capture\n+\n+fn main() {\n+\n+    fn foo() -> int {\n+        ret bar;\n+    }\n+\n+    let int bar = 5;\n+}"}, {"sha": "1b088c69511bac3258532616c6ba01dc672d5859", "filename": "src/test/compile-fail/capture2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Ftest%2Fcompile-fail%2Fcapture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca6335c26ce3ddacafd3e6079dc56c842856c3c/src%2Ftest%2Fcompile-fail%2Fcapture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcapture2.rs?ref=cca6335c26ce3ddacafd3e6079dc56c842856c3c", "patch": "@@ -0,0 +1,18 @@\n+// -*- rust -*-\n+\n+// error-pattern: attempted dynamic environment-capture\n+\n+fn f(bool x) {\n+}\n+\n+state obj foobar(bool x) {\n+  drop {\n+    auto y = x;\n+    fn test() {\n+      f(y);\n+    }\n+  }\n+}\n+\n+fn main() {\n+}"}]}