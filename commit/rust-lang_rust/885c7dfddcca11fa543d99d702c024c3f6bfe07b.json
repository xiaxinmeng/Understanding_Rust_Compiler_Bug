{"sha": "885c7dfddcca11fa543d99d702c024c3f6bfe07b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NWM3ZGZkZGNjYTExZmE1NDNkOTlkNzAyYzAyNGMzZjZiZmUwN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-01T06:34:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-01T06:34:15Z"}, "message": "Auto merge of #61418 - Centril:rollup-yvj33a1, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #60729 (Expand dynamic drop tests for cases in #47949)\n - #61263 (Don't generate div inside header (h4/h3/h...) elements)\n - #61364 (Stabilize reverse_bits feature)\n - #61375 (Make \"panic did not include expected string\" message consistent)\n - #61387 (Remove ty::BrFresh and RegionConstraintCollector::new_bound)\n - #61389 (Remove GlobalArenas and use Arena instead)\n - #61391 (Doc comment fixes for `rustc::mir::interpret::InterpretCx`)\n - #61403 (Remove unnecessary `-Z continue-parse-after-error` from tests)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "09bd37a6487bd7d61487c85efb4482f1ce6c2cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09bd37a6487bd7d61487c85efb4482f1ce6c2cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/885c7dfddcca11fa543d99d702c024c3f6bfe07b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/885c7dfddcca11fa543d99d702c024c3f6bfe07b", "html_url": "https://github.com/rust-lang/rust/commit/885c7dfddcca11fa543d99d702c024c3f6bfe07b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/885c7dfddcca11fa543d99d702c024c3f6bfe07b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b40a188cee5bef97526dfc271afbd2a98008183", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b40a188cee5bef97526dfc271afbd2a98008183", "html_url": "https://github.com/rust-lang/rust/commit/8b40a188cee5bef97526dfc271afbd2a98008183"}, {"sha": "23de37657220821cd3cb1392bde22c9f7b27b65b", "url": "https://api.github.com/repos/rust-lang/rust/commits/23de37657220821cd3cb1392bde22c9f7b27b65b", "html_url": "https://github.com/rust-lang/rust/commit/23de37657220821cd3cb1392bde22c9f7b27b65b"}], "stats": {"total": 659, "additions": 295, "deletions": 364}, "files": [{"sha": "ad35204804755cb6cbcb0c29e07470a00662422f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -120,7 +120,6 @@\n #![feature(const_str_len)]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n-#![feature(reverse_bits)]\n #![feature(non_exhaustive)]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]"}, {"sha": "7145bf1fbc0ee07a8e4e4bb76bf06bea6e71d257", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -463,15 +463,12 @@ assert_eq!(m, \", $swapped, \");\n Basic usage:\n \n ```\n-#![feature(reverse_bits)]\n-\n let n = \", $swap_op, stringify!($SelfT), \";\n let m = n.reverse_bits();\n \n assert_eq!(m, \", $reversed, \");\n ```\"),\n-            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n@@ -2514,14 +2511,12 @@ assert_eq!(m, \", $swapped, \");\n Basic usage:\n \n ```\n-#![feature(reverse_bits)]\n-\n let n = \", $swap_op, stringify!($SelfT), \";\n let m = n.reverse_bits();\n \n assert_eq!(m, \", $reversed, \");\n ```\"),\n-            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {"}, {"sha": "fd129a306d1c57024d788dc72dfdeea9069616d1", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -511,7 +511,6 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// Basic usage:\n             ///\n             /// ```\n-            /// #![feature(reverse_bits)]\n             /// use std::num::Wrapping;\n             ///\n             /// let n = Wrapping(0b0000000_01010101i16);\n@@ -522,7 +521,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// assert_eq!(m.0 as u16, 0b10101010_00000000);\n             /// assert_eq!(m, Wrapping(-22016));\n             /// ```\n-            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {"}, {"sha": "5050842e409711488fd92462356593674494c40e", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -24,7 +24,6 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_trait)]\n-#![feature(reverse_bits)]\n #![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]"}, {"sha": "4a89bf3313b8ac9f0be72a33a94b7c2d7a9a1281", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -19,6 +19,14 @@ use smallvec::SmallVec;\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n+            [] layouts: rustc::ty::layout::LayoutDetails,\n+            [] generics: rustc::ty::Generics,\n+            [] trait_def: rustc::ty::TraitDef,\n+            [] adt_def: rustc::ty::AdtDef,\n+            [] steal_mir: rustc::ty::steal::Steal<rustc::mir::Body<$tcx>>,\n+            [] mir: rustc::mir::Body<$tcx>,\n+            [] tables: rustc::ty::TypeckTables<$tcx>,\n+            [] const_allocs: rustc::mir::interpret::Allocation,\n             [] vtable_method: Option<(\n                 rustc::hir::def_id::DefId,\n                 rustc::ty::subst::SubstsRef<$tcx>"}, {"sha": "563948a63514b300eb4c01a23398aa988ffb452c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -100,7 +100,6 @@ for ty::RegionKind {\n             ty::ReClosureBound(vid) => {\n                 vid.hash_stable(hcx, hasher);\n             }\n-            ty::ReLateBound(..) |\n             ty::ReVar(..) |\n             ty::RePlaceholder(..) => {\n                 bug!(\"StableHasher: unexpected region {:?}\", *self)"}, {"sha": "b1eba7d5934f91fed1f45662b46200870ac28307", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -218,10 +218,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n                     self.hir().span_by_hir_id(node),\n                 ),\n-                ty::BrFresh(_) => (\n-                    \"an anonymous lifetime defined on\".to_owned(),\n-                    self.hir().span_by_hir_id(node),\n-                ),\n                 _ => (\n                     format!(\"the lifetime {} as defined on\", region),\n                     cm.def_span(self.hir().span_by_hir_id(node)),"}, {"sha": "ca766ea724f3db02379a4a398aeccf8c3496157d", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -11,11 +11,11 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::unify as ut;\n use crate::ty::ReStatic;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::{BrFresh, ReLateBound, ReVar};\n+use crate::ty::{ReLateBound, ReVar};\n use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n-use std::{cmp, fmt, mem, u32};\n+use std::{cmp, fmt, mem};\n use std::ops::Range;\n \n mod leak_check;\n@@ -37,10 +37,6 @@ pub struct RegionConstraintCollector<'tcx> {\n     /// exist). This prevents us from making many such regions.\n     glbs: CombineMap<'tcx>,\n \n-    /// Global counter used during the GLB algorithm to create unique\n-    /// names for fresh bound regions\n-    bound_count: u32,\n-\n     /// The undo log records actions that might later be undone.\n     ///\n     /// Note: `num_open_snapshots` is used to track if we are actively\n@@ -392,7 +388,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data,\n             lubs,\n             glbs,\n-            bound_count: _,\n             undo_log: _,\n             num_open_snapshots: _,\n             unification_table,\n@@ -579,39 +574,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn new_bound(\n-        &mut self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        debruijn: ty::DebruijnIndex,\n-    ) -> Region<'tcx> {\n-        // Creates a fresh bound variable for use in GLB computations.\n-        // See discussion of GLB computation in the large comment at\n-        // the top of this file for more details.\n-        //\n-        // This computation is potentially wrong in the face of\n-        // rollover.  It's conceivable, if unlikely, that one might\n-        // wind up with accidental capture for nested functions in\n-        // that case, if the outer function had bound regions created\n-        // a very long time before and the inner function somehow\n-        // wound up rolling over such that supposedly fresh\n-        // identifiers were in fact shadowed. For now, we just assert\n-        // that there is no rollover -- eventually we should try to be\n-        // robust against this possibility, either by checking the set\n-        // of bound identifiers that appear in a given expression and\n-        // ensure that we generate one that is distinct, or by\n-        // changing the representation of bound regions in a fn\n-        // declaration\n-\n-        let sc = self.bound_count;\n-        self.bound_count = sc + 1;\n-\n-        if sc >= self.bound_count {\n-            bug!(\"rollover in RegionInference new_bound()\");\n-        }\n-\n-        tcx.mk_region(ReLateBound(debruijn, BrFresh(sc)))\n-    }\n-\n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n         debug!("}, {"sha": "b8621c8ad30e2b65e22c5be1d8f5ce7c8fbbffc8", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -42,7 +42,7 @@ rustc_queries! {\n             load_cached(tcx, id) {\n                 let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n                                                         .try_load_query_result(tcx, id);\n-                generics.map(|x| tcx.alloc_generics(x))\n+                generics.map(|x| &*tcx.arena.alloc(x))\n             }\n         }\n \n@@ -118,7 +118,7 @@ rustc_queries! {\n             load_cached(tcx, id) {\n                 let mir: Option<crate::mir::Body<'tcx>> = tcx.queries.on_disk_cache\n                                                             .try_load_query_result(tcx, id);\n-                mir.map(|x| tcx.alloc_mir(x))\n+                mir.map(|x| &*tcx.arena.alloc(x))\n             }\n         }\n     }\n@@ -353,7 +353,7 @@ rustc_queries! {\n                     .queries.on_disk_cache\n                     .try_load_query_result(tcx, id);\n \n-                typeck_tables.map(|tables| tcx.alloc_tables(tables))\n+                typeck_tables.map(|tables| &*tcx.arena.alloc(tables))\n             }\n         }\n     }"}, {"sha": "b4823db9920543bfbee5958249f9ed54d9fa757d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -53,7 +53,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableHasher, StableHasherResult,\n                                            StableVec};\n-use arena::{TypedArena, SyncDroplessArena};\n+use arena::SyncDroplessArena;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::{Lrc, Lock, WorkerLocal};\n use std::any::Any;\n@@ -79,37 +79,18 @@ use syntax_pos::Span;\n \n use crate::hir;\n \n-pub struct AllArenas<'tcx> {\n-    pub global: WorkerLocal<GlobalArenas<'tcx>>,\n+pub struct AllArenas {\n     pub interner: SyncDroplessArena,\n }\n \n-impl<'tcx> AllArenas<'tcx> {\n+impl AllArenas {\n     pub fn new() -> Self {\n         AllArenas {\n-            global: WorkerLocal::new(|_| GlobalArenas::default()),\n             interner: SyncDroplessArena::default(),\n         }\n     }\n }\n \n-/// Internal storage\n-#[derive(Default)]\n-pub struct GlobalArenas<'tcx> {\n-    // internings\n-    layout: TypedArena<LayoutDetails>,\n-\n-    // references\n-    generics: TypedArena<ty::Generics>,\n-    trait_def: TypedArena<ty::TraitDef>,\n-    adt_def: TypedArena<ty::AdtDef>,\n-    steal_mir: TypedArena<Steal<Body<'tcx>>>,\n-    mir: TypedArena<Body<'tcx>>,\n-    tables: TypedArena<ty::TypeckTables<'tcx>>,\n-    /// miri allocations\n-    const_allocs: TypedArena<interpret::Allocation>,\n-}\n-\n type InternedSet<'tcx, T> = Lock<FxHashMap<Interned<'tcx, T>, ()>>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1043,7 +1024,7 @@ impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n \n pub struct GlobalCtxt<'tcx> {\n     pub arena: WorkerLocal<Arena<'tcx>>,\n-    global_arenas: &'tcx WorkerLocal<GlobalArenas<'tcx>>,\n+\n     global_interners: CtxtInterners<'tcx>,\n \n     cstore: &'tcx CrateStoreDyn,\n@@ -1150,24 +1131,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         &self.hir_map\n     }\n \n-    pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n-        self.global_arenas.generics.alloc(generics)\n-    }\n-\n     pub fn alloc_steal_mir(self, mir: Body<'gcx>) -> &'gcx Steal<Body<'gcx>> {\n-        self.global_arenas.steal_mir.alloc(Steal::new(mir))\n-    }\n-\n-    pub fn alloc_mir(self, mir: Body<'gcx>) -> &'gcx Body<'gcx> {\n-        self.global_arenas.mir.alloc(mir)\n-    }\n-\n-    pub fn alloc_tables(self, tables: ty::TypeckTables<'gcx>) -> &'gcx ty::TypeckTables<'gcx> {\n-        self.global_arenas.tables.alloc(tables)\n-    }\n-\n-    pub fn alloc_trait_def(self, def: ty::TraitDef) -> &'gcx ty::TraitDef {\n-        self.global_arenas.trait_def.alloc(def)\n+        self.arena.alloc(Steal::new(mir))\n     }\n \n     pub fn alloc_adt_def(self,\n@@ -1177,12 +1142,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                          repr: ReprOptions)\n                          -> &'gcx ty::AdtDef {\n         let def = ty::AdtDef::new(self, did, kind, variants, repr);\n-        self.global_arenas.adt_def.alloc(def)\n+        self.arena.alloc(def)\n     }\n \n     pub fn intern_const_alloc(self, alloc: Allocation) -> &'gcx Allocation {\n         self.allocation_interner.borrow_mut().intern(alloc, |alloc| {\n-            self.global_arenas.const_allocs.alloc(alloc)\n+            self.arena.alloc(alloc)\n         })\n     }\n \n@@ -1196,13 +1161,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn intern_stability(self, stab: attr::Stability) -> &'gcx attr::Stability {\n         self.stability_interner.borrow_mut().intern(stab, |stab| {\n-            self.global_interners.arena.alloc(stab)\n+            self.arena.alloc(stab)\n         })\n     }\n \n     pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n         self.layout_interner.borrow_mut().intern(layout, |layout| {\n-            self.global_arenas.layout.alloc(layout)\n+            self.arena.alloc(layout)\n         })\n     }\n \n@@ -1250,7 +1215,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         cstore: &'tcx CrateStoreDyn,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n-        arenas: &'tcx AllArenas<'tcx>,\n+        arenas: &'tcx AllArenas,\n         resolutions: ty::Resolutions,\n         hir: hir_map::Map<'tcx>,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n@@ -1319,7 +1284,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             sess: s,\n             cstore,\n             arena: WorkerLocal::new(|_| Arena::default()),\n-            global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph,\n             common,"}, {"sha": "094e1d05aeb77cc7df48015ecaa37b93f9e35004", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -75,7 +75,7 @@ pub use self::sty::TyKind::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, keep_local};\n+pub use self::context::{TyCtxt, FreeRegionInfo, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables, CtxtInterners, GlobalCtxt};\n pub use self::context::{\n     UserTypeAnnotationIndex, UserType, CanonicalUserType,"}, {"sha": "300ea9bb49785177baf8a763cd64aa5e23b0cb4c", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1441,7 +1441,6 @@ impl<F: fmt::Write> FmtPrinter<'_, 'gcx, 'tcx, F> {\n                     br\n                 }\n                 ty::BrAnon(_) |\n-                ty::BrFresh(_) |\n                 ty::BrEnv => {\n                     let name = loop {\n                         let name = name_by_region_index(region_index);"}, {"sha": "56d47a7f849cf6eec7c8888087bb29abb881ee67", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -94,7 +94,6 @@ impl fmt::Debug for ty::BoundRegion {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n-            ty::BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n             ty::BrNamed(did, name) => {\n                 write!(f, \"BrNamed({:?}:{:?}, {})\",\n                         did.krate, did.index, name)"}, {"sha": "ddc4bd3f9f6c3c057cd918147a6eef1937be875e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -56,9 +56,6 @@ pub enum BoundRegion {\n     /// the event of shadowing.\n     BrNamed(DefId, InternedString),\n \n-    /// Fresh bound identifiers created during GLB computations.\n-    BrFresh(u32),\n-\n     /// Anonymous region for the implicit env pointer parameter\n     /// to a closure\n     BrEnv,"}, {"sha": "db452bb4ac7bcbad232534fa8141fff760a1df96", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -94,15 +94,15 @@ impl IntoArgs for (CrateNum, DefId) {\n provide! { <'tcx> tcx, def_id, other, cdata,\n     type_of => { cdata.get_type(def_id.index, tcx) }\n     generics_of => {\n-        tcx.alloc_generics(cdata.get_generics(def_id.index, tcx.sess))\n+        tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n     }\n     predicates_of => { tcx.arena.alloc(cdata.get_predicates(def_id.index, tcx)) }\n     predicates_defined_on => {\n         tcx.arena.alloc(cdata.get_predicates_defined_on(def_id.index, tcx))\n     }\n     super_predicates_of => { tcx.arena.alloc(cdata.get_super_predicates(def_id.index, tcx)) }\n     trait_def => {\n-        tcx.alloc_trait_def(cdata.get_trait_def(def_id.index, tcx.sess))\n+        tcx.arena.alloc(cdata.get_trait_def(def_id.index, tcx.sess))\n     }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n@@ -129,7 +129,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"get_optimized_mir: missing MIR for `{:?}`\", def_id)\n         });\n \n-        let mir = tcx.alloc_mir(mir);\n+        let mir = tcx.arena.alloc(mir);\n \n         mir\n     }"}, {"sha": "0d452c99ea16853776aa04db9b3b9e42ebd16ca2", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegion::BrAnon(_) | ty::BoundRegion::BrFresh(_) => None,\n+                ty::BoundRegion::BrAnon(_) => None,\n             },\n \n             ty::ReLateBound(..)"}, {"sha": "628e7b02bdf9cbd4a3515c4d4c6f63cb68bc0cf8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -243,7 +243,7 @@ pub(super) fn from_known_layout<'tcx>(\n }\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M> {\n-    /// Try reading an immediate in memory; this is interesting particularly for ScalarPair.\n+    /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.\n     /// Returns `None` if the layout does not permit loading this as a value.\n     fn try_read_immediate_from_mplace(\n         &self,\n@@ -444,7 +444,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         Ok(OpTy { op, layout })\n     }\n \n-    /// Every place can be read from, so we can turm them into an operand\n+    /// Every place can be read from, so we can turn them into an operand\n     #[inline(always)]\n     pub fn place_to_op(\n         &self,\n@@ -500,7 +500,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     }\n \n     /// Evaluate the operand, returning a place where you can then find the data.\n-    /// if you already know the layout, you can save two some table lookups\n+    /// If you already know the layout, you can save two table lookups\n     /// by passing it in here.\n     pub fn eval_operand(\n         &self,"}, {"sha": "36e6d44b0c40a8c0326f615756a2dd6f8a0908bb", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -346,8 +346,8 @@ where\n         Ok(place)\n     }\n \n-    /// Offset a pointer to project to a field. Unlike place_field, this is always\n-    /// possible without allocating, so it can take &self. Also return the field's layout.\n+    /// Offset a pointer to project to a field. Unlike `place_field`, this is always\n+    /// possible without allocating, so it can take `&self`. Also return the field's layout.\n     /// This supports both struct and array fields.\n     #[inline(always)]\n     pub fn mplace_field(\n@@ -722,7 +722,7 @@ where\n     }\n \n     /// Write an immediate to memory.\n-    /// If you use this you are responsible for validating that things git copied at the\n+    /// If you use this you are responsible for validating that things got copied at the\n     /// right type.\n     fn write_immediate_to_mplace_no_validate(\n         &mut self,\n@@ -805,7 +805,7 @@ where\n \n     /// Copies the data from an operand to a place. This does not support transmuting!\n     /// Use `copy_op_transmute` if the layouts could disagree.\n-    /// Also, if you use this you are responsible for validating that things git copied at the\n+    /// Also, if you use this you are responsible for validating that things get copied at the\n     /// right type.\n     fn copy_op_no_validate(\n         &mut self,"}, {"sha": "851d32203db610e1a2bc5571a6e57a141e6b5fd7", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -613,7 +613,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     /// is an indirect operand.\n     /// It will error if the bits at the destination do not match the ones described by the layout.\n     ///\n-    /// `ref_tracking` can be None to avoid recursive checking below references.\n+    /// `ref_tracking` can be `None` to avoid recursive checking below references.\n     /// This also toggles between \"run-time\" (no recursion) and \"compile-time\" (with recursion)\n     /// validation (e.g., pointer values are fine in integers at runtime).\n     pub fn validate_operand("}, {"sha": "6dc2b007407062d70ca6aa7b029198a7a3342bf5", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -22,7 +22,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(unicode_internals)]\n #![feature(step_trait)]\n #![feature(slice_concat_ext)]\n-#![feature(reverse_bits)]\n #![feature(try_blocks)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "0cefc8c3a92ab2ac3703033f11f865fb0805f0bf", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -125,7 +125,7 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n-    tcx.alloc_mir(result)\n+    tcx.arena.alloc(result)\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]"}, {"sha": "82193d98655d6a79b19d73bcf9af49654a434a63", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -290,5 +290,5 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         &add_call_guards::CriticalCallEdges,\n         &dump_mir::Marker(\"PreCodegen\"),\n     ]);\n-    tcx.alloc_mir(mir)\n+    tcx.arena.alloc(mir)\n }"}, {"sha": "cc054adee7bea80ebe5b72923b5357f755f78027", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -2049,7 +2049,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         for br in late_bound_in_ret.difference(&late_bound_in_args) {\n             let lifetime_name = match *br {\n                 ty::BrNamed(_, name) => format!(\"lifetime `{}`,\", name),\n-                ty::BrAnon(_) | ty::BrFresh(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n+                ty::BrAnon(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n             };\n             let mut err = struct_span_err!(tcx.sess,\n                                            decl.output.span(),"}, {"sha": "9e60bff200e14a189f399b0b46d2d52bcbc76cda", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             item_def_id, wbcx.tables\n         );\n \n-        self.tcx.alloc_tables(wbcx.tables)\n+        self.tcx.arena.alloc(wbcx.tables)\n     }\n }\n "}, {"sha": "c516fbc3bb940ad44460bc716da7e04cf5588e7c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -763,7 +763,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::\n     let is_marker = tcx.has_attr(def_id, sym::marker);\n     let def_path_hash = tcx.def_path_hash(def_id);\n     let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, def_path_hash);\n-    tcx.alloc_trait_def(def)\n+    tcx.arena.alloc(def)\n }\n \n fn has_late_bound_regions<'a, 'tcx>(\n@@ -1110,7 +1110,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n         .map(|param| (param.def_id, param.index))\n         .collect();\n \n-    tcx.alloc_generics(ty::Generics {\n+    tcx.arena.alloc(ty::Generics {\n         parent: parent_def_id,\n         parent_count,\n         params,"}, {"sha": "3555e2e7498b8c1ead3c20043b21d143f6c61cc0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -3804,7 +3804,7 @@ fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item, top: bool) -> fmt\n         }\n     }\n     if attrs.len() > 0 {\n-        write!(w, \"<div class=\\\"docblock attributes{}\\\">{}</div>\",\n+        write!(w, \"<span class=\\\"docblock attributes{}\\\">{}</span>\",\n                if top { \" top-attr\" } else { \"\" }, &attrs)?;\n     }\n     Ok(())"}, {"sha": "bf6eab4ec914852f51989d9b08aec975eca65db0", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -111,7 +111,7 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n }\n \n /// Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.\n-#[derive(RustcEncodable, RustcDecodable, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n@@ -127,7 +127,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: u32 },\n@@ -151,7 +151,7 @@ impl StabilityLevel {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,"}, {"sha": "810a98e4a014cb4f54fbfefc28352286cce9f131", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1536,7 +1536,7 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<dyn Any + Send>>) ->\n                 if desc.allow_fail {\n                     TrAllowedFail\n                 } else {\n-                    TrFailedMsg(format!(\"Panic did not include expected string '{}'\", msg))\n+                    TrFailedMsg(format!(\"panic did not include expected string '{}'\", msg))\n                 }\n             }\n         }\n@@ -1890,7 +1890,7 @@ mod tests {\n             panic!(\"an error message\");\n         }\n         let expected = \"foobar\";\n-        let failed_msg = \"Panic did not include expected string\";\n+        let failed_msg = \"panic did not include expected string\";\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),"}, {"sha": "3d3240d434292933365912ac5d50a6fe6857e27e", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_int_conversion, reverse_bits)]\n+#![feature(const_int_conversion)]\n \n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);"}, {"sha": "eb1a3f3a9f9cbed7f587c9a1dcfc41f726acf78f", "filename": "src/test/run-pass/drop/dynamic-drop.rs", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -41,7 +41,7 @@ impl Allocator {\n             data: RefCell::new(vec![])\n         }\n     }\n-    fn alloc(&self) -> Ptr {\n+    fn alloc(&self) -> Ptr<'_> {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n@@ -53,6 +53,20 @@ impl Allocator {\n         data.push(true);\n         Ptr(addr, self)\n     }\n+    // FIXME(#47949) Any use of this indicates a bug in rustc: we should never\n+    // be leaking values in the cases here.\n+    //\n+    // Creates a `Ptr<'_>` and checks that the allocated value is leaked if the\n+    // `failing_op` is in the list of exception.\n+    fn alloc_leaked(&self, exceptions: Vec<usize>) -> Ptr<'_> {\n+        let ptr = self.alloc();\n+\n+        if exceptions.iter().any(|operation| *operation == self.failing_op) {\n+            let mut data = self.data.borrow_mut();\n+            data[ptr.0] = false;\n+        }\n+        ptr\n+    }\n }\n \n struct Ptr<'a>(usize, &'a Allocator);\n@@ -255,6 +269,72 @@ fn subslice_pattern_reassign(a: &Allocator) {\n     let[_, _y..] = ar;\n }\n \n+fn panic_after_return(a: &Allocator) -> Ptr<'_> {\n+    // Panic in the drop of `p` or `q` can leak\n+    let exceptions = vec![8, 9];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let p = a.alloc();\n+        // FIXME (#47949) We leak values when we panic in a destructor after\n+        // evaluating an expression with `rustc_mir::build::Builder::into`.\n+        a.alloc_leaked(exceptions)\n+    }\n+}\n+\n+fn panic_after_return_expr(a: &Allocator) -> Ptr<'_> {\n+    // Panic in the drop of `p` or `q` can leak\n+    let exceptions = vec![8, 9];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let q = a.alloc();\n+        // FIXME (#47949)\n+        return a.alloc_leaked(exceptions);\n+    }\n+}\n+\n+fn panic_after_init(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    let q = {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        a.alloc_leaked(exceptions)\n+    };\n+}\n+\n+fn panic_after_init_temp(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        a.alloc_leaked(exceptions)\n+    };\n+}\n+\n+fn panic_after_init_by_loop(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    let q = loop {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        break a.alloc_leaked(exceptions);\n+    };\n+}\n+\n fn run_test<F>(mut f: F)\n     where F: FnMut(&Allocator)\n {\n@@ -342,5 +422,15 @@ fn main() {\n     run_test(|a| slice_pattern_reassign(a));\n     run_test(|a| subslice_pattern_reassign(a));\n \n+    run_test(|a| {\n+        panic_after_return(a);\n+    });\n+    run_test(|a| {\n+        panic_after_return_expr(a);\n+    });\n+    run_test(|a| panic_after_init(a));\n+    run_test(|a| panic_after_init_temp(a));\n+    run_test(|a| panic_after_init_by_loop(a));\n+\n     run_test_nopanic(|a| union1(a));\n }"}, {"sha": "a6ee046edec8b03d173b223ceb38ff9f94e41877", "filename": "src/test/rustdoc/trait-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -3,7 +3,7 @@\n // ignore-tidy-linelength\n \n pub trait Foo {\n-    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//div[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n     #[must_use]\n     fn foo();\n }\n@@ -12,11 +12,11 @@ pub trait Foo {\n pub struct Bar;\n \n impl Bar {\n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//div[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar() {}\n \n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//div[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar2() {}\n }"}, {"sha": "b80e616eae77e453a07d35ec79e512cbd7885593", "filename": "src/test/ui/consts/const-int-conversion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(reverse_bits)]\n-\n fn main() {\n     let x: &'static i32 = &(5_i32.reverse_bits());\n         //~^ ERROR temporary value dropped while borrowed"}, {"sha": "237f9627219bd52ac517df131822ab5a17562f3a", "filename": "src/test/ui/consts/const-int-conversion.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:4:28\n+  --> $DIR/const-int-conversion.rs:2:28\n    |\n LL |     let x: &'static i32 = &(5_i32.reverse_bits());\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -10,7 +10,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:6:28\n+  --> $DIR/const-int-conversion.rs:4:28\n    |\n LL |     let y: &'static i32 = &(i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -21,7 +21,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:8:28\n+  --> $DIR/const-int-conversion.rs:6:28\n    |\n LL |     let z: &'static i32 = &(i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -32,7 +32,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:10:28\n+  --> $DIR/const-int-conversion.rs:8:28\n    |\n LL |     let a: &'static i32 = &(i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0])));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -43,7 +43,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:12:29\n+  --> $DIR/const-int-conversion.rs:10:29\n    |\n LL |     let b: &'static [u8] = &(0x12_34_56_78_i32.to_be_bytes());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -54,7 +54,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:14:29\n+  --> $DIR/const-int-conversion.rs:12:29\n    |\n LL |     let c: &'static [u8] = &(0x12_34_56_78_i32.to_le_bytes());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -65,7 +65,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/const-int-conversion.rs:16:29\n+  --> $DIR/const-int-conversion.rs:14:29\n    |\n LL |     let d: &'static [u8] = &(i32::min_value().to_be().to_ne_bytes());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "0eec9fb3ee647c3143b0c7bc4d8e695f48c07fcd", "filename": "src/test/ui/extern/extern-const.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -6,7 +6,7 @@\n \n // run-rustfix\n // ignore-wasm32 no external library to link to.\n-// compile-flags: -g -Z continue-parse-after-error\n+// compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;\n "}, {"sha": "ca5d7ddf27e3ab9a1f84e5bc9edd1795a4f6ccf4", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -6,7 +6,7 @@\n \n // run-rustfix\n // ignore-wasm32 no external library to link to.\n-// compile-flags: -g -Z continue-parse-after-error\n+// compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;\n "}, {"sha": "69fed2cb69ad8898a240b80f59f9cb05f7616d02", "filename": "src/test/ui/fmt/format-string-error-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n // ignore-tidy-tab\n \n fn main() {"}, {"sha": "d202044a2bb9726e1c7d682ac8478fa0fefa2462", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,13 +1,13 @@\n error: incorrect unicode escape sequence\n-  --> $DIR/format-string-error-2.rs:78:20\n+  --> $DIR/format-string-error-2.rs:77:20\n    |\n LL |     println!(\"\\x7B}\\u8 {\", 1);\n    |                    ^^-\n    |                      |\n    |                      help: format of unicode escape sequences uses braces: `\\u{8}`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:6:5\n+  --> $DIR/format-string-error-2.rs:5:5\n    |\n LL |     format!(\"{\n    |              - because of this opening brace\n@@ -17,7 +17,7 @@ LL |     a\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'b'`\n-  --> $DIR/format-string-error-2.rs:10:5\n+  --> $DIR/format-string-error-2.rs:9:5\n    |\n LL |     format!(\"{ \\\n    |              - because of this opening brace\n@@ -28,7 +28,7 @@ LL |     b\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:12:18\n+  --> $DIR/format-string-error-2.rs:11:18\n    |\n LL |     format!(r#\"{ \\\n    |                - ^ expected `}` in format string\n@@ -38,7 +38,7 @@ LL |     format!(r#\"{ \\\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:16:18\n+  --> $DIR/format-string-error-2.rs:15:18\n    |\n LL |     format!(r#\"{ \\n\n    |                - ^ expected `}` in format string\n@@ -48,7 +48,7 @@ LL |     format!(r#\"{ \\n\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'e'`\n-  --> $DIR/format-string-error-2.rs:22:5\n+  --> $DIR/format-string-error-2.rs:21:5\n    |\n LL |     format!(\"{ \\n\n    |              - because of this opening brace\n@@ -59,7 +59,7 @@ LL |     e\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:26:5\n+  --> $DIR/format-string-error-2.rs:25:5\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -69,7 +69,7 @@ LL |     a\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:30:5\n+  --> $DIR/format-string-error-2.rs:29:5\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -79,7 +79,7 @@ LL |     a\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'b'`\n-  --> $DIR/format-string-error-2.rs:36:5\n+  --> $DIR/format-string-error-2.rs:35:5\n    |\n LL |     { \\\n    |     - because of this opening brace\n@@ -90,7 +90,7 @@ LL |     b\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'b'`\n-  --> $DIR/format-string-error-2.rs:41:5\n+  --> $DIR/format-string-error-2.rs:40:5\n    |\n LL |     { \\\n    |     - because of this opening brace\n@@ -101,7 +101,7 @@ LL |     b \\\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:46:8\n+  --> $DIR/format-string-error-2.rs:45:8\n    |\n LL | raw  { \\\n    |      - ^ expected `}` in format string\n@@ -111,7 +111,7 @@ LL | raw  { \\\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error-2.rs:51:8\n+  --> $DIR/format-string-error-2.rs:50:8\n    |\n LL | raw  { \\n\n    |      - ^ expected `}` in format string\n@@ -121,7 +121,7 @@ LL | raw  { \\n\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'e'`\n-  --> $DIR/format-string-error-2.rs:58:5\n+  --> $DIR/format-string-error-2.rs:57:5\n    |\n LL |   { \\n\n    |   - because of this opening brace\n@@ -132,7 +132,7 @@ LL |     e\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'`, found `'a'`\n-  --> $DIR/format-string-error-2.rs:68:5\n+  --> $DIR/format-string-error-2.rs:67:5\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -142,13 +142,13 @@ LL |     asdf}\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/format-string-error-2.rs:71:17\n+  --> $DIR/format-string-error-2.rs:70:17\n    |\n LL |     println!(\"\\t{}\");\n    |                 ^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error-2.rs:75:27\n+  --> $DIR/format-string-error-2.rs:74:27\n    |\n LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    |                          -^ expected `'}'` in format string\n@@ -158,15 +158,15 @@ LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error-2.rs:82:21\n+  --> $DIR/format-string-error-2.rs:81:21\n    |\n LL |     println!(r#\"\\x7B}\\u{8} {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error-2.rs:85:21\n+  --> $DIR/format-string-error-2.rs:84:21\n    |\n LL |     println!(r#\"\\x7B}\\u8 {\"#, 1);\n    |                     ^ unmatched `}` in format string"}, {"sha": "dfac9c0f1ef86e3265aead23c37623a93e42c9f8", "filename": "src/test/ui/impl-trait/impl-trait-plus-priority.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n+// compile-flags: -Z parse-only\n \n fn f() -> impl A + {} // OK\n fn f() -> impl A + B {} // OK"}, {"sha": "8d05c32d5de91d20ca2ff62ed5c3111759f23020", "filename": "src/test/ui/issues/issue-28433.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28433.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n enum Bird {\n     pub Duck,\n     //~^ ERROR unnecessary visibility qualifier"}, {"sha": "851bc5dfbdd9e20ebd4df7287d91b328fc91ae31", "filename": "src/test/ui/issues/issue-28433.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary visibility qualifier\n-  --> $DIR/issue-28433.rs:4:5\n+  --> $DIR/issue-28433.rs:2:5\n    |\n LL |     pub Duck,\n    |     ^^^ `pub` not permitted here\n \n error: unnecessary visibility qualifier\n-  --> $DIR/issue-28433.rs:7:5\n+  --> $DIR/issue-28433.rs:5:5\n    |\n LL |     pub(crate) Dove\n    |     ^^^^^^^^^^ `pub` not permitted here"}, {"sha": "2e64853697a1bd450b9b6ab6ab3a2a55cdeed84c", "filename": "src/test/ui/issues/issue-36638.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Foo<Self>(Self);\n //~^ ERROR expected identifier, found keyword `Self`\n //~^^ ERROR E0392"}, {"sha": "f3f94198465d878463b34a40e3af4cec4b7de64f", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,17 +1,17 @@\n error: expected identifier, found keyword `Self`\n-  --> $DIR/issue-36638.rs:3:12\n+  --> $DIR/issue-36638.rs:1:12\n    |\n LL | struct Foo<Self>(Self);\n    |            ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/issue-36638.rs:7:11\n+  --> $DIR/issue-36638.rs:5:11\n    |\n LL | trait Bar<Self> {}\n    |           ^^^^ expected identifier, found keyword\n \n error[E0392]: parameter `Self` is never used\n-  --> $DIR/issue-36638.rs:3:12\n+  --> $DIR/issue-36638.rs:1:12\n    |\n LL | struct Foo<Self>(Self);\n    |            ^^^^ unused parameter"}, {"sha": "b238a9ca22674a70820117fc93e593326a57b601", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test you can't use a higher-ranked trait bound inside of a qualified\n // path (just won't parse).\n "}, {"sha": "ada0f268a8d6bd0e79b48a48b85dba5b9af080c0", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `for`\n-  --> $DIR/associated-types-project-from-hrtb-explicit.rs:12:21\n+  --> $DIR/associated-types-project-from-hrtb-explicit.rs:10:21\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n    |                     ^^^ expected identifier, found keyword\n@@ -9,7 +9,7 @@ LL | fn foo2<I>(x: <I as r#for<'x> Foo<&'x isize>>::A)\n    |                     ^^^^^\n \n error: expected one of `::` or `>`, found `Foo`\n-  --> $DIR/associated-types-project-from-hrtb-explicit.rs:12:29\n+  --> $DIR/associated-types-project-from-hrtb-explicit.rs:10:29\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n    |                             ^^^ expected one of `::` or `>` here"}, {"sha": "9f301db09956e87cc2c1257a38a5b7c385a4ea29", "filename": "src/test/ui/parser/bad-lit-suffixes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-\n extern\n     \"C\"suffix //~ ERROR suffixes on an ABI spec are invalid\n     fn foo() {}"}, {"sha": "208fcf43d917726860f7d77ee81ba5ac8395ce2e", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,109 +1,109 @@\n error: suffixes on an ABI spec are invalid\n-  --> $DIR/bad-lit-suffixes.rs:5:5\n+  --> $DIR/bad-lit-suffixes.rs:2:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on an ABI spec are invalid\n-  --> $DIR/bad-lit-suffixes.rs:9:5\n+  --> $DIR/bad-lit-suffixes.rs:6:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:13:5\n+  --> $DIR/bad-lit-suffixes.rs:10:5\n    |\n LL |     \"\"suffix;\n    |     ^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a byte string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:14:5\n+  --> $DIR/bad-lit-suffixes.rs:11:5\n    |\n LL |     b\"\"suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:15:5\n+  --> $DIR/bad-lit-suffixes.rs:12:5\n    |\n LL |     r#\"\"#suffix;\n    |     ^^^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a byte string literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:16:5\n+  --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     br#\"\"#suffix;\n    |     ^^^^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a char literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:17:5\n+  --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     'a'suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n error: suffixes on a byte literal are invalid\n-  --> $DIR/bad-lit-suffixes.rs:18:5\n+  --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     b'a'suffix;\n    |     ^^^^^^^^^^ invalid suffix `suffix`\n \n error: invalid width `1024` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:20:5\n+  --> $DIR/bad-lit-suffixes.rs:17:5\n    |\n LL |     1234u1024;\n    |     ^^^^^^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `1024` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:21:5\n+  --> $DIR/bad-lit-suffixes.rs:18:5\n    |\n LL |     1234i1024;\n    |     ^^^^^^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `1024` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:22:5\n+  --> $DIR/bad-lit-suffixes.rs:19:5\n    |\n LL |     1234f1024;\n    |     ^^^^^^^^^\n    |\n    = help: valid widths are 32 and 64\n \n error: invalid width `1024` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:23:5\n+  --> $DIR/bad-lit-suffixes.rs:20:5\n    |\n LL |     1234.5f1024;\n    |     ^^^^^^^^^^^\n    |\n    = help: valid widths are 32 and 64\n \n error: invalid suffix `suffix` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:25:5\n+  --> $DIR/bad-lit-suffixes.rs:22:5\n    |\n LL |     1234suffix;\n    |     ^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for integer literal\n-  --> $DIR/bad-lit-suffixes.rs:26:5\n+  --> $DIR/bad-lit-suffixes.rs:23:5\n    |\n LL |     0b101suffix;\n    |     ^^^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n \n error: invalid suffix `suffix` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:27:5\n+  --> $DIR/bad-lit-suffixes.rs:24:5\n    |\n LL |     1.0suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n    |\n    = help: valid suffixes are `f32` and `f64`\n \n error: invalid suffix `suffix` for float literal\n-  --> $DIR/bad-lit-suffixes.rs:28:5\n+  --> $DIR/bad-lit-suffixes.rs:25:5\n    |\n LL |     1.0e10suffix;\n    |     ^^^^^^^^^^^^ invalid suffix `suffix`"}, {"sha": "9122cb49ebc1a47731a634b6df8f0c9ee8436511", "filename": "src/test/ui/parser/bounds-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n+// compile-flags: -Z parse-only\n \n struct S<\n     T: 'a + Tr, // OK"}, {"sha": "5b6f080360336c48dd3bb2639dc1d3d0587d7c00", "filename": "src/test/ui/parser/doc-after-struct-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct X {\n     a: u8 /** document a */,\n     //~^ ERROR found a documentation comment that doesn't document anything"}, {"sha": "e3b32a7f03543fbd10e5fbf21278c1a9aa8bd508", "filename": "src/test/ui/parser/doc-after-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-after-struct-field.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,13 +1,13 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-after-struct-field.rs:4:11\n+  --> $DIR/doc-after-struct-field.rs:2:11\n    |\n LL |     a: u8 /** document a */,\n    |           ^^^^^^^^^^^^^^^^^\n    |\n    = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n \n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-after-struct-field.rs:10:11\n+  --> $DIR/doc-after-struct-field.rs:8:11\n    |\n LL |     a: u8 /// document a\n    |           ^^^^^^^^^^^^^^"}, {"sha": "eb355136f1e66becf6ba59f985919c15f07c5c8d", "filename": "src/test/ui/parser/doc-before-fn-rbrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     /// document\n     //~^ ERROR found a documentation comment that doesn't document anything"}, {"sha": "56241de7092477680c437a26e362eb16aada8b2d", "filename": "src/test/ui/parser/doc-before-fn-rbrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-fn-rbrace.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-before-fn-rbrace.rs:4:5\n+  --> $DIR/doc-before-fn-rbrace.rs:2:5\n    |\n LL |     /// document\n    |     ^^^^^^^^^^^^"}, {"sha": "76263ad92885d9d2ce9f9451275edc124e613c95", "filename": "src/test/ui/parser/doc-before-identifier.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn /// document\n foo() {}\n //~^^ ERROR expected identifier, found doc comment `/// document`"}, {"sha": "940d293b6786ce86c7000d67ba10126691bcaf19", "filename": "src/test/ui/parser/doc-before-identifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found doc comment `/// document`\n-  --> $DIR/doc-before-identifier.rs:3:4\n+  --> $DIR/doc-before-identifier.rs:1:4\n    |\n LL | fn /// document\n    |    ^^^^^^^^^^^^ expected identifier, found doc comment"}, {"sha": "c65a0a93184c0ea5f65d8ed34df626c27fc36d96", "filename": "src/test/ui/parser/doc-before-mod-rbrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n mod Foo {\n     /// document\n     //~^ ERROR expected item after doc comment"}, {"sha": "d5749c66cd2900d67961b45487d1bf5cd6d07217", "filename": "src/test/ui/parser/doc-before-mod-rbrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected item after doc comment\n-  --> $DIR/doc-before-mod-rbrace.rs:4:5\n+  --> $DIR/doc-before-mod-rbrace.rs:2:5\n    |\n LL |     /// document\n    |     ^^^^^^^^^^^^ this doc comment doesn't document anything"}, {"sha": "3866a3105c25aea4e23eb5b1f1d068d9637f808a", "filename": "src/test/ui/parser/doc-before-struct-rbrace-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct X {\n     a: u8,\n     /// document"}, {"sha": "19f90677398ea4fb821e4ef8f727d1bcfe6b9f71", "filename": "src/test/ui/parser/doc-before-struct-rbrace-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-before-struct-rbrace-1.rs:5:5\n+  --> $DIR/doc-before-struct-rbrace-1.rs:3:5\n    |\n LL |     /// document\n    |     ^^^^^^^^^^^^"}, {"sha": "dda138f1a8835142596a9e7e72ef82f309957dec", "filename": "src/test/ui/parser/doc-before-struct-rbrace-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct X {\n     a: u8 /// document\n     //~^ ERROR found a documentation comment that doesn't document anything"}, {"sha": "b25ccab79f94a102a1413bfb59cc2c018df78a84", "filename": "src/test/ui/parser/doc-before-struct-rbrace-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-2.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/doc-before-struct-rbrace-2.rs:4:11\n+  --> $DIR/doc-before-struct-rbrace-2.rs:2:11\n    |\n LL |     a: u8 /// document\n    |           ^^^^^^^^^^^^"}, {"sha": "186a955c3135bb31c21f7f1a333d0e2c336cb1e9", "filename": "src/test/ui/parser/issue-17904-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Bar<T> { x: T } where T: Copy //~ ERROR expected item, found keyword `where`\n \n fn main() {}"}, {"sha": "9c7fdf6ccb416320aaeb7e0b428f6dbf20ce3993", "filename": "src/test/ui/parser/issue-17904-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected item, found keyword `where`\n-  --> $DIR/issue-17904-2.rs:3:24\n+  --> $DIR/issue-17904-2.rs:1:24\n    |\n LL | struct Bar<T> { x: T } where T: Copy\n    |                        ^^^^^ expected item"}, {"sha": "7d6a54f4be12e82df1c2eb2afe374484415a9de1", "filename": "src/test/ui/parser/issue-17904.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Baz<U> where U: Eq(U); //This is parsed as the new Fn* style parenthesis syntax.\n struct Baz<U> where U: Eq(U) -> R; // Notice this parses as well.\n struct Baz<U>(U) where U: Eq; // This rightfully signals no error as well."}, {"sha": "38f30099ed59cd8f3419372830dde449be9b6007", "filename": "src/test/ui/parser/issue-17904.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `:`, `==`, or `=`, found `;`\n-  --> $DIR/issue-17904.rs:6:33\n+  --> $DIR/issue-17904.rs:4:33\n    |\n LL | struct Foo<T> where T: Copy, (T);\n    |                                 ^ expected one of `:`, `==`, or `=` here"}, {"sha": "82f7ce62b9457804dc80c7c30a9c6d942ec3aaa2", "filename": "src/test/ui/parser/issue-32214.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n trait Trait<T> { type Item; }\n \n pub fn test<W, I: Trait<Item=(), W> >() {}"}, {"sha": "08b230a14f50ebc8ba6213b4fb9997548a029da4", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: associated type bindings must be declared after generic parameters\n-  --> $DIR/issue-32214.rs:5:25\n+  --> $DIR/issue-32214.rs:3:25\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                         -------^^^"}, {"sha": "f31c00e5cc3fb8f5f7cd2dbea1c5e0de77335c3e", "filename": "src/test/ui/parser/issue-32505.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32505.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n pub fn test() {\n     foo(|_|) //~ ERROR expected expression, found `)`\n }"}, {"sha": "cdd779a93ef910736fb315b6cff60bc4357ac6a4", "filename": "src/test/ui/parser/issue-32505.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fissue-32505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32505.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected expression, found `)`\n-  --> $DIR/issue-32505.rs:4:12\n+  --> $DIR/issue-32505.rs:2:12\n    |\n LL |     foo(|_|)\n    |            ^ expected expression"}, {"sha": "7df98073e35702427d6266cb7d004d780406dab8", "filename": "src/test/ui/parser/lex-bad-binary-literal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     0b121; //~ ERROR invalid digit for a base 2 literal\n     0b10_10301; //~ ERROR invalid digit for a base 2 literal"}, {"sha": "992b3d2487e5343048a77235b707b18891773ce2", "filename": "src/test/ui/parser/lex-bad-binary-literal.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-binary-literal.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,53 +1,53 @@\n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:4:8\n+  --> $DIR/lex-bad-binary-literal.rs:2:8\n    |\n LL |     0b121;\n    |        ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:5:12\n+  --> $DIR/lex-bad-binary-literal.rs:3:12\n    |\n LL |     0b10_10301;\n    |            ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:6:7\n+  --> $DIR/lex-bad-binary-literal.rs:4:7\n    |\n LL |     0b30;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:7:7\n+  --> $DIR/lex-bad-binary-literal.rs:5:7\n    |\n LL |     0b41;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:8:7\n+  --> $DIR/lex-bad-binary-literal.rs:6:7\n    |\n LL |     0b5;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:9:7\n+  --> $DIR/lex-bad-binary-literal.rs:7:7\n    |\n LL |     0b6;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:10:7\n+  --> $DIR/lex-bad-binary-literal.rs:8:7\n    |\n LL |     0b7;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:11:7\n+  --> $DIR/lex-bad-binary-literal.rs:9:7\n    |\n LL |     0b8;\n    |       ^\n \n error: invalid digit for a base 2 literal\n-  --> $DIR/lex-bad-binary-literal.rs:12:7\n+  --> $DIR/lex-bad-binary-literal.rs:10:7\n    |\n LL |     0b9;\n    |       ^"}, {"sha": "cf8440ca488ccaeeff1e75c5d2809b9bb1c851ad", "filename": "src/test/ui/parser/lex-bad-numeric-literals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     0o1.0; //~ ERROR: octal float literal is not supported\n     0o2f32; //~ ERROR: octal float literal is not supported"}, {"sha": "84e27f7366d0c18c752d38287f7046f4cac74f72", "filename": "src/test/ui/parser/lex-bad-numeric-literals.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,137 +1,137 @@\n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:4:5\n+  --> $DIR/lex-bad-numeric-literals.rs:2:5\n    |\n LL |     0o1.0;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:6:5\n+  --> $DIR/lex-bad-numeric-literals.rs:4:5\n    |\n LL |     0o3.0f32;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:7:5\n+  --> $DIR/lex-bad-numeric-literals.rs:5:5\n    |\n LL |     0o4e4;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:8:5\n+  --> $DIR/lex-bad-numeric-literals.rs:6:5\n    |\n LL |     0o5.0e5;\n    |     ^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:9:5\n+  --> $DIR/lex-bad-numeric-literals.rs:7:5\n    |\n LL |     0o6e6f32;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:10:5\n+  --> $DIR/lex-bad-numeric-literals.rs:8:5\n    |\n LL |     0o7.0e7f64;\n    |     ^^^^^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:11:5\n+  --> $DIR/lex-bad-numeric-literals.rs:9:5\n    |\n LL |     0x8.0e+9;\n    |     ^^^^^^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:12:5\n+  --> $DIR/lex-bad-numeric-literals.rs:10:5\n    |\n LL |     0x9.0e-9;\n    |     ^^^^^^^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:13:5\n+  --> $DIR/lex-bad-numeric-literals.rs:11:5\n    |\n LL |     0o;\n    |     ^^\n \n error: expected at least one digit in exponent\n-  --> $DIR/lex-bad-numeric-literals.rs:14:8\n+  --> $DIR/lex-bad-numeric-literals.rs:12:8\n    |\n LL |     1e+;\n    |        ^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:15:5\n+  --> $DIR/lex-bad-numeric-literals.rs:13:5\n    |\n LL |     0x539.0;\n    |     ^^^^^^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:20:5\n+  --> $DIR/lex-bad-numeric-literals.rs:18:5\n    |\n LL |     0x;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:21:5\n+  --> $DIR/lex-bad-numeric-literals.rs:19:5\n    |\n LL |     0xu32;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:22:5\n+  --> $DIR/lex-bad-numeric-literals.rs:20:5\n    |\n LL |     0ou32;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:23:5\n+  --> $DIR/lex-bad-numeric-literals.rs:21:5\n    |\n LL |     0bu32;\n    |     ^^\n \n error: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:24:5\n+  --> $DIR/lex-bad-numeric-literals.rs:22:5\n    |\n LL |     0b;\n    |     ^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:26:5\n+  --> $DIR/lex-bad-numeric-literals.rs:24:5\n    |\n LL |     0o123.456;\n    |     ^^^^^^^^^\n \n error: binary float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:28:5\n+  --> $DIR/lex-bad-numeric-literals.rs:26:5\n    |\n LL |     0b111.101;\n    |     ^^^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:5:5\n+  --> $DIR/lex-bad-numeric-literals.rs:3:5\n    |\n LL |     0o2f32;\n    |     ^^^^^^ not supported\n \n error: integer literal is too large\n-  --> $DIR/lex-bad-numeric-literals.rs:16:5\n+  --> $DIR/lex-bad-numeric-literals.rs:14:5\n    |\n LL |     9900000000000000000000000000999999999999999999999999999999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: integer literal is too large\n-  --> $DIR/lex-bad-numeric-literals.rs:18:5\n+  --> $DIR/lex-bad-numeric-literals.rs:16:5\n    |\n LL |     9900000000000000000000000000999999999999999999999999999999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:25:5\n+  --> $DIR/lex-bad-numeric-literals.rs:23:5\n    |\n LL |     0o123f64;\n    |     ^^^^^^^^ not supported\n \n error: binary float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:27:5\n+  --> $DIR/lex-bad-numeric-literals.rs:25:5\n    |\n LL |     0b101f64;\n    |     ^^^^^^^^ not supported"}, {"sha": "49631f16bdbd78148a1f91b8ac42c2108a9f76a7", "filename": "src/test/ui/parser/lex-bad-octal-literal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     0o18; //~ ERROR invalid digit for a base 8 literal\n     0o1234_9_5670;  //~ ERROR invalid digit for a base 8 literal"}, {"sha": "2cb8ca5ded0ad47999a38ae489bed9e582a4b95a", "filename": "src/test/ui/parser/lex-bad-octal-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-octal-literal.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,11 +1,11 @@\n error: invalid digit for a base 8 literal\n-  --> $DIR/lex-bad-octal-literal.rs:4:8\n+  --> $DIR/lex-bad-octal-literal.rs:2:8\n    |\n LL |     0o18;\n    |        ^\n \n error: invalid digit for a base 8 literal\n-  --> $DIR/lex-bad-octal-literal.rs:5:12\n+  --> $DIR/lex-bad-octal-literal.rs:3:12\n    |\n LL |     0o1234_9_5670;\n    |            ^"}, {"sha": "544e4aa7b1b09d7e13f8ddf5276de830153bc577", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n macro_rules! ignored_item {\n     () => {\n         fn foo() {}"}, {"sha": "e40919cda945f0b5b42201730e35cdd2453a5238", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: macro expansion ignores token `,` and any following\n-  --> $DIR/macro-incomplete-parse.rs:7:9\n+  --> $DIR/macro-incomplete-parse.rs:5:9\n    |\n LL |         ,\n    |         ^\n@@ -10,7 +10,7 @@ LL | ignored_item!();\n    = note: the usage of `ignored_item!` is likely invalid in item context\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n-  --> $DIR/macro-incomplete-parse.rs:12:14\n+  --> $DIR/macro-incomplete-parse.rs:10:14\n    |\n LL |     () => ( 1,\n    |              ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n@@ -19,7 +19,7 @@ LL |     ignored_expr!();\n    |     ---------------- in this macro invocation\n \n error: macro expansion ignores token `,` and any following\n-  --> $DIR/macro-incomplete-parse.rs:18:14\n+  --> $DIR/macro-incomplete-parse.rs:16:14\n    |\n LL |     () => ( 1, 2 )\n    |              ^"}, {"sha": "9ac03cedc3f3ef6818d329849cf66fc8cf7085fd", "filename": "src/test/ui/parser/new-unicode-escapes-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n pub fn main() {\n     let s = \"\\u{lol}\";\n      //~^ ERROR invalid character in unicode escape: l"}, {"sha": "a35c5f0f216588f31a5a0bd1cb55d79d85b53a59", "filename": "src/test/ui/parser/new-unicode-escapes-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: invalid character in unicode escape: l\n-  --> $DIR/new-unicode-escapes-4.rs:4:17\n+  --> $DIR/new-unicode-escapes-4.rs:2:17\n    |\n LL |     let s = \"\\u{lol}\";\n    |                 ^"}, {"sha": "d1cd8ad53114b1f763fe45163a605a7d36b3013f", "filename": "src/test/ui/parser/no-unsafe-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n trait A {\n     fn foo(*mut self); //~ ERROR cannot pass `self` by raw pointer\n     fn baz(*const self); //~ ERROR cannot pass `self` by raw pointer"}, {"sha": "23323945ee4b6c2498691f6531fba62e06c30eff", "filename": "src/test/ui/parser/no-unsafe-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,35 +1,35 @@\n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:4:17\n+  --> $DIR/no-unsafe-self.rs:2:17\n    |\n LL |     fn foo(*mut self);\n    |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:5:19\n+  --> $DIR/no-unsafe-self.rs:3:19\n    |\n LL |     fn baz(*const self);\n    |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:6:13\n+  --> $DIR/no-unsafe-self.rs:4:13\n    |\n LL |     fn bar(*self);\n    |             ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:11:17\n+  --> $DIR/no-unsafe-self.rs:9:17\n    |\n LL |     fn foo(*mut self) { }\n    |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:12:19\n+  --> $DIR/no-unsafe-self.rs:10:19\n    |\n LL |     fn baz(*const self) { }\n    |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n-  --> $DIR/no-unsafe-self.rs:13:13\n+  --> $DIR/no-unsafe-self.rs:11:13\n    |\n LL |     fn bar(*self) { }\n    |             ^^^^ cannot pass `self` by raw pointer"}, {"sha": "c3e600e771bdf0594123e20ae491e306c7fb85d4", "filename": "src/test/ui/parser/range_inclusive_dotdotdot.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Make sure that inclusive ranges with `...` syntax don't parse.\n \n use std::ops::RangeToInclusive;"}, {"sha": "f877c5c6f79de688f5e3b903c138f6ad01adc554", "filename": "src/test/ui/parser/range_inclusive_dotdotdot.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:8:12\n+  --> $DIR/range_inclusive_dotdotdot.rs:6:12\n    |\n LL |     return ...1;\n    |            ^^^\n@@ -13,7 +13,7 @@ LL |     return ..=1;\n    |            ^^^\n \n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:14:13\n+  --> $DIR/range_inclusive_dotdotdot.rs:12:13\n    |\n LL |     let x = ...0;\n    |             ^^^\n@@ -27,7 +27,7 @@ LL |     let x = ..=0;\n    |             ^^^\n \n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:18:14\n+  --> $DIR/range_inclusive_dotdotdot.rs:16:14\n    |\n LL |     let x = 5...5;\n    |              ^^^\n@@ -41,7 +41,7 @@ LL |     let x = 5..=5;\n    |              ^^^\n \n error: unexpected token: `...`\n-  --> $DIR/range_inclusive_dotdotdot.rs:22:15\n+  --> $DIR/range_inclusive_dotdotdot.rs:20:15\n    |\n LL |     for _ in 0...1 {}\n    |               ^^^"}, {"sha": "3b50fb8036ada911eab0393b8aeaa06ef8ce4851", "filename": "src/test/ui/parser/raw-byte-string-literals.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-\n pub fn main() {\n     br\"\u00e9\";  //~ ERROR raw byte string must be ASCII\n     br##~\"a\"~##;  //~ ERROR only `#` is allowed in raw string delimitation"}, {"sha": "671ed97d1b52a2e658e0eaa430d1a7c6f9ca24b1", "filename": "src/test/ui/parser/raw-byte-string-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,11 +1,11 @@\n error: raw byte string must be ASCII: \\u{e9}\n-  --> $DIR/raw-byte-string-literals.rs:5:8\n+  --> $DIR/raw-byte-string-literals.rs:2:8\n    |\n LL |     br\"\u00e9\";\n    |        ^\n \n error: found invalid character; only `#` is allowed in raw string delimitation: ~\n-  --> $DIR/raw-byte-string-literals.rs:6:6\n+  --> $DIR/raw-byte-string-literals.rs:3:6\n    |\n LL |     br##~\"a\"~##;\n    |      ^^^"}, {"sha": "331bfff84f106a778f7f68cf6bfc5aa2d345b6c0", "filename": "src/test/ui/parser/recover-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     enum Test {\n         Very"}, {"sha": "81c7ae337dbebe0c12e91256032adaaa52691634", "filename": "src/test/ui/parser/recover-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,17 +1,17 @@\n error: missing comma\n-  --> $DIR/recover-enum.rs:5:13\n+  --> $DIR/recover-enum.rs:3:13\n    |\n LL |         Very\n    |             ^ help: missing comma\n \n error: missing comma\n-  --> $DIR/recover-enum.rs:7:19\n+  --> $DIR/recover-enum.rs:5:19\n    |\n LL |         Bad(usize)\n    |                   ^ help: missing comma\n \n error: missing comma\n-  --> $DIR/recover-enum.rs:9:27\n+  --> $DIR/recover-enum.rs:7:27\n    |\n LL |         Stuff { a: usize }\n    |                           ^ help: missing comma"}, {"sha": "0c9420889553b2a17fb388180a20b669337a55b3", "filename": "src/test/ui/parser/recover-enum2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     enum Test {\n         Var1,"}, {"sha": "9ed2e6f5eb6c4e26e384bd7abc8b0ef95d35d18e", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,11 +1,11 @@\n error: expected type, found `{`\n-  --> $DIR/recover-enum2.rs:8:18\n+  --> $DIR/recover-enum2.rs:6:18\n    |\n LL |             abc: {},\n    |                  ^\n \n error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n-  --> $DIR/recover-enum2.rs:27:22\n+  --> $DIR/recover-enum2.rs:25:22\n    |\n LL |             Nope(i32 {})\n    |                      ^ expected one of 7 possible tokens here"}, {"sha": "bfa5b454c0a8b37b1c6f0e56bef757fd63f68c25", "filename": "src/test/ui/parser/recover-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-struct.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     struct Test {\n         Very"}, {"sha": "1b72184b0c8861fc3b84dfd8e011d027bc1e9f46", "filename": "src/test/ui/parser/recover-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected `:`, found `Bad`\n-  --> $DIR/recover-struct.rs:6:9\n+  --> $DIR/recover-struct.rs:4:9\n    |\n LL |         Very\n    |             - expected `:`"}, {"sha": "9fe4a148a56aa0adb1001a32c45ac9b3d4467b06", "filename": "src/test/ui/parser/removed-syntax-field-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct S {\n     let foo: (),\n     //~^  ERROR expected identifier, found keyword `let`"}, {"sha": "d6e38be4869eb3fd6502655ec2c8ce4e0f60ea60", "filename": "src/test/ui/parser/removed-syntax-field-let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `let`\n-  --> $DIR/removed-syntax-field-let.rs:4:5\n+  --> $DIR/removed-syntax-field-let.rs:2:5\n    |\n LL |     let foo: (),\n    |     ^^^ expected identifier, found keyword\n@@ -9,7 +9,7 @@ LL |     r#let foo: (),\n    |     ^^^^^\n \n error: expected `:`, found `foo`\n-  --> $DIR/removed-syntax-field-let.rs:4:9\n+  --> $DIR/removed-syntax-field-let.rs:2:9\n    |\n LL |     let foo: (),\n    |         ^^^ expected `:`"}, {"sha": "3213e068053714e8e8556d10c667a35a5311c321", "filename": "src/test/ui/parser/trailing-plus-in-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-plus-in-bounds.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,4 @@\n // compile-pass\n-// compile-flags: -Z continue-parse-after-error\n \n #![feature(box_syntax)]\n #![allow(bare_trait_objects)]"}, {"sha": "02563847ef32694e055ea88466bb3e2b0a32bd49", "filename": "src/test/ui/parser/trait-bounds-not-on-impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,11 +1,7 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-trait Foo {\n-}\n+trait Foo {}\n \n struct Bar;\n \n-impl Foo + Owned for Bar { //~ ERROR expected a trait, found type\n-}\n+impl Foo + Owned for Bar {} //~ ERROR expected a trait, found type\n \n fn main() { }"}, {"sha": "8d2d5e3d7ddd2582d05b0091dc9bb243e403af71", "filename": "src/test/ui/parser/trait-bounds-not-on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-bounds-not-on-impl.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,7 +1,7 @@\n error: expected a trait, found type\n-  --> $DIR/trait-bounds-not-on-impl.rs:8:6\n+  --> $DIR/trait-bounds-not-on-impl.rs:5:6\n    |\n-LL | impl Foo + Owned for Bar {\n+LL | impl Foo + Owned for Bar {}\n    |      ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "048e028be1ca171c7df53c4fb1c6011eef19652f", "filename": "src/test/ui/parser/trait-object-bad-parens.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n #![feature(optin_builtin_traits)]\n #![allow(bare_trait_objects)]\n "}, {"sha": "f53afdff5e7c2615e4d7e1abe75fe160fd73145a", "filename": "src/test/ui/parser/trait-object-bad-parens.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,23 +1,23 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `((Auto))`\n-  --> $DIR/trait-object-bad-parens.rs:9:16\n+  --> $DIR/trait-object-bad-parens.rs:7:16\n    |\n LL |     let _: Box<((Auto)) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto + Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:11:16\n+  --> $DIR/trait-object-bad-parens.rs:9:16\n    |\n LL |     let _: Box<(Auto + Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:13:16\n+  --> $DIR/trait-object-bad-parens.rs:11:16\n    |\n LL |     let _: Box<(Auto +) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(dyn Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:15:16\n+  --> $DIR/trait-object-bad-parens.rs:13:16\n    |\n LL |     let _: Box<(dyn Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^ expected a path"}, {"sha": "5bbda4296ca7eef4f9cf078049615d2f4ae69dfc", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n #![allow(bare_trait_objects)]\n \n trait Trait {}"}, {"sha": "a31b7aea8fee6f9d0117aece4e62e45dfa6e2462", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,23 +1,23 @@\n error: parenthesized lifetime bounds are not supported\n-  --> $DIR/trait-object-lifetime-parens.rs:7:21\n+  --> $DIR/trait-object-lifetime-parens.rs:5:21\n    |\n LL | fn f<'a, T: Trait + ('a)>() {}\n    |                     ^^^^ help: remove the parentheses\n \n error: parenthesized lifetime bounds are not supported\n-  --> $DIR/trait-object-lifetime-parens.rs:10:24\n+  --> $DIR/trait-object-lifetime-parens.rs:8:24\n    |\n LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n error: expected `:`, found `)`\n-  --> $DIR/trait-object-lifetime-parens.rs:11:19\n+  --> $DIR/trait-object-lifetime-parens.rs:9:19\n    |\n LL |     let _: Box<('a) + Trait>;\n    |                   ^ expected `:`\n \n error: chained comparison operators require parentheses\n-  --> $DIR/trait-object-lifetime-parens.rs:11:15\n+  --> $DIR/trait-object-lifetime-parens.rs:9:15\n    |\n LL |     let _: Box<('a) + Trait>;\n    |               ^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     let _: Box<('a) + Trait>;\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: expected type, found `'a`\n-  --> $DIR/trait-object-lifetime-parens.rs:11:17\n+  --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n LL |     let _: Box<('a) + Trait>;\n    |         -       ^^"}, {"sha": "b4bb484182466f34774171fde6c02d11cf59d094", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,4 +1,2 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n use std::any:: as foo; //~ ERROR expected identifier, found keyword `as`\n //~^ ERROR: expected one of `::`, `;`, or `as`, found `foo`"}, {"sha": "076440025435044e2c0624cb2687cfbbe24e2272", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `as`\n-  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:3:16\n+  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:1:16\n    |\n LL | use std::any:: as foo;\n    |                ^^ expected identifier, found keyword\n@@ -9,7 +9,7 @@ LL | use std::any:: r#as foo;\n    |                ^^^^\n \n error: expected one of `::`, `;`, or `as`, found `foo`\n-  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:3:19\n+  --> $DIR/use-as-where-use-ends-with-mod-sep.rs:1:19\n    |\n LL | use std::any:: as foo;\n    |                   ^^^ expected one of `::`, `;`, or `as` here"}, {"sha": "e80db5372b609437863c499592b15a8de48c67a4", "filename": "src/test/ui/parser/where-clauses-no-bounds-or-predicates.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Empty predicate list is OK\n fn equal1<T>(_: &T, _: &T) -> bool where {\n     true"}, {"sha": "b80b0a409065b8b8d382b25124c39c9e5cd7ca16", "filename": "src/test/ui/parser/where-clauses-no-bounds-or-predicates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhere-clauses-no-bounds-or-predicates.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error: expected `:`, found `{`\n-  --> $DIR/where-clauses-no-bounds-or-predicates.rs:13:23\n+  --> $DIR/where-clauses-no-bounds-or-predicates.rs:11:23\n    |\n LL | fn foo<'a>() where 'a {}\n    |                       ^ expected `:`"}, {"sha": "01b3309fcacb15e92f02dd10f34f2cf606a8842e", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n mod foo {\n   struct Self;\n   //~^ ERROR expected identifier, found keyword `Self`"}, {"sha": "b63de98b8e7021ddd3cd53006f8645712f8dd6bd", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,65 +1,65 @@\n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:4:10\n+  --> $DIR/self_type_keyword.rs:2:10\n    |\n LL |   struct Self;\n    |          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:16:13\n+  --> $DIR/self_type_keyword.rs:14:13\n    |\n LL |         ref Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:18:13\n+  --> $DIR/self_type_keyword.rs:16:13\n    |\n LL |         mut Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:20:17\n+  --> $DIR/self_type_keyword.rs:18:17\n    |\n LL |         ref mut Self => (),\n    |                 ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:24:15\n+  --> $DIR/self_type_keyword.rs:22:15\n    |\n LL |         Foo { Self } => (),\n    |               ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:30:26\n+  --> $DIR/self_type_keyword.rs:28:26\n    |\n LL |     extern crate core as Self;\n    |                          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:35:32\n+  --> $DIR/self_type_keyword.rs:33:32\n    |\n LL |     use std::option::Option as Self;\n    |                                ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:40:11\n+  --> $DIR/self_type_keyword.rs:38:11\n    |\n LL |     trait Self {}\n    |           ^^^^ expected identifier, found keyword\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/self_type_keyword.rs:8:12\n+  --> $DIR/self_type_keyword.rs:6:12\n    |\n LL | struct Bar<'Self>;\n    |            ^^^^^\n \n error: cannot find macro `Self!` in this scope\n-  --> $DIR/self_type_keyword.rs:22:9\n+  --> $DIR/self_type_keyword.rs:20:9\n    |\n LL |         Self!() => (),\n    |         ^^^^\n \n error[E0392]: parameter `'Self` is never used\n-  --> $DIR/self_type_keyword.rs:8:12\n+  --> $DIR/self_type_keyword.rs:6:12\n    |\n LL | struct Bar<'Self>;\n    |            ^^^^^ unused parameter"}, {"sha": "8a9b8e793487c9f6916c2762a6971a4445bf0cda", "filename": "src/test/ui/traits/trait-object-vs-lifetime-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.rs?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,8 +1,6 @@\n // A few contrived examples where lifetime should (or should not) be parsed as an object type.\n // Lifetimes parsed as types are still rejected later by semantic checks.\n \n-// compile-flags: -Z continue-parse-after-error\n-\n // `'static` is a lifetime, `'static +` is a type, `'a` is a type\n fn g() where\n     'static: 'static,"}, {"sha": "ef5e2407b9a0e996866d0f23b8a0994c9ecbc7c5", "filename": "src/test/ui/traits/trait-object-vs-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885c7dfddcca11fa543d99d702c024c3f6bfe07b/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr?ref=885c7dfddcca11fa543d99d702c024c3f6bfe07b", "patch": "@@ -1,5 +1,5 @@\n error[E0224]: at least one non-builtin trait is required for an object type\n-  --> $DIR/trait-object-vs-lifetime-2.rs:9:5\n+  --> $DIR/trait-object-vs-lifetime-2.rs:7:5\n    |\n LL |     dyn 'static +: 'static + Copy,\n    |     ^^^^^^^^^^^^^"}]}