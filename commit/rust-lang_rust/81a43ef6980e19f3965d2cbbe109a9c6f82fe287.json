{"sha": "81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYTQzZWY2OTgwZTE5ZjM5NjVkMmNiYmUxMDlhOWM2ZjgyZmUyODc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-12T23:30:44Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-12T23:30:44Z"}, "message": "rustc: Add mutability to tuple literals", "tree": {"sha": "777baeda9bce74c5fc0e8b7db04ece576f6bfe58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777baeda9bce74c5fc0e8b7db04ece576f6bfe58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "html_url": "https://github.com/rust-lang/rust/commit/81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ca4da3b37181136cfeedc9a37545146de53f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca4da3b37181136cfeedc9a37545146de53f2a", "html_url": "https://github.com/rust-lang/rust/commit/b1ca4da3b37181136cfeedc9a37545146de53f2a"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "a7ef4e658632e66ae97a427635bb9de88352dc28", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "patch": "@@ -83,7 +83,7 @@ tag decl_ {\n type expr = spanned[expr_];\n tag expr_ {\n     expr_vec(vec[@expr]);\n-    expr_tup(vec[@expr]);\n+    expr_tup(vec[tup(bool /* mutability */, @expr)]);\n     expr_rec(vec[tup(ident,@expr)]);\n     expr_call(@expr, vec[@expr]);\n     expr_binary(binop, @expr, @expr);"}, {"sha": "8d945dd8014ff9404dc76f77574ecd1029dc8071", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "patch": "@@ -219,6 +219,18 @@ io fn parse_name(parser p, ast.ident id) -> ast.name {\n     ret spanned(lo, tys.span, rec(ident=id, types=tys.node));\n }\n \n+io fn parse_possibly_mutable_expr(parser p) -> tup(bool, @ast.expr) {\n+    auto mut;\n+    if (p.peek() == token.MUTABLE) {\n+        p.bump();\n+        mut = true;\n+    } else {\n+        mut = false;\n+    }\n+\n+    ret tup(mut, parse_expr(p));\n+}\n+\n io fn parse_bottom_expr(parser p) -> @ast.expr {\n \n     auto lo = p.get_span();\n@@ -239,11 +251,11 @@ io fn parse_bottom_expr(parser p) -> @ast.expr {\n \n         case (token.TUP) {\n             p.bump();\n-            auto pf = parse_expr;\n-            auto es = parse_seq[@ast.expr](token.LPAREN,\n-                                           token.RPAREN,\n-                                           some(token.COMMA),\n-                                           pf, p);\n+            auto pf = parse_possibly_mutable_expr;\n+            auto es = parse_seq[tup(bool, @ast.expr)](token.LPAREN,\n+                                                      token.RPAREN,\n+                                                      some(token.COMMA),\n+                                                      pf, p);\n             hi = es.span;\n             ex = ast.expr_tup(es.node);\n         }"}, {"sha": "5445d3c1784c0a0d9f6f5b5a7043dceb44729e2a", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a43ef6980e19f3965d2cbbe109a9c6f82fe287/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "patch": "@@ -47,7 +47,7 @@ type ast_fold[ENV] =\n          vec[@expr] es) -> @expr)                 fold_expr_vec,\n \n      (fn(&ENV e, &span sp,\n-         vec[@expr] es) -> @expr)                 fold_expr_tup,\n+         vec[tup(bool,@expr)] es) -> @expr)       fold_expr_tup,\n \n      (fn(&ENV e, &span sp,\n          vec[tup(ident,@expr)] fields) -> @expr)  fold_expr_rec,\n@@ -161,6 +161,11 @@ fn fold_exprs[ENV](&ENV env, ast_fold[ENV] fld, vec[@expr] e) -> vec[@expr] {\n     ret _vec.map[@expr, @expr](fe, e);\n }\n \n+fn fold_tup_entry[ENV](&ENV env, ast_fold[ENV] fld, &tup(bool,@expr) e)\n+    -> tup(bool,@expr) {\n+    ret tup(e._0, fold_expr(env, fld, e._1));\n+}\n+\n fn fold_rec_entry[ENV](&ENV env, ast_fold[ENV] fld, &tup(ident,@expr) e)\n     -> tup(ident,@expr) {\n     ret tup(e._0, fold_expr(env, fld, e._1));\n@@ -181,8 +186,10 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n         }\n \n         case (ast.expr_tup(?es)) {\n-            auto ees = fold_exprs(env_, fld, es);\n-            ret fld.fold_expr_vec(env_, e.span, ees);\n+            let operator[tup(bool,@expr), tup(bool,@expr)] fe =\n+                bind fold_tup_entry[ENV](env, fld, _);\n+            auto ees = _vec.map[tup(bool,@expr), tup(bool,@expr)](fe, es);\n+            ret fld.fold_expr_tup(env_, e.span, ees);\n         }\n \n         case (ast.expr_rec(?es)) {\n@@ -425,7 +432,8 @@ fn identity_fold_expr_vec[ENV](&ENV env, &span sp, vec[@expr] es) -> @expr {\n     ret @respan(sp, ast.expr_vec(es));\n }\n \n-fn identity_fold_expr_tup[ENV](&ENV env, &span sp, vec[@expr] es) -> @expr {\n+fn identity_fold_expr_tup[ENV](&ENV env, &span sp, vec[tup(bool, @expr)] es)\n+        -> @expr {\n     ret @respan(sp, ast.expr_tup(es));\n }\n "}]}