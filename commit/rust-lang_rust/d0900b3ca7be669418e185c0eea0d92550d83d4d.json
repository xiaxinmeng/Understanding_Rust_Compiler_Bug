{"sha": "d0900b3ca7be669418e185c0eea0d92550d83d4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOTAwYjNjYTdiZTY2OTQxOGUxODVjMGVlYTBkOTI1NTBkODNkNGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-06T14:16:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-06T14:16:00Z"}, "message": "G: struct fields", "tree": {"sha": "41f9ee7063958d05d9b5a7a559a4e7fe58d298f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f9ee7063958d05d9b5a7a559a4e7fe58d298f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0900b3ca7be669418e185c0eea0d92550d83d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0900b3ca7be669418e185c0eea0d92550d83d4d", "html_url": "https://github.com/rust-lang/rust/commit/d0900b3ca7be669418e185c0eea0d92550d83d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0900b3ca7be669418e185c0eea0d92550d83d4d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55602727c8adfa12c026a8c7881a8bc57fba9db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55602727c8adfa12c026a8c7881a8bc57fba9db8", "html_url": "https://github.com/rust-lang/rust/commit/55602727c8adfa12c026a8c7881a8bc57fba9db8"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "18af8d123851f5bad844a728d5fc0b9d95d8ab8f", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -62,6 +62,7 @@ Grammar(\n     ],\n     nodes: [\n         \"FILE\",\n-        \"STRUCT_ITEM\"\n+        \"STRUCT_ITEM\",\n+        \"STRUCT_FIELD\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "5ebf3e2e88f11ce701ac8308523fb4e0540b8f6d", "filename": "src/bin/gen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fbin%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fbin%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgen.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -6,7 +6,6 @@ extern crate ron;\n extern crate file;\n \n use std::path::PathBuf;\n-use std::ascii::AsciiExt;\n use std::fmt::Write;\n \n fn main() {"}, {"sha": "77596fea6d06c68b7bb9919e46473fa17c77375a", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -1,4 +1,3 @@\n-use super::Event;\n use super::parser::Parser;\n \n use syntax_kinds::*;\n@@ -50,10 +49,26 @@ fn item(p: &mut Parser) -> Result {\n     ERR\n }\n \n-fn struct_item(p: &mut Parser) -> Result{\n+fn struct_item(p: &mut Parser) -> Result {\n     p.expect(IDENT)?;\n-    p.expect(L_CURLY)?;\n-    p.expect(R_CURLY)\n+    p.curly_block(|p| {\n+        comma_list(p, struct_field)\n+    })\n+}\n+\n+fn struct_field(p: &mut Parser) -> Result {\n+    if !p.current_is(IDENT) {\n+        return ERR;\n+    }\n+    p.start(STRUCT_FIELD);\n+    p.bump();\n+    ignore_errors(|| {\n+        p.expect(COLON)?;\n+        p.expect(IDENT)?;\n+        OK\n+    });\n+    p.finish();\n+    OK\n }\n \n // Paths, types, attributes, and stuff //\n@@ -78,4 +93,19 @@ fn skip_one_token(p: &mut Parser) {\n     p.start(ERROR);\n     p.bump().unwrap();\n     p.finish();\n+}\n+\n+fn ignore_errors<F: FnOnce() -> Result>(f: F) {\n+    drop(f());\n+}\n+\n+fn comma_list<F: Fn(&mut Parser) -> Result>(p: &mut Parser, element: F) {\n+    loop {\n+        if element(p).is_err() {\n+            return\n+        }\n+        if p.expect(COMMA).is_err() {\n+            return\n+        }\n+    }\n }\n\\ No newline at end of file"}, {"sha": "3c3654b6b35c2f9f14ae8c877fd4e9a123880387", "filename": "src/parser/event_parser/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fparser%2Fevent_parser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fparser%2Fevent_parser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fmod.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -1,6 +1,5 @@\n-use {Token, TextUnit, SyntaxKind};\n+use {Token, SyntaxKind};\n \n-use syntax_kinds::*;\n mod grammar;\n mod parser;\n "}, {"sha": "04ef4fb2843e4afb2408d845abf7da2aee831866", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -1,7 +1,7 @@\n use {Token, SyntaxKind, TextUnit};\n use super::{Event};\n use super::super::is_insignificant;\n-use syntax_kinds::{WHITESPACE, COMMENT};\n+use syntax_kinds::{L_CURLY, R_CURLY, ERROR};\n \n pub struct Parser<'t> {\n     text: &'t str,\n@@ -10,6 +10,7 @@ pub struct Parser<'t> {\n \n     pos: usize,\n     events: Vec<Event>,\n+    curly_level: i32,\n }\n \n impl<'t> Parser<'t> {\n@@ -30,6 +31,7 @@ impl<'t> Parser<'t> {\n \n             pos: 0,\n             events: Vec::new(),\n+            curly_level: 0,\n         }\n     }\n \n@@ -64,6 +66,11 @@ impl<'t> Parser<'t> {\n \n     pub(crate) fn bump(&mut self) -> Option<SyntaxKind> {\n         let kind = self.current()?;\n+        match kind {\n+            L_CURLY => self.curly_level += 1,\n+            R_CURLY => self.curly_level -= 1,\n+            _ => (),\n+        }\n         self.pos += 1;\n         self.event(Event::Token { kind, n_raw_tokens: 1 });\n         Some(kind)\n@@ -78,6 +85,24 @@ impl<'t> Parser<'t> {\n         }\n     }\n \n+    pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> Result<(), ()> {\n+        let level = self.curly_level;\n+        self.expect(L_CURLY)?;\n+        f(self);\n+        assert!(self.curly_level > level);\n+        if self.expect(R_CURLY).is_ok() {\n+            return Ok(());\n+        }\n+        self.start(ERROR);\n+        while self.curly_level > level {\n+            if self.bump().is_none() {\n+                break;\n+            }\n+        }\n+        self.finish();\n+        Ok(()) //???\n+    }\n+\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }"}, {"sha": "4a27b0eae66604771fdf2d1734632242c5658d1e", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -60,8 +60,9 @@ pub const DOC_COMMENT: SyntaxKind = SyntaxKind(55);\n pub const SHEBANG: SyntaxKind = SyntaxKind(56);\n pub const FILE: SyntaxKind = SyntaxKind(57);\n pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(58);\n+pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(59);\n \n-static INFOS: [SyntaxInfo; 59] = [\n+static INFOS: [SyntaxInfo; 60] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -121,6 +122,7 @@ static INFOS: [SyntaxInfo; 59] = [\n     SyntaxInfo { name: \"SHEBANG\" },\n     SyntaxInfo { name: \"FILE\" },\n     SyntaxInfo { name: \"STRUCT_ITEM\" },\n+    SyntaxInfo { name: \"STRUCT_FIELD\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {"}, {"sha": "cc3866d2511ed9a75a1ecb8d50ffdbe191047840", "filename": "tests/data/parser/0002_struct_item_field.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/tests%2Fdata%2Fparser%2F0002_struct_item_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/tests%2Fdata%2Fparser%2F0002_struct_item_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0002_struct_item_field.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -0,0 +1,3 @@\n+struct S {\n+    foo: u32\n+}\n\\ No newline at end of file"}, {"sha": "b1673ade3e511dd10365ef9518b9ca31f9656213", "filename": "tests/data/parser/0002_struct_item_field.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/tests%2Fdata%2Fparser%2F0002_struct_item_field.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/tests%2Fdata%2Fparser%2F0002_struct_item_field.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0002_struct_item_field.txt?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -0,0 +1,15 @@\n+FILE@[0; 25)\n+  STRUCT_ITEM@[0; 25)\n+    STRUCT_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    IDENT@[7; 8)\n+    WHITESPACE@[8; 9)\n+    L_CURLY@[9; 10)\n+    STRUCT_FIELD@[10; 24)\n+      WHITESPACE@[10; 15)\n+      IDENT@[15; 18)\n+      COLON@[18; 19)\n+      WHITESPACE@[19; 20)\n+      IDENT@[20; 23)\n+      WHITESPACE@[23; 24)\n+    R_CURLY@[24; 25)\n\\ No newline at end of file"}, {"sha": "5c63be3be1a8886ddf20334466b49b11a114d5d1", "filename": "tests/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0900b3ca7be669418e185c0eea0d92550d83d4d/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0900b3ca7be669418e185c0eea0d92550d83d4d/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=d0900b3ca7be669418e185c0eea0d92550d83d4d", "patch": "@@ -61,7 +61,8 @@ fn dump_tree(file: &File) -> String {\n \n     fn go(node: Node, buff: &mut String, level: usize) {\n         buff.push_str(&String::from(\"  \").repeat(level));\n-        write!(buff, \"{:?}\\n\", node);\n+        write!(buff, \"{:?}\\n\", node)\n+            .unwrap();\n         for child in node.children() {\n             go(child, buff, level + 1)\n         }"}]}