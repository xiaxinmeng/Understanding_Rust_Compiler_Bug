{"sha": "a8d815590821c1b689342e443e584d5b69af6341", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDgxNTU5MDgyMWMxYjY4OTM0MmU0NDNlNTg0ZDViNjlhZjYzNDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-13T16:24:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-13T16:24:35Z"}, "message": "Merge #9250\n\n9250: internal: check diagnostics in all files and not just the first one r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9286c07c119c3d7bbf95a9b4aa7047944cbb1990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9286c07c119c3d7bbf95a9b4aa7047944cbb1990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d815590821c1b689342e443e584d5b69af6341", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgxjFDCRBK7hj4Ov3rIwAAOfAIAC6kKQykvJedT+KLgsNs+b3E\nuJ/gWoSxHj8UqSPHu/SChaK4oZjr24Xy+pt1Qy+LtvdRXLPQY4zbHc+cViZSfPn7\nrNWeVJ8ynQAivXo9FakeHBeQTLjEXLNhZf1bdWFQQqf86WV2xDaJKb0mdajDvraM\n0JCO349mPUS9wX/IVmOQkt1h+SvM0GU1mLK/NaKJT2W4M6vGBsD6TS9qzdwMXcGI\nv8e6k5qj38HqLXX4c9XMBocEuwrCgPu8TslQHuQf14PgJNVFbrD6TkjfCZY3ndjR\nfNTWtkeVa3xvRhJBh+dvKoCq2KcZDl/8ToNh5B66lqKkTAmYZ4d0L6258+Ivhx0=\n=R87e\n-----END PGP SIGNATURE-----\n", "payload": "tree 9286c07c119c3d7bbf95a9b4aa7047944cbb1990\nparent 7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e\nparent a1940d8c75bee8c319e7e7f19607bdc4b01c28d4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623601475 +0000\ncommitter GitHub <noreply@github.com> 1623601475 +0000\n\nMerge #9250\n\n9250: internal: check diagnostics in all files and not just the first one r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d815590821c1b689342e443e584d5b69af6341", "html_url": "https://github.com/rust-lang/rust/commit/a8d815590821c1b689342e443e584d5b69af6341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d815590821c1b689342e443e584d5b69af6341/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "html_url": "https://github.com/rust-lang/rust/commit/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e"}, {"sha": "a1940d8c75bee8c319e7e7f19607bdc4b01c28d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1940d8c75bee8c319e7e7f19607bdc4b01c28d4", "html_url": "https://github.com/rust-lang/rust/commit/a1940d8c75bee8c319e7e7f19607bdc4b01c28d4"}], "stats": {"total": 134, "additions": 84, "deletions": 50}, "files": [{"sha": "fb956d5ee87ac95b6fc7643836065ec29c5c23dd", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=a8d815590821c1b689342e443e584d5b69af6341", "patch": "@@ -341,7 +341,6 @@ fn unresolved_fix(id: &'static str, label: &str, target: TextRange) -> Assist {\n #[cfg(test)]\n mod tests {\n     use expect_test::Expect;\n-    use hir::diagnostics::DiagnosticCode;\n     use ide_assists::AssistResolveStrategy;\n     use stdx::trim_indent;\n     use test_utils::{assert_eq_text, extract_annotations};\n@@ -442,24 +441,24 @@ mod tests {\n \n     #[track_caller]\n     pub(crate) fn check_diagnostics(ra_fixture: &str) {\n-        check_diagnostics_with_inactive_code(ra_fixture, false)\n+        let mut config = DiagnosticsConfig::default();\n+        config.disabled.insert(\"inactive-code\".to_string());\n+        check_diagnostics_with_config(config, ra_fixture)\n     }\n \n     #[track_caller]\n-    pub(crate) fn check_diagnostics_with_inactive_code(ra_fixture: &str, with_inactive_code: bool) {\n-        let (analysis, file_id) = fixture::file(ra_fixture);\n-        let diagnostics = analysis\n-            .diagnostics(&DiagnosticsConfig::default(), AssistResolveStrategy::All, file_id)\n-            .unwrap();\n-\n-        let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n-        let mut actual = diagnostics\n-            .into_iter()\n-            .filter(|d| d.code != Some(DiagnosticCode(\"inactive-code\")) || with_inactive_code)\n-            .map(|d| (d.range, d.message))\n-            .collect::<Vec<_>>();\n-        actual.sort_by_key(|(range, _)| range.start());\n-        assert_eq!(expected, actual);\n+    pub(crate) fn check_diagnostics_with_config(config: DiagnosticsConfig, ra_fixture: &str) {\n+        let (analysis, files) = fixture::files(ra_fixture);\n+        for file_id in files {\n+            let diagnostics =\n+                analysis.diagnostics(&config, AssistResolveStrategy::All, file_id).unwrap();\n+\n+            let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n+            let mut actual =\n+                diagnostics.into_iter().map(|d| (d.range, d.message)).collect::<Vec<_>>();\n+            actual.sort_by_key(|(range, _)| range.start());\n+            assert_eq!(expected, actual);\n+        }\n     }\n \n     #[test]"}, {"sha": "d9d3e88c1f86fe63d6c7d4bd1e093389f4461b3d", "filename": "crates/ide/src/diagnostics/inactive_code.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs?ref=a8d815590821c1b689342e443e584d5b69af6341", "patch": "@@ -37,11 +37,16 @@ pub(super) fn inactive_code(\n \n #[cfg(test)]\n mod tests {\n-    use crate::diagnostics::tests::check_diagnostics_with_inactive_code;\n+    use crate::{diagnostics::tests::check_diagnostics_with_config, DiagnosticsConfig};\n+\n+    pub(crate) fn check(ra_fixture: &str) {\n+        let config = DiagnosticsConfig::default();\n+        check_diagnostics_with_config(config, ra_fixture)\n+    }\n \n     #[test]\n     fn cfg_diagnostics() {\n-        check_diagnostics_with_inactive_code(\n+        check(\n             r#\"\n fn f() {\n     // The three g\u0336e\u0336n\u0336d\u0336e\u0336r\u0336s\u0336 statements:\n@@ -69,15 +74,14 @@ fn f() {\n   //^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n }\n         \"#,\n-            true,\n         );\n     }\n \n     #[test]\n     fn inactive_item() {\n         // Additional tests in `cfg` crate. This only tests disabled cfgs.\n \n-        check_diagnostics_with_inactive_code(\n+        check(\n             r#\"\n     #[cfg(no)] pub fn f() {}\n   //^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n@@ -91,15 +95,14 @@ fn f() {\n     #[cfg(feature = \"std\")] use std;\n   //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: feature = \"std\" is disabled\n \"#,\n-            true,\n         );\n     }\n \n     /// Tests that `cfg` attributes behind `cfg_attr` is handled properly.\n     #[test]\n     fn inactive_via_cfg_attr() {\n         cov_mark::check!(cfg_attr_active);\n-        check_diagnostics_with_inactive_code(\n+        check(\n             r#\"\n     #[cfg_attr(not(never), cfg(no))] fn f() {}\n   //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n@@ -111,7 +114,6 @@ fn f() {\n     #[cfg_attr(not(never), inline, cfg(no))] fn h() {}\n   //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n \"#,\n-            true,\n         );\n     }\n }"}, {"sha": "d76a3a0940ef9fc87d9afc5d8aed649aaaaa384d", "filename": "crates/ide/src/diagnostics/macro_error.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs?ref=a8d815590821c1b689342e443e584d5b69af6341", "patch": "@@ -14,7 +14,12 @@ pub(super) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) ->\n \n #[cfg(test)]\n mod tests {\n-    use crate::diagnostics::tests::{check_diagnostics, check_no_diagnostics};\n+    use crate::{\n+        diagnostics::tests::{\n+            check_diagnostics, check_diagnostics_with_config, check_no_diagnostics,\n+        },\n+        DiagnosticsConfig,\n+    };\n \n     #[test]\n     fn builtin_macro_fails_expansion() {\n@@ -31,7 +36,14 @@ macro_rules! include { () => {} }\n \n     #[test]\n     fn include_macro_should_allow_empty_content() {\n-        check_diagnostics(\n+        let mut config = DiagnosticsConfig::default();\n+\n+        // FIXME: This is a false-positive, the file is actually linked in via\n+        // `include!` macro\n+        config.disabled.insert(\"unlinked-file\".to_string());\n+\n+        check_diagnostics_with_config(\n+            config,\n             r#\"\n //- /lib.rs\n #[rustc_builtin_macro]"}, {"sha": "38e2e866bea5eebed61fcedf2b57f22605942ca2", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=a8d815590821c1b689342e443e584d5b69af6341", "patch": "@@ -1,6 +1,5 @@\n //! Utilities for creating `Analysis` instances for tests.\n use ide_db::base_db::fixture::ChangeFixture;\n-use syntax::{TextRange, TextSize};\n use test_utils::extract_annotations;\n \n use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n@@ -63,15 +62,8 @@ pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(Fil\n \n pub(crate) fn nav_target_annotation(ra_fixture: &str) -> (Analysis, FilePosition, FileRange) {\n     let (analysis, position, mut annotations) = annotations(ra_fixture);\n-    let (mut expected, data) = annotations.pop().unwrap();\n+    let (expected, data) = annotations.pop().unwrap();\n     assert!(annotations.is_empty());\n-    match data.as_str() {\n-        \"\" => (),\n-        \"file\" => {\n-            expected.range =\n-                TextRange::up_to(TextSize::of(&*analysis.file_text(expected.file_id).unwrap()))\n-        }\n-        data => panic!(\"bad data: {}\", data),\n-    }\n+    assert_eq!(data, \"\");\n     (analysis, position, expected)\n }"}, {"sha": "8dd643a0f7cbdacb3f7d609735cafeabe62d2218", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d815590821c1b689342e443e584d5b69af6341/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=a8d815590821c1b689342e443e584d5b69af6341", "patch": "@@ -185,7 +185,7 @@ mod tests {\n extern crate std$0;\n //- /std/lib.rs crate:std\n // empty\n-//^ file\n+//^file\n \"#,\n         )\n     }\n@@ -198,7 +198,7 @@ extern crate std$0;\n extern crate std as abc$0;\n //- /std/lib.rs crate:std\n // empty\n-//^ file\n+//^file\n \"#,\n         )\n     }\n@@ -253,7 +253,7 @@ mod $0foo;\n \n //- /foo.rs\n // empty\n-//^ file\n+//^file\n \"#,\n         );\n \n@@ -264,7 +264,7 @@ mod $0foo;\n \n //- /foo/mod.rs\n // empty\n-//^ file\n+//^file\n \"#,\n         );\n     }\n@@ -395,7 +395,7 @@ use foo as bar$0;\n \n //- /foo/lib.rs crate:foo\n // empty\n-//^ file\n+//^file\n \"#,\n         );\n     }\n@@ -1287,7 +1287,7 @@ fn main() {\n }\n //- /foo.txt\n // empty\n-//^ file\n+//^file\n \"#,\n         );\n     }"}, {"sha": "b2fe25f82baad33ffb5e814c75147a7e16668678", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a8d815590821c1b689342e443e584d5b69af6341/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d815590821c1b689342e443e584d5b69af6341/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=a8d815590821c1b689342e443e584d5b69af6341", "patch": "@@ -190,10 +190,21 @@ pub fn add_cursor(text: &str, offset: TextSize) -> String {\n     res\n }\n \n-/// Extracts `//^ some text` annotations\n+/// Extracts `//^^^ some text` annotations.\n+///\n+/// A run of `^^^` can be arbitrary long and points to the corresponding range\n+/// in the line above.\n+///\n+/// The `// ^file text` syntax can be used to attach `text` to the entirety of\n+/// the file.\n+///\n+/// Multiline string values are supported:\n+///\n+/// // ^^^ first line\n+/// //   | second line\n pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n     let mut res = Vec::new();\n-    let mut prev_line_start: Option<TextSize> = None;\n+    let mut prev_line_start: Option<TextSize> = Some(0.into());\n     let mut line_start: TextSize = 0.into();\n     let mut prev_line_annotations: Vec<(TextSize, usize)> = Vec::new();\n     for line in text.split_inclusive('\\n') {\n@@ -202,10 +213,15 @@ pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n             let annotation_offset = TextSize::of(&line[..idx + \"//\".len()]);\n             for annotation in extract_line_annotations(&line[idx + \"//\".len()..]) {\n                 match annotation {\n-                    LineAnnotation::Annotation { mut range, content } => {\n+                    LineAnnotation::Annotation { mut range, content, file } => {\n                         range += annotation_offset;\n                         this_line_annotations.push((range.end(), res.len()));\n-                        res.push((range + prev_line_start.unwrap(), content))\n+                        let range = if file {\n+                            TextRange::up_to(TextSize::of(text))\n+                        } else {\n+                            range + prev_line_start.unwrap()\n+                        };\n+                        res.push((range, content))\n                     }\n                     LineAnnotation::Continuation { mut offset, content } => {\n                         offset += annotation_offset;\n@@ -226,11 +242,12 @@ pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n \n         prev_line_annotations = this_line_annotations;\n     }\n+\n     res\n }\n \n enum LineAnnotation {\n-    Annotation { range: TextRange, content: String },\n+    Annotation { range: TextRange, content: String, file: bool },\n     Continuation { offset: TextSize, content: String },\n }\n \n@@ -251,12 +268,20 @@ fn extract_line_annotations(mut line: &str) -> Vec<LineAnnotation> {\n         }\n         let range = TextRange::at(offset, len.try_into().unwrap());\n         let next = line[len..].find(marker).map_or(line.len(), |it| it + len);\n-        let content = line[len..][..next - len].trim().to_string();\n+        let mut content = &line[len..][..next - len];\n+\n+        let mut file = false;\n+        if !continuation && content.starts_with(\"file\") {\n+            file = true;\n+            content = &content[\"file\".len()..]\n+        }\n+\n+        let content = content.trim().to_string();\n \n         let annotation = if continuation {\n             LineAnnotation::Continuation { offset: range.end(), content }\n         } else {\n-            LineAnnotation::Annotation { range, content }\n+            LineAnnotation::Annotation { range, content, file }\n         };\n         res.push(annotation);\n \n@@ -277,16 +302,20 @@ fn main() {\n     zoo + 1\n } //^^^ type:\n   //  | i32\n+\n+// ^file\n     \"#,\n     );\n     let res = extract_annotations(&text)\n         .into_iter()\n         .map(|(range, ann)| (&text[range], ann))\n         .collect::<Vec<_>>();\n+\n     assert_eq!(\n-        res,\n-        vec![(\"x\", \"def\".into()), (\"y\", \"def\".into()), (\"zoo\", \"type:\\ni32\\n\".into()),]\n+        res[..3],\n+        [(\"x\", \"def\".into()), (\"y\", \"def\".into()), (\"zoo\", \"type:\\ni32\\n\".into())]\n     );\n+    assert_eq!(res[3].0.len(), 115);\n }\n \n /// Returns `false` if slow tests should not run, otherwise returns `true` and"}]}