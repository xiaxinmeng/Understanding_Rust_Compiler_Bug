{"sha": "b972ac818c98373b6d045956b049dc34932c41be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NzJhYzgxOGM5ODM3M2I2ZDA0NTk1NmIwNDlkYzM0OTMyYzQxYmU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-06T06:55:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-09T04:19:42Z"}, "message": "Shrink `ObligationCauseCode` by boxing `MatchExpressionArm`.\n\nThe reduction in `memcpy` calls greatly outweighs the cost of the extra\nallocations, for a net performance win.", "tree": {"sha": "1ca59ffb10f2f7f4158c13a01d9c4dec5eee00f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca59ffb10f2f7f4158c13a01d9c4dec5eee00f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b972ac818c98373b6d045956b049dc34932c41be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b972ac818c98373b6d045956b049dc34932c41be", "html_url": "https://github.com/rust-lang/rust/commit/b972ac818c98373b6d045956b049dc34932c41be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b972ac818c98373b6d045956b049dc34932c41be/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b9a46f60440e2207f458e276b38239b1651a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b9a46f60440e2207f458e276b38239b1651a22", "html_url": "https://github.com/rust-lang/rust/commit/c1b9a46f60440e2207f458e276b38239b1651a22"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "684e799b403190d23b33b39f2e4755aa2bdeb286", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b972ac818c98373b6d045956b049dc34932c41be", "patch": "@@ -55,7 +55,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::Node;\n use crate::infer::opaque_types;\n use crate::middle::region;\n-use crate::traits::{ObligationCause, ObligationCauseCode};\n+use crate::traits::{MatchExpressionArmCause, ObligationCause, ObligationCauseCode};\n use crate::ty::error::TypeError;\n use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TypeFoldable};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n@@ -624,13 +624,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            ObligationCauseCode::MatchExpressionArm {\n+            ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                 source,\n                 ref prior_arms,\n                 last_ty,\n                 discrim_hir_id,\n                 ..\n-            } => match source {\n+            }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n                     let msg = \"`if let` arms have incompatible types\";\n                     err.span_label(cause.span, msg);\n@@ -1622,13 +1622,15 @@ impl<'tcx> ObligationCause<'tcx> {\n         use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n-            MatchExpressionArm { source, .. } => Error0308(match source {\n-                hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have incompatible types\",\n-                hir::MatchSource::TryDesugar => {\n-                    \"try expression alternatives have incompatible types\"\n-                }\n-                _ => \"match arms have incompatible types\",\n-            }),\n+            MatchExpressionArm(box MatchExpressionArmCause { source, .. }) =>\n+                Error0308(match source {\n+                    hir::MatchSource::IfLetDesugar { .. } =>\n+                        \"`if let` arms have incompatible types\",\n+                    hir::MatchSource::TryDesugar => {\n+                        \"try expression alternatives have incompatible types\"\n+                    }\n+                    _ => \"match arms have incompatible types\",\n+                }),\n             IfExpression { .. } => Error0308(\"if and else have incompatible types\"),\n             IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n@@ -1656,7 +1658,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         match self.code {\n             CompareImplMethodObligation { .. } => \"method type is compatible with trait\",\n             ExprAssignable => \"expression is assignable\",\n-            MatchExpressionArm { source, .. } => match source {\n+            MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n                 _ => \"match arms have compatible types\",\n             },"}, {"sha": "0b8de1f13d384ee57ac132f4c357e80bb7d18665", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=b972ac818c98373b6d045956b049dc34932c41be", "patch": "@@ -70,7 +70,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 160);\n+static_assert_size!(PendingPredicateObligation<'_>, 144);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}, {"sha": "548fb55098af151d3912aadd8a6f61ba81241963", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=b972ac818c98373b6d045956b049dc34932c41be", "patch": "@@ -125,7 +125,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 136);\n+static_assert_size!(PredicateObligation<'_>, 120);\n \n /// The reason why we incurred this obligation; used for error reporting.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n@@ -151,7 +151,8 @@ impl<'tcx> ObligationCause<'tcx> {\n             ObligationCauseCode::StartFunctionType => {\n                 tcx.sess.source_map().def_span(self.span)\n             }\n-            ObligationCauseCode::MatchExpressionArm { arm_span, .. } => arm_span,\n+            ObligationCauseCode::MatchExpressionArm(\n+                box MatchExpressionArmCause { arm_span, .. }) => arm_span,\n             _ => self.span,\n         }\n     }\n@@ -227,13 +228,7 @@ pub enum ObligationCauseCode<'tcx> {\n     ExprAssignable,\n \n     /// Computing common supertype in the arms of a match expression\n-    MatchExpressionArm {\n-        arm_span: Span,\n-        source: hir::MatchSource,\n-        prior_arms: Vec<Span>,\n-        last_ty: Ty<'tcx>,\n-        discrim_hir_id: hir::HirId,\n-    },\n+    MatchExpressionArm(Box<MatchExpressionArmCause<'tcx>>),\n \n     /// Computing common supertype in the pattern guard for the arms of a match expression\n     MatchExpressionArmPattern { span: Span, ty: Ty<'tcx> },\n@@ -275,7 +270,16 @@ pub enum ObligationCauseCode<'tcx> {\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(ObligationCauseCode<'_>, 56);\n+static_assert_size!(ObligationCauseCode<'_>, 40);\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct MatchExpressionArmCause<'tcx> {\n+    pub arm_span: Span,\n+    pub source: hir::MatchSource,\n+    pub prior_arms: Vec<Span>,\n+    pub last_ty: Ty<'tcx>,\n+    pub discrim_hir_id: hir::HirId,\n+}\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DerivedObligationCause<'tcx> {"}, {"sha": "56324baffa038db71422988eab5db9c3acab8ddf", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=b972ac818c98373b6d045956b049dc34932c41be", "patch": "@@ -508,21 +508,21 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 trait_item_def_id,\n             }),\n             super::ExprAssignable => Some(super::ExprAssignable),\n-            super::MatchExpressionArm {\n+            super::MatchExpressionArm(box super::MatchExpressionArmCause {\n                 arm_span,\n                 source,\n                 ref prior_arms,\n                 last_ty,\n                 discrim_hir_id,\n-            } => {\n+            }) => {\n                 tcx.lift(&last_ty).map(|last_ty| {\n-                    super::MatchExpressionArm {\n+                    super::MatchExpressionArm(box super::MatchExpressionArmCause {\n                         arm_span,\n                         source,\n                         prior_arms: prior_arms.clone(),\n                         last_ty,\n                         discrim_hir_id,\n-                    }\n+                    })\n                 })\n             }\n             super::MatchExpressionArmPattern { span, ty } => {"}, {"sha": "8ce08f523a1b09755805bbbebc7b64a21699073f", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b972ac818c98373b6d045956b049dc34932c41be/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=b972ac818c98373b6d045956b049dc34932c41be", "patch": "@@ -2,7 +2,7 @@ use crate::check::{FnCtxt, Expectation, Diverges, Needs};\n use crate::check::coercion::CoerceMany;\n use rustc::hir::{self, ExprKind};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::traits::{ObligationCause, ObligationCauseCode};\n+use rustc::traits::{MatchExpressionArmCause, ObligationCause, ObligationCauseCode};\n use rustc::ty::Ty;\n use syntax_pos::Span;\n \n@@ -146,13 +146,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // The reason for the first arm to fail is not that the match arms diverge,\n                     // but rather that there's a prior obligation that doesn't hold.\n                     0 => (arm_span, ObligationCauseCode::BlockTailExpression(arm.body.hir_id)),\n-                    _ => (expr.span, ObligationCauseCode::MatchExpressionArm {\n-                        arm_span,\n-                        source: match_src,\n-                        prior_arms: other_arms.clone(),\n-                        last_ty: prior_arm_ty.unwrap(),\n-                        discrim_hir_id: discrim.hir_id,\n-                    }),\n+                    _ => (expr.span,\n+                          ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                            arm_span,\n+                            source: match_src,\n+                            prior_arms: other_arms.clone(),\n+                            last_ty: prior_arm_ty.unwrap(),\n+                            discrim_hir_id: discrim.hir_id,\n+                          })\n+                         ),\n                 };\n                 let cause = self.cause(span, code);\n                 coercion.coerce(self, &cause, &arm.body, arm_ty);"}]}