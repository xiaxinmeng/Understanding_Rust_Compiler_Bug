{"sha": "0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "node_id": "C_kwDOAAsO6NoAKDBhMmMwZWNhM2YyY2Y4NGI4ZWFiNDU2NTAwMWE0MWI1OTdhNDk4ZTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-17T06:09:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-17T06:09:41Z"}, "message": "Rollup merge of #110423 - jsoref:spelling-srcdoc, r=Nilstrieb\n\nSpelling srcdoc", "tree": {"sha": "318c75065300ae9d5c18818e59ac0c06d90b729a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318c75065300ae9d5c18818e59ac0c06d90b729a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPOKlCRBK7hj4Ov3rIwAAaHkIABwfUWW756IOFg8cP4w4hnys\n19a6TkAw8HH0oOK5p1oTXGGxcxwPcqMR5i8Ndf68RDz00tnljVrc9L9ZIkBsDHXQ\nsEiNvk6n99KwT8Ha9bK5JnZujD/0Tg7LLXTlHQR8GigMIFpz79W3WgAu983hF7DF\nFXF0QZR1YWkvkiqQ42x3eEC5xCT33JdWp6/4UHlA1mxWdAs88pE1cuj7HImQ3i75\nThTuFo+WpP7hNVuXB1jCInbOdbR/95tHdUkBJZcOB+fUCbfPS0C6Woqr8Zo1110f\nnMycVA6ZGNXNT/qAha+QT1mRKeGGN5AUNfPVJo2r8usGcSpMhHiLwbTqI/09IYY=\n=hFq8\n-----END PGP SIGNATURE-----\n", "payload": "tree 318c75065300ae9d5c18818e59ac0c06d90b729a\nparent 902b419b216750303a965fe4e3b4185e55c1bbf2\nparent b1da6a750b64dba5b33e05e88a5666323c62db42\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681711781 +0200\ncommitter GitHub <noreply@github.com> 1681711781 +0200\n\nRollup merge of #110423 - jsoref:spelling-srcdoc, r=Nilstrieb\n\nSpelling srcdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "html_url": "https://github.com/rust-lang/rust/commit/0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "902b419b216750303a965fe4e3b4185e55c1bbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/902b419b216750303a965fe4e3b4185e55c1bbf2", "html_url": "https://github.com/rust-lang/rust/commit/902b419b216750303a965fe4e3b4185e55c1bbf2"}, {"sha": "b1da6a750b64dba5b33e05e88a5666323c62db42", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1da6a750b64dba5b33e05e88a5666323c62db42", "html_url": "https://github.com/rust-lang/rust/commit/b1da6a750b64dba5b33e05e88a5666323c62db42"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2535cd4f12cec15fed9266dbaca2d9a0f33ae72d", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -117,7 +117,7 @@ $ ls formatjson5.profraw\n formatjson5.profraw\n ```\n \n-If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing directory structure will be created. Additionally, the following special pattern strings are rewritten:\n+If `LLVM_PROFILE_FILE` contains a path to a nonexistent directory, the missing directory structure will be created. Additionally, the following special pattern strings are rewritten:\n \n -   `%p` - The process ID.\n -   `%h` - The hostname of the machine running the program."}, {"sha": "11d7b5b59381bb7dda4a39ccaa62b270d644880f", "filename": "src/doc/rustc/src/json.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -61,7 +61,7 @@ Diagnostics have the following format:\n             /* The file where the span is located.\n                Note that this path may not exist. For example, if the path\n                points to the standard library, and the rust src is not\n-               available in the sysroot, then it may point to a non-existent\n+               available in the sysroot, then it may point to a nonexistent\n                file. Beware that this may also point to the source of an\n                external crate.\n             */"}, {"sha": "e351ea0013003b3d0e1c2e9a87dba0ef3d4c2964", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -66,7 +66,7 @@ After completing these steps you can use rust normally in a native environment.\n \n To cross compile, you'll need to:\n \n-* Build the rust cross toochain using  [rust-bootstrap-armv7-unknown-linux-uclibceabi](https://github.com/lancethepants/rust-bootstrap-armv7-unknown-linux-uclibceabi) or your own built toolchain.\n+* Build the rust cross toolchain using  [rust-bootstrap-armv7-unknown-linux-uclibceabi](https://github.com/lancethepants/rust-bootstrap-armv7-unknown-linux-uclibceabi) or your own built toolchain.\n * Link your built toolchain with\n \n     ```text"}, {"sha": "03fa284620e4c521996c818f543a7a62b787c21a", "filename": "src/doc/rustc/src/platform-support/unknown-uefi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -123,7 +123,7 @@ There are 3 common ways to compile native C code for UEFI targets:\n   targets. Be wary of any includes that are not specifically suitable for UEFI\n   targets (especially the C standard library includes are not always\n   compatible). Freestanding compilations are recommended to avoid\n-  incompatibilites.\n+  incompatibilities.\n \n ## Ecosystem\n "}, {"sha": "2d203f264e623c37a718fdc7df7c53ff36c1ac22", "filename": "src/doc/style-guide/src/principles.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fprinciples.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fprinciples.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fprinciples.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -6,7 +6,7 @@ following principles (in rough priority order):\n * readability\n     - scan-ability\n     - avoiding misleading formatting\n-    - accessibility - readable and editable by users using the the widest\n+    - accessibility - readable and editable by users using the widest\n       variety of hardware, including non-visual accessibility interfaces\n     - readability of code in contexts without syntax highlighting or IDE\n       assistance, such as rustc error messages, diffs, grep, and other"}, {"sha": "ae456ef21c8d4ad2b8cb2bcedaf44ec08e138a02", "filename": "src/doc/style-guide/src/types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Fstyle-guide%2Fsrc%2Ftypes.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Fstyle-guide%2Fsrc%2Ftypes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Ftypes.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -6,7 +6,7 @@\n * `[T; expr]`, e.g., `[u32; 42]`, `[Vec<Foo>; 10 * 2 + foo()]` (space after colon, no spaces around square brackets)\n * `*const T`, `*mut T` (no space after `*`, space before type)\n * `&'a T`, `&T`, `&'a mut T`, `&mut T` (no space after `&`, single spaces separating other words)\n-* `unsafe extern \"C\" fn<'a, 'b, 'c>(T, U, V) -> W` or `fn()` (single spaces around keyowrds and sigils, and after commas, no trailing commas, no spaces around brackets)\n+* `unsafe extern \"C\" fn<'a, 'b, 'c>(T, U, V) -> W` or `fn()` (single spaces around keywords and sigils, and after commas, no trailing commas, no spaces around brackets)\n * `!` should be treated like any other type name, `Name`\n * `(A, B, C, D)` (spaces after commas, no spaces around parens, no trailing comma unless it is a one-tuple)\n * `<Baz<T> as SomeTrait>::Foo::Bar` or `Foo::Bar` or `::Foo::Bar` (no spaces around `::` or angle brackets, single spaces around `as`)"}, {"sha": "10f0fbc50626171dcf748391b3b112b7f236b7b0", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -202,5 +202,5 @@ fn shoot_lasers() {}\n \n #[cfg(feature = \"monkeys\")] // This is UNEXPECTED, because \"monkeys\" is not in\n                             // the values(feature) list\n-fn write_shakespear() {}\n+fn write_shakespeare() {}\n ```"}, {"sha": "aea054ba911fe923e527651a69718b749b7e7f11", "filename": "src/doc/unstable-book/src/compiler-flags/move-size-limit.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -6,5 +6,5 @@ The `-Zmove-size-limit=N` compiler flag enables `large_assignments` lints which\n will warn when moving objects whose size exceeds `N` bytes.\n \n Lint warns only about moves in functions that participate in code generation.\n-Consequently it will be ineffective for compiler invocatation that emit\n+Consequently it will be ineffective for compiler invocation that emit\n metadata only, i.e., `cargo check` like workflows."}, {"sha": "bab88b148b266851f0ee1ca9cf9232b36c8114f4", "filename": "src/doc/unstable-book/src/language-features/transparent-unions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a2c0eca3f2cf84b8eab4565001a41b597a498e8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md?ref=0a2c0eca3f2cf84b8eab4565001a41b597a498e8", "patch": "@@ -65,7 +65,7 @@ pub union GenericUnion<T: Copy> { // Unions with non-`Copy` fields are unstable.\n pub const THIS_IS_OKAY: GenericUnion<()> = GenericUnion { field: () };\n ```\n \n-Like transarent `struct`s, a transparent `union` of type `U` has the same\n+Like transparent `struct`s, a transparent `union` of type `U` has the same\n layout, size, and ABI as its single non-ZST field. If it is generic over a type\n `T`, and all its fields are ZSTs except for exactly one field of type `T`, then\n it has the same layout and ABI as `T` (even if `T` is a ZST when monomorphized)."}]}