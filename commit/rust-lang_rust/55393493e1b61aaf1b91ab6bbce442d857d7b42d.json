{"sha": "55393493e1b61aaf1b91ab6bbce442d857d7b42d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzkzNDkzZTFiNjFhYWYxYjkxYWI2YmJjZTQ0MmQ4NTdkN2I0MmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-07T04:43:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-14T19:27:07Z"}, "message": "rustc: Move ArchiveRO to rustc_llvm\n\nIt is a wrapper around LLVM.", "tree": {"sha": "2b3462f7961645ff99a66513f549b4be227e20b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3462f7961645ff99a66513f549b4be227e20b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55393493e1b61aaf1b91ab6bbce442d857d7b42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55393493e1b61aaf1b91ab6bbce442d857d7b42d", "html_url": "https://github.com/rust-lang/rust/commit/55393493e1b61aaf1b91ab6bbce442d857d7b42d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55393493e1b61aaf1b91ab6bbce442d857d7b42d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6a66f77ef362059328524d54b6b987322d2c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6a66f77ef362059328524d54b6b987322d2c36", "html_url": "https://github.com/rust-lang/rust/commit/7f6a66f77ef362059328524d54b6b987322d2c36"}], "stats": {"total": 131, "additions": 74, "deletions": 57}, "files": [{"sha": "c4a9d9c80ef1284ccf197a8723cace79e52ba43b", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=55393493e1b61aaf1b91ab6bbce442d857d7b42d", "patch": "@@ -10,15 +10,10 @@\n \n //! A helper class for dealing with static archives\n \n-use llvm::{ArchiveRef, llvm};\n-\n-use libc;\n use std::io::process::{Command, ProcessOutput};\n use std::io::{fs, TempDir};\n use std::io;\n-use std::mem;\n use std::os;\n-use std::raw;\n use std::str;\n use syntax::abi;\n use ErrorHandler = syntax::diagnostic::Handler;\n@@ -41,10 +36,6 @@ pub struct Archive<'a> {\n     maybe_ar_prog: Option<String>\n }\n \n-pub struct ArchiveRO {\n-    ptr: ArchiveRef,\n-}\n-\n fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,\n           args: &str, cwd: Option<&Path>,\n           paths: &[&Path]) -> ProcessOutput {\n@@ -238,49 +229,3 @@ impl<'a> Archive<'a> {\n     }\n }\n \n-impl ArchiveRO {\n-    /// Opens a static archive for read-only purposes. This is more optimized\n-    /// than the `open` method because it uses LLVM's internal `Archive` class\n-    /// rather than shelling out to `ar` for everything.\n-    ///\n-    /// If this archive is used with a mutable method, then an error will be\n-    /// raised.\n-    pub fn open(dst: &Path) -> Option<ArchiveRO> {\n-        unsafe {\n-            let ar = dst.with_c_str(|dst| {\n-                llvm::LLVMRustOpenArchive(dst)\n-            });\n-            if ar.is_null() {\n-                None\n-            } else {\n-                Some(ArchiveRO { ptr: ar })\n-            }\n-        }\n-    }\n-\n-    /// Reads a file in the archive\n-    pub fn read<'a>(&'a self, file: &str) -> Option<&'a [u8]> {\n-        unsafe {\n-            let mut size = 0 as libc::size_t;\n-            let ptr = file.with_c_str(|file| {\n-                llvm::LLVMRustArchiveReadSection(self.ptr, file, &mut size)\n-            });\n-            if ptr.is_null() {\n-                None\n-            } else {\n-                Some(mem::transmute(raw::Slice {\n-                    data: ptr,\n-                    len: size as uint,\n-                }))\n-            }\n-        }\n-    }\n-}\n-\n-impl Drop for ArchiveRO {\n-    fn drop(&mut self) {\n-        unsafe {\n-            llvm::LLVMRustDestroyArchive(self.ptr);\n-        }\n-    }\n-}"}, {"sha": "6fc60b657d31edbee728a7828258840722cecb77", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=55393493e1b61aaf1b91ab6bbce442d857d7b42d", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::archive::ArchiveRO;\n use super::link;\n use driver::session;\n use driver::config;\n+use llvm::archive_ro::ArchiveRO;\n use llvm::{ModuleRef, TargetMachineRef, llvm, True, False};\n use metadata::cstore;\n use util::common::time;"}, {"sha": "1877bd1260e517d611ce2930a41b11be52f62c5b", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=55393493e1b61aaf1b91ab6bbce442d857d7b42d", "patch": "@@ -212,10 +212,11 @@\n //! no means all of the necessary details. Take a look at the rest of\n //! metadata::loader or metadata::creader for all the juicy details!\n \n-use back::archive::{ArchiveRO, METADATA_FILENAME};\n+use back::archive::{METADATA_FILENAME};\n use back::svh::Svh;\n use driver::session::Session;\n use lib::llvm::{False, llvm, ObjectFile, mk_section_iter};\n+use lib::llvm::archive_ro::ArchiveRO;\n use metadata::cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n use metadata::decoder;\n use metadata::encoder;"}, {"sha": "0b0577f7e8c5e5690407448c48b578d6e6662fa2", "filename": "src/librustc_llvm/archive_ro.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=55393493e1b61aaf1b91ab6bbce442d857d7b42d", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A wrapper around LLVM's archive (.a) code\n+\n+use libc;\n+use ArchiveRef;\n+use llvm;\n+\n+use std::raw;\n+use std::mem;\n+\n+pub struct ArchiveRO {\n+    ptr: ArchiveRef,\n+}\n+\n+impl ArchiveRO {\n+    /// Opens a static archive for read-only purposes. This is more optimized\n+    /// than the `open` method because it uses LLVM's internal `Archive` class\n+    /// rather than shelling out to `ar` for everything.\n+    ///\n+    /// If this archive is used with a mutable method, then an error will be\n+    /// raised.\n+    pub fn open(dst: &Path) -> Option<ArchiveRO> {\n+        unsafe {\n+            let ar = dst.with_c_str(|dst| {\n+                llvm::LLVMRustOpenArchive(dst)\n+            });\n+            if ar.is_null() {\n+                None\n+            } else {\n+                Some(ArchiveRO { ptr: ar })\n+            }\n+        }\n+    }\n+\n+    /// Reads a file in the archive\n+    pub fn read<'a>(&'a self, file: &str) -> Option<&'a [u8]> {\n+        unsafe {\n+            let mut size = 0 as libc::size_t;\n+            let ptr = file.with_c_str(|file| {\n+                llvm::LLVMRustArchiveReadSection(self.ptr, file, &mut size)\n+            });\n+            if ptr.is_null() {\n+                None\n+            } else {\n+                Some(mem::transmute(raw::Slice {\n+                    data: ptr,\n+                    len: size as uint,\n+                }))\n+            }\n+        }\n+    }\n+}\n+\n+impl Drop for ArchiveRO {\n+    fn drop(&mut self) {\n+        unsafe {\n+            llvm::LLVMRustDestroyArchive(self.ptr);\n+        }\n+    }\n+}"}, {"sha": "47e642345f8d40bb4080de54edb655671e3d2ea4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55393493e1b61aaf1b91ab6bbce442d857d7b42d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=55393493e1b61aaf1b91ab6bbce442d857d7b42d", "patch": "@@ -32,6 +32,8 @@ extern crate libc;\n use std::c_str::ToCStr;\n use libc::{c_uint, c_ushort, uint64_t, c_int, size_t};\n \n+pub mod archive_ro;\n+\n pub type Opcode = u32;\n pub type Bool = c_uint;\n "}]}