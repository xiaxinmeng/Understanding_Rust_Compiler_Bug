{"sha": "38ccaed4ce0892bfa36c210302c42de1aa4dd584", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Y2NhZWQ0Y2UwODkyYmZhMzZjMjEwMzAyYzQyZGUxYWE0ZGQ1ODQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T02:05:13Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T02:05:13Z"}, "message": "Copyedit sections 1 and 2 of tutorial", "tree": {"sha": "8641b0fc9371b82bd62d1a6c1a39ee0b6f83d267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8641b0fc9371b82bd62d1a6c1a39ee0b6f83d267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ccaed4ce0892bfa36c210302c42de1aa4dd584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ccaed4ce0892bfa36c210302c42de1aa4dd584", "html_url": "https://github.com/rust-lang/rust/commit/38ccaed4ce0892bfa36c210302c42de1aa4dd584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ccaed4ce0892bfa36c210302c42de1aa4dd584/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c833af038bec879c8124520c68e7f27034d41ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c833af038bec879c8124520c68e7f27034d41ab", "html_url": "https://github.com/rust-lang/rust/commit/4c833af038bec879c8124520c68e7f27034d41ab"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "0ff2292717619228216544b496e3f0f2e166ce5d", "filename": "doc/tutorial.md", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/38ccaed4ce0892bfa36c210302c42de1aa4dd584/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/38ccaed4ce0892bfa36c210302c42de1aa4dd584/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=38ccaed4ce0892bfa36c210302c42de1aa4dd584", "patch": "@@ -4,7 +4,7 @@\n \n Rust is a programming language with a focus on type safety, memory\n safety, concurrency and performance. It is intended for writing\n-large-scale, high-performance software while preventing several\n+large-scale, high-performance software that is free from several\n classes of common errors. Rust has a sophisticated memory model that\n encourages efficient data structures and safe concurrency patterns,\n forbidding invalid memory accesses that would otherwise cause\n@@ -18,13 +18,14 @@ pleasant high-level features include:\n * **Type inference.** Type annotations on local variable declarations\n   are optional.\n * **Safe task-based concurrency.** Rust's lightweight tasks do not share\n-  memory and communicate through messages.\n+  memory, instead communicating through messages.\n * **Higher-order functions.** Efficient and flexible closures provide\n   iteration and other control structures\n * **Pattern matching and algebraic data types.** Pattern matching on\n-  Rust's enums is a compact and expressive way to encode program\n-  logic.\n-* **Polymorphism.** Rust has type-parameric functions and\n+  Rust's enumeration types (a more powerful version of C's enums,\n+  similar to algebraic data types in functional languages) is a\n+  compact and expressive way to encode program logic.\n+* **Polymorphism.** Rust has type-parametric functions and\n   types, type classes and OO-style interfaces.\n \n ## Scope\n@@ -35,23 +36,23 @@ type system and memory model, generics, and modules. [Additional\n tutorials](#what-next) cover specific language features in greater\n depth.\n \n-It assumes the reader is familiar with the basic concepts of\n+This tutorial assumes that the reader is familiar with the basic concepts of\n programming, and has programmed in one or more other languages\n-before. It will often make comparisons to other languages,\n+before. We will often compare Rust to other languages,\n particularly those in the C family.\n \n ## Conventions\n \n-Throughout the tutorial, words that indicate language keywords or\n-identifiers defined in example code are displayed in `code font`.\n+Throughout the tutorial, language keywords and identifiers defined in\n+example code are displayed in `code font`.\n \n Code snippets are indented, and also shown in a monospaced font. Not\n all snippets constitute whole programs. For brevity, we'll often show\n fragments of programs that don't compile on their own. To try them\n out, you might have to wrap them in `fn main() { ... }`, and make sure\n-they don't contain references to things that aren't actually defined.\n+they don't contain references to names that aren't actually defined.\n \n-> ***Warning:*** Rust is a language under heavy development. Notes\n+> ***Warning:*** Rust is a language under ongoing development. Notes\n > about potential changes to the language, implementation\n > deficiencies, and other caveats appear offset in blockquotes.\n \n@@ -77,9 +78,14 @@ You may find that other platforms work, but these are our \"tier 1\"\n supported build environments that are most likely to work.\n \n > ***Note:*** Windows users should read the detailed\n-> [getting started][wiki-start] notes on the wiki. Even when using\n-> the binary installer the Windows build requires a MinGW installation,\n-> the precise details of which are not discussed here.\n+> \"[getting started][wiki-start]\" notes on the wiki. Even when using\n+> the binary installer, the Windows build requires a MinGW installation,\n+> the precise details of which are not discussed here. Finally, `rustc` may\n+> need to be [referred to as `rustc.exe`][bug-3319]. It's a bummer, I\n+> know.\n+\n+[bug-3319]: https://github.com/mozilla/rust/issues/3319\n+[wiki-start]:\thttps://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust\n \n To build from source you will also need the following prerequisite\n packages:\n@@ -90,8 +96,8 @@ packages:\n * gnu make 3.81 or later\n * curl\n \n-Assuming you're on a relatively modern *nix system and have met the\n-prerequisites, something along these lines should work.\n+If you've fulfilled those prerequisites, something along these lines\n+should work.\n \n ~~~~ {.notrust}\n $ wget http://dl.rust-lang.org/dist/rust-0.4.tar.gz\n@@ -104,7 +110,7 @@ $ make && make install\n You may need to use `sudo make install` if you do not normally have\n permission to modify the destination directory. The install locations\n can be adjusted by passing a `--prefix` argument to\n-`configure`. Various other options are also supported, pass `--help`\n+`configure`. Various other options are also supported: pass `--help`\n for more information on them.\n \n When complete, `make install` will place several programs into\n@@ -130,10 +136,10 @@ If the Rust compiler was installed successfully, running `rustc\n hello.rs` will produce an executable called `hello` (or `hello.exe` on\n Windows) which, upon running, will likely do exactly what you expect.\n \n-The Rust compiler tries to provide useful information when it runs\n-into an error. If you modify the program to make it invalid (for\n-example, by changing `io::println` to some nonexistent function), and\n-then compile it, you'll see an error message like this:\n+The Rust compiler tries to provide useful information when it encounters an\n+error. If you introduce an error into the program (for example, by changing\n+`io::println` to some nonexistent function), and then compile it, you'll see\n+an error message like this:\n \n ~~~~ {.notrust}\n hello.rs:2:4: 2:16 error: unresolved name: io::print_with_unicorns\n@@ -144,19 +150,10 @@ hello.rs:2     io::print_with_unicorns(\"hello? yes, this is rust\");\n In its simplest form, a Rust program is a `.rs` file with some types\n and functions defined in it. If it has a `main` function, it can be\n compiled to an executable. Rust does not allow code that's not a\n-declaration to appear at the top level of the file\u2014all statements must\n+declaration to appear at the top level of the file: all statements must\n live inside a function.  Rust programs can also be compiled as\n libraries, and included in other programs.\n \n-> ***Note:*** There are some 'gotchas' to be aware of on\n-> Windows. First, the MinGW environment must be set up\n-> perfectly. Please read [the wiki][wiki-started]. Second, `rustc` may\n-> need to be [referred to as `rustc.exe`][bug-3319]. It's a bummer, I\n-> know.\n-\n-[bug-3319]: https://github.com/mozilla/rust/issues/3319\n-[wiki-started]:\thttps://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust\n-\n ## Editing Rust code\n \n There are vim highlighting and indentation scripts in the Rust source\n@@ -170,7 +167,7 @@ Sublime Text 2, available both [standalone][sublime] and through\n under `src/etc/kate`.\n \n There is ctags support via `src/etc/ctags.rust`, but many other\n-tools and editors are not provided for yet. If you end up writing a Rust\n+tools and editors are not yet supported. If you end up writing a Rust\n mode for your favorite editor, let us know so that we can link to it.\n \n [sublime]: http://github.com/dbp/sublime-rust"}]}