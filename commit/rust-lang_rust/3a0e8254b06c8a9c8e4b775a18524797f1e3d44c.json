{"sha": "3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMGU4MjU0YjA2YzhhOWM4ZTRiNzc1YTE4NTI0Nzk3ZjFlM2Q0NGM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-13T08:44:59Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Remove unnecessary `Result` (function always returned `Ok`)", "tree": {"sha": "6c2df8a97f050905595f2e4c4e2b40005439b107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2df8a97f050905595f2e4c4e2b40005439b107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "html_url": "https://github.com/rust-lang/rust/commit/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e7804110c77d572012f913a341523bdbaac4dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e7804110c77d572012f913a341523bdbaac4dd", "html_url": "https://github.com/rust-lang/rust/commit/07e7804110c77d572012f913a341523bdbaac4dd"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "42bcd3a90276071b13ed81eb85b91533129a2e59", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "patch": "@@ -406,12 +406,12 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n-    ) -> EvalResult<'tcx, &[(Size, (Tag, AllocId))]> {\n+    ) -> &[(Size, (Tag, AllocId))] {\n         // We have to go back `pointer_size - 1` bytes, as that one would still overlap with\n         // the beginning of this range.\n         let start = ptr.offset.bytes().saturating_sub(cx.data_layout().pointer_size.bytes() - 1);\n         let end = ptr.offset + size; // this does overflow checking\n-        Ok(self.relocations.range(Size::from_bytes(start)..end))\n+        self.relocations.range(Size::from_bytes(start)..end)\n     }\n \n     /// Check that there ar eno relocations overlapping with the given range.\n@@ -422,10 +422,10 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n-        if self.relocations(cx, ptr, size)?.len() != 0 {\n-            err!(ReadPointerAsBytes)\n-        } else {\n+        if self.relocations(cx, ptr, size).is_empty() {\n             Ok(())\n+        } else {\n+            err!(ReadPointerAsBytes)\n         }\n     }\n \n@@ -444,7 +444,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         // Find the start and end of the given range and its outermost relocations.\n         let (first, last) = {\n             // Find all relocations overlapping the given range.\n-            let relocations = self.relocations(cx, ptr, size)?;\n+            let relocations = self.relocations(cx, ptr, size);\n             if relocations.is_empty() {\n                 return Ok(());\n             }"}, {"sha": "896a7a25b5d954e05536fdbb40a6b16528cd44e3", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "patch": "@@ -655,7 +655,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // (`get_bytes_with_undef_and_ptr` below checks that there are no\n         // relocations overlapping the edges; those would not be handled correctly).\n         let relocations = {\n-            let relocations = self.get(src.alloc_id)?.relocations(self, src, size)?;\n+            let relocations = self.get(src.alloc_id)?.relocations(self, src, size);\n             let mut new_relocations = Vec::with_capacity(relocations.len() * (length as usize));\n             for i in 0..length {\n                 new_relocations.extend("}]}