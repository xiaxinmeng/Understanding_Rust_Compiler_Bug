{"sha": "09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDRkZWVmNWIzZjg0NTQ4YzBiOWY2ZTFmNzBiMGY1ODE4ZWJhMmQ=", "commit": {"author": {"name": "critiqjo", "email": "john.ch.fr@gmail.com", "date": "2015-09-22T12:55:01Z"}, "committer": {"name": "critiqjo", "email": "john.ch.fr@gmail.com", "date": "2015-09-24T18:47:54Z"}, "message": "trpl: Refactor returning closures section", "tree": {"sha": "8e907039f43c50d110af63386a6d0d416756fb36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e907039f43c50d110af63386a6d0d416756fb36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "html_url": "https://github.com/rust-lang/rust/commit/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d/comments", "author": {"login": "johncf", "id": 21051830, "node_id": "MDQ6VXNlcjIxMDUxODMw", "avatar_url": "https://avatars.githubusercontent.com/u/21051830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johncf", "html_url": "https://github.com/johncf", "followers_url": "https://api.github.com/users/johncf/followers", "following_url": "https://api.github.com/users/johncf/following{/other_user}", "gists_url": "https://api.github.com/users/johncf/gists{/gist_id}", "starred_url": "https://api.github.com/users/johncf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johncf/subscriptions", "organizations_url": "https://api.github.com/users/johncf/orgs", "repos_url": "https://api.github.com/users/johncf/repos", "events_url": "https://api.github.com/users/johncf/events{/privacy}", "received_events_url": "https://api.github.com/users/johncf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "johncf", "id": 21051830, "node_id": "MDQ6VXNlcjIxMDUxODMw", "avatar_url": "https://avatars.githubusercontent.com/u/21051830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johncf", "html_url": "https://github.com/johncf", "followers_url": "https://api.github.com/users/johncf/followers", "following_url": "https://api.github.com/users/johncf/following{/other_user}", "gists_url": "https://api.github.com/users/johncf/gists{/gist_id}", "starred_url": "https://api.github.com/users/johncf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johncf/subscriptions", "organizations_url": "https://api.github.com/users/johncf/orgs", "repos_url": "https://api.github.com/users/johncf/repos", "events_url": "https://api.github.com/users/johncf/events{/privacy}", "received_events_url": "https://api.github.com/users/johncf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f", "html_url": "https://github.com/rust-lang/rust/commit/f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "983af4a0efe7fb9613a9def0feafc4b1b9f95a58", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "patch": "@@ -411,8 +411,9 @@ fn factory() -> &(Fn(i32) -> i32) {\n ```\n \n Right. Because we have a reference, we need to give it a lifetime. But\n-our `factory()` function takes no arguments, so elision doesn\u2019t kick in\n-here. What lifetime can we choose? `'static`:\n+our `factory()` function takes no arguments, so\n+[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n+choices do we have? Try `'static`:\n \n ```rust,ignore\n fn factory() -> &'static (Fn(i32) -> i32) {\n@@ -432,7 +433,7 @@ But we get another error:\n ```text\n error: mismatched types:\n  expected `&'static core::ops::Fn(i32) -> i32`,\n-    found `[closure <anon>:7:9: 7:20]`\n+    found `[closure@<anon>:7:9: 7:20]`\n (expected &-ptr,\n     found closure) [E0308]\n          |x| x + num\n@@ -441,21 +442,17 @@ error: mismatched types:\n ```\n \n This error is letting us know that we don\u2019t have a `&'static Fn(i32) -> i32`,\n-we have a `[closure <anon>:7:9: 7:20]`. Wait, what?\n+we have a `[closure@<anon>:7:9: 7:20]`. Wait, what?\n \n Because each closure generates its own environment `struct` and implementation\n of `Fn` and friends, these types are anonymous. They exist just solely for\n-this closure. So Rust shows them as `closure <anon>`, rather than some\n+this closure. So Rust shows them as `closure@<anon>`, rather than some\n autogenerated name.\n \n-But why doesn\u2019t our closure implement `&'static Fn`? Well, as we discussed before,\n-closures borrow their environment. And in this case, our environment is based\n-on a stack-allocated `5`, the `num` variable binding. So the borrow has a lifetime\n-of the stack frame. So if we returned this closure, the function call would be\n-over, the stack frame would go away, and our closure is capturing an environment\n-of garbage memory!\n-\n-So what to do? This _almost_ works:\n+The error also points out that the return type is expected to be a reference,\n+but what we are trying to return is not. Further, we cannot directly assign a\n+`'static` lifetime to an object. So we'll take a different approach and return\n+a \"trait object\" by `Box`ing up the `Fn`. This _almost_ works:\n \n ```rust,ignore\n fn factory() -> Box<Fn(i32) -> i32> {\n@@ -471,7 +468,7 @@ assert_eq!(6, answer);\n # }\n ```\n \n-We use a trait object, by `Box`ing up the `Fn`. There\u2019s just one last problem:\n+There\u2019s just one last problem:\n \n ```text\n error: closure may outlive the current function, but it borrows `num`,\n@@ -480,8 +477,12 @@ Box::new(|x| x + num)\n          ^~~~~~~~~~~\n ```\n \n-We still have a reference to the parent stack frame. With one last fix, we can\n-make this work:\n+Well, as we discussed before, closures borrow their environment. And in this\n+case, our environment is based on a stack-allocated `5`, the `num` variable\n+binding. So the borrow has a lifetime of the stack frame. So if we returned\n+this closure, the function call would be over, the stack frame would go away,\n+and our closure is capturing an environment of garbage memory! With one last\n+fix, we can make this work:\n \n ```rust\n fn factory() -> Box<Fn(i32) -> i32> {"}]}