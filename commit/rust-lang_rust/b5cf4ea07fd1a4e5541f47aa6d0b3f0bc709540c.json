{"sha": "b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2Y0ZWEwN2ZkMWE0ZTU1NDFmNDdhYTZkMGIzZjBiYzcwOTU0MGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T02:18:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-25T02:18:04Z"}, "message": "Rollup merge of #58697 - taiki-e:question-in-macros, r=Centril\n\nUse ? in some macros", "tree": {"sha": "bb2acc3f19824f98a69530c59e526925ff10b04d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2acc3f19824f98a69530c59e526925ff10b04d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcc1BcCRBK7hj4Ov3rIwAAdHIIACrP0iXHj1sacVFZvQJxSjnv\nKY8vLQstjrbjLIfiTW+9aZs6CA1Lv26T1DNlPN/FfVrnqMprRI90mxNWkEUq3ZWf\nxSoGRXOORkCINDFwAPtOUfKZARNXhvGJcQyi8J6D9NqRUxKXkzJzEE/BU3OnyUi/\n9/2MuEOKq3SzvxhDSu1FvQ0mCB+kU1RIHgqe6JUCr6CiNBqJ/MVtLyMxnowJi5/0\n8MrPc0BxmCiAXTZKGbTD429w43Qzi2euRmWWoPGRRfSvlZ18RoviblekBRy2SoY7\nDs1kzC6KUJpHnhO4x5BIpwOSgRND/60jNP+G/j+OTQOoYsD3AsMFw9ETHoJeVGY=\n=gMVM\n-----END PGP SIGNATURE-----\n", "payload": "tree bb2acc3f19824f98a69530c59e526925ff10b04d\nparent ed73ec0e4cf1dbe11685f1311683d6fd31b7196f\nparent 871910a2c6e8624d4ebaa08ce6201b661f8c25f3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1551061084 +0100\ncommitter GitHub <noreply@github.com> 1551061084 +0100\n\nRollup merge of #58697 - taiki-e:question-in-macros, r=Centril\n\nUse ? in some macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "html_url": "https://github.com/rust-lang/rust/commit/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed73ec0e4cf1dbe11685f1311683d6fd31b7196f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed73ec0e4cf1dbe11685f1311683d6fd31b7196f", "html_url": "https://github.com/rust-lang/rust/commit/ed73ec0e4cf1dbe11685f1311683d6fd31b7196f"}, {"sha": "871910a2c6e8624d4ebaa08ce6201b661f8c25f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/871910a2c6e8624d4ebaa08ce6201b661f8c25f3", "html_url": "https://github.com/rust-lang/rust/commit/871910a2c6e8624d4ebaa08ce6201b661f8c25f3"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "c94d6cb4c1f5ab1541811a47230150751b05220d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -326,7 +326,7 @@ pub enum Kind {\n impl<'a> Builder<'a> {\n     fn get_step_descriptions(kind: Kind) -> Vec<StepDescription> {\n         macro_rules! describe {\n-            ($($rule:ty),+ $(,)*) => {{\n+            ($($rule:ty),+ $(,)?) => {{\n                 vec![$(StepDescription::from::<$rule>()),+]\n             }};\n         }"}, {"sha": "6052b4a4d43f402f39b91b55efbc82985c2674e9", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -222,8 +222,8 @@ impl fmt::Debug for Span {\n \n macro_rules! define_client_side {\n     ($($name:ident {\n-        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n-    }),* $(,)*) => {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*\n+    }),* $(,)?) => {\n         $(impl $name {\n             $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {\n                 Bridge::with(|bridge| {"}, {"sha": "276edb7300986a278beab3bdb79114e1cf43af7e", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -225,8 +225,8 @@ mod api_tags {\n \n     macro_rules! declare_tags {\n         ($($name:ident {\n-            $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n-        }),* $(,)*) => {\n+            $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*\n+        }),* $(,)?) => {\n             $(\n                 pub(super) enum $name {\n                     $($method),*\n@@ -307,7 +307,7 @@ impl<T: Unmark> Unmark for Option<T> {\n }\n \n macro_rules! mark_noop {\n-    ($($ty:ty),* $(,)*) => {\n+    ($($ty:ty),* $(,)?) => {\n         $(\n             impl Mark for $ty {\n                 type Unmarked = Self;"}, {"sha": "4289f33ffd5ebf2105acc21f5f3787b6bf48e8d9", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -53,7 +53,7 @@ macro_rules! rpc_encode_decode {\n             }\n         }\n     };\n-    (struct $name:ident { $($field:ident),* $(,)* }) => {\n+    (struct $name:ident { $($field:ident),* $(,)? }) => {\n         impl<S> Encode<S> for $name {\n             fn encode(self, w: &mut Writer, s: &mut S) {\n                 $(self.$field.encode(w, s);)*\n@@ -68,8 +68,8 @@ macro_rules! rpc_encode_decode {\n             }\n         }\n     };\n-    (enum $name:ident $(<$($T:ident),+>)* { $($variant:ident $(($field:ident))*),* $(,)* }) => {\n-        impl<S, $($($T: Encode<S>),+)*> Encode<S> for $name $(<$($T),+>)* {\n+    (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {\n+        impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)* {\n             fn encode(self, w: &mut Writer, s: &mut S) {\n                 // HACK(eddyb): `Tag` enum duplicated between the\n                 // two impls as there's no other place to stash it."}, {"sha": "f303e3e828834189ff9a773e63f7fdeccf86fb11", "filename": "src/libproc_macro/bridge/server.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fserver.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -39,14 +39,14 @@ macro_rules! associated_item {\n \n macro_rules! declare_server_traits {\n     ($($name:ident {\n-        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n-    }),* $(,)*) => {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*\n+    }),* $(,)?) => {\n         pub trait Types {\n             $(associated_item!(type $name);)*\n         }\n \n         $(pub trait $name: Types {\n-            $(associated_item!(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)*);)*\n+            $(associated_item!(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)?);)*\n         })*\n \n         pub trait Server: Types $(+ $name)* {}\n@@ -59,14 +59,14 @@ pub(super) struct MarkedTypes<S: Types>(S);\n \n macro_rules! define_mark_types_impls {\n     ($($name:ident {\n-        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n-    }),* $(,)*) => {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*\n+    }),* $(,)?) => {\n         impl<S: Types> Types for MarkedTypes<S> {\n             $(type $name = Marked<S::$name, client::$name>;)*\n         }\n \n         $(impl<S: $name> $name for MarkedTypes<S> {\n-            $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)* {\n+            $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {\n                 <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))\n             })*\n         })*\n@@ -81,8 +81,8 @@ struct Dispatcher<S: Types> {\n \n macro_rules! define_dispatcher_impl {\n     ($($name:ident {\n-        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n-    }),* $(,)*) => {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*\n+    }),* $(,)?) => {\n         // FIXME(eddyb) `pub` only for `ExecutionStrategy` below.\n         pub trait DispatcherTrait {\n             // HACK(eddyb) these are here to allow `Self::$name` to work below."}, {"sha": "2f91da4f62e3dc159168fbf87444becadc0cd60e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -111,7 +111,7 @@ macro_rules! define_dep_nodes {\n     (<$tcx:tt>\n     $(\n         [$($attr:ident),* ]\n-        $variant:ident $(( $tuple_arg_ty:ty $(,)* ))*\n+        $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n                        $({ $($struct_arg_name:ident : $struct_arg_ty:ty),* })*\n       ,)*\n     ) => ("}, {"sha": "8d9d1db5756b8fe0c32e6ca49d576d86cfd11b33", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -257,7 +257,7 @@ macro_rules! CloneTypeFoldableAndLiftImpls {\n macro_rules! BraceStructLiftImpl {\n     (impl<$($p:tt),*> Lift<$tcx:tt> for $s:path {\n         type Lifted = $lifted:ty;\n-        $($field:ident),* $(,)*\n+        $($field:ident),* $(,)?\n     } $(where $($wc:tt)*)*) => {\n         impl<$($p),*> $crate::ty::Lift<$tcx> for $s\n             $(where $($wc)*)*\n@@ -327,7 +327,7 @@ macro_rules! EnumLiftImpl {\n #[macro_export]\n macro_rules! BraceStructTypeFoldableImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($field:ident),* $(,)*\n+        $($field:ident),* $(,)?\n     } $(where $($wc:tt)*)*) => {\n         impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n             $(where $($wc)*)*\n@@ -354,7 +354,7 @@ macro_rules! BraceStructTypeFoldableImpl {\n #[macro_export]\n macro_rules! TupleStructTypeFoldableImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($field:ident),* $(,)*\n+        $($field:ident),* $(,)?\n     } $(where $($wc:tt)*)*) => {\n         impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n             $(where $($wc)*)*\n@@ -426,7 +426,7 @@ macro_rules! EnumTypeFoldableImpl {\n     };\n \n     (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)* } , $($input:tt)*)\n+     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n         EnumTypeFoldableImpl!(\n             @FoldVariants($this, $folder)\n@@ -480,7 +480,7 @@ macro_rules! EnumTypeFoldableImpl {\n     };\n \n     (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)* } , $($input:tt)*)\n+     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n      output( $($output:tt)*) ) => {\n         EnumTypeFoldableImpl!(\n             @VisitVariants($this, $visitor)"}, {"sha": "0c808a07f9bac95f27a074b89399bb3926366bde", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -36,7 +36,7 @@ macro_rules! forward {\n     // Forward pattern for &self -> &Self\n     (\n         $(#[$attrs:meta])*\n-        pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)*) -> &Self\n+        pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)?) -> &Self\n     ) => {\n         $(#[$attrs])*\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n@@ -48,7 +48,7 @@ macro_rules! forward {\n     // Forward pattern for &mut self -> &mut Self\n     (\n         $(#[$attrs:meta])*\n-        pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)*) -> &mut Self\n+        pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)?) -> &mut Self\n     ) => {\n         $(#[$attrs])*\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n@@ -64,7 +64,7 @@ macro_rules! forward {\n         pub fn $n:ident<S: Into<MultiSpan>>(\n             &mut self,\n             $($name:ident: $ty:ty),*\n-            $(,)*\n+            $(,)?\n         ) -> &mut Self\n     ) => {\n         $(#[$attrs])*"}, {"sha": "45e1ea2d3a39d294d3ddde311fa5e46b85959c2e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -431,7 +431,7 @@ mod test {\n     }\n \n     macro_rules! dummy_meta_item_list {\n-        ($name:ident, [$($list:ident),* $(,)*]) => {\n+        ($name:ident, [$($list:ident),* $(,)?]) => {\n             MetaItem {\n                 ident: Path::from_ident(Ident::from_str(stringify!($name))),\n                 node: MetaItemKind::List(vec![\n@@ -445,7 +445,7 @@ mod test {\n             }\n         };\n \n-        ($name:ident, [$($list:expr),* $(,)*]) => {\n+        ($name:ident, [$($list:expr),* $(,)?]) => {\n             MetaItem {\n                 ident: Path::from_ident(Ident::from_str(stringify!($name))),\n                 node: MetaItemKind::List(vec!["}, {"sha": "4c4b33c04422b08abfec7cba104a38b739b0623a", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=b5cf4ea07fd1a4e5541f47aa6d0b3f0bc709540c", "patch": "@@ -69,7 +69,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n         };\n \n         macro_rules! tt {\n-            ($ty:ident { $($field:ident $(: $value:expr)*),+ $(,)* }) => (\n+            ($ty:ident { $($field:ident $(: $value:expr)*),+ $(,)? }) => (\n                 TokenTree::$ty(self::$ty {\n                     $($field $(: $value)*,)*\n                     span,"}]}