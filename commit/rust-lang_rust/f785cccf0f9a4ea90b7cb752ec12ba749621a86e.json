{"sha": "f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODVjY2NmMGY5YTRlYTkwYjdjYjc1MmVjMTJiYTc0OTYyMWE4NmU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-23T22:34:43Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-24T18:44:58Z"}, "message": "Bugfix: make the parser handle the case where zero repetitions occur, by handling parse results on the basis of what names the matcher expects to bind, not on what names are actually bound.", "tree": {"sha": "62df02d9d6d22d04da3e75776f95c7ac17a5e9f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62df02d9d6d22d04da3e75776f95c7ac17a5e9f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "html_url": "https://github.com/rust-lang/rust/commit/f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c472564e37567dda820062cfd117115113b9def", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c472564e37567dda820062cfd117115113b9def", "html_url": "https://github.com/rust-lang/rust/commit/1c472564e37567dda820062cfd117115113b9def"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "761bfd906ad2031e9d8cee991949a6e32b577dc4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "patch": "@@ -378,8 +378,9 @@ type matcher = spanned<matcher_>;\n enum matcher_ {\n     /* match one token */\n     mtc_tok(token::token),\n-    /* match repetitions of a sequence: body, separator, zero ok? : */\n-    mtc_rep(~[matcher], option<token::token>, bool),\n+    /* match repetitions of a sequence: body, separator, zero ok?,\n+    lo, hi position-in-match-array used: */\n+    mtc_rep(~[matcher], option<token::token>, bool, uint, uint),\n     /* parse a Rust NT: name to bind, name of NT, position in match array : */\n     mtc_bb(ident, ident, uint)\n }"}, {"sha": "5015efa67dffe3d5186843d3796be3010f3de661", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "patch": "@@ -41,6 +41,7 @@ type matcher_pos = ~{\n     mut idx: uint,\n     mut up: matcher_pos_up, // mutable for swapping only\n     matches: ~[dvec<@arb_depth>],\n+    match_lo: uint, match_hi: uint,\n     sp_lo: uint,\n };\n \n@@ -55,17 +56,25 @@ fn count_names(ms: &[matcher]) -> uint {\n     vec::foldl(0u, ms, |ct, m| {\n         ct + alt m.node {\n           mtc_tok(_) { 0u }\n-          mtc_rep(more_ms, _, _) { count_names(more_ms) }\n+          mtc_rep(more_ms, _, _, _, _) { count_names(more_ms) }\n           mtc_bb(_,_,_) { 1u }\n         }})\n }\n \n #[warn(no_non_implicitly_copyable_typarams)]\n-fn new_matcher_pos(ms: ~[matcher], sep: option<token>, lo: uint)\n+fn initial_matcher_pos(ms: ~[matcher], sep: option<token>, lo: uint)\n     -> matcher_pos {\n+    let mut match_idx_hi = 0u;\n+    for ms.each() |elt| {\n+        alt elt.node {\n+          mtc_tok(_) {}\n+          mtc_rep(_,_,_,_,hi) { match_idx_hi = hi; } //it is monotonic...\n+          mtc_bb(_,_,pos) { match_idx_hi = pos+1u; } //...so latest is highest\n+        }\n+    }\n     ~{elts: ms, sep: sep, mut idx: 0u, mut up: matcher_pos_up(none),\n       matches: copy vec::from_fn(count_names(ms), |_i| dvec::dvec()),\n-      sp_lo: lo}\n+      match_lo: 0u, match_hi: match_idx_hi, sp_lo: lo}\n }\n \n /* logically, an arb_depth should contain only one kind of nonterminal */\n@@ -79,7 +88,7 @@ fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@arb_depth])\n              ret_val: hashmap<ident, @arb_depth>) {\n         alt m {\n           {node: mtc_tok(_), span: _} { }\n-          {node: mtc_rep(more_ms, _, _), span: _} {\n+          {node: mtc_rep(more_ms, _, _, _, _), span: _} {\n             for more_ms.each() |next_m| { n_rec(p_s, next_m, res, ret_val) };\n           }\n           {node: mtc_bb(bind_name, _, idx), span: sp} {\n@@ -104,7 +113,7 @@ enum parse_result {\n fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n     -> parse_result {\n     let mut cur_eis = ~[];\n-    vec::push(cur_eis, new_matcher_pos(ms, none, rdr.peek().sp.lo));\n+    vec::push(cur_eis, initial_matcher_pos(ms, none, rdr.peek().sp.lo));\n \n     loop {\n         let mut bb_eis = ~[]; // black-box parsed by parser.rs\n@@ -141,10 +150,10 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                         // I bet this is a perf problem: we're preemptively\n                         // doing a lot of array work that will get thrown away\n                         // most of the time.\n-                        for ei.matches.eachi() |idx, elt| {\n-                            let sub = elt.get();\n-                            // Some subtrees don't contain the name at all\n-                            if sub.len() == 0u { again; }\n+\n+                        // Only touch the binders we have actually bound\n+                        for uint::range(ei.match_lo, ei.match_hi) |idx| {\n+                            let sub = ei.matches[idx].get();\n                             new_pos.matches[idx]\n                                 .push(@seq(sub, mk_sp(ei.sp_lo,sp.hi)));\n                         }\n@@ -176,10 +185,15 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n             } else {\n                 alt copy ei.elts[idx].node {\n                   /* need to descend into sequence */\n-                  mtc_rep(matchers, sep, zero_ok) {\n+                  mtc_rep(matchers, sep, zero_ok, match_idx_lo, match_idx_hi){\n                     if zero_ok {\n                         let new_ei = copy ei;\n                         new_ei.idx += 1u;\n+                        //we specifically matched zero repeats.\n+                        for uint::range(match_idx_lo, match_idx_hi) |idx| {\n+                            new_ei.matches[idx].push(@seq(~[], sp));\n+                        }\n+\n                         vec::push(cur_eis, new_ei);\n                     }\n \n@@ -189,7 +203,9 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                     vec::push(cur_eis, ~{\n                         elts: matchers, sep: sep, mut idx: 0u,\n                         mut up: matcher_pos_up(some(ei_t)),\n-                        matches: matches, sp_lo: sp.lo\n+                        matches: matches,\n+                        match_lo: match_idx_lo, match_hi: match_idx_hi,\n+                        sp_lo: sp.lo\n                     });\n                   }\n                   mtc_bb(_,_,_) { vec::push(bb_eis, ei) }"}, {"sha": "a1bb879965fbb5b9359f5ebeafc946825170e494", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "patch": "@@ -21,7 +21,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n             ms(mtc_bb(@~\"lhs\",@~\"mtcs\", 0u)),\n             ms(mtc_tok(FAT_ARROW)),\n             ms(mtc_bb(@~\"rhs\",@~\"tt\", 1u)),\n-        ], some(SEMI), false))];\n+        ], some(SEMI), false, 0u, 2u))];\n \n     let arg_reader = new_tt_reader(cx.parse_sess().span_diagnostic,\n                                    cx.parse_sess().interner, none, arg);"}, {"sha": "b9d4adc2339e6dc6a42e2c0a68ac4218e061c353", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "patch": "@@ -86,6 +86,8 @@ pure fn lookup_cur_ad_by_ad(r: tt_reader, start: @arb_depth) -> @arb_depth {\n           seq(ads, _) { ads[idx] }\n         }\n     }\n+    unchecked {io::println(#fmt[\"%? / %?\", copy r.repeat_idx,\n+                                copy r.repeat_len]);};\n     vec::foldl(start, r.repeat_idx, red)\n }\n "}, {"sha": "b9fb9dab37423fc775d28143ace922e824a1f4ca", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f785cccf0f9a4ea90b7cb752ec12ba749621a86e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f785cccf0f9a4ea90b7cb752ec12ba749621a86e", "patch": "@@ -1194,13 +1194,14 @@ class parser {\n         let m = if self.token == token::DOLLAR {\n             self.bump();\n             if self.token == token::LPAREN {\n+                let name_idx_lo = *name_idx;\n                 let ms = self.parse_matcher_subseq(name_idx, token::LPAREN,\n                                                    token::RPAREN);\n                 if ms.len() == 0u {\n                     self.fatal(~\"repetition body must be nonempty\");\n                 }\n                 let (sep, zerok) = self.parse_sep_and_zerok();\n-                mtc_rep(ms, sep, zerok)\n+                mtc_rep(ms, sep, zerok, name_idx_lo, *name_idx)\n             } else {\n                 let bound_to = self.parse_ident();\n                 self.expect(token::COLON);"}]}