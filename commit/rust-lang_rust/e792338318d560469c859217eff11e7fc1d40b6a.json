{"sha": "e792338318d560469c859217eff11e7fc1d40b6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OTIzMzgzMThkNTYwNDY5Yzg1OTIxN2VmZjExZTdmYzFkNDBiNmE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-09T17:58:15Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:04:41Z"}, "message": "librustdoc: use tuple indexing", "tree": {"sha": "e165d42616831d3c4e670198f60db3ed561fed7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e165d42616831d3c4e670198f60db3ed561fed7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e792338318d560469c859217eff11e7fc1d40b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e792338318d560469c859217eff11e7fc1d40b6a", "html_url": "https://github.com/rust-lang/rust/commit/e792338318d560469c859217eff11e7fc1d40b6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e792338318d560469c859217eff11e7fc1d40b6a/comments", "author": null, "committer": null, "parents": [{"sha": "0c5d22c9cdb3a6e7ce5f524c24fa60393e6253e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5d22c9cdb3a6e7ce5f524c24fa60393e6253e2", "html_url": "https://github.com/rust-lang/rust/commit/0c5d22c9cdb3a6e7ce5f524c24fa60393e6253e2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "484eed649bbcd945eec13ab4c2546e3166ea897e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=e792338318d560469c859217eff11e7fc1d40b6a", "patch": "@@ -346,7 +346,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n                 Some(root) => {\n                     try!(write!(f, \"<a href='{}{}/primitive.{}.html'>\",\n                                 root,\n-                                path.ref0().head().unwrap(),\n+                                path.0.head().unwrap(),\n                                 prim.to_url_str()));\n                     needs_termination = true;\n                 }"}, {"sha": "542169620e64886ba9ad8f2290a9978d4ed9d771", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e792338318d560469c859217eff11e7fc1d40b6a", "patch": "@@ -323,7 +323,7 @@ pub fn run(mut krate: clean::Crate,\n       }).unwrap_or(HashMap::new());\n     let mut cache = Cache {\n         impls: HashMap::new(),\n-        external_paths: paths.iter().map(|(&k, v)| (k, v.ref0().clone()))\n+        external_paths: paths.iter().map(|(&k, v)| (k, v.0.clone()))\n                              .collect(),\n         paths: paths,\n         implementors: HashMap::new(),"}, {"sha": "d3a766285809bdee95d157255ae8917354301b91", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e792338318d560469c859217eff11e7fc1d40b6a", "patch": "@@ -400,7 +400,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n                                  .position(|&(p, _, _)| {\n                                      p == *pass\n                                  }) {\n-            Some(i) => PASSES[i].val1(),\n+            Some(i) => PASSES[i].1,\n             None => {\n                 error!(\"unknown pass {}, skipping\", *pass);\n                 continue"}, {"sha": "70cabb24397056c4f51f365a3fee2fc1cd60b5af", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e792338318d560469c859217eff11e7fc1d40b6a/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=e792338318d560469c859217eff11e7fc1d40b6a", "patch": "@@ -151,14 +151,14 @@ fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n         ImplItem(Impl { items: ref subitems, trait_: None, .. }) => {\n             let subcounts = subitems.iter().filter(|i| visible(*i))\n                                            .map(summarize_item)\n-                                           .map(|s| s.val0())\n+                                           .map(|s| s.0)\n                                            .fold(Counts::zero(), |acc, x| acc + x);\n             (subcounts, None)\n         }\n         // `pub` automatically\n         EnumItem(Enum { variants: ref subitems, .. }) => {\n             let subcounts = subitems.iter().map(summarize_item)\n-                                           .map(|s| s.val0())\n+                                           .map(|s| s.0)\n                                            .fold(Counts::zero(), |acc, x| acc + x);\n             (item_counts + subcounts, None)\n         }\n@@ -176,7 +176,7 @@ fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n             let subcounts = trait_items.iter()\n                                        .map(extract_item)\n                                        .map(summarize_item)\n-                                       .map(|s| s.val0())\n+                                       .map(|s| s.0)\n                                        .fold(Counts::zero(), |acc, x| acc + x);\n             (item_counts + subcounts, None)\n         }\n@@ -212,7 +212,7 @@ pub fn build(krate: &Crate) -> ModuleSummary {\n             submodules: Vec::new(),\n         },\n         Some(ref item) => ModuleSummary {\n-            name: krate.name.clone(), .. summarize_item(item).val1().unwrap()\n+            name: krate.name.clone(), .. summarize_item(item).1.unwrap()\n         }\n     }\n }"}]}