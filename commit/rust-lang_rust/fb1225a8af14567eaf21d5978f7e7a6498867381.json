{"sha": "fb1225a8af14567eaf21d5978f7e7a6498867381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMTIyNWE4YWYxNDU2N2VhZjIxZDU5NzhmN2U3YTY0OTg4NjczODE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-20T12:35:52Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-20T13:35:16Z"}, "message": "Use format_expr wherever single-lined block is not allowed", "tree": {"sha": "c2ee4150c595204de58ee564a3273e3dd2dcf5c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ee4150c595204de58ee564a3273e3dd2dcf5c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1225a8af14567eaf21d5978f7e7a6498867381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1225a8af14567eaf21d5978f7e7a6498867381", "html_url": "https://github.com/rust-lang/rust/commit/fb1225a8af14567eaf21d5978f7e7a6498867381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1225a8af14567eaf21d5978f7e7a6498867381/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb20e20333127add88aa712091a958a0539a604", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb20e20333127add88aa712091a958a0539a604", "html_url": "https://github.com/rust-lang/rust/commit/eeb20e20333127add88aa712091a958a0539a604"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "e3c80cd95ca5147024794a69cc5ccdf427d8ddeb", "filename": "src/expr.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fb1225a8af14567eaf21d5978f7e7a6498867381/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1225a8af14567eaf21d5978f7e7a6498867381/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fb1225a8af14567eaf21d5978f7e7a6498867381", "patch": "@@ -42,7 +42,7 @@ impl Rewrite for ast::Expr {\n }\n \n #[derive(PartialEq)]\n-enum ExprType {\n+pub enum ExprType {\n     Statement,\n     SubExpression,\n }\n@@ -67,7 +67,7 @@ fn combine_attr_and_expr(\n     format!(\"{}{}{}\", attr_str, separator, expr_str)\n }\n \n-fn format_expr(\n+pub fn format_expr(\n     expr: &ast::Expr,\n     expr_type: ExprType,\n     context: &RewriteContext,\n@@ -160,7 +160,23 @@ fn format_expr(\n             to_control_flow(expr, expr_type)\n                 .and_then(|control_flow| control_flow.rewrite(context, shape))\n         }\n-        ast::ExprKind::Block(ref block) => block.rewrite(context, shape),\n+        ast::ExprKind::Block(ref block) => {\n+            match expr_type {\n+                ExprType::Statement => {\n+                    if is_unsafe_block(block) {\n+                        block.rewrite(context, shape)\n+                    } else {\n+                        // Rewrite block without trying to put it in a single line.\n+                        if let rw @ Some(_) = rewrite_empty_block(context, block, shape) {\n+                            return rw;\n+                        }\n+                        let prefix = try_opt!(block_prefix(context, block, shape));\n+                        rewrite_block_with_visitor(context, &prefix, block, shape)\n+                    }\n+                }\n+                ExprType::SubExpression => block.rewrite(context, shape),\n+            }\n+        }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n             rewrite_match(context, cond, arms, shape, expr.span)\n         }\n@@ -1280,7 +1296,12 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         };\n         let mut block_context = context.clone();\n         block_context.is_if_else_block = self.else_block.is_some();\n-        let block_str = try_opt!(self.block.rewrite(&block_context, block_shape));\n+        let block_str = try_opt!(rewrite_block_with_visitor(\n+            &block_context,\n+            \"\",\n+            self.block,\n+            block_shape,\n+        ));\n \n         let mut result = format!(\"{}{}\", cond_str, block_str);\n \n@@ -1322,7 +1343,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                         width: min(1, shape.width),\n                         ..shape\n                     };\n-                    else_block.rewrite(context, else_shape)\n+                    format_expr(else_block, ExprType::Statement, context, else_shape)\n                 }\n             };\n \n@@ -1689,7 +1710,10 @@ impl Rewrite for ast::Arm {\n                 .unwrap()\n                 .sub_width(comma.len())\n                 .unwrap();\n-            let rewrite = nop_block_collapse(body.rewrite(context, arm_shape), arm_shape.width);\n+            let rewrite = nop_block_collapse(\n+                format_expr(body, ExprType::Statement, context, arm_shape),\n+                arm_shape.width,\n+            );\n             let is_block = if let ast::ExprKind::Block(..) = body.node {\n                 true\n             } else {\n@@ -1724,7 +1748,7 @@ impl Rewrite for ast::Arm {\n         // necessary.\n         let body_shape = try_opt!(shape.block_left(context.config.tab_spaces()));\n         let next_line_body = try_opt!(nop_block_collapse(\n-            body.rewrite(context, body_shape),\n+            format_expr(body, ExprType::Statement, context, body_shape),\n             body_shape.width,\n         ));\n         let indent_str = shape"}, {"sha": "cb68231733ecb0ddaa7410eecb874b3552e8f003", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb1225a8af14567eaf21d5978f7e7a6498867381/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1225a8af14567eaf21d5978f7e7a6498867381/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fb1225a8af14567eaf21d5978f7e7a6498867381", "patch": "@@ -17,7 +17,7 @@ use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wr\n             trimmed_last_line_width, colon_spaces, mk_sp};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n             DefinitiveListTactic, ListTactic, definitive_tactic};\n-use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n+use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, ExprType};\n use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n@@ -352,7 +352,9 @@ impl<'a> FmtVisitor<'a> {\n                         Some(e) => {\n                             let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n \n-                            e.rewrite(\n+                            format_expr(\n+                                &e,\n+                                ExprType::Statement,\n                                 &self.get_context(),\n                                 Shape::indented(self.block_indent, self.config),\n                             ).map(|s| s + suffix)"}, {"sha": "0f574d433fd054b47b8c4e59abf80c21740f3a7f", "filename": "src/visitor.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb1225a8af14567eaf21d5978f7e7a6498867381/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1225a8af14567eaf21d5978f7e7a6498867381/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fb1225a8af14567eaf21d5978f7e7a6498867381", "patch": "@@ -17,6 +17,7 @@ use syntax::parse::ParseSess;\n use strings::string_buffer::StringBuffer;\n \n use {Indent, Shape};\n+use expr::{format_expr, ExprType};\n use utils::{self, mk_sp};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, FindUncommented};\n@@ -87,7 +88,20 @@ impl<'a> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(stmt.span, rewrite);\n             }\n-            ast::StmtKind::Expr(ref expr) |\n+            ast::StmtKind::Expr(ref expr) => {\n+                let rewrite = format_expr(\n+                    expr,\n+                    ExprType::Statement,\n+                    &self.get_context(),\n+                    Shape::indented(self.block_indent, self.config),\n+                );\n+                let span = if expr.attrs.is_empty() {\n+                    stmt.span\n+                } else {\n+                    mk_sp(expr.attrs[0].span.lo, stmt.span.hi)\n+                };\n+                self.push_rewrite(span, rewrite)\n+            }\n             ast::StmtKind::Semi(ref expr) => {\n                 let rewrite = stmt.rewrite(\n                     &self.get_context(),"}]}