{"sha": "6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOGZlNGVhZWZlOGZiYzRmOGE4ZDMxNGRlZDBmZTFhMzAwYzM1Zjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-19T14:40:53Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T09:01:35Z"}, "message": "Eliminate old CTFE's `ErrKind`", "tree": {"sha": "d30de39e4968155f811cae2e927f87b92fe56c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d30de39e4968155f811cae2e927f87b92fe56c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "html_url": "https://github.com/rust-lang/rust/commit/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fdac638ea57f60bb2bea4b35f8fc5988df9387", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fdac638ea57f60bb2bea4b35f8fc5988df9387", "html_url": "https://github.com/rust-lang/rust/commit/58fdac638ea57f60bb2bea4b35f8fc5988df9387"}], "stats": {"total": 164, "additions": 50, "deletions": 114}, "files": [{"sha": "0d3ac8edbd31dc8ac3831905d9d0b5765b64d999", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -505,7 +505,7 @@ impl_stable_hash_for!(struct ty::Const<'tcx> {\n \n impl_stable_hash_for!(struct ::middle::const_val::ConstEvalErr<'tcx> {\n     span,\n-    kind\n+    data\n });\n \n impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {\n@@ -514,29 +514,6 @@ impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {\n     location\n });\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::middle::const_val::ErrKind<'gcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        use middle::const_val::ErrKind::*;\n-\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            TypeckError |\n-            CouldNotResolve |\n-            CheckMatchError => {\n-                // nothing to do\n-            }\n-            Miri(ref err, ref trace) => {\n-                err.hash_stable(hcx, hasher);\n-                trace.hash_stable(hcx, hasher);\n-            },\n-        }\n-    }\n-}\n-\n impl_stable_hash_for!(struct ty::ClosureSubsts<'tcx> { substs });\n impl_stable_hash_for!(struct ty::GeneratorSubsts<'tcx> { substs });\n \n@@ -593,6 +570,8 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             ReadFromReturnPointer |\n             UnimplementedTraitSelection |\n             TypeckError |\n+            ResolutionFailed |\n+            CheckMatchError |\n             DerefFunctionPointer |\n             ExecuteMemory |\n             OverflowNeg |"}, {"sha": "588265dffa75fa8d1fce3052de4cbfcdb511538c", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 14, "deletions": 47, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -33,16 +33,7 @@ pub enum ConstVal<'tcx> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub kind: Lrc<ErrKind<'tcx>>,\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum ErrKind<'tcx> {\n-\n-    CouldNotResolve,\n-    TypeckError,\n-    CheckMatchError,\n-    Miri(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>),\n+    pub data: Lrc<(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>)>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n@@ -69,25 +60,6 @@ impl<'a, 'tcx> ConstEvalErrDescription<'a, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n-    pub fn description(&'a self) -> ConstEvalErrDescription<'a, 'tcx> {\n-        use self::ErrKind::*;\n-        use self::ConstEvalErrDescription::*;\n-\n-        macro_rules! simple {\n-            ($msg:expr) => ({ Simple($msg.into_cow()) });\n-            ($fmt:expr, $($arg:tt)+) => ({\n-                Simple(format!($fmt, $($arg)+).into_cow())\n-            })\n-        }\n-\n-        match *self.kind {\n-            CouldNotResolve => simple!(\"could not resolve\"),\n-            TypeckError => simple!(\"type-checking failed\"),\n-            CheckMatchError => simple!(\"match-checking failed\"),\n-            Miri(ref err, ref trace) => Backtrace(err, trace),\n-        }\n-    }\n-\n     pub fn struct_error(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str)\n@@ -127,24 +99,19 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         message: &str,\n         lint_root: Option<ast::NodeId>,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n-        let (msg, frames): (_, &[_]) = match *self.kind {\n-            ErrKind::TypeckError | ErrKind::CheckMatchError => return None,\n-            ErrKind::Miri(ref miri, ref frames) => {\n-                match miri.kind {\n-                    ::mir::interpret::EvalErrorKind::TypeckError |\n-                    ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n-                    ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n-                        inner.struct_generic(tcx, \"referenced constant\", lint_root)?.emit();\n-                        (miri.to_string(), frames)\n-                    },\n-                    _ => (miri.to_string(), frames),\n-                }\n-            }\n-            _ => (self.description().into_oneline().to_string(), &[]),\n-        };\n+        match self.data.0.kind {\n+            ::mir::interpret::EvalErrorKind::TypeckError |\n+            ::mir::interpret::EvalErrorKind::ResolutionFailed |\n+            ::mir::interpret::EvalErrorKind::CheckMatchError |\n+            ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n+            ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n+                inner.struct_generic(tcx, \"referenced constant\", lint_root)?.emit();\n+            },\n+            _ => {},\n+        }\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n         let mut err = if let Some(lint_root) = lint_root {\n-            let node_id = frames\n+            let node_id = self.data.1\n                 .iter()\n                 .rev()\n                 .filter_map(|frame| frame.lint_root)\n@@ -159,8 +126,8 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         } else {\n             struct_error(tcx, message)\n         };\n-        err.span_label(self.span, msg);\n-        for FrameInfo { span, location, .. } in frames {\n+        err.span_label(self.span, self.data.0.to_string());\n+        for FrameInfo { span, location, .. } in &self.data.1 {\n             err.span_label(*span, format!(\"inside call to `{}`\", location));\n         }\n         Some(err)"}, {"sha": "4771875760df161f4fb1934cad5b92b88b9a756d", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -150,6 +150,9 @@ pub enum EvalErrorKind<'tcx, O> {\n     UnimplementedTraitSelection,\n     /// Abort in case type errors are reached\n     TypeckError,\n+    /// Resolution can fail if we are in a too generic context\n+    ResolutionFailed,\n+    CheckMatchError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n     ReferencedConstant(ConstEvalErr<'tcx>),\n@@ -268,6 +271,10 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"there were unresolved type arguments during trait selection\",\n             TypeckError =>\n                 \"encountered constants with type errors, stopping evaluation\",\n+            ResolutionFailed =>\n+                \"encountered overly generic constant\",\n+            CheckMatchError =>\n+                \"match checking failed\",\n             ReferencedConstant(_) =>\n                 \"referenced constant has errors\",\n             Overflow(mir::BinOp::Add) => \"attempt to add with overflow\","}, {"sha": "288634a800c613eb0e65f47e884f00877e2bdd7f", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -16,7 +16,8 @@ use rustc_data_structures::obligation_forest::{Error, ForestObligation, Obligati\n use rustc_data_structures::obligation_forest::{ObligationProcessor, ProcessResult};\n use std::marker::PhantomData;\n use hir::def_id::DefId;\n-use middle::const_val::{ConstEvalErr, ErrKind};\n+use middle::const_val::ConstEvalErr;\n+use mir::interpret::EvalErrorKind;\n \n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n@@ -498,10 +499,11 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                                             CodeSelectionError(ConstEvalFailure(err)))\n                                     }\n                                 } else {\n+                                    let err = EvalErrorKind::ResolutionFailed.into();\n                                     ProcessResult::Error(\n                                         CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                             span: obligation.cause.span,\n-                                            kind: ErrKind::CouldNotResolve.into(),\n+                                            data: (err, Vec::new()).into(),\n                                         }))\n                                     )\n                                 }"}, {"sha": "2bc4698c44aa2c3f527fd336ed202cce51932420", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -13,7 +13,7 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use middle::const_val::{self, ConstVal, ConstEvalErr};\n+use middle::const_val::{ConstVal, ConstEvalErr};\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n@@ -462,10 +462,10 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n     type Lifted = ConstEvalErr<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&*self.kind).map(|kind| {\n+        tcx.lift(&self.data.0).map(|data| {\n             ConstEvalErr {\n                 span: self.span,\n-                kind: Lrc::new(kind),\n+                data: Lrc::new((data, self.data.1.clone())),\n             }\n         })\n     }\n@@ -577,6 +577,8 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             PathNotFound(ref v) => PathNotFound(v.clone()),\n             UnimplementedTraitSelection => UnimplementedTraitSelection,\n             TypeckError => TypeckError,\n+            ResolutionFailed => ResolutionFailed,\n+            CheckMatchError => CheckMatchError,\n             ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(err)?),\n             OverflowNeg => OverflowNeg,\n             Overflow(op) => Overflow(op),\n@@ -588,20 +590,6 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n-    type Lifted = const_val::ErrKind<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use middle::const_val::ErrKind::*;\n-\n-        Some(match *self {\n-            CouldNotResolve => CouldNotResolve,\n-            TypeckError => TypeckError,\n-            CheckMatchError => CheckMatchError,\n-            Miri(ref e, ref frames) => return tcx.lift(e).map(|e| Miri(e, frames.clone())),\n-        })\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::layout::LayoutError<'a> {\n     type Lifted = ty::layout::LayoutError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {"}, {"sha": "831b3bfd8d1ffb5aa2d262ceb7d6adc4ee3972be", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -1,6 +1,5 @@\n use rustc::hir;\n-use rustc::middle::const_val::{ConstEvalErr, ErrKind};\n-use rustc::middle::const_val::ErrKind::{TypeckError, CheckMatchError};\n+use rustc::middle::const_val::{ConstEvalErr};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n use rustc::ty::layout::{self, LayoutOf, Primitive};\n@@ -18,7 +17,6 @@ use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory, Memo\n \n use std::fmt;\n use std::error::Error;\n-use rustc_data_structures::sync::Lrc;\n \n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -106,7 +104,7 @@ pub fn value_to_const_value<'tcx>(\n             let (frames, span) = ecx.generate_stacktrace(None);\n             let err = ConstEvalErr {\n                 span,\n-                kind: ErrKind::Miri(err, frames).into(),\n+                data: (err, frames).into(),\n             };\n             err.report_as_error(\n                 ecx.tcx,\n@@ -467,9 +465,8 @@ pub fn const_val_field<'a, 'tcx>(\n     })();\n     result.map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n-        let err = ErrKind::Miri(err, trace);\n         ConstEvalErr {\n-            kind: err.into(),\n+            data: (err, trace).into(),\n             span,\n         }\n     })\n@@ -540,7 +537,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                kind: Lrc::new(CheckMatchError),\n+                data: (EvalErrorKind::CheckMatchError.into(), Vec::new()).into(),\n                 span,\n             });\n         }\n@@ -552,7 +549,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n             return Err(ConstEvalErr {\n-                kind: Lrc::new(TypeckError),\n+                data: (EvalErrorKind::TypeckError.into(), Vec::new()).into(),\n                 span,\n             });\n         }\n@@ -566,9 +563,8 @@ pub fn const_eval_provider<'a, 'tcx>(\n         Ok(value_to_const_value(&ecx, val, miri_ty))\n     }).map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n-        let err = ErrKind::Miri(err, trace);\n         let err = ConstEvalErr {\n-            kind: err.into(),\n+            data: (err, trace).into(),\n             span,\n         };\n         if tcx.is_static(def_id).is_some() {"}, {"sha": "32ec48e15b47be17b92903a519fdc0b4fcbcdd33", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or_else(|| EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n+        ).ok_or_else(|| EvalErrorKind::ResolutionFailed.into())\n     }\n \n     pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n@@ -739,7 +739,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                     self.param_env,\n                                     def_id,\n                                     substs,\n-                                ).ok_or_else(|| EvalErrorKind::TypeckError.into());\n+                                ).ok_or_else(|| EvalErrorKind::ResolutionFailed.into());\n                                 let fn_ptr = self.memory.create_fn_alloc(instance?);\n                                 let valty = ValTy {\n                                     value: Value::Scalar(fn_ptr.into()),"}, {"sha": "3810aedb90c6a0d53ab88f1e601057534098c7d6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -285,10 +285,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             instance,\n             promoted: None,\n         };\n-        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|_| {\n+        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|err| {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(self.tcx.is_static(def_id).is_some());\n-            EvalErrorKind::TypeckError.into()\n+            EvalErrorKind::ReferencedConstant(err).into()\n         }).map(|val| {\n             let const_val = match val.val {\n                 ConstVal::Value(val) => val,"}, {"sha": "8e13ac3d41533b6c39df41c3a79c93bc1159cdac", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -1209,15 +1209,12 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => collect_const(tcx, val, instance.substs, output),\n             Err(err) => {\n-                use rustc::middle::const_val::ErrKind;\n                 use rustc::mir::interpret::EvalErrorKind;\n-                if let ErrKind::Miri(ref miri, ..) = *err.kind {\n-                    if let EvalErrorKind::ReferencedConstant(_) = miri.kind {\n-                        err.report_as_error(\n-                            tcx.at(mir.promoted[i].span),\n-                            \"erroneous constant used\",\n-                        );\n-                    }\n+                if let EvalErrorKind::ReferencedConstant(_) = err.data.0.kind {\n+                    err.report_as_error(\n+                        tcx.at(mir.promoted[i].span),\n+                        \"erroneous constant used\",\n+                    );\n                 }\n             },\n         }"}, {"sha": "ee53cfb7b6b740179178543e09d10b864cc05983", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::middle::const_val::{ConstVal, ConstEvalErr, ErrKind};\n+use rustc::middle::const_val::{ConstVal, ConstEvalErr};\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;\n@@ -145,7 +145,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 let (frames, span) = self.ecx.generate_stacktrace(None);\n                 let err = ConstEvalErr {\n                     span,\n-                    kind: ErrKind::Miri(err, frames).into(),\n+                    data: (err, frames).into(),\n                 };\n                 err.report_as_lint(\n                     self.ecx.tcx,"}]}