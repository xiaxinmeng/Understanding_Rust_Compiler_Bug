{"sha": "b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTIzZmQwZWMxOWE3MGU5ZDAyOTU0ZDFlNmUzMTQ1NzQ2YjYzZDc=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-24T23:32:58Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-20T06:51:33Z"}, "message": "Erase regions before before performing const eval, to improve caching.", "tree": {"sha": "fb5ce81ed37bfa98e4dcc01a3ab88af505f72a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb5ce81ed37bfa98e4dcc01a3ab88af505f72a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "html_url": "https://github.com/rust-lang/rust/commit/b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77f07c55b52ba9a462065fff2f0bc74a0727641", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77f07c55b52ba9a462065fff2f0bc74a0727641", "html_url": "https://github.com/rust-lang/rust/commit/f77f07c55b52ba9a462065fff2f0bc74a0727641"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "46bf1d9695796a73caca4ca1e7f90d7462545b40", "filename": "src/librustc/mir/interpret/queries.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "patch": "@@ -13,13 +13,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_poly(self, def_id: DefId) -> ConstEvalResult<'tcx> {\n         // In some situations def_id will have substitutions within scope, but they aren't allowed\n         // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n-        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any og them are\n+        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any of them are\n         // encountered.\n         let substs = InternalSubsts::identity_for_item(self, def_id);\n         let instance = ty::Instance::new(def_id, substs);\n         let cid = GlobalId { instance, promoted: None };\n         let param_env = self.param_env(def_id).with_reveal_all();\n-        self.const_eval_validated(param_env.and(cid))\n+        self.const_eval_global_id(param_env, cid, None)\n     }\n \n     /// Resolves and evaluates a constant.\n@@ -41,11 +41,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> ConstEvalResult<'tcx> {\n         let instance = ty::Instance::resolve(self, param_env, def_id, substs);\n         if let Some(instance) = instance {\n-            if let Some(promoted) = promoted {\n-                self.const_eval_promoted(param_env, instance, promoted)\n-            } else {\n-                self.const_eval_instance(param_env, instance, span)\n-            }\n+            let cid = GlobalId { instance, promoted };\n+            self.const_eval_global_id(param_env, cid, span)\n         } else {\n             Err(ErrorHandled::TooGeneric)\n         }\n@@ -57,22 +54,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         instance: ty::Instance<'tcx>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        let cid = GlobalId { instance, promoted: None };\n-        if let Some(span) = span {\n-            self.at(span).const_eval_validated(param_env.and(cid))\n-        } else {\n-            self.const_eval_validated(param_env.and(cid))\n-        }\n+        self.const_eval_global_id(param_env, GlobalId { instance, promoted: None }, span)\n     }\n \n-    /// Evaluate a promoted constant.\n-    pub fn const_eval_promoted(\n+    /// Evaluate a constant.\n+    pub fn const_eval_global_id(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        instance: ty::Instance<'tcx>,\n-        promoted: mir::Promoted,\n+        cid: GlobalId<'tcx>,\n+        span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        let cid = GlobalId { instance, promoted: Some(promoted) };\n-        self.const_eval_validated(param_env.and(cid))\n+        // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n+        // improve caching of queries.\n+        let inputs = self.erase_regions(&param_env.and(cid));\n+        if let Some(span) = span {\n+            self.at(span).const_eval_validated(inputs)\n+        } else {\n+            self.const_eval_validated(inputs)\n+        }\n     }\n }"}, {"sha": "e119c214f3372d7340328f83ea147fc4f26ec123", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "patch": "@@ -502,7 +502,7 @@ rustc_queries! {\n         /// returns a proper constant that is usable by the rest of the compiler.\n         ///\n         /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n-        /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_promoted`.\n+        /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_global_id`.\n         query const_eval_validated(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalResult<'tcx> {\n             no_force"}, {"sha": "cce4b90e224e6f1f34c5b84d8c9e10af61ae6e8c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8523fd0ec19a70e9d02954d1e6e3145746b63d7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b8523fd0ec19a70e9d02954d1e6e3145746b63d7", "patch": "@@ -768,11 +768,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n-        let val = if let Some(promoted) = gid.promoted {\n-            self.tcx.const_eval_promoted(param_env, gid.instance, promoted)?\n-        } else {\n-            self.tcx.const_eval_instance(param_env, gid.instance, Some(self.tcx.span))?\n-        };\n+        let val = self.tcx.const_eval_global_id(param_env, gid, Some(self.tcx.span))?;\n \n         // Even though `ecx.const_eval` is called from `eval_const_to_op` we can never have a\n         // recursion deeper than one level, because the `tcx.const_eval` above is guaranteed to not"}]}