{"sha": "18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Yjc0NWU5YmYzZTExZWQ2NThiMGZjNGViN2RkYWE4ZTIxNzhiMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-23T03:35:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-23T03:35:32Z"}, "message": "Auto merge of #80095 - jyn514:stability-on-demand, r=GuillaumeGomez\n\n[rustdoc] Calculate stability, const_stability, and deprecation on-demand\n\nPreviously, they would always be calculated ahead of time, which bloated the size of `clean::Item`.\n\nBuilds on https://github.com/rust-lang/rust/pull/80090 and should not be merged before. Helps with https://github.com/rust-lang/rust/issues/79103 and https://github.com/rust-lang/rust/issues/76382.\n\ncc https://github.com/rust-lang/rust/pull/80014#issuecomment-746810284\n\nThis brings `Item` down to 568 bytes, down from 616.", "tree": {"sha": "1af8fdba3c11ed50333ff6272747d8fdc335a24b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af8fdba3c11ed50333ff6272747d8fdc335a24b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "html_url": "https://github.com/rust-lang/rust/commit/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89886e69369b845463cf1b27abd536ce3adb7c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/89886e69369b845463cf1b27abd536ce3adb7c78", "html_url": "https://github.com/rust-lang/rust/commit/89886e69369b845463cf1b27abd536ce3adb7c78"}, {"sha": "1523f67f16cb65da740d20b9853ce7f267579a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1523f67f16cb65da740d20b9853ce7f267579a7d", "html_url": "https://github.com/rust-lang/rust/commit/1523f67f16cb65da740d20b9853ce7f267579a7d"}], "stats": {"total": 155, "additions": 75, "deletions": 80}, "files": [{"sha": "96d19e8e17de7905ab780891825c11156d8b9706", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -123,9 +123,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     attrs: Default::default(),\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(param_env_def_id.krate),\n-                    stability: None,\n-                    const_stability: None,\n-                    deprecation: None,\n                     kind: ImplItem(Impl {\n                         unsafety: hir::Unsafety::Normal,\n                         generics: new_generics,"}, {"sha": "d99055e1145b1642993ff75d2b41afb9f493c7a6", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -112,9 +112,6 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     attrs: Default::default(),\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(impl_def_id.krate),\n-                    stability: None,\n-                    const_stability: None,\n-                    deprecation: None,\n                     kind: ImplItem(Impl {\n                         unsafety: hir::Unsafety::Normal,\n                         generics: ("}, {"sha": "be4c62d891d07dba8214ab820625dc3f3fa3e849", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -482,9 +482,6 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         source: clean::Span::dummy(),\n                         def_id: DefId::local(CRATE_DEF_INDEX),\n                         visibility: clean::Public,\n-                        stability: None,\n-                        const_stability: None,\n-                        deprecation: None,\n                         kind: clean::ImportItem(clean::Import::new_simple(\n                             item.ident.name,\n                             clean::ImportSource {"}, {"sha": "206fb7392461c6cdb3a15f449bb9f72f9259fe4c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -2141,9 +2141,6 @@ fn clean_extern_crate(\n         source: krate.span.clean(cx),\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n-        stability: None,\n-        const_stability: None,\n-        deprecation: None,\n         kind: ExternCrateItem(name, orig_name),\n     }]\n }\n@@ -2212,9 +2209,6 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         source: self.span.clean(cx),\n                         def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n                         visibility: self.vis.clean(cx),\n-                        stability: None,\n-                        const_stability: None,\n-                        deprecation: None,\n                         kind: ImportItem(Import::new_simple(\n                             self.name,\n                             resolve_use_source(cx, path),\n@@ -2233,9 +2227,6 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: None,\n-            const_stability: None,\n-            deprecation: None,\n             kind: ImportItem(inner),\n         }]\n     }"}, {"sha": "d7456ab5da2a2cf2c74e96a70cba31ee88a246f1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -86,9 +86,6 @@ crate struct Item {\n     crate visibility: Visibility,\n     crate kind: ItemKind,\n     crate def_id: DefId,\n-    crate stability: Option<Stability>,\n-    crate deprecation: Option<Deprecation>,\n-    crate const_stability: Option<ConstStability>,\n }\n \n impl fmt::Debug for Item {\n@@ -102,13 +99,23 @@ impl fmt::Debug for Item {\n             .field(\"kind\", &self.kind)\n             .field(\"visibility\", &self.visibility)\n             .field(\"def_id\", def_id)\n-            .field(\"stability\", &self.stability)\n-            .field(\"deprecation\", &self.deprecation)\n             .finish()\n     }\n }\n \n impl Item {\n+    crate fn stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<&'tcx Stability> {\n+        if self.is_fake() { None } else { tcx.lookup_stability(self.def_id) }\n+    }\n+\n+    crate fn const_stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<&'tcx ConstStability> {\n+        if self.is_fake() { None } else { tcx.lookup_const_stability(self.def_id) }\n+    }\n+\n+    crate fn deprecation(&self, tcx: TyCtxt<'_>) -> Option<Deprecation> {\n+        if self.is_fake() { None } else { tcx.lookup_deprecation(self.def_id) }\n+    }\n+\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n     crate fn doc_value(&self) -> Option<&str> {\n@@ -150,9 +157,6 @@ impl Item {\n             source: source.clean(cx),\n             attrs: cx.tcx.get_attrs(def_id).clean(cx),\n             visibility: cx.tcx.visibility(def_id).clean(cx),\n-            stability: cx.tcx.lookup_stability(def_id).cloned(),\n-            deprecation: cx.tcx.lookup_deprecation(def_id),\n-            const_stability: cx.tcx.lookup_const_stability(def_id).cloned(),\n         }\n     }\n \n@@ -236,32 +240,32 @@ impl Item {\n         }\n     }\n \n-    crate fn stability_class(&self) -> Option<String> {\n-        self.stability.as_ref().and_then(|ref s| {\n+    crate fn stability_class(&self, tcx: TyCtxt<'_>) -> Option<String> {\n+        self.stability(tcx).as_ref().and_then(|ref s| {\n             let mut classes = Vec::with_capacity(2);\n \n             if s.level.is_unstable() {\n                 classes.push(\"unstable\");\n             }\n \n             // FIXME: what about non-staged API items that are deprecated?\n-            if self.deprecation.is_some() {\n+            if self.deprecation(tcx).is_some() {\n                 classes.push(\"deprecated\");\n             }\n \n             if !classes.is_empty() { Some(classes.join(\" \")) } else { None }\n         })\n     }\n \n-    crate fn stable_since(&self) -> Option<SymbolStr> {\n-        match self.stability?.level {\n+    crate fn stable_since(&self, tcx: TyCtxt<'_>) -> Option<SymbolStr> {\n+        match self.stability(tcx)?.level {\n             StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n             StabilityLevel::Unstable { .. } => None,\n         }\n     }\n \n-    crate fn const_stable_since(&self) -> Option<SymbolStr> {\n-        match self.const_stability?.level {\n+    crate fn const_stable_since(&self, tcx: TyCtxt<'_>) -> Option<SymbolStr> {\n+        match self.const_stability(tcx)?.level {\n             StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n             StabilityLevel::Unstable { .. } => None,\n         }"}, {"sha": "4dedee302954818c796b5906ec5dd2510640633e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 54, "deletions": 36, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -164,7 +164,7 @@ crate struct SharedContext<'tcx> {\n     playground: Option<markdown::Playground>,\n }\n \n-impl Context<'_> {\n+impl<'tcx> Context<'tcx> {\n     fn path(&self, filename: &str) -> PathBuf {\n         // We use splitn vs Path::extension here because we might get a filename\n         // like `style.min.css` and we want to process that into\n@@ -176,6 +176,10 @@ impl Context<'_> {\n         self.dst.join(&filename)\n     }\n \n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.shared.tcx\n+    }\n+\n     fn sess(&self) -> &Session {\n         &self.shared.tcx.sess\n     }\n@@ -1708,8 +1712,8 @@ fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, cache: &Ca\n     write!(buf, \"<h1 class=\\\"fqn\\\"><span class=\\\"out-of-band\\\">\");\n     render_stability_since_raw(\n         buf,\n-        item.stable_since().as_deref(),\n-        item.const_stable_since().as_deref(),\n+        item.stable_since(cx.tcx()).as_deref(),\n+        item.const_stable_since(cx.tcx()).as_deref(),\n         None,\n         None,\n     );\n@@ -2061,14 +2065,20 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n         }\n     }\n \n-    fn cmp(i1: &clean::Item, i2: &clean::Item, idx1: usize, idx2: usize) -> Ordering {\n+    fn cmp(\n+        i1: &clean::Item,\n+        i2: &clean::Item,\n+        idx1: usize,\n+        idx2: usize,\n+        tcx: TyCtxt<'_>,\n+    ) -> Ordering {\n         let ty1 = i1.type_();\n         let ty2 = i2.type_();\n         if ty1 != ty2 {\n             return (reorder(ty1), idx1).cmp(&(reorder(ty2), idx2));\n         }\n-        let s1 = i1.stability.as_ref().map(|s| s.level);\n-        let s2 = i2.stability.as_ref().map(|s| s.level);\n+        let s1 = i1.stability(tcx).as_ref().map(|s| s.level);\n+        let s2 = i2.stability(tcx).as_ref().map(|s| s.level);\n         if let (Some(a), Some(b)) = (s1, s2) {\n             match (a.is_stable(), b.is_stable()) {\n                 (true, true) | (false, false) => {}\n@@ -2082,7 +2092,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     }\n \n     if cx.shared.sort_modules_alphabetically {\n-        indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n+        indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2, cx.tcx()));\n     }\n     // This call is to remove re-export duplicates in cases such as:\n     //\n@@ -2184,7 +2194,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     _ => \"\",\n                 };\n \n-                let stab = myitem.stability_class();\n+                let stab = myitem.stability_class(cx.tcx());\n                 let add = if stab.is_some() { \" \" } else { \"\" };\n \n                 let doc_value = myitem.doc_value().unwrap_or(\"\");\n@@ -2196,7 +2206,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                          <td class=\\\"docblock-short\\\">{stab_tags}{docs}</td>\\\n                      </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n-                    stab_tags = extra_info_tags(myitem, item),\n+                    stab_tags = extra_info_tags(myitem, item, cx.tcx()),\n                     docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n@@ -2220,15 +2230,15 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n \n /// Render the stability, deprecation and portability tags that are displayed in the item's summary\n /// at the module level.\n-fn extra_info_tags(item: &clean::Item, parent: &clean::Item) -> String {\n+fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) -> String {\n     let mut tags = String::new();\n \n     fn tag_html(class: &str, title: &str, contents: &str) -> String {\n         format!(r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#, class, Escape(title), contents)\n     }\n \n     // The trailing space after each tag is to space it properly against the rest of the docs.\n-    if let Some(depr) = &item.deprecation {\n+    if let Some(depr) = &item.deprecation(tcx) {\n         let mut message = \"Deprecated\";\n         if !stability::deprecation_in_effect(\n             depr.is_since_rustc_version,\n@@ -2241,7 +2251,10 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item) -> String {\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n     // to render \"unstable\" everywhere.\n-    if item.stability.as_ref().map(|s| s.level.is_unstable() && s.feature != sym::rustc_private)\n+    if item\n+        .stability(tcx)\n+        .as_ref()\n+        .map(|s| s.level.is_unstable() && s.feature != sym::rustc_private)\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n@@ -2287,7 +2300,7 @@ fn short_item_info(\n     let error_codes = cx.shared.codes;\n \n     if let Some(Deprecation { note, since, is_since_rustc_version, suggestion: _ }) =\n-        item.deprecation\n+        item.deprecation(cx.tcx())\n     {\n         // We display deprecation messages for #[deprecated] and #[rustc_deprecated]\n         // but only display the future-deprecation messages for #[rustc_deprecated].\n@@ -2327,7 +2340,7 @@ fn short_item_info(\n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n     if let Some((StabilityLevel::Unstable { reason, issue, .. }, feature)) = item\n-        .stability\n+        .stability(cx.tcx())\n         .as_ref()\n         .filter(|stab| stab.feature != sym::rustc_private)\n         .map(|stab| (stab.level, stab.feature))\n@@ -2480,8 +2493,8 @@ fn render_implementor(\n         parent,\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n-        implementor.impl_item.stable_since().as_deref(),\n-        implementor.impl_item.const_stable_since().as_deref(),\n+        implementor.impl_item.stable_since(cx.tcx()).as_deref(),\n+        implementor.impl_item.const_stable_since(cx.tcx()).as_deref(),\n         false,\n         Some(use_absolute),\n         false,\n@@ -2511,8 +2524,8 @@ fn render_impls(\n                 containing_item,\n                 assoc_link,\n                 RenderMode::Normal,\n-                containing_item.stable_since().as_deref(),\n-                containing_item.const_stable_since().as_deref(),\n+                containing_item.stable_since(cx.tcx()).as_deref(),\n+                containing_item.const_stable_since(cx.tcx()).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -2661,7 +2674,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         write!(w, \"<h3 id=\\\"{id}\\\" class=\\\"method\\\"><code>\", id = id,);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n-        render_stability_since(w, m, t);\n+        render_stability_since(w, m, t, cx.tcx());\n         write_srclink(cx, m, w, cache);\n         write!(w, \"</h3>\");\n         document(w, cx, m, Some(t));\n@@ -2768,8 +2781,8 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     it,\n                     assoc_link,\n                     RenderMode::Normal,\n-                    implementor.impl_item.stable_since().as_deref(),\n-                    implementor.impl_item.const_stable_since().as_deref(),\n+                    implementor.impl_item.stable_since(cx.tcx()).as_deref(),\n+                    implementor.impl_item.const_stable_since(cx.tcx()).as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -2950,13 +2963,18 @@ fn render_stability_since_raw(\n     }\n }\n \n-fn render_stability_since(w: &mut Buffer, item: &clean::Item, containing_item: &clean::Item) {\n+fn render_stability_since(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    containing_item: &clean::Item,\n+    tcx: TyCtxt<'_>,\n+) {\n     render_stability_since_raw(\n         w,\n-        item.stable_since().as_deref(),\n-        item.const_stable_since().as_deref(),\n-        containing_item.stable_since().as_deref(),\n-        containing_item.const_stable_since().as_deref(),\n+        item.stable_since(tcx).as_deref(),\n+        item.const_stable_since(tcx).as_deref(),\n+        containing_item.stable_since(tcx).as_deref(),\n+        containing_item.const_stable_since(tcx).as_deref(),\n     )\n }\n \n@@ -3149,7 +3167,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n                 shortty = ItemType::StructField,\n                 ty = ty.print()\n             );\n-            if let Some(stability_class) = field.stability_class() {\n+            if let Some(stability_class) = field.stability_class(cx.tcx()) {\n                 write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n             }\n             document(w, cx, field, Some(it));\n@@ -3279,7 +3297,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 }\n                 write!(w, \"</div></div>\");\n             }\n-            render_stability_since(w, variant, it);\n+            render_stability_since(w, variant, it, cx.tcx());\n         }\n     }\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n@@ -3510,8 +3528,8 @@ fn render_assoc_items(\n                 containing_item,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                containing_item.stable_since().as_deref(),\n-                containing_item.const_stable_since().as_deref(),\n+                containing_item.stable_since(cx.tcx()).as_deref(),\n+                containing_item.const_stable_since(cx.tcx()).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -3758,8 +3776,8 @@ fn render_impl(\n         write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n         render_stability_since_raw(\n             w,\n-            i.impl_item.stable_since().as_deref(),\n-            i.impl_item.const_stable_since().as_deref(),\n+            i.impl_item.stable_since(cx.tcx()).as_deref(),\n+            i.impl_item.const_stable_since(cx.tcx()).as_deref(),\n             outer_version,\n             outer_const_version,\n         );\n@@ -3831,8 +3849,8 @@ fn render_impl(\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(\n                         w,\n-                        item.stable_since().as_deref(),\n-                        item.const_stable_since().as_deref(),\n+                        item.stable_since(cx.tcx()).as_deref(),\n+                        item.const_stable_since(cx.tcx()).as_deref(),\n                         outer_version,\n                         outer_const_version,\n                     );\n@@ -3853,8 +3871,8 @@ fn render_impl(\n                 write!(w, \"</code>\");\n                 render_stability_since_raw(\n                     w,\n-                    item.stable_since().as_deref(),\n-                    item.const_stable_since().as_deref(),\n+                    item.stable_since(cx.tcx()).as_deref(),\n+                    item.const_stable_since(cx.tcx()).as_deref(),\n                     outer_version,\n                     outer_const_version,\n                 );"}, {"sha": "0b22882b42e302490cb326f94caaee748df564ed", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=18b745e9bf3e11ed658b0fc4eb7ddaa8e2178b39", "patch": "@@ -17,17 +17,8 @@ use crate::json::JsonRenderer;\n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n         let item_type = ItemType::from(&item);\n-        let clean::Item {\n-            source,\n-            name,\n-            attrs,\n-            kind,\n-            visibility,\n-            def_id,\n-            stability: _,\n-            const_stability: _,\n-            deprecation,\n-        } = item;\n+        let deprecation = item.deprecation(self.tcx);\n+        let clean::Item { source, name, attrs, kind, visibility, def_id } = item;\n         match kind {\n             clean::StrippedItem(_) => None,\n             _ => Some(Item {"}]}