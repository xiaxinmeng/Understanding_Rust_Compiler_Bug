{"sha": "583d64493484f72425ecac55eaf5eddbba10b132", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4M2Q2NDQ5MzQ4NGY3MjQyNWVjYWM1NWVhZjVlZGRiYmExMGIxMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T15:59:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T15:59:27Z"}, "message": "Auto merge of #5694 - wangtheo:issue-5626, r=matthiaskrgr\n\n#5626: lint iterator.map(|x| x)\n\nchangelog: adds a new lint for iterator.map(|x| x) (see https://github.com/rust-lang/rust-clippy/issues/5626)\n\nThe code also lints for result.map(|x| x) and option.map(|x| x). Also, I'm not sure if I'm checking for type adjustments correctly and I can't think of an example where .map(|x| x) would apply type adjustments.", "tree": {"sha": "4a7fa7bc487a502fc1d969ed2f80a844f948d12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7fa7bc487a502fc1d969ed2f80a844f948d12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/583d64493484f72425ecac55eaf5eddbba10b132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/583d64493484f72425ecac55eaf5eddbba10b132", "html_url": "https://github.com/rust-lang/rust/commit/583d64493484f72425ecac55eaf5eddbba10b132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/583d64493484f72425ecac55eaf5eddbba10b132/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c07fa9d095931eb5684a42942a7b573a0c5238", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c07fa9d095931eb5684a42942a7b573a0c5238", "html_url": "https://github.com/rust-lang/rust/commit/c2c07fa9d095931eb5684a42942a7b573a0c5238"}, {"sha": "fb4f9a0ad7a4656beb01c85b02b3e6ef15d914ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4f9a0ad7a4656beb01c85b02b3e6ef15d914ec", "html_url": "https://github.com/rust-lang/rust/commit/fb4f9a0ad7a4656beb01c85b02b3e6ef15d914ec"}], "stats": {"total": 230, "additions": 228, "deletions": 2}, "files": [{"sha": "d6186c319d07d992c4342d40a1008f08b421657f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -1508,6 +1508,7 @@ Released 2018-09-13\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n+[`map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_identity\n [`map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or\n [`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool"}, {"sha": "756b6b9a8a46495044dc92577b2e21906288406e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -229,6 +229,7 @@ mod main_recursion;\n mod manual_async_fn;\n mod manual_non_exhaustive;\n mod map_clone;\n+mod map_identity;\n mod map_unit_fn;\n mod match_on_vec_items;\n mod matches;\n@@ -608,6 +609,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &manual_async_fn::MANUAL_ASYNC_FN,\n         &manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n         &map_clone::MAP_CLONE,\n+        &map_identity::MAP_IDENTITY,\n         &map_unit_fn::OPTION_MAP_UNIT_FN,\n         &map_unit_fn::RESULT_MAP_UNIT_FN,\n         &match_on_vec_items::MATCH_ON_VEC_ITEMS,\n@@ -1057,6 +1059,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_early_pass(|| box unnested_or_patterns::UnnestedOrPatterns);\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n+    store.register_late_pass(|| box map_identity::MapIdentity);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1273,6 +1276,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&manual_async_fn::MANUAL_ASYNC_FN),\n         LintId::of(&manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n         LintId::of(&map_clone::MAP_CLONE),\n+        LintId::of(&map_identity::MAP_IDENTITY),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n@@ -1550,6 +1554,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n         LintId::of(&loops::WHILE_LET_LOOP),\n+        LintId::of(&map_identity::MAP_IDENTITY),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::MATCH_AS_REF),"}, {"sha": "6607a26b130ddd13b381f793a014e12865d53540", "filename": "clippy_lints/src/map_identity.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -0,0 +1,126 @@\n+use crate::utils::{\n+    is_adjusted, is_type_diagnostic_item, match_path, match_trait_method, match_var, paths, remove_blocks,\n+    span_lint_and_sugg,\n+};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Body, Expr, ExprKind, Pat, PatKind, QPath, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n+    ///\n+    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n+    /// ```\n+    pub MAP_IDENTITY,\n+    complexity,\n+    \"using iterator.map(|x| x)\"\n+}\n+\n+declare_lint_pass!(MapIdentity => [MAP_IDENTITY]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapIdentity {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let Some([caller, func]) = get_map_argument(cx, expr);\n+            if is_expr_identity_function(cx, func);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    MAP_IDENTITY,\n+                    expr.span.trim_start(caller.span).unwrap(),\n+                    \"unnecessary map of the identity function\",\n+                    \"remove the call to `map`\",\n+                    String::new(),\n+                    Applicability::MachineApplicable\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns the arguments passed into map() if the expression is a method call to\n+/// map(). Otherwise, returns None.\n+fn get_map_argument<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'a>) -> Option<&'a [Expr<'a>]> {\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n+        if args.len() == 2 && method.ident.as_str() == \"map\";\n+        let caller_ty = cx.tables.expr_ty(&args[0]);\n+        if match_trait_method(cx, expr, &paths::ITERATOR)\n+            || is_type_diagnostic_item(cx, caller_ty, sym!(result_type))\n+            || is_type_diagnostic_item(cx, caller_ty, sym!(option_type));\n+        then {\n+            Some(args)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Checks if an expression represents the identity function\n+/// Only examines closures and `std::convert::identity`\n+fn is_expr_identity_function(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    match expr.kind {\n+        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Path(QPath::Resolved(_, ref path)) => match_path(path, &paths::STD_CONVERT_IDENTITY),\n+        _ => false,\n+    }\n+}\n+\n+/// Checks if a function's body represents the identity function\n+/// Looks for bodies of the form `|x| x`, `|x| return x`, `|x| { return x }` or `|x| {\n+/// return x; }`\n+fn is_body_identity_function(cx: &LateContext<'_, '_>, func: &Body<'_>) -> bool {\n+    let params = func.params;\n+    let body = remove_blocks(&func.value);\n+\n+    // if there's less/more than one parameter, then it is not the identity function\n+    if params.len() != 1 {\n+        return false;\n+    }\n+\n+    match body.kind {\n+        ExprKind::Path(QPath::Resolved(None, _)) => match_expr_param(cx, body, params[0].pat),\n+        ExprKind::Ret(Some(ref ret_val)) => match_expr_param(cx, ret_val, params[0].pat),\n+        ExprKind::Block(ref block, _) => {\n+            if_chain! {\n+                if block.stmts.len() == 1;\n+                if let StmtKind::Semi(ref expr) | StmtKind::Expr(ref expr) = block.stmts[0].kind;\n+                if let ExprKind::Ret(Some(ref ret_val)) = expr.kind;\n+                then {\n+                    match_expr_param(cx, ret_val, params[0].pat)\n+                } else {\n+                    false\n+                }\n+            }\n+        },\n+        _ => false,\n+    }\n+}\n+\n+/// Returns true iff an expression returns the same thing as a parameter's pattern\n+fn match_expr_param(cx: &LateContext<'_, '_>, expr: &Expr<'_>, pat: &Pat<'_>) -> bool {\n+    if let PatKind::Binding(_, _, ident, _) = pat.kind {\n+        match_var(expr, ident.name) && !(cx.tables.hir_owner == Some(expr.hir_id.owner) && is_adjusted(cx, expr))\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "5a43a1a07d24b00fc4a65787bfe731ac8d389aa7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -1144,6 +1144,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"map_identity\",\n+        group: \"complexity\",\n+        desc: \"using iterator.map(|x| x)\",\n+        deprecation: None,\n+        module: \"map_identity\",\n+    },\n     Lint {\n         name: \"map_unwrap_or\",\n         group: \"pedantic\","}, {"sha": "4171d80f48a3f51826fe8c59870e75ebdd2e488b", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::map_identity)]\n \n fn main() {\n     let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();"}, {"sha": "16a0fd090ad04533e0fc1fde345d8c11ea930b5d", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::map_identity)]\n \n fn main() {\n     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();"}, {"sha": "00bc41c15e9b8d892ee6eb4ee30d3a5ad62a81eb", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -1,13 +1,13 @@\n error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)`\n-  --> $DIR/map_flatten.rs:7:21\n+  --> $DIR/map_flatten.rs:8:21\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on an `Option`. This is more succinctly expressed by calling `.and_then(..)`\n-  --> $DIR/map_flatten.rs:8:24\n+  --> $DIR/map_flatten.rs:9:24\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `(Some(Some(1))).and_then(|x| x)`"}, {"sha": "4a1452b25f343923c71059722e6d0fe3d32dcc6f", "filename": "tests/ui/map_identity.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.fixed?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+#![warn(clippy::map_identity)]\n+#![allow(clippy::needless_return)]\n+\n+fn main() {\n+    let x: [u16; 3] = [1, 2, 3];\n+    // should lint\n+    let _: Vec<_> = x.iter().map(not_identity).collect();\n+    let _: Vec<_> = x.iter().collect();\n+    let _: Option<u8> = Some(3);\n+    let _: Result<i8, f32> = Ok(-3);\n+    // should not lint\n+    let _: Vec<_> = x.iter().map(|x| 2 * x).collect();\n+    let _: Vec<_> = x.iter().map(not_identity).map(|x| return x - 4).collect();\n+    let _: Option<u8> = None.map(|x: u8| x - 1);\n+    let _: Result<i8, f32> = Err(2.3).map(|x: i8| {\n+        return x + 3;\n+    });\n+}\n+\n+fn not_identity(x: &u16) -> u16 {\n+    *x\n+}"}, {"sha": "65c7e6e1ea554a7db9d691ce237337a450e2c3ed", "filename": "tests/ui/map_identity.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.rs?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![warn(clippy::map_identity)]\n+#![allow(clippy::needless_return)]\n+\n+fn main() {\n+    let x: [u16; 3] = [1, 2, 3];\n+    // should lint\n+    let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n+    let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+    let _: Option<u8> = Some(3).map(|x| x);\n+    let _: Result<i8, f32> = Ok(-3).map(|x| {\n+        return x;\n+    });\n+    // should not lint\n+    let _: Vec<_> = x.iter().map(|x| 2 * x).collect();\n+    let _: Vec<_> = x.iter().map(not_identity).map(|x| return x - 4).collect();\n+    let _: Option<u8> = None.map(|x: u8| x - 1);\n+    let _: Result<i8, f32> = Err(2.3).map(|x: i8| {\n+        return x + 3;\n+    });\n+}\n+\n+fn not_identity(x: &u16) -> u16 {\n+    *x\n+}"}, {"sha": "e4a0320cbda55721fffd017087d3db81a0868937", "filename": "tests/ui/map_identity.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/583d64493484f72425ecac55eaf5eddbba10b132/tests%2Fui%2Fmap_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.stderr?ref=583d64493484f72425ecac55eaf5eddbba10b132", "patch": "@@ -0,0 +1,37 @@\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:8:47\n+   |\n+LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^ help: remove the call to `map`\n+   |\n+   = note: `-D clippy::map-identity` implied by `-D warnings`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:9:57\n+   |\n+LL |     let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+   |                                                         ^^^^^^^^^^^ help: remove the call to `map`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:9:29\n+   |\n+LL |     let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the call to `map`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:10:32\n+   |\n+LL |     let _: Option<u8> = Some(3).map(|x| x);\n+   |                                ^^^^^^^^^^^ help: remove the call to `map`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:11:36\n+   |\n+LL |       let _: Result<i8, f32> = Ok(-3).map(|x| {\n+   |  ____________________________________^\n+LL | |         return x;\n+LL | |     });\n+   | |______^ help: remove the call to `map`\n+\n+error: aborting due to 5 previous errors\n+"}]}