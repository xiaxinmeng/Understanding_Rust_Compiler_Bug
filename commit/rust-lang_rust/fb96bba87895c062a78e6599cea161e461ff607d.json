{"sha": "fb96bba87895c062a78e6599cea161e461ff607d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTZiYmE4Nzg5NWMwNjJhNzhlNjU5OWNlYTE2MWU0NjFmZjYwN2Q=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T15:01:25Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T08:05:00Z"}, "message": "Add diagnostics for enum names and variants", "tree": {"sha": "17a4970bc13ccf9074cc1c8a60e8bf4e2d73c475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a4970bc13ccf9074cc1c8a60e8bf4e2d73c475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb96bba87895c062a78e6599cea161e461ff607d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb96bba87895c062a78e6599cea161e461ff607d", "html_url": "https://github.com/rust-lang/rust/commit/fb96bba87895c062a78e6599cea161e461ff607d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb96bba87895c062a78e6599cea161e461ff607d/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24e22f288eba33928a9e579f13653d6f04fcdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24e22f288eba33928a9e579f13653d6f04fcdfa", "html_url": "https://github.com/rust-lang/rust/commit/e24e22f288eba33928a9e579f13653d6f04fcdfa"}], "stats": {"total": 175, "additions": 173, "deletions": 2}, "files": [{"sha": "bd370e3b2d5d67ce7971c8687239234cf0135091", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb96bba87895c062a78e6599cea161e461ff607d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb96bba87895c062a78e6599cea161e461ff607d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=fb96bba87895c062a78e6599cea161e461ff607d", "patch": "@@ -298,7 +298,7 @@ impl Diagnostic for IncorrectCase {\n     }\n \n     fn is_experimental(&self) -> bool {\n-        false\n+        true\n     }\n }\n "}, {"sha": "7fc9c564e14c93352eabf91c94dc699351b8b45e", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 146, "deletions": 1, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/fb96bba87895c062a78e6599cea161e461ff607d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb96bba87895c062a78e6599cea161e461ff607d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=fb96bba87895c062a78e6599cea161e461ff607d", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n                     Some(_) => {}\n                     None => {\n                         log::error!(\n-                            \"Replacement ({:?}) was generated for a function parameter which was not found: {:?}\",\n+                            \"Replacement ({:?}) was generated for a structure field which was not found: {:?}\",\n                             field_to_rename, struct_src\n                         );\n                         return;\n@@ -338,6 +338,131 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n     fn validate_enum(&mut self, db: &dyn HirDatabase, enum_id: EnumId) {\n         let data = db.enum_data(enum_id);\n+\n+        // 1. Check the enum name.\n+        let enum_name = data.name.to_string();\n+        let enum_name_replacement = if let Some(new_name) = to_camel_case(&enum_name) {\n+            let replacement = Replacement {\n+                current_name: data.name.clone(),\n+                suggested_text: new_name,\n+                expected_case: CaseType::UpperCamelCase,\n+            };\n+            Some(replacement)\n+        } else {\n+            None\n+        };\n+\n+        // 2. Check the field names.\n+        let mut enum_fields_replacements = Vec::new();\n+\n+        for (_, variant) in data.variants.iter() {\n+            let variant_name = variant.name.to_string();\n+            if let Some(new_name) = to_camel_case(&variant_name) {\n+                let replacement = Replacement {\n+                    current_name: variant.name.clone(),\n+                    suggested_text: new_name,\n+                    expected_case: CaseType::UpperCamelCase,\n+                };\n+                enum_fields_replacements.push(replacement);\n+            }\n+        }\n+\n+        // 3. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        self.create_incorrect_case_diagnostic_for_enum(\n+            enum_id,\n+            db,\n+            enum_name_replacement,\n+            enum_fields_replacements,\n+        )\n+    }\n+\n+    /// Given the information about incorrect names in the struct declaration, looks up into the source code\n+    /// for exact locations and adds diagnostics into the sink.\n+    fn create_incorrect_case_diagnostic_for_enum(\n+        &mut self,\n+        enum_id: EnumId,\n+        db: &dyn HirDatabase,\n+        enum_name_replacement: Option<Replacement>,\n+        enum_variants_replacements: Vec<Replacement>,\n+    ) {\n+        // XXX: only look at sources if we do have incorrect names\n+        if enum_name_replacement.is_none() && enum_variants_replacements.is_empty() {\n+            return;\n+        }\n+\n+        let enum_loc = enum_id.lookup(db.upcast());\n+        let enum_src = enum_loc.source(db.upcast());\n+\n+        if let Some(replacement) = enum_name_replacement {\n+            let ast_ptr = if let Some(name) = enum_src.value.name() {\n+                name\n+            } else {\n+                // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n+                log::error!(\n+                    \"Replacement ({:?}) was generated for a enum without a name: {:?}\",\n+                    replacement,\n+                    enum_src\n+                );\n+                return;\n+            };\n+\n+            let diagnostic = IncorrectCase {\n+                file: enum_src.file_id,\n+                ident_type: \"Enum\".to_string(),\n+                ident: AstPtr::new(&ast_ptr).into(),\n+                expected_case: replacement.expected_case,\n+                ident_text: replacement.current_name.to_string(),\n+                suggested_text: replacement.suggested_text,\n+            };\n+\n+            self.sink.push(diagnostic);\n+        }\n+\n+        let enum_variants_list = match enum_src.value.variant_list() {\n+            Some(variants) => variants,\n+            _ => {\n+                if !enum_variants_replacements.is_empty() {\n+                    log::error!(\n+                        \"Replacements ({:?}) were generated for a enum variants which had no fields list: {:?}\",\n+                        enum_variants_replacements, enum_src\n+                    );\n+                }\n+                return;\n+            }\n+        };\n+        let mut enum_variants_iter = enum_variants_list.variants();\n+        for variant_to_rename in enum_variants_replacements {\n+            // We assume that parameters in replacement are in the same order as in the\n+            // actual params list, but just some of them (ones that named correctly) are skipped.\n+            let ast_ptr = loop {\n+                match enum_variants_iter.next() {\n+                    Some(variant)\n+                        if names_equal(variant.name(), &variant_to_rename.current_name) =>\n+                    {\n+                        break variant.name().unwrap()\n+                    }\n+                    Some(_) => {}\n+                    None => {\n+                        log::error!(\n+                            \"Replacement ({:?}) was generated for a enum variant which was not found: {:?}\",\n+                            variant_to_rename, enum_src\n+                        );\n+                        return;\n+                    }\n+                }\n+            };\n+\n+            let diagnostic = IncorrectCase {\n+                file: enum_src.file_id,\n+                ident_type: \"Variant\".to_string(),\n+                ident: AstPtr::new(&ast_ptr).into(),\n+                expected_case: variant_to_rename.expected_case,\n+                ident_text: variant_to_rename.current_name.to_string(),\n+                suggested_text: variant_to_rename.suggested_text,\n+            };\n+\n+            self.sink.push(diagnostic);\n+        }\n     }\n }\n \n@@ -400,6 +525,26 @@ struct non_camel_case_name {}\n             r#\"\n struct SomeStruct { SomeField: u8 }\n                  // ^^^^^^^^^ Field `SomeField` should have a snake_case name, e.g. `some_field`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_enum_name() {\n+        check_diagnostics(\n+            r#\"\n+enum some_enum { Val(u8) }\n+  // ^^^^^^^^^ Enum `some_enum` should have a CamelCase name, e.g. `SomeEnum`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_enum_variant_name() {\n+        check_diagnostics(\n+            r#\"\n+enum SomeEnum { SOME_VARIANT(u8) }\n+             // ^^^^^^^^^^^^ Variant `SOME_VARIANT` should have a CamelCase name, e.g. `SomeVariant`\n \"#,\n         );\n     }"}, {"sha": "ad1b265fdf84e05b8d7da7813c5a09dad3c52297", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb96bba87895c062a78e6599cea161e461ff607d/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb96bba87895c062a78e6599cea161e461ff607d/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=fb96bba87895c062a78e6599cea161e461ff607d", "patch": "@@ -851,6 +851,32 @@ pub struct TestStruct { one: i32 }\n pub fn some_fn(val: TestStruct) -> TestStruct {\n     TestStruct { one: val.one + 1 }\n }\n+\"#,\n+        );\n+\n+        check_fixes(\n+            r#\"\n+pub fn some_fn(NonSnakeCase<|>: u8) -> u8 {\n+    NonSnakeCase\n+}\n+\"#,\n+            r#\"\n+pub fn some_fn(non_snake_case: u8) -> u8 {\n+    non_snake_case\n+}\n+\"#,\n+        );\n+\n+        check_fixes(\n+            r#\"\n+pub fn SomeFn<|>(val: u8) -> u8 {\n+    if val != 0 { SomeFn(val - 1) } else { val }\n+}\n+\"#,\n+            r#\"\n+pub fn some_fn(val: u8) -> u8 {\n+    if val != 0 { some_fn(val - 1) } else { val }\n+}\n \"#,\n         );\n     }"}]}