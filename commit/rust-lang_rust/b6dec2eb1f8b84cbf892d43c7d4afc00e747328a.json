{"sha": "b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZGVjMmViMWY4Yjg0Y2JmODkyZDQzYzdkNGFmYzAwZTc0NzMyOGE=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-16T06:32:28Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-16T06:32:28Z"}, "message": "Fix tests part 2...", "tree": {"sha": "c70174556d54a7d72f1738eb7dc04b62cc96fcc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c70174556d54a7d72f1738eb7dc04b62cc96fcc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "html_url": "https://github.com/rust-lang/rust/commit/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ccda39414afa5bd5a92d3edec005e7830c6420", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ccda39414afa5bd5a92d3edec005e7830c6420", "html_url": "https://github.com/rust-lang/rust/commit/70ccda39414afa5bd5a92d3edec005e7830c6420"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "b410d392789997d4e0af73a2b806c62ba1ffac0d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "patch": "@@ -426,12 +426,6 @@ fn loop_turn(\n         });\n     }\n \n-    if !loop_state.workspace_loaded\n-        && world_state.feature_flags.get(\"notifications.workspace-loaded\")\n-    {\n-        send_startup_progress(&connection.sender, loop_state, world_state);\n-    }\n-\n     if !loop_state.workspace_loaded\n         && world_state.roots_to_scan == 0\n         && loop_state.pending_libraries.is_empty()\n@@ -444,6 +438,9 @@ fn loop_turn(\n             let snap = world_state.snapshot();\n             move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n         });\n+        send_startup_progress(&connection.sender, loop_state, world_state);\n+    } else if !loop_state.workspace_loaded {\n+        send_startup_progress(&connection.sender, loop_state, world_state);\n     }\n \n     if state_changed {\n@@ -713,49 +710,49 @@ fn send_startup_progress(\n     loop_state: &mut LoopState,\n     world_state: &WorldState,\n ) {\n+    if !world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n+        return;\n+    }\n+\n     let total: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n     let prev_progress = loop_state.roots_scanned_progress;\n     let progress = total - world_state.roots_to_scan;\n-    if prev_progress == Some(progress) {\n-        return;\n-    }\n     loop_state.roots_scanned_progress = Some(progress);\n \n-    if prev_progress.is_none() {\n-        let work_done_progress_create = request_new::<req::WorkDoneProgressCreate>(\n-            loop_state.next_request_id(),\n-            WorkDoneProgressCreateParams {\n-                token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n-            },\n-        );\n-        sender.send(work_done_progress_create.into()).unwrap();\n-        send_startup_progress_notif(\n-            sender,\n-            WorkDoneProgress::Begin(WorkDoneProgressBegin {\n-                title: \"rust-analyzer\".into(),\n-                cancellable: None,\n-                message: Some(format!(\"{}/{} packages\", progress, total)),\n-                percentage: Some(100.0 * progress as f64 / total as f64),\n-            }),\n-        );\n-    } else if progress < total {\n-        send_startup_progress_notif(\n+    match (prev_progress, loop_state.workspace_loaded) {\n+        (None, false) => {\n+            let work_done_progress_create = request_new::<req::WorkDoneProgressCreate>(\n+                loop_state.next_request_id(),\n+                WorkDoneProgressCreateParams {\n+                    token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+                },\n+            );\n+            sender.send(work_done_progress_create.into()).unwrap();\n+            send_startup_progress_notif(\n+                sender,\n+                WorkDoneProgress::Begin(WorkDoneProgressBegin {\n+                    title: \"rust-analyzer\".into(),\n+                    cancellable: None,\n+                    message: Some(format!(\"{}/{} packages\", progress, total)),\n+                    percentage: Some(100.0 * progress as f64 / total as f64),\n+                }),\n+            );\n+        }\n+        (Some(prev), false) if progress != prev => send_startup_progress_notif(\n             sender,\n             WorkDoneProgress::Report(WorkDoneProgressReport {\n                 cancellable: None,\n                 message: Some(format!(\"{}/{} packages\", progress, total)),\n                 percentage: Some(100.0 * progress as f64 / total as f64),\n             }),\n-        )\n-    }\n-\n-    if progress == total {\n-        send_startup_progress_notif(\n+        ),\n+        (_, true) => send_startup_progress_notif(\n             sender,\n             WorkDoneProgress::End(WorkDoneProgressEnd {\n                 message: Some(format!(\"rust-analyzer loaded, {} packages\", progress)),\n             }),\n-        )\n+        ),\n+        _ => {}\n     }\n }\n "}]}