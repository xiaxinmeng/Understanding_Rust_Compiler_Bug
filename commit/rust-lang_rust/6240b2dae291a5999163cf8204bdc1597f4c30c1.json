{"sha": "6240b2dae291a5999163cf8204bdc1597f4c30c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDBiMmRhZTI5MWE1OTk5MTYzY2Y4MjA0YmRjMTU5N2Y0YzMwYzE=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-07T09:29:33Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "generate method adds pub keyword", "tree": {"sha": "c627d88cda06a6108df0ac09e763cd098b149e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c627d88cda06a6108df0ac09e763cd098b149e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6240b2dae291a5999163cf8204bdc1597f4c30c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6240b2dae291a5999163cf8204bdc1597f4c30c1", "html_url": "https://github.com/rust-lang/rust/commit/6240b2dae291a5999163cf8204bdc1597f4c30c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6240b2dae291a5999163cf8204bdc1597f4c30c1/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38f36e5af9d58ba4b2d234bfad2f7ec8b444674", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38f36e5af9d58ba4b2d234bfad2f7ec8b444674", "html_url": "https://github.com/rust-lang/rust/commit/d38f36e5af9d58ba4b2d234bfad2f7ec8b444674"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "8d0ac4ae7b7f321de9916c3114a0784ba6e137f9", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6240b2dae291a5999163cf8204bdc1597f4c30c1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6240b2dae291a5999163cf8204bdc1597f4c30c1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=6240b2dae291a5999163cf8204bdc1597f4c30c1", "patch": "@@ -105,6 +105,14 @@ pub(crate) fn generate_method(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n     let ty = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references().as_adt()?;\n \n+    let current_module =\n+        ctx.sema.scope(ctx.find_node_at_offset::<ast::MethodCallExpr>()?.syntax()).module()?;\n+    let target_module = ty.module(ctx.sema.db);\n+\n+    if current_module.krate() != target_module.krate() {\n+        return None;\n+    }\n+\n     let (impl_, file) = match ty {\n         hir::Adt::Struct(strukt) => get_impl(strukt.source(ctx.sema.db)?.syntax(), &fn_name, ctx),\n         hir::Adt::Enum(en) => get_impl(en.source(ctx.sema.db)?.syntax(), &fn_name, ctx),\n@@ -117,7 +125,8 @@ pub(crate) fn generate_method(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         &fn_name,\n         &impl_,\n         file,\n-        ty.module(ctx.sema.db),\n+        target_module,\n+        current_module,\n     )?;\n     let target = call.syntax().text_range();\n \n@@ -261,6 +270,7 @@ impl FunctionBuilder {\n         impl_: &Option<ast::Impl>,\n         file: FileId,\n         target_module: Module,\n+        current_module: Module,\n     ) -> Option<Self> {\n         // let mut file = ctx.frange.file_id;\n         // let target_module = ctx.sema.scope(call.syntax()).module()?;\n@@ -274,8 +284,8 @@ impl FunctionBuilder {\n                 .1\n             }\n         };\n+        let needs_pub = !module_is_descendant(&current_module, &target_module, ctx);\n \n-        let needs_pub = false;\n         let fn_name = make::name(&name.text());\n         let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Method(call))?;\n \n@@ -564,6 +574,18 @@ fn next_space_for_fn_in_impl(impl_: &ast::Impl) -> Option<GeneratedFunctionTarge\n     }\n }\n \n+fn module_is_descendant(module: &hir::Module, ans: &hir::Module, ctx: &AssistContext) -> bool {\n+    if module == ans {\n+        return true;\n+    }\n+    for c in ans.children(ctx.sema.db) {\n+        if module_is_descendant(module, &c, ctx) {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}]}