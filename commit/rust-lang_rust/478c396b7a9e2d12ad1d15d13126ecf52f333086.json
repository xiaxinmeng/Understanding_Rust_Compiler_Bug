{"sha": "478c396b7a9e2d12ad1d15d13126ecf52f333086", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OGMzOTZiN2E5ZTJkMTJhZDFkMTVkMTMxMjZlY2Y1MmYzMzMwODY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-04T10:16:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-05T07:07:48Z"}, "message": "Rollup merge of #22939 - bleibig:grammar-updates, r=sanxiyn\n\n Updates to the bison grammar to account for recent grammar additions and new tests. In particular:\n\n* Support parsing `impl MyTrait for .. { }`\n* Support parsing ExprQualifiedPaths without \\\"as TRAIT_REF\\\" such as `<Foo>::bar(&Foo)`\n* Support parsing \\\"for\\\" clauses at the beginning of where clauses such as `where for<'a, 'b> &'a T: Bar<'b>`", "tree": {"sha": "6119fa19f842459a4d9c9d703d8c5e21719e3211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6119fa19f842459a4d9c9d703d8c5e21719e3211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/478c396b7a9e2d12ad1d15d13126ecf52f333086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/478c396b7a9e2d12ad1d15d13126ecf52f333086", "html_url": "https://github.com/rust-lang/rust/commit/478c396b7a9e2d12ad1d15d13126ecf52f333086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/478c396b7a9e2d12ad1d15d13126ecf52f333086/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d693ec17a502ee16689ff18f95d189870a727fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d693ec17a502ee16689ff18f95d189870a727fb4", "html_url": "https://github.com/rust-lang/rust/commit/d693ec17a502ee16689ff18f95d189870a727fb4"}, {"sha": "481b21cf1927a84d6fea1b7389a3a8d827656998", "url": "https://api.github.com/repos/rust-lang/rust/commits/481b21cf1927a84d6fea1b7389a3a8d827656998", "html_url": "https://github.com/rust-lang/rust/commit/481b21cf1927a84d6fea1b7389a3a8d827656998"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "6c3fd186cd423bdea36260cc459fe361602eb0e2", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/478c396b7a9e2d12ad1d15d13126ecf52f333086/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/478c396b7a9e2d12ad1d15d13126ecf52f333086/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=478c396b7a9e2d12ad1d15d13126ecf52f333086", "patch": "@@ -152,6 +152,12 @@ extern char *yytext;\n %precedence MOD_SEP\n %precedence RARROW ':'\n \n+// In where clauses, \"for\" should have greater precedence when used as\n+// a higher ranked constraint than when used as the beginning of a\n+// for_in_type (which is a ty)\n+%precedence FORTYPE\n+%precedence FOR\n+\n // Binops & unops, and their precedences\n %precedence BOX\n %precedence BOXPLACE\n@@ -582,6 +588,14 @@ item_impl\n {\n   $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11);\n }\n+| maybe_unsafe IMPL generic_params trait_ref FOR DOTDOT '{' '}'\n+{\n+  $$ = mk_node(\"ItemImplDefault\", 3, $1, $3, $4);\n+}\n+| maybe_unsafe IMPL generic_params '!' trait_ref FOR DOTDOT '{' '}'\n+{\n+  $$ = mk_node(\"ItemImplDefaultNeg\", 3, $1, $3, $4);\n+}\n ;\n \n maybe_impl_items\n@@ -769,10 +783,14 @@ where_predicates\n ;\n \n where_predicate\n-: lifetime ':' bounds    { $$ = mk_node(\"WherePredicate\", 2, $1, $3); }\n-| ty ':' ty_param_bounds { $$ = mk_node(\"WherePredicate\", 2, $1, $3); }\n+: maybe_for_lifetimes lifetime ':' bounds    { $$ = mk_node(\"WherePredicate\", 3, $1, $2, $4); }\n+| maybe_for_lifetimes ty ':' ty_param_bounds { $$ = mk_node(\"WherePredicate\", 3, $1, $2, $4); }\n ;\n \n+maybe_for_lifetimes\n+: FOR '<' lifetimes '>' { $$ = mk_none(); }\n+| %prec FORTYPE %empty  { $$ = mk_none(); }\n+\n ty_params\n : ty_param               { $$ = mk_node(\"TyParams\", 1, $1); }\n | ty_params ',' ty_param { $$ = ext_node($1, 1, $3); }\n@@ -1024,7 +1042,8 @@ ty_qualified_path_and_generic_values\n }\n | ty_qualified_path ',' ty_sums maybe_bindings\n {\n-  $$ = mk_node(\"GenericValues\", 3, mk_none(), ext_node(mk_node(\"TySums\", 1, $1), 1, $3), $4); }\n+  $$ = mk_node(\"GenericValues\", 3, mk_none(), mk_node(\"TySums\", 2, $1, $3), $4);\n+}\n ;\n \n ty_qualified_path\n@@ -1513,31 +1532,35 @@ nonblock_prefix_expr\n ;\n \n expr_qualified_path\n-: '<' ty_sum AS trait_ref '>' MOD_SEP ident\n+: '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, $2, $4, $7);\n+  $$ = mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6);\n }\n-| '<' ty_sum AS trait_ref '>' MOD_SEP ident generic_args\n+| '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 4, $2, $4, $7, $8);\n+  $$ = mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident AS trait_ref '>' MOD_SEP ident\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 3, $2, $4, $7), $9, $12);\n+  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6), $7, $10);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident generic_args AS trait_ref '>' MOD_SEP ident\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args maybe_as_trait_ref '>' MOD_SEP ident\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 4, $2, $4, $7, $8), $10, $13);\n+  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7), $8, $11);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident AS trait_ref '>' MOD_SEP ident generic_args\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident generic_args\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 3, $2, $4, $7), $9, $12, $13);\n+  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6), $7, $10, $11);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident generic_args AS trait_ref '>' MOD_SEP ident generic_args\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args maybe_as_trait_ref '>' MOD_SEP ident generic_args\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 4, $2, $4, $7, $8), $10, $13, $14);\n+  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7), $8, $11, $12);\n }\n \n+maybe_as_trait_ref\n+: AS trait_ref { $$ = $2; }\n+| %empty       { $$ = mk_none(); }\n+;\n \n lambda_expr\n : %prec LAMBDA"}]}