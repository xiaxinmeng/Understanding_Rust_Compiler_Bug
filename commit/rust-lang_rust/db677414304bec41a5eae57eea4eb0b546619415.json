{"sha": "db677414304bec41a5eae57eea4eb0b546619415", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNjc3NDE0MzA0YmVjNDFhNWVhZTU3ZWVhNGViMGI1NDY2MTk0MTU=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T20:55:24Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T20:55:24Z"}, "message": "Move is_block to lower in the call tree", "tree": {"sha": "9aafa47e0acbacdaab0cf5d3ca3a356ba8ac3591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aafa47e0acbacdaab0cf5d3ca3a356ba8ac3591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db677414304bec41a5eae57eea4eb0b546619415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db677414304bec41a5eae57eea4eb0b546619415", "html_url": "https://github.com/rust-lang/rust/commit/db677414304bec41a5eae57eea4eb0b546619415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db677414304bec41a5eae57eea4eb0b546619415/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def0a95d357f334b7329c3ee9e7da3c30563321c", "url": "https://api.github.com/repos/rust-lang/rust/commits/def0a95d357f334b7329c3ee9e7da3c30563321c", "html_url": "https://github.com/rust-lang/rust/commit/def0a95d357f334b7329c3ee9e7da3c30563321c"}], "stats": {"total": 219, "additions": 104, "deletions": 115}, "files": [{"sha": "5f5a3077daf307ceb7eca3793df69763c9d2f885", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=db677414304bec41a5eae57eea4eb0b546619415", "patch": "@@ -64,6 +64,16 @@ pub(crate) fn block(p: &mut Parser) {\n                         if p.at(R_CURLY) {\n                             m.abandon(p);\n                         } else {\n+                            // test no_semi_after_block\n+                            // fn foo() {\n+                            //     if true {}\n+                            //     loop {}\n+                            //     match () {}\n+                            //     while true {}\n+                            //     for _ in () {}\n+                            //     {}\n+                            //     {}\n+                            // }\n                             if is_blocklike {\n                                 p.eat(SEMI);\n                             } else {\n@@ -158,19 +168,18 @@ fn current_op(p: &Parser) -> (u8, Op) {\n // Parses expression with binding power of at least bp.\n fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n     let mut lhs = match lhs(p, r) {\n-        (Some(lhs), macro_blocklike) => {\n+        Some((lhs, macro_blocklike)) => {\n             // test stmt_bin_expr_ambiguity\n             // fn foo() {\n             //     let _ = {1} & 2;\n             //     {1} &2;\n             // }\n-            if r.prefer_stmt && (is_block(lhs.kind()) || macro_blocklike == Some(BlockLike::Block))\n-            {\n+            if r.prefer_stmt && macro_blocklike.is_block() {\n                 return BlockLike::Block;\n             }\n             lhs\n         }\n-        (None, _) => return BlockLike::NotBlock,\n+        None => return BlockLike::NotBlock,\n     };\n \n     loop {\n@@ -192,29 +201,12 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n     BlockLike::NotBlock\n }\n \n-// test no_semi_after_block\n-// fn foo() {\n-//     if true {}\n-//     loop {}\n-//     match () {}\n-//     while true {}\n-//     for _ in () {}\n-//     {}\n-//     {}\n-// }\n-fn is_block(kind: SyntaxKind) -> bool {\n-    match kind {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => true,\n-        _ => false,\n-    }\n-}\n-\n const LHS_FIRST: TokenSet = token_set_union![\n     token_set![AMP, STAR, EXCL, DOTDOT, MINUS],\n     atom::ATOM_EXPR_FIRST,\n ];\n \n-fn lhs(p: &mut Parser, r: Restrictions) -> (Option<CompletedMarker>, Option<BlockLike>) {\n+fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     let m;\n     let kind = match p.current() {\n         // test ref_expr\n@@ -247,30 +239,28 @@ fn lhs(p: &mut Parser, r: Restrictions) -> (Option<CompletedMarker>, Option<Bloc\n             if p.at_ts(EXPR_FIRST) {\n                 expr_bp(p, r, 2);\n             }\n-            return (Some(m.complete(p, RANGE_EXPR)), None);\n+            return Some((m.complete(p, RANGE_EXPR), BlockLike::NotBlock));\n         }\n         _ => {\n-            let (lhs_marker, macro_block_like) = atom::atom_expr(p, r);\n-\n-            if macro_block_like == Some(BlockLike::Block) {\n-                return (lhs_marker, macro_block_like);\n-            }\n-            if let Some(lhs_marker) = lhs_marker {\n-                return (Some(postfix_expr(p, r, lhs_marker)), macro_block_like);\n-            } else {\n-                return (None, None);\n-            }\n+            let (lhs, blocklike) = atom::atom_expr(p, r)?;\n+            return Some((\n+                postfix_expr(p, lhs, !(r.prefer_stmt && blocklike.is_block())),\n+                blocklike,\n+            ));\n         }\n     };\n     expr_bp(p, r, 255);\n-    (Some(m.complete(p, kind)), None)\n+    Some((m.complete(p, kind), BlockLike::NotBlock))\n }\n \n-fn postfix_expr(p: &mut Parser, r: Restrictions, mut lhs: CompletedMarker) -> CompletedMarker {\n+fn postfix_expr(\n+    p: &mut Parser,\n+    mut lhs: CompletedMarker,\n     // Calls are disallowed if the type is a block and we prefer statements because the call cannot be disambiguated from a tuple\n     // E.g. `while true {break}();` is parsed as\n     // `while true {break}; ();`\n-    let mut allow_calls = !r.prefer_stmt || !is_block(lhs.kind());\n+    mut allow_calls: bool,\n+) -> CompletedMarker {\n     loop {\n         lhs = match p.current() {\n             // test stmt_postfix_expr_ambiguity\n@@ -418,22 +408,21 @@ fn arg_list(p: &mut Parser) {\n //     let _ = ::a::<b>;\n //     let _ = format!();\n // }\n-fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, Option<BlockLike>) {\n+fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n     assert!(paths::is_path_start(p) || p.at(L_ANGLE));\n     let m = p.start();\n     paths::expr_path(p);\n-    let res = match p.current() {\n+    match p.current() {\n         L_CURLY if !r.forbid_structs => {\n             named_field_list(p);\n-            m.complete(p, STRUCT_LIT)\n+            (m.complete(p, STRUCT_LIT), BlockLike::Block)\n         }\n         EXCL => {\n-            let block_like = items::macro_call_after_excl(p); // TODO: Use return type (BlockLike)\n-            return (m.complete(p, MACRO_CALL), Some(block_like));\n+            let block_like = items::macro_call_after_excl(p);\n+            return (m.complete(p, MACRO_CALL), block_like);\n         }\n-        _ => m.complete(p, PATH_EXPR),\n-    };\n-    (res, None)\n+        _ => (m.complete(p, PATH_EXPR), BlockLike::NotBlock),\n+    }\n }\n \n // test struct_lit"}, {"sha": "a976799e7388bd1c9ddfaecf6dd805b4322dfd5e", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=db677414304bec41a5eae57eea4eb0b546619415", "patch": "@@ -61,16 +61,12 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n \n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n-pub(super) fn atom_expr(\n-    p: &mut Parser,\n-    r: Restrictions,\n-) -> (Option<CompletedMarker>, Option<BlockLike>) {\n+pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     if let Some(m) = literal(p) {\n-        return (Some(m), None);\n+        return Some((m, BlockLike::NotBlock));\n     }\n     if paths::is_path_start(p) || p.at(L_ANGLE) {\n-        let path_expr = path_expr(p, r);\n-        return (Some(path_expr.0), path_expr.1);\n+        return Some(path_expr(p, r));\n     }\n     let la = p.nth(1);\n     let done = match p.current() {\n@@ -98,7 +94,7 @@ pub(super) fn atom_expr(\n                     // }\n                     p.error(\"expected a loop\");\n                     m.complete(p, ERROR);\n-                    return (None, None);\n+                    return None;\n                 }\n             }\n         }\n@@ -115,10 +111,14 @@ pub(super) fn atom_expr(\n         BREAK_KW => break_expr(p),\n         _ => {\n             p.err_recover(\"expected expression\", EXPR_RECOVERY_SET);\n-            return (None, None);\n+            return None;\n         }\n     };\n-    (Some(done), None)\n+    let blocklike = match done.kind() {\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => BlockLike::Block,\n+        _ => BlockLike::NotBlock,\n+    };\n+    Some((done, blocklike))\n }\n \n // test tuple_expr"}, {"sha": "c12ab6fcea28665598cc8fe6c56483319f26fae5", "filename": "crates/ra_syntax/tests/data/parser/inline/0094_range_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0094_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0094_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0094_range_pat.rs?ref=db677414304bec41a5eae57eea4eb0b546619415", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    match 92 { \n+    match 92 {\n         0 ... 100 => (),\n         101 ..= 200 => (),\n         200 .. 301=> (),"}, {"sha": "d47f38903a2ed6f1a52d049827867a7455b57944", "filename": "crates/ra_syntax/tests/data/parser/inline/0094_range_pat.txt", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0094_range_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/db677414304bec41a5eae57eea4eb0b546619415/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0094_range_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0094_range_pat.txt?ref=db677414304bec41a5eae57eea4eb0b546619415", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 113)\n-  FN_DEF@[0; 112)\n+SOURCE_FILE@[0; 112)\n+  FN_DEF@[0; 111)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n     NAME@[3; 7)\n@@ -8,69 +8,69 @@ SOURCE_FILE@[0; 113)\n       L_PAREN@[7; 8)\n       R_PAREN@[8; 9)\n     WHITESPACE@[9; 10)\n-    BLOCK@[10; 112)\n+    BLOCK@[10; 111)\n       L_CURLY@[10; 11)\n       WHITESPACE@[11; 16)\n-      MATCH_EXPR@[16; 110)\n+      MATCH_EXPR@[16; 109)\n         MATCH_KW@[16; 21)\n         WHITESPACE@[21; 22)\n         LITERAL@[22; 24)\n           INT_NUMBER@[22; 24) \"92\"\n         WHITESPACE@[24; 25)\n-        MATCH_ARM_LIST@[25; 110)\n+        MATCH_ARM_LIST@[25; 109)\n           L_CURLY@[25; 26)\n-          WHITESPACE@[26; 36)\n-          MATCH_ARM@[36; 51)\n-            RANGE_PAT@[36; 45)\n-              LITERAL@[36; 37)\n-                INT_NUMBER@[36; 37) \"0\"\n-              WHITESPACE@[37; 38)\n-              DOTDOTDOT@[38; 41)\n-              WHITESPACE@[41; 42)\n-              LITERAL@[42; 45)\n-                INT_NUMBER@[42; 45) \"100\"\n-            WHITESPACE@[45; 46)\n-            FAT_ARROW@[46; 48)\n-            WHITESPACE@[48; 49)\n-            TUPLE_EXPR@[49; 51)\n-              L_PAREN@[49; 50)\n-              R_PAREN@[50; 51)\n-          COMMA@[51; 52)\n-          WHITESPACE@[52; 61)\n-          MATCH_ARM@[61; 78)\n-            RANGE_PAT@[61; 72)\n-              LITERAL@[61; 64)\n-                INT_NUMBER@[61; 64) \"101\"\n-              WHITESPACE@[64; 65)\n-              DOTDOTEQ@[65; 68)\n-              WHITESPACE@[68; 69)\n-              LITERAL@[69; 72)\n-                INT_NUMBER@[69; 72) \"200\"\n-            WHITESPACE@[72; 73)\n-            FAT_ARROW@[73; 75)\n-            WHITESPACE@[75; 76)\n-            TUPLE_EXPR@[76; 78)\n-              L_PAREN@[76; 77)\n-              R_PAREN@[77; 78)\n-          COMMA@[78; 79)\n-          WHITESPACE@[79; 88)\n-          MATCH_ARM@[88; 103)\n-            RANGE_PAT@[88; 98)\n-              LITERAL@[88; 91)\n-                INT_NUMBER@[88; 91) \"200\"\n-              WHITESPACE@[91; 92)\n-              DOTDOT@[92; 94)\n-              WHITESPACE@[94; 95)\n-              LITERAL@[95; 98)\n-                INT_NUMBER@[95; 98) \"301\"\n-            FAT_ARROW@[98; 100)\n-            WHITESPACE@[100; 101)\n-            TUPLE_EXPR@[101; 103)\n-              L_PAREN@[101; 102)\n-              R_PAREN@[102; 103)\n-          COMMA@[103; 104)\n-          WHITESPACE@[104; 109)\n-          R_CURLY@[109; 110)\n-      WHITESPACE@[110; 111)\n-      R_CURLY@[111; 112)\n-  WHITESPACE@[112; 113)\n+          WHITESPACE@[26; 35)\n+          MATCH_ARM@[35; 50)\n+            RANGE_PAT@[35; 44)\n+              LITERAL@[35; 36)\n+                INT_NUMBER@[35; 36) \"0\"\n+              WHITESPACE@[36; 37)\n+              DOTDOTDOT@[37; 40)\n+              WHITESPACE@[40; 41)\n+              LITERAL@[41; 44)\n+                INT_NUMBER@[41; 44) \"100\"\n+            WHITESPACE@[44; 45)\n+            FAT_ARROW@[45; 47)\n+            WHITESPACE@[47; 48)\n+            TUPLE_EXPR@[48; 50)\n+              L_PAREN@[48; 49)\n+              R_PAREN@[49; 50)\n+          COMMA@[50; 51)\n+          WHITESPACE@[51; 60)\n+          MATCH_ARM@[60; 77)\n+            RANGE_PAT@[60; 71)\n+              LITERAL@[60; 63)\n+                INT_NUMBER@[60; 63) \"101\"\n+              WHITESPACE@[63; 64)\n+              DOTDOTEQ@[64; 67)\n+              WHITESPACE@[67; 68)\n+              LITERAL@[68; 71)\n+                INT_NUMBER@[68; 71) \"200\"\n+            WHITESPACE@[71; 72)\n+            FAT_ARROW@[72; 74)\n+            WHITESPACE@[74; 75)\n+            TUPLE_EXPR@[75; 77)\n+              L_PAREN@[75; 76)\n+              R_PAREN@[76; 77)\n+          COMMA@[77; 78)\n+          WHITESPACE@[78; 87)\n+          MATCH_ARM@[87; 102)\n+            RANGE_PAT@[87; 97)\n+              LITERAL@[87; 90)\n+                INT_NUMBER@[87; 90) \"200\"\n+              WHITESPACE@[90; 91)\n+              DOTDOT@[91; 93)\n+              WHITESPACE@[93; 94)\n+              LITERAL@[94; 97)\n+                INT_NUMBER@[94; 97) \"301\"\n+            FAT_ARROW@[97; 99)\n+            WHITESPACE@[99; 100)\n+            TUPLE_EXPR@[100; 102)\n+              L_PAREN@[100; 101)\n+              R_PAREN@[101; 102)\n+          COMMA@[102; 103)\n+          WHITESPACE@[103; 108)\n+          R_CURLY@[108; 109)\n+      WHITESPACE@[109; 110)\n+      R_CURLY@[110; 111)\n+  WHITESPACE@[111; 112)"}]}