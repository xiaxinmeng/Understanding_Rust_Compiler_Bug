{"sha": "e857696cf8c3b4a4381d00424f165c10f93a9ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTc2OTZjZjhjM2I0YTQzODFkMDA0MjRmMTY1YzEwZjkzYTllYmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T04:36:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T15:57:20Z"}, "message": "Tweak \"non-primitive cast\" error\n\n- Suggest borrowing expression if it would allow cast to work.\n- Suggest using `<Type>::from(<expr>)` when appropriate.\n- Minor tweak to `;` typo suggestion.\n\nPartily address #47136.", "tree": {"sha": "0da7c7f3617583ad133b881c0fffab9df5c94ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da7c7f3617583ad133b881c0fffab9df5c94ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e857696cf8c3b4a4381d00424f165c10f93a9ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e857696cf8c3b4a4381d00424f165c10f93a9ebd", "html_url": "https://github.com/rust-lang/rust/commit/e857696cf8c3b4a4381d00424f165c10f93a9ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e857696cf8c3b4a4381d00424f165c10f93a9ebd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8674837a9cc5225020e07fc3f164762bb4c11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8674837a9cc5225020e07fc3f164762bb4c11c", "html_url": "https://github.com/rust-lang/rust/commit/bb8674837a9cc5225020e07fc3f164762bb4c11c"}], "stats": {"total": 325, "additions": 204, "deletions": 121}, "files": [{"sha": "8ff1ced53b071840f45edad5e3c3184804fb90c2", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -374,6 +374,7 @@ pub trait Into<T>: Sized {\n /// [`Into`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n /// [book]: ../../book/ch09-00-error-handling.html\n+#[rustc_diagnostic_item = \"from_trait\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(on(\n     all(_Self = \"&str\", T = \"std::string::String\"),"}, {"sha": "dafc0a9e048a45f6d7b0618b0ac2d6fcfa45a7a6", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -961,7 +961,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let sp = self.prev_token.span;\n             self.struct_span_err(sp, &msg)\n-                .span_suggestion(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                .span_suggestion_short(sp, \"change this to `;`\", \";\".to_string(), appl)\n                 .emit();\n             return Ok(());\n         } else if self.look_ahead(0, |t| {"}, {"sha": "9925e631c5c205a11e890818d1f077c2cee77fc5", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -343,6 +343,7 @@ symbols! {\n         from_method,\n         from_ok,\n         from_usize,\n+        from_trait,\n         fundamental,\n         future,\n         Future,"}, {"sha": "bad009f4039af230abd291d924784cccbd41aa12", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 88, "deletions": 19, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -43,6 +43,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_session::lint;\n use rustc_session::Session;\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n@@ -333,23 +334,87 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     \"only `u8` can be cast as `char`, not `{}`\",\n                     self.expr_ty\n                 )\n+                .span_label(self.span, \"invalid cast\")\n                 .emit();\n             }\n             CastError::NonScalar => {\n-                type_error_struct!(\n+                let mut err = type_error_struct!(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     E0605,\n                     \"non-primitive cast: `{}` as `{}`\",\n                     self.expr_ty,\n                     fcx.ty_to_string(self.cast_ty)\n-                )\n-                .note(\n-                    \"an `as` expression can only be used to convert between \\\n-                                         primitive types. Consider using the `From` trait\",\n-                )\n-                .emit();\n+                );\n+                let mut sugg = None;\n+                if let ty::Ref(reg, _, mutbl) = self.cast_ty.kind {\n+                    if fcx\n+                        .try_coerce(\n+                            self.expr,\n+                            fcx.tcx.mk_ref(reg, TypeAndMut { ty: self.expr_ty, mutbl }),\n+                            self.cast_ty,\n+                            AllowTwoPhase::No,\n+                        )\n+                        .is_ok()\n+                    {\n+                        sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n+                    }\n+                }\n+                if let Some(sugg) = sugg {\n+                    err.span_label(self.span, \"invalid cast\");\n+                    err.span_suggestion_verbose(\n+                        self.expr.span.shrink_to_lo(),\n+                        \"borrow the value for the cast to be valid\",\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else if !matches!(\n+                    self.cast_ty.kind,\n+                    ty::FnDef(..) | ty::FnPtr(..) | ty::Closure(..)\n+                ) {\n+                    let mut label = true;\n+                    // Check `impl From<self.expr_ty> for self.cast_ty {}` for accurate suggestion:\n+                    if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                        if let Some(from_trait) = fcx.tcx.get_diagnostic_item(sym::from_trait) {\n+                            let ty = fcx.resolve_vars_if_possible(&self.cast_ty);\n+                            // Erase regions to avoid panic in `prove_value` when calling\n+                            // `type_implements_trait`.\n+                            let ty = fcx.tcx.erase_regions(&ty);\n+                            let expr_ty = fcx.resolve_vars_if_possible(&self.expr_ty);\n+                            let expr_ty = fcx.tcx.erase_regions(&expr_ty);\n+                            let ty_params = fcx.tcx.mk_substs_trait(expr_ty, &[]);\n+                            // Check for infer types because cases like `Option<{integer}>` would\n+                            // panic otherwise.\n+                            if !expr_ty.has_infer_types()\n+                                && fcx.tcx.type_implements_trait((\n+                                    from_trait,\n+                                    ty,\n+                                    ty_params,\n+                                    fcx.param_env,\n+                                ))\n+                            {\n+                                label = false;\n+                                err.span_suggestion(\n+                                    self.span,\n+                                    \"consider using the `From` trait instead\",\n+                                    format!(\"{}::from({})\", self.cast_ty, snippet),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                    }\n+                    let msg = \"an `as` expression can only be used to convert between primitive \\\n+                               types or to coerce to a specific trait object\";\n+                    if label {\n+                        err.span_label(self.span, msg);\n+                    } else {\n+                        err.note(msg);\n+                    }\n+                } else {\n+                    err.span_label(self.span, \"invalid cast\");\n+                }\n+                err.emit();\n             }\n             CastError::SizedUnsizedCast => {\n                 use crate::structured_errors::{SizedUnsizedCastError, StructuredDiagnostic};\n@@ -370,21 +435,22 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 };\n                 let mut err = struct_span_err!(\n                     fcx.tcx.sess,\n-                    self.span,\n+                    if unknown_cast_to { self.cast_span } else { self.span },\n                     E0641,\n                     \"cannot cast {} a pointer of an unknown kind\",\n                     if unknown_cast_to { \"to\" } else { \"from\" }\n                 );\n-                err.note(\n-                    \"the type information given here is insufficient to check whether \\\n-                          the pointer cast is valid\",\n-                );\n                 if unknown_cast_to {\n-                    err.span_suggestion_short(\n-                        self.cast_span,\n-                        \"consider giving more type information\",\n-                        String::new(),\n-                        Applicability::Unspecified,\n+                    err.span_label(self.cast_span, \"needs more type information\");\n+                    err.note(\n+                        \"the type information given here is insufficient to check whether \\\n+                        the pointer cast is valid\",\n+                    );\n+                } else {\n+                    err.span_label(\n+                        self.span,\n+                        \"the type information given here is insufficient to check whether \\\n+                        the pointer cast is valid\",\n                     );\n                 }\n                 err.emit();\n@@ -438,13 +504,16 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     Ok(s) => {\n                         err.span_suggestion(\n                             self.cast_span,\n-                            \"try casting to a `Box` instead\",\n+                            \"you can cast to a `Box` instead\",\n                             format!(\"Box<{}>\", s),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                     Err(_) => {\n-                        err.span_help(self.cast_span, &format!(\"did you mean `Box<{}>`?\", tstr));\n+                        err.span_help(\n+                            self.cast_span,\n+                            &format!(\"you might have meant `Box<{}>`\", tstr),\n+                        );\n                     }\n                 }\n             }"}, {"sha": "dab133cfb4b673f06c91352c9dc5cfdba9f72992", "filename": "src/test/ui/cast/cast-from-nil.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-from-nil.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-from-nil.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-from-nil.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,7 @@ error[E0605]: non-primitive cast: `()` as `u32`\n   --> $DIR/cast-from-nil.rs:2:21\n    |\n LL | fn main() { let u = (assert!(true) as u32); }\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}, {"sha": "d97b0c5f8aadc736c3fdc1c114e1c3c98b34f814", "filename": "src/test/ui/cast/cast-to-bare-fn.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-to-bare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-to-bare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-bare-fn.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,17 +2,13 @@ error[E0605]: non-primitive cast: `fn(isize) {foo}` as `extern \"C\" fn() -> isize\n   --> $DIR/cast-to-bare-fn.rs:5:13\n    |\n LL |     let x = foo as extern \"C\" fn() -> isize;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n \n error[E0605]: non-primitive cast: `u64` as `fn(isize) -> (isize, isize)`\n   --> $DIR/cast-to-bare-fn.rs:7:13\n    |\n LL |     let y = v as extern \"Rust\" fn(isize) -> (isize, isize);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29a9baffd71d7592268a801d2fcfd26d730aa78b", "filename": "src/test/ui/cast/cast-to-nil.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-to-nil.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-to-nil.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-nil.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,7 @@ error[E0605]: non-primitive cast: `u32` as `()`\n   --> $DIR/cast-to-nil.rs:2:21\n    |\n LL | fn main() { let u = 0u32 as (); }\n-   |                     ^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |                     ^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}, {"sha": "9b86f8d4def86bd04fcb118e7fcfaeac652f21cf", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -12,7 +12,7 @@ error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::ma\n LL |     Box::new(1) as dyn Send;\n    |     ^^^^^^^^^^^^^^^--------\n    |                    |\n-   |                    help: try casting to a `Box` instead: `Box<dyn Send>`\n+   |                    help: you can cast to a `Box` instead: `Box<dyn Send>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4b3b4be798fc1e541a2f7b98df22ef6c737b8db3", "filename": "src/test/ui/closures/closure-no-fn-3.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,7 @@ error[E0605]: non-primitive cast: `[closure@$DIR/closure-no-fn-3.rs:6:27: 6:37 b\n   --> $DIR/closure-no-fn-3.rs:6:27\n    |\n LL |     let baz: fn() -> u8 = (|| { b }) as fn() -> u8;\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n \n error: aborting due to previous error\n "}, {"sha": "d3adbd5158dbbbffc6f0a72484039f9c5819c9c0", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,17 +2,13 @@ error[E0605]: non-primitive cast: `i32` as `!`\n   --> $DIR/coerce-to-bang-cast.rs:6:13\n    |\n LL |     let y = {return; 22} as !;\n-   |             ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `i32` as `!`\n   --> $DIR/coerce-to-bang-cast.rs:11:13\n    |\n LL |     let y = 22 as !;\n-   |             ^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e4d256c0ad19201b93438af57daec0badf1fb1d3", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -16,7 +16,7 @@ error[E0604]: only `u8` can be cast as `char`, not `i8`\n   --> $DIR/const-eval-overflow-4b.rs:25:13\n    |\n LL |     : [u32; 5i8 as char as usize]\n-   |             ^^^^^^^^^^^\n+   |             ^^^^^^^^^^^ invalid cast\n \n error: aborting due to 3 previous errors\n "}, {"sha": "18835310bd5e87ec6541fa49df36540a60be1c64", "filename": "src/test/ui/error-codes/E0604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,7 +2,7 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/E0604.rs:2:5\n    |\n LL |     1u32 as char;\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ invalid cast\n \n error: aborting due to previous error\n "}, {"sha": "f23d2008e0b5f2c4cd38904b074ac9c48bc5747c", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,17 +2,13 @@ error[E0605]: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n   --> $DIR/E0605.rs:3:5\n    |\n LL |     x as Vec<u8>;\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |     ^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/E0605.rs:6:5\n    |\n LL |     v as &u8;\n-   |     ^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |     ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "905195d4ad963fe4b963a1dc31e03a1b9a115a27", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -42,15 +42,13 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:25:5\n    |\n LL |     0u32 as char;\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ invalid cast\n \n error[E0605]: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n   --> $DIR/error-festival.rs:29:5\n    |\n LL |     x as Vec<u8>;\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |     ^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/error-festival.rs:33:24"}, {"sha": "56d5a26beb04ee0d37e823799155373569c068a4", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -34,9 +34,7 @@ error[E0605]: non-primitive cast: `std::boxed::Box<[i32]>` as `usize`\n   --> $DIR/fat-ptr-cast.rs:14:5\n    |\n LL |     b as usize;\n-   |     ^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |     ^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0606]: casting `*const [i32]` as `usize` is invalid\n   --> $DIR/fat-ptr-cast.rs:15:5"}, {"sha": "5b8a1823386936929c5200ea19a420515be3608e", "filename": "src/test/ui/issues/issue-10991.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-10991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-10991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10991.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,7 @@ error[E0605]: non-primitive cast: `()` as `usize`\n   --> $DIR/issue-10991.rs:3:14\n    |\n LL |     let _t = nil as usize;\n-   |              ^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |              ^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}, {"sha": "eaf6acff26bf35cf92b704ebca96c4c0bdaaebb0", "filename": "src/test/ui/issues/issue-16048.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-16048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-16048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16048.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -18,12 +18,12 @@ impl<'a> Test<'a> for Foo<'a> {\n }\n \n impl<'a> NoLifetime for Foo<'a> {\n-    fn get<'p, T : Test<'a>>(&self) -> T {\n+    fn get<'p, T: Test<'a> + From<Foo<'a>>>(&self) -> T {\n     //~^ ERROR E0195\n     //~| NOTE lifetimes do not match method in trait\n         return *self as T;\n         //~^ ERROR non-primitive cast: `Foo<'a>` as `T`\n-        //~| NOTE an `as` expression can only be used to convert between primitive types.\n+        //~| NOTE an `as` expression can only be used to convert between primitive types\n     }\n }\n "}, {"sha": "73610942d7a7ed358ded73169f73004ff5bfac24", "filename": "src/test/ui/issues/issue-16048.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-16048.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-16048.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16048.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -4,16 +4,16 @@ error[E0195]: lifetime parameters or bounds on method `get` do not match the tra\n LL |     fn get<'p, T : Test<'p>>(&self) -> T;\n    |           ------------------ lifetimes in impl do not match this method in trait\n ...\n-LL |     fn get<'p, T : Test<'a>>(&self) -> T {\n-   |           ^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+LL |     fn get<'p, T: Test<'a> + From<Foo<'a>>>(&self) -> T {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0605]: non-primitive cast: `Foo<'a>` as `T`\n   --> $DIR/issue-16048.rs:24:16\n    |\n LL |         return *self as T;\n-   |                ^^^^^^^^^^\n+   |                ^^^^^^^^^^ help: consider using the `From` trait instead: `T::from(*self)`\n    |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   = note: an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b63a3995d255dd523a3518f7e891845f57bd5069", "filename": "src/test/ui/issues/issue-17441.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-17441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-17441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17441.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -16,7 +16,7 @@ error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::D\n LL |     let _bar = Box::new(1_usize) as dyn std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^^-------------------\n    |                                     |\n-   |                                     help: try casting to a `Box` instead: `Box<dyn std::fmt::Debug>`\n+   |                                     help: you can cast to a `Box` instead: `Box<dyn std::fmt::Debug>`\n \n error[E0620]: cast to unsized type: `usize` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:8:16"}, {"sha": "4c35deb1fbe4e0b566c14fc9026d09f5883cfff3", "filename": "src/test/ui/issues/issue-22289.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,12 @@ error[E0605]: non-primitive cast: `i32` as `&(dyn std::any::Any + 'static)`\n   --> $DIR/issue-22289.rs:2:5\n    |\n LL |     0 as &dyn std::any::Any;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+help: borrow the value for the cast to be valid\n+   |\n+LL |     &0 as &dyn std::any::Any;\n+   |     ^\n \n error: aborting due to previous error\n "}, {"sha": "4e359b3412a71e8400aca880fea2c4cadf9f93f6", "filename": "src/test/ui/issues/issue-22312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-22312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-22312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,6 +1,6 @@\n use std::ops::Index;\n \n-pub trait Array2D: Index<usize> {\n+pub trait Array2D: Index<usize> + Sized {\n     fn rows(&self) -> usize;\n     fn columns(&self) -> usize;\n     fn get<'a>(&'a self, y: usize, x: usize) -> Option<&'a <Self as Index<usize>>::Output> {"}, {"sha": "28564b074633bf2fd402729008e8f39644b90f7d", "filename": "src/test/ui/issues/issue-22312.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,12 @@ error[E0605]: non-primitive cast: `Self` as `&dyn std::ops::Index<usize, Output\n   --> $DIR/issue-22312.rs:11:24\n    |\n LL |         let indexer = &(*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+help: borrow the value for the cast to be valid\n+   |\n+LL |         let indexer = &(&*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n+   |                         ^\n \n error: aborting due to previous error\n "}, {"sha": "9f5968399a37d8a730bced19a959071fba7e0bf9", "filename": "src/test/ui/issues/issue-2995.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,7 @@ error[E0605]: non-primitive cast: `*const isize` as `&isize`\n   --> $DIR/issue-2995.rs:2:22\n    |\n LL |     let _q: &isize = p as &isize;\n-   |                      ^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |                      ^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}, {"sha": "d00f3d91b49da640f3a063a9c071155fc7e663ae", "filename": "src/test/ui/issues/issue-45730.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,30 +1,24 @@\n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:3:23\n+  --> $DIR/issue-45730.rs:3:28\n    |\n LL |     let x: *const _ = 0 as _;\n-   |                       ^^^^^-\n-   |                            |\n-   |                            help: consider giving more type information\n+   |                            ^ needs more type information\n    |\n    = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:5:23\n+  --> $DIR/issue-45730.rs:5:28\n    |\n LL |     let x: *const _ = 0 as *const _;\n-   |                       ^^^^^--------\n-   |                            |\n-   |                            help: consider giving more type information\n+   |                            ^^^^^^^^ needs more type information\n    |\n    = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:8:13\n+  --> $DIR/issue-45730.rs:8:44\n    |\n LL |     let x = 0 as *const i32 as *const _ as *mut _;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------\n-   |                                            |\n-   |                                            help: consider giving more type information\n+   |                                            ^^^^^^ needs more type information\n    |\n    = note: the type information given here is insufficient to check whether the pointer cast is valid\n "}, {"sha": "95936de218b8fe5d25de453501655ddde3c5ba76", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -24,41 +24,31 @@ error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/cast-rfc0401.rs:29:13\n    |\n LL |     let _ = v as &u8;\n-   |             ^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:30:13\n    |\n LL |     let _ = v as E;\n-   |             ^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `*const u8` as `fn()`\n   --> $DIR/cast-rfc0401.rs:31:13\n    |\n LL |     let _ = v as fn();\n-   |             ^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^ invalid cast\n \n error[E0605]: non-primitive cast: `*const u8` as `(u32,)`\n   --> $DIR/cast-rfc0401.rs:32:13\n    |\n LL |     let _ = v as (u32,);\n-   |             ^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0605]: non-primitive cast: `std::option::Option<&*const u8>` as `*const u8`\n   --> $DIR/cast-rfc0401.rs:33:13\n    |\n LL |     let _ = Some(&v) as *const u8;\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error[E0606]: casting `*const u8` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:35:13\n@@ -102,7 +92,7 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/cast-rfc0401.rs:41:13\n    |\n LL |     let _ = 0x61u32 as char;\n-   |             ^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^ invalid cast\n \n error[E0606]: casting `bool` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:43:13"}, {"sha": "d39b0a3207763a37eb1f89165afd06be0bd5dcca", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -17,12 +17,11 @@ error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:22:19\n    |\n LL |     ($x:expr) => ($x as ())\n-   |                   ^^^^^^^^\n+   |                   ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n ...\n LL |     cast!(2);\n    |     --------- in this macro invocation\n    |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "0a4b98469b2b6c356b60af5f9aac6dc47a03f464", "filename": "src/test/ui/nonscalar-cast.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fnonscalar-cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fnonscalar-cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnonscalar-cast.fixed?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#[derive(Debug)]\n+struct Foo {\n+    x: isize\n+}\n+\n+impl From<Foo> for isize {\n+    fn from(val: Foo) -> isize {\n+        val.x\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", isize::from(Foo { x: 1 })); //~ non-primitive cast: `Foo` as `isize` [E0605]\n+}"}, {"sha": "59fcf09666b24f32aa36a63b8029b8acd1064dba", "filename": "src/test/ui/nonscalar-cast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnonscalar-cast.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,8 +1,16 @@\n+// run-rustfix\n+\n #[derive(Debug)]\n struct Foo {\n     x: isize\n }\n \n+impl From<Foo> for isize {\n+    fn from(val: Foo) -> isize {\n+        val.x\n+    }\n+}\n+\n fn main() {\n     println!(\"{}\", Foo { x: 1 } as isize); //~ non-primitive cast: `Foo` as `isize` [E0605]\n }"}, {"sha": "2a7037121876d8725202c24c4131c23e8b811df4", "filename": "src/test/ui/nonscalar-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fnonscalar-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Fnonscalar-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnonscalar-cast.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,10 +1,10 @@\n error[E0605]: non-primitive cast: `Foo` as `isize`\n-  --> $DIR/nonscalar-cast.rs:7:20\n+  --> $DIR/nonscalar-cast.rs:15:20\n    |\n LL |     println!(\"{}\", Foo { x: 1 } as isize);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ help: consider using the `From` trait instead: `isize::from(Foo { x: 1 })`\n    |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   = note: an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}, {"sha": "9f4ac0fea36ef03ba41bb048a197ad87627bb0af", "filename": "src/test/ui/order-dependent-cast-inference.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,10 +1,8 @@\n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/order-dependent-cast-inference.rs:5:17\n+  --> $DIR/order-dependent-cast-inference.rs:5:22\n    |\n LL |     let mut y = 0 as *const _;\n-   |                 ^^^^^--------\n-   |                      |\n-   |                      help: consider giving more type information\n+   |                      ^^^^^^^^ needs more type information\n    |\n    = note: the type information given here is insufficient to check whether the pointer cast is valid\n "}, {"sha": "53e68c2ac6af64dc9ec6f6c1c7c59c10fe9726c7", "filename": "src/test/ui/tag-variant-cast-non-nullary.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.fixed?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+enum NonNullary {\n+    Nullary,\n+    Other(isize),\n+}\n+\n+impl From<NonNullary> for isize {\n+    fn from(val: NonNullary) -> isize {\n+        match val {\n+            NonNullary::Nullary => 0,\n+            NonNullary::Other(i) => i,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let v = NonNullary::Nullary;\n+    let val = isize::from(v); //~ ERROR non-primitive cast: `NonNullary` as `isize` [E0605]\n+}"}, {"sha": "0d0c6188ad114f2d3cb5c8efd121092f228ab320", "filename": "src/test/ui/tag-variant-cast-non-nullary.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.rs?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,8 +1,19 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n enum NonNullary {\n     Nullary,\n     Other(isize),\n }\n \n+impl From<NonNullary> for isize {\n+    fn from(val: NonNullary) -> isize {\n+        match val {\n+            NonNullary::Nullary => 0,\n+            NonNullary::Other(i) => i,\n+        }\n+    }\n+}\n+\n fn main() {\n     let v = NonNullary::Nullary;\n     let val = v as isize; //~ ERROR non-primitive cast: `NonNullary` as `isize` [E0605]"}, {"sha": "ae2f5a7aead552f9346eb0a231865d2d2690ce62", "filename": "src/test/ui/tag-variant-cast-non-nullary.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-cast-non-nullary.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -1,10 +1,10 @@\n error[E0605]: non-primitive cast: `NonNullary` as `isize`\n-  --> $DIR/tag-variant-cast-non-nullary.rs:8:15\n+  --> $DIR/tag-variant-cast-non-nullary.rs:19:15\n    |\n LL |     let val = v as isize;\n-   |               ^^^^^^^^^^\n+   |               ^^^^^^^^^^ help: consider using the `From` trait instead: `isize::from(v)`\n    |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   = note: an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}, {"sha": "360633bba622b9cf462f090b39729fa783a18fd8", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -16,9 +16,7 @@ error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n   --> $DIR/never_reveal_concrete_type.rs:14:13\n    |\n LL |     let _ = x as &'static str;\n-   |             ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a9f10dfec994a9e4c7a71ca776e2fca44abb058f", "filename": "src/test/ui/uninhabited/uninhabited-enum-cast.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e857696cf8c3b4a4381d00424f165c10f93a9ebd/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.stderr?ref=e857696cf8c3b4a4381d00424f165c10f93a9ebd", "patch": "@@ -2,9 +2,7 @@ error[E0605]: non-primitive cast: `E` as `isize`\n   --> $DIR/uninhabited-enum-cast.rs:4:20\n    |\n LL |     println!(\"{}\", (e as isize).to_string());\n-   |                    ^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   |                    ^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n \n error: aborting due to previous error\n "}]}