{"sha": "ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTViYTNhOGMxY2MyY2Y5YjE5MDFhMThiYTczNDM0ZjMzODBjMGQ=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2016-07-06T04:35:12Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2016-07-16T04:02:53Z"}, "message": "syntax: Better error message for inner attr following doc comment", "tree": {"sha": "35edd1373f7de95abf1cbd0e36990a79b66b3f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35edd1373f7de95abf1cbd0e36990a79b66b3f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "html_url": "https://github.com/rust-lang/rust/commit/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbbe2f716a09246939ad371125617c5526fd3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbbe2f716a09246939ad371125617c5526fd3fd", "html_url": "https://github.com/rust-lang/rust/commit/3dbbe2f716a09246939ad371125617c5526fd3fd"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "2ae3236cd5aa72f818d353cf3e6aa75c722cc255", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "patch": "@@ -18,23 +18,43 @@ use parse::token;\n use parse::parser::{Parser, TokenType};\n use ptr::P;\n \n+#[derive(PartialEq, Eq, Debug)]\n+enum InnerAttributeParsePolicy<'a> {\n+    Permitted,\n+    NotPermitted { reason: &'a str },\n+}\n+\n+const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &'static str = \"an inner attribute is not \\\n+                                                             permitted in this context\";\n+\n impl<'a> Parser<'a> {\n     /// Parse attributes that appear before an item\n     pub fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n+        let mut just_parsed_doc_comment = false;\n         loop {\n             debug!(\"parse_outer_attributes: self.token={:?}\", self.token);\n             match self.token {\n                 token::Pound => {\n-                    attrs.push(self.parse_attribute(false)?);\n+                    let inner_error_reason = if just_parsed_doc_comment {\n+                        \"an inner attribute is not permitted following an outer doc comment\"\n+                    } else if !attrs.is_empty() {\n+                        \"an inner attribute is not permitted following an outer attribute\"\n+                    } else {\n+                        DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n+                    };\n+                    let inner_parse_policy =\n+                        InnerAttributeParsePolicy::NotPermitted { reason: inner_error_reason };\n+                    attrs.push(self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?);\n+                    just_parsed_doc_comment = false;\n                 }\n                 token::DocComment(s) => {\n                     let attr = ::attr::mk_sugared_doc_attr(\n-                    attr::mk_attr_id(),\n-                    self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)),\n-                    self.span.lo,\n-                    self.span.hi\n-                );\n+                        attr::mk_attr_id(),\n+                        self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)),\n+                        self.span.lo,\n+                        self.span.hi\n+                    );\n                     if attr.node.style != ast::AttrStyle::Outer {\n                         let mut err = self.fatal(\"expected outer doc comment\");\n                         err.note(\"inner doc comments like this (starting with \\\n@@ -43,6 +63,7 @@ impl<'a> Parser<'a> {\n                     }\n                     attrs.push(attr);\n                     self.bump();\n+                    just_parsed_doc_comment = true;\n                 }\n                 _ => break,\n             }\n@@ -55,26 +76,46 @@ impl<'a> Parser<'a> {\n     /// If permit_inner is true, then a leading `!` indicates an inner\n     /// attribute\n     pub fn parse_attribute(&mut self, permit_inner: bool) -> PResult<'a, ast::Attribute> {\n-        debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n+        debug!(\"parse_attribute: permit_inner={:?} self.token={:?}\",\n                permit_inner,\n                self.token);\n+        let inner_parse_policy = if permit_inner {\n+            InnerAttributeParsePolicy::Permitted\n+        } else {\n+            InnerAttributeParsePolicy::NotPermitted\n+                { reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG }\n+        };\n+        self.parse_attribute_with_inner_parse_policy(inner_parse_policy)\n+    }\n+\n+    /// The same as `parse_attribute`, except it takes in an `InnerAttributeParsePolicy`\n+    /// that prescribes how to handle inner attributes.\n+    fn parse_attribute_with_inner_parse_policy(&mut self,\n+                                               inner_parse_policy: InnerAttributeParsePolicy)\n+                                               -> PResult<'a, ast::Attribute> {\n+        debug!(\"parse_attribute_with_inner_parse_policy: inner_parse_policy={:?} self.token={:?}\",\n+               inner_parse_policy,\n+               self.token);\n         let (span, value, mut style) = match self.token {\n             token::Pound => {\n                 let lo = self.span.lo;\n                 self.bump();\n \n-                if permit_inner {\n+                if inner_parse_policy == InnerAttributeParsePolicy::Permitted {\n                     self.expected_tokens.push(TokenType::Token(token::Not));\n                 }\n                 let style = if self.token == token::Not {\n                     self.bump();\n-                    if !permit_inner {\n+                    if let InnerAttributeParsePolicy::NotPermitted { reason } = inner_parse_policy\n+                    {\n                         let span = self.span;\n                         self.diagnostic()\n-                            .struct_span_err(span,\n-                                             \"an inner attribute is not permitted in this context\")\n-                            .help(\"place inner attribute at the top of the module or \\\n-                                   block\")\n+                            .struct_span_err(span, reason)\n+                            .note(\"inner attributes and doc comments, like `#![no_std]` or \\\n+                                   `//! My crate`, annotate the item enclosing them, and are \\\n+                                   usually found at the beginning of source files. Outer \\\n+                                   attributes and doc comments, like `#[test]` and\n+                                   `/// My function`, annotate the item following them.\")\n                             .emit()\n                     }\n                     ast::AttrStyle::Inner\n@@ -95,7 +136,8 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        if permit_inner && self.token == token::Semi {\n+        if inner_parse_policy == InnerAttributeParsePolicy::Permitted &&\n+           self.token == token::Semi {\n             self.bump();\n             self.span_warn(span,\n                            \"this inner attribute syntax is deprecated. The new syntax is \\"}, {"sha": "ed8342d9f5aaf80857eff924305ecac02769c589", "filename": "src/test/parse-fail/inner-attr-after-doc-comment.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/src%2Ftest%2Fparse-fail%2Finner-attr-after-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/src%2Ftest%2Fparse-fail%2Finner-attr-after-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Finner-attr-after-doc-comment.rs?ref=ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+#![feature(lang_items)]\n+/**\n+ * My module\n+ */\n+\n+#![recursion_limit=\"100\"]\n+//~^ ERROR an inner attribute is not permitted following an outer doc comment\n+fn main() {}"}, {"sha": "8cebda6644565c8b0d79f879d77d464a8aa05729", "filename": "src/test/parse-fail/inner-attr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/src%2Ftest%2Fparse-fail%2Finner-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d/src%2Ftest%2Fparse-fail%2Finner-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Finner-attr.rs?ref=ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+#[feature(lang_items)]\n+\n+#![recursion_limit=\"100\"] //~ ERROR an inner attribute is not permitted following an outer attribute\n+fn main() {}"}]}