{"sha": "16692ab66a6e2c62b416f606f144d60711c14414", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NjkyYWI2NmE2ZTJjNjJiNDE2ZjYwNmYxNDRkNjA3MTFjMTQ0MTQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-13T22:13:52Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-13T03:25:49Z"}, "message": "Suggest `_` and `..` if a pattern has too few fields\n\nFor example, this code:\n\n    struct S(i32, f32);\n\n    let S(x) = S(0, 1.0);\n\nwill make the compiler suggest either:\n\n    let S(x, _) = S(0, 1.0);\n\nor:\n\n    let S(x, ..) = S(0, 1.0);", "tree": {"sha": "512358f45f1e10b4aab4ef385f12a275bc3da676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512358f45f1e10b4aab4ef385f12a275bc3da676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16692ab66a6e2c62b416f606f144d60711c14414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16692ab66a6e2c62b416f606f144d60711c14414", "html_url": "https://github.com/rust-lang/rust/commit/16692ab66a6e2c62b416f606f144d60711c14414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16692ab66a6e2c62b416f606f144d60711c14414/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058a71016553f267ae80b90276ef79956457d51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/058a71016553f267ae80b90276ef79956457d51a", "html_url": "https://github.com/rust-lang/rust/commit/058a71016553f267ae80b90276ef79956457d51a"}], "stats": {"total": 262, "additions": 262, "deletions": 0}, "files": [{"sha": "942be1007f062f80fe07bb61f9ad7260a2c49392", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -15,10 +15,12 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n+use rustc_span::{BytePos, DUMMY_SP};\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n+use std::iter;\n \n use super::report_unexpected_variant_res;\n \n@@ -1040,6 +1042,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 vec![(left, \"(\".to_string()), (right.shrink_to_hi(), \")\".to_string())],\n                 Applicability::MachineApplicable,\n             );\n+        } else if fields.len() > subpats.len() {\n+            let after_fields_span = if pat_span == DUMMY_SP {\n+                pat_span\n+            } else {\n+                pat_span.with_hi(pat_span.hi() - BytePos(1)).shrink_to_hi()\n+            };\n+\n+            let mut wildcard_sugg =\n+                iter::repeat(\"_\").take(fields.len() - subpats.len()).collect::<Vec<_>>().join(\", \");\n+            if !subpats.is_empty() {\n+                wildcard_sugg = String::from(\", \") + &wildcard_sugg;\n+            }\n+\n+            let rest_sugg = if subpats.is_empty() { \"..\".to_owned() } else { \", ..\".to_owned() };\n+\n+            err.span_suggestion(\n+                after_fields_span,\n+                \"use `_` to explicitly ignore each field\",\n+                wildcard_sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+            err.span_suggestion(\n+                after_fields_span,\n+                \"use `..` to ignore all unmentioned fields\",\n+                rest_sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n         }\n \n         err.emit();"}, {"sha": "623e1d674d71ac8bf661df91088141e5db45d48b", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -31,6 +31,15 @@ LL | struct TupleStruct<S, T>(S, T);\n ...\n LL |     TupleStruct(_) = TupleStruct(1, 2);\n    |     ^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     TupleStruct(_, _) = TupleStruct(1, 2);\n+   |                  ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |     TupleStruct(_, ..) = TupleStruct(1, 2);\n+   |                  ^^^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/tuple_struct_destructure_fail.rs:34:5\n@@ -49,6 +58,15 @@ LL |     SingleVariant(S, T)\n ...\n LL |     Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     Enum::SingleVariant(_, _) = Enum::SingleVariant(1, 2);\n+   |                          ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |     Enum::SingleVariant(_, ..) = Enum::SingleVariant(1, 2);\n+   |                          ^^^^\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/tuple_struct_destructure_fail.rs:40:12"}, {"sha": "1d32eab15d33a4b393a7471dd228ddcc16ec5e06", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -6,6 +6,15 @@ LL |     Apple(String, String),\n ...\n LL |         Fruit::Apple(a) => {},\n    |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Fruit::Apple(a, _) => {},\n+   |                       ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         Fruit::Apple(a, ..) => {},\n+   |                       ^^^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/E0023.rs:12:9"}, {"sha": "38177d15158205411426c05e6c82d43564f6b833", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -17,6 +17,15 @@ LL | struct P<T>(T); // 1 type parameter wanted\n ...\n LL |     let P() = U {};\n    |         ^^^ expected 1 field, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     let P(_) = U {};\n+   |           ^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |     let P(..) = U {};\n+   |           ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8edc6ca8f0ed6080e41b4e60a82ccd0a1bfa35da", "filename": "src/test/ui/issues/issue-72574-2.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -26,6 +26,15 @@ LL | struct Binder(i32, i32, i32);\n ...\n LL |         Binder(_a, _x @ ..) => {}\n    |         ^^^^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Binder(_a, _x @ .., _) => {}\n+   |                           ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         Binder(_a, _x @ .., ..) => {}\n+   |                           ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "299b2d216db98e0e8d00f72221736fa9cf7ad283", "filename": "src/test/ui/match/match-pattern-field-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -6,6 +6,15 @@ LL |         Rgb(usize, usize, usize),\n ...\n LL |           Color::Rgb(_, _) => { }\n    |           ^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |           Color::Rgb(_, _, _) => { }\n+   |                          ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |           Color::Rgb(_, _, ..) => { }\n+   |                          ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7a73d39dbc0c63423cdf7043b4dd4815d8018650", "filename": "src/test/ui/pattern/issue-74539.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -26,6 +26,15 @@ LL |     A(u8, u8),\n ...\n LL |         E::A(x @ ..) => {\n    |         ^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::A(x @ .., _) => {\n+   |                    ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         E::A(x @ .., ..) => {\n+   |                    ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "246dd0b37b659cb7cdf38a983a06cce0e435003e", "filename": "src/test/ui/pattern/pat-tuple-underfield.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -0,0 +1,49 @@\n+struct S(i32, f32);\n+enum E {\n+    S(i32, f32),\n+}\n+\n+fn main() {\n+    match S(0, 1.0) {\n+        S(x) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all unmentioned fields\n+    }\n+    match S(0, 1.0) {\n+        S(_) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all unmentioned fields\n+    }\n+    match S(0, 1.0) {\n+        S() => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all unmentioned fields\n+    }\n+\n+    match E::S(0, 1.0) {\n+        E::S(x) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all unmentioned fields\n+    }\n+    match E::S(0, 1.0) {\n+        E::S(_) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all unmentioned fields\n+    }\n+    match E::S(0, 1.0) {\n+        E::S() => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all unmentioned fields\n+    }\n+    match E::S(0, 1.0) {\n+        E::S => {}\n+        //~^ ERROR expected unit struct, unit variant or constant, found tuple variant `E::S`\n+        //~| HELP use the tuple variant pattern syntax instead\n+    }\n+}"}, {"sha": "5364053b8e526167d5d723bd0aae48b16d7030c4", "filename": "src/test/ui/pattern/pat-tuple-underfield.stderr", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16692ab66a6e2c62b416f606f144d60711c14414/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr?ref=16692ab66a6e2c62b416f606f144d60711c14414", "patch": "@@ -0,0 +1,121 @@\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E::S`\n+  --> $DIR/pat-tuple-underfield.rs:45:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- `E::S` defined here\n+...\n+LL |         E::S => {}\n+   |         ^^^^ help: use the tuple variant pattern syntax instead: `E::S(_, _)`\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:8:9\n+   |\n+LL | struct S(i32, f32);\n+   | ------------------- tuple struct defined here\n+...\n+LL |         S(x) => {}\n+   |         ^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(x, _) => {}\n+   |            ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         S(x, ..) => {}\n+   |            ^^^^\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:14:9\n+   |\n+LL | struct S(i32, f32);\n+   | ------------------- tuple struct defined here\n+...\n+LL |         S(_) => {}\n+   |         ^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _) => {}\n+   |            ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         S(_, ..) => {}\n+   |            ^^^^\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:20:9\n+   |\n+LL | struct S(i32, f32);\n+   | ------------------- tuple struct defined here\n+...\n+LL |         S() => {}\n+   |         ^^^ expected 2 fields, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _) => {}\n+   |           ^^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         S(..) => {}\n+   |           ^^\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:27:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- tuple variant defined here\n+...\n+LL |         E::S(x) => {}\n+   |         ^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(x, _) => {}\n+   |               ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         E::S(x, ..) => {}\n+   |               ^^^^\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:33:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- tuple variant defined here\n+...\n+LL |         E::S(_) => {}\n+   |         ^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(_, _) => {}\n+   |               ^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         E::S(_, ..) => {}\n+   |               ^^^^\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:39:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- tuple variant defined here\n+...\n+LL |         E::S() => {}\n+   |         ^^^^^^ expected 2 fields, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(_, _) => {}\n+   |              ^^^^\n+help: use `..` to ignore all unmentioned fields\n+   |\n+LL |         E::S(..) => {}\n+   |              ^^\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0023, E0532.\n+For more information about an error, try `rustc --explain E0023`."}]}