{"sha": "4106ab24d74424b88c8e093071d9ece41bb67315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMDZhYjI0ZDc0NDI0Yjg4YzhlMDkzMDcxZDllY2U0MWJiNjczMTU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-05T06:00:17Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-05T06:27:26Z"}, "message": "break critical edges only when needed\n\nthe *only* place where critical edges need to be broken is on Call\ninstructions, so only break them there.", "tree": {"sha": "82ad1a5822e661e82f0147387754bc33c6432cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ad1a5822e661e82f0147387754bc33c6432cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4106ab24d74424b88c8e093071d9ece41bb67315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4106ab24d74424b88c8e093071d9ece41bb67315", "html_url": "https://github.com/rust-lang/rust/commit/4106ab24d74424b88c8e093071d9ece41bb67315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4106ab24d74424b88c8e093071d9ece41bb67315/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4248269f8ab7c749f2a626b33dc8fa9f270e8fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4248269f8ab7c749f2a626b33dc8fa9f270e8fd1", "html_url": "https://github.com/rust-lang/rust/commit/4248269f8ab7c749f2a626b33dc8fa9f270e8fd1"}], "stats": {"total": 164, "additions": 87, "deletions": 77}, "files": [{"sha": "e783420fa065ce138f68361141b56e03386ce527", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=4106ab24d74424b88c8e093071d9ece41bb67315", "patch": "@@ -327,12 +327,30 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let data = self.mir.basic_block_data(bb);\n         let terminator = data.terminator();\n \n-        let unwind = Some(unwind.unwrap_or_else(|| {\n-            // we can't use the resume block directly, because we\n-            // may want to add a drop flag write.\n-            self.jump_to_resume_block(terminator.scope,\n-                                      terminator.span)\n-        }));\n+        let assign = Statement {\n+            kind: StatementKind::Assign(location.clone(), Rvalue::Use(value.clone())),\n+            span: terminator.span,\n+            scope: terminator.scope\n+        };\n+\n+        let unwind = unwind.unwrap_or(self.patch.resume_block());\n+        let unwind = self.patch.new_block(BasicBlockData {\n+            statements: vec![assign.clone()],\n+            terminator: Some(Terminator {\n+                kind: TerminatorKind::Goto { target: unwind },\n+                ..*terminator\n+            }),\n+            is_cleanup: true\n+        });\n+\n+        let target = self.patch.new_block(BasicBlockData {\n+            statements: vec![assign],\n+            terminator: Some(Terminator {\n+                kind: TerminatorKind::Goto { target: target },\n+                ..*terminator\n+            }),\n+            is_cleanup: data.is_cleanup,\n+        });\n \n         if !self.lvalue_is_tracked(location) {\n             // drop and replace behind a pointer/array/whatever. The location\n@@ -341,7 +359,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             self.patch.patch_terminator(bb, TerminatorKind::Drop {\n                 location: location.clone(),\n                 target: target,\n-                unwind: unwind\n+                unwind: Some(unwind)\n             });\n         } else {\n             debug!(\"elaborate_drop_and_replace({:?}) - tracked\", terminator);\n@@ -356,24 +374,15 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 lvalue: location,\n                 path: path,\n                 succ: target,\n-                unwind: unwind\n+                unwind: Some(unwind)\n             }, bb);\n             on_all_children_bits(self.tcx, self.mir, self.move_data(), path, |child| {\n                 self.set_drop_flag(Location { block: target, index: 0 },\n                                    child, DropFlagState::Present);\n-                if let Some(unwind) = unwind {\n-                    self.set_drop_flag(Location { block: unwind, index: 0 },\n-                                       child, DropFlagState::Present);\n-                }\n+                self.set_drop_flag(Location { block: unwind, index: 0 },\n+                                   child, DropFlagState::Present);\n             });\n         }\n-\n-        self.patch.add_assign(Location { block: target, index: 0 },\n-                              location.clone(), Rvalue::Use(value.clone()));\n-        if let Some(unwind) = unwind {\n-            self.patch.add_assign(Location { block: unwind, index: 0 },\n-                                  location.clone(), Rvalue::Use(value.clone()));\n-        }\n     }\n \n     /// This elaborates a single drop instruction, located at `bb`, and\n@@ -828,19 +837,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         })\n     }\n \n-    fn jump_to_resume_block<'a>(&mut self, scope: ScopeId, span: Span) -> BasicBlock {\n-        let resume_block = self.patch.resume_block();\n-        self.patch.new_block(BasicBlockData {\n-            statements: vec![],\n-            terminator: Some(Terminator {\n-                scope: scope, span: span, kind: TerminatorKind::Goto {\n-                    target: resume_block\n-                }\n-            }),\n-            is_cleanup: true\n-       })\n-    }\n-\n     fn box_free_block<'a>(\n         &mut self,\n         c: &DropCtxt<'a, 'tcx>,"}, {"sha": "7c859d5e508bc588315da10d7ec7f29163a7e42d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4106ab24d74424b88c8e093071d9ece41bb67315", "patch": "@@ -1032,11 +1032,12 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);\n         passes.push_pass(box mir::transform::erase_regions::EraseRegions);\n-        passes.push_pass(box mir::transform::break_cleanup_edges::BreakCleanupEdges);\n+        passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n         passes.push_pass(box borrowck::ElaborateDrops);\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg);\n-        passes.push_pass(box mir::transform::break_cleanup_edges::BreakCleanupEdges);\n+        passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n+        passes.push_pass(box mir::transform::dump_mir::DumpMir(\"pre_trans\"));\n         passes.run_passes(tcx, &mut mir_map);\n     });\n "}, {"sha": "bcdd62c189972021ccd58054817af3cb0b83ba3d", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "renamed", "additions": 27, "deletions": 42, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=4106ab24d74424b88c8e093071d9ece41bb67315", "patch": "@@ -12,13 +12,11 @@ use rustc::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n \n-use rustc_data_structures::bitvec::BitVector;\n-\n use pretty;\n \n use traversal;\n \n-pub struct BreakCleanupEdges;\n+pub struct AddCallGuards;\n \n /**\n  * Breaks outgoing critical edges for call terminators in the MIR.\n@@ -40,7 +38,7 @@ pub struct BreakCleanupEdges;\n  *\n  */\n \n-impl<'tcx> MirPass<'tcx> for BreakCleanupEdges {\n+impl<'tcx> MirPass<'tcx> for AddCallGuards {\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n         let mut pred_count = vec![0u32; mir.basic_blocks.len()];\n \n@@ -53,9 +51,6 @@ impl<'tcx> MirPass<'tcx> for BreakCleanupEdges {\n             }\n         }\n \n-        let cleanup_map : BitVector = mir.basic_blocks\n-            .iter().map(|bb| bb.is_cleanup).collect();\n-\n         // We need a place to store the new blocks generated\n         let mut new_blocks = Vec::new();\n \n@@ -65,30 +60,31 @@ impl<'tcx> MirPass<'tcx> for BreakCleanupEdges {\n         for &bb in &bbs {\n             let data = mir.basic_block_data_mut(bb);\n \n-            if let Some(ref mut term) = data.terminator {\n-                if term_is_invoke(term) {\n-                    let term_span = term.span;\n-                    let term_scope = term.scope;\n-                    let succs = term.successors_mut();\n-                    for tgt in succs {\n-                        let num_preds = pred_count[tgt.index()];\n-                        if num_preds > 1 {\n-                            // It's a critical edge, break it\n-                            let goto = Terminator {\n-                                span: term_span,\n-                                scope: term_scope,\n-                                kind: TerminatorKind::Goto { target: *tgt }\n-                            };\n-                            let mut data = BasicBlockData::new(Some(goto));\n-                            data.is_cleanup = cleanup_map.contains(tgt.index());\n-\n-                            // Get the index it will be when inserted into the MIR\n-                            let idx = cur_len + new_blocks.len();\n-                            new_blocks.push(data);\n-                            *tgt = BasicBlock::new(idx);\n-                        }\n-                    }\n+            match data.terminator {\n+                Some(Terminator {\n+                    kind: TerminatorKind::Call {\n+                        destination: Some((_, ref mut destination)),\n+                        cleanup: Some(_),\n+                        ..\n+                    }, span, scope\n+                }) if pred_count[destination.index()] > 1 => {\n+                    // It's a critical edge, break it\n+                    let call_guard = BasicBlockData {\n+                        statements: vec![],\n+                        is_cleanup: data.is_cleanup,\n+                        terminator: Some(Terminator {\n+                            span: span,\n+                            scope: scope,\n+                            kind: TerminatorKind::Goto { target: *destination }\n+                        })\n+                    };\n+\n+                    // Get the index it will be when inserted into the MIR\n+                    let idx = cur_len + new_blocks.len();\n+                    new_blocks.push(call_guard);\n+                    *destination = BasicBlock::new(idx);\n                 }\n+                _ => {}\n             }\n         }\n \n@@ -99,15 +95,4 @@ impl<'tcx> MirPass<'tcx> for BreakCleanupEdges {\n     }\n }\n \n-impl Pass for BreakCleanupEdges {}\n-\n-// Returns true if the terminator is a call that would use an invoke in LLVM.\n-fn term_is_invoke(term: &Terminator) -> bool {\n-    match term.kind {\n-        TerminatorKind::Call { cleanup: Some(_), .. } |\n-        // FIXME: not sure whether we need this one\n-        TerminatorKind::Drop { unwind: Some(_), .. } |\n-        TerminatorKind::DropAndReplace { .. } => true,\n-        _ => false\n-    }\n-}\n+impl Pass for AddCallGuards {}", "previous_filename": "src/librustc_mir/transform/break_cleanup_edges.rs"}, {"sha": "fb49f951ecd5826db86b5d4daefc6300b4499ce2", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=4106ab24d74424b88c8e093071d9ece41bb67315", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This pass just dumps MIR at a specified point.\n+\n+use rustc::ty::TyCtxt;\n+use rustc::mir::repr::*;\n+use rustc::mir::transform::{Pass, MirPass, MirSource};\n+use pretty;\n+\n+pub struct DumpMir<'a>(pub &'a str);\n+\n+impl<'b, 'tcx> MirPass<'tcx> for DumpMir<'b> {\n+    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    src: MirSource, mir: &mut Mir<'tcx>) {\n+        pretty::dump_mir(tcx, self.0, &0, src, mir, None);\n+    }\n+}\n+\n+impl<'b> Pass for DumpMir<'b> {}"}, {"sha": "339dcdec0608071f57f344012a7c177442c79911", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4106ab24d74424b88c8e093071d9ece41bb67315/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=4106ab24d74424b88c8e093071d9ece41bb67315", "patch": "@@ -13,6 +13,7 @@ pub mod simplify_cfg;\n pub mod erase_regions;\n pub mod no_landing_pads;\n pub mod type_check;\n-pub mod break_cleanup_edges;\n+pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n+pub mod dump_mir;"}]}