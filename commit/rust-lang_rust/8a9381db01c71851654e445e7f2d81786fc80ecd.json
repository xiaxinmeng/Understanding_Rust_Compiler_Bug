{"sha": "8a9381db01c71851654e445e7f2d81786fc80ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTM4MWRiMDFjNzE4NTE2NTRlNDQ1ZTdmMmQ4MTc4NmZjODBlY2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:49:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T21:49:54Z"}, "message": "Rollup merge of #47710 - alexcrichton:llvm-6-compat, r=nikomatsakis\n\nFirst round of LLVM 6.0.0 compatibility\n\nThis includes a number of commits for the first round of upgrading to LLVM 6. There are still [lingering bugs](https://github.com/rust-lang/rust/issues/47683) but I believe all of this will nonetheless be necessary!", "tree": {"sha": "133465413a64b18bbe2bf90eb71bf25220dfab6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133465413a64b18bbe2bf90eb71bf25220dfab6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9381db01c71851654e445e7f2d81786fc80ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9381db01c71851654e445e7f2d81786fc80ecd", "html_url": "https://github.com/rust-lang/rust/commit/8a9381db01c71851654e445e7f2d81786fc80ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9381db01c71851654e445e7f2d81786fc80ecd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7706d5816b48a9dcc31b06472ecb630eab2ea44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7706d5816b48a9dcc31b06472ecb630eab2ea44", "html_url": "https://github.com/rust-lang/rust/commit/f7706d5816b48a9dcc31b06472ecb630eab2ea44"}, {"sha": "e9a64996bedbc224d1edb401162d2c3cc15eb7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a64996bedbc224d1edb401162d2c3cc15eb7c1", "html_url": "https://github.com/rust-lang/rust/commit/e9a64996bedbc224d1edb401162d2c3cc15eb7c1"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "673fa4c0c4bc09b52a01d463c589bb3be0d5b6b1", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   clang \\"}, {"sha": "f9f5b7062f8a43b41ec569432729217250cb657e", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   clang \\"}, {"sha": "2e860f940a7a7b7fa1cbf3fa25d11fe717ada873", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -320,8 +320,8 @@ pub struct TargetOptions {\n     /// Relocation model to use in object file. Corresponds to `llc\n     /// -relocation-model=$relocation_model`. Defaults to \"pic\".\n     pub relocation_model: String,\n-    /// Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".\n-    pub code_model: String,\n+    /// Code model to use. Corresponds to `llc -code-model=$code_model`.\n+    pub code_model: Option<String>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n     /// and \"local-exec\". This is similar to the -ftls-model option in GCC/Clang.\n     pub tls_model: String,\n@@ -483,7 +483,7 @@ impl Default for TargetOptions {\n             only_cdylib: false,\n             executables: false,\n             relocation_model: \"pic\".to_string(),\n-            code_model: \"default\".to_string(),\n+            code_model: None,\n             tls_model: \"global-dynamic\".to_string(),\n             disable_redzone: false,\n             eliminate_frame_pointer: true,\n@@ -736,7 +736,7 @@ impl Target {\n         key!(only_cdylib, bool);\n         key!(executables, bool);\n         key!(relocation_model);\n-        key!(code_model);\n+        key!(code_model, optional);\n         key!(tls_model);\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);"}, {"sha": "99e43a2ddf98de52b09d71522557ca59e06d693c", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -299,12 +299,11 @@ pub enum RelocMode {\n #[repr(C)]\n pub enum CodeModel {\n     Other,\n-    Default,\n-    JITDefault,\n     Small,\n     Kernel,\n     Medium,\n     Large,\n+    None,\n }\n \n /// LLVMRustDiagnosticKind\n@@ -331,7 +330,6 @@ pub enum DiagnosticKind {\n pub enum ArchiveKind {\n     Other,\n     K_GNU,\n-    K_MIPS64,\n     K_BSD,\n     K_COFF,\n }"}, {"sha": "8dcf7444dd18f919c59026bf1179d2a94f5e869b", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -105,7 +105,6 @@ impl FromStr for ArchiveKind {\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n             \"gnu\" => Ok(ArchiveKind::K_GNU),\n-            \"mips64\" => Ok(ArchiveKind::K_MIPS64),\n             \"bsd\" => Ok(ArchiveKind::K_BSD),\n             \"coff\" => Ok(ArchiveKind::K_COFF),\n             _ => Err(()),"}, {"sha": "39e86bf90fcd910b0fca14fc99bd0c230c9ef8c0", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -69,8 +69,7 @@ pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 7] = [\n     (\"ropi-rwpi\", llvm::RelocMode::ROPI_RWPI),\n ];\n \n-pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeModel); 5] = [\n-    (\"default\", llvm::CodeModel::Default),\n+pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n     (\"small\", llvm::CodeModel::Small),\n     (\"kernel\", llvm::CodeModel::Kernel),\n     (\"medium\", llvm::CodeModel::Medium),\n@@ -171,20 +170,23 @@ pub fn target_machine_factory(sess: &Session)\n     let ffunction_sections = sess.target.target.options.function_sections;\n     let fdata_sections = ffunction_sections;\n \n-    let code_model_arg = match sess.opts.cg.code_model {\n-        Some(ref s) => &s,\n-        None => &sess.target.target.options.code_model,\n-    };\n-\n-    let code_model = match CODE_GEN_MODEL_ARGS.iter().find(\n-        |&&arg| arg.0 == code_model_arg) {\n-        Some(x) => x.1,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid code model\",\n-                              code_model_arg));\n-            sess.abort_if_errors();\n-            bug!();\n+    let code_model_arg = sess.opts.cg.code_model.as_ref().or(\n+        sess.target.target.options.code_model.as_ref(),\n+    );\n+\n+    let code_model = match code_model_arg {\n+        Some(s) => {\n+            match CODE_GEN_MODEL_ARGS.iter().find(|arg| arg.0 == s) {\n+                Some(x) => x.1,\n+                _ => {\n+                    sess.err(&format!(\"{:?} is not a valid code model\",\n+                                      code_model_arg));\n+                    sess.abort_if_errors();\n+                    bug!();\n+                }\n+            }\n         }\n+        None => llvm::CodeModel::None,\n     };\n \n     let singlethread = sess.target.target.options.singlethread;\n@@ -746,7 +748,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n             // We can't use the same module for asm and binary output, because that triggers\n             // various errors like invalid IR or broken binaries, so we might have to clone the\n             // module to produce the asm output\n-            let llmod = if config.emit_obj {\n+            let llmod = if config.emit_obj && !asm2wasm {\n                 llvm::LLVMCloneModule(llmod)\n             } else {\n                 llmod\n@@ -755,7 +757,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n                 write_output_file(diag_handler, tm, cpm, llmod, &path,\n                                   llvm::FileType::AssemblyFile)\n             })?;\n-            if config.emit_obj {\n+            if config.emit_obj && !asm2wasm {\n                 llvm::LLVMDisposeModule(llmod);\n             }\n             timeline.record(\"asm\");"}, {"sha": "2717444753318e461e0c3b30dacd03ffbac96903", "filename": "src/llvm-emscripten", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-emscripten?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -0,0 +1 @@\n+Subproject commit 2717444753318e461e0c3b30dacd03ffbac96903"}, {"sha": "93157cd681942c5e51c0c44286f1b8d5764eec03", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -42,7 +42,6 @@ struct RustArchiveIterator {\n enum class LLVMRustArchiveKind {\n   Other,\n   GNU,\n-  MIPS64,\n   BSD,\n   COFF,\n };\n@@ -51,8 +50,6 @@ static Archive::Kind fromRust(LLVMRustArchiveKind Kind) {\n   switch (Kind) {\n   case LLVMRustArchiveKind::GNU:\n     return Archive::K_GNU;\n-  case LLVMRustArchiveKind::MIPS64:\n-    return Archive::K_MIPS64;\n   case LLVMRustArchiveKind::BSD:\n     return Archive::K_BSD;\n   case LLVMRustArchiveKind::COFF:\n@@ -235,9 +232,16 @@ LLVMRustWriteArchive(char *Dst, size_t NumMembers,\n       Members.push_back(std::move(*MOrErr));\n     }\n   }\n-  auto Pair = writeArchive(Dst, Members, WriteSymbtab, Kind, true, false);\n-  if (!Pair.second)\n+  auto Result = writeArchive(Dst, Members, WriteSymbtab, Kind, true, false);\n+#if LLVM_VERSION_GE(6, 0)\n+  if (!Result)\n     return LLVMRustResult::Success;\n-  LLVMRustSetLastError(Pair.second.message().c_str());\n+  LLVMRustSetLastError(toString(std::move(Result)).c_str());\n+#else\n+  if (!Result.second)\n+    return LLVMRustResult::Success;\n+  LLVMRustSetLastError(Result.second.message().c_str());\n+#endif\n+\n   return LLVMRustResult::Failure;\n }"}, {"sha": "b2f1229891d261dd4758130671f1a87ec46f0de3", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -23,9 +23,15 @@\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n #include \"llvm/Target/TargetMachine.h\"\n-#include \"llvm/Target/TargetSubtargetInfo.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n+#if LLVM_VERSION_GE(6, 0)\n+#include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n+#include \"llvm/IR/IntrinsicInst.h\"\n+#else\n+#include \"llvm/Target/TargetSubtargetInfo.h\"\n+#endif\n+\n #if LLVM_VERSION_GE(4, 0)\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n@@ -210,20 +216,15 @@ extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n \n enum class LLVMRustCodeModel {\n   Other,\n-  Default,\n-  JITDefault,\n   Small,\n   Kernel,\n   Medium,\n   Large,\n+  None,\n };\n \n static CodeModel::Model fromRust(LLVMRustCodeModel Model) {\n   switch (Model) {\n-  case LLVMRustCodeModel::Default:\n-    return CodeModel::Default;\n-  case LLVMRustCodeModel::JITDefault:\n-    return CodeModel::JITDefault;\n   case LLVMRustCodeModel::Small:\n     return CodeModel::Small;\n   case LLVMRustCodeModel::Kernel:\n@@ -360,7 +361,6 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool TrapUnreachable,\n     bool Singlethread) {\n \n-  auto CM = fromRust(RustCM);\n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n \n@@ -399,6 +399,13 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     Options.ThreadModel = ThreadModel::Single;\n   }\n \n+#if LLVM_VERSION_GE(6, 0)\n+  Optional<CodeModel::Model> CM;\n+#else\n+  CodeModel::Model CM = CodeModel::Model::Default;\n+#endif\n+  if (RustCM != LLVMRustCodeModel::None)\n+    CM = fromRust(RustCM);\n   TargetMachine *TM = TheTarget->createTargetMachine(\n       Trip.getTriple(), RealCPU, Feature, Options, RM, CM, OptLevel);\n   return wrap(TM);"}, {"sha": "611d63f6a4d14a1fe13b0a9371e926093dae882f", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8a9381db01c71851654e445e7f2d81786fc80ecd/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=8a9381db01c71851654e445e7f2d81786fc80ecd", "patch": "@@ -315,7 +315,11 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n // enable fpmath flag UnsafeAlgebra\n extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n   if (auto I = dyn_cast<Instruction>(unwrap<Value>(V))) {\n+#if LLVM_VERSION_GE(6, 0)\n+    I->setFast(true);\n+#else\n     I->setHasUnsafeAlgebra(true);\n+#endif\n   }\n }\n "}]}