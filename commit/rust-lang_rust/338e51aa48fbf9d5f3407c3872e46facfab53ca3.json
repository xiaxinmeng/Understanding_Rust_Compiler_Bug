{"sha": "338e51aa48fbf9d5f3407c3872e46facfab53ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOGU1MWFhNDhmYmY5ZDVmMzQwN2MzODcyZTQ2ZmFjZmFiNTNjYTM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-17T02:37:35Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-20T12:53:55Z"}, "message": "Rename consume_result", "tree": {"sha": "64499885536ed40d559e67e00bc8eb710979802c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64499885536ed40d559e67e00bc8eb710979802c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338e51aa48fbf9d5f3407c3872e46facfab53ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338e51aa48fbf9d5f3407c3872e46facfab53ca3", "html_url": "https://github.com/rust-lang/rust/commit/338e51aa48fbf9d5f3407c3872e46facfab53ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338e51aa48fbf9d5f3407c3872e46facfab53ca3/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed776f67ba73380926d987bb8ba6618fa0cc55f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed776f67ba73380926d987bb8ba6618fa0cc55f3", "html_url": "https://github.com/rust-lang/rust/commit/ed776f67ba73380926d987bb8ba6618fa0cc55f3"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "465fca554c107040b8880b211c61f3d07ad06355", "filename": "src/helpers.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/338e51aa48fbf9d5f3407c3872e46facfab53ca3/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338e51aa48fbf9d5f3407c3872e46facfab53ca3/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=338e51aa48fbf9d5f3407c3872e46facfab53ca3", "patch": "@@ -370,4 +370,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Size::from_bits(32),\n         ))\n     }\n+\n+    /// Helper function that consumes an `std::io::Result<T>` and returns an\n+    /// `InterpResult<'tcx,T>::Ok` instead. It is expected that the result can be converted to an\n+    /// OS error using `std::io::Error::raw_os_error`.\n+    ///\n+    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n+    /// functions return different integer types (like `read`, that returns an `i64`)\n+    fn set_last_error_from_io_result<T: From<i32>>(\n+        &mut self,\n+        result: std::io::Result<T>,\n+    ) -> InterpResult<'tcx, T> {\n+        match result {\n+            Ok(ok) => Ok(ok),\n+            Err(e) => {\n+                self.eval_context_mut().set_last_error_from_io_error(e)?;\n+                Ok((-1).into())\n+            }\n+        }\n+    }\n }"}, {"sha": "c8d1eb29562d38ef95cc3c3cdc5ead28330f64fb", "filename": "src/shims/fs.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/338e51aa48fbf9d5f3407c3872e46facfab53ca3/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338e51aa48fbf9d5f3407c3872e46facfab53ca3/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=338e51aa48fbf9d5f3407c3872e46facfab53ca3", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             fh.low\n         });\n \n-        this.consume_result(fd)\n+        this.set_last_error_from_io_result(fd)\n     }\n \n     fn fcntl(\n@@ -144,7 +144,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         this.remove_handle_and(fd, |handle, this| {\n-            this.consume_result(handle.file.sync_all().map(|_| 0i32))\n+            this.set_last_error_from_io_result(handle.file.sync_all().map(|_| 0i32))\n         })\n     }\n \n@@ -177,7 +177,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             });\n             // Reinsert the file handle\n             this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n-            this.consume_result(bytes?.map(|bytes| bytes as i64))\n+            this.set_last_error_from_io_result(bytes?.map(|bytes| bytes as i64))\n         })\n     }\n \n@@ -206,7 +206,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .map(|bytes| handle.file.write(bytes).map(|bytes| bytes as i64))\n             });\n             this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n-            this.consume_result(bytes?)\n+            this.set_last_error_from_io_result(bytes?)\n         })\n     }\n \n@@ -223,7 +223,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let result = remove_file(path).map(|_| 0);\n \n-        this.consume_result(result)\n+        this.set_last_error_from_io_result(result)\n     }\n \n     /// Helper function that gets a `FileHandle` immutable reference and allows to manipulate it\n@@ -271,23 +271,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Ok((-1).into())\n         }\n     }\n-\n-    /// Helper function that consumes an `std::io::Result<T>` and returns an\n-    /// `InterpResult<'tcx,T>::Ok` instead. It is expected that the result can be converted to an\n-    /// OS error using `std::io::Error::raw_os_error`.\n-    ///\n-    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n-    /// functions return different integer types (like `read`, that returns an `i64`)\n-    fn consume_result<T: From<i32>>(\n-        &mut self,\n-        result: std::io::Result<T>,\n-    ) -> InterpResult<'tcx, T> {\n-        match result {\n-            Ok(ok) => Ok(ok),\n-            Err(e) => {\n-                self.eval_context_mut().set_last_error_from_io_error(e)?;\n-                Ok((-1).into())\n-            }\n-        }\n-    }\n }"}]}