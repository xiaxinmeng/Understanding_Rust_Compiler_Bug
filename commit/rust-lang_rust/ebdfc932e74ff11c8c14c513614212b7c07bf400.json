{"sha": "ebdfc932e74ff11c8c14c513614212b7c07bf400", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZGZjOTMyZTc0ZmYxMWM4YzE0YzUxMzYxNDIxMmI3YzA3YmY0MDA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:16Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:39Z"}, "message": "Replace Substitution::type_params", "tree": {"sha": "85263e70c101206330ed95c00ce226a61c098c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85263e70c101206330ed95c00ce226a61c098c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebdfc932e74ff11c8c14c513614212b7c07bf400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebdfc932e74ff11c8c14c513614212b7c07bf400", "html_url": "https://github.com/rust-lang/rust/commit/ebdfc932e74ff11c8c14c513614212b7c07bf400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebdfc932e74ff11c8c14c513614212b7c07bf400/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "html_url": "https://github.com/rust-lang/rust/commit/a4d7bdf1c884a9f3dd415a882fa56422adae89bf"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "993772aac50387a4e50b211f46e95ac054c5d98a", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=ebdfc932e74ff11c8c14c513614212b7c07bf400", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{self, NameOwner};\n \n use crate::{\n     Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasVisibility, LifetimeParam,\n-    Module, Static, Struct, Substitution, Trait, Type, TypeAlias, TypeParam, Union, Variant,\n+    Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias, TypeParam, Union, Variant,\n };\n \n impl HirDisplay for Function {\n@@ -234,7 +234,7 @@ impl HirDisplay for TypeParam {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write!(f, \"{}\", self.name(f.db))?;\n         let bounds = f.db.generic_predicates_for_param(self.id);\n-        let substs = Substitution::type_params(f.db, self.id.parent);\n+        let substs = TyBuilder::type_params_subst(f.db, self.id.parent);\n         let predicates = bounds.iter().cloned().map(|b| b.subst(&substs)).collect::<Vec<_>>();\n         if !(predicates.is_empty() || f.omit_verbose_types()) {\n             write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, f)?;"}, {"sha": "19901ed3346da211dbeb4b103a19c52bfe159d45", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ebdfc932e74ff11c8c14c513614212b7c07bf400", "patch": "@@ -514,7 +514,7 @@ impl Field {\n             VariantDef::Union(it) => it.id.into(),\n             VariantDef::Variant(it) => it.parent.id.into(),\n         };\n-        let substs = Substitution::type_params(db, generic_def_id);\n+        let substs = TyBuilder::type_params_subst(db, generic_def_id);\n         let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n         Type::new(db, self.parent.module(db).id.krate(), var_id, ty)\n     }\n@@ -1501,7 +1501,7 @@ impl TypeParam {\n         let resolver = self.id.parent.resolver(db.upcast());\n         let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = params.get(local_idx)?.clone();\n-        let subst = Substitution::type_params(db, self.id.parent);\n+        let subst = TyBuilder::type_params_subst(db, self.id.parent);\n         let ty = ty.subst(&subst.prefix(local_idx));\n         Some(Type::new_with_resolver_inner(db, krate, &resolver, ty))\n     }"}, {"sha": "4d3b4eade02a1fc11a48ae4aeae8f8f4ae363706", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=ebdfc932e74ff11c8c14c513614212b7c07bf400", "patch": "@@ -99,6 +99,11 @@ impl TyBuilder<()> {\n         }\n     }\n \n+    pub fn type_params_subst(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> Substitution {\n+        let params = generics(db.upcast(), def.into());\n+        params.type_params_subst(db)\n+    }\n+\n     pub fn subst_for_def(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> TyBuilder<()> {\n         let def = def.into();\n         let params = generics(db.upcast(), def);"}, {"sha": "385bd94059d70c8e8429f2f576079d3dbac43ce1", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=ebdfc932e74ff11c8c14c513614212b7c07bf400", "patch": "@@ -19,8 +19,7 @@ use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n     to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n     CallableDefId, CallableSig, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind,\n-    WhereClause,\n+    ProjectionTy, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {"}, {"sha": "a8c87eadf3ae64fefe442dfca564c8025a744209", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=ebdfc932e74ff11c8c14c513614212b7c07bf400", "patch": "@@ -462,12 +462,6 @@ impl Substitution {\n     ) -> Self {\n         Substitution(elements.into_iter().casted(interner).collect())\n     }\n-\n-    /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n-    pub fn type_params(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> Substitution {\n-        let params = generics(db.upcast(), def.into());\n-        params.type_params_subst(db)\n-    }\n }\n \n /// Return an index of a parameter in the generic type parameter list by it's id.\n@@ -944,7 +938,7 @@ impl Ty {\n                 let param_data = &generic_params.types[id.local_id];\n                 match param_data.provenance {\n                     hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {\n-                        let substs = Substitution::type_params(db, id.parent);\n+                        let substs = TyBuilder::type_params_subst(db, id.parent);\n                         let predicates = db\n                             .generic_predicates(id.parent)\n                             .into_iter()"}, {"sha": "214655807675c1e951aadd5370960503807d3965", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfc932e74ff11c8c14c513614212b7c07bf400/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=ebdfc932e74ff11c8c14c513614212b7c07bf400", "patch": "@@ -470,12 +470,13 @@ impl<'a> TyLoweringContext<'a> {\n                             TypeParamLoweringMode::Placeholder => {\n                                 // if we're lowering to placeholders, we have to put\n                                 // them in now\n-                                let s = Substitution::type_params(\n-                                    self.db,\n+                                let generics = generics(\n+                                    self.db.upcast(),\n                                     self.resolver.generic_def().expect(\n                                         \"there should be generics if there's a generic param\",\n                                     ),\n                                 );\n+                                let s = generics.type_params_subst(self.db);\n                                 t.substitution.clone().subst_bound_vars(&s)\n                             }\n                             TypeParamLoweringMode::Variable => t.substitution.clone(),\n@@ -963,7 +964,7 @@ pub(crate) fn trait_environment_query(\n         // function default implementations (and hypothetical code\n         // inside consts or type aliases)\n         cov_mark::hit!(trait_self_implements_self);\n-        let substs = Substitution::type_params(db, trait_id);\n+        let substs = TyBuilder::type_params_subst(db, trait_id);\n         let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_id), substitution: substs };\n         let pred = WhereClause::Implemented(trait_ref);\n         let program_clause: chalk_ir::ProgramClause<Interner> = pred.to_chalk(db).cast(&Interner);"}]}