{"sha": "888076b698fb8212c135f361eaa12843d6959cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODA3NmI2OThmYjgyMTJjMTM1ZjM2MWVhYTEyODQzZDY5NTljZjE=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2017-10-12T06:18:43Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2017-10-12T08:30:35Z"}, "message": "Add suggest_print lint", "tree": {"sha": "f62c2d58efd5a57b077d778c677513af1f9f588a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f62c2d58efd5a57b077d778c677513af1f9f588a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888076b698fb8212c135f361eaa12843d6959cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888076b698fb8212c135f361eaa12843d6959cf1", "html_url": "https://github.com/rust-lang/rust/commit/888076b698fb8212c135f361eaa12843d6959cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888076b698fb8212c135f361eaa12843d6959cf1/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0aa2c15878ce4303cc9079881d8d816be290a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0aa2c15878ce4303cc9079881d8d816be290a85", "html_url": "https://github.com/rust-lang/rust/commit/f0aa2c15878ce4303cc9079881d8d816be290a85"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "2e481151d297b05c22b087c6fead4ea6914aa6aa", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/888076b698fb8212c135f361eaa12843d6959cf1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888076b698fb8212c135f361eaa12843d6959cf1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=888076b698fb8212c135f361eaa12843d6959cf1", "patch": "@@ -145,6 +145,7 @@ pub mod serde_api;\n pub mod shadow;\n pub mod should_assert_eq;\n pub mod strings;\n+pub mod suggest_print;\n pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n@@ -326,6 +327,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n+    reg.register_late_lint_pass(box suggest_print::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n     reg.register_late_lint_pass(box use_self::UseSelf);\n@@ -540,6 +542,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         serde_api::SERDE_API_MISUSE,\n         should_assert_eq::SHOULD_ASSERT_EQ,\n         strings::STRING_LIT_AS_BYTES,\n+        suggest_print::SUGGEST_PRINT,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,"}, {"sha": "0ef7f1fe56f0a3c794f9bc181b4593a00540e681", "filename": "clippy_lints/src/suggest_print.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/888076b698fb8212c135f361eaa12843d6959cf1/clippy_lints%2Fsrc%2Fsuggest_print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888076b698fb8212c135f361eaa12843d6959cf1/clippy_lints%2Fsrc%2Fsuggest_print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuggest_print.rs?ref=888076b698fb8212c135f361eaa12843d6959cf1", "patch": "@@ -0,0 +1,102 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n+use utils::opt_def_id;\n+\n+/// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n+/// replaced with `(e)print!()` / `(e)println!()`\n+///\n+/// **Why is this bad?** Using `(e)println! is clearer and more concise\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // this would be clearer as `eprintln!(\"foo: {:?}\", bar);`\n+/// writeln!(&mut io::stderr(), \"foo: {:?}\", bar).unwrap();\n+/// ```\n+declare_lint! {\n+    pub SUGGEST_PRINT,\n+    Warn,\n+    \"using `write!()` family of functions instead of `print!()` family of \\\n+     functions\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(\n+            SUGGEST_PRINT\n+        )\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_let_chain! {[\n+            // match call to unwrap\n+            let ExprMethodCall(ref unwrap_fun, _, ref unwrap_args) = expr.node,\n+            unwrap_fun.name == \"unwrap\",\n+            // match call to write_fmt\n+            unwrap_args.len() > 0,\n+            let ExprMethodCall(ref write_fun, _, ref write_args) =\n+                unwrap_args[0].node,\n+            write_fun.name == \"write_fmt\",\n+            // match calls to std::io::stdout() / std::io::stderr ()\n+            write_args.len() > 0,\n+            let ExprCall(ref dest_fun, _) = write_args[0].node,\n+            let ExprPath(ref qpath) = dest_fun.node,\n+            let Some(dest_fun_id) =\n+                opt_def_id(resolve_node(cx, qpath, dest_fun.hir_id)),\n+            let Some(dest_name) = if match_def_path(cx.tcx, dest_fun_id, &[\"std\", \"io\", \"stdout\"]) {\n+                Some(\"stdout\")\n+            } else if match_def_path(cx.tcx, dest_fun_id, &[\"std\", \"io\", \"stderr\"]) {\n+                Some(\"stderr\")\n+            } else {\n+                None\n+            },\n+        ], {\n+            let dest_expr = &write_args[0];\n+            let (span, calling_macro) =\n+                if let Some(span) = is_expn_of(dest_expr.span, \"write\") {\n+                    (span, Some(\"write\"))\n+                } else if let Some(span) = is_expn_of(dest_expr.span, \"writeln\") {\n+                    (span, Some(\"writeln\"))\n+                } else {\n+                    (dest_expr.span, None)\n+                };\n+            let prefix = if dest_name == \"stderr\" {\n+                \"e\"\n+            } else {\n+                \"\"\n+            };\n+            if let Some(macro_name) = calling_macro {\n+                span_lint(\n+                    cx,\n+                    SUGGEST_PRINT,\n+                    span,\n+                    &format!(\n+                        \"use of `{}!({}, ...).unwrap()`. Consider using `{}{}!` instead\",\n+                        macro_name,\n+                        dest_name,\n+                        prefix,\n+                        macro_name.replace(\"write\", \"print\")\n+                    )\n+                );\n+            } else {\n+                span_lint(\n+                    cx,\n+                    SUGGEST_PRINT,\n+                    span,\n+                    &format!(\n+                        \"use of `{}.write_fmt(...).unwrap()`. Consider using `{}print!` instead\",\n+                        dest_name,\n+                        prefix,\n+                    )\n+                );\n+            }\n+        }}\n+    }\n+}"}, {"sha": "0466d6c0b609bc883b0020ce12f34515595134f5", "filename": "tests/ui/suggest_print.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/888076b698fb8212c135f361eaa12843d6959cf1/tests%2Fui%2Fsuggest_print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888076b698fb8212c135f361eaa12843d6959cf1/tests%2Fui%2Fsuggest_print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest_print.rs?ref=888076b698fb8212c135f361eaa12843d6959cf1", "patch": "@@ -0,0 +1,46 @@\n+#![warn(suggest_print)]\n+\n+\n+fn stdout() -> String {\n+    String::new()\n+}\n+\n+fn stderr() -> String {\n+    String::new()\n+}\n+\n+fn main() {\n+    // these should warn\n+    {\n+        use std::io::Write;\n+        write!(std::io::stdout(), \"test\").unwrap();\n+        write!(std::io::stderr(), \"test\").unwrap();\n+        writeln!(std::io::stdout(), \"test\").unwrap();\n+        writeln!(std::io::stderr(), \"test\").unwrap();\n+        std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n+        std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+    }\n+    // these should not warn, different destination\n+    {\n+        use std::fmt::Write;\n+        let mut s = String::new();\n+        write!(s, \"test\").unwrap();\n+        write!(s, \"test\").unwrap();\n+        writeln!(s, \"test\").unwrap();\n+        writeln!(s, \"test\").unwrap();\n+        s.write_fmt(format_args!(\"test\")).unwrap();\n+        s.write_fmt(format_args!(\"test\")).unwrap();\n+        write!(stdout(), \"test\").unwrap();\n+        write!(stderr(), \"test\").unwrap();\n+        writeln!(stdout(), \"test\").unwrap();\n+        writeln!(stderr(), \"test\").unwrap();\n+        stdout().write_fmt(format_args!(\"test\")).unwrap();\n+        stderr().write_fmt(format_args!(\"test\")).unwrap();\n+    }\n+    // these should not warn, no unwrap\n+    {\n+        use std::io::Write;\n+        std::io::stdout().write_fmt(format_args!(\"test\")).expect(\"no stdout\");\n+        std::io::stderr().write_fmt(format_args!(\"test\")).expect(\"no stderr\");\n+    }\n+}"}]}