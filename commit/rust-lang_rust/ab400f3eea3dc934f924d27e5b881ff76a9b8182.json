{"sha": "ab400f3eea3dc934f924d27e5b881ff76a9b8182", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNDAwZjNlZWEzZGM5MzRmOTI0ZDI3ZTViODgxZmY3NmE5YjgxODI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-26T15:58:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-26T15:58:47Z"}, "message": "Initial work towards checking const eval rules in miri", "tree": {"sha": "2290598024a1991724e37c60931d52025d9fe3ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2290598024a1991724e37c60931d52025d9fe3ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab400f3eea3dc934f924d27e5b881ff76a9b8182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab400f3eea3dc934f924d27e5b881ff76a9b8182", "html_url": "https://github.com/rust-lang/rust/commit/ab400f3eea3dc934f924d27e5b881ff76a9b8182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab400f3eea3dc934f924d27e5b881ff76a9b8182/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d130946d2e1e8f4142d736d904cd90f95137d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d130946d2e1e8f4142d736d904cd90f95137d2", "html_url": "https://github.com/rust-lang/rust/commit/14d130946d2e1e8f4142d736d904cd90f95137d2"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "38b64870f89b902d80ce5cb5bac682f2bd1b4e91", "filename": "src/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=ab400f3eea3dc934f924d27e5b881ff76a9b8182", "patch": "@@ -63,6 +63,8 @@ pub enum EvalError<'tcx> {\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n     Panic,\n+    NeedsRfc(String),\n+    NotConst(String),\n }\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n@@ -156,6 +158,10 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"entered unreachable code\",\n             EvalError::Panic =>\n                 \"the evaluated program panicked\",\n+            EvalError::NeedsRfc(_) =>\n+                \"this feature needs an rfc before being allowed inside constants\",\n+            EvalError::NotConst(_) =>\n+                \"this feature is not compatible with constant evaluation\",\n         }\n     }\n \n@@ -191,6 +197,10 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"expected primitive type, got {}\", ty),\n             EvalError::Layout(ref err) =>\n                 write!(f, \"rustc layout computation failed: {:?}\", err),\n+            EvalError::NeedsRfc(ref msg) =>\n+                write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg),\n+            EvalError::NotConst(ref msg) =>\n+                write!(f, \"Cannot evaluate within constants: \\\"{}\\\"\", msg),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "74b0e6ec0689b7356c89a4b576f71f8031efbc9f", "filename": "src/eval_context.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=ab400f3eea3dc934f924d27e5b881ff76a9b8182", "patch": "@@ -655,6 +655,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Len(ref lvalue) => {\n+                if self.frame().const_env() {\n+                    return Err(EvalError::NeedsRfc(\"computing the length of arrays\".to_string()));\n+                }\n                 let src = self.eval_lvalue(lvalue)?;\n                 let ty = self.lvalue_ty(lvalue);\n                 let (_, len) = src.elem_ty_and_len(ty);\n@@ -701,6 +704,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             NullaryOp(mir::NullOp::Box, ty) => {\n+                if self.frame().const_env() {\n+                    return Err(EvalError::NeedsRfc(\"\\\"heap\\\" allocations\".to_string()));\n+                }\n                 // FIXME: call the `exchange_malloc` lang item if available\n                 if self.type_size(ty)?.expect(\"box only works with sized types\") == 0 {\n                     let align = self.type_align(ty)?;\n@@ -712,6 +718,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             NullaryOp(mir::NullOp::SizeOf, ty) => {\n+                if self.frame().const_env() {\n+                    return Err(EvalError::NeedsRfc(\"computing the size of types (size_of)\".to_string()));\n+                }\n                 let size = self.type_size(ty)?.expect(\"SizeOf nullary MIR operator called for unsized type\");\n                 self.write_primval(dest, PrimVal::from_u128(size as u128), dest_ty)?;\n             }\n@@ -1583,6 +1592,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n }\n \n impl<'tcx> Frame<'tcx> {\n+    pub fn const_env(&self) -> bool {\n+        match self.return_to_block {\n+            StackPopCleanup::MarkStatic(_) => true,\n+            _ => false,\n+        }\n+    }\n     pub fn get_local(&self, local: mir::Local, field: Option<usize>) -> EvalResult<'tcx, Value> {\n         // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n         if let Some(field) = field {"}, {"sha": "09058c23886e12840e204320170d8f26122d1619", "filename": "src/operator.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=ab400f3eea3dc934f924d27e5b881ff76a9b8182", "patch": "@@ -151,6 +151,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let usize = PrimValKind::from_uint_size(self.memory.pointer_size());\n         let isize = PrimValKind::from_int_size(self.memory.pointer_size());\n         if !left_kind.is_float() && !right_kind.is_float() {\n+            if (!left.is_bytes() && !right.is_bytes()) && self.frame().const_env() {\n+                if left.is_ptr() && right.is_ptr() {\n+                    return Err(EvalError::NotConst(\"Comparing pointers\".to_string()));\n+                } else {\n+                    return Err(EvalError::NeedsRfc(\"Comparing Pointers integers with pointers\".to_string()));\n+                }\n+            }\n             match bin_op {\n                 Offset if left_kind == Ptr && right_kind == usize => {\n                     let pointee_ty = left_ty.builtin_deref(true, ty::LvaluePreference::NoPreference).expect(\"Offset called on non-ptr type\").ty;"}, {"sha": "049b66c67a48e4327a7f52707b9d1f35e59e3640", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab400f3eea3dc934f924d27e5b881ff76a9b8182/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=ab400f3eea3dc934f924d27e5b881ff76a9b8182", "patch": "@@ -37,6 +37,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Goto { target } => self.goto_block(target),\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n+                if self.frame().const_env() {\n+                    return Err(EvalError::NeedsRfc(\"branching (if, match, loop, ...)\".to_string()));\n+                }\n                 let discr_val = self.eval_operand(discr)?;\n                 let discr_ty = self.operand_ty(discr);\n                 let discr_prim = self.value_to_primval(discr_val, discr_ty)?;\n@@ -92,6 +95,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Drop { ref location, target, .. } => {\n                 trace!(\"TerminatorKind::drop: {:?}, {:?}\", location, self.substs());\n+                if self.frame().const_env() {\n+                    return Err(EvalError::NeedsRfc(\"invoking `Drop::drop`\".to_string()));\n+                }\n                 let lval = self.eval_lvalue(location)?;\n                 let ty = self.lvalue_ty(location);\n                 self.goto_block(target);\n@@ -424,11 +430,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let mir = match self.load_mir(instance.def) {\n             Ok(mir) => mir,\n             Err(EvalError::NoMirFor(path)) => {\n+                if self.frame().const_env() {\n+                    return Err(EvalError::NeedsRfc(format!(\"calling extern function `{}`\", path)));\n+                }\n                 self.call_missing_fn(instance, destination, arg_operands, sig, path)?;\n                 return Ok(true);\n             },\n             Err(other) => return Err(other),\n         };\n+\n+        if self.frame().const_env() && !self.tcx.is_const_fn(instance.def_id()) {\n+            return Err(EvalError::NotConst(format!(\"calling non-const fn `{}`\", instance)));\n+        }\n+        \n         let (return_lvalue, return_to_block) = match destination {\n             Some((lvalue, block)) => (lvalue, StackPopCleanup::Goto(block)),\n             None => (Lvalue::undef(), StackPopCleanup::None),"}]}