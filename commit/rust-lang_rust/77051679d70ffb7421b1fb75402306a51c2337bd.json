{"sha": "77051679d70ffb7421b1fb75402306a51c2337bd", "node_id": "C_kwDOAAsO6NoAKDc3MDUxNjc5ZDcwZmZiNzQyMWIxZmI3NTQwMjMwNmE1MWMyMzM3YmQ", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2022-12-30T07:59:11Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-02T14:52:32Z"}, "message": "use inline format args", "tree": {"sha": "79c3e7f8bf3b37545be1e440fa1a2cf5a992182e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c3e7f8bf3b37545be1e440fa1a2cf5a992182e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77051679d70ffb7421b1fb75402306a51c2337bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77051679d70ffb7421b1fb75402306a51c2337bd", "html_url": "https://github.com/rust-lang/rust/commit/77051679d70ffb7421b1fb75402306a51c2337bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77051679d70ffb7421b1fb75402306a51c2337bd/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cc78f169538538a10e11251562e0fde8ed4958", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cc78f169538538a10e11251562e0fde8ed4958", "html_url": "https://github.com/rust-lang/rust/commit/17cc78f169538538a10e11251562e0fde8ed4958"}], "stats": {"total": 170, "additions": 61, "deletions": 109}, "files": [{"sha": "590a93fbaa1a0f003613650e75d918d1ef48b896", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -408,8 +408,7 @@ impl CargoHandle {\n             Ok(())\n         } else {\n             Err(io::Error::new(io::ErrorKind::Other, format!(\n-                \"Cargo watcher failed, the command produced no valid metadata (exit code: {:?}):\\n{}\",\n-                exit_status, error\n+                \"Cargo watcher failed, the command produced no valid metadata (exit code: {exit_status:?}):\\n{error}\"\n             )))\n         }\n     }"}, {"sha": "170cb0fd06b4170d6c85dec4d3a998279bdf2e29", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -234,8 +234,7 @@ impl TraitData {\n         let item_tree = tree_id.item_tree(db);\n         let tr_def = &item_tree[tree_id.value];\n         let _cx = stdx::panic_context::enter(format!(\n-            \"trait_data_query({:?} -> {:?} -> {:?})\",\n-            tr, tr_loc, tr_def\n+            \"trait_data_query({tr:?} -> {tr_loc:?} -> {tr_def:?})\"\n         ));\n         let name = tr_def.name.clone();\n         let is_auto = tr_def.is_auto;\n@@ -619,10 +618,8 @@ impl<'a> AssocItemCollector<'a> {\n \n                         let ast_id_map = self.db.ast_id_map(self.expander.current_file_id());\n                         let call = ast_id_map.get(call.ast_id).to_node(&root);\n-                        let _cx = stdx::panic_context::enter(format!(\n-                            \"collect_items MacroCall: {}\",\n-                            call\n-                        ));\n+                        let _cx =\n+                            stdx::panic_context::enter(format!(\"collect_items MacroCall: {call}\"));\n                         let res = self.expander.enter_expand::<ast::MacroItems>(self.db, call);\n \n                         if let Ok(ExpandResult { value: Some((mark, _)), .. }) = res {"}, {"sha": "7a7b1e2e719b7e7886699110b7a0daeec51b5cea", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -1796,8 +1796,7 @@ pub(crate) fn impl_self_ty_query(db: &dyn HirDatabase, impl_id: ImplId) -> Binde\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db.upcast());\n     let _cx = stdx::panic_context::enter(format!(\n-        \"impl_self_ty_query({:?} -> {:?} -> {:?})\",\n-        impl_id, impl_loc, impl_data\n+        \"impl_self_ty_query({impl_id:?} -> {impl_loc:?} -> {impl_data:?})\"\n     ));\n     let generics = generics(db.upcast(), impl_id.into());\n     let ctx =\n@@ -1834,8 +1833,7 @@ pub(crate) fn impl_trait_query(db: &dyn HirDatabase, impl_id: ImplId) -> Option<\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db.upcast());\n     let _cx = stdx::panic_context::enter(format!(\n-        \"impl_trait_query({:?} -> {:?} -> {:?})\",\n-        impl_id, impl_loc, impl_data\n+        \"impl_trait_query({impl_id:?} -> {impl_loc:?} -> {impl_data:?})\"\n     ));\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(ParamLoweringMode::Variable);"}, {"sha": "b4f50c7fb26a45699f402f6cfdbe0983ea8f4565", "filename": "crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -95,8 +95,7 @@ impl Assist {\n                 let id = block.id;\n                 assert!(\n                     id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n-                    \"invalid assist id: {:?}\",\n-                    id\n+                    \"invalid assist id: {id:?}\"\n                 );\n                 let mut lines = block.contents.iter().peekable();\n                 let location = sourcegen::Location { file: path.to_path_buf(), line: block.line };"}, {"sha": "21fe21263634a8db81c8d7ab5f47594a9a89aad9", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -371,9 +371,7 @@ fn attributes_are_sorted() {\n     attrs.for_each(|next| {\n         assert!(\n             prev < next,\n-            r#\"ATTRIBUTES array is not sorted, \"{}\" should come after \"{}\"\"#,\n-            prev,\n-            next\n+            r#\"ATTRIBUTES array is not sorted, \"{prev}\" should come after \"{next}\"\"#\n         );\n         prev = next;\n     });"}, {"sha": "1002be21131d915025b516738376db689a4fde6f", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -68,28 +68,26 @@ mod tests {\n             &format!(\n                 r#\"\n             #[rustc_builtin_macro]\n-            macro_rules! {} {{\n+            macro_rules! {macro_name} {{\n                 ($var:literal) => {{ 0 }}\n             }}\n \n             fn main() {{\n-                let foo = {}!(\"CAR$0\");\n+                let foo = {macro_name}!(\"CAR$0\");\n             }}\n-        \"#,\n-                macro_name, macro_name\n+        \"#\n             ),\n             &format!(\n                 r#\"\n             #[rustc_builtin_macro]\n-            macro_rules! {} {{\n+            macro_rules! {macro_name} {{\n                 ($var:literal) => {{ 0 }}\n             }}\n \n             fn main() {{\n-                let foo = {}!(\"CARGO_BIN_NAME\");\n+                let foo = {macro_name}!(\"CARGO_BIN_NAME\");\n             }}\n-        \"#,\n-                macro_name, macro_name\n+        \"#\n             ),\n         );\n     }"}, {"sha": "9a060857e9e4c45ac92f150a103f203ecab8589d", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -845,11 +845,10 @@ trait Test {{\n struct T;\n \n impl Test for T {{\n-    {}\n-    {}\n+    {hint}\n+    {next_sibling}\n }}\n-\"#,\n-                    hint, next_sibling\n+\"#\n                 ),\n                 &format!(\n                     r#\"\n@@ -861,11 +860,10 @@ trait Test {{\n struct T;\n \n impl Test for T {{\n-    {}\n-    {}\n+    {completed}\n+    {next_sibling}\n }}\n-\"#,\n-                    completed, next_sibling\n+\"#\n                 ),\n             )\n         };\n@@ -905,10 +903,9 @@ struct T;\n impl Foo for T {{\n     // Comment\n     #[bar]\n-    {}\n+    {hint}\n }}\n-\"#,\n-                    hint\n+\"#\n                 ),\n                 &format!(\n                     r#\"\n@@ -922,10 +919,9 @@ struct T;\n impl Foo for T {{\n     // Comment\n     #[bar]\n-    {}\n+    {completed}\n }}\n-\"#,\n-                    completed\n+\"#\n                 ),\n             )\n         };"}, {"sha": "3db400604b023e1f70bb578cd4a7a9a409c52dd7", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -153,8 +153,7 @@ pub(crate) fn complete_postfix(\n                     \"match\",\n                     \"match expr {}\",\n                     &format!(\n-                        \"match {} {{\\n    Some(${{1:_}}) => {{$2}},\\n    None => {{$0}},\\n}}\",\n-                        receiver_text\n+                        \"match {receiver_text} {{\\n    Some(${{1:_}}) => {{$2}},\\n    None => {{$0}},\\n}}\"\n                     ),\n                 )\n                 .add_to(acc);"}, {"sha": "efbeb90ca9dd54956cf8107a6944543a732f77e3", "filename": "crates/proc-macro-srv/src/tests/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -30,12 +30,12 @@ fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect:\n     let attr = attr.map(|attr| parse_string(attr).unwrap().into_subtree());\n \n     let res = expander.expand(macro_name, &fixture.into_subtree(), attr.as_ref()).unwrap();\n-    expect.assert_eq(&format!(\"{:?}\", res));\n+    expect.assert_eq(&format!(\"{res:?}\"));\n }\n \n pub(crate) fn list() -> Vec<String> {\n     let dylib_path = proc_macro_test_dylib_path();\n     let mut srv = ProcMacroSrv::default();\n     let res = srv.list_macros(&dylib_path).unwrap();\n-    res.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()\n+    res.into_iter().map(|(name, kind)| format!(\"{name} [{kind:?}]\")).collect()\n }"}, {"sha": "2e2ef0cfc2d7cd1e1c9086c49c0290d5664fdbb3", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -118,7 +118,7 @@ impl Drop for CpuSpan {\n                     eprintln!(\"Profile rendered to:\\n\\n    {}\\n\", svg.display());\n                 }\n                 _ => {\n-                    eprintln!(\"Failed to run:\\n\\n   {:?}\\n\", cmd);\n+                    eprintln!(\"Failed to run:\\n\\n   {cmd:?}\\n\");\n                 }\n             }\n         }"}, {"sha": "ac17bb463cee9f5f25fcb7f9ad719e6bf460c8ed", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -303,8 +303,7 @@ impl WorkspaceBuildScripts {\n                                         Ok(it) => acc.push(it),\n                                         Err(err) => {\n                                             push_err(&format!(\n-                                                \"invalid cfg from cargo-metadata: {}\",\n-                                                err\n+                                                \"invalid cfg from cargo-metadata: {err}\"\n                                             ));\n                                             return;\n                                         }"}, {"sha": "4ee92b3d4ed09624ff2f3688b3131785bcda8678", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -1908,9 +1908,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n     let doc = doc.trim_end_matches('\\n');\n     assert!(\n         doc.ends_with('.') && doc.starts_with(char::is_uppercase),\n-        \"bad docs for {}: {:?}\",\n-        field,\n-        doc\n+        \"bad docs for {field}: {doc:?}\"\n     );\n     let default = default.parse::<serde_json::Value>().unwrap();\n \n@@ -2213,17 +2211,16 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n             let doc = doc_comment_to_string(doc);\n             if default.contains('\\n') {\n                 format!(\n-                    r#\"[[{}]]{}::\n+                    r#\"[[{name}]]{name}::\n +\n --\n Default:\n ----\n-{}\n+{default}\n ----\n-{}\n+{doc}\n --\n-\"#,\n-                    name, name, default, doc\n+\"#\n                 )\n             } else {\n                 format!(\"[[{name}]]{name} (default: `{default}`)::\\n+\\n--\\n{doc}--\\n\")"}, {"sha": "473a0eb0eb87cb483cf7d064738a48d44b56d920", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -502,8 +502,7 @@ fn rustc_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescripti\n fn clippy_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescription> {\n     code.and_then(|code| {\n         lsp_types::Url::parse(&format!(\n-            \"https://rust-lang.github.io/rust-clippy/master/index.html#{}\",\n-            code\n+            \"https://rust-lang.github.io/rust-clippy/master/index.html#{code}\"\n         ))\n         .ok()\n         .map(|href| lsp_types::CodeDescription { href })"}, {"sha": "02493bb1df69544b52baa34767504e049a744171", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -414,10 +414,7 @@ impl GlobalState {\n         let loop_duration = loop_start.elapsed();\n         if loop_duration > Duration::from_millis(100) && was_quiescent {\n             tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n-            self.poke_rust_analyzer_developer(format!(\n-                \"overly long loop turn: {:?}\",\n-                loop_duration\n-            ));\n+            self.poke_rust_analyzer_developer(format!(\"overly long loop turn: {loop_duration:?}\"));\n         }\n         Ok(())\n     }"}, {"sha": "5e3e19d44d738e785f6305ac14bfb767b1528007", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -528,14 +528,13 @@ fn test_missing_module_code_action_in_json_project() {\n     let code = format!(\n         r#\"\n //- /rust-project.json\n-{PROJECT}\n+{project}\n \n //- /src/lib.rs\n mod bar;\n \n fn main() {{}}\n \"#,\n-        PROJECT = project,\n     );\n \n     let server =\n@@ -605,13 +604,12 @@ name = \"foo\"\n version = \"0.0.0\"\n \n //- /src/lib.rs\n-{}\n+{librs}\n \n-{}\n+{libs}\n \n fn main() {{}}\n-\"#,\n-        librs, libs\n+\"#\n     ))\n     .with_config(serde_json::json!({\n         \"cargo\": { \"sysroot\": \"discover\" }"}, {"sha": "a5af948b08f2c8c6ac566b0a78c0f8f1d5cb5966", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -56,12 +56,11 @@ fn check_lsp_extensions_docs() {\n             \"\n lsp_ext.rs was changed without touching lsp-extensions.md.\n \n-Expected hash: {:x}\n-Actual hash:   {:x}\n+Expected hash: {expected_hash:x}\n+Actual hash:   {actual_hash:x}\n \n Please adjust docs/dev/lsp-extensions.md.\n-\",\n-            expected_hash, actual_hash\n+\"\n         )\n     }\n }"}, {"sha": "a7d9a81dfcd2b416085e8defaad83e95129abd9a", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -65,10 +65,7 @@ impl CommentBlock {\n                 let first = block.contents.remove(0);\n                 first.strip_prefix(&tag).map(|id| {\n                     if block.is_doc {\n-                        panic!(\n-                            \"Use plain (non-doc) comments with tags like {}:\\n    {}\",\n-                            tag, first\n-                        );\n+                        panic!(\"Use plain (non-doc) comments with tags like {tag}:\\n    {first}\");\n                     }\n \n                     block.id = id.trim().to_string();"}, {"sha": "c402a7bceaebc06d04fc31d7cd3d4edabc19a411", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -646,8 +646,7 @@ fn main() {\n             .format_with(\"\\n\", |v, f| f(&format!(\"Line {}: {}\", line_number(v), &fmt_syntax(v))));\n \n         let actual = format!(\n-            \"insertions:\\n\\n{}\\n\\nreplacements:\\n\\n{}\\n\\ndeletions:\\n\\n{}\\n\",\n-            insertions, replacements, deletions\n+            \"insertions:\\n\\n{insertions}\\n\\nreplacements:\\n\\n{replacements}\\n\\ndeletions:\\n\\n{deletions}\\n\"\n         );\n         expected_diff.assert_eq(&actual);\n "}, {"sha": "d1afd0039aa4b0b5d52f9cd65c496b2501dd1236", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -135,11 +135,9 @@ impl Fixture {\n             if line.contains(\"//-\") {\n                 assert!(\n                     line.starts_with(\"//-\"),\n-                    \"Metadata line {} has invalid indentation. \\\n+                    \"Metadata line {ix} has invalid indentation. \\\n                      All metadata lines need to have the same indentation.\\n\\\n-                     The offending line: {:?}\",\n-                    ix,\n-                    line\n+                     The offending line: {line:?}\"\n                 );\n             }\n \n@@ -222,9 +220,7 @@ impl Fixture {\n         for prelude_dep in extern_prelude.iter().flatten() {\n             assert!(\n                 deps.contains(prelude_dep),\n-                \"extern-prelude {:?} must be a subset of deps {:?}\",\n-                extern_prelude,\n-                deps\n+                \"extern-prelude {extern_prelude:?} must be a subset of deps {deps:?}\"\n             );\n         }\n \n@@ -348,11 +344,7 @@ impl MiniCore {\n \n             let mut keep = true;\n             for &region in &active_regions {\n-                assert!(\n-                    !region.starts_with(' '),\n-                    \"region marker starts with a space: {:?}\",\n-                    region\n-                );\n+                assert!(!region.starts_with(' '), \"region marker starts with a space: {region:?}\");\n                 self.assert_valid_flag(region);\n                 seen_regions.push(region);\n                 keep &= self.has_flag(region);"}, {"sha": "b95cec4f013610ca706a7572aea6063eefd26b08", "filename": "lib/lsp-server/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/lib%2Flsp-server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/lib%2Flsp-server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Flib.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -128,15 +128,11 @@ impl Connection {\n                     self.sender.send(resp.into()).unwrap();\n                 }\n                 Ok(msg) => {\n-                    return Err(ProtocolError(format!(\n-                        \"expected initialize request, got {:?}\",\n-                        msg\n-                    )))\n+                    return Err(ProtocolError(format!(\"expected initialize request, got {msg:?}\")))\n                 }\n                 Err(e) => {\n                     return Err(ProtocolError(format!(\n-                        \"expected initialize request, got error: {}\",\n-                        e\n+                        \"expected initialize request, got error: {e}\"\n                     )))\n                 }\n             };\n@@ -154,15 +150,11 @@ impl Connection {\n         match &self.receiver.recv() {\n             Ok(Message::Notification(n)) if n.is_initialized() => (),\n             Ok(msg) => {\n-                return Err(ProtocolError(format!(\n-                    \"expected Message::Notification, got: {:?}\",\n-                    msg,\n-                )))\n+                return Err(ProtocolError(format!(\"expected Message::Notification, got: {msg:?}\",)))\n             }\n             Err(e) => {\n                 return Err(ProtocolError(format!(\n-                    \"expected initialized notification, got error: {}\",\n-                    e,\n+                    \"expected initialized notification, got error: {e}\",\n                 )))\n             }\n         }"}, {"sha": "d2a1483e3873ac9a5c6b9eb1115c1b45127e8069", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77051679d70ffb7421b1fb75402306a51c2337bd/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77051679d70ffb7421b1fb75402306a51c2337bd/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=77051679d70ffb7421b1fb75402306a51c2337bd", "patch": "@@ -63,31 +63,30 @@ pub(crate) fn get_changelog(\n \n     let contents = format!(\n         \"\\\n-= Changelog #{}\n+= Changelog #{changelog_n}\n :sectanchors:\n :experimental:\n :page-layout: post\n \n-Commit: commit:{}[] +\n-Release: release:{}[]\n+Commit: commit:{commit}[] +\n+Release: release:{today}[]\n \n == New Features\n \n-{}\n+{features}\n \n == Fixes\n \n-{}\n+{fixes}\n \n == Internal Improvements\n \n-{}\n+{internal}\n \n == Others\n \n-{}\n-\",\n-        changelog_n, commit, today, features, fixes, internal, others\n+{others}\n+\"\n     );\n     Ok(contents)\n }"}]}