{"sha": "a2076dc0a67b0fec7fe0548d0038eed46e714535", "node_id": "C_kwDOAAsO6NoAKGEyMDc2ZGMwYTY3YjBmZWM3ZmUwNTQ4ZDAwMzhlZWQ0NmU3MTQ1MzU", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-12-03T22:32:14Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-12-04T03:09:40Z"}, "message": "Improve comments", "tree": {"sha": "ccc356b2358778a1272c3532f0596aef039ca930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccc356b2358778a1272c3532f0596aef039ca930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2076dc0a67b0fec7fe0548d0038eed46e714535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2076dc0a67b0fec7fe0548d0038eed46e714535", "html_url": "https://github.com/rust-lang/rust/commit/a2076dc0a67b0fec7fe0548d0038eed46e714535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2076dc0a67b0fec7fe0548d0038eed46e714535/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf521d80e9057211629e92aff059dc9770c20bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf521d80e9057211629e92aff059dc9770c20bd", "html_url": "https://github.com/rust-lang/rust/commit/8cf521d80e9057211629e92aff059dc9770c20bd"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "6221b1b9937984ed09e1f682b90129a1b5efbb79", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2076dc0a67b0fec7fe0548d0038eed46e714535/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2076dc0a67b0fec7fe0548d0038eed46e714535/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=a2076dc0a67b0fec7fe0548d0038eed46e714535", "patch": "@@ -250,20 +250,32 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n                 ref l,\n                 ref r,\n             ) => {\n-                // For shortcircuiting operators, mark the RHS as a terminating\n-                // scope since it only executes conditionally.\n+                // expr is a short circuiting operator (|| or &&). As its\n+                // functionality can't be overridden by traits, it always\n+                // processes bool sub-expressions. bools are Copy and thus we\n+                // can drop any temporaries in evaluation (read) order\n+                // (with the exception of potentially failing let expressions).\n+                // We achieve this by enclosing the operands in a terminating\n+                // scope, both the LHS and the RHS.\n+\n+                // We optimize this a little in the presence of chains.\n+                // Chains like a && b && c get lowered to AND(AND(a, b), c).\n+                // In here, b and c are RHS, while a is the only LHS operand in\n+                // that chain. This holds true for longer chains as well: the\n+                // leading operand is always the only LHS operand that is not a\n+                // binop itself. Putting a binop like AND(a, b) into a\n+                // terminating scope is not useful, thus we only put the LHS\n+                // into a terminating scope if it is not a binop.\n \n-                // If the LHS is not another binop itself of the same kind as ours,\n-                // we also mark it as terminating, so that in && or || chains,\n-                // the temporaries are dropped in order instead of the very first\n-                // being dropped last. For the Let exception, see below.\n                 let terminate_lhs = match l.kind {\n                     hir::ExprKind::Let(_) => false,\n                     hir::ExprKind::Binary(source_map::Spanned { node, .. }, ..)\n                         if node == outer =>\n                     {\n                         false\n                     }\n+                    // If the LHS is not another binop itself of the same kind as\n+                    // the current binop, mark it as terminating.\n                     _ => true,\n                 };\n                 if terminate_lhs {"}]}