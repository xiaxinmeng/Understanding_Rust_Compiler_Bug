{"sha": "dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "node_id": "C_kwDOAAsO6NoAKGRjNzE0MzM2N2M4NWYzZjQ5OGQwNzJlZjRhMmI4YmVmZGYxZjc1YzA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-16T19:24:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-20T16:29:22Z"}, "message": "Drop has_params.", "tree": {"sha": "ca696d9a2028e9d413c7b8960e8d0da536e7ec22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca696d9a2028e9d413c7b8960e8d0da536e7ec22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "html_url": "https://github.com/rust-lang/rust/commit/dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa404c24ddafea428cb86de8f914b129be4a726b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa404c24ddafea428cb86de8f914b129be4a726b", "html_url": "https://github.com/rust-lang/rust/commit/aa404c24ddafea428cb86de8f914b129be4a726b"}], "stats": {"total": 44, "additions": 4, "deletions": 40}, "files": [{"sha": "09cd318bb783c709bd4b9e528480622e3eb142f5", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "patch": "@@ -75,9 +75,6 @@ pub use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n /// of the `DepKind`. Overall, this allows to implement `DepContext` using this manual\n /// jump table instead of large matches.\n pub struct DepKindStruct {\n-    /// Whether the DepNode has parameters (query keys).\n-    pub(super) has_params: bool,\n-\n     /// Anonymous queries cannot be replayed from one compiler invocation to the next.\n     /// When their result is needed, it is recomputed. They are useful for fine-grained\n     /// dependency tracking, and caching within one compiler invocation.\n@@ -115,13 +112,6 @@ impl DepKind {\n     }\n }\n \n-// erase!() just makes tokens go away. It's used to specify which macro argument\n-// is repeated (i.e., which sub-expression of the macro we are in) but don't need\n-// to actually use any of the arguments.\n-macro_rules! erase {\n-    ($x:tt) => {{}};\n-}\n-\n macro_rules! is_anon_attr {\n     (anon) => {\n         true\n@@ -156,31 +146,27 @@ pub mod dep_kind {\n \n     // We use this for most things when incr. comp. is turned off.\n     pub const Null: DepKindStruct = DepKindStruct {\n-        has_params: false,\n         is_anon: false,\n         is_eval_always: false,\n \n         fingerprint_style: || FingerprintStyle::Unit,\n     };\n \n     pub const TraitSelect: DepKindStruct = DepKindStruct {\n-        has_params: false,\n         is_anon: true,\n         is_eval_always: false,\n \n         fingerprint_style: || FingerprintStyle::Unit,\n     };\n \n     pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {\n-        has_params: true,\n         is_anon: false,\n         is_eval_always: false,\n \n         fingerprint_style: || FingerprintStyle::Opaque,\n     };\n \n     pub const CompileMonoItem: DepKindStruct = DepKindStruct {\n-        has_params: true,\n         is_anon: false,\n         is_eval_always: false,\n \n@@ -193,7 +179,6 @@ pub mod dep_kind {\n             $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n         ,)*) => (\n             $(pub const $variant: DepKindStruct = {\n-                const has_params: bool = $({ erase!($tuple_arg_ty); true } |)* false;\n                 const is_anon: bool = contains_anon_attr!($($attrs)*);\n                 const is_eval_always: bool = contains_eval_always_attr!($($attrs)*);\n \n@@ -204,7 +189,6 @@ pub mod dep_kind {\n                 }\n \n                 DepKindStruct {\n-                    has_params,\n                     is_anon,\n                     is_eval_always,\n                     fingerprint_style,\n@@ -350,13 +334,7 @@ impl DepNodeExt for DepNode {\n \n         match kind.fingerprint_style() {\n             FingerprintStyle::Opaque => Err(()),\n-            FingerprintStyle::Unit => {\n-                if !kind.has_params {\n-                    Ok(DepNode::new_no_params(kind))\n-                } else {\n-                    Err(())\n-                }\n-            }\n+            FingerprintStyle::Unit => Ok(DepNode::new_no_params(kind)),\n             FingerprintStyle::DefPathHash => Ok(DepNode::from_def_path_hash(def_path_hash, kind)),\n         }\n     }"}, {"sha": "2e219b1dde9e1c06632011e9fd662cfe3f34ba44", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "patch": "@@ -34,19 +34,8 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         self.is_eval_always\n     }\n \n-    #[inline(always)]\n-    fn has_params(&self) -> bool {\n-        self.has_params\n-    }\n-\n     fn debug_node(node: &DepNode, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"{:?}\", node.kind)?;\n-\n-        if !node.kind.has_params && !node.kind.is_anon {\n-            return Ok(());\n-        }\n-\n-        write!(f, \"(\")?;\n+        write!(f, \"{:?}(\", node.kind)?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {"}, {"sha": "4fb895716b228be66e7ca597f35dc2f7b37154b9", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "patch": "@@ -61,7 +61,7 @@ impl<K: DepKind> DepNode<K> {\n     /// that the DepNode corresponding to the given DepKind actually\n     /// does not require any parameters.\n     pub fn new_no_params(kind: K) -> DepNode<K> {\n-        debug_assert!(!kind.has_params());\n+        debug_assert_eq!(kind.fingerprint_style(), FingerprintStyle::Unit);\n         DepNode { kind, hash: Fingerprint::ZERO.into() }\n     }\n "}, {"sha": "639038d008e0c63ba8f45eca8f35355740629315", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7143367c85f3f498d072ef4a2b8befdf1f75c0/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=dc7143367c85f3f498d072ef4a2b8befdf1f75c0", "patch": "@@ -51,7 +51,7 @@ impl<T: DepContext> HasDepContext for T {\n }\n \n /// Describes the contents of the fingerprint generated by a given query.\n-#[derive(PartialEq, Eq, Copy, Clone)]\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum FingerprintStyle {\n     /// The fingerprint is actually a DefPathHash.\n     DefPathHash,\n@@ -78,9 +78,6 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder>\n     /// Return whether this kind always require evaluation.\n     fn is_eval_always(&self) -> bool;\n \n-    /// Return whether this kind requires additional parameters to be executed.\n-    fn has_params(&self) -> bool;\n-\n     /// Implementation of `std::fmt::Debug` for `DepNode`.\n     fn debug_node(node: &DepNode<Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result;\n "}]}