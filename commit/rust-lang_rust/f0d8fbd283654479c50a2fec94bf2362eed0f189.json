{"sha": "f0d8fbd283654479c50a2fec94bf2362eed0f189", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZDhmYmQyODM2NTQ0NzljNTBhMmZlYzk0YmYyMzYyZWVkMGYxODk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-15T01:36:10Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-17T22:46:33Z"}, "message": "Avoid a `clone()` in `transcribe()`.\n\nThe current code (expensively) clones the value within an `Rc`. This\ncommit changes things so that the `Rc` itself is (cheaply) cloned\ninstead, avoid some allocations.\n\nThis requires converting a few `Rc` instances to `Lrc`.", "tree": {"sha": "c0d4e7c81585478c7da752728c571eed8aca9531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d4e7c81585478c7da752728c571eed8aca9531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0d8fbd283654479c50a2fec94bf2362eed0f189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d8fbd283654479c50a2fec94bf2362eed0f189", "html_url": "https://github.com/rust-lang/rust/commit/f0d8fbd283654479c50a2fec94bf2362eed0f189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0d8fbd283654479c50a2fec94bf2362eed0f189/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8801f3bf641f0277087e6621d09f9a6a373b36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8801f3bf641f0277087e6621d09f9a6a373b36c", "html_url": "https://github.com/rust-lang/rust/commit/f8801f3bf641f0277087e6621d09f9a6a373b36c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "fe1cffb092b1c30a3b7fa3af418a2eff4a42c537", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0d8fbd283654479c50a2fec94bf2362eed0f189/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d8fbd283654479c50a2fec94bf2362eed0f189/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=f0d8fbd283654479c50a2fec94bf2362eed0f189", "patch": "@@ -88,6 +88,7 @@ use smallvec::{smallvec, SmallVec};\n use syntax_pos::Span;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem;\n use std::ops::{Deref, DerefMut};\n@@ -179,7 +180,7 @@ struct MatcherPos<'root, 'tt: 'root> {\n     /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`\n     /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one\n     /// wants the shared `matches`, one should use `up.matches`.\n-    matches: Box<[Rc<NamedMatchVec>]>,\n+    matches: Box<[Lrc<NamedMatchVec>]>,\n     /// The position in `matches` corresponding to the first metavar in this matcher's sequence of\n     /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds\n     /// to `matches[match_lo]`.\n@@ -218,7 +219,7 @@ struct MatcherPos<'root, 'tt: 'root> {\n impl<'root, 'tt> MatcherPos<'root, 'tt> {\n     /// Adds `m` as a named match for the `idx`-th metavar.\n     fn push_match(&mut self, idx: usize, m: NamedMatch) {\n-        let matches = Rc::make_mut(&mut self.matches[idx]);\n+        let matches = Lrc::make_mut(&mut self.matches[idx]);\n         matches.push(m);\n     }\n }\n@@ -295,11 +296,11 @@ pub fn count_names(ms: &[TokenTree]) -> usize {\n }\n \n /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n-fn create_matches(len: usize) -> Box<[Rc<NamedMatchVec>]> {\n+fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {\n     if len == 0 {\n         vec![]\n     } else {\n-        let empty_matches = Rc::new(SmallVec::new());\n+        let empty_matches = Lrc::new(SmallVec::new());\n         vec![empty_matches; len]\n     }.into_boxed_slice()\n }\n@@ -353,8 +354,8 @@ fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree], open: Span) -> MatcherP\n /// token tree it was derived from.\n #[derive(Debug, Clone)]\n pub enum NamedMatch {\n-    MatchedSeq(Rc<NamedMatchVec>, DelimSpan),\n-    MatchedNonterminal(Rc<Nonterminal>),\n+    MatchedSeq(Lrc<NamedMatchVec>, DelimSpan),\n+    MatchedNonterminal(Lrc<Nonterminal>),\n }\n \n /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input\n@@ -561,7 +562,7 @@ fn inner_parse_loop<'root, 'tt>(\n                         new_item.match_cur += seq.num_captures;\n                         new_item.idx += 1;\n                         for idx in item.match_cur..item.match_cur + seq.num_captures {\n-                            new_item.push_match(idx, MatchedSeq(Rc::new(smallvec![]), sp));\n+                            new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![]), sp));\n                         }\n                         cur_items.push(new_item);\n                     }\n@@ -707,7 +708,7 @@ pub fn parse(\n                 let matches = eof_items[0]\n                     .matches\n                     .iter_mut()\n-                    .map(|dv| Rc::make_mut(dv).pop().unwrap());\n+                    .map(|dv| Lrc::make_mut(dv).pop().unwrap());\n                 return nameize(sess, ms, matches);\n             } else if eof_items.len() > 1 {\n                 return Error(\n@@ -780,7 +781,7 @@ pub fn parse(\n                 let match_cur = item.match_cur;\n                 item.push_match(\n                     match_cur,\n-                    MatchedNonterminal(Rc::new(parse_nt(&mut parser, span, &ident.as_str()))),\n+                    MatchedNonterminal(Lrc::new(parse_nt(&mut parser, span, &ident.as_str()))),\n                 );\n                 item.idx += 1;\n                 item.match_cur += 1;"}, {"sha": "bd2adb5ac13ba11ded836173314dcb1a69d3b916", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0d8fbd283654479c50a2fec94bf2362eed0f189/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d8fbd283654479c50a2fec94bf2362eed0f189/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=f0d8fbd283654479c50a2fec94bf2362eed0f189", "patch": "@@ -149,8 +149,7 @@ pub fn transcribe(cx: &ExtCtxt<'_>,\n                             result.push(tt.clone().into());\n                         } else {\n                             sp = sp.apply_mark(cx.current_expansion.mark);\n-                            let token =\n-                                TokenTree::Token(sp, Token::Interpolated(Lrc::new((**nt).clone())));\n+                            let token = TokenTree::Token(sp, Token::Interpolated(nt.clone()));\n                             result.push(token.into());\n                         }\n                     } else {"}]}