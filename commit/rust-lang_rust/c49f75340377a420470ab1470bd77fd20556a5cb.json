{"sha": "c49f75340377a420470ab1470bd77fd20556a5cb", "node_id": "C_kwDOAAsO6NoAKGM0OWY3NTM0MDM3N2E0MjA0NzBhYjE0NzBiZDc3ZmQyMDU1NmE1Y2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-09T15:31:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-09T15:31:10Z"}, "message": "Add missing queries to per_query_memory_usage", "tree": {"sha": "3929d4010f7594e31534b4490d99d0f7fd18db62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3929d4010f7594e31534b4490d99d0f7fd18db62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c49f75340377a420470ab1470bd77fd20556a5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c49f75340377a420470ab1470bd77fd20556a5cb", "html_url": "https://github.com/rust-lang/rust/commit/c49f75340377a420470ab1470bd77fd20556a5cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c49f75340377a420470ab1470bd77fd20556a5cb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "url": "https://api.github.com/repos/rust-lang/rust/commits/879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "html_url": "https://github.com/rust-lang/rust/commit/879cac4b2884a5b40ed916ba8d0a9e69c05b2146"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "cd465739139654bad7532e898d322c0dd5bb3ead", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c49f75340377a420470ab1470bd77fd20556a5cb/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49f75340377a420470ab1470bd77fd20556a5cb/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=c49f75340377a420470ab1470bd77fd20556a5cb", "patch": "@@ -5,8 +5,9 @@\n //! But we need this for at least LRU caching at the query level.\n pub use hir_def::db::*;\n pub use hir_expand::db::{\n-    AstDatabase, AstDatabaseStorage, AstIdMapQuery, HygieneFrameQuery, InternMacroCallQuery,\n-    MacroArgTextQuery, MacroDefQuery, MacroExpandQuery, ParseMacroExpansionQuery,\n+    AstDatabase, AstDatabaseStorage, AstIdMapQuery, ExpandProcMacroQuery, HygieneFrameQuery,\n+    InternMacroCallQuery, MacroArgTextQuery, MacroDefQuery, MacroExpandErrorQuery,\n+    MacroExpandQuery, ParseMacroExpansionQuery,\n };\n pub use hir_ty::db::*;\n "}, {"sha": "244e99fe2e27d2359b1431f44778f14cf5e39ed1", "filename": "crates/ide-db/src/apply_change.rs", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c49f75340377a420470ab1470bd77fd20556a5cb/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49f75340377a420470ab1470bd77fd20556a5cb/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fapply_change.rs?ref=c49f75340377a420470ab1470bd77fd20556a5cb", "patch": "@@ -73,68 +73,96 @@ impl RootDatabase {\n \n             // AstDatabase\n             hir::db::AstIdMapQuery\n+            hir::db::ParseMacroExpansionQuery\n+            hir::db::InternMacroCallQuery\n             hir::db::MacroArgTextQuery\n             hir::db::MacroDefQuery\n-            hir::db::ParseMacroExpansionQuery\n             hir::db::MacroExpandQuery\n+            hir::db::ExpandProcMacroQuery\n+            hir::db::MacroExpandErrorQuery\n             hir::db::HygieneFrameQuery\n-            hir::db::InternMacroCallQuery\n \n             // DefDatabase\n             hir::db::FileItemTreeQuery\n-            hir::db::BlockDefMapQuery\n             hir::db::CrateDefMapQueryQuery\n-            hir::db::FieldsAttrsQuery\n-            hir::db::VariantsAttrsQuery\n-            hir::db::FieldsAttrsSourceMapQuery\n-            hir::db::VariantsAttrsSourceMapQuery\n+            hir::db::BlockDefMapQuery\n             hir::db::StructDataQuery\n+            hir::db::StructDataWithDiagnosticsQuery\n             hir::db::UnionDataQuery\n+            hir::db::UnionDataWithDiagnosticsQuery\n             hir::db::EnumDataQuery\n+            hir::db::EnumDataWithDiagnosticsQuery\n             hir::db::ImplDataQuery\n+            hir::db::ImplDataWithDiagnosticsQuery\n             hir::db::TraitDataQuery\n+            hir::db::TraitDataWithDiagnosticsQuery\n+            hir::db::TraitAliasDataQuery\n             hir::db::TypeAliasDataQuery\n             hir::db::FunctionDataQuery\n             hir::db::ConstDataQuery\n             hir::db::StaticDataQuery\n+            hir::db::Macro2DataQuery\n+            hir::db::MacroRulesDataQuery\n+            hir::db::ProcMacroDataQuery\n             hir::db::BodyWithSourceMapQuery\n             hir::db::BodyQuery\n             hir::db::ExprScopesQuery\n             hir::db::GenericParamsQuery\n+            hir::db::VariantsAttrsQuery\n+            hir::db::FieldsAttrsQuery\n+            hir::db::VariantsAttrsSourceMapQuery\n+            hir::db::FieldsAttrsSourceMapQuery\n             hir::db::AttrsQuery\n             hir::db::CrateLangItemsQuery\n             hir::db::LangItemQuery\n             hir::db::ImportMapQuery\n+            hir::db::FieldVisibilitiesQuery\n+            hir::db::FunctionVisibilityQuery\n+            hir::db::ConstVisibilityQuery\n+            hir::db::CrateSupportsNoStdQuery\n \n             // HirDatabase\n             hir::db::InferQueryQuery\n+            hir::db::MirBodyQuery\n+            hir::db::BorrowckQuery\n             hir::db::TyQuery\n             hir::db::ValueTyQuery\n             hir::db::ImplSelfTyQuery\n+            hir::db::ConstParamTyQuery\n+            hir::db::ConstEvalQuery\n+            hir::db::ConstEvalDiscriminantQuery\n             hir::db::ImplTraitQuery\n             hir::db::FieldTypesQuery\n+            hir::db::LayoutOfAdtQuery\n+            hir::db::TargetDataLayoutQuery\n             hir::db::CallableItemSignatureQuery\n+            hir::db::ReturnTypeImplTraitsQuery\n             hir::db::GenericPredicatesForParamQuery\n             hir::db::GenericPredicatesQuery\n+            hir::db::TraitEnvironmentQuery\n             hir::db::GenericDefaultsQuery\n             hir::db::InherentImplsInCrateQuery\n-            hir::db::TraitEnvironmentQuery\n+            hir::db::InherentImplsInBlockQuery\n+            hir::db::IncoherentInherentImplCratesQuery\n             hir::db::TraitImplsInCrateQuery\n+            hir::db::TraitImplsInBlockQuery\n             hir::db::TraitImplsInDepsQuery\n-            hir::db::AssociatedTyDataQuery\n+            hir::db::InternCallableDefQuery\n+            hir::db::InternLifetimeParamIdQuery\n+            hir::db::InternImplTraitIdQuery\n+            hir::db::InternTypeOrConstParamIdQuery\n+            hir::db::InternClosureQuery\n+            hir::db::InternGeneratorQuery\n             hir::db::AssociatedTyDataQuery\n             hir::db::TraitDatumQuery\n             hir::db::StructDatumQuery\n             hir::db::ImplDatumQuery\n             hir::db::FnDefDatumQuery\n-            hir::db::ReturnTypeImplTraitsQuery\n-            hir::db::InternCallableDefQuery\n-            hir::db::InternTypeOrConstParamIdQuery\n-            hir::db::InternImplTraitIdQuery\n-            hir::db::InternClosureQuery\n+            hir::db::FnDefVarianceQuery\n+            hir::db::AdtVarianceQuery\n             hir::db::AssociatedTyValueQuery\n             hir::db::TraitSolveQueryQuery\n-            hir::db::InternTypeOrConstParamIdQuery\n+            hir::db::ProgramClausesForChalkEnvQuery\n \n             // SymbolsDatabase\n             crate::symbol_index::ModuleSymbolsQuery\n@@ -153,8 +181,14 @@ impl RootDatabase {\n             hir::db::InternConstQuery\n             hir::db::InternStaticQuery\n             hir::db::InternTraitQuery\n+            hir::db::InternTraitAliasQuery\n             hir::db::InternTypeAliasQuery\n             hir::db::InternImplQuery\n+            hir::db::InternExternBlockQuery\n+            hir::db::InternBlockQuery\n+            hir::db::InternMacro2Query\n+            hir::db::InternProcMacroQuery\n+            hir::db::InternMacroRulesQuery\n         ];\n \n         acc.sort_by_key(|it| std::cmp::Reverse(it.1));"}]}