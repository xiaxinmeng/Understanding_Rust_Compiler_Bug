{"sha": "a2dee35e015ade54bf0932e9f58e057dab01b9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZGVlMzVlMDE1YWRlNTRiZjA5MzJlOWY1OGUwNTdkYWIwMWI5Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-12T08:32:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-12T08:32:03Z"}, "message": "auto merge of #18841 : Manishearth/rust/doc-ty, r=alexcrichton\n\nI'll probably start documenting the rest of `syntax::ast` whenever I get time.", "tree": {"sha": "13a33fec6fb88083ab0bb71b81d60e7a69170c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a33fec6fb88083ab0bb71b81d60e7a69170c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2dee35e015ade54bf0932e9f58e057dab01b9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dee35e015ade54bf0932e9f58e057dab01b9c9", "html_url": "https://github.com/rust-lang/rust/commit/a2dee35e015ade54bf0932e9f58e057dab01b9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2dee35e015ade54bf0932e9f58e057dab01b9c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d5e7f32492a5cc18f806fa96c3d863fa95fe688", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5e7f32492a5cc18f806fa96c3d863fa95fe688", "html_url": "https://github.com/rust-lang/rust/commit/4d5e7f32492a5cc18f806fa96c3d863fa95fe688"}, {"sha": "37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "html_url": "https://github.com/rust-lang/rust/commit/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "639adb450783fb21da7adcc63e6a5a8140cfb623", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2dee35e015ade54bf0932e9f58e057dab01b9c9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dee35e015ade54bf0932e9f58e057dab01b9c9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a2dee35e015ade54bf0932e9f58e057dab01b9c9", "patch": "@@ -1084,24 +1084,40 @@ pub struct BareFnTy {\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+/// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n+    /// The unit type (`()`)\n     TyNil,\n-    TyBot, /* bottom type */\n+    /// The bottom type (`!`)\n+    TyBot,\n     TyUniq(P<Ty>),\n+    /// An array (`[T]`)\n     TyVec(P<Ty>),\n+    /// A fixed length array (`[T, ..n]`)\n     TyFixedLengthVec(P<Ty>, P<Expr>),\n+    /// A raw pointer (`*const T` or `*mut T`)\n     TyPtr(MutTy),\n+    /// A reference (`&'a T` or `&'a mut T`)\n     TyRptr(Option<Lifetime>, MutTy),\n+    /// A closure (e.g. `|uint| -> bool`)\n     TyClosure(P<ClosureTy>),\n+    /// A procedure (e.g `proc(uint) -> bool`)\n     TyProc(P<ClosureTy>),\n+    /// A bare function (e.g. `fn(uint) -> bool`)\n     TyBareFn(P<BareFnTy>),\n+    /// A tuple (`(A, B, C, D,...)`)\n     TyTup(Vec<P<Ty>> ),\n+    /// A path (`module::module::...::Type`) or primitive\n+    ///\n+    /// Type parameters are stored in the Path itself\n     TyPath(Path, Option<TyParamBounds>, NodeId), // for #7264; see above\n-    TyPolyTraitRef(P<PolyTraitRef>), // a type like `for<'a> Foo<&'a Bar>`\n+    /// A type like `for<'a> Foo<&'a Bar>`\n+    TyPolyTraitRef(P<PolyTraitRef>),\n     /// A \"qualified path\", e.g. `<Vec<T> as SomeTrait>::SomeType`\n     TyQPath(P<QPath>),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     TyParen(P<Ty>),\n+    /// Unused for now\n     TyTypeof(P<Expr>),\n     /// TyInfer means the type should be inferred instead of it having been\n     /// specified. This can appear anywhere in a type."}]}