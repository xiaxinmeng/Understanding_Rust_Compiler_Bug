{"sha": "55623b2f54b59d03ebd5a12a24a79fc82b92889b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjIzYjJmNTRiNTlkMDNlYmQ1YTEyYTI0YTc5ZmM4MmI5Mjg4OWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-24T11:37:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-26T10:20:02Z"}, "message": "Rustup to rustc 1.34.0-nightly (aadbc459b 2019-02-23)", "tree": {"sha": "3c76b2895d1e2f7e7165732a2c47407e293564b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c76b2895d1e2f7e7165732a2c47407e293564b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55623b2f54b59d03ebd5a12a24a79fc82b92889b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55623b2f54b59d03ebd5a12a24a79fc82b92889b", "html_url": "https://github.com/rust-lang/rust/commit/55623b2f54b59d03ebd5a12a24a79fc82b92889b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55623b2f54b59d03ebd5a12a24a79fc82b92889b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1701fb093e3b2fd8ab1d876a5534c94baec6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1701fb093e3b2fd8ab1d876a5534c94baec6f9", "html_url": "https://github.com/rust-lang/rust/commit/5d1701fb093e3b2fd8ab1d876a5534c94baec6f9"}], "stats": {"total": 162, "additions": 102, "deletions": 60}, "files": [{"sha": "343b618be73c358d184d031c02466e5fcc67d592", "filename": "patches/0001-Disable-stdsimd.patch", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55623b2f54b59d03ebd5a12a24a79fc82b92889b/patches%2F0001-Disable-stdsimd.patch", "raw_url": "https://github.com/rust-lang/rust/raw/55623b2f54b59d03ebd5a12a24a79fc82b92889b/patches%2F0001-Disable-stdsimd.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-Disable-stdsimd.patch?ref=55623b2f54b59d03ebd5a12a24a79fc82b92889b", "patch": "@@ -1,6 +1,6 @@\n-From 096dee5742ccd90df2e0edfe8b6bda87a63d99cf Mon Sep 17 00:00:00 2001\n+From 95157a64120faffebc2cc67baf65f45f992e167e Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Wed, 30 Jan 2019 18:55:58 +0100\n+Date: Sun, 24 Feb 2019 11:27:11 +0100\n Subject: [PATCH] Disable stdsimd\n \n ---\n@@ -9,35 +9,35 @@ Subject: [PATCH] Disable stdsimd\n  2 files changed, 4 insertions(+), 4 deletions(-)\n \n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 6f364eb..69f0914 100644\n+index f2165c6..cdb42c1 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -221,6 +221,7 @@ pub mod alloc;\n+@@ -222,6 +222,7 @@ pub mod alloc;\n  mod tuple;\n  mod unit;\n  \n +/*\n  // Pull in the `core_arch` crate directly into libcore. The contents of\n  // `core_arch` are in a different repository: rust-lang-nursery/stdsimd.\n  //\n-@@ -248,3 +249,4 @@ mod core_arch;\n+@@ -235,3 +236,4 @@ mod core_arch;\n  \n  #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n  pub use core_arch::arch;\n +*/\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 244caf2..f269fda 100644\n+index 6dd3a6c..c7401e2 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -271,7 +271,6 @@\n- #![feature(rustc_attrs)]\n- #![feature(rustc_const_unstable)]\n+@@ -291,7 +291,6 @@\n+ #![feature(slice_patterns)]\n+ #![feature(staged_api)]\n  #![feature(std_internals)]\n -#![feature(stdsimd)]\n- #![feature(shrink_to)]\n- #![feature(slice_concat_ext)]\n- #![feature(slice_internals)]\n-@@ -358,9 +357,6 @@ pub mod prelude;\n+ #![feature(stmt_expr_attributes)]\n+ #![feature(str_internals)]\n+ #![feature(thread_local)]\n+@@ -357,9 +356,6 @@ pub mod prelude;\n  // Public module declarations and re-exports\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::any;\n@@ -47,15 +47,15 @@ index 244caf2..f269fda 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::cell;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -492,6 +488,7 @@ mod memchr;\n+@@ -489,6 +485,7 @@ mod memchr;\n  // compiler\n  pub mod rt;\n  \n +/*\n  // Pull in the `std_detect` crate directly into libstd. The contents of\n  // `std_detect` are in a different repository: rust-lang-nursery/stdsimd.\n  //\n-@@ -508,6 +505,7 @@ mod std_detect;\n+@@ -505,6 +502,7 @@ mod std_detect;\n  #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n  #[cfg(not(test))]\n  pub use std_detect::detect;\n@@ -64,5 +64,4 @@ index 244caf2..f269fda 100644\n  // Include a number of private modules that exist solely to provide\n  // the rustdoc documentation for primitive types. Using `include!`\n -- \n-2.11.0\n-\n+2.17.2 (Apple Git-113)"}, {"sha": "94744b41daefdaf82b9ca3bb5f58852cc39de86a", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 73, "deletions": 30, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/55623b2f54b59d03ebd5a12a24a79fc82b92889b/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/55623b2f54b59d03ebd5a12a24a79fc82b92889b/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=55623b2f54b59d03ebd5a12a24a79fc82b92889b", "patch": "@@ -1,6 +1,6 @@\n-From 8080d322c8396b7b234cc92eb675f697c55f7298 Mon Sep 17 00:00:00 2001\n+From 61a7d6cc7809c89a8d2d046946dd0cb7cb1cd1b5 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 16 Feb 2019 12:09:42 +0100\n+Date: Sun, 24 Feb 2019 11:27:11 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -18,13 +18,13 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/num/wrapping.rs      |  14 ++--\n  src/libcore/ops/arith.rs         |  22 +++---\n  src/libcore/ops/bit.rs           |  30 +++-----\n- src/libcore/sync/atomic.rs       |  30 --------\n+ src/libcore/sync/atomic.rs       |  32 --------\n  src/libcore/time.rs              | 123 -------------------------------\n  src/libstd/lib.rs                |   4 -\n- src/libstd/net/ip.rs             |  20 -----\n+ src/libstd/net/ip.rs             |  42 -----------\n  src/libstd/num.rs                |   2 +-\n  src/libstd/panic.rs              |   6 --\n- 22 files changed, 63 insertions(+), 372 deletions(-)\n+ 20 files changed, 63 insertions(+), 363 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n index ed90b7d..1739f91 100644\n@@ -190,7 +190,7 @@ index d5d29c9..f98f382 100644\n  \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index a3e9cfa..31b6ca4 100644\n+index e7efd97..78e0da7 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n @@ -173,7 +173,6 @@ step_impl_signed!([i64: u64]);\n@@ -215,10 +215,10 @@ index dfe1d2a..06cc578 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index cd88d3e..532d680 100644\n+index cdb42c1..75743ee 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -148,14 +148,12 @@ mod uint_macros;\n+@@ -149,14 +149,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -234,10 +234,10 @@ index cd88d3e..532d680 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index c4b41f1..0ade53b 100644\n+index 29606cb..160cca1 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -664,8 +664,8 @@ mod copy_impls {\n+@@ -673,8 +673,8 @@ mod copy_impls {\n      }\n  \n      impl_copy! {\n@@ -249,7 +249,7 @@ index c4b41f1..0ade53b 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 3f7455a..7a0c44a 100644\n+index 43afc9a..fc5366b 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -164,12 +164,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -266,7 +266,7 @@ index 3f7455a..7a0c44a 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 6fb67ea..6440490 100644\n+index 5b7d5f4..0cfb96c 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -102,13 +102,11 @@ nonzero_integers! {\n@@ -283,7 +283,7 @@ index 6fb67ea..6440490 100644\n      #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n  }\n  \n-@@ -2124,18 +2122,6 @@ impl i64 {\n+@@ -2120,18 +2118,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -302,7 +302,7 @@ index 6fb67ea..6440490 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4411,17 +4397,6 @@ impl u64 {\n+@@ -4407,17 +4393,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -320,7 +320,7 @@ index 6fb67ea..6440490 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4505,7 +4480,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4501,7 +4476,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -329,7 +329,7 @@ index 6fb67ea..6440490 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4621,30 +4596,25 @@ macro_rules! rev {\n+@@ -4617,30 +4592,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -364,7 +364,7 @@ index 6fb67ea..6440490 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4656,21 +4626,21 @@ mod ptr_try_from_impls {\n+@@ -4652,21 +4622,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -394,7 +394,7 @@ index 6fb67ea..6440490 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4679,24 +4649,24 @@ mod ptr_try_from_impls {\n+@@ -4675,24 +4645,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -427,7 +427,7 @@ index 6fb67ea..6440490 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4705,24 +4675,20 @@ mod ptr_try_from_impls {\n+@@ -4701,24 +4671,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -456,7 +456,7 @@ index 6fb67ea..6440490 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4757,7 +4723,7 @@ macro_rules! doit {\n+@@ -4753,7 +4719,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -465,7 +465,7 @@ index 6fb67ea..6440490 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4948,52 +4914,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4944,52 +4910,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -841,8 +841,51 @@ index 2c9bf24..af2ab6f 100644\n  \n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n+diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n+index d0ee5fa..d02c454 100644\n+--- a/src/libcore/sync/atomic.rs\n++++ b/src/libcore/sync/atomic.rs\n+@@ -2012,38 +2012,6 @@ atomic_int! {\n+     \"AtomicU64::new(0)\",\n+     u64 AtomicU64 ATOMIC_U64_INIT\n+ }\n+-#[cfg(target_has_atomic = \"128\")]\n+-atomic_int! {\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    \"i128\", \"../../../std/primitive.i128.html\",\n+-    \"#![feature(integer_atomics)]\\n\\n\",\n+-    atomic_min, atomic_max,\n+-    16,\n+-    \"AtomicI128::new(0)\",\n+-    i128 AtomicI128 ATOMIC_I128_INIT\n+-}\n+-#[cfg(target_has_atomic = \"128\")]\n+-atomic_int! {\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    \"u128\", \"../../../std/primitive.u128.html\",\n+-    \"#![feature(integer_atomics)]\\n\\n\",\n+-    atomic_umin, atomic_umax,\n+-    16,\n+-    \"AtomicU128::new(0)\",\n+-    u128 AtomicU128 ATOMIC_U128_INIT\n+-}\n+ #[cfg(target_pointer_width = \"16\")]\n+ macro_rules! ptr_width {\n+     () => { 2 }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index ac7e117..0dfd856 100644\n+index 91161ca..759497f 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -21,7 +21,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -851,9 +894,9 @@ index ac7e117..0dfd856 100644\n  const MICROS_PER_SEC: u64 = 1_000_000;\n -const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n  \n- /// The duration of one second.\n- #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n-@@ -276,54 +275,6 @@ impl Duration {\n+ /// A `Duration` type to represent a span of time, typically used for system\n+ /// timeouts.\n+@@ -312,54 +311,6 @@ impl Duration {\n      #[inline]\n      pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n  \n@@ -908,7 +951,7 @@ index ac7e117..0dfd856 100644\n      /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n      /// if overflow occurred.\n      ///\n-@@ -482,80 +433,6 @@ impl Duration {\n+@@ -518,80 +469,6 @@ impl Duration {\n          (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n      }\n  \n@@ -990,10 +1033,10 @@ index ac7e117..0dfd856 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 9a4232d..592fea0 100644\n+index c7401e2..3dff42a 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -392,8 +392,6 @@ pub use core::i16;\n+@@ -396,8 +396,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1002,7 +1045,7 @@ index 9a4232d..592fea0 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -426,8 +424,6 @@ pub use alloc_crate::string;\n+@@ -430,8 +428,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -1078,7 +1121,7 @@ index c80b9a5..e32a6b3 100644\n  #[cfg(test)] use fmt;\n  #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n-index 862fdf0..171ebeb 100644\n+index daeac71..717ee82 100644\n --- a/src/libstd/panic.rs\n +++ b/src/libstd/panic.rs\n @@ -254,9 +254,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}"}, {"sha": "18911113f19df222b96c7076db913d68fe299b03", "filename": "patches/0006-alloc-Disable-some-unsupported-stuff.patch", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55623b2f54b59d03ebd5a12a24a79fc82b92889b/patches%2F0006-alloc-Disable-some-unsupported-stuff.patch", "raw_url": "https://github.com/rust-lang/rust/raw/55623b2f54b59d03ebd5a12a24a79fc82b92889b/patches%2F0006-alloc-Disable-some-unsupported-stuff.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0006-alloc-Disable-some-unsupported-stuff.patch?ref=55623b2f54b59d03ebd5a12a24a79fc82b92889b", "patch": "@@ -1,18 +1,18 @@\n-From a65665bae4e5ad6ef76a365b7cdff8bdfbd3db67 Mon Sep 17 00:00:00 2001\n+From 610096e32cc7cfba58358219a1cf25ff72123208 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 6 Oct 2018 11:03:00 +0200\n+Date: Sun, 24 Feb 2019 11:27:11 +0100\n Subject: [PATCH] [alloc] Disable some unsupported stuff\n \n ---\n  src/liballoc/boxed.rs | 6 ------\n  src/liballoc/vec.rs   | 2 --\n- 3 files changed, 4 insertions(+), 8 deletions(-)\n+ 2 files changed, 8 deletions(-)\n \n diff --git a/src/liballoc/boxed.rs b/src/liballoc/boxed.rs\n-index f989e70..597dd15 100644\n+index 0cd2373..696535a 100644\n --- a/src/liballoc/boxed.rs\n +++ b/src/liballoc/boxed.rs\n-@@ -410,9 +410,6 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n+@@ -423,9 +423,6 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n      fn write_u64(&mut self, i: u64) {\n          (**self).write_u64(i)\n      }\n@@ -22,7 +22,7 @@ index f989e70..597dd15 100644\n      fn write_usize(&mut self, i: usize) {\n          (**self).write_usize(i)\n      }\n-@@ -428,9 +425,6 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n+@@ -441,9 +438,6 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n      fn write_i64(&mut self, i: i64) {\n          (**self).write_i64(i)\n      }\n@@ -33,22 +33,22 @@ index f989e70..597dd15 100644\n          (**self).write_isize(i)\n      }\n diff --git a/src/liballoc/vec.rs b/src/liballoc/vec.rs\n-index 2bc037e..2fe8894 100644\n+index 229dafc..944856e 100644\n --- a/src/liballoc/vec.rs\n +++ b/src/liballoc/vec.rs\n-@@ -1569,13 +1569,11 @@ impl_is_zero!(i8, |x| x == 0);\n+@@ -1601,13 +1601,11 @@ impl_is_zero!(i8, |x| x == 0);\n  impl_is_zero!(i16, |x| x == 0);\n  impl_is_zero!(i32, |x| x == 0);\n  impl_is_zero!(i64, |x| x == 0);\n -impl_is_zero!(i128, |x| x == 0);\n  impl_is_zero!(isize, |x| x == 0);\n-\n+ \n  impl_is_zero!(u16, |x| x == 0);\n  impl_is_zero!(u32, |x| x == 0);\n  impl_is_zero!(u64, |x| x == 0);\n -impl_is_zero!(u128, |x| x == 0);\n  impl_is_zero!(usize, |x| x == 0);\n-\n- impl_is_zero!(char, |x| x == '\\0');\n---\n-2.17.1 (Apple Git-112)\n+ \n+ impl_is_zero!(bool, |x| x == false);\n+-- \n+2.17.2 (Apple Git-113)"}]}