{"sha": "6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "node_id": "C_kwDOAAsO6NoAKDZiMTM5YzViM2UyYmFkNjIzYmRiZDg1ODNiYzRmMmIwZjc2MzExM2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T07:30:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T07:30:34Z"}, "message": "Auto merge of #102614 - matthiaskrgr:rollup-fjyu7oo, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #102550 (rustdoc: remove no-op CSS on `.impl, .method` etc)\n - #102591 (Fix duplicate usage of `a` article.)\n - #102592 (Remove a couple lifetimes that can be infered)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8f915d5975eb1217c1af986000f2b6c373d35863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f915d5975eb1217c1af986000f2b6c373d35863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "html_url": "https://github.com/rust-lang/rust/commit/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbaf3e67aa156db0031a24383f3cc371a10da13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf3e67aa156db0031a24383f3cc371a10da13b", "html_url": "https://github.com/rust-lang/rust/commit/dbaf3e67aa156db0031a24383f3cc371a10da13b"}, {"sha": "d5fb8d2aef0cb54fd2f40d1727031681f34ab628", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fb8d2aef0cb54fd2f40d1727031681f34ab628", "html_url": "https://github.com/rust-lang/rust/commit/d5fb8d2aef0cb54fd2f40d1727031681f34ab628"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "705141614e252288bb9cee3b5e4d9ac9ed34ddef", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "patch": "@@ -115,7 +115,7 @@ pub fn expand_test_or_bench(\n             // reworked in the future to not need it, it'd be nice.\n             _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n         };\n-        err.span_label(attr_sp, \"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n+        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\")\n             .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n             .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", \"#[cfg(test)]\", Applicability::MaybeIncorrect)\n             .emit();"}, {"sha": "7b0054a96d3ea019ac202140712bbeb36bbe0562", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "patch": "@@ -274,29 +274,28 @@ pub fn explain_lint_level_source(\n     }\n }\n \n-pub fn struct_lint_level<'s, 'd>(\n-    sess: &'s Session,\n+pub fn struct_lint_level(\n+    sess: &Session,\n     lint: &'static Lint,\n     level: Level,\n     src: LintLevelSource,\n     span: Option<MultiSpan>,\n     msg: impl Into<DiagnosticMessage>,\n-    decorate: impl 'd\n-    + for<'a, 'b> FnOnce(\n+    decorate: impl for<'a, 'b> FnOnce(\n         &'b mut DiagnosticBuilder<'a, ()>,\n     ) -> &'b mut DiagnosticBuilder<'a, ()>,\n ) {\n     // Avoid codegen bloat from monomorphization by immediately doing dyn dispatch of `decorate` to\n     // the \"real\" work.\n-    fn struct_lint_level_impl<'s, 'd>(\n-        sess: &'s Session,\n+    fn struct_lint_level_impl(\n+        sess: &Session,\n         lint: &'static Lint,\n         level: Level,\n         src: LintLevelSource,\n         span: Option<MultiSpan>,\n         msg: impl Into<DiagnosticMessage>,\n         decorate: Box<\n-            dyn 'd\n+            dyn '_\n                 + for<'a, 'b> FnOnce(\n                     &'b mut DiagnosticBuilder<'a, ()>,\n                 ) -> &'b mut DiagnosticBuilder<'a, ()>,"}, {"sha": "45433fd9b65fede4fa7c7f56b32b759cc0451eef", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "patch": "@@ -184,18 +184,6 @@ h4.code-header {\n \tmargin: 0;\n \tpadding: 0;\n }\n-.impl,\n-.impl-items .method,\n-.methods .method,\n-.impl-items .type,\n-.methods .type,\n-.impl-items .associatedconstant,\n-.methods .associatedconstant,\n-.impl-items .associatedtype,\n-.methods .associatedtype {\n-\tflex-basis: 100%;\n-\tposition: relative;\n-}\n \n #crate-search,\n h1, h2, h3, h4, h5, h6,"}, {"sha": "fc2c5f62bedb07fe57cfce9a715ddf884c0c5b0b", "filename": "src/test/ui/test-attrs/test-on-not-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "patch": "@@ -2,7 +2,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:3:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | mod test {}\n    | ----------- expected a non-associated function, found a module\n    |\n@@ -15,7 +15,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:6:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | / mod loooooooooooooong_teeeeeeeeeest {\n LL | |     /*\n LL | |     this is a comment\n@@ -34,7 +34,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:20:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | extern \"C\" {}\n    | ------------- expected a non-associated function, found an extern block\n    |\n@@ -47,7 +47,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:23:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | trait Foo {}\n    | ------------ expected a non-associated function, found a trait\n    |\n@@ -60,7 +60,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:26:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | impl Foo for i32 {}\n    | ------------------- expected a non-associated function, found an implementation\n    |\n@@ -73,7 +73,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:29:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | const FOO: i32 = -1_i32;\n    | ------------------------ expected a non-associated function, found a constant item\n    |\n@@ -86,7 +86,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:32:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | static BAR: u64 = 10_000_u64;\n    | ----------------------------- expected a non-associated function, found a static item\n    |\n@@ -99,7 +99,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:35:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | / enum MyUnit {\n LL | |     Unit,\n LL | | }\n@@ -114,7 +114,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:40:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | struct NewI32(i32);\n    | ------------------- expected a non-associated function, found a struct\n    |\n@@ -127,7 +127,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:43:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | / union Spooky {\n LL | |     x: i32,\n LL | |     y: u32,\n@@ -143,7 +143,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:50:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL |   #[derive(Copy, Clone, Debug)]\n LL | / struct MoreAttrs {\n LL | |     a: i32,\n@@ -160,7 +160,7 @@ warning: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:61:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n LL | foo!();\n    | ------- expected a non-associated function, found an item macro invocation\n    |"}, {"sha": "371d642c15d1d43b468213be0535284e9dc96d05", "filename": "src/tools/rust-analyzer/crates/ide-db/src/imports/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "patch": "@@ -225,7 +225,7 @@ fn path_cmp_short(a: &ast::Path, b: &ast::Path) -> Ordering {\n }\n \n /// Compares two paths, if one ends earlier than the other the has_tl parameters decide which is\n-/// greater as a a path that has a tree list should be greater, while one that just ends without\n+/// greater as a path that has a tree list should be greater, while one that just ends without\n /// a tree list should be considered less.\n pub(super) fn use_tree_path_cmp(\n     a: &ast::Path,"}, {"sha": "ac10721d95514049baa41f351b7a2a4c0a989811", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "patch": "@@ -132,7 +132,7 @@ where\n \n             let ext = span.extensions();\n \n-            // `FormattedFields` is a a formatted representation of the span's\n+            // `FormattedFields` is a formatted representation of the span's\n             // fields, which is stored in its extensions by the `fmt` layer's\n             // `new_span` method. The fields will have been formatted\n             // by the same field formatter that's provided to the event"}]}