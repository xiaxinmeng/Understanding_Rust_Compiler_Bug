{"sha": "e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjVhMDMzNGRlNDAyYjg1YWY2YjlhYTY4MWZlMTFjOWEzYmI2ZjA=", "commit": {"author": {"name": "Jacob Kiesel", "email": "kieseljake@gmail.com", "date": "2019-03-20T21:16:50Z"}, "committer": {"name": "Jacob Kiesel", "email": "kieseljake@gmail.com", "date": "2019-03-20T21:16:50Z"}, "message": "Fix formatting and add unit tests for panic cases", "tree": {"sha": "be19576374c0eca8702a1a14f084d73ee45ce1e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be19576374c0eca8702a1a14f084d73ee45ce1e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0", "html_url": "https://github.com/rust-lang/rust/commit/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0/comments", "author": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8d9a23eea261152bb90fa620e96cfc2715de4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8d9a23eea261152bb90fa620e96cfc2715de4a", "html_url": "https://github.com/rust-lang/rust/commit/2f8d9a23eea261152bb90fa620e96cfc2715de4a"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "688d9c1aabbee60b8dcce1e14e17a99146305ef3", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0", "patch": "@@ -970,7 +970,7 @@ impl f32 {\n     /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n     /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n     /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n-    /// assert!((std::f32::NAN).clamp(-2.0f32, 1.0f32).is_nan()); \n+    /// assert!((std::f32::NAN).clamp(-2.0f32, 1.0f32).is_nan());\n     /// ```\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n@@ -1582,4 +1582,22 @@ mod tests {\n         assert_eq!(f32::from_bits(masked_nan1).to_bits(), masked_nan1);\n         assert_eq!(f32::from_bits(masked_nan2).to_bits(), masked_nan2);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f32.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f32.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f32.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "5c3bc05c15f15b738f904dbc96ff6d614a2ebd8c", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=e2b5a0334de402b85af6b9aa681fe11c9a3bb6f0", "patch": "@@ -892,7 +892,7 @@ impl f64 {\n     /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n     /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n     /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n-    /// assert!((std::f64::NAN).clamp(-2.0f32, 1.0f32).is_nan()); \n+    /// assert!((std::f64::NAN).clamp(-2.0f32, 1.0f32).is_nan());\n     /// ```\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n@@ -1523,4 +1523,22 @@ mod tests {\n         assert_eq!(f64::from_bits(masked_nan1).to_bits(), masked_nan1);\n         assert_eq!(f64::from_bits(masked_nan2).to_bits(), masked_nan2);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f64.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f64.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f64.clamp(3.0, NAN);\n+    }\n }"}]}