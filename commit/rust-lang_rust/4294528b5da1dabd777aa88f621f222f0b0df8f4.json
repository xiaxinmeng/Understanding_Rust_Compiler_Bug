{"sha": "4294528b5da1dabd777aa88f621f222f0b0df8f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOTQ1MjhiNWRhMWRhYmQ3NzdhYTg4ZjYyMWYyMjJmMGIwZGY4ZjQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2018-02-08T23:48:16Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2018-02-18T05:48:35Z"}, "message": "Improve hygiene when privacy-checking struct expression or struct constructor fields.", "tree": {"sha": "0a3f060468e7a2c29e25fc4bde2e1220cc24dc44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3f060468e7a2c29e25fc4bde2e1220cc24dc44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4294528b5da1dabd777aa88f621f222f0b0df8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4294528b5da1dabd777aa88f621f222f0b0df8f4", "html_url": "https://github.com/rust-lang/rust/commit/4294528b5da1dabd777aa88f621f222f0b0df8f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4294528b5da1dabd777aa88f621f222f0b0df8f4/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba8d6d18d0378a515ed692f7e7fdb0c5a068c7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8d6d18d0378a515ed692f7e7fdb0c5a068c7ea", "html_url": "https://github.com/rust-lang/rust/commit/ba8d6d18d0378a515ed692f7e7fdb0c5a068c7ea"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "f8221698231dc8279b8947300828fccd45ce7bd3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4294528b5da1dabd777aa88f621f222f0b0df8f4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4294528b5da1dabd777aa88f621f222f0b0df8f4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4294528b5da1dabd777aa88f621f222f0b0df8f4", "patch": "@@ -34,6 +34,7 @@ use rustc::util::nodemap::NodeSet;\n use syntax::ast::{self, CRATE_NODE_ID, Ident};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n+use syntax_pos::hygiene::SyntaxContext;\n \n use std::cmp;\n use std::mem::replace;\n@@ -491,9 +492,13 @@ struct NamePrivacyVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n-    // Checks that a field is accessible.\n-    fn check_field(&mut self, span: Span, def: &'tcx ty::AdtDef, field: &'tcx ty::FieldDef) {\n-        let ident = Ident { ctxt: span.ctxt().modern(), ..keywords::Invalid.ident() };\n+    // Checks that a field in a struct constructor (expression or pattern) is accessible.\n+    fn check_field(&mut self,\n+                   use_ctxt: SyntaxContext, // Syntax context of the field name at the use site\n+                   span: Span, // Span of the field pattern, e.g. `x: 0`\n+                   def: &'tcx ty::AdtDef, // Definition of the struct or enum\n+                   field: &'tcx ty::FieldDef) { // Definition of the field\n+        let ident = Ident { ctxt: use_ctxt.modern(), ..keywords::Invalid.ident() };\n         let def_id = self.tcx.adjust_ident(ident, def.did, self.current_item).1;\n         if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {\n             struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of {} `{}` is private\",\n@@ -566,12 +571,17 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                     // unmentioned fields, just check them all.\n                     for variant_field in &variant.fields {\n                         let field = fields.iter().find(|f| f.name.node == variant_field.name);\n-                        let span = if let Some(f) = field { f.span } else { base.span };\n-                        self.check_field(span, adt, variant_field);\n+                        let (use_ctxt, span) = match field {\n+                            Some(field) => (field.name.node.to_ident().ctxt, field.span),\n+                            None => (base.span.ctxt(), base.span),\n+                        };\n+                        self.check_field(use_ctxt, span, adt, variant_field);\n                     }\n                 } else {\n                     for field in fields {\n-                        self.check_field(field.span, adt, variant.field_named(field.name.node));\n+                        let use_ctxt = field.name.node.to_ident().ctxt;\n+                        let field_def = variant.field_named(field.name.node);\n+                        self.check_field(use_ctxt, field.span, adt, field_def);\n                     }\n                 }\n             }\n@@ -588,7 +598,9 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                 let adt = self.tables.pat_ty(pat).ty_adt_def().unwrap();\n                 let variant = adt.variant_of_def(def);\n                 for field in fields {\n-                    self.check_field(field.span, adt, variant.field_named(field.node.name));\n+                    let use_ctxt = field.node.name.to_ident().ctxt;\n+                    let field_def = variant.field_named(field.node.name);\n+                    self.check_field(use_ctxt, field.span, adt, field_def);\n                 }\n             }\n             _ => {}"}]}