{"sha": "a2902ebe578c2b116d74b946f53ddfc6c1416cae", "node_id": "C_kwDOAAsO6NoAKGEyOTAyZWJlNTc4YzJiMTE2ZDc0Yjk0NmY1M2RkZmM2YzE0MTZjYWU", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-04-11T18:43:21Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-04-11T19:14:18Z"}, "message": "impl const Default for Box<[T]> and Box<str>", "tree": {"sha": "1fd22619d7cfcb3b99555d0f87b60af518df75f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd22619d7cfcb3b99555d0f87b60af518df75f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2902ebe578c2b116d74b946f53ddfc6c1416cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2902ebe578c2b116d74b946f53ddfc6c1416cae", "html_url": "https://github.com/rust-lang/rust/commit/a2902ebe578c2b116d74b946f53ddfc6c1416cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2902ebe578c2b116d74b946f53ddfc6c1416cae/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625e4dd13a3abd0cc59807af66c3c4cd63440852", "url": "https://api.github.com/repos/rust-lang/rust/commits/625e4dd13a3abd0cc59807af66c3c4cd63440852", "html_url": "https://github.com/rust-lang/rust/commit/625e4dd13a3abd0cc59807af66c3c4cd63440852"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "639e7f213eaae253ccd4d88d1cb3816aec3cc7a5", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2902ebe578c2b116d74b946f53ddfc6c1416cae/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2902ebe578c2b116d74b946f53ddfc6c1416cae/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=a2902ebe578c2b116d74b946f53ddfc6c1416cae", "patch": "@@ -1192,17 +1192,25 @@ impl<T: Default> Default for Box<T> {\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Box<[T]> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Box<[T]> {\n     fn default() -> Self {\n-        Box::<[T; 0]>::new([])\n+        let ptr: Unique<[T]> = Unique::<[T; 0]>::dangling();\n+        Box(ptr, Global)\n     }\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n-impl Default for Box<str> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for Box<str> {\n     fn default() -> Self {\n-        unsafe { from_boxed_utf8_unchecked(Default::default()) }\n+        // SAFETY: This is the same as `Unique::cast<U>` but with an unsized `U = str`.\n+        let ptr: Unique<str> = unsafe {\n+            let bytes: Unique<[u8]> = Unique::<[u8; 0]>::dangling();\n+            Unique::new_unchecked(bytes.as_ptr() as *mut str)\n+        };\n+        Box(ptr, Global)\n     }\n }\n "}, {"sha": "49b837becbcd89fd74a8c8bebddf7d7580bf5277", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2902ebe578c2b116d74b946f53ddfc6c1416cae/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2902ebe578c2b116d74b946f53ddfc6c1416cae/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=a2902ebe578c2b116d74b946f53ddfc6c1416cae", "patch": "@@ -6,6 +6,9 @@ pub const MY_VEC2: Vec<usize> = Default::default();\n pub const MY_STRING: String = String::new();\n pub const MY_STRING2: String = Default::default();\n \n+pub const MY_BOXED_SLICE: Box<[usize]> = Default::default();\n+pub const MY_BOXED_STR: Box<str> = Default::default();\n+\n use std::collections::{BTreeMap, BTreeSet};\n \n pub const MY_BTREEMAP: BTreeMap<usize, usize> = BTreeMap::new();\n@@ -23,6 +26,9 @@ fn test_const() {\n     assert_eq!(MY_VEC, MY_VEC2);\n     assert_eq!(MY_STRING, MY_STRING2);\n \n+    assert_eq!(MY_VEC, *MY_BOXED_SLICE);\n+    assert_eq!(MY_STRING, *MY_BOXED_STR);\n+\n     assert_eq!(MAP_LEN, 0);\n     assert_eq!(SET_LEN, 0);\n     assert!(MAP_IS_EMPTY && SET_IS_EMPTY);"}]}