{"sha": "7a752788367d06e4bc20351e5235bea8c11667b4", "node_id": "C_kwDOAAsO6NoAKDdhNzUyNzg4MzY3ZDA2ZTRiYzIwMzUxZTUyMzViZWE4YzExNjY3YjQ", "commit": {"author": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2023-02-03T09:23:37Z"}, "committer": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2023-02-05T14:33:10Z"}, "message": "Recover from missing expression in for loop", "tree": {"sha": "7cbf882a69b6dfc746236d1b4c736b8c24251f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cbf882a69b6dfc746236d1b4c736b8c24251f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a752788367d06e4bc20351e5235bea8c11667b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a752788367d06e4bc20351e5235bea8c11667b4", "html_url": "https://github.com/rust-lang/rust/commit/7a752788367d06e4bc20351e5235bea8c11667b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a752788367d06e4bc20351e5235bea8c11667b4/comments", "author": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f97aeaf73047268299ab55288b3dd886130be47", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f97aeaf73047268299ab55288b3dd886130be47", "html_url": "https://github.com/rust-lang/rust/commit/7f97aeaf73047268299ab55288b3dd886130be47"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "2ef3dba557ea5f32ca4891395c56aea0a7237b64", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a752788367d06e4bc20351e5235bea8c11667b4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7a752788367d06e4bc20351e5235bea8c11667b4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=7a752788367d06e4bc20351e5235bea8c11667b4", "patch": "@@ -128,6 +128,9 @@ parse_missing_in_in_for_loop = missing `in` in `for` loop\n     .use_in_not_of = try using `in` here instead\n     .add_in = try adding `in` here\n \n+parse_missing_expression_in_for_loop = missing expression to iterate on in `for` loop\n+    .suggestion = try adding an expression to the `for` loop\n+\n parse_missing_comma_after_match_arm = expected `,` following `match` arm\n     .suggestion = missing a comma here to end this `match` arm\n "}, {"sha": "fc7c839f1c461f4033e4aee2c43b85b1ef96bde1", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a752788367d06e4bc20351e5235bea8c11667b4/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a752788367d06e4bc20351e5235bea8c11667b4/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=7a752788367d06e4bc20351e5235bea8c11667b4", "patch": "@@ -433,6 +433,18 @@ pub(crate) enum MissingInInForLoopSub {\n     AddIn(#[primary_span] Span),\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_missing_expression_in_for_loop)]\n+pub(crate) struct MissingExpressionInForLoop {\n+    #[primary_span]\n+    #[suggestion(\n+        code = \"/* expression */ \",\n+        applicability = \"has-placeholders\",\n+        style = \"verbose\"\n+    )]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_missing_comma_after_match_arm)]\n pub(crate) struct MissingCommaAfterMatchArm {"}, {"sha": "c37808f8c3d19b244e01abe806ef5f50e59ccba9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a752788367d06e4bc20351e5235bea8c11667b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a752788367d06e4bc20351e5235bea8c11667b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7a752788367d06e4bc20351e5235bea8c11667b4", "patch": "@@ -2471,6 +2471,21 @@ impl<'a> Parser<'a> {\n \n         let pat = self.recover_parens_around_for_head(pat, begin_paren);\n \n+        // Recover from missing expression in `for` loop\n+        if matches!(expr.kind, ExprKind::Block(..))\n+            && !matches!(self.token.kind, token::OpenDelim(token::Delimiter::Brace))\n+            && self.may_recover()\n+        {\n+            self.sess\n+                .emit_err(errors::MissingExpressionInForLoop { span: expr.span.shrink_to_lo() });\n+            let err_expr = self.mk_expr(expr.span, ExprKind::Err);\n+            let block = self.mk_block(vec![], BlockCheckMode::Default, self.prev_token.span);\n+            return Ok(self.mk_expr(\n+                lo.to(self.prev_token.span),\n+                ExprKind::ForLoop(pat, err_expr, block, opt_label),\n+            ));\n+        }\n+\n         let (attrs, loop_block) = self.parse_inner_attrs_and_block()?;\n \n         let kind = ExprKind::ForLoop(pat, expr, loop_block, opt_label);"}]}