{"sha": "e154687f579f63b487a10c1028a675266dd9e764", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTQ2ODdmNTc5ZjYzYjQ4N2ExMGMxMDI4YTY3NTI2NmRkOWU3NjQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-02T11:41:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-02T11:43:52Z"}, "message": "add a encoding version to the actual metadata\n\npreviously, only .so files included a metadata encoding version, *outside*\nof the zlib compressed area. This adds an encoding version inside the metadata\nitself, in both .so and .rlib files.\n\nFixes #33778.", "tree": {"sha": "c1c102d6818b0b183385d604b9db1a0a85b06d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c102d6818b0b183385d604b9db1a0a85b06d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e154687f579f63b487a10c1028a675266dd9e764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e154687f579f63b487a10c1028a675266dd9e764", "html_url": "https://github.com/rust-lang/rust/commit/e154687f579f63b487a10c1028a675266dd9e764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e154687f579f63b487a10c1028a675266dd9e764/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20", "html_url": "https://github.com/rust-lang/rust/commit/0b36fff4d7c0f1d314e4e550bbb8e023bb33ba20"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "774d0f7ea188608820c21df7a014c87ecdac6cfb", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e154687f579f63b487a10c1028a675266dd9e764/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e154687f579f63b487a10c1028a675266dd9e764/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=e154687f579f63b487a10c1028a675266dd9e764", "patch": "@@ -15,6 +15,7 @@\n \n pub use self::MetadataBlob::*;\n \n+use common;\n use creader;\n use decoder;\n use index;\n@@ -328,20 +329,25 @@ impl CrateMetadata {\n }\n \n impl MetadataBlob {\n-    pub fn as_slice<'a>(&'a self) -> &'a [u8] {\n-        let slice = match *self {\n+    pub fn as_slice_raw<'a>(&'a self) -> &'a [u8] {\n+        match *self {\n             MetadataVec(ref vec) => &vec[..],\n             MetadataArchive(ref ar) => ar.as_slice(),\n-        };\n-        if slice.len() < 4 {\n+        }\n+    }\n+\n+    pub fn as_slice<'a>(&'a self) -> &'a [u8] {\n+        let slice = self.as_slice_raw();\n+        let len_offset = 4 + common::metadata_encoding_version.len();\n+        if slice.len() < len_offset+4 {\n             &[] // corrupt metadata\n         } else {\n-            let len = (((slice[0] as u32) << 24) |\n-                       ((slice[1] as u32) << 16) |\n-                       ((slice[2] as u32) << 8) |\n-                       ((slice[3] as u32) << 0)) as usize;\n-            if len + 4 <= slice.len() {\n-                &slice[4.. len + 4]\n+            let len = (((slice[len_offset+0] as u32) << 24) |\n+                       ((slice[len_offset+1] as u32) << 16) |\n+                       ((slice[len_offset+2] as u32) << 8) |\n+                       ((slice[len_offset+3] as u32) << 0)) as usize;\n+            if len <= slice.len() - 4 - len_offset {\n+                &slice[len_offset + 4..len_offset + len + 4]\n             } else {\n                 &[] // corrupt or old metadata\n             }"}, {"sha": "b6f49569958d68189effffc864b47396c1029410", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e154687f579f63b487a10c1028a675266dd9e764/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e154687f579f63b487a10c1028a675266dd9e764/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e154687f579f63b487a10c1028a675266dd9e764", "patch": "@@ -1832,12 +1832,25 @@ pub fn encode_metadata(ecx: EncodeContext, krate: &hir::Crate) -> Vec<u8> {\n     // the length of the metadata to the start of the metadata. Later on this\n     // will allow us to slice the metadata to the precise length that we just\n     // generated regardless of trailing bytes that end up in it.\n-    let len = v.len() as u32;\n-    v.insert(0, (len >>  0) as u8);\n-    v.insert(0, (len >>  8) as u8);\n-    v.insert(0, (len >> 16) as u8);\n-    v.insert(0, (len >> 24) as u8);\n-    return v;\n+    //\n+    // We also need to store the metadata encoding version here, because\n+    // rlibs don't have it. To get older versions of rustc to ignore\n+    // this metadata, there are 4 zero bytes at the start, which are\n+    // treated as a length of 0 by old compilers.\n+\n+    let len = v.len();\n+    let mut result = vec![];\n+    result.push(0);\n+    result.push(0);\n+    result.push(0);\n+    result.push(0);\n+    result.extend(metadata_encoding_version.iter().cloned());\n+    result.push((len >> 24) as u8);\n+    result.push((len >> 16) as u8);\n+    result.push((len >>  8) as u8);\n+    result.push((len >>  0) as u8);\n+    result.extend(v);\n+    result\n }\n \n fn encode_metadata_inner(rbml_w: &mut Encoder,"}, {"sha": "edfdbf2aeefa8ab201bc9b8a724723e56d9279ba", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e154687f579f63b487a10c1028a675266dd9e764/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e154687f579f63b487a10c1028a675266dd9e764/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=e154687f579f63b487a10c1028a675266dd9e764", "patch": "@@ -767,6 +767,21 @@ impl ArchiveMetadata {\n     pub fn as_slice<'a>(&'a self) -> &'a [u8] { unsafe { &*self.data } }\n }\n \n+fn verify_decompressed_encoding_version(blob: &MetadataBlob, filename: &Path)\n+                                        -> Result<(), String>\n+{\n+    let data = blob.as_slice_raw();\n+    if data.len() < 4+metadata_encoding_version.len() ||\n+        !<[u8]>::eq(&data[..4], &[0, 0, 0, 0]) ||\n+        &data[4..4+metadata_encoding_version.len()] != metadata_encoding_version\n+    {\n+        Err((format!(\"incompatible metadata version found: '{}'\",\n+                     filename.display())))\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n // Just a small wrapper to time how long reading metadata takes.\n fn get_metadata_section(target: &Target, flavor: CrateFlavor, filename: &Path)\n                         -> Result<MetadataBlob, String> {\n@@ -797,7 +812,10 @@ fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Pat\n         return match ArchiveMetadata::new(archive).map(|ar| MetadataArchive(ar)) {\n             None => Err(format!(\"failed to read rlib metadata: '{}'\",\n                                 filename.display())),\n-            Some(blob) => Ok(blob)\n+            Some(blob) => {\n+                try!(verify_decompressed_encoding_version(&blob, filename));\n+                Ok(blob)\n+            }\n         };\n     }\n     unsafe {\n@@ -842,7 +860,11 @@ fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Pat\n                        csz - vlen);\n                 let bytes = slice::from_raw_parts(cvbuf1, csz - vlen);\n                 match flate::inflate_bytes(bytes) {\n-                    Ok(inflated) => return Ok(MetadataVec(inflated)),\n+                    Ok(inflated) => {\n+                        let blob = MetadataVec(inflated);\n+                        try!(verify_decompressed_encoding_version(&blob, filename));\n+                        return Ok(blob);\n+                    }\n                     Err(_) => {}\n                 }\n             }"}]}