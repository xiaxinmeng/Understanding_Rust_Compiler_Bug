{"sha": "44180c8f2b1f12927c00fd5659a4dc5c04436a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTgwYzhmMmIxZjEyOTI3YzAwZmQ1NjU5YTRkYzVjMDQ0MzZhOWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-18T00:13:36Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-23T21:21:43Z"}, "message": "Add an option to the parser so cfg'ed out modules can still be parsed", "tree": {"sha": "92a12df644ca3b83f5c0cf318bff8fa445411317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a12df644ca3b83f5c0cf318bff8fa445411317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44180c8f2b1f12927c00fd5659a4dc5c04436a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44180c8f2b1f12927c00fd5659a4dc5c04436a9d", "html_url": "https://github.com/rust-lang/rust/commit/44180c8f2b1f12927c00fd5659a4dc5c04436a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44180c8f2b1f12927c00fd5659a4dc5c04436a9d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfe5c0281df677048decf41c46d28b872c19d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfe5c0281df677048decf41c46d28b872c19d7f", "html_url": "https://github.com/rust-lang/rust/commit/7bfe5c0281df677048decf41c46d28b872c19d7f"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "766e0512bdcd189d73a7da3a81c83c58aa17462d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44180c8f2b1f12927c00fd5659a4dc5c04436a9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44180c8f2b1f12927c00fd5659a4dc5c04436a9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=44180c8f2b1f12927c00fd5659a4dc5c04436a9d", "patch": "@@ -183,6 +183,8 @@ pub struct Parser<'a> {\n     pub expected_tokens: Vec<TokenType>,\n     pub tts: Vec<(TokenTree, usize)>,\n     pub desugar_doc_comments: bool,\n+    /// Whether we should configure out of line modules as we parse.\n+    pub cfg_mods: bool,\n }\n \n #[derive(PartialEq, Eq, Clone)]\n@@ -273,6 +275,7 @@ impl<'a> Parser<'a> {\n             expected_tokens: Vec::new(),\n             tts: if tt.len() > 0 { vec![(tt, 0)] } else { Vec::new() },\n             desugar_doc_comments: desugar_doc_comments,\n+            cfg_mods: true,\n         };\n \n         let tok = parser.next_tok();\n@@ -5210,7 +5213,7 @@ impl<'a> Parser<'a> {\n                 features: None, // don't perform gated feature checking\n             };\n             let outer_attrs = strip_unconfigured.process_cfg_attrs(outer_attrs.to_owned());\n-            (strip_unconfigured.in_cfg(&outer_attrs), outer_attrs)\n+            (!self.cfg_mods || strip_unconfigured.in_cfg(&outer_attrs), outer_attrs)\n         };\n \n         let id_span = self.span;\n@@ -5396,6 +5399,7 @@ impl<'a> Parser<'a> {\n \n         let mut p0 =\n             new_sub_parser_from_file(self.sess, &path, directory_ownership, Some(name), id_sp);\n+        p0.cfg_mods = self.cfg_mods;\n         let mod_inner_lo = p0.span.lo;\n         let mod_attrs = p0.parse_inner_attributes()?;\n         let m0 = p0.parse_mod_items(&token::Eof, mod_inner_lo)?;"}]}