{"sha": "4a3a249cb6de64d0d669c249185d469a040ac353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhM2EyNDljYjZkZTY0ZDBkNjY5YzI0OTE4NWQ0NjlhMDQwYWMzNTM=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-02T01:34:49Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-02T01:34:49Z"}, "message": "Merge remote-tracking branch 'upstream/master' into sync-from-rust", "tree": {"sha": "d65f53aac75be78b2c7a1652b50af58ff6e7c3cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d65f53aac75be78b2c7a1652b50af58ff6e7c3cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3a249cb6de64d0d669c249185d469a040ac353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3a249cb6de64d0d669c249185d469a040ac353", "html_url": "https://github.com/rust-lang/rust/commit/4a3a249cb6de64d0d669c249185d469a040ac353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3a249cb6de64d0d669c249185d469a040ac353/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a18963f28f8e190b89e4b1237e9ff7e25852771", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a18963f28f8e190b89e4b1237e9ff7e25852771", "html_url": "https://github.com/rust-lang/rust/commit/8a18963f28f8e190b89e4b1237e9ff7e25852771"}, {"sha": "e298c830af37e48a7778b3e6a487a2107230e8a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e298c830af37e48a7778b3e6a487a2107230e8a6", "html_url": "https://github.com/rust-lang/rust/commit/e298c830af37e48a7778b3e6a487a2107230e8a6"}], "stats": {"total": 1491, "additions": 1215, "deletions": 276}, "files": [{"sha": "6ff189fc85926e61a2349bc3e6bc5fe370738204", "filename": ".github/driver.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdriver.sh?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -24,16 +24,16 @@ unset CARGO_MANIFEST_DIR\n # FIXME: How to match the clippy invocation in compile-test.rs?\n ./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/double_neg.rs 2>double_neg.stderr && exit 1\n sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" double_neg.stderr >normalized.stderr\n-diff normalized.stderr tests/ui/double_neg.stderr\n+diff -u normalized.stderr tests/ui/double_neg.stderr\n \n # make sure \"clippy-driver --rustc --arg\" and \"rustc --arg\" behave the same\n SYSROOT=$(rustc --print sysroot)\n-diff <(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver --rustc --version --verbose) <(rustc --version --verbose)\n+diff -u <(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver --rustc --version --verbose) <(rustc --version --verbose)\n \n echo \"fn main() {}\" >target/driver_test.rs\n # we can't run 2 rustcs on the same file at the same time\n CLIPPY=$(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver ./target/driver_test.rs --rustc)\n RUSTC=$(rustc ./target/driver_test.rs)\n-diff <($CLIPPY) <($RUSTC)\n+diff -u <($CLIPPY) <($RUSTC)\n \n # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR"}, {"sha": "6b63dbb7eff54d7fd13a33ee4cd88e6250d4aa26", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1665,6 +1665,7 @@ Released 2018-09-13\n [`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n+[`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n@@ -1802,6 +1803,7 @@ Released 2018-09-13\n [`manual_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n+[`map_collect_result_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_collect_result_unit\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_err_ignore`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten"}, {"sha": "a8e2123656e97a478269ad68d88e8bd4ca0077e0", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -63,9 +63,10 @@ To figure out how this syntax structure is encoded in the AST, it is recommended\n Usually the lint will end up to be a nested series of matches and ifs, [like so][deep-nesting].\n But we can make it nest-less by using [if_chain] macro, [like this][nest-less].\n \n-[`E-medium`] issues are generally pretty easy too, though it's recommended you work on an E-easy issue first.\n-They are mostly classified as [`E-medium`], since they might be somewhat involved code wise,\n-but not difficult per-se.\n+[`E-medium`] issues are generally pretty easy too, though it's recommended you work on an [`good first issue`]\n+first. Sometimes they are only somewhat involved code wise, but not difficult per-se.\n+Note that [`E-medium`] issues may require some knowledge of Clippy internals or some \n+debugging to find the actual problem behind the issue. \n \n [`T-middle`] issues can be more involved and require verifying types. The [`ty`] module contains a\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of"}, {"sha": "9d9e836cc08a2f5e420dae848f8fe77aabcb40d5", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -11,7 +11,7 @@ use std::path::PathBuf;\n // code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n pub fn run(rustc_path: Option<&str>) {\n-    // we can unwrap here because the arg is required here\n+    // we can unwrap here because the arg is required by clap\n     let rustc_path = PathBuf::from(rustc_path.unwrap());\n     assert!(rustc_path.is_dir(), \"path is not a directory\");\n     let rustc_source_basedir = rustc_path.join(\"compiler\");\n@@ -49,6 +49,15 @@ fn inject_deps_into_manifest(\n     cargo_toml: &str,\n     lib_rs: &str,\n ) -> std::io::Result<()> {\n+    // do not inject deps if we have aleady done so\n+    if cargo_toml.contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\") {\n+        eprintln!(\n+            \"cargo dev ra-setup: warning: deps already found inside {}, doing nothing.\",\n+            manifest_path\n+        );\n+        return Ok(());\n+    }\n+\n     let extern_crates = lib_rs\n         .lines()\n         // get the deps"}, {"sha": "9861d8cfc4e5f4146e7101d57fbea558b2d9c081", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -88,9 +88,28 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n \n                 let (l_ty, r_ty) = (cx.typeck_results().expr_ty(l), cx.typeck_results().expr_ty(r));\n                 if l_ty.peel_refs().is_integral() && r_ty.peel_refs().is_integral() {\n-                    span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                    self.expr_span = Some(expr.span);\n-                } else if l_ty.peel_refs().is_floating_point() && r_ty.peel_refs().is_floating_point() {\n+                    match op.node {\n+                        hir::BinOpKind::Div | hir::BinOpKind::Rem => match &r.kind {\n+                            hir::ExprKind::Lit(_lit) => (),\n+                            hir::ExprKind::Unary(hir::UnOp::UnNeg, expr) => {\n+                                if let hir::ExprKind::Lit(lit) = &expr.kind {\n+                                    if let rustc_ast::ast::LitKind::Int(1, _) = lit.node {\n+                                        span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n+                                        self.expr_span = Some(expr.span);\n+                                    }\n+                                }\n+                            },\n+                            _ => {\n+                                span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n+                                self.expr_span = Some(expr.span);\n+                            },\n+                        },\n+                        _ => {\n+                            span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n+                            self.expr_span = Some(expr.span);\n+                        },\n+                    }\n+                } else if r_ty.peel_refs().is_floating_point() && r_ty.peel_refs().is_floating_point() {\n                     span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n                     self.expr_span = Some(expr.span);\n                 }"}, {"sha": "71a30d1c33d4f385bfd918058ede1a3df2fd4049", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "8998fae09de31f38b50d79b48e8fab933bf3b63e", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -2,7 +2,8 @@\n \n use crate::utils::span_lint;\n use rustc_ast::ast::{Block, ItemKind, StmtKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -53,7 +54,7 @@ declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if item.span.from_expansion() {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n \n@@ -67,7 +68,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if it.span.from_expansion() {\n+                if in_external_macro(cx.sess(), it.span) {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.kind {"}, {"sha": "8e2f03d6e4e91641cfd93e22e75f958d10413c03", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -68,7 +68,44 @@ declare_clippy_lint! {\n     \"traits or impls with a public `len` method but no corresponding `is_empty` method\"\n }\n \n-declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for comparing to an empty slice such as \"\" or [],`\n+    /// and suggests using `.is_empty()` where applicable.\n+    ///\n+    /// **Why is this bad?** Some structures can answer `.is_empty()` much faster\n+    /// than checking for equality. So it is good to get into the habit of using\n+    /// `.is_empty()`, and having it is cheap.\n+    /// Besides, it makes the intent clearer than a manual comparison in some contexts.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```ignore\n+    /// if s == \"\" {\n+    ///     ..\n+    /// }\n+    ///\n+    /// if arr == [] {\n+    ///     ..\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```ignore\n+    /// if s.is_empty() {\n+    ///     ..\n+    /// }\n+    ///\n+    /// if arr.is_empty() {\n+    ///     ..\n+    /// }\n+    /// ```\n+    pub COMPARISON_TO_EMPTY,\n+    style,\n+    \"checking `x == \\\"\\\"` or `x == []` (or similar) when `.is_empty()` could be used instead\"\n+}\n+\n+declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY, COMPARISON_TO_EMPTY]);\n \n impl<'tcx> LateLintPass<'tcx> for LenZero {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n@@ -221,6 +258,8 @@ fn check_cmp(cx: &LateContext<'_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>\n         }\n \n         check_len(cx, span, method_path.ident.name, args, &lit.node, op, compare_to)\n+    } else {\n+        check_empty_expr(cx, span, method, lit, op)\n     }\n }\n \n@@ -258,6 +297,42 @@ fn check_len(\n     }\n }\n \n+fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Expr<'_>, op: &str) {\n+    if (is_empty_array(lit2) || is_empty_string(lit2)) && has_is_empty(cx, lit1) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            COMPARISON_TO_EMPTY,\n+            span,\n+            \"comparison to empty slice\",\n+            &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+            format!(\n+                \"{}{}.is_empty()\",\n+                op,\n+                snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n+    }\n+}\n+\n+fn is_empty_string(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Lit(ref lit) = expr.kind {\n+        if let LitKind::Str(lit, _) = lit.node {\n+            let lit = lit.as_str();\n+            return lit == \"\";\n+        }\n+    }\n+    false\n+}\n+\n+fn is_empty_array(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Array(ref arr) = expr.kind {\n+        return arr.is_empty();\n+    }\n+    false\n+}\n+\n /// Checks if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`."}, {"sha": "5c3af014ee12873b3d92fd5d388e11c5973de44c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -615,6 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &large_const_arrays::LARGE_CONST_ARRAYS,\n         &large_enum_variant::LARGE_ENUM_VARIANT,\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n+        &len_zero::COMPARISON_TO_EMPTY,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n@@ -702,6 +703,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n+        &methods::MAP_COLLECT_RESULT_UNIT,\n         &methods::MAP_FLATTEN,\n         &methods::MAP_UNWRAP_OR,\n         &methods::NEW_RET_NO_SELF,\n@@ -1366,6 +1368,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&int_plus_one::INT_PLUS_ONE),\n         LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n+        LintId::of(&len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n@@ -1427,6 +1430,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n@@ -1592,6 +1596,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&functions::RESULT_UNIT_ERR),\n         LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n+        LintId::of(&len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n@@ -1621,6 +1626,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),"}, {"sha": "3c3093e869c15a9e19d9a0866712edcb51d1f4c9", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 104, "deletions": 43, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -32,8 +32,7 @@ use crate::utils::{\n     is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n     match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks, return_ty,\n     single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth,\n-    SpanlessEq,\n+    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1349,6 +1348,27 @@ declare_clippy_lint! {\n     \"using unnecessary lazy evaluation, which can be replaced with simpler eager evaluation\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(),_>()`.\n+    ///\n+    /// **Why is this bad?** Using `try_for_each` instead is more readable and idiomatic.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// (0..3).map(|t| Err(t)).collect::<Result<(), _>>();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// (0..3).try_for_each(|t| Err(t));\n+    /// ```\n+    pub MAP_COLLECT_RESULT_UNIT,\n+    style,\n+    \"using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1398,6 +1418,7 @@ declare_lint_pass!(Methods => [\n     FILETYPE_IS_FILE,\n     OPTION_AS_REF_DEREF,\n     UNNECESSARY_LAZY_EVALUATIONS,\n+    MAP_COLLECT_RESULT_UNIT,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n@@ -1479,6 +1500,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n+            [\"collect\", \"map\"] => lint_map_collect(cx, expr, arg_lists[1], arg_lists[0]),\n             _ => {},\n         }\n \n@@ -1712,7 +1734,7 @@ fn lint_or_fun_call<'tcx>(\n                     \"try this\",\n                     format!(\n                         \"{}.unwrap_or_default()\",\n-                        snippet_with_applicability(cx, self_expr.span, \"_\", &mut applicability)\n+                        snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability)\n                     ),\n                     applicability,\n                 );\n@@ -2119,7 +2141,7 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::\n             return;\n         };\n \n-        let snippet = snippet_with_macro_callsite(cx, arg.span, \"_\");\n+        let snippet = snippet_with_macro_callsite(cx, arg.span, \"..\");\n \n         span_lint_and_sugg(\n             cx,\n@@ -2155,9 +2177,9 @@ fn lint_string_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::E\n             \"try this\",\n             format!(\n                 \"{}.push_str({}{})\",\n-                snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability),\n+                snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability),\n                 ref_str,\n-                snippet_with_applicability(cx, target.span, \"_\", &mut applicability)\n+                snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n             ),\n             applicability,\n         );\n@@ -2404,7 +2426,7 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n     let mut applicability = Applicability::MachineApplicable;\n     let expr_ty = cx.typeck_results().expr_ty(&get_args[0]);\n     let get_args_str = if get_args.len() > 1 {\n-        snippet_with_applicability(cx, get_args[1].span, \"_\", &mut applicability)\n+        snippet_with_applicability(cx, get_args[1].span, \"..\", &mut applicability)\n     } else {\n         return; // not linting on a .get().unwrap() chain or variant\n     };\n@@ -2464,7 +2486,7 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n         format!(\n             \"{}{}[{}]\",\n             borrow_str,\n-            snippet_with_applicability(cx, get_args[0].span, \"_\", &mut applicability),\n+            snippet_with_applicability(cx, get_args[0].span, \"..\", &mut applicability),\n             get_args_str\n         ),\n         applicability,\n@@ -2480,7 +2502,7 @@ fn lint_iter_skip_next(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[\n                 cx,\n                 ITER_SKIP_NEXT,\n                 expr.span.trim_start(caller.span).unwrap(),\n-                \"called `skip(x).next()` on an iterator\",\n+                \"called `skip(..).next()` on an iterator\",\n                 \"use `nth` instead\",\n                 hint,\n                 Applicability::MachineApplicable,\n@@ -2683,11 +2705,11 @@ fn lint_map_unwrap_or_else<'tcx>(\n \n         // lint message\n         let msg = if is_option {\n-            \"called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling \\\n-            `map_or_else(g, f)` instead\"\n+            \"called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling \\\n+            `map_or_else(<g>, <f>)` instead\"\n         } else {\n-            \"called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling \\\n-            `.map_or_else(g, f)` instead\"\n+            \"called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling \\\n+            `.map_or_else(<g>, <f>)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n@@ -2697,16 +2719,15 @@ fn lint_map_unwrap_or_else<'tcx>(\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n         let same_span = map_args[1].span.ctxt() == unwrap_args[1].span.ctxt();\n         if same_span && !multiline {\n-            span_lint_and_note(\n+            let var_snippet = snippet(cx, map_args[0].span, \"..\");\n+            span_lint_and_sugg(\n                 cx,\n                 MAP_UNWRAP_OR,\n                 expr.span,\n                 msg,\n-                None,\n-                &format!(\n-                    \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n-                    map_snippet, unwrap_snippet,\n-                ),\n+                \"try this\",\n+                format!(\"{}.map_or_else({}, {})\", var_snippet, unwrap_snippet, map_snippet),\n+                Applicability::MachineApplicable,\n             );\n             return true;\n         } else if same_span && multiline {\n@@ -2753,8 +2774,8 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n         if is_option {\n             let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n             let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n-                       `and_then(f)` instead\";\n+            let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n+                       `and_then(..)` instead\";\n             (\n                 OPTION_MAP_OR_NONE,\n                 msg,\n@@ -2792,18 +2813,20 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n fn lint_filter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.filter().next()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find(p)` instead.\";\n+        let msg = \"called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n+                   `.find(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n+            let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n             // add note if not multi-line\n-            span_lint_and_note(\n+            span_lint_and_sugg(\n                 cx,\n                 FILTER_NEXT,\n                 expr.span,\n                 msg,\n-                None,\n-                &format!(\"replace `filter({0}).next()` with `find({0})`\", filter_snippet),\n+                \"try this\",\n+                format!(\"{}.find({})\", iter_snippet, filter_snippet),\n+                Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint(cx, FILTER_NEXT, expr.span, msg);\n@@ -2823,9 +2846,9 @@ fn lint_skip_while_next<'tcx>(\n             cx,\n             SKIP_WHILE_NEXT,\n             expr.span,\n-            \"called `skip_while(p).next()` on an `Iterator`\",\n+            \"called `skip_while(<p>).next()` on an `Iterator`\",\n             None,\n-            \"this is more succinctly expressed by calling `.find(!p)` instead\",\n+            \"this is more succinctly expressed by calling `.find(!<p>)` instead\",\n         );\n     }\n }\n@@ -2839,7 +2862,7 @@ fn lint_filter_map<'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n+        let msg = \"called `filter(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n@@ -2848,17 +2871,19 @@ fn lint_filter_map<'tcx>(\n /// lint use of `filter_map().next()` for `Iterators`\n fn lint_filter_map_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find_map(p)` instead.\";\n+        let msg = \"called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n+                   `.find_map(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n-            span_lint_and_note(\n+            let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n+            span_lint_and_sugg(\n                 cx,\n                 FILTER_MAP_NEXT,\n                 expr.span,\n                 msg,\n-                None,\n-                &format!(\"replace `filter_map({0}).next()` with `find_map({0})`\", filter_snippet),\n+                \"try this\",\n+                format!(\"{}.find_map({})\", iter_snippet, filter_snippet),\n+                Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint(cx, FILTER_MAP_NEXT, expr.span, msg);\n@@ -2875,7 +2900,7 @@ fn lint_find_map<'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n-        let msg = \"called `find(p).map(q)` on an `Iterator`\";\n+        let msg = \"called `find(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n         span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n     }\n@@ -2890,7 +2915,7 @@ fn lint_filter_map_map<'tcx>(\n ) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n+        let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n@@ -2905,7 +2930,7 @@ fn lint_filter_flat_map<'tcx>(\n ) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n+        let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n@@ -2921,7 +2946,7 @@ fn lint_filter_map_flat_map<'tcx>(\n ) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n+        let msg = \"called `filter_map(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n@@ -3092,9 +3117,9 @@ fn lint_chars_cmp(\n                 \"like this\",\n                 format!(\"{}{}.{}({})\",\n                         if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"_\", &mut applicability),\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n                         suggest,\n-                        snippet_with_applicability(cx, arg_char[0].span, \"_\", &mut applicability)),\n+                        snippet_with_applicability(cx, arg_char[0].span, \"..\", &mut applicability)),\n                 applicability,\n             );\n \n@@ -3141,7 +3166,7 @@ fn lint_chars_cmp_with_unwrap<'tcx>(\n                 \"like this\",\n                 format!(\"{}{}.{}('{}')\",\n                         if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"_\", &mut applicability),\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n                         suggest,\n                         c),\n                 applicability,\n@@ -3216,7 +3241,7 @@ fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &h\n fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n-        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n         let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n         span_lint_and_sugg(\n             cx,\n@@ -3259,7 +3284,7 @@ fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_re\n                 expr.span,\n                 &format!(\"this call to `{}` does nothing\", call_name),\n                 \"try this\",\n-                snippet_with_applicability(cx, recvr.span, \"_\", &mut applicability).to_string(),\n+                snippet_with_applicability(cx, recvr.span, \"..\", &mut applicability).to_string(),\n                 applicability,\n             );\n         }\n@@ -3445,6 +3470,42 @@ fn lint_option_as_ref_deref<'tcx>(\n     }\n }\n \n+fn lint_map_collect(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    map_args: &[hir::Expr<'_>],\n+    collect_args: &[hir::Expr<'_>],\n+) {\n+    if_chain! {\n+        // called on Iterator\n+        if let [map_expr] = collect_args;\n+        if match_trait_method(cx, map_expr, &paths::ITERATOR);\n+        // return of collect `Result<(),_>`\n+        let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n+        if is_type_diagnostic_item(cx, collect_ret_ty, sym!(result_type));\n+        if let ty::Adt(_, substs) = collect_ret_ty.kind();\n+        if let Some(result_t) = substs.types().next();\n+        if result_t.is_unit();\n+        // get parts for snippet\n+        if let [iter, map_fn] = map_args;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MAP_COLLECT_RESULT_UNIT,\n+                expr.span,\n+                \"`.map().collect()` can be replaced with `.try_for_each()`\",\n+                \"try this\",\n+                format!(\n+                    \"{}.try_for_each({})\",\n+                    snippet(cx, iter.span, \"..\"),\n+                    snippet(cx, map_fn.span, \"..\")\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n /// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n     match ty.kind() {"}, {"sha": "d30b85d6a78173677c1a4fd97f9b7e2acd889502", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -53,15 +53,15 @@ pub(super) fn lint<'tcx>(\n         // lint message\n         // comparing the snippet from source to raw text (\"None\") below is safe\n         // because we already have checked the type.\n-        let arg = if unwrap_snippet == \"None\" { \"None\" } else { \"a\" };\n+        let arg = if unwrap_snippet == \"None\" { \"None\" } else { \"<a>\" };\n         let unwrap_snippet_none = unwrap_snippet == \"None\";\n         let suggest = if unwrap_snippet_none {\n-            \"and_then(f)\"\n+            \"and_then(<f>)\"\n         } else {\n-            \"map_or(a, f)\"\n+            \"map_or(<a>, <f>)\"\n         };\n         let msg = &format!(\n-            \"called `map(f).unwrap_or({})` on an `Option` value. \\\n+            \"called `map(<f>).unwrap_or({})` on an `Option` value. \\\n             This can be done more directly by calling `{}` instead\",\n             arg, suggest\n         );"}, {"sha": "308e92057b751cecf7f8e2c5f13fb54904c43ec2", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::{\n     StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::DesugaringKind;\n@@ -271,13 +272,16 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         k: FnKind<'tcx>,\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n-        _: Span,\n+        span: Span,\n         _: HirId,\n     ) {\n         if let FnKind::Closure(_) = k {\n             // Does not apply to closures\n             return;\n         }\n+        if in_external_macro(cx.tcx.sess, span) {\n+            return;\n+        }\n         for arg in iter_input_pats(decl, body) {\n             if let PatKind::Binding(BindingAnnotation::Ref | BindingAnnotation::RefMut, ..) = arg.pat.kind {\n                 span_lint(\n@@ -293,13 +297,16 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if_chain! {\n+            if !in_external_macro(cx.tcx.sess, stmt.span);\n             if let StmtKind::Local(ref local) = stmt.kind;\n             if let PatKind::Binding(an, .., name, None) = local.pat.kind;\n             if let Some(ref init) = local.init;\n             if !higher::is_from_for_desugar(local);\n             then {\n                 if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut {\n-                    let sugg_init = if init.span.from_expansion() {\n+                    // use the macro callsite when the init span (but not the whole local span)\n+                    // comes from an expansion like `vec![1, 2, 3]` in `let ref _ = vec![1, 2, 3];`\n+                    let sugg_init = if init.span.from_expansion() && !local.span.from_expansion() {\n                         Sugg::hir_with_macro_callsite(cx, init, \"..\")\n                     } else {\n                         Sugg::hir(cx, init, \"..\")\n@@ -310,7 +317,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                         (\"\", sugg_init.addr())\n                     };\n                     let tyopt = if let Some(ref ty) = local.ty {\n-                        format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"_\"))\n+                        format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"..\"))\n                     } else {\n                         String::new()\n                     };\n@@ -326,7 +333,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                                 \"try\",\n                                 format!(\n                                     \"let {name}{tyopt} = {initref};\",\n-                                    name=snippet(cx, name.span, \"_\"),\n+                                    name=snippet(cx, name.span, \"..\"),\n                                     tyopt=tyopt,\n                                     initref=initref,\n                                 ),"}, {"sha": "344ed02361de959ccf6270fb0d0b2775dc1bd9a7", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -518,7 +518,10 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if ContainsRegion.visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty).is_continue() {\n+                if ContainsRegion\n+                    .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n+                    .is_continue()\n+                {\n                     return;\n                 }\n                 rvalue_locals(other, |rhs| {"}, {"sha": "45f3bc3ea858a8b277ca45ba28a9cade4ede467c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -10,9 +10,9 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Lit, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n-    TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n+    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n+    ImplItem, ImplItemKind, Item, ItemKind, Lifetime, Lit, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt,\n+    StmtKind, SyntheticTyParamKind, TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -678,17 +678,30 @@ impl Types {\n                             // details.\n                             return;\n                         }\n+\n+                        // When trait objects or opaque types have lifetime or auto-trait bounds,\n+                        // we need to add parentheses to avoid a syntax error due to its ambiguity.\n+                        // Originally reported as the issue #3128.\n+                        let inner_snippet = snippet(cx, inner.span, \"..\");\n+                        let suggestion = match &inner.kind {\n+                            TyKind::TraitObject(bounds, lt_bound) if bounds.len() > 1 || !lt_bound.is_elided() => {\n+                                format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            },\n+                            TyKind::Path(qpath)\n+                                if get_bounds_if_impl_trait(cx, qpath, inner.hir_id)\n+                                    .map_or(false, |bounds| bounds.len() > 1) =>\n+                            {\n+                                format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            },\n+                            _ => format!(\"&{}{}\", ltopt, &inner_snippet),\n+                        };\n                         span_lint_and_sugg(\n                             cx,\n                             BORROWED_BOX,\n                             hir_ty.span,\n                             \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n                             \"try\",\n-                            format!(\n-                                \"&{}{}\",\n-                                ltopt,\n-                                &snippet(cx, inner.span, \"..\")\n-                            ),\n+                            suggestion,\n                             // To make this `MachineApplicable`, at least one needs to check if it isn't a trait item\n                             // because the trait impls of it will break otherwise;\n                             // and there may be other cases that result in invalid code.\n@@ -721,6 +734,21 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n     false\n }\n \n+fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n+    if_chain! {\n+        if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n+        if let Some(node) = cx.tcx.hir().get_if_local(did);\n+        if let Node::GenericParam(generic_param) = node;\n+        if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n+        if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n+        then {\n+            Some(generic_param.bounds)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for binding a unit value.\n     ///"}, {"sha": "b1dacfc9c6d28d3428383aa4635447555608bf2d", "filename": "doc/adding_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -311,7 +311,7 @@ Running our UI test should now produce output that contains the lint message.\n According to [the rustc-dev-guide], the text should be matter of fact and avoid\n capitalization and periods, unless multiple sentences are needed.\n When code or an identifier must appear in a message or label, it should be\n-surrounded with single acute accents \\`.\n+surrounded with single grave accents \\`.\n \n [check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html#method.check_fn\n [diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/diagnostics.rs"}, {"sha": "016bda77ef5e22560d3a5486f75a62f52891ce18", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -298,6 +298,13 @@ vec![\n         deprecation: None,\n         module: \"comparison_chain\",\n     },\n+    Lint {\n+        name: \"comparison_to_empty\",\n+        group: \"style\",\n+        desc: \"checking `x == \\\"\\\"` or `x == []` (or similar) when `.is_empty()` could be used instead\",\n+        deprecation: None,\n+        module: \"len_zero\",\n+    },\n     Lint {\n         name: \"copy_iterator\",\n         group: \"pedantic\",\n@@ -1222,6 +1229,13 @@ vec![\n         deprecation: None,\n         module: \"map_clone\",\n     },\n+    Lint {\n+        name: \"map_collect_result_unit\",\n+        group: \"style\",\n+        desc: \"using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"map_entry\",\n         group: \"perf\","}, {"sha": "93303865e178ec0dfb8d24638adfe76ee99c50b3", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -56,3 +56,17 @@ macro_rules! option_env_unwrap_external {\n         option_env!($env).expect($message)\n     };\n }\n+\n+#[macro_export]\n+macro_rules! ref_arg_binding {\n+    () => {\n+        let ref _y = 42;\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! ref_arg_function {\n+    () => {\n+        fn fun_example(ref _x: usize) {}\n+    };\n+}"}, {"sha": "b606f773cfbad1d603b31df22311e3745d02e515", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -3,6 +3,8 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n+use std::fmt::Display;\n+\n pub fn test1(foo: &mut Box<bool>) {\n     // Although this function could be changed to \"&mut bool\",\n     // avoiding the Box, mutable references to boxes are not\n@@ -89,6 +91,20 @@ pub fn test13(boxed_slice: &mut Box<[i32]>) {\n     *boxed_slice = data.into_boxed_slice();\n }\n \n+// The suggestion should include proper parentheses to avoid a syntax error.\n+pub fn test14(_display: &Box<dyn Display>) {}\n+pub fn test15(_display: &Box<dyn Display + Send>) {}\n+pub fn test16<'a>(_display: &'a Box<dyn Display + 'a>) {}\n+\n+pub fn test17(_display: &Box<impl Display>) {}\n+pub fn test18(_display: &Box<impl Display + Send>) {}\n+pub fn test19<'a>(_display: &'a Box<impl Display + 'a>) {}\n+\n+// This exists only to check what happens when parentheses are already present.\n+// Even though the current implementation doesn't put extra parentheses,\n+// it's fine that unnecessary parentheses appear in the future for some reason.\n+pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n+\n fn main() {\n     test1(&mut Box::new(false));\n     test2();"}, {"sha": "3eac32815be3fac2bb13dfa886623da7a91bb85f", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:19:14\n+  --> $DIR/borrow_box.rs:21:14\n    |\n LL |     let foo: &Box<bool>;\n    |              ^^^^^^^^^^ help: try: `&bool`\n@@ -11,16 +11,58 @@ LL | #![deny(clippy::borrowed_box)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:23:10\n+  --> $DIR/borrow_box.rs:25:10\n    |\n LL |     foo: &'a Box<bool>,\n    |          ^^^^^^^^^^^^^ help: try: `&'a bool`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:27:17\n+  --> $DIR/borrow_box.rs:29:17\n    |\n LL |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n-error: aborting due to 3 previous errors\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:95:25\n+   |\n+LL | pub fn test14(_display: &Box<dyn Display>) {}\n+   |                         ^^^^^^^^^^^^^^^^^ help: try: `&dyn Display`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:96:25\n+   |\n+LL | pub fn test15(_display: &Box<dyn Display + Send>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:97:29\n+   |\n+LL | pub fn test16<'a>(_display: &'a Box<dyn Display + 'a>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a (dyn Display + 'a)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:99:25\n+   |\n+LL | pub fn test17(_display: &Box<impl Display>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^ help: try: `&impl Display`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:100:25\n+   |\n+LL | pub fn test18(_display: &Box<impl Display + Send>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(impl Display + Send)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:101:29\n+   |\n+LL | pub fn test19<'a>(_display: &'a Box<impl Display + 'a>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a (impl Display + 'a)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:106:25\n+   |\n+LL | pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "261024caca761127e98274d241fa6e92d03a8ff3", "filename": "tests/ui/comparison_to_empty.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcomparison_to_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcomparison_to_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.fixed?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![warn(clippy::comparison_to_empty)]\n+\n+fn main() {\n+    // Disallow comparisons to empty\n+    let s = String::new();\n+    let _ = s.is_empty();\n+    let _ = !s.is_empty();\n+\n+    let v = vec![0];\n+    let _ = v.is_empty();\n+    let _ = !v.is_empty();\n+\n+    // Allow comparisons to non-empty\n+    let s = String::new();\n+    let _ = s == \" \";\n+    let _ = s != \" \";\n+\n+    let v = vec![0];\n+    let _ = v == [0];\n+    let _ = v != [0];\n+}"}, {"sha": "98ddd974951611f19d4e6af4d1b77752036286b4", "filename": "tests/ui/comparison_to_empty.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcomparison_to_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcomparison_to_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![warn(clippy::comparison_to_empty)]\n+\n+fn main() {\n+    // Disallow comparisons to empty\n+    let s = String::new();\n+    let _ = s == \"\";\n+    let _ = s != \"\";\n+\n+    let v = vec![0];\n+    let _ = v == [];\n+    let _ = v != [];\n+\n+    // Allow comparisons to non-empty\n+    let s = String::new();\n+    let _ = s == \" \";\n+    let _ = s != \" \";\n+\n+    let v = vec![0];\n+    let _ = v == [0];\n+    let _ = v != [0];\n+}"}, {"sha": "f69d6bd5255df81ad45b23b64868537dd6cdb536", "filename": "tests/ui/comparison_to_empty.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcomparison_to_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcomparison_to_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,28 @@\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:8:13\n+   |\n+LL |     let _ = s == \"\";\n+   |             ^^^^^^^ help: using `is_empty` is clearer and more explicit: `s.is_empty()`\n+   |\n+   = note: `-D clippy::comparison-to-empty` implied by `-D warnings`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:9:13\n+   |\n+LL |     let _ = s != \"\";\n+   |             ^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!s.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:12:13\n+   |\n+LL |     let _ = v == [];\n+   |             ^^^^^^^ help: using `is_empty` is clearer and more explicit: `v.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:13:13\n+   |\n+LL |     let _ = v != [];\n+   |             ^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!v.is_empty()`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c33580ff6ab6aa52182c5527b70523b45904550e", "filename": "tests/ui/crashes/ice-6250.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6250.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,16 @@\n+// originally from glacier/fixed/77218.rs\n+// ice while adjusting...\n+\n+pub struct Cache {\n+    data: Vec<i32>,\n+}\n+\n+pub fn list_data(cache: &Cache, key: usize) {\n+    for reference in vec![1, 2, 3] {\n+        if\n+        /* let */\n+        Some(reference) = cache.data.get(key) {\n+            unimplemented!()\n+        }\n+    }\n+}"}, {"sha": "8241dcd8feb7ba1d3a5142a900cc7bcb5ac478d6", "filename": "tests/ui/crashes/ice-6250.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6250.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,27 @@\n+error[E0601]: `main` function not found in crate `ice_6250`\n+  --> $DIR/ice-6250.rs:4:1\n+   |\n+LL | / pub struct Cache {\n+LL | |     data: Vec<i32>,\n+LL | | }\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/ice-6250.rs`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ice-6250.rs:12:9\n+   |\n+LL |         Some(reference) = cache.data.get(key) {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |         let Some(reference) = cache.data.get(key) {\n+   |         ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0601.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "6aa779aaeb3b660a18aaa6acefa9e70790628087", "filename": "tests/ui/crashes/ice-6251.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6251.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,6 @@\n+// originally from glacier/fixed/77329.rs\n+// assertion failed: `(left == right) ; different DefIds\n+\n+fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+    std::iter::empty()\n+}"}, {"sha": "9a7cf4b0919f63bf7ca195bb240852dafd8a6880", "filename": "tests/ui/crashes/ice-6251.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,43 @@\n+error[E0601]: `main` function not found in crate `ice_6251`\n+  --> $DIR/ice-6251.rs:4:1\n+   |\n+LL | / fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+LL | |     std::iter::empty()\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/ice-6251.rs`\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/ice-6251.rs:4:45\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+   |                                             ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |&x: [u8]| x }]> {\n+   |                                             ^\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/ice-6251.rs:4:54\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+   |                                                      ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ice-6251.rs:4:44\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+   |                                            ^^^^^^^^^^^ expected `usize`, found closure\n+   |\n+   = note: expected type `usize`\n+           found closure `[closure@$DIR/ice-6251.rs:4:44: 4:55]`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308, E0601.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "2e3d9fd1e9240ed097512ca6216325968fa4c078", "filename": "tests/ui/crashes/ice-6252.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,15 @@\n+// originally from glacier fixed/77919.rs\n+// encountered errors resolving bounds after type-checking\n+\n+trait TypeVal<T> {\n+    const VAL: T;\n+}\n+struct Five;\n+struct Multiply<N, M> {\n+    _n: PhantomData,\n+}\n+impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+\n+fn main() {\n+    [1; <Multiply<Five, Five>>::VAL];\n+}"}, {"sha": "440973e24398e15a7299e2a7d758b814b1673a12", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,46 @@\n+error[E0412]: cannot find type `PhantomData` in this scope\n+  --> $DIR/ice-6252.rs:9:9\n+   |\n+LL |     _n: PhantomData,\n+   |         ^^^^^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::marker::PhantomData;\n+   |\n+\n+error[E0412]: cannot find type `VAL` in this scope\n+  --> $DIR/ice-6252.rs:11:63\n+   |\n+LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          -                                                    ^^^ not found in this scope\n+   |          |\n+   |          help: you might be missing a type parameter: `, VAL`\n+\n+error[E0046]: not all trait items implemented, missing: `VAL`\n+  --> $DIR/ice-6252.rs:11:1\n+   |\n+LL |     const VAL: T;\n+   |     ------------- `VAL` from trait\n+...\n+LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ice-6252.rs:5:5\n+   |\n+LL |     const VAL: T;\n+   |     ^^^^^^^^^^^^^ no MIR body is available for DefId(0:5 ~ ice_6252[317d]::TypeVal::VAL)\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ice-6252.rs:14:9\n+   |\n+LL |     [1; <Multiply<Five, Five>>::VAL];\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0046, E0080, E0412.\n+For more information about an error, try `rustc --explain E0046`."}, {"sha": "c19eca43884aa41ca412259f971fce4d357504bb", "filename": "tests/ui/crashes/ice-6254.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,15 @@\n+// originally from ./src/test/ui/pattern/usefulness/consts-opaque.rs\n+// panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())',\n+// compiler/rustc_mir_build/src/thir/pattern/_match.rs:2030:5\n+\n+#[derive(PartialEq)]\n+struct Foo(i32);\n+const FOO_REF_REF: &&Foo = &&Foo(42);\n+\n+fn main() {\n+    // This used to cause an ICE (https://github.com/rust-lang/rust/issues/78071)\n+    match FOO_REF_REF {\n+        FOO_REF_REF => {},\n+        Foo(_) => {},\n+    }\n+}"}, {"sha": "95ebf23d81817a9fad386d3d254f5274be17dbef", "filename": "tests/ui/crashes/ice-6254.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,12 @@\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/ice-6254.rs:12:9\n+   |\n+LL |         FOO_REF_REF => {},\n+   |         ^^^^^^^^^^^\n+   |\n+   = note: `-D indirect-structural-match` implied by `-D warnings`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+\n+error: aborting due to previous error\n+"}, {"sha": "bd4a81d98e2e7c8b5a84e5329a2e2927acc83c18", "filename": "tests/ui/crashes/ice-6255.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,15 @@\n+// originally from rustc ./src/test/ui/macros/issue-78325-inconsistent-resolution.rs\n+// inconsistent resolution for a macro\n+\n+macro_rules! define_other_core {\n+    ( ) => {\n+        extern crate std as core;\n+        //~^ ERROR macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+    };\n+}\n+\n+fn main() {\n+    core::panic!();\n+}\n+\n+define_other_core!();"}, {"sha": "d973ea1e23a259951b14e471c63bbee6f58fa3bf", "filename": "tests/ui/crashes/ice-6255.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,13 @@\n+error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+  --> $DIR/ice-6255.rs:6:9\n+   |\n+LL |         extern crate std as core;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | define_other_core!();\n+   | --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f60d45d68a8ee277123ab8f6a07dff260fe7ee7", "filename": "tests/ui/crashes/ice-6256.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,13 @@\n+// originally from rustc ./src/test/ui/regions/issue-78262.rs\n+// ICE: to get the signature of a closure, use substs.as_closure().sig() not fn_sig()\n+\n+trait TT {}\n+\n+impl dyn TT {\n+    fn func(&self) {}\n+}\n+\n+fn main() {\n+    let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n+                                   //[nll]~^ ERROR: borrowed data escapes outside of closure\n+}"}, {"sha": "0e8353a418a87b002465bb435fe828acc664ebb3", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/ice-6256.rs:11:28\n+   |\n+LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n+   |                            ^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&(dyn TT + 'static)`\n+              found reference `&dyn TT`\n+note: the anonymous lifetime #1 defined on the body at 11:13...\n+  --> $DIR/ice-6256.rs:11:13\n+   |\n+LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "dbeb2354309c92bb4a66b2288ab2a7ec7ac905e5", "filename": "tests/ui/filter_map_next.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -3,9 +3,6 @@\n fn main() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n \n-    let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n-    assert_eq!(element, Some(1));\n-\n     #[rustfmt::skip]\n     let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n         .into_iter()"}, {"sha": "45427684d96e1c058ec0c0a25e31e64ed3af2852", "filename": "tests/ui/filter_map_next.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,14 +1,5 @@\n-error: called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(p)` instead.\n-  --> $DIR/filter_map_next.rs:6:32\n-   |\n-LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n-   = note: replace `filter_map(|s| s.parse().ok()).next()` with `find_map(|s| s.parse().ok())`\n-\n-error: called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(p)` instead.\n-  --> $DIR/filter_map_next.rs:10:26\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+  --> $DIR/filter_map_next.rs:7:26\n    |\n LL |       let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n    |  __________________________^\n@@ -19,6 +10,8 @@ LL | |             if x == 2 {\n LL | |         })\n LL | |         .next();\n    | |_______________^\n+   |\n+   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "c3992d7e92cf37c36d0c5568aa3a462bfcd2278b", "filename": "tests/ui/filter_map_next_fixable.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.fixed?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+fn main() {\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+\n+    let element: Option<i32> = a.iter().find_map(|s| s.parse().ok());\n+    assert_eq!(element, Some(1));\n+}"}, {"sha": "447219a96839181630629af538bd834624f0bb51", "filename": "tests/ui/filter_map_next_fixable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+fn main() {\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+\n+    let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+    assert_eq!(element, Some(1));\n+}"}, {"sha": "6c2530e0379e4fded306cb600956b395a3affb42", "filename": "tests/ui/filter_map_next_fixable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_map_next_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,10 @@\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+  --> $DIR/filter_map_next_fixable.rs:8:32\n+   |\n+LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n+   |\n+   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "91718dd11755b75310056c4a60277da2b63e8329", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,4 +1,4 @@\n-error: called `filter(p).map(q)` on an `Iterator`\n+error: called `filter(..).map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:5:21\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n@@ -7,7 +7,7 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n-error: called `filter(p).flat_map(q)` on an `Iterator`\n+error: called `filter(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:7:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -19,7 +19,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: called `filter_map(p).flat_map(q)` on an `Iterator`\n+error: called `filter_map(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:13:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -31,7 +31,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: called `filter_map(p).map(q)` on an `Iterator`\n+error: called `filter_map(..).map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:19:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]"}, {"sha": "aea3cc62afcc41631213bbafca089acc6f9b72b5", "filename": "tests/ui/find_map.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,4 +1,4 @@\n-error: called `find(p).map(q)` on an `Iterator`\n+error: called `find(..).map(..)` on an `Iterator`\n   --> $DIR/find_map.rs:20:26\n    |\n LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n@@ -7,7 +7,7 @@ LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s\n    = note: `-D clippy::find-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.find_map(..)` instead\n \n-error: called `find(p).map(q)` on an `Iterator`\n+error: called `find(..).map(..)` on an `Iterator`\n   --> $DIR/find_map.rs:23:29\n    |\n LL |       let _: Option<Flavor> = desserts_of_the_week"}, {"sha": "b74c93dc4a666d445b8b324de3c32b4f9c641515", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -11,6 +11,8 @@\n #[rustfmt::skip]\n fn main() {\n     let mut i = 1i32;\n+    let mut var1 = 0i32;\n+    let mut var2 = -1i32;\n     1 + i;\n     i * 2;\n     1 %\n@@ -32,7 +34,15 @@ fn main() {\n     i -= 1;\n     i *= 2;\n     i /= 2;\n+    i /= 0;\n+    i /= -1;\n+    i /= var1;\n+    i /= var2;\n     i %= 2;\n+    i %= 0;\n+    i %= -1;\n+    i %= var1;\n+    i %= var2;\n     i <<= 3;\n     i >>= 2;\n "}, {"sha": "add3b6b90fa26108cb534a9f93e11cc8b167582c", "filename": "tests/ui/integer_arithmetic.stderr", "status": "modified", "additions": 65, "deletions": 27, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,131 +1,169 @@\n+error: this operation will panic at runtime\n+  --> $DIR/integer_arithmetic.rs:37:5\n+   |\n+LL |     i /= 0;\n+   |     ^^^^^^ attempt to divide `_` by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/integer_arithmetic.rs:42:5\n+   |\n+LL |     i %= 0;\n+   |     ^^^^^^ attempt to calculate the remainder of `_` with a divisor of zero\n+\n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:14:5\n+  --> $DIR/integer_arithmetic.rs:16:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n    |\n    = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:15:5\n+  --> $DIR/integer_arithmetic.rs:17:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:16:5\n+  --> $DIR/integer_arithmetic.rs:18:5\n    |\n LL | /     1 %\n LL | |     i / 2; // no error, this is part of the expression in the preceding line\n-   | |_________^\n+   | |_____^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:18:5\n+  --> $DIR/integer_arithmetic.rs:20:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:19:5\n+  --> $DIR/integer_arithmetic.rs:21:5\n    |\n LL |     -i;\n    |     ^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:20:5\n+  --> $DIR/integer_arithmetic.rs:22:5\n    |\n LL |     i >> 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:21:5\n+  --> $DIR/integer_arithmetic.rs:23:5\n    |\n LL |     i << 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:31:5\n+  --> $DIR/integer_arithmetic.rs:33:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:32:5\n+  --> $DIR/integer_arithmetic.rs:34:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:33:5\n+  --> $DIR/integer_arithmetic.rs:35:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:34:5\n+  --> $DIR/integer_arithmetic.rs:38:11\n    |\n-LL |     i /= 2;\n-   |     ^^^^^^\n+LL |     i /= -1;\n+   |           ^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:35:5\n+  --> $DIR/integer_arithmetic.rs:39:5\n    |\n-LL |     i %= 2;\n-   |     ^^^^^^\n+LL |     i /= var1;\n+   |     ^^^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:40:5\n+   |\n+LL |     i /= var2;\n+   |     ^^^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:43:11\n+   |\n+LL |     i %= -1;\n+   |           ^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:44:5\n+   |\n+LL |     i %= var1;\n+   |     ^^^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:45:5\n+   |\n+LL |     i %= var2;\n+   |     ^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:36:5\n+  --> $DIR/integer_arithmetic.rs:46:5\n    |\n LL |     i <<= 3;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:37:5\n+  --> $DIR/integer_arithmetic.rs:47:5\n    |\n LL |     i >>= 2;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:79:5\n+  --> $DIR/integer_arithmetic.rs:89:5\n    |\n LL |     3 + &1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:80:5\n+  --> $DIR/integer_arithmetic.rs:90:5\n    |\n LL |     &3 + 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:81:5\n+  --> $DIR/integer_arithmetic.rs:91:5\n    |\n LL |     &3 + &1;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:86:5\n+  --> $DIR/integer_arithmetic.rs:96:5\n    |\n LL |     a + x\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:90:5\n+  --> $DIR/integer_arithmetic.rs:100:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:94:5\n+  --> $DIR/integer_arithmetic.rs:104:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:98:5\n+  --> $DIR/integer_arithmetic.rs:108:5\n    |\n LL |     (&x + &y)\n    |     ^^^^^^^^^\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "377e58e44174977a5e4bdbea2257ada3d4946633", "filename": "tests/ui/item_after_statement.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -28,7 +28,10 @@ fn mac() {\n     // do not lint this, because it needs to be after `a`\n     macro_rules! b {\n         () => {{\n-            a = 6\n+            a = 6;\n+            fn say_something() {\n+                println!(\"something\");\n+            }\n         }};\n     }\n     b!();"}, {"sha": "68a3c81b6a804e7f25a23e454a171b7ef494c401", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -16,5 +16,18 @@ LL | |         println!(\"foo\");\n LL | |     }\n    | |_____^\n \n-error: aborting due to 2 previous errors\n+error: adding items after statements is confusing, since items exist from the start of the scope\n+  --> $DIR/item_after_statement.rs:32:13\n+   |\n+LL | /             fn say_something() {\n+LL | |                 println!(\"something\");\n+LL | |             }\n+   | |_____________^\n+...\n+LL |       b!();\n+   |       ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "486de718bb563f9064338396bf07f16d1e7c7bfd", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,24 +1,24 @@\n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:15:28\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |                            ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(42)`\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:16:36\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |                                    ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(42)`\n \n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:17:20\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |                    ^^^^^^^^^^^^^^^^ help: use `nth` instead: `.nth(10)`\n \n-error: called `skip(x).next()` on an iterator\n+error: called `skip(..).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:18:33\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();"}, {"sha": "e66c9cc24207ade95d7984e6b48d1acf78091e02", "filename": "tests/ui/map_collect_result_unit.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_collect_result_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_collect_result_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.fixed?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::map_collect_result_unit)]\n+\n+fn main() {\n+    {\n+        let _ = (0..3).try_for_each(|t| Err(t + 1));\n+        let _: Result<(), _> = (0..3).try_for_each(|t| Err(t + 1));\n+\n+        let _ = (0..3).try_for_each(|t| Err(t + 1));\n+    }\n+}\n+\n+fn _ignore() {\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<Vec<i32>, _>>();\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Vec<Result<(), _>>>();\n+}"}, {"sha": "6f08f4c3c53549c76e449f7947666ac48abbc6bf", "filename": "tests/ui/map_collect_result_unit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::map_collect_result_unit)]\n+\n+fn main() {\n+    {\n+        let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<(), _>>();\n+        let _: Result<(), _> = (0..3).map(|t| Err(t + 1)).collect();\n+\n+        let _ = (0..3).try_for_each(|t| Err(t + 1));\n+    }\n+}\n+\n+fn _ignore() {\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<Vec<i32>, _>>();\n+    let _ = (0..3).map(|t| Err(t + 1)).collect::<Vec<Result<(), _>>>();\n+}"}, {"sha": "8b06e13baa6b4f29eba699643a9b1a984af20068", "filename": "tests/ui/map_collect_result_unit.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_collect_result_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_collect_result_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,16 @@\n+error: `.map().collect()` can be replaced with `.try_for_each()`\n+  --> $DIR/map_collect_result_unit.rs:6:17\n+   |\n+LL |         let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<(), _>>();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(0..3).try_for_each(|t| Err(t + 1))`\n+   |\n+   = note: `-D clippy::map-collect-result-unit` implied by `-D warnings`\n+\n+error: `.map().collect()` can be replaced with `.try_for_each()`\n+  --> $DIR/map_collect_result_unit.rs:7:32\n+   |\n+LL |         let _: Result<(), _> = (0..3).map(|t| Err(t + 1)).collect();\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(0..3).try_for_each(|t| Err(t + 1))`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "87e16f5d09bd75b03786b26e07b6a225510decd9", "filename": "tests/ui/map_unwrap_or.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,4 +1,3 @@\n-// FIXME: Add \"run-rustfix\" once it's supported for multipart suggestions\n // aux-build:option_helpers.rs\n \n #![warn(clippy::map_unwrap_or)]\n@@ -47,10 +46,6 @@ fn option_methods() {\n     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n \n     // Check for `option.map(_).unwrap_or_else(_)` use.\n-    // single line case\n-    let _ = opt.map(|x| x + 1)\n-        // Should lint even though this call is on a separate line.\n-        .unwrap_or_else(|| 0);\n     // Multi-line cases.\n     let _ = opt.map(|x| {\n         x + 1\n@@ -60,37 +55,24 @@ fn option_methods() {\n         .unwrap_or_else(||\n             0\n         );\n-    // Macro case.\n-    // Should not lint.\n-    let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n-\n-    // Issue #4144\n-    {\n-        let mut frequencies = HashMap::new();\n-        let word = \"foo\";\n-\n-        frequencies\n-            .get_mut(word)\n-            .map(|count| {\n-                *count += 1;\n-            })\n-            .unwrap_or_else(|| {\n-                frequencies.insert(word.to_owned(), 1);\n-            });\n-    }\n }\n \n+#[rustfmt::skip]\n fn result_methods() {\n     let res: Result<i32, ()> = Ok(1);\n \n     // Check for `result.map(_).unwrap_or_else(_)` use.\n-    // single line case\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-                                                      // multi line cases\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+    // multi line cases\n+    let _ = res.map(|x| {\n+        x + 1\n+    }\n+    ).unwrap_or_else(|_e| 0);\n+    let _ = res.map(|x| x + 1)\n+        .unwrap_or_else(|_e| {\n+            0\n+        });\n     // macro case\n-    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|_e| 0); // should not lint\n }\n \n fn main() {"}, {"sha": "96b9d6cc3c14519aed1cb04cdf5d9c941a797deb", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 42, "deletions": 57, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,5 +1,5 @@\n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap_or.rs:17:13\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:16:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -8,13 +8,13 @@ LL | |         .unwrap_or(0);\n    | |_____________________^\n    |\n    = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| x + 1);\n    |                 ^^^^^^ ^^          --\n \n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap_or.rs:21:13\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:20:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -23,16 +23,16 @@ LL | |     }\n LL | |     ).unwrap_or(0);\n    | |__________________^\n    |\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| {\n LL |         x + 1\n LL |     }\n LL |     );\n    |\n \n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap_or.rs:25:13\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:24:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,26 +41,26 @@ LL | |             0\n LL | |         });\n    | |__________^\n    |\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = opt.map_or({\n LL |             0\n LL |         }, |x| x + 1);\n    |\n \n-error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/map_unwrap_or.rs:30:13\n+error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n+  --> $DIR/map_unwrap_or.rs:29:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `and_then(f)` instead\n+help: use `and_then(<f>)` instead\n    |\n LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n-error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/map_unwrap_or.rs:32:13\n+error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n+  --> $DIR/map_unwrap_or.rs:31:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -69,52 +69,41 @@ LL | |     }\n LL | |     ).unwrap_or(None);\n    | |_____________________^\n    |\n-help: use `and_then(f)` instead\n+help: use `and_then(<f>)` instead\n    |\n LL |     let _ = opt.and_then(|x| {\n LL |         Some(x + 1)\n LL |     }\n LL |     );\n    |\n \n-error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/map_unwrap_or.rs:36:13\n+error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n+  --> $DIR/map_unwrap_or.rs:35:13\n    |\n LL |       let _ = opt\n    |  _____________^\n LL | |         .map(|x| Some(x + 1))\n LL | |         .unwrap_or(None);\n    | |________________________^\n    |\n-help: use `and_then(f)` instead\n+help: use `and_then(<f>)` instead\n    |\n LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n-error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap_or.rs:47:13\n+error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:46:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `map_or(a, f)` instead\n+help: use `map_or(<a>, <f>)` instead\n    |\n LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n-error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap_or.rs:51:13\n-   |\n-LL |       let _ = opt.map(|x| x + 1)\n-   |  _____________^\n-LL | |         // Should lint even though this call is on a separate line.\n-LL | |         .unwrap_or_else(|| 0);\n-   | |_____________________________^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n-\n-error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap_or.rs:55:13\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:50:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -123,8 +112,8 @@ LL | |     }\n LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n-error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap_or.rs:59:13\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:54:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -133,29 +122,25 @@ LL | |             0\n LL | |         );\n    | |_________^\n \n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap_or.rs:88:13\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:66:13\n    |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap_or.rs:90:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+LL |       let _ = res.map(|x| {\n+   |  _____________^\n+LL | |         x + 1\n+LL | |     }\n+LL | |     ).unwrap_or_else(|_e| 0);\n+   | |____________________________^\n \n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap_or.rs:91:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or.rs:70:13\n    |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+LL |       let _ = res.map(|x| x + 1)\n+   |  _____________^\n+LL | |         .unwrap_or_else(|_e| {\n+LL | |             0\n+LL | |         });\n+   | |__________^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "bd5b4f7165a4e65396224e927a5b10b3e99bb2ca", "filename": "tests/ui/map_unwrap_or_fixable.fixed", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_fixable.fixed?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,54 @@\n+// run-rustfix\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::map_unwrap_or)]\n+\n+#[macro_use]\n+extern crate option_helpers;\n+\n+use std::collections::HashMap;\n+\n+#[rustfmt::skip]\n+fn option_methods() {\n+    let opt = Some(1);\n+\n+    // Check for `option.map(_).unwrap_or_else(_)` use.\n+    // single line case\n+    let _ = opt.map_or_else(|| 0, |x| x + 1);\n+\n+    // Macro case.\n+    // Should not lint.\n+    let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n+\n+    // Issue #4144\n+    {\n+        let mut frequencies = HashMap::new();\n+        let word = \"foo\";\n+\n+        frequencies\n+            .get_mut(word)\n+            .map(|count| {\n+                *count += 1;\n+            })\n+            .unwrap_or_else(|| {\n+                frequencies.insert(word.to_owned(), 1);\n+            });\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check for `result.map(_).unwrap_or_else(_)` use.\n+    // single line case\n+    let _ = res.map_or_else(|_e| 0, |x| x + 1);\n+\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|_e| 0); // should not lint\n+}\n+\n+fn main() {\n+    option_methods();\n+    result_methods();\n+}"}, {"sha": "0b892caf20e82a41d6c9c4f245af09ff647da0d2", "filename": "tests/ui/map_unwrap_or_fixable.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_fixable.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,58 @@\n+// run-rustfix\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::map_unwrap_or)]\n+\n+#[macro_use]\n+extern crate option_helpers;\n+\n+use std::collections::HashMap;\n+\n+#[rustfmt::skip]\n+fn option_methods() {\n+    let opt = Some(1);\n+\n+    // Check for `option.map(_).unwrap_or_else(_)` use.\n+    // single line case\n+    let _ = opt.map(|x| x + 1)\n+        // Should lint even though this call is on a separate line.\n+        .unwrap_or_else(|| 0);\n+\n+    // Macro case.\n+    // Should not lint.\n+    let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n+\n+    // Issue #4144\n+    {\n+        let mut frequencies = HashMap::new();\n+        let word = \"foo\";\n+\n+        frequencies\n+            .get_mut(word)\n+            .map(|count| {\n+                *count += 1;\n+            })\n+            .unwrap_or_else(|| {\n+                frequencies.insert(word.to_owned(), 1);\n+            });\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check for `result.map(_).unwrap_or_else(_)` use.\n+    // single line case\n+    let _ = res.map(|x| x + 1)\n+        // should lint even though this call is on a separate line\n+        .unwrap_or_else(|_e| 0);\n+\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|_e| 0); // should not lint\n+}\n+\n+fn main() {\n+    option_methods();\n+    result_methods();\n+}"}, {"sha": "1837bc2ca3b8b393526be48f827c18029dca064c", "filename": "tests/ui/map_unwrap_or_fixable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmap_unwrap_or_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or_fixable.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,22 @@\n+error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or_fixable.rs:17:13\n+   |\n+LL |       let _ = opt.map(|x| x + 1)\n+   |  _____________^\n+LL | |         // Should lint even though this call is on a separate line.\n+LL | |         .unwrap_or_else(|| 0);\n+   | |_____________________________^ help: try this: `opt.map_or_else(|| 0, |x| x + 1)`\n+   |\n+   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n+\n+error: called `map(<f>).unwrap_or_else(<g>)` on a `Result` value. This can be done more directly by calling `.map_or_else(<g>, <f>)` instead\n+  --> $DIR/map_unwrap_or_fixable.rs:47:13\n+   |\n+LL |       let _ = res.map(|x| x + 1)\n+   |  _____________^\n+LL | |         // should lint even though this call is on a separate line\n+LL | |         .unwrap_or_else(|_e| 0);\n+   | |_______________________________^ help: try this: `res.map_or_else(|_e| 0, |x| x + 1)`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d93e5b114ecfa7a8933431848efc8a8543f442d8", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -122,16 +122,13 @@ impl Mul<T> for T {\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n-    // Single-line case.\n-    let _ = v.iter().filter(|&x| *x < 0).next();\n-\n     // Multi-line case.\n     let _ = v.iter().filter(|&x| {\n                                 *x < 0\n                             }\n                    ).next();\n \n-    // Check that hat we don't lint if the caller is not an `Iterator`.\n+    // Check that we don't lint if the caller is not an `Iterator`.\n     let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.filter().next();\n }"}, {"sha": "8a281c2dbd25c2ec3feee082f9735bf89dff00f4", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -8,53 +8,46 @@ LL | |     }\n    |\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n-error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n   --> $DIR/methods.rs:126:13\n    |\n-LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::filter-next` implied by `-D warnings`\n-   = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n-\n-error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:129:13\n-   |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n LL | |                                 *x < 0\n LL | |                             }\n LL | |                    ).next();\n    | |___________________________^\n+   |\n+   = note: `-D clippy::filter-next` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:146:22\n+  --> $DIR/methods.rs:143:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:147:20\n+  --> $DIR/methods.rs:144:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:148:20\n+  --> $DIR/methods.rs:145:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:149:22\n+  --> $DIR/methods.rs:146:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:152:13\n+  --> $DIR/methods.rs:149:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -64,13 +57,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:158:22\n+  --> $DIR/methods.rs:155:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:161:13\n+  --> $DIR/methods.rs:158:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -80,13 +73,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:167:22\n+  --> $DIR/methods.rs:164:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:170:13\n+  --> $DIR/methods.rs:167:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -95,5 +88,5 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "ee7c1b0da6d979cb7d0213574864d4d0833ab2b9", "filename": "tests/ui/methods_fixable.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.fixed?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#![warn(clippy::filter_next)]\n+\n+/// Checks implementation of `FILTER_NEXT` lint.\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // Single-line case.\n+    let _ = v.iter().find(|&x| *x < 0);\n+}"}, {"sha": "6d0f1b7bd5147beed87737827d520e45827c7638", "filename": "tests/ui/methods_fixable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#![warn(clippy::filter_next)]\n+\n+/// Checks implementation of `FILTER_NEXT` lint.\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // Single-line case.\n+    let _ = v.iter().filter(|&x| *x < 0).next();\n+}"}, {"sha": "70e7c3dea545bbeff7c3f78e4555fd0f2aee8822", "filename": "tests/ui/methods_fixable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fmethods_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -0,0 +1,10 @@\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n+  --> $DIR/methods_fixable.rs:10:13\n+   |\n+LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `v.iter().find(|&x| *x < 0)`\n+   |\n+   = note: `-D clippy::filter-next` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1cba29412b872b927a359b74ab397d5b1b2798a9", "filename": "tests/ui/option_map_or_none.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Foption_map_or_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Foption_map_or_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_or_none.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,12 +1,12 @@\n-error: called `map_or(None, f)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling `and_then(..)` instead\n   --> $DIR/option_map_or_none.rs:10:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n-error: called `map_or(None, f)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling `and_then(..)` instead\n   --> $DIR/option_map_or_none.rs:13:13\n    |\n LL |       let _ = opt.map_or(None, |x| {"}, {"sha": "269cc13468bc83a3ba58d280b5e1c62373f30c42", "filename": "tests/ui/skip_while_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fskip_while_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Fskip_while_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fskip_while_next.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,13 +1,13 @@\n-error: called `skip_while(p).next()` on an `Iterator`\n+error: called `skip_while(<p>).next()` on an `Iterator`\n   --> $DIR/skip_while_next.rs:14:13\n    |\n LL |     let _ = v.iter().skip_while(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::skip-while-next` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.find(!p)` instead\n+   = help: this is more succinctly expressed by calling `.find(!<p>)` instead\n \n-error: called `skip_while(p).next()` on an `Iterator`\n+error: called `skip_while(<p>).next()` on an `Iterator`\n   --> $DIR/skip_while_next.rs:17:13\n    |\n LL |       let _ = v.iter().skip_while(|&x| {\n@@ -17,7 +17,7 @@ LL | |                             }\n LL | |                    ).next();\n    | |___________________________^\n    |\n-   = help: this is more succinctly expressed by calling `.find(!p)` instead\n+   = help: this is more succinctly expressed by calling `.find(!<p>)` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "b129d95c5602fd4d62e626d8f3c50517ea85d3f3", "filename": "tests/ui/toplevel_ref_arg.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.fixed?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,7 +1,17 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![warn(clippy::toplevel_ref_arg)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! gen_binding {\n+    () => {\n+        let _y = &42;\n+    };\n+}\n+\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -26,4 +36,15 @@ fn main() {\n \n     // ok\n     for ref _x in 0..10 {}\n+\n+    // lint in macro\n+    #[allow(unused)]\n+    {\n+        gen_binding!();\n+    }\n+\n+    // do not lint in external macro\n+    {\n+        ref_arg_binding!();\n+    }\n }"}, {"sha": "73eb4ff7306f715832668d8fb6b0e05dbd169309", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,7 +1,17 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![warn(clippy::toplevel_ref_arg)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! gen_binding {\n+    () => {\n+        let ref _y = 42;\n+    };\n+}\n+\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -26,4 +36,15 @@ fn main() {\n \n     // ok\n     for ref _x in 0..10 {}\n+\n+    // lint in macro\n+    #[allow(unused)]\n+    {\n+        gen_binding!();\n+    }\n+\n+    // do not lint in external macro\n+    {\n+        ref_arg_binding!();\n+    }\n }"}, {"sha": "15cb933fedc9e78f34b2511d5d8650c3934bed93", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,34 +1,45 @@\n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:10:9\n+  --> $DIR/toplevel_ref_arg.rs:20:9\n    |\n LL |     let ref _x = 1;\n    |     ----^^^^^^----- help: try: `let _x = &1;`\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:12:9\n+  --> $DIR/toplevel_ref_arg.rs:22:9\n    |\n LL |     let ref _y: (&_, u8) = (&1, 2);\n    |     ----^^^^^^--------------------- help: try: `let _y: &(&_, u8) = &(&1, 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:14:9\n+  --> $DIR/toplevel_ref_arg.rs:24:9\n    |\n LL |     let ref _z = 1 + 2;\n    |     ----^^^^^^--------- help: try: `let _z = &(1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:16:9\n+  --> $DIR/toplevel_ref_arg.rs:26:9\n    |\n LL |     let ref mut _z = 1 + 2;\n    |     ----^^^^^^^^^^--------- help: try: `let _z = &mut (1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:21:9\n+  --> $DIR/toplevel_ref_arg.rs:31:9\n    |\n LL |     let ref _x = vec![1, 2, 3];\n    |     ----^^^^^^----------------- help: try: `let _x = &vec![1, 2, 3];`\n \n-error: aborting due to 5 previous errors\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:11:13\n+   |\n+LL |         let ref _y = 42;\n+   |         ----^^^^^^------ help: try: `let _y = &42;`\n+...\n+LL |         gen_binding!();\n+   |         --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "1a493fbce0ef31d8f16b481dd29c441e2d67e05c", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,11 +1,33 @@\n+// aux-build:macro_rules.rs\n+\n #![warn(clippy::toplevel_ref_arg)]\n #![allow(unused)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n fn the_answer(ref mut x: u8) {\n     *x = 42;\n }\n \n+macro_rules! gen_function {\n+    () => {\n+        fn fun_example(ref _x: usize) {}\n+    };\n+}\n+\n fn main() {\n     let mut x = 0;\n     the_answer(x);\n+\n+    // lint in macro\n+    #[allow(unused)]\n+    {\n+        gen_function!();\n+    }\n+\n+    // do not lint in external macro\n+    {\n+        ref_arg_function!();\n+    }\n }"}, {"sha": "6c36141a58c6557ad5db5788556876b512e68340", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3a249cb6de64d0d669c249185d469a040ac353/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=4a3a249cb6de64d0d669c249185d469a040ac353", "patch": "@@ -1,10 +1,21 @@\n error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n-  --> $DIR/toplevel_ref_arg_non_rustfix.rs:4:15\n+  --> $DIR/toplevel_ref_arg_non_rustfix.rs:9:15\n    |\n LL | fn the_answer(ref mut x: u8) {\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n+  --> $DIR/toplevel_ref_arg_non_rustfix.rs:15:24\n+   |\n+LL |         fn fun_example(ref _x: usize) {}\n+   |                        ^^^^^^\n+...\n+LL |         gen_function!();\n+   |         ---------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a18963f28f8e190b89e4b1237e9ff7e25852771/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/8a18963f28f8e190b89e4b1237e9ff7e25852771/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=8a18963f28f8e190b89e4b1237e9ff7e25852771", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}