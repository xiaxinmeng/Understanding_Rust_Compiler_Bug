{"sha": "f1afed541e7676860ec2162eed47a5dcd2043b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWZlZDU0MWU3Njc2ODYwZWMyMTYyZWVkNDdhNWRjZDIwNDNiMTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-05T00:29:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-05T00:29:35Z"}, "message": "Rollup merge of #77426 - tamird:sockaddr-scope-id, r=dtolnay\n\nInclude scope id in SocketAddrV6::Display\n\nr? @tmandry\n\nI couldn't find any unit tests for these functions.\n\ncc @ghanan94 @brunowonka", "tree": {"sha": "fb3c308fe50a9985ebba3ce6db8fa8b873177f2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3c308fe50a9985ebba3ce6db8fa8b873177f2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1afed541e7676860ec2162eed47a5dcd2043b18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfemjvCRBK7hj4Ov3rIwAAdHIIABxwFOd6LC1oCJ2qfqTLwaCz\nTxoqAHW4i2KPZhJDo8Rznun2rMT21ovvq0X9FyPAKOzmYTw/3I4IjcUkVWqRJbgn\nwdoX7AeUnLoUZ7d3Byw6MFa1J/n/Xu/m/0Xb6vFt8bkiBOfD19fcCY4RTUXQPUjS\ndZxSY/MPO2XjP3kyVPDQ428600JtumqGS9Lb9REreu43dlsYaGYRKHKai+fMYjgX\n7IPSftfBq/mIN4OYXo3FS39ac8y92Oi+SjjS66/K2pDIoWj/Cb6XlR+hZlOnGY9l\n3qg6LWPjfiX7cFo0UuDcybB2ImnAiaQnhLi5qb8cbKh0WTW4niGXxyu/TAmLCw0=\n=97s8\n-----END PGP SIGNATURE-----\n", "payload": "tree fb3c308fe50a9985ebba3ce6db8fa8b873177f2e\nparent fffeaa7b83df07600092ac5b2a3d84e5dc76637b\nparent 4585c22818abb87cb87cbdc5163b702f6d7ed8ca\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601857775 +0200\ncommitter GitHub <noreply@github.com> 1601857775 +0200\n\nRollup merge of #77426 - tamird:sockaddr-scope-id, r=dtolnay\n\nInclude scope id in SocketAddrV6::Display\n\nr? @tmandry\n\nI couldn't find any unit tests for these functions.\n\ncc @ghanan94 @brunowonka\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1afed541e7676860ec2162eed47a5dcd2043b18", "html_url": "https://github.com/rust-lang/rust/commit/f1afed541e7676860ec2162eed47a5dcd2043b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1afed541e7676860ec2162eed47a5dcd2043b18/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fffeaa7b83df07600092ac5b2a3d84e5dc76637b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fffeaa7b83df07600092ac5b2a3d84e5dc76637b", "html_url": "https://github.com/rust-lang/rust/commit/fffeaa7b83df07600092ac5b2a3d84e5dc76637b"}, {"sha": "4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "html_url": "https://github.com/rust-lang/rust/commit/4585c22818abb87cb87cbdc5163b702f6d7ed8ca"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "63de87128340f38d4cb9ae01a63788dcdd8122ff", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1afed541e7676860ec2162eed47a5dcd2043b18/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afed541e7676860ec2162eed47a5dcd2043b18/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=f1afed541e7676860ec2162eed47a5dcd2043b18", "patch": "@@ -623,19 +623,27 @@ impl fmt::Display for SocketAddrV6 {\n         // Fast path: if there's no alignment stuff, write to the output\n         // buffer directly\n         if f.precision().is_none() && f.width().is_none() {\n-            write!(f, \"[{}]:{}\", self.ip(), self.port())\n+            match self.scope_id() {\n+                0 => write!(f, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(f, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+            }\n         } else {\n             const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n             + 7  // The colon separators\n             + 2  // The brackets\n+            + 1 + 10 // The scope id\n             + 1 + 5; // The port\n \n             let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n             let mut buf_slice = &mut buf[..];\n \n+            match self.scope_id() {\n+                0 => write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(buf_slice, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+            }\n             // Unwrap is fine because writing to a sufficiently-sized\n             // buffer is infallible\n-            write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()).unwrap();\n+            .unwrap();\n             let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n \n             // This unsafe is OK because we know what is being written to the buffer"}, {"sha": "43f965de25e65d2f1ef8a7bc4dc9fd5cabc1959b", "filename": "library/std/src/net/addr/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1afed541e7676860ec2162eed47a5dcd2043b18/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afed541e7676860ec2162eed47a5dcd2043b18/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs?ref=f1afed541e7676860ec2162eed47a5dcd2043b18", "patch": "@@ -178,13 +178,21 @@ fn socket_v4_to_str() {\n \n #[test]\n fn socket_v6_to_str() {\n-    let socket: SocketAddrV6 = \"[2a02:6b8:0:1::1]:53\".parse().unwrap();\n+    let mut socket = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 53, 0, 0);\n \n     assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1]:53\");\n     assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1]:53    \");\n     assert_eq!(format!(\"{:>24}\", socket), \"    [2a02:6b8:0:1::1]:53\");\n     assert_eq!(format!(\"{:^24}\", socket), \"  [2a02:6b8:0:1::1]:53  \");\n     assert_eq!(format!(\"{:.15}\", socket), \"[2a02:6b8:0:1::\");\n+\n+    socket.set_scope_id(5);\n+\n+    assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1%5]:53  \");\n+    assert_eq!(format!(\"{:>24}\", socket), \"  [2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{:^24}\", socket), \" [2a02:6b8:0:1::1%5]:53 \");\n+    assert_eq!(format!(\"{:.18}\", socket), \"[2a02:6b8:0:1::1%5\");\n }\n \n #[test]"}]}