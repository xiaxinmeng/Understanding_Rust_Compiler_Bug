{"sha": "a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjU4NjZmZTg3YTAyMjU0YTNkNGFiMWRlYmFhOWUxZWU0NjA5OTA=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-05T14:25:36Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T18:36:10Z"}, "message": "Fix the lifetime error in ExplicitSelf\n\nHad to take the infer context as a parameter instead of the type\ncontext, so that the function can be called during inference", "tree": {"sha": "1fc98c342713c6658520a8bd34ff0d17cda82d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc98c342713c6658520a8bd34ff0d17cda82d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "html_url": "https://github.com/rust-lang/rust/commit/a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dff08de57cebfff792948eabf72809565a007e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dff08de57cebfff792948eabf72809565a007e2", "html_url": "https://github.com/rust-lang/rust/commit/7dff08de57cebfff792948eabf72809565a007e2"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "d8f2e833d74b7eb6501a54d292341f0646a885ea", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "patch": "@@ -19,6 +19,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n+use rustc::infer::InferCtxt;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n@@ -1433,26 +1434,21 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     /// ```\n     ///\n     pub fn determine<'a, 'gcx>(\n-        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        self_ty: Ty<'a>,\n-        self_arg_ty: Ty<'a>\n+        self_ty: Ty<'tcx>,\n+        self_arg_ty: Ty<'tcx>\n     ) -> ExplicitSelf<'tcx>\n     {\n         use self::ExplicitSelf::*;\n \n-        tcx.infer_ctxt().enter(|infcx| {\n-            let can_eq = |expected, actual| {\n-                let cause = traits::ObligationCause::dummy();\n-                infcx.at(&cause, param_env).eq(expected, actual).is_ok()\n-            };\n+        let can_eq = |expected, actual| infcx.can_eq(param_env, expected, actual).is_ok();\n \n-            match self_arg_ty.sty {\n-                _ if can_eq(self_arg_ty, self_ty) => ByValue,\n-                ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if can_eq(ty, self_ty) => ByReference(region, mutbl),\n-                ty::TyAdt(def, _) if def.is_box() && can_eq(self_arg_ty.boxed_ty(), self_ty) => ByBox,\n-                _ => Other\n-            }\n-        })\n+        match self_arg_ty.sty {\n+            _ if can_eq(self_arg_ty, self_ty) => ByValue,\n+            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if can_eq(ty, self_ty) => ByReference(region, mutbl),\n+            ty::TyAdt(def, _) if def.is_box() && can_eq(self_arg_ty.boxed_ty(), self_ty) => ByBox,\n+            _ => Other\n+        }\n     }\n }"}, {"sha": "e2e8868e8f33691975518c63f78d5d29b01e0dff", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "patch": "@@ -505,12 +505,14 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let self_arg_ty = *tcx.fn_sig(method.def_id).input(0).skip_binder();\n         let param_env = ty::ParamEnv::empty(Reveal::All);\n \n-        match ExplicitSelf::determine(tcx, param_env, untransformed_self_ty, self_arg_ty) {\n-            ExplicitSelf::ByValue => \"self\".to_string(),\n-            ExplicitSelf::ByReference(_, hir::MutImmutable) => \"&self\".to_string(),\n-            ExplicitSelf::ByReference(_, hir::MutMutable) => \"&mut self\".to_string(),\n-            _ => format!(\"self: {}\", self_arg_ty)\n-        }\n+        tcx.infer_ctxt().enter(|infcx| {\n+            match ExplicitSelf::determine(&infcx, param_env, untransformed_self_ty, self_arg_ty) {\n+                ExplicitSelf::ByValue => \"self\".to_string(),\n+                ExplicitSelf::ByReference(_, hir::MutImmutable) => \"&self\".to_string(),\n+                ExplicitSelf::ByReference(_, hir::MutMutable) => \"&mut self\".to_string(),\n+                _ => format!(\"self: {}\", self_arg_ty)\n+            }\n+        })\n     };\n \n     match (trait_m.method_has_self_argument, impl_m.method_has_self_argument) {"}, {"sha": "949188ac3f089f13ec23002d9a3e138233056820", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f5866fe87a02254a3d4ab1debaa9e1ee460990/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "patch": "@@ -471,25 +471,26 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         let self_arg_ty = sig.inputs()[0];\n \n         let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n-        let at = fcx.at(&cause, fcx.param_env);\n+        let eq = |expected, actual| fcx.at(&cause, fcx.param_env).eq(expected, actual);\n         let mut autoderef = fcx.autoderef(span, self_arg_ty);\n \n         loop {\n             if let Some((potential_self_ty, _)) = autoderef.next() {\n                 debug!(\"check_method_receiver: potential self type `{:?}` to match `{:?}`\", potential_self_ty, self_ty);\n \n-                if let Ok(InferOk { obligations, value: () }) = at.eq(self_ty, potential_self_ty) {\n+                if let Ok(InferOk { obligations, value: () }) = eq(self_ty, potential_self_ty) {\n                     fcx.register_predicates(obligations);\n                     autoderef.finalize();\n                     break;\n                 }\n \n             } else {\n-                span_err!(fcx.tcx.sess, span, E0307, \"invalid self type: {:?}\", self_arg_ty);\n+                span_err!(fcx.tcx.sess, span, E0307, \"invalid `self` type: {:?}\", self_arg_ty);\n+                return;\n             }\n         }\n \n-        if let ExplicitSelf::Other = ExplicitSelf::determine(fcx.tcx, fcx.param_env, self_ty, self_arg_ty) {\n+        if let ExplicitSelf::Other = ExplicitSelf::determine(fcx, fcx.param_env, self_ty, self_arg_ty) {\n             if !fcx.tcx.sess.features.borrow().arbitrary_self_types {\n                 fcx.tcx.sess.span_err(span, \"Arbitrary `self` types are experimental\");\n             }"}]}