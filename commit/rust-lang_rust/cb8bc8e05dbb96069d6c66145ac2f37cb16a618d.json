{"sha": "cb8bc8e05dbb96069d6c66145ac2f37cb16a618d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOGJjOGUwNWRiYjk2MDY5ZDZjNjYxNDVhYzJmMzdjYjE2YTYxOGQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-21T01:39:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-06-08T21:55:34Z"}, "message": "Remove `RawVec::reserve_in_place`.\n\nAlso remove a now-unnecessary `placement` argument.", "tree": {"sha": "f2c7eb624453cda8a68c3a96fc10d337993e4310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2c7eb624453cda8a68c3a96fc10d337993e4310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8bc8e05dbb96069d6c66145ac2f37cb16a618d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8bc8e05dbb96069d6c66145ac2f37cb16a618d", "html_url": "https://github.com/rust-lang/rust/commit/cb8bc8e05dbb96069d6c66145ac2f37cb16a618d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8bc8e05dbb96069d6c66145ac2f37cb16a618d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7145b877511e2a38fbdea32a375e398371d1980b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7145b877511e2a38fbdea32a375e398371d1980b", "html_url": "https://github.com/rust-lang/rust/commit/7145b877511e2a38fbdea32a375e398371d1980b"}], "stats": {"total": 45, "additions": 6, "deletions": 39}, "files": [{"sha": "8a22f267bf296de3ab2809f0b3865313a4525ba2", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cb8bc8e05dbb96069d6c66145ac2f37cb16a618d/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8bc8e05dbb96069d6c66145ac2f37cb16a618d/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=cb8bc8e05dbb96069d6c66145ac2f37cb16a618d", "patch": "@@ -9,7 +9,7 @@ use core::ptr::{NonNull, Unique};\n use core::slice;\n \n use crate::alloc::{\n-    handle_alloc_error, AllocErr,\n+    handle_alloc_error,\n     AllocInit::{self, *},\n     AllocRef, Global, Layout,\n     ReallocPlacement::{self, *},\n@@ -302,39 +302,12 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         needed_extra_capacity: usize,\n     ) -> Result<(), TryReserveError> {\n         if self.needs_to_grow(used_capacity, needed_extra_capacity) {\n-            self.grow_amortized(used_capacity, needed_extra_capacity, MayMove)\n+            self.grow_amortized(used_capacity, needed_extra_capacity)\n         } else {\n             Ok(())\n         }\n     }\n \n-    /// Attempts to ensure that the buffer contains at least enough space to hold\n-    /// `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n-    /// enough capacity, will reallocate in place enough space plus comfortable slack\n-    /// space to get amortized `O(1)` behavior. Will limit this behaviour\n-    /// if it would needlessly cause itself to panic.\n-    ///\n-    /// If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate\n-    /// the requested space. This is not really unsafe, but the unsafe\n-    /// code *you* write that relies on the behavior of this function may break.\n-    ///\n-    /// Returns `true` if the reallocation attempt has succeeded.\n-    ///\n-    /// # Panics\n-    ///\n-    /// * Panics if the requested capacity exceeds `usize::MAX` bytes.\n-    /// * Panics on 32-bit platforms if the requested capacity exceeds\n-    ///   `isize::MAX` bytes.\n-    pub fn reserve_in_place(&mut self, used_capacity: usize, needed_extra_capacity: usize) -> bool {\n-        // This is more readable than putting this in one line:\n-        // `!self.needs_to_grow(...) || self.grow(...).is_ok()`\n-        if self.needs_to_grow(used_capacity, needed_extra_capacity) {\n-            self.grow_amortized(used_capacity, needed_extra_capacity, InPlace).is_ok()\n-        } else {\n-            true\n-        }\n-    }\n-\n     /// Ensures that the buffer contains at least enough space to hold\n     /// `used_capacity + needed_extra_capacity` elements. If it doesn't already,\n     /// will reallocate the minimum possible amount of memory necessary.\n@@ -423,11 +396,9 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         &mut self,\n         used_capacity: usize,\n         needed_extra_capacity: usize,\n-        placement: ReallocPlacement,\n     ) -> Result<(), TryReserveError> {\n         // This is ensured by the calling contexts.\n         debug_assert!(needed_extra_capacity > 0);\n-\n         if mem::size_of::<T>() == 0 {\n             // Since we return a capacity of `usize::MAX` when `elem_size` is\n             // 0, getting to here necessarily means the `RawVec` is overfull.\n@@ -461,7 +432,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         let new_layout = Layout::array::<T>(cap);\n \n         // `finish_grow` is non-generic over `T`.\n-        let memory = finish_grow(new_layout, placement, self.current_memory(), &mut self.alloc)?;\n+        let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;\n         self.set_memory(memory);\n         Ok(())\n     }\n@@ -484,7 +455,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         let new_layout = Layout::array::<T>(cap);\n \n         // `finish_grow` is non-generic over `T`.\n-        let memory = finish_grow(new_layout, MayMove, self.current_memory(), &mut self.alloc)?;\n+        let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;\n         self.set_memory(memory);\n         Ok(())\n     }\n@@ -518,7 +489,6 @@ impl<T, A: AllocRef> RawVec<T, A> {\n // much smaller than the number of `T` types.)\n fn finish_grow<A>(\n     new_layout: Result<Layout, LayoutErr>,\n-    placement: ReallocPlacement,\n     current_memory: Option<(NonNull<u8>, Layout)>,\n     alloc: &mut A,\n ) -> Result<MemoryBlock, TryReserveError>\n@@ -532,12 +502,9 @@ where\n \n     let memory = if let Some((ptr, old_layout)) = current_memory {\n         debug_assert_eq!(old_layout.align(), new_layout.align());\n-        unsafe { alloc.grow(ptr, old_layout, new_layout.size(), placement, Uninitialized) }\n+        unsafe { alloc.grow(ptr, old_layout, new_layout.size(), MayMove, Uninitialized) }\n     } else {\n-        match placement {\n-            MayMove => alloc.alloc(new_layout, Uninitialized),\n-            InPlace => Err(AllocErr),\n-        }\n+        alloc.alloc(new_layout, Uninitialized)\n     }\n     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?;\n "}]}