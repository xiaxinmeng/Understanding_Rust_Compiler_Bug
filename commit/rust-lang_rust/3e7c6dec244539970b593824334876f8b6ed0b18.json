{"sha": "3e7c6dec244539970b593824334876f8b6ed0b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlN2M2ZGVjMjQ0NTM5OTcwYjU5MzgyNDMzNDg3NmY4YjZlZDBiMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T15:34:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T15:34:56Z"}, "message": "Auto merge of #6361 - integer32llc:doc-style, r=carols10cents\n\nSmall grammar, punctuation, and code style improvements to docs\n\nchangelog: Made small grammar, punctuation, and code style improvements to docs\n\nI recently found some places in rust-lang/rust that had lists without spaces after commas, which led me to look for more places, which led me over here to find:\n\n- Some similar lists in code examples that could use spaces after commas to be idiomatic Rust style\n- Some lists in documentation text that didn't have spaces after commas, needed an Oxford comma (fight me), or were otherwise misformatted\n- Some other grammar improvements in the area of the other changes\n\nThese changes should only be in user-facing documentation or output.", "tree": {"sha": "f8427a98b0acc825cb51437a1aa4ffc025ddc5aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8427a98b0acc825cb51437a1aa4ffc025ddc5aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7c6dec244539970b593824334876f8b6ed0b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7c6dec244539970b593824334876f8b6ed0b18", "html_url": "https://github.com/rust-lang/rust/commit/3e7c6dec244539970b593824334876f8b6ed0b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7c6dec244539970b593824334876f8b6ed0b18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831aa9607a20b20db03458a44106aa6615142712", "url": "https://api.github.com/repos/rust-lang/rust/commits/831aa9607a20b20db03458a44106aa6615142712", "html_url": "https://github.com/rust-lang/rust/commit/831aa9607a20b20db03458a44106aa6615142712"}, {"sha": "445466e567c192bb81ccc366743793ffb079da5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/445466e567c192bb81ccc366743793ffb079da5d", "html_url": "https://github.com/rust-lang/rust/commit/445466e567c192bb81ccc366743793ffb079da5d"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8842901d90b83dac9b9b7e638fbb0a774733dd0e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=3e7c6dec244539970b593824334876f8b6ed0b18", "patch": "@@ -69,7 +69,7 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparing to an empty slice such as \"\" or [],`\n+    /// **What it does:** Checks for comparing to an empty slice such as `\"\"` or `[]`,\n     /// and suggests using `.is_empty()` where applicable.\n     ///\n     /// **Why is this bad?** Some structures can answer `.is_empty()` much faster"}, {"sha": "fa1744043657a2eee08d978616af231d4f73c706", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3e7c6dec244539970b593824334876f8b6ed0b18", "patch": "@@ -1351,7 +1351,7 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(),_>()`.\n+    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(), _>()`.\n     ///\n     /// **Why is this bad?** Using `try_for_each` instead is more readable and idiomatic.\n     ///"}, {"sha": "d06ab14348237630582a8e2b4fe663ab6725d972", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=3e7c6dec244539970b593824334876f8b6ed0b18", "patch": "@@ -11,7 +11,7 @@ use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n-    /// (with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct\n+    /// (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`) for correct\n     /// regex syntax.\n     ///\n     /// **Why is this bad?** This will lead to a runtime panic.\n@@ -29,7 +29,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for trivial [regex](https://crates.io/crates/regex)\n-    /// creation (with `Regex::new`, `RegexBuilder::new` or `RegexSet::new`).\n+    /// creation (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`).\n     ///\n     /// **Why is this bad?** Matching the regex can likely be replaced by `==` or\n     /// `str::starts_with`, `str::ends_with` or `std::contains` or other `str`"}, {"sha": "2501635e7ef6636933448be0ff2ac50c959a88bc", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=3e7c6dec244539970b593824334876f8b6ed0b18", "patch": "@@ -24,7 +24,7 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// let mut twins = vec!((1,1), (2,2));\n+    /// let mut twins = vec!((1, 1), (2, 2));\n     /// twins.sort_by_key(|x| { x.1; });\n     /// ```\n     pub UNIT_RETURN_EXPECTING_ORD,"}, {"sha": "efa9c3fab4ab83c20c95d607a1df7ab7d5e71862", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7c6dec244539970b593824334876f8b6ed0b18/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=3e7c6dec244539970b593824334876f8b6ed0b18", "patch": "@@ -12,8 +12,8 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`,`IntoIter` calls\n-    /// that useless converts to the same type as caller.\n+    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` calls\n+    /// which uselessly convert to the same type.\n     ///\n     /// **Why is this bad?** Redundant code.\n     ///\n@@ -31,7 +31,7 @@ declare_clippy_lint! {\n     /// ```\n     pub USELESS_CONVERSION,\n     complexity,\n-    \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\"\n+    \"calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type\"\n }\n \n #[derive(Default)]"}, {"sha": "1d906d20ad475eec2b7039d7b6703f4444c7dcb6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e7c6dec244539970b593824334876f8b6ed0b18/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7c6dec244539970b593824334876f8b6ed0b18/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=3e7c6dec244539970b593824334876f8b6ed0b18", "patch": "@@ -2751,7 +2751,7 @@ vec![\n     Lint {\n         name: \"useless_conversion\",\n         group: \"complexity\",\n-        desc: \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\",\n+        desc: \"calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type\",\n         deprecation: None,\n         module: \"useless_conversion\",\n     },"}]}