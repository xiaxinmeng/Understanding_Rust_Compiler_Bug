{"sha": "3802d573c36902dbab68199beee3041514efd8bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDJkNTczYzM2OTAyZGJhYjY4MTk5YmVlZTMwNDE1MTRlZmQ4YmQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-06-08T15:51:44Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-06-08T15:51:44Z"}, "message": "Mention the Borrow guarantee on the Hash implementations for Array and Vec\n\nTo remind people like me who forget about it and send PRs to make them different, and to (probably) get a test failure if the code is changed to no longer uphold it.", "tree": {"sha": "28ff1296c75f7d4af66468258fe3bb8385f10f26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ff1296c75f7d4af66468258fe3bb8385f10f26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3802d573c36902dbab68199beee3041514efd8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3802d573c36902dbab68199beee3041514efd8bd", "html_url": "https://github.com/rust-lang/rust/commit/3802d573c36902dbab68199beee3041514efd8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3802d573c36902dbab68199beee3041514efd8bd/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b1005bfd22e2cb2a4c13b0b81958fe72628354", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b1005bfd22e2cb2a4c13b0b81958fe72628354", "html_url": "https://github.com/rust-lang/rust/commit/84b1005bfd22e2cb2a4c13b0b81958fe72628354"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "aff27b7af306d0780e35b79d0ab8b2755fd3d162", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3802d573c36902dbab68199beee3041514efd8bd/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3802d573c36902dbab68199beee3041514efd8bd/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=3802d573c36902dbab68199beee3041514efd8bd", "patch": "@@ -2407,6 +2407,23 @@ impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n     }\n }\n \n+/// The hash of a vector is the same as that of the corresponding slice,\n+/// as required by the `core::borrow::Borrow` implementation.\n+///\n+/// ```\n+/// use std::hash::{BuildHasher, Hash, Hasher};\n+///\n+/// fn hash_of(x: impl Hash, b: &impl BuildHasher) -> u64 {\n+///     let mut h = b.build_hasher();\n+///     x.hash(&mut h);\n+///     h.finish()\n+/// }\n+///\n+/// let b = std::collections::hash_map::RandomState::new();\n+/// let v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\n+/// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n+/// assert_eq!(hash_of(v, &b), hash_of(s, &b));\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash, A: Allocator> Hash for Vec<T, A> {\n     #[inline]"}, {"sha": "aa7f71cf85b5fcd844446ee9872711b46f1110ec", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3802d573c36902dbab68199beee3041514efd8bd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3802d573c36902dbab68199beee3041514efd8bd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=3802d573c36902dbab68199beee3041514efd8bd", "patch": "@@ -139,6 +139,23 @@ impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     }\n }\n \n+/// The hash of an array is the same as that of the corresponding slice,\n+/// as required by the `Borrow` implementation.\n+///\n+/// ```\n+/// use std::hash::{BuildHasher, Hash, Hasher};\n+///\n+/// fn hash_of(x: impl Hash, b: &impl BuildHasher) -> u64 {\n+///     let mut h = b.build_hasher();\n+///     x.hash(&mut h);\n+///     h.finish()\n+/// }\n+///\n+/// let b = std::collections::hash_map::RandomState::new();\n+/// let a: [u8; 3] = [0xa8, 0x3c, 0x09];\n+/// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n+/// assert_eq!(hash_of(a, &b), hash_of(s, &b));\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash, const N: usize> Hash for [T; N] {\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {"}]}