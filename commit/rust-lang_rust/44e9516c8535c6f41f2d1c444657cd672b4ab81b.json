{"sha": "44e9516c8535c6f41f2d1c444657cd672b4ab81b", "node_id": "C_kwDOAAsO6NoAKDQ0ZTk1MTZjODUzNWM2ZjQxZjJkMWM0NDQ2NTdjZDY3MmI0YWI4MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T16:04:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T16:04:42Z"}, "message": "Auto merge of #97654 - Dylan-DPC:rollup-w6zrzxf, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97420 (Be a little nicer with casts when formatting `fn` pointers)\n - #97450 ([RFC 2011] Basic compiler infrastructure)\n - #97599 (Fix JSON reexport ICE)\n - #97617 (Rustdoc anonymous reexports)\n - #97636 (Revert #96682.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f61660c0e9a24073e92ffd139d115bbc3212967b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61660c0e9a24073e92ffd139d115bbc3212967b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e9516c8535c6f41f2d1c444657cd672b4ab81b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e9516c8535c6f41f2d1c444657cd672b4ab81b", "html_url": "https://github.com/rust-lang/rust/commit/44e9516c8535c6f41f2d1c444657cd672b4ab81b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e9516c8535c6f41f2d1c444657cd672b4ab81b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20976bae5c426c738262db376eadbd8859aafc08", "url": "https://api.github.com/repos/rust-lang/rust/commits/20976bae5c426c738262db376eadbd8859aafc08", "html_url": "https://github.com/rust-lang/rust/commit/20976bae5c426c738262db376eadbd8859aafc08"}, {"sha": "1d712376467673192f74188ab0b143fff58372e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d712376467673192f74188ab0b143fff58372e6", "html_url": "https://github.com/rust-lang/rust/commit/1d712376467673192f74188ab0b143fff58372e6"}], "stats": {"total": 544, "additions": 336, "deletions": 208}, "files": [{"sha": "85d9687c600dc72b526f5ac5f44ca8e823c1dbdc", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -50,12 +50,11 @@ pub enum Delimiter {\n     Brace,\n     /// `[ ... ]`\n     Bracket,\n-    /// `/*\u00ab*/ ... /*\u00bb*/`\n+    /// `\u00d8 ... \u00d8`\n     /// An invisible delimiter, that may, for example, appear around tokens coming from a\n     /// \"macro variable\" `$var`. It is important to preserve operator priorities in cases like\n     /// `$var * 3` where `$var` is `1 + 2`.\n-    /// Invisible delimiters are not directly writable in normal Rust code except as comments.\n-    /// Therefore, they might not survive a roundtrip of a token stream through a string.\n+    /// Invisible delimiters might not survive roundtrip of a token stream through a string.\n     Invisible,\n }\n "}, {"sha": "b80a553b4185ce7f3b551b66c299470c15e83146", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -590,28 +590,14 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.nbsp();\n                 }\n                 self.word(\"{\");\n-                let empty = tts.is_empty();\n-                if !empty {\n+                if !tts.is_empty() {\n                     self.space();\n                 }\n                 self.ibox(0);\n                 self.print_tts(tts, convert_dollar_crate);\n                 self.end();\n-                self.bclose(span, empty);\n-            }\n-            Some(Delimiter::Invisible) => {\n-                self.word(\"/*\u00ab*/\");\n                 let empty = tts.is_empty();\n-                if !empty {\n-                    self.space();\n-                }\n-                self.ibox(0);\n-                self.print_tts(tts, convert_dollar_crate);\n-                self.end();\n-                if !empty {\n-                    self.space();\n-                }\n-                self.word(\"/*\u00bb*/\");\n+                self.bclose(span, empty);\n             }\n             Some(delim) => {\n                 let token_str = self.token_kind_to_string(&token::OpenDelim(delim));\n@@ -786,8 +772,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             token::CloseDelim(Delimiter::Bracket) => \"]\".into(),\n             token::OpenDelim(Delimiter::Brace) => \"{\".into(),\n             token::CloseDelim(Delimiter::Brace) => \"}\".into(),\n-            token::OpenDelim(Delimiter::Invisible) => \"/*\u00ab*/\".into(),\n-            token::CloseDelim(Delimiter::Invisible) => \"/*\u00bb*/\".into(),\n+            token::OpenDelim(Delimiter::Invisible) | token::CloseDelim(Delimiter::Invisible) => {\n+                \"\".into()\n+            }\n             token::Pound => \"#\".into(),\n             token::Dollar => \"$\".into(),\n             token::Question => \"?\".into(),"}, {"sha": "0c75187193c38857904b1e0f316b9408e82469c1", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,11 +1,13 @@\n+mod context;\n+\n use crate::edition_panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n-use rustc_ast::{self as ast, *};\n+use rustc_ast::{Expr, ExprKind, MacArgs, MacCall, MacDelimiter, Path, PathSegment, UnOp};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, PResult};\n-use rustc_expand::base::*;\n+use rustc_expand::base::{DummyResult, ExtCtxt, MacEager, MacResult};\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -25,13 +27,13 @@ pub fn expand_assert<'cx>(\n \n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n-    let sp = cx.with_call_site_ctxt(span);\n+    let call_site_span = cx.with_call_site_ctxt(span);\n \n-    let panic_call = if let Some(tokens) = custom_message {\n-        let path = if use_panic_2021(span) {\n+    let panic_path = || {\n+        if use_panic_2021(span) {\n             // On edition 2021, we always call `$crate::panic::panic_2021!()`.\n             Path {\n-                span: sp,\n+                span: call_site_span,\n                 segments: cx\n                     .std_path(&[sym::panic, sym::panic_2021])\n                     .into_iter()\n@@ -42,27 +44,40 @@ pub fn expand_assert<'cx>(\n         } else {\n             // Before edition 2021, we call `panic!()` unqualified,\n             // such that it calls either `std::panic!()` or `core::panic!()`.\n-            Path::from_ident(Ident::new(sym::panic, sp))\n-        };\n-        // Pass the custom message to panic!().\n-        cx.expr(\n-            sp,\n+            Path::from_ident(Ident::new(sym::panic, call_site_span))\n+        }\n+    };\n+\n+    // Simply uses the user provided message instead of generating custom outputs\n+    let expr = if let Some(tokens) = custom_message {\n+        let then = cx.expr(\n+            call_site_span,\n             ExprKind::MacCall(MacCall {\n-                path,\n+                path: panic_path(),\n                 args: P(MacArgs::Delimited(\n-                    DelimSpan::from_single(sp),\n+                    DelimSpan::from_single(call_site_span),\n                     MacDelimiter::Parenthesis,\n                     tokens,\n                 )),\n                 prior_type_ascription: None,\n             }),\n-        )\n-    } else {\n+        );\n+        expr_if_not(cx, call_site_span, cond_expr, then, None)\n+    }\n+    // If `generic_assert` is enabled, generates rich captured outputs\n+    //\n+    // FIXME(c410-f3r) See https://github.com/rust-lang/rust/issues/96949\n+    else if let Some(features) = cx.ecfg.features && features.generic_assert {\n+        context::Context::new(cx, call_site_span).build(cond_expr, panic_path())\n+    }\n+    // If `generic_assert` is not enabled, only outputs a literal \"assertion failed: ...\"\n+    // string\n+    else {\n         // Pass our own message directly to $crate::panicking::panic(),\n         // because it might contain `{` and `}` that should always be\n         // passed literally.\n-        cx.expr_call_global(\n-            sp,\n+        let then = cx.expr_call_global(\n+            call_site_span,\n             cx.std_path(&[sym::panicking, sym::panic]),\n             vec![cx.expr_str(\n                 DUMMY_SP,\n@@ -71,18 +86,29 @@ pub fn expand_assert<'cx>(\n                     pprust::expr_to_string(&cond_expr).escape_debug()\n                 )),\n             )],\n-        )\n+        );\n+        expr_if_not(cx, call_site_span, cond_expr, then, None)\n     };\n-    let if_expr =\n-        cx.expr_if(sp, cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)), panic_call, None);\n-    MacEager::expr(if_expr)\n+\n+    MacEager::expr(expr)\n }\n \n struct Assert {\n-    cond_expr: P<ast::Expr>,\n+    cond_expr: P<Expr>,\n     custom_message: Option<TokenStream>,\n }\n \n+// if !{ ... } { ... } else { ... }\n+fn expr_if_not(\n+    cx: &ExtCtxt<'_>,\n+    span: Span,\n+    cond: P<Expr>,\n+    then: P<Expr>,\n+    els: Option<P<Expr>>,\n+) -> P<Expr> {\n+    cx.expr_if(span, cx.expr(span, ExprKind::Unary(UnOp::Not, cond)), then, els)\n+}\n+\n fn parse_assert<'a>(cx: &mut ExtCtxt<'a>, sp: Span, stream: TokenStream) -> PResult<'a, Assert> {\n     let mut parser = cx.new_parser_from_tts(stream);\n "}, {"sha": "8d187a4be8aee93be6fca8f36fb215ea929c9e8a", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -0,0 +1,44 @@\n+use rustc_ast::{ptr::P, Expr, Path};\n+use rustc_expand::base::ExtCtxt;\n+use rustc_span::Span;\n+\n+pub(super) struct Context<'cx, 'a> {\n+    cx: &'cx ExtCtxt<'a>,\n+    span: Span,\n+}\n+\n+impl<'cx, 'a> Context<'cx, 'a> {\n+    pub(super) fn new(cx: &'cx ExtCtxt<'a>, span: Span) -> Self {\n+        Self { cx, span }\n+    }\n+\n+    /// Builds the whole `assert!` expression.\n+    ///\n+    /// {\n+    ///    use ::core::asserting::{ ... };\n+    ///\n+    ///    let mut __capture0 = Capture::new();\n+    ///    ...\n+    ///    ...\n+    ///    ...\n+    ///\n+    ///    if !{\n+    ///       ...\n+    ///       ...\n+    ///       ...\n+    ///    } {\n+    ///        panic!(\n+    ///            \"Assertion failed: ... \\n With expansion: ...\",\n+    ///            __capture0,\n+    ///            ...\n+    ///            ...\n+    ///            ...\n+    ///        );\n+    ///    }\n+    /// }\n+    pub(super) fn build(self, _cond_expr: P<Expr>, _panic_path: Path) -> P<Expr> {\n+        let Self { cx, span, .. } = self;\n+        let stmts = Vec::new();\n+        cx.expr_block(cx.block(span, stmts))\n+    }\n+}"}, {"sha": "48b1470ced5a05716181d6394ee0bb82ef5a48da", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,17 +1,18 @@\n //! This crate contains implementations of built-in macros and other code generating facilities\n //! injecting code into the crate before it is lowered to HIR.\n \n+#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(decl_macro)]\n #![feature(is_sorted)]\n-#![feature(nll)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n extern crate proc_macro;\n "}, {"sha": "e73c31c98fe32040a4cd21aac375b43947e03a22", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -160,7 +160,7 @@ impl<'a> ExtCtxt<'a> {\n             attrs: AttrVec::new(),\n             tokens: None,\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n+        self.stmt_local(local, sp)\n     }\n \n     // Generates `let _: Type;`, which is usually used for type assertions.\n@@ -174,6 +174,10 @@ impl<'a> ExtCtxt<'a> {\n             attrs: AttrVec::new(),\n             tokens: None,\n         });\n+        self.stmt_local(local, span)\n+    }\n+\n+    pub fn stmt_local(&self, local: P<ast::Local>, span: Span) -> ast::Stmt {\n         ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span }\n     }\n "}, {"sha": "1466e8dfc92e4d59a36ae587b9b1d3aedbf32419", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -150,6 +150,8 @@ declare_features! (\n     (active, allow_internal_unstable, \"1.0.0\", None, None),\n     /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n+    /// Outputs useful `assert!` messages\n+    (active, generic_assert, \"1.63.0\", None, None),\n     /// Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic."}, {"sha": "5f301962061d8923cb9b17ed24d5643e6c62e595", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -733,6 +733,7 @@ symbols! {\n         generator_state,\n         generators,\n         generic_arg_infer,\n+        generic_assert,\n         generic_associated_types,\n         generic_associated_types_extended,\n         generic_const_exprs,"}, {"sha": "63655ae8a240b70790d0478cdc857c92e617c47d", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -2233,35 +2233,41 @@ impl Display for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        /// Since the formatting will be identical for all pointer types, use a non-monomorphized\n-        /// implementation for the actual formatting to reduce the amount of codegen work needed\n-        fn inner(ptr: *const (), f: &mut Formatter<'_>) -> Result {\n-            let old_width = f.width;\n-            let old_flags = f.flags;\n-\n-            // The alternate flag is already treated by LowerHex as being special-\n-            // it denotes whether to prefix with 0x. We use it to work out whether\n-            // or not to zero extend, and then unconditionally set it to get the\n-            // prefix.\n-            if f.alternate() {\n-                f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n-\n-                if f.width.is_none() {\n-                    f.width = Some((usize::BITS / 4) as usize + 2);\n-                }\n-            }\n-            f.flags |= 1 << (FlagV1::Alternate as u32);\n+        // Cast is needed here because `.addr()` requires `T: Sized`.\n+        pointer_fmt_inner((*self as *const ()).addr(), f)\n+    }\n+}\n \n-            let ret = LowerHex::fmt(&(ptr.addr()), f);\n+/// Since the formatting will be identical for all pointer types, use a non-monomorphized\n+/// implementation for the actual formatting to reduce the amount of codegen work needed.\n+///\n+/// This uses `ptr_addr: usize` and not `ptr: *const ()` to be able to use this for\n+/// `fn(...) -> ...` without using [problematic] \"Oxford Casts\".\n+///\n+/// [problematic]: https://github.com/rust-lang/rust/issues/95489\n+pub(crate) fn pointer_fmt_inner(ptr_addr: usize, f: &mut Formatter<'_>) -> Result {\n+    let old_width = f.width;\n+    let old_flags = f.flags;\n \n-            f.width = old_width;\n-            f.flags = old_flags;\n+    // The alternate flag is already treated by LowerHex as being special-\n+    // it denotes whether to prefix with 0x. We use it to work out whether\n+    // or not to zero extend, and then unconditionally set it to get the\n+    // prefix.\n+    if f.alternate() {\n+        f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n \n-            ret\n+        if f.width.is_none() {\n+            f.width = Some((usize::BITS / 4) as usize + 2);\n         }\n-\n-        inner(*self as *const (), f)\n     }\n+    f.flags |= 1 << (FlagV1::Alternate as u32);\n+\n+    let ret = LowerHex::fmt(&ptr_addr, f);\n+\n+    f.width = old_width;\n+    f.flags = old_flags;\n+\n+    ret\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5b04ae7b07e69ecdc63ea76a6ac37dea5579659f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1878,24 +1878,14 @@ macro_rules! fnptr_impls_safety_abi {\n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                // HACK: The intermediate cast as usize is required for AVR\n-                // so that the address space of the source function pointer\n-                // is preserved in the final function pointer.\n-                //\n-                // https://github.com/avr-rust/rust/issues/143\n-                fmt::Pointer::fmt(&(*self as usize as *const ()), f)\n+                fmt::pointer_fmt_inner(*self as usize, f)\n             }\n         }\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                // HACK: The intermediate cast as usize is required for AVR\n-                // so that the address space of the source function pointer\n-                // is preserved in the final function pointer.\n-                //\n-                // https://github.com/avr-rust/rust/issues/143\n-                fmt::Pointer::fmt(&(*self as usize as *const ()), f)\n+                fmt::pointer_fmt_inner(*self as usize, f)\n             }\n         }\n     }"}, {"sha": "f1c5eaad868e99d495224fd2cee4111f4e9c17b6", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -703,12 +703,11 @@ pub enum Delimiter {\n     /// `[ ... ]`\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Bracket,\n-    /// `/*\u00ab*/ ... /*\u00bb*/`\n+    /// `\u00d8 ... \u00d8`\n     /// An invisible delimiter, that may, for example, appear around tokens coming from a\n     /// \"macro variable\" `$var`. It is important to preserve operator priorities in cases like\n     /// `$var * 3` where `$var` is `1 + 2`.\n-    /// Invisible delimiters are not directly writable in normal Rust code except as comments.\n-    /// Therefore, they might not survive a roundtrip of a token stream through a string.\n+    /// Invisible delimiters might not survive roundtrip of a token stream through a string.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     None,\n }"}, {"sha": "51a2abc50bc2b2e4c787b49fa7888b0706be1b5e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -10,7 +10,7 @@ use std::fmt;\n use rustc_ast::ast;\n use rustc_hir::{def::CtorKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::Pos;\n+use rustc_span::{Pos, Symbol};\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n use rustdoc_json_types::*;\n@@ -29,7 +29,9 @@ impl JsonRenderer<'_> {\n             .get(&item.item_id)\n             .into_iter()\n             .flatten()\n-            .map(|clean::ItemLink { link, did, .. }| (link.clone(), from_item_id((*did).into())))\n+            .map(|clean::ItemLink { link, did, .. }| {\n+                (link.clone(), from_item_id((*did).into(), self.tcx))\n+            })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n         let attrs = item\n@@ -45,7 +47,7 @@ impl JsonRenderer<'_> {\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n-            id: from_item_id(item_id),\n+            id: from_item_id_with_name(item_id, self.tcx, name),\n             crate_id: item_id.krate().as_u32(),\n             name: name.map(|sym| sym.to_string()),\n             span: self.convert_span(span),\n@@ -84,7 +86,7 @@ impl JsonRenderer<'_> {\n             Inherited => Visibility::Default,\n             Restricted(did) if did.is_crate_root() => Visibility::Crate,\n             Restricted(did) => Visibility::Restricted {\n-                parent: from_item_id(did.into()),\n+                parent: from_item_id(did.into(), self.tcx),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n@@ -173,22 +175,39 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n     }\n }\n \n-pub(crate) fn from_item_id(item_id: ItemId) -> Id {\n-    struct DisplayDefId(DefId);\n+/// It generates an ID as follows:\n+///\n+/// `CRATE_ID:ITEM_ID[:NAME_ID]` (if there is no name, NAME_ID is not generated).\n+pub(crate) fn from_item_id(item_id: ItemId, tcx: TyCtxt<'_>) -> Id {\n+    from_item_id_with_name(item_id, tcx, None)\n+}\n+\n+// FIXME: this function (and appending the name at the end of the ID) should be removed when\n+// reexports are not inlined anymore for json format. It should be done in #93518.\n+pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Option<Symbol>) -> Id {\n+    struct DisplayDefId<'a>(DefId, TyCtxt<'a>, Option<Symbol>);\n \n-    impl fmt::Display for DisplayDefId {\n+    impl<'a> fmt::Display for DisplayDefId<'a> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            write!(f, \"{}:{}\", self.0.krate.as_u32(), u32::from(self.0.index))\n+            let name = match self.2 {\n+                Some(name) => format!(\":{}\", name.as_u32()),\n+                None => self\n+                    .1\n+                    .opt_item_name(self.0)\n+                    .map(|n| format!(\":{}\", n.as_u32()))\n+                    .unwrap_or_default(),\n+            };\n+            write!(f, \"{}:{}{}\", self.0.krate.as_u32(), u32::from(self.0.index), name)\n         }\n     }\n \n     match item_id {\n-        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did))),\n+        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did, tcx, name))),\n         ItemId::Blanket { for_, impl_id } => {\n-            Id(format!(\"b:{}-{}\", DisplayDefId(impl_id), DisplayDefId(for_)))\n+            Id(format!(\"b:{}-{}\", DisplayDefId(impl_id, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n         ItemId::Auto { for_, trait_ } => {\n-            Id(format!(\"a:{}-{}\", DisplayDefId(trait_), DisplayDefId(for_)))\n+            Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n         ItemId::Primitive(ty, krate) => Id(format!(\"p:{}:{}\", krate.as_u32(), ty.as_sym())),\n     }\n@@ -201,7 +220,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n     let header = item.fn_header(tcx);\n \n     match *item.kind {\n-        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items) }),\n+        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items, tcx) }),\n         ImportItem(i) => ItemEnum::Import(i.into_tcx(tcx)),\n         StructItem(s) => ItemEnum::Struct(s.into_tcx(tcx)),\n         UnionItem(u) => ItemEnum::Union(u.into_tcx(tcx)),\n@@ -255,7 +274,7 @@ impl FromWithTcx<clean::Struct> for Struct {\n             struct_type: from_ctor_kind(struct_type),\n             generics: generics.into_tcx(tcx),\n             fields_stripped,\n-            fields: ids(fields),\n+            fields: ids(fields, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -268,7 +287,7 @@ impl FromWithTcx<clean::Union> for Union {\n         Union {\n             generics: generics.into_tcx(tcx),\n             fields_stripped,\n-            fields: ids(fields),\n+            fields: ids(fields, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -413,7 +432,7 @@ impl FromWithTcx<clean::Type> for Type {\n         match ty {\n             clean::Type::Path { path } => Type::ResolvedPath {\n                 name: path.whole_name(),\n-                id: from_item_id(path.def_id().into()),\n+                id: from_item_id(path.def_id().into(), tcx),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: Vec::new(),\n             },\n@@ -422,7 +441,7 @@ impl FromWithTcx<clean::Type> for Type {\n \n                 Type::ResolvedPath {\n                     name: first_trait.whole_name(),\n-                    id: from_item_id(first_trait.def_id().into()),\n+                    id: from_item_id(first_trait.def_id().into(), tcx),\n                     args: first_trait\n                         .segments\n                         .last()\n@@ -517,7 +536,7 @@ impl FromWithTcx<clean::Trait> for Trait {\n         Trait {\n             is_auto,\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n-            items: ids(items),\n+            items: ids(items, tcx),\n             generics: generics.into_tcx(tcx),\n             bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             implementations: Vec::new(), // Added in JsonRenderer::item\n@@ -550,7 +569,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n                 .collect(),\n             trait_,\n             for_: for_.into_tcx(tcx),\n-            items: ids(items),\n+            items: ids(items, tcx),\n             negative: negative_polarity,\n             synthetic,\n             blanket_impl: blanket_impl.map(|x| x.into_tcx(tcx)),\n@@ -593,21 +612,21 @@ impl FromWithTcx<clean::Enum> for Enum {\n         Enum {\n             generics: generics.into_tcx(tcx),\n             variants_stripped,\n-            variants: ids(variants),\n+            variants: ids(variants, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n }\n \n impl FromWithTcx<clean::VariantStruct> for Struct {\n-    fn from_tcx(struct_: clean::VariantStruct, _tcx: TyCtxt<'_>) -> Self {\n+    fn from_tcx(struct_: clean::VariantStruct, tcx: TyCtxt<'_>) -> Self {\n         let fields_stripped = struct_.has_stripped_entries();\n         let clean::VariantStruct { struct_type, fields } = struct_;\n         Struct {\n             struct_type: from_ctor_kind(struct_type),\n             generics: Default::default(),\n             fields_stripped,\n-            fields: ids(fields),\n+            fields: ids(fields, tcx),\n             impls: Vec::new(),\n         }\n     }\n@@ -630,25 +649,25 @@ impl FromWithTcx<clean::Variant> for Variant {\n                     })\n                     .collect(),\n             ),\n-            Struct(s) => Variant::Struct(ids(s.fields)),\n+            Struct(s) => Variant::Struct(ids(s.fields, tcx)),\n         }\n     }\n }\n \n impl FromWithTcx<clean::Import> for Import {\n-    fn from_tcx(import: clean::Import, _tcx: TyCtxt<'_>) -> Self {\n+    fn from_tcx(import: clean::Import, tcx: TyCtxt<'_>) -> Self {\n         use clean::ImportKind::*;\n         match import.kind {\n             Simple(s) => Import {\n                 source: import.source.path.whole_name(),\n                 name: s.to_string(),\n-                id: import.source.did.map(ItemId::from).map(from_item_id),\n+                id: import.source.did.map(ItemId::from).map(|i| from_item_id(i, tcx)),\n                 glob: false,\n             },\n             Glob => Import {\n                 source: import.source.path.whole_name(),\n                 name: import.source.path.last().to_string(),\n-                id: import.source.did.map(ItemId::from).map(from_item_id),\n+                id: import.source.did.map(ItemId::from).map(|i| from_item_id(i, tcx)),\n                 glob: true,\n             },\n         }\n@@ -742,6 +761,10 @@ impl FromWithTcx<ItemType> for ItemKind {\n     }\n }\n \n-fn ids(items: impl IntoIterator<Item = clean::Item>) -> Vec<Id> {\n-    items.into_iter().filter(|x| !x.is_stripped()).map(|i| from_item_id(i.item_id)).collect()\n+fn ids(items: impl IntoIterator<Item = clean::Item>, tcx: TyCtxt<'_>) -> Vec<Id> {\n+    items\n+        .into_iter()\n+        .filter(|x| !x.is_stripped())\n+        .map(|i| from_item_id_with_name(i.item_id, tcx, i.name))\n+        .collect()\n }"}, {"sha": "f338050bee0f9bf78fb5bafc3a911f0fc5886a35", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n+use rustc_span::def_id::LOCAL_CRATE;\n \n use rustdoc_json_types as types;\n \n@@ -25,7 +26,7 @@ use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n-use crate::json::conversions::{from_item_id, IntoWithTcx};\n+use crate::json::conversions::{from_item_id, from_item_id_with_name, IntoWithTcx};\n use crate::{clean, try_err};\n \n #[derive(Clone)]\n@@ -54,7 +55,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                     .map(|i| {\n                         let item = &i.impl_item;\n                         self.item(item.clone()).unwrap();\n-                        from_item_id(item.item_id)\n+                        from_item_id_with_name(item.item_id, self.tcx, item.name)\n                     })\n                     .collect()\n             })\n@@ -86,7 +87,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n \n                         if item.item_id.is_local() || is_primitive_impl {\n                             self.item(item.clone()).unwrap();\n-                            Some(from_item_id(item.item_id))\n+                            Some(from_item_id_with_name(item.item_id, self.tcx, item.name))\n                         } else {\n                             None\n                         }\n@@ -105,10 +106,11 @@ impl<'tcx> JsonRenderer<'tcx> {\n                 if !id.is_local() {\n                     let trait_item = &trait_item.trait_;\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n+                    let item_id = from_item_id(id.into(), self.tcx);\n                     Some((\n-                        from_item_id(id.into()),\n+                        item_id.clone(),\n                         types::Item {\n-                            id: from_item_id(id.into()),\n+                            id: item_id,\n                             crate_id: id.krate.as_u32(),\n                             name: self\n                                 .cache\n@@ -176,6 +178,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         // Flatten items that recursively store other items\n         item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n \n+        let name = item.name;\n         let item_id = item.item_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n             if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n@@ -187,7 +190,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             } else if let types::ItemEnum::Union(ref mut u) = new_item.inner {\n                 u.impls = self.get_impls(item_id.expect_def_id())\n             }\n-            let removed = self.index.borrow_mut().insert(from_item_id(item_id), new_item.clone());\n+            let removed = self\n+                .index\n+                .borrow_mut()\n+                .insert(from_item_id_with_name(item_id, self.tcx, name), new_item.clone());\n \n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n             // to make sure the items are unique. The main place this happens is when an item, is\n@@ -211,13 +217,15 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             self.get_impls(*primitive);\n         }\n \n+        let e = ExternalCrate { crate_num: LOCAL_CRATE };\n+\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());\n         // This needs to be the default HashMap for compatibility with the public interface for\n         // rustdoc-json-types\n         #[allow(rustc::default_hash_types)]\n         let output = types::Crate {\n-            root: types::Id(String::from(\"0:0\")),\n+            root: types::Id(format!(\"0:0:{}\", e.name(self.tcx).as_u32())),\n             crate_version: self.cache.crate_version.clone(),\n             includes_private: self.cache.document_private,\n             index: index.into_iter().collect(),\n@@ -229,7 +237,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(self.cache.external_paths.clone().into_iter())\n                 .map(|(k, (path, kind))| {\n                     (\n-                        from_item_id(k.into()),\n+                        from_item_id(k.into(), self.tcx),\n                         types::ItemSummary {\n                             crate_id: k.krate.as_u32(),\n                             path: path.iter().map(|s| s.to_string()).collect(),"}, {"sha": "00553d3f007fffb44fb66ba4d1426ce065023ad9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -286,8 +286,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     self.visit_foreign_item(item, None, om);\n                 }\n             }\n-            // If we're inlining, skip private items.\n-            _ if self.inlining && !is_pub => {}\n+            // If we're inlining, skip private items or item reexported as \"_\".\n+            _ if self.inlining && (!is_pub || renamed == Some(kw::Underscore)) => {}\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::Use(_, hir::UseKind::ListStem) => {}\n             hir::ItemKind::Use(path, kind) => {"}, {"sha": "fd6ac8372d976ed3e30c3ce558bd98afaab68715", "filename": "src/test/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/97432.\n+\n+#![feature(no_core)]\n+#![no_std]\n+#![no_core]\n+\n+// @has same_type_reexported_more_than_once.json\n+// @set trait_id = - \"$.index[*][?(@.name=='Trait')].id\"\n+// @has - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $trait_id\n+pub use inner::Trait;\n+// @set reexport_id = - \"$.index[*][?(@.name=='Reexport')].id\"\n+// @has - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id\n+pub use inner::Trait as Reexport;\n+\n+mod inner {\n+    pub trait Trait {}\n+}"}, {"sha": "6b884ff14df19b7cb4219fefb28d5de891a9feca", "filename": "src/test/rustdoc/anonymous-reexport.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Frustdoc%2Fanonymous-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Frustdoc%2Fanonymous-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanonymous-reexport.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -0,0 +1,22 @@\n+#![crate_name = \"foo\"]\n+\n+// This test ensures we don't display anonymous (non-inline) re-exports of public items.\n+\n+// @has 'foo/index.html'\n+// @has - '//*[@id=\"main-content\"]' ''\n+// We check that the only \"h2\" present is for \"Bla\".\n+// @count - '//*[@id=\"main-content\"]/h2' 1\n+// @has - '//*[@id=\"main-content\"]/h2' 'Structs'\n+// @count - '//*[@id=\"main-content\"]//a[@class=\"struct\"]' 1\n+\n+mod ext {\n+    pub trait Foo {}\n+    pub trait Bar {}\n+    pub struct S;\n+}\n+\n+pub use crate::ext::Foo as _;\n+pub use crate::ext::Bar as _;\n+pub use crate::ext::S as _;\n+\n+pub struct Bla;"}, {"sha": "2bc34f3c6bfc072a427d6041e3249ce4faa41117", "filename": "src/test/ui/proc-macro/auxiliary/expand-expr.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-expr.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -12,15 +12,6 @@ use std::str::FromStr;\n \n #[proc_macro]\n pub fn expand_expr_is(input: TokenStream) -> TokenStream {\n-    expand_expr_is_inner(input, false)\n-}\n-\n-#[proc_macro]\n-pub fn expand_expr_is_trim(input: TokenStream) -> TokenStream {\n-    expand_expr_is_inner(input, true)\n-}\n-\n-fn expand_expr_is_inner(input: TokenStream, trim_invisible: bool) -> TokenStream {\n     let mut iter = input.into_iter();\n     let mut expected_tts = Vec::new();\n     loop {\n@@ -31,18 +22,14 @@ fn expand_expr_is_inner(input: TokenStream, trim_invisible: bool) -> TokenStream\n         }\n     }\n \n-    // If requested, trim the \"invisible\" delimiters at the start and end.\n-    let expected = expected_tts.into_iter().collect::<TokenStream>().to_string();\n-    let expected = if trim_invisible {\n-        let len1 = \"/*\u00ab*/ \".len();\n-        let len2 = \" /*\u00bb*/\".len();\n-        &expected[len1..expected.len() - len2]\n-    } else {\n-        &expected[..]\n-    };\n-    let expanded = iter.collect::<TokenStream>().expand_expr().unwrap().to_string();\n-\n-    assert_eq!(expected, expanded);\n+    let expected = expected_tts.into_iter().collect::<TokenStream>();\n+    let expanded = iter.collect::<TokenStream>().expand_expr().expect(\"expand_expr failed\");\n+    assert!(\n+        expected.to_string() == expanded.to_string(),\n+        \"assert failed\\nexpected: `{}`\\nexpanded: `{}`\",\n+        expected.to_string(),\n+        expanded.to_string()\n+    );\n \n     TokenStream::new()\n }"}, {"sha": "4de8746a1b4602b64cbcbb9c101563dae7f64b31", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): self\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ self /*\u00bb*/\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,\n@@ -14,10 +13,8 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n ]\n PRINT-BANG INPUT (DISPLAY): 1 + 1, { \"a\" }, let a = 1;, String, my_name, 'a, my_val = 30,\n std::option::Option, pub(in some::path) , [a b c], -30\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ 1 + 1 /*\u00bb*/, /*\u00ab*/ { \"a\" } /*\u00bb*/, /*\u00ab*/ let a = 1 /*\u00bb*/, /*\u00ab*/\n-String /*\u00bb*/, my_name, /*\u00ab*/ 'a /*\u00bb*/, /*\u00ab*/ my_val = 30 /*\u00bb*/, /*\u00ab*/\n-std :: option :: Option /*\u00bb*/, /*\u00ab*/ pub(in some :: path) /*\u00bb*/, [a b c],\n-/*\u00ab*/ - 30 /*\u00bb*/\n+PRINT-BANG RE-COLLECTED (DISPLAY): 1 + 1, { \"a\" }, let a = 1, String, my_name, 'a, my_val = 30,\n+std :: option :: Option, pub(in some :: path), [a b c], - 30\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,\n@@ -298,7 +295,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): (a, b)\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ (a, b) /*\u00bb*/\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "7e6b540332c7963c95654412c6378c84e7d01400", "filename": "src/test/ui/proc-macro/capture-unglued-token.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-unglued-token.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-unglued-token.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-unglued-token.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,5 +1,5 @@\n PRINT-BANG INPUT (DISPLAY): Vec<u8>\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ Vec < u8 > /*\u00bb*/\n+PRINT-BANG RE-COLLECTED (DISPLAY): Vec < u8 >\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "d1146d970306264b1485cfc6f243bd51134a62f4", "filename": "src/test/ui/proc-macro/expand-expr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -2,9 +2,9 @@\n \n extern crate expand_expr;\n \n-use expand_expr::{check_expand_expr_file, echo_pm, expand_expr_fail, expand_expr_is};\n-use expand_expr::{expand_expr_is_trim, recursive_expand};\n-\n+use expand_expr::{\n+    check_expand_expr_file, echo_pm, expand_expr_fail, expand_expr_is, recursive_expand,\n+};\n \n // Check builtin macros can be expanded.\n \n@@ -47,21 +47,21 @@ macro_rules! echo_expr {\n \n macro_rules! simple_lit {\n     ($l:literal) => {\n-        expand_expr_is_trim!($l, $l);\n-        expand_expr_is_trim!($l, echo_lit!($l));\n-        expand_expr_is_trim!($l, echo_expr!($l));\n-        expand_expr_is_trim!($l, echo_tts!($l));\n-        expand_expr_is_trim!($l, echo_pm!($l));\n+        expand_expr_is!($l, $l);\n+        expand_expr_is!($l, echo_lit!($l));\n+        expand_expr_is!($l, echo_expr!($l));\n+        expand_expr_is!($l, echo_tts!($l));\n+        expand_expr_is!($l, echo_pm!($l));\n         const _: () = {\n             macro_rules! mac {\n                 () => {\n                     $l\n                 };\n             }\n-            expand_expr_is_trim!($l, mac!());\n-            expand_expr_is_trim!($l, echo_expr!(mac!()));\n-            expand_expr_is_trim!($l, echo_tts!(mac!()));\n-            expand_expr_is_trim!($l, echo_pm!(mac!()));\n+            expand_expr_is!($l, mac!());\n+            expand_expr_is!($l, echo_expr!(mac!()));\n+            expand_expr_is!($l, echo_tts!(mac!()));\n+            expand_expr_is!($l, echo_pm!(mac!()));\n         };\n     };\n }"}, {"sha": "686d53e8876608a322b87badfbd6f4cd5b0b580f", "filename": "src/test/ui/proc-macro/expr-stmt-nonterminal-tokens.stdout", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,6 +1,5 @@\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = #[allow(warnings)] 0 ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E\n-{ V = { let _ = /*\u00ab*/ #[allow(warnings)] #[allow(warnings)] 0 /*\u00bb*/ ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = #[allow(warnings)] #[allow(warnings)] 0 ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -124,7 +123,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { 0; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ 0 /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { 0 } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -204,7 +203,6 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { {} } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ {} /*\u00bb*/ } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -283,7 +281,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { PATH; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ PATH /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { PATH } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -361,7 +359,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { 0 + 1; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ 0 + 1 /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { 0 + 1 } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -452,7 +450,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { PATH + 1; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ PATH + 1 /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { PATH + 1 } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\","}, {"sha": "0fda6654ff37051f9a4c3c18d72256ee430fb547", "filename": "src/test/ui/proc-macro/issue-75734-pp-paren.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -96,7 +96,6 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): 1 + 1 * 2\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ 1 + 1 /*\u00bb*/ * 2\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "60a400a5deabfd0d57f6b3d4a1dc338aad28f172", "filename": "src/test/ui/proc-macro/issue-78675-captured-inner-attrs.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,7 +1,7 @@\n PRINT-BANG INPUT (DISPLAY): foo! { #[fake_attr] mod bar {\n     #![doc = r\" Foo\"]\n } }\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): foo! { #[fake_attr] /*\u00ab*/ mod bar { #! [doc = r\" Foo\"] } /*\u00bb*/ }\n+PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): foo! { #[fake_attr] mod bar { #! [doc = r\" Foo\"] } }\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"foo\","}, {"sha": "4b7ed874307d8f6c65dc8ad6cfb139945c6e0876", "filename": "src/test/ui/proc-macro/issue-80760-empty-stmt.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-80760-empty-stmt.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-80760-empty-stmt.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-80760-empty-stmt.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): ;\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ ; /*\u00bb*/\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "a3d24dd26fe978f19f3dac03d4f96773b613c215", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.stdout", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,6 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): 0 + 1 + 2 + 3\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ 0 + 1 + 2 /*\u00bb*/ + 3\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): /*\u00ab*/ /*\u00ab*/ /*\u00ab*/ 0 /*\u00bb*/ + 1 /*\u00bb*/ + 2 /*\u00bb*/ + 3\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "6b410f0bfb7e3b856c06f1db4deb0e5248aac630", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): \"hi\" 1 + (25) + 1 (1 + 1)\n-PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" /*\u00ab*/ 1 + (25) + 1 /*\u00bb*/ (1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,\n@@ -72,9 +71,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n-PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" /*\u00ab*/ \"hello\".len() + \"world\".len() /*\u00bb*/ (1 + 1)\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): \"hi\" /*\u00ab*/ /*\u00ab*/ \"hello\".len() /*\u00bb*/ + /*\u00ab*/ \"world\".len() /*\u00bb*/ /*\u00bb*/\n-(1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,"}, {"sha": "4d884348f2ca423df47d1f8aa3b77f28670566a2", "filename": "src/test/ui/proc-macro/nonterminal-expansion.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR_ARGS INPUT (DISPLAY): a, line!(), b\n-PRINT-ATTR_ARGS RE-COLLECTED (DISPLAY): a, /*\u00ab*/ line! () /*\u00bb*/, b\n+PRINT-ATTR_ARGS RE-COLLECTED (DISPLAY): a, line! (), b\n PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"a\","}, {"sha": "c08e5308138c966deb834cceb151ad98e058099f", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,5 +1,5 @@\n PRINT-BANG INPUT (DISPLAY): struct S;\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ struct S ; /*\u00bb*/\n+PRINT-BANG RE-COLLECTED (DISPLAY): struct S ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "354657db4db380f5b068a3f04c1e94793b86a5ef", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -8,16 +8,16 @@ use parent_source_spans::parent_source_spans;\n \n macro one($a:expr, $b:expr) {\n     two!($a, $b);\n-    //~^ ERROR first parent: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second parent: /*\u00ab*/ \"world\" /*\u00bb*/\n+    //~^ ERROR first parent: \"hello\"\n+    //~| ERROR second parent: \"world\"\n }\n \n macro two($a:expr, $b:expr) {\n     three!($a, $b);\n-    //~^ ERROR first final: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second final: /*\u00ab*/ \"world\" /*\u00bb*/\n-    //~| ERROR first final: /*\u00ab*/ \"yay\" /*\u00bb*/\n-    //~| ERROR second final: /*\u00ab*/ \"rust\" /*\u00bb*/\n+    //~^ ERROR first final: \"hello\"\n+    //~| ERROR second final: \"world\"\n+    //~| ERROR first final: \"yay\"\n+    //~| ERROR second final: \"rust\"\n }\n \n // forwarding tokens directly doesn't create a new source chain\n@@ -34,16 +34,16 @@ macro four($($tokens:tt)*) {\n \n fn main() {\n     one!(\"hello\", \"world\");\n-    //~^ ERROR first grandparent: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second grandparent: /*\u00ab*/ \"world\" /*\u00bb*/\n-    //~| ERROR first source: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second source: /*\u00ab*/ \"world\" /*\u00bb*/\n+    //~^ ERROR first grandparent: \"hello\"\n+    //~| ERROR second grandparent: \"world\"\n+    //~| ERROR first source: \"hello\"\n+    //~| ERROR second source: \"world\"\n \n     two!(\"yay\", \"rust\");\n-    //~^ ERROR first parent: /*\u00ab*/ \"yay\" /*\u00bb*/\n-    //~| ERROR second parent: /*\u00ab*/ \"rust\" /*\u00bb*/\n-    //~| ERROR first source: /*\u00ab*/ \"yay\" /*\u00bb*/\n-    //~| ERROR second source: /*\u00ab*/ \"rust\" /*\u00bb*/\n+    //~^ ERROR first parent: \"yay\"\n+    //~| ERROR second parent: \"rust\"\n+    //~| ERROR first source: \"yay\"\n+    //~| ERROR second source: \"rust\"\n \n     three!(\"hip\", \"hop\");\n     //~^ ERROR first final: \"hip\""}, {"sha": "4548269b507930fb1bd407fbca12afc4f5e9f9a8", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -1,4 +1,4 @@\n-error: first final: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first final: \"hello\"\n   --> $DIR/parent-source-spans.rs:16:12\n    |\n LL |     three!($a, $b);\n@@ -9,7 +9,7 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: second final: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:16:16\n    |\n LL |     three!($a, $b);\n@@ -20,7 +20,7 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: first parent: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:10:5\n    |\n LL |     two!($a, $b);\n@@ -31,7 +31,7 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: second parent: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second parent: \"world\"\n   --> $DIR/parent-source-spans.rs:10:5\n    |\n LL |     two!($a, $b);\n@@ -42,31 +42,31 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: first grandparent: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first grandparent: \"hello\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: second grandparent: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second grandparent: \"world\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: first source: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first source: \"hello\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: second source: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second source: \"world\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: first final: /*\u00ab*/ \"yay\" /*\u00bb*/\n+error: first final: \"yay\"\n   --> $DIR/parent-source-spans.rs:16:12\n    |\n LL |     three!($a, $b);\n@@ -77,7 +77,7 @@ LL |     two!(\"yay\", \"rust\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: second final: /*\u00ab*/ \"rust\" /*\u00bb*/\n+error: second final: \"rust\"\n   --> $DIR/parent-source-spans.rs:16:16\n    |\n LL |     three!($a, $b);\n@@ -88,25 +88,25 @@ LL |     two!(\"yay\", \"rust\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: first parent: /*\u00ab*/ \"yay\" /*\u00bb*/\n+error: first parent: \"yay\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: second parent: /*\u00ab*/ \"rust\" /*\u00bb*/\n+error: second parent: \"rust\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: first source: /*\u00ab*/ \"yay\" /*\u00bb*/\n+error: first source: \"yay\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: second source: /*\u00ab*/ \"rust\" /*\u00bb*/\n+error: second source: \"rust\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");"}, {"sha": "f70ca87e304a91961d5b1c62f1b24204d6a9d3e7", "filename": "src/test/ui/rfc-2011-nicer-assert-messages/feature-gate-generic_assert.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e9516c8535c6f41f2d1c444657cd672b4ab81b/src%2Ftest%2Fui%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs?ref=44e9516c8535c6f41f2d1c444657cd672b4ab81b", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: --test\n+// run-pass\n+\n+// `generic_assert` is completely unimplemented and doesn't generate any logic, thus the\n+// reason why this test currently passes\n+#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n+\n+use std::fmt::{Debug, Formatter};\n+\n+#[derive(Clone, Copy, PartialEq)]\n+struct CopyDebug(i32);\n+\n+impl Debug for CopyDebug {\n+  fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {\n+    f.write_str(\"With great power comes great electricity bills\")\n+  }\n+}\n+\n+#[test]\n+fn test() {\n+  let _copy_debug = CopyDebug(1);\n+  assert!(_copy_debug == CopyDebug(3));\n+}\n+\n+fn main() {\n+}"}]}