{"sha": "905644de5db7f73fab275345795562330d007315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNTY0NGRlNWRiN2Y3M2ZhYjI3NTM0NTc5NTU2MjMzMGQwMDczMTU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-24T06:20:51Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T17:28:00Z"}, "message": "Rename {uint,int} methods to {usize,isize}.", "tree": {"sha": "ece3aac1bb15f524dcc5f106fb7552a62e0b4ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece3aac1bb15f524dcc5f106fb7552a62e0b4ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/905644de5db7f73fab275345795562330d007315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/905644de5db7f73fab275345795562330d007315", "html_url": "https://github.com/rust-lang/rust/commit/905644de5db7f73fab275345795562330d007315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/905644de5db7f73fab275345795562330d007315/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "012f45eaf70ca7f5d86e15fb304328786b446da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/012f45eaf70ca7f5d86e15fb304328786b446da9", "html_url": "https://github.com/rust-lang/rust/commit/012f45eaf70ca7f5d86e15fb304328786b446da9"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "adbdc9af9cc8d3bef0d2c70716d181c6b9709b0b", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/905644de5db7f73fab275345795562330d007315/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905644de5db7f73fab275345795562330d007315/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=905644de5db7f73fab275345795562330d007315", "patch": "@@ -726,7 +726,7 @@ pub mod reader {\n         fn read_u8(&mut self) -> DecodeResult<u8> {\n             Ok(doc_as_u8(self.next_doc(EsU8)?))\n         }\n-        fn read_uint(&mut self) -> DecodeResult<usize> {\n+        fn read_usize(&mut self) -> DecodeResult<usize> {\n             let v = self._next_int(EsU8, EsU64)?;\n             if v > (::std::usize::MAX as u64) {\n                 Err(IntTooBig(v as usize))\n@@ -747,7 +747,7 @@ pub mod reader {\n         fn read_i8(&mut self) -> DecodeResult<i8> {\n             Ok(doc_as_u8(self.next_doc(EsI8)?) as i8)\n         }\n-        fn read_int(&mut self) -> DecodeResult<isize> {\n+        fn read_isize(&mut self) -> DecodeResult<isize> {\n             let v = self._next_int(EsI8, EsI64)? as i64;\n             if v > (isize::MAX as i64) || v < (isize::MIN as i64) {\n                 debug!(\"FIXME \\\\#6122: Removing this makes this function miscompile\");\n@@ -1219,7 +1219,7 @@ pub mod writer {\n             Ok(())\n         }\n \n-        fn emit_uint(&mut self, v: usize) -> EncodeResult {\n+        fn emit_usize(&mut self, v: usize) -> EncodeResult {\n             self.emit_u64(v as u64)\n         }\n         fn emit_u64(&mut self, v: u64) -> EncodeResult {\n@@ -1247,7 +1247,7 @@ pub mod writer {\n             self.wr_tagged_raw_u8(EsU8 as usize, v)\n         }\n \n-        fn emit_int(&mut self, v: isize) -> EncodeResult {\n+        fn emit_isize(&mut self, v: isize) -> EncodeResult {\n             self.emit_i64(v as i64)\n         }\n         fn emit_i64(&mut self, v: i64) -> EncodeResult {"}, {"sha": "6dc7a72b1b1bb0d234a50f128e820934f5c573e9", "filename": "src/librbml/opaque.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/905644de5db7f73fab275345795562330d007315/src%2Flibrbml%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905644de5db7f73fab275345795562330d007315/src%2Flibrbml%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fopaque.rs?ref=905644de5db7f73fab275345795562330d007315", "patch": "@@ -54,7 +54,7 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n         Ok(())\n     }\n \n-    fn emit_uint(&mut self, v: usize) -> EncodeResult {\n+    fn emit_usize(&mut self, v: usize) -> EncodeResult {\n         write_uleb128!(self, v)\n     }\n \n@@ -75,7 +75,7 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n         Ok(())\n     }\n \n-    fn emit_int(&mut self, v: isize) -> EncodeResult {\n+    fn emit_isize(&mut self, v: isize) -> EncodeResult {\n         write_sleb128!(self, v)\n     }\n \n@@ -120,7 +120,7 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n     }\n \n     fn emit_str(&mut self, v: &str) -> EncodeResult {\n-        self.emit_uint(v.len())?;\n+        self.emit_usize(v.len())?;\n         let _ = self.cursor.write_all(v.as_bytes());\n         Ok(())\n     }\n@@ -139,7 +139,7 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n                             -> EncodeResult\n         where F: FnOnce(&mut Self) -> EncodeResult\n     {\n-        self.emit_uint(v_id)?;\n+        self.emit_usize(v_id)?;\n         f(self)\n     }\n \n@@ -221,7 +221,7 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n     fn emit_seq<F>(&mut self, len: usize, f: F) -> EncodeResult\n         where F: FnOnce(&mut Encoder<'a>) -> EncodeResult\n     {\n-        self.emit_uint(len)?;\n+        self.emit_usize(len)?;\n         f(self)\n     }\n \n@@ -234,7 +234,7 @@ impl<'a> serialize::Encoder for Encoder<'a> {\n     fn emit_map<F>(&mut self, len: usize, f: F) -> EncodeResult\n         where F: FnOnce(&mut Encoder<'a>) -> EncodeResult\n     {\n-        self.emit_uint(len)?;\n+        self.emit_usize(len)?;\n         f(self)\n     }\n \n@@ -329,7 +329,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n         Ok(value)\n     }\n \n-    fn read_uint(&mut self) -> Result<usize, Self::Error> {\n+    fn read_usize(&mut self) -> Result<usize, Self::Error> {\n         read_uleb128!(self, usize)\n     }\n \n@@ -351,7 +351,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n         unsafe { Ok(::std::mem::transmute(as_u8)) }\n     }\n \n-    fn read_int(&mut self) -> Result<isize, Self::Error> {\n+    fn read_isize(&mut self) -> Result<isize, Self::Error> {\n         read_sleb128!(self, isize)\n     }\n \n@@ -376,7 +376,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     fn read_str(&mut self) -> Result<String, Self::Error> {\n-        let len = self.read_uint()?;\n+        let len = self.read_usize()?;\n         let s = ::std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n         self.position += len;\n         Ok(s.to_string())\n@@ -391,7 +391,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     fn read_enum_variant<T, F>(&mut self, _: &[&str], mut f: F) -> Result<T, Self::Error>\n         where F: FnMut(&mut Decoder<'a>, usize) -> Result<T, Self::Error>\n     {\n-        let disr = self.read_uint()?;\n+        let disr = self.read_usize()?;\n         f(self, disr)\n     }\n \n@@ -404,7 +404,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     fn read_enum_struct_variant<T, F>(&mut self, _: &[&str], mut f: F) -> Result<T, Self::Error>\n         where F: FnMut(&mut Decoder<'a>, usize) -> Result<T, Self::Error>\n     {\n-        let disr = self.read_uint()?;\n+        let disr = self.read_usize()?;\n         f(self, disr)\n     }\n \n@@ -483,7 +483,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     fn read_seq<T, F>(&mut self, f: F) -> Result<T, Self::Error>\n         where F: FnOnce(&mut Decoder<'a>, usize) -> Result<T, Self::Error>\n     {\n-        let len = self.read_uint()?;\n+        let len = self.read_usize()?;\n         f(self, len)\n     }\n \n@@ -496,7 +496,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     fn read_map<T, F>(&mut self, f: F) -> Result<T, Self::Error>\n         where F: FnOnce(&mut Decoder<'a>, usize) -> Result<T, Self::Error>\n     {\n-        let len = self.read_uint()?;\n+        let len = self.read_usize()?;\n         f(self, len)\n     }\n "}, {"sha": "7b5092e8848e4072a40dd88f9d6712006a48706b", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/905644de5db7f73fab275345795562330d007315/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905644de5db7f73fab275345795562330d007315/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=905644de5db7f73fab275345795562330d007315", "patch": "@@ -136,15 +136,15 @@ impl<\n         for item in self {\n             bits |= item.to_usize();\n         }\n-        s.emit_uint(bits)\n+        s.emit_usize(bits)\n     }\n }\n \n impl<\n     T: Decodable + CLike\n > Decodable for EnumSet<T> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<EnumSet<T>, D::Error> {\n-        let bits = d.read_uint()?;\n+        let bits = d.read_usize()?;\n         let mut set = EnumSet::new();\n         for bit in 0..(mem::size_of::<usize>()*8) {\n             if bits & (1 << bit) != 0 {"}, {"sha": "34df594e847568b7fe5e70b3d81f1eecc2c38e85", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/905644de5db7f73fab275345795562330d007315/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905644de5db7f73fab275345795562330d007315/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=905644de5db7f73fab275345795562330d007315", "patch": "@@ -495,13 +495,13 @@ impl<'a> ::Encoder for Encoder<'a> {\n         Ok(())\n     }\n \n-    fn emit_uint(&mut self, v: usize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n+    fn emit_usize(&mut self, v: usize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u64(&mut self, v: u64) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u32(&mut self, v: u32) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u16(&mut self, v: u16) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u8(&mut self, v: u8) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n \n-    fn emit_int(&mut self, v: isize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n+    fn emit_isize(&mut self, v: isize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_i64(&mut self, v: i64) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_i32(&mut self, v: i32) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_i16(&mut self, v: i16) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n@@ -743,13 +743,13 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n         Ok(())\n     }\n \n-    fn emit_uint(&mut self, v: usize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n+    fn emit_usize(&mut self, v: usize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u64(&mut self, v: u64) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u32(&mut self, v: u32) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u16(&mut self, v: u16) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_u8(&mut self, v: u8) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n \n-    fn emit_int(&mut self, v: isize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n+    fn emit_isize(&mut self, v: isize) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_i64(&mut self, v: i64) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_i32(&mut self, v: i32) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n     fn emit_i16(&mut self, v: i16) -> EncodeResult { emit_enquoted_if_mapkey!(self, v) }\n@@ -2137,12 +2137,12 @@ impl ::Decoder for Decoder {\n         expect!(self.pop(), Null)\n     }\n \n-    read_primitive! { read_uint, usize }\n+    read_primitive! { read_usize, usize }\n     read_primitive! { read_u8, u8 }\n     read_primitive! { read_u16, u16 }\n     read_primitive! { read_u32, u32 }\n     read_primitive! { read_u64, u64 }\n-    read_primitive! { read_int, isize }\n+    read_primitive! { read_isize, isize }\n     read_primitive! { read_i8, i8 }\n     read_primitive! { read_i16, i16 }\n     read_primitive! { read_i32, i32 }"}, {"sha": "b75ec5dad8ddd7088a9539288b551f886ee35c58", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/905644de5db7f73fab275345795562330d007315/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/905644de5db7f73fab275345795562330d007315/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=905644de5db7f73fab275345795562330d007315", "patch": "@@ -24,12 +24,12 @@ pub trait Encoder {\n \n     // Primitive types:\n     fn emit_nil(&mut self) -> Result<(), Self::Error>;\n-    fn emit_uint(&mut self, v: usize) -> Result<(), Self::Error>;\n+    fn emit_usize(&mut self, v: usize) -> Result<(), Self::Error>;\n     fn emit_u64(&mut self, v: u64) -> Result<(), Self::Error>;\n     fn emit_u32(&mut self, v: u32) -> Result<(), Self::Error>;\n     fn emit_u16(&mut self, v: u16) -> Result<(), Self::Error>;\n     fn emit_u8(&mut self, v: u8) -> Result<(), Self::Error>;\n-    fn emit_int(&mut self, v: isize) -> Result<(), Self::Error>;\n+    fn emit_isize(&mut self, v: isize) -> Result<(), Self::Error>;\n     fn emit_i64(&mut self, v: i64) -> Result<(), Self::Error>;\n     fn emit_i32(&mut self, v: i32) -> Result<(), Self::Error>;\n     fn emit_i16(&mut self, v: i16) -> Result<(), Self::Error>;\n@@ -108,12 +108,12 @@ pub trait Decoder {\n \n     // Primitive types:\n     fn read_nil(&mut self) -> Result<(), Self::Error>;\n-    fn read_uint(&mut self) -> Result<usize, Self::Error>;\n+    fn read_usize(&mut self) -> Result<usize, Self::Error>;\n     fn read_u64(&mut self) -> Result<u64, Self::Error>;\n     fn read_u32(&mut self) -> Result<u32, Self::Error>;\n     fn read_u16(&mut self) -> Result<u16, Self::Error>;\n     fn read_u8(&mut self) -> Result<u8, Self::Error>;\n-    fn read_int(&mut self) -> Result<isize, Self::Error>;\n+    fn read_isize(&mut self) -> Result<isize, Self::Error>;\n     fn read_i64(&mut self) -> Result<i64, Self::Error>;\n     fn read_i32(&mut self) -> Result<i32, Self::Error>;\n     fn read_i16(&mut self) -> Result<i16, Self::Error>;\n@@ -200,13 +200,13 @@ pub trait Decodable: Sized {\n \n impl Encodable for usize {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_uint(*self)\n+        s.emit_usize(*self)\n     }\n }\n \n impl Decodable for usize {\n     fn decode<D: Decoder>(d: &mut D) -> Result<usize, D::Error> {\n-        d.read_uint()\n+        d.read_usize()\n     }\n }\n \n@@ -260,13 +260,13 @@ impl Decodable for u64 {\n \n impl Encodable for isize {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_int(*self)\n+        s.emit_isize(*self)\n     }\n }\n \n impl Decodable for isize {\n     fn decode<D: Decoder>(d: &mut D) -> Result<isize, D::Error> {\n-        d.read_int()\n+        d.read_isize()\n     }\n }\n "}]}