{"sha": "f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZDYzNjI1MTg0MzJmZjdhMjYzMzljZGVmODNlMjllNGFlNmU3ZDE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2018-08-21T06:09:15Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2018-08-21T06:09:15Z"}, "message": "librustc_lint: In recursion warning, change 'recurring' to 'recursing'", "tree": {"sha": "3fd3bd7b20a49529d6d4c50ca821e4019c700d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd3bd7b20a49529d6d4c50ca821e4019c700d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "html_url": "https://github.com/rust-lang/rust/commit/f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc3b20663e1abfff0499332f9168f60c3269c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc3b20663e1abfff0499332f9168f60c3269c33", "html_url": "https://github.com/rust-lang/rust/commit/bfc3b20663e1abfff0499332f9168f60c3269c33"}], "stats": {"total": 130, "additions": 65, "deletions": 65}, "files": [{"sha": "de76ddf33c17e6f84c6c159e3913be7df63f3cb7", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "patch": "@@ -603,11 +603,11 @@ fn foo() {\n This will produce:\n \n ```text\n-warning: function cannot return without recurring\n+warning: function cannot return without recursing\n  --> src/main.rs:1:1\n   |\n 1 | fn foo() {\n-  | ^^^^^^^^ cannot return without recurring\n+  | ^^^^^^^^ cannot return without recursing\n 2 |     foo();\n   |     ----- recursive call site\n   |"}, {"sha": "21d6ecf6d01a51a8bfa3d88c696a501649a8f03d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "patch": "@@ -901,7 +901,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         // considers this to be an error for two reasons, (a) it is\n         // easier to implement, and (b) it seems rare to actually want\n         // to have behaviour like the above, rather than\n-        // e.g. accidentally recurring after an assert.\n+        // e.g. accidentally recursing after an assert.\n \n         let cfg = cfg::CFG::new(cx.tcx, &body);\n \n@@ -961,8 +961,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n             let sp = cx.tcx.sess.codemap().def_span(sp);\n             let mut db = cx.struct_span_lint(UNCONDITIONAL_RECURSION,\n                                              sp,\n-                                             \"function cannot return without recurring\");\n-            db.span_label(sp, \"cannot return without recurring\");\n+                                             \"function cannot return without recursing\");\n+            db.span_label(sp, \"cannot return without recursing\");\n             // offer some help to the programmer.\n             for call in &self_call_spans {\n                 db.span_label(*call, \"recursive call site\");\n@@ -1090,7 +1090,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                             // a default method definition.\n                             Ok(Some(traits::VtableParam(_))) => {\n                                 let on_self = trait_ref.self_ty().is_self();\n-                                // We can only be recurring in a default\n+                                // We can only be recursing in a default\n                                 // method if we're being called literally\n                                 // on the `Self` type.\n                                 on_self && callee_id == method.def_id"}, {"sha": "01c02ff8a48d460c0f5e76404296db32e009b4c2", "filename": "src/test/ui/issues/issue-8727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs?ref=f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "patch": "@@ -15,7 +15,7 @@ fn generic<T>() {\n     generic::<Option<T>>();\n }\n //~^^^ ERROR reached the recursion limit while instantiating `generic::<std::option::Option<\n-//~| WARN function cannot return without recurring\n+//~| WARN function cannot return without recursing\n \n \n "}, {"sha": "bcf644debbc39ade276ef19abe8bcbd589650937", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "patch": "@@ -1,8 +1,8 @@\n-warning: function cannot return without recurring\n+warning: function cannot return without recursing\n   --> $DIR/issue-8727.rs:14:1\n    |\n LL | fn generic<T>() {\n-   | ^^^^^^^^^^^^^^^ cannot return without recurring\n+   | ^^^^^^^^^^^^^^^ cannot return without recursing\n LL |     generic::<Option<T>>();\n    |     ---------------------- recursive call site\n    |"}, {"sha": "7ca9b6874e76b52a0f04da36c8a0bde8028c3863", "filename": "src/test/ui/lint/lint-unconditional-recursion.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs?ref=f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "patch": "@@ -11,7 +11,7 @@\n #![deny(unconditional_recursion)]\n \n #![allow(dead_code)]\n-fn foo() { //~ ERROR function cannot return without recurring\n+fn foo() { //~ ERROR function cannot return without recursing\n     foo();\n }\n \n@@ -21,7 +21,7 @@ fn bar() {\n     }\n }\n \n-fn baz() { //~ ERROR function cannot return without recurring\n+fn baz() { //~ ERROR function cannot return without recursing\n     if true {\n         baz()\n     } else {\n@@ -33,7 +33,7 @@ fn qux() {\n     loop {}\n }\n \n-fn quz() -> bool { //~ ERROR function cannot return without recurring\n+fn quz() -> bool { //~ ERROR function cannot return without recursing\n     if true {\n         while quz() {}\n         true\n@@ -44,13 +44,13 @@ fn quz() -> bool { //~ ERROR function cannot return without recurring\n \n // Trait method calls.\n trait Foo {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         self.bar()\n     }\n }\n \n impl Foo for Box<Foo+'static> {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         loop {\n             self.bar()\n         }\n@@ -59,7 +59,7 @@ impl Foo for Box<Foo+'static> {\n \n // Trait method call with integer fallback after method resolution.\n impl Foo for i32 {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         0.bar()\n     }\n }\n@@ -72,13 +72,13 @@ impl Foo for u32 {\n \n // Trait method calls via paths.\n trait Foo2 {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         Foo2::bar(self)\n     }\n }\n \n impl Foo2 for Box<Foo2+'static> {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         loop {\n             Foo2::bar(self)\n         }\n@@ -88,19 +88,19 @@ impl Foo2 for Box<Foo2+'static> {\n struct Baz;\n impl Baz {\n     // Inherent method call.\n-    fn qux(&self) { //~ ERROR function cannot return without recurring\n+    fn qux(&self) { //~ ERROR function cannot return without recursing\n         self.qux();\n     }\n \n     // Inherent method call via path.\n-    fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n+    fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recursing\n         Baz::as_ref(self)\n     }\n }\n \n // Trait method calls to impls via paths.\n impl Default for Baz {\n-    fn default() -> Baz { //~ ERROR function cannot return without recurring\n+    fn default() -> Baz { //~ ERROR function cannot return without recursing\n         let x = Default::default();\n         x\n     }\n@@ -109,14 +109,14 @@ impl Default for Baz {\n // Overloaded operators.\n impl std::ops::Deref for Baz {\n     type Target = ();\n-    fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n+    fn deref(&self) -> &() { //~ ERROR function cannot return without recursing\n         &**self\n     }\n }\n \n impl std::ops::Index<usize> for Baz {\n     type Output = Baz;\n-    fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n+    fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recursing\n         &self[x]\n     }\n }\n@@ -125,7 +125,7 @@ impl std::ops::Index<usize> for Baz {\n struct Quux;\n impl std::ops::Deref for Quux {\n     type Target = Baz;\n-    fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n+    fn deref(&self) -> &Baz { //~ ERROR function cannot return without recursing\n         self.as_ref()\n     }\n }"}, {"sha": "d0fbdd18ed39d346ce64fa679fb88989a11c5e1d", "filename": "src/test/ui/lint/lint-unconditional-recursion.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4d6362518432ff7a26339cdef83e29e4ae6e7d1/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr?ref=f4d6362518432ff7a26339cdef83e29e4ae6e7d1", "patch": "@@ -1,8 +1,8 @@\n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:14:1\n    |\n-LL | fn foo() { //~ ERROR function cannot return without recurring\n-   | ^^^^^^^^ cannot return without recurring\n+LL | fn foo() { //~ ERROR function cannot return without recursing\n+   | ^^^^^^^^ cannot return without recursing\n LL |     foo();\n    |     ----- recursive call site\n    |\n@@ -13,11 +13,11 @@ LL | #![deny(unconditional_recursion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:24:1\n    |\n-LL | fn baz() { //~ ERROR function cannot return without recurring\n-   | ^^^^^^^^ cannot return without recurring\n+LL | fn baz() { //~ ERROR function cannot return without recursing\n+   | ^^^^^^^^ cannot return without recursing\n LL |     if true {\n LL |         baz()\n    |         ----- recursive call site\n@@ -27,11 +27,11 @@ LL |         baz()\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:36:1\n    |\n-LL | fn quz() -> bool { //~ ERROR function cannot return without recurring\n-   | ^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL | fn quz() -> bool { //~ ERROR function cannot return without recursing\n+   | ^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |     if true {\n LL |         while quz() {}\n    |               ----- recursive call site\n@@ -41,113 +41,113 @@ LL |         loop { quz(); }\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:47:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         self.bar()\n    |         ---------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:53:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         loop {\n LL |             self.bar()\n    |             ---------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:62:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         0.bar()\n    |         ------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:75:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         Foo2::bar(self)\n    |         --------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:81:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         loop {\n LL |             Foo2::bar(self)\n    |             --------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:91:5\n    |\n-LL |     fn qux(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn qux(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         self.qux();\n    |         ---------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:96:5\n    |\n-LL |     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         Baz::as_ref(self)\n    |         ----------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:103:5\n    |\n-LL |     fn default() -> Baz { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn default() -> Baz { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         let x = Default::default();\n    |                 ------------------ recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:112:5\n    |\n-LL |     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn deref(&self) -> &() { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         &**self\n    |          ------ recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:119:5\n    |\n-LL |     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         &self[x]\n    |          ------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:128:5\n    |\n-LL |     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         self.as_ref()\n    |         ---- recursive call site\n    |"}]}