{"sha": "8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZjRhNzY4YTdlOThhNTk0YmQ3YTJkNzBhN2JkY2VjMTRiYzA1MTg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-06T06:04:41Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-06T06:04:41Z"}, "message": "rustbuild: per target musl-root\n\nconfig.toml now accepts a target.$TARGET.musl-root key that lets you\noverride the \"build\" musl-root value, which is set via the --musl-root\nflag or via the build.musl-root key.\n\nWith this change, it's now possible to compile std for several musl\ntargets at once. Here's are the sample commands to do such thing:\n\n```\n$ configure \\\n    --enable-rustbuild \\\n    --target=x86_64-unknown-linux-musl,arm-unknown-linux-musleabi \\\n    --musl-root=/musl/x86_64-unknown-linux-musl/\n\n$ edit config.toml && tail config.toml\n[target.arm-unknown-linux-musleabi]\nmusl-root = \"/x-tools/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot/usr\"\n\n$ make\n```", "tree": {"sha": "ada8ec7fd7b5b5a1e555e513bd3badc586efbfc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada8ec7fd7b5b5a1e555e513bd3badc586efbfc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "html_url": "https://github.com/rust-lang/rust/commit/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/comments", "author": null, "committer": null, "parents": [{"sha": "e77d86c142ae668038dd43594d04022cbd6bf4d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77d86c142ae668038dd43594d04022cbd6bf4d8", "html_url": "https://github.com/rust-lang/rust/commit/e77d86c142ae668038dd43594d04022cbd6bf4d8"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "e14317b23b4d1e162a03fbe3c184f77efa61a9f3", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "patch": "@@ -59,8 +59,9 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n             cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n         }\n     }\n-    if let Some(ref p) = build.config.musl_root {\n-        if target.contains(\"musl\") {\n+    if target.contains(\"musl\") {\n+        if let Some(p) = build.config.target_config[target].musl_root.as_ref()\n+            .or(build.config.musl_root.as_ref()) {\n             cargo.env(\"MUSL_ROOT\", p);\n         }\n     }"}, {"sha": "4a158b42187f669930b79fb1f85dee9912be1b65", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "patch": "@@ -76,6 +76,7 @@ pub struct Config {\n \n     // misc\n     pub channel: String,\n+    // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<String>,\n     pub codegen_tests: bool,\n@@ -89,6 +90,7 @@ pub struct Target {\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n+    pub musl_root: Option<PathBuf>,\n }\n \n /// Structure of the `config.toml` file that configuration is read from."}, {"sha": "f1d7f869a96575eef17e6caef4bced6a1b6b5a29", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4a768a7e98a594bd7a2d70a7bdcec14bc0518/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=8df4a768a7e98a594bd7a2d70a7bdcec14bc0518", "patch": "@@ -111,8 +111,9 @@ pub fn check(build: &mut Build) {\n \n         // Make sure musl-root is valid if specified\n         if target.contains(\"musl\") && !target.contains(\"mips\") {\n-            match build.config.musl_root {\n-                Some(ref root) => {\n+            match build.config.target_config[target].musl_root.as_ref()\n+                .or(build.config.musl_root.as_ref()) {\n+                Some(root) => {\n                     if fs::metadata(root.join(\"lib/libc.a\")).is_err() {\n                         panic!(\"couldn't find libc.a in musl dir: {}\",\n                                root.join(\"lib\").display());\n@@ -123,8 +124,9 @@ pub fn check(build: &mut Build) {\n                     }\n                 }\n                 None => {\n-                    panic!(\"when targeting MUSL the build.musl-root option \\\n-                            must be specified in config.toml\")\n+                    panic!(\"when targeting MUSL either the build.musl-root \\\n+                            option or the target.$TARGET.musl-root one must \\\n+                            be specified in config.toml\")\n                 }\n             }\n         }"}]}