{"sha": "185608754d9418c226ca1a8c8889042046c25c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTYwODc1NGQ5NDE4YzIyNmNhMWE4Yzg4ODkwNDIwNDZjMjVjNjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T20:16:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:57Z"}, "message": "libsyntax: De-`@mut` `StringReader::peek_span`", "tree": {"sha": "51f018660b47f7b4d50a9494c64068abf3aa7ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51f018660b47f7b4d50a9494c64068abf3aa7ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/185608754d9418c226ca1a8c8889042046c25c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/185608754d9418c226ca1a8c8889042046c25c63", "html_url": "https://github.com/rust-lang/rust/commit/185608754d9418c226ca1a8c8889042046c25c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/185608754d9418c226ca1a8c8889042046c25c63/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a214b8e41dda31bd09243d4da58355fbc94614ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a214b8e41dda31bd09243d4da58355fbc94614ec", "html_url": "https://github.com/rust-lang/rust/commit/a214b8e41dda31bd09243d4da58355fbc94614ec"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "f86a3d0321de4922210603ccba812e356d49aa38", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/185608754d9418c226ca1a8c8889042046c25c63/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185608754d9418c226ca1a8c8889042046c25c63/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=185608754d9418c226ca1a8c8889042046c25c63", "patch": "@@ -54,7 +54,7 @@ pub struct StringReader {\n     filemap: @codemap::FileMap,\n     /* cached: */\n     peek_tok: RefCell<token::Token>,\n-    peek_span: Span\n+    peek_span: RefCell<Span>,\n }\n \n pub fn new_string_reader(span_diagnostic: @mut SpanHandler,\n@@ -81,7 +81,7 @@ pub fn new_low_level_string_reader(span_diagnostic: @mut SpanHandler,\n         filemap: filemap,\n         /* dummy values; not read */\n         peek_tok: RefCell::new(token::EOF),\n-        peek_span: codemap::DUMMY_SP\n+        peek_span: RefCell::new(codemap::DUMMY_SP),\n     };\n     bump(r);\n     return r;\n@@ -100,7 +100,7 @@ fn dup_string_reader(r: @mut StringReader) -> @mut StringReader {\n         curr: Cell::new(r.curr.get()),\n         filemap: r.filemap,\n         peek_tok: r.peek_tok.clone(),\n-        peek_span: r.peek_span\n+        peek_span: r.peek_span.clone(),\n     }\n }\n \n@@ -112,21 +112,21 @@ impl reader for StringReader {\n             let mut peek_tok = self.peek_tok.borrow_mut();\n             TokenAndSpan {\n                 tok: util::replace(peek_tok.get(), token::UNDERSCORE),\n-                sp: self.peek_span,\n+                sp: self.peek_span.get(),\n             }\n         };\n         string_advance_token(self);\n         ret_val\n     }\n     fn fatal(@mut self, m: ~str) -> ! {\n-        self.span_diagnostic.span_fatal(self.peek_span, m)\n+        self.span_diagnostic.span_fatal(self.peek_span.get(), m)\n     }\n     fn span_diag(@mut self) -> @mut SpanHandler { self.span_diagnostic }\n     fn peek(@mut self) -> TokenAndSpan {\n         // XXX(pcwalton): Bad copy!\n         TokenAndSpan {\n             tok: self.peek_tok.get(),\n-            sp: self.peek_span,\n+            sp: self.peek_span.get(),\n         }\n     }\n     fn dup(@mut self) -> @mut reader { dup_string_reader(self) as @mut reader }\n@@ -158,7 +158,7 @@ fn fatal_span(rdr: @mut StringReader,\n               to_pos: BytePos,\n               m: ~str)\n            -> ! {\n-    rdr.peek_span = codemap::mk_sp(from_pos, to_pos);\n+    rdr.peek_span.set(codemap::mk_sp(from_pos, to_pos));\n     rdr.fatal(m);\n }\n \n@@ -197,7 +197,7 @@ fn fatal_span_verbose(rdr: @mut StringReader,\n fn string_advance_token(r: @mut StringReader) {\n     match (consume_whitespace_and_comments(r)) {\n         Some(comment) => {\n-            r.peek_span = comment.sp;\n+            r.peek_span.set(comment.sp);\n             r.peek_tok.set(comment.tok);\n         },\n         None => {\n@@ -206,7 +206,8 @@ fn string_advance_token(r: @mut StringReader) {\n             } else {\n                 let start_bytepos = r.last_pos.get();\n                 r.peek_tok.set(next_token_inner(r));\n-                r.peek_span = codemap::mk_sp(start_bytepos, r.last_pos.get());\n+                r.peek_span.set(codemap::mk_sp(start_bytepos,\n+                                               r.last_pos.get()));\n             };\n         }\n     }"}]}