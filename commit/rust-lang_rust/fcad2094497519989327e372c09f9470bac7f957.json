{"sha": "fcad2094497519989327e372c09f9470bac7f957", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYWQyMDk0NDk3NTE5OTg5MzI3ZTM3MmMwOWY5NDcwYmFjN2Y5NTc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-24T14:29:40Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-26T20:55:45Z"}, "message": "Add closure cannot be moved note.\n\nThis commit extends existing logic for checking whether a closure that\nis `FnOnce` and therefore moves variables that it captures from the\nenvironment has already been invoked when being invoked again.\n\nNow, this logic will also check whether the closure is being moved after\npreviously being moved or invoked and add an appropriate note.", "tree": {"sha": "178c94e934dfb380561272d08a7a4f1bcffef5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/178c94e934dfb380561272d08a7a4f1bcffef5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcad2094497519989327e372c09f9470bac7f957", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwj6tEACgkQAXYLT59T\n8VRH7xAAsURBp8wafzVsgvVDx6Rw7Tiw5XCukYG83KJFEzWxWAL5RyaFMmY12Aqe\n5p5upujU/SFnfmRD8Mg/i87XWYXAAwPgq0Jb1n+I/tl22PNW2GOvjnucoIKFT7yY\nMo6C/MhEVWMakKl0zBuCXn5wq72/JzCZx+h5jKqZWpgAt6Xq8MUGD8j0eotlqOtC\nd4adf+vzKV80EWj7Hx3vqkROng4/5962kdsijH4gxAwZLcVQOsvfdmAKiNxmyzBr\n+dezB/mZ+7aMfEb+WIv9a9SSPadU8IU1C+0IFvBt7X1UYLOdqEsbVI5/Uo5CFSbO\nYMhraOzaNNESqypF1QK6lEQxMyR1AihLUEvxpzYbWUsIYVJ/TkClje2mkeKGS5tf\n01dcGQtaHyLQFuWiv+BJ8UCcqF/iEVQVlS/GmVAvbNCFMU7hI52u+pjL73/GtuXh\n3x7tV4ffdtk+KbyiJgLyqpdqzVaxyAES/zrJXfc6pQX7q2Il1Vfnj4aRgZPEsfU7\nIb1+2iKm0pDcy3oPGZVsMT28LFsCoLPj5ZU87bd5n2B/zjDA4vM4P2dLJq3w0dK+\nEbY0fZYT/h6eg0ePgLskLS254uoBqWAq6l33daeP2GxnutxOqHG/jbfOdJRV3ch9\nP2wkvi9LR/3jNY+zwhROADANKnvGcCSWtipUFz0octLG7k0O3AI=\n=DtRU\n-----END PGP SIGNATURE-----", "payload": "tree 178c94e934dfb380561272d08a7a4f1bcffef5d5\nparent 79d8a0fcefa5134db2a94739b1d18daa01fc6e9f\nauthor David Wood <david@davidtw.co> 1545661780 +0100\ncommitter David Wood <david@davidtw.co> 1545857745 +0100\n\nAdd closure cannot be moved note.\n\nThis commit extends existing logic for checking whether a closure that\nis `FnOnce` and therefore moves variables that it captures from the\nenvironment has already been invoked when being invoked again.\n\nNow, this logic will also check whether the closure is being moved after\npreviously being moved or invoked and add an appropriate note.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcad2094497519989327e372c09f9470bac7f957", "html_url": "https://github.com/rust-lang/rust/commit/fcad2094497519989327e372c09f9470bac7f957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcad2094497519989327e372c09f9470bac7f957/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "html_url": "https://github.com/rust-lang/rust/commit/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f"}], "stats": {"total": 88, "additions": 49, "deletions": 39}, "files": [{"sha": "d7559a46e94eb8f85c905ed34b9f7a970b09ea98", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fcad2094497519989327e372c09f9470bac7f957/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcad2094497519989327e372c09f9470bac7f957/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=fcad2094497519989327e372c09f9470bac7f957", "patch": "@@ -123,7 +123,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 Origin::Mir,\n             );\n \n-            self.add_closure_invoked_twice_with_moved_variable_suggestion(\n+            self.add_moved_or_invoked_closure_note(\n                 context.loc,\n                 used_place,\n                 &mut err,\n@@ -1331,7 +1331,8 @@ enum StorageDeadOrDrop<'tcx> {\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n-    /// Adds a suggestion when a closure is invoked twice with a moved variable.\n+    /// Adds a suggestion when a closure is invoked twice with a moved variable or when a closure\n+    /// is moved after being invoked.\n     ///\n     /// ```text\n     /// note: closure cannot be invoked more than once because it moves the variable `dict` out of\n@@ -1341,30 +1342,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// LL |         for (key, value) in dict {\n     ///    |                             ^^^^\n     /// ```\n-    pub(super) fn add_closure_invoked_twice_with_moved_variable_suggestion(\n+    pub(super) fn add_moved_or_invoked_closure_note(\n         &self,\n         location: Location,\n         place: &Place<'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) {\n+        debug!(\"add_moved_or_invoked_closure_note: location={:?} place={:?}\", location, place);\n         let mut target = place.local();\n-        debug!(\n-            \"add_closure_invoked_twice_with_moved_variable_suggestion: location={:?} place={:?} \\\n-             target={:?}\",\n-             location, place, target,\n-        );\n         for stmt in &self.mir[location.block].statements[location.statement_index..] {\n-            debug!(\n-                \"add_closure_invoked_twice_with_moved_variable_suggestion: stmt={:?} \\\n-                 target={:?}\",\n-                 stmt, target,\n-            );\n+            debug!(\"add_moved_or_invoked_closure_note: stmt={:?} target={:?}\", stmt, target);\n             if let StatementKind::Assign(into, box Rvalue::Use(from)) = &stmt.kind {\n-                debug!(\n-                    \"add_closure_invoked_twice_with_moved_variable_suggestion: into={:?} \\\n-                     from={:?}\",\n-                     into, from,\n-                );\n+                debug!(\"add_fnonce_closure_note: into={:?} from={:?}\", into, from);\n                 match from {\n                     Operand::Copy(ref place) |\n                     Operand::Move(ref place) if target == place.local() =>\n@@ -1374,12 +1363,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-\n+        // Check if we are attempting to call a closure after it has been invoked.\n         let terminator = self.mir[location.block].terminator();\n-        debug!(\n-            \"add_closure_invoked_twice_with_moved_variable_suggestion: terminator={:?}\",\n-            terminator,\n-        );\n+        debug!(\"add_moved_or_invoked_closure_note: terminator={:?}\", terminator);\n         if let TerminatorKind::Call {\n             func: Operand::Constant(box Constant {\n                 literal: ty::Const { ty: &ty::TyS { sty: ty::TyKind::FnDef(id, _), ..  }, ..  },\n@@ -1388,41 +1374,59 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             args,\n             ..\n         } = &terminator.kind {\n-            debug!(\"add_closure_invoked_twice_with_moved_variable_suggestion: id={:?}\", id);\n+            debug!(\"add_moved_or_invoked_closure_note: id={:?}\", id);\n             if self.infcx.tcx.parent(id) == self.infcx.tcx.lang_items().fn_once_trait() {\n                 let closure = match args.first() {\n                     Some(Operand::Copy(ref place)) |\n                     Some(Operand::Move(ref place)) if target == place.local() =>\n                         place.local().unwrap(),\n                     _ => return,\n                 };\n-                debug!(\n-                    \"add_closure_invoked_twice_with_moved_variable_suggestion: closure={:?}\",\n-                     closure,\n-                );\n \n-                if let ty::TyKind::Closure(did, _substs) = self.mir.local_decls[closure].ty.sty {\n-                    let node_id = match self.infcx.tcx.hir().as_local_node_id(did) {\n-                        Some(node_id) => node_id,\n-                        _ => return,\n-                    };\n+                debug!(\"add_moved_or_invoked_closure_note: closure={:?}\", closure);\n+                if let ty::TyKind::Closure(did, _) = self.mir.local_decls[closure].ty.sty {\n+                    let node_id = self.infcx.tcx.hir().as_local_node_id(did).unwrap();\n                     let hir_id = self.infcx.tcx.hir().node_to_hir_id(node_id);\n \n-                    if let Some((\n-                        span, name\n-                    )) = self.infcx.tcx.typeck_tables_of(did).closure_kind_origins().get(hir_id) {\n+                    if let Some((span, name)) = self.infcx.tcx.typeck_tables_of(did)\n+                        .closure_kind_origins()\n+                        .get(hir_id)\n+                    {\n                         diag.span_note(\n                             *span,\n                             &format!(\n-                                \"closure cannot be invoked more than once because it \\\n-                                 moves the variable `{}` out of its environment\",\n-                                 name,\n+                                \"closure cannot be invoked more than once because it moves the \\\n+                                 variable `{}` out of its environment\",\n+                                name,\n                             ),\n                         );\n+                        return;\n                     }\n                 }\n             }\n         }\n+\n+        // Check if we are just moving a closure after it has been invoked.\n+        if let Some(target) = target {\n+            if let ty::TyKind::Closure(did, _) = self.mir.local_decls[target].ty.sty {\n+                let node_id = self.infcx.tcx.hir().as_local_node_id(did).unwrap();\n+                let hir_id = self.infcx.tcx.hir().node_to_hir_id(node_id);\n+\n+                if let Some((span, name)) = self.infcx.tcx.typeck_tables_of(did)\n+                    .closure_kind_origins()\n+                    .get(hir_id)\n+                {\n+                    diag.span_note(\n+                        *span,\n+                        &format!(\n+                            \"closure cannot be moved more than once as it is not `Copy` due to \\\n+                             moving the variable `{}` out of its environment\",\n+                             name\n+                        ),\n+                    );\n+                }\n+            }\n+        }\n     }\n \n     /// End-user visible description of `place` if one can be found. If the"}, {"sha": "1a65bcf4473172300f6cb0cd572874b42f209005", "filename": "src/test/ui/not-copy-closure.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcad2094497519989327e372c09f9470bac7f957/src%2Ftest%2Fui%2Fnot-copy-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcad2094497519989327e372c09f9470bac7f957/src%2Ftest%2Fui%2Fnot-copy-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-copy-closure.nll.stderr?ref=fcad2094497519989327e372c09f9470bac7f957", "patch": "@@ -5,6 +5,12 @@ LL |     let b = hello;\n    |             ----- value moved here\n LL |     let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n    |             ^^^^^ value used here after move\n+   |\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment\n+  --> $DIR/not-copy-closure.rs:6:9\n+   |\n+LL |         a += 1;\n+   |         ^\n \n error: aborting due to previous error\n "}]}