{"sha": "074799b4c586c521ba678a4dc3809cad1a872dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NDc5OWI0YzU4NmM1MjFiYTY3OGE0ZGMzODA5Y2FkMWE4NzJkZmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-18T07:07:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-20T21:08:50Z"}, "message": "Implement a lint mode to detect unnecessary allocations", "tree": {"sha": "484319afafafb263fbf39f6b327d68abd087e0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484319afafafb263fbf39f6b327d68abd087e0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/074799b4c586c521ba678a4dc3809cad1a872dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/074799b4c586c521ba678a4dc3809cad1a872dfe", "html_url": "https://github.com/rust-lang/rust/commit/074799b4c586c521ba678a4dc3809cad1a872dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/074799b4c586c521ba678a4dc3809cad1a872dfe/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26babaafcdbcfdf2e842d84dbeabbed0dae6efef", "url": "https://api.github.com/repos/rust-lang/rust/commits/26babaafcdbcfdf2e842d84dbeabbed0dae6efef", "html_url": "https://github.com/rust-lang/rust/commit/26babaafcdbcfdf2e842d84dbeabbed0dae6efef"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "6a1a8940a05c1db1869fd3b838a7cc855c187ac9", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/074799b4c586c521ba678a4dc3809cad1a872dfe/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074799b4c586c521ba678a4dc3809cad1a872dfe/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=074799b4c586c521ba678a4dc3809cad1a872dfe", "patch": "@@ -79,6 +79,7 @@ pub enum lint {\n     unused_variable,\n     dead_assignment,\n     unused_mut,\n+    unnecessary_allocation,\n }\n \n pub fn level_to_str(lv: level) -> &'static str {\n@@ -242,6 +243,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"detect mut variables which don't need to be mutable\",\n         default: warn\n     }),\n+\n+    (\"unnecessary_allocation\",\n+     LintSpec {\n+        lint: unnecessary_allocation,\n+        desc: \"detects unnecessary allocations that can be eliminated\",\n+        default: warn\n+    }),\n ];\n \n /*\n@@ -881,6 +889,67 @@ fn lint_session(cx: @mut Context) -> visit::vt<()> {\n     })\n }\n \n+fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n+    // If the expression `e` has an allocated type, but `t` dictates that it's\n+    // something like a slice (doesn't need allocation), emit a warning with the\n+    // specified span.\n+    //\n+    // Currently, this only applies to string and vector literals with sigils in\n+    // front. Those can have the sigil removed to get a borrowed pointer\n+    // automatically.\n+    fn check(cx: @mut Context, e: @ast::expr, t: ty::t) {\n+        match e.node {\n+            ast::expr_vstore(e2, ast::expr_vstore_uniq) |\n+            ast::expr_vstore(e2, ast::expr_vstore_box) => {\n+                match e2.node {\n+                    ast::expr_lit(@codemap::spanned{\n+                            node: ast::lit_str(*), _}) |\n+                    ast::expr_vec(*) => {}\n+                    _ => return\n+                }\n+            }\n+\n+            _ => return\n+        }\n+\n+        match ty::get(t).sty {\n+            ty::ty_estr(ty::vstore_slice(*)) |\n+            ty::ty_evec(_, ty::vstore_slice(*)) => {\n+                cx.span_lint(unnecessary_allocation,\n+                             e.span, \"unnecessary allocation, the sigil can be \\\n+                                      removed\");\n+            }\n+\n+            _ => ()\n+        }\n+    }\n+\n+    let visit_expr: @fn(@ast::expr) = |e| {\n+        match e.node {\n+            ast::expr_call(c, ref args, _) => {\n+                let t = ty::node_id_to_type(cx.tcx, c.id);\n+                let s = ty::ty_fn_sig(t);\n+                for vec::each2(*args, s.inputs) |e, t| {\n+                    check(cx, *e, *t);\n+                }\n+            }\n+            ast::expr_method_call(_, _, _, ref args, _) => {\n+                let t = ty::node_id_to_type(cx.tcx, e.callee_id);\n+                let s = ty::ty_fn_sig(t);\n+                for vec::each2(*args, s.inputs) |e, t| {\n+                    check(cx, *e, *t);\n+                }\n+            }\n+            _ => {}\n+        }\n+    };\n+\n+    visit::mk_simple_visitor(@visit::SimpleVisitor {\n+        visit_expr: visit_expr,\n+        .. *visit::default_simple_visitor()\n+    })\n+}\n+\n pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     let cx = @mut Context {\n         dict: @get_lint_dict(),\n@@ -908,6 +977,7 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     cx.add_lint(lint_unused_unsafe(cx));\n     cx.add_lint(lint_unused_mut(cx));\n     cx.add_lint(lint_session(cx));\n+    cx.add_lint(lint_unnecessary_allocations(cx));\n \n     // type inference doesn't like this being declared below, we need to tell it\n     // what the type of this first function is..."}, {"sha": "4be75d9ee5b578d96af9cb38b42fc5b3b81a90df", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074799b4c586c521ba678a4dc3809cad1a872dfe/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074799b4c586c521ba678a4dc3809cad1a872dfe/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=074799b4c586c521ba678a4dc3809cad1a872dfe", "patch": "@@ -18,7 +18,7 @@ use ast;\n use codemap::span;\n use ext::base::*;\n use ext::base;\n-use ext::build::mk_uniq_str;\n+use ext::build::mk_base_str;\n \n pub fn expand_syntax_ext(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n@@ -29,8 +29,8 @@ pub fn expand_syntax_ext(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     // Option<str> rather than just an maybe-empty string.\n \n     let e = match os::getenv(var) {\n-      None => mk_uniq_str(cx, sp, ~\"\"),\n-      Some(ref s) => mk_uniq_str(cx, sp, copy *s)\n+      None => mk_base_str(cx, sp, ~\"\"),\n+      Some(ref s) => mk_base_str(cx, sp, copy *s)\n     };\n     MRExpr(e)\n }"}]}