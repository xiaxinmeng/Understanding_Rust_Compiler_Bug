{"sha": "dfbbd5d6ead535de08ff8d10e320194ac7585457", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYmJkNWQ2ZWFkNTM1ZGUwOGZmOGQxMGUzMjAxOTRhYzc1ODU0NTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T09:36:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T09:36:28Z"}, "message": "Rollup merge of #69825 - lcnr:discriminant, r=oli-obk\n\nmake `mem::discriminant` const\n\nimplements #69821, which could be used as a tracking issue for `const_discriminant`.\n\nShould this be added to the meta tracking issue #57563?\n@Lokathor", "tree": {"sha": "152f1a34df4b39a12e134541f5ffc6eaaac212a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152f1a34df4b39a12e134541f5ffc6eaaac212a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbbd5d6ead535de08ff8d10e320194ac7585457", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaLEcCRBK7hj4Ov3rIwAAdHIIAAibN67AcVZ1S2MjVMW5GkWS\nkDMKsoyF3ISGFOHrdb6h0wx1ThwciE6odwm3xPIO8oYTPnijXf4vHjFEmuLUan99\nVjyPi/xm+l0BRVwXmf6PcZklLXV9xFJope2jlclbhqnazGqXUXNv2nYm3ZWSV7LY\nC6gOMy5X2K5gwLY/8QpIKziHeFxg9s5ZaS97i01NQIoCEUUMoxSD0YcIN53Cuove\nLmBS7UEu/Dd4ixlx1v07aU5EIxOeiQ/tiLrg6u2g/MD5gsmi6mwvDJvL4pgdP/wB\nWC2KLG4d53GSk438zYekmAMdZXqTmvYZysHgjBV/xkFThf7DbnW9j5JPbh2o8d4=\n=mxZ+\n-----END PGP SIGNATURE-----\n", "payload": "tree 152f1a34df4b39a12e134541f5ffc6eaaac212a2\nparent 452c147fba6f15478b25ab24c9b3077a5b1ebfbc\nparent 7b3e3ff39aa45103a6f8432466f8078970866142\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583919388 +0100\ncommitter GitHub <noreply@github.com> 1583919388 +0100\n\nRollup merge of #69825 - lcnr:discriminant, r=oli-obk\n\nmake `mem::discriminant` const\n\nimplements #69821, which could be used as a tracking issue for `const_discriminant`.\n\nShould this be added to the meta tracking issue #57563?\n@Lokathor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbbd5d6ead535de08ff8d10e320194ac7585457", "html_url": "https://github.com/rust-lang/rust/commit/dfbbd5d6ead535de08ff8d10e320194ac7585457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbbd5d6ead535de08ff8d10e320194ac7585457/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452c147fba6f15478b25ab24c9b3077a5b1ebfbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/452c147fba6f15478b25ab24c9b3077a5b1ebfbc", "html_url": "https://github.com/rust-lang/rust/commit/452c147fba6f15478b25ab24c9b3077a5b1ebfbc"}, {"sha": "7b3e3ff39aa45103a6f8432466f8078970866142", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3e3ff39aa45103a6f8432466f8078970866142", "html_url": "https://github.com/rust-lang/rust/commit/7b3e3ff39aa45103a6f8432466f8078970866142"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "3c060cc6e840beea77fe2aedcf7ab43365f47c64", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=dfbbd5d6ead535de08ff8d10e320194ac7585457", "patch": "@@ -1862,6 +1862,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::discriminant`](../../std/mem/fn.discriminant.html)\n+    #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> u64;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `f` with"}, {"sha": "a1dde1d51ef8096251c29a7b52c5e29559c9f938", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=dfbbd5d6ead535de08ff8d10e320194ac7585457", "patch": "@@ -72,6 +72,7 @@\n #![feature(concat_idents)]\n #![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n+#![feature(const_discriminant)]\n #![feature(const_if_match)]\n #![feature(const_loop)]\n #![feature(const_checked_int_methods)]"}, {"sha": "7d9a8bcd05b1c5fec67d6fe5fc9b5f347e53e844", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=dfbbd5d6ead535de08ff8d10e320194ac7585457", "patch": "@@ -870,6 +870,7 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));\n /// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n-pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n+#[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n     Discriminant(intrinsics::discriminant_value(v), PhantomData)\n }"}, {"sha": "1e5ed76c467b40af7ad08ae9e4a0b263dae96539", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=dfbbd5d6ead535de08ff8d10e320194ac7585457", "patch": "@@ -216,6 +216,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n                 self.write_scalar(val, dest)?;\n             }\n+            sym::discriminant_value => {\n+                let place = self.deref_operand(args[0])?;\n+                let discr_val = self.read_discriminant(place.into())?.0;\n+                self.write_scalar(Scalar::from_uint(discr_val, dest.layout.size), dest)?;\n+            }\n             sym::unchecked_shl\n             | sym::unchecked_shr\n             | sym::unchecked_add"}, {"sha": "d8ce9bbdfb30bd4ccd44ed1c4e49ac49c4b9eaec", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=dfbbd5d6ead535de08ff8d10e320194ac7585457", "patch": "@@ -265,6 +265,7 @@ symbols! {\n         derive,\n         diagnostic,\n         direct,\n+        discriminant_value,\n         doc,\n         doc_alias,\n         doc_cfg,"}, {"sha": "1ad5134e71c522d2e801a7fd5aead1905ab607cb", "filename": "src/test/ui/consts/const_discriminant.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbd5d6ead535de08ff8d10e320194ac7585457/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs?ref=dfbbd5d6ead535de08ff8d10e320194ac7585457", "patch": "@@ -0,0 +1,40 @@\n+// run-pass\n+#![feature(const_discriminant)]\n+#![allow(dead_code)]\n+\n+use std::mem::{discriminant, Discriminant};\n+\n+// `discriminant(const_expr)` may get const-propagated.\n+// As we want to check that const-eval is equal to ordinary exection,\n+// we wrap `const_expr` with a function which is not const to prevent this.\n+#[inline(never)]\n+fn identity<T>(x: T) -> T { x }\n+\n+enum Test {\n+    A(u8),\n+    B,\n+    C { a: u8, b: u8 },\n+}\n+\n+const TEST_A: Discriminant<Test> = discriminant(&Test::A(5));\n+const TEST_A_OTHER: Discriminant<Test> = discriminant(&Test::A(17));\n+const TEST_B: Discriminant<Test> = discriminant(&Test::B);\n+\n+enum Void {}\n+\n+enum SingleVariant {\n+    V,\n+    Never(Void),\n+}\n+\n+const TEST_V: Discriminant<SingleVariant> = discriminant(&SingleVariant::V);\n+\n+fn main() {\n+    assert_eq!(TEST_A, TEST_A_OTHER);\n+    assert_eq!(TEST_A, discriminant(identity(&Test::A(17))));\n+    assert_eq!(TEST_B, discriminant(identity(&Test::B)));\n+    assert_ne!(TEST_A, TEST_B);\n+    assert_ne!(TEST_B, discriminant(identity(&Test::C { a: 42, b: 7 })));\n+\n+    assert_eq!(TEST_V, discriminant(identity(&SingleVariant::V)));\n+}"}]}