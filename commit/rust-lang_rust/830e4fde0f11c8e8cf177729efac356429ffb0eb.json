{"sha": "830e4fde0f11c8e8cf177729efac356429ffb0eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMGU0ZmRlMGYxMWM4ZThjZjE3NzcyOWVmYWMzNTY0MjlmZmIwZWI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-13T10:12:57Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-13T12:43:44Z"}, "message": "Remove usage of `DUMMY_HIR_ID` in some visitors", "tree": {"sha": "586bdc537c78e5bcb1abc448a0f708b76342313f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586bdc537c78e5bcb1abc448a0f708b76342313f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830e4fde0f11c8e8cf177729efac356429ffb0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830e4fde0f11c8e8cf177729efac356429ffb0eb", "html_url": "https://github.com/rust-lang/rust/commit/830e4fde0f11c8e8cf177729efac356429ffb0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830e4fde0f11c8e8cf177729efac356429ffb0eb/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795fa0a006bed5526e762a8bb11284da96ddf57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/795fa0a006bed5526e762a8bb11284da96ddf57d", "html_url": "https://github.com/rust-lang/rust/commit/795fa0a006bed5526e762a8bb11284da96ddf57d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "627a438c2c3b19e9a108c2f216081275477c9209", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/830e4fde0f11c8e8cf177729efac356429ffb0eb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830e4fde0f11c8e8cf177729efac356429ffb0eb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=830e4fde0f11c8e8cf177729efac356429ffb0eb", "patch": "@@ -1354,15 +1354,15 @@ declare_lint! {\n }\n \n pub struct UnnameableTestItems {\n-    boundary: hir::HirId, // HirId of the item under which things are not nameable\n+    boundary: Option<hir::HirId>, // HirId of the item under which things are not nameable\n     items_nameable: bool,\n }\n \n impl_lint_pass!(UnnameableTestItems => [UNNAMEABLE_TEST_ITEMS]);\n \n impl UnnameableTestItems {\n     pub fn new() -> Self {\n-        Self { boundary: hir::DUMMY_HIR_ID, items_nameable: true }\n+        Self { boundary: None, items_nameable: true }\n     }\n }\n \n@@ -1372,7 +1372,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n             if let hir::ItemKind::Mod(..) = it.kind {\n             } else {\n                 self.items_nameable = false;\n-                self.boundary = it.hir_id;\n+                self.boundary = Some(it.hir_id);\n             }\n             return;\n         }\n@@ -1385,7 +1385,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n     }\n \n     fn check_item_post(&mut self, _cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n-        if !self.items_nameable && self.boundary == it.hir_id {\n+        if !self.items_nameable && self.boundary == Some(it.hir_id) {\n             self.items_nameable = true;\n         }\n     }"}, {"sha": "ee2ed8826ba125427e2701f7ae75ef6da7e6d5b1", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/830e4fde0f11c8e8cf177729efac356429ffb0eb/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830e4fde0f11c8e8cf177729efac356429ffb0eb/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=830e4fde0f11c8e8cf177729efac356429ffb0eb", "patch": "@@ -43,14 +43,14 @@ declare_lint! {\n #[derive(Copy, Clone)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n-    negated_expr_id: hir::HirId,\n+    negated_expr_id: Option<hir::HirId>,\n }\n \n impl_lint_pass!(TypeLimits => [UNUSED_COMPARISONS, OVERFLOWING_LITERALS]);\n \n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n-        TypeLimits { negated_expr_id: hir::DUMMY_HIR_ID }\n+        TypeLimits { negated_expr_id: None }\n     }\n }\n \n@@ -244,7 +244,7 @@ fn lint_int_literal<'a, 'tcx>(\n     let int_type = t.normalize(cx.sess().target.ptr_width);\n     let (min, max) = int_ty_range(int_type);\n     let max = max as u128;\n-    let negative = type_limits.negated_expr_id == e.hir_id;\n+    let negative = type_limits.negated_expr_id == Some(e.hir_id);\n \n     // Detect literal value out of range [min, max] inclusive\n     // avoiding use of -min to prevent overflow/panic\n@@ -397,8 +397,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         match e.kind {\n             hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n                 // propagate negation, if the negation itself isn't negated\n-                if self.negated_expr_id != e.hir_id {\n-                    self.negated_expr_id = expr.hir_id;\n+                if self.negated_expr_id != Some(e.hir_id) {\n+                    self.negated_expr_id = Some(expr.hir_id);\n                 }\n             }\n             hir::ExprKind::Binary(binop, ref l, ref r) => {"}, {"sha": "e02e97be19db584928c2fbdaf6677675f909cc85", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/830e4fde0f11c8e8cf177729efac356429ffb0eb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830e4fde0f11c8e8cf177729efac356429ffb0eb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=830e4fde0f11c8e8cf177729efac356429ffb0eb", "patch": "@@ -1012,7 +1012,7 @@ impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n struct NamePrivacyVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    current_item: hir::HirId,\n+    current_item: Option<hir::HirId>,\n     empty_tables: &'a ty::TypeckTables<'tcx>,\n }\n \n@@ -1028,7 +1028,7 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n     ) {\n         // definition of the field\n         let ident = Ident::new(kw::Invalid, use_ctxt);\n-        let current_hir = self.current_item;\n+        let current_hir = self.current_item.unwrap();\n         let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, current_hir).1;\n         if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {\n             let label = if in_update_syntax {\n@@ -1074,7 +1074,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let orig_current_item = mem::replace(&mut self.current_item, item.hir_id);\n+        let orig_current_item = mem::replace(&mut self.current_item, Some(item.hir_id));\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, item.hir_id, self.empty_tables));\n         intravisit::walk_item(self, item);\n@@ -2059,7 +2059,7 @@ fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     let mut visitor = NamePrivacyVisitor {\n         tcx,\n         tables: &empty_tables,\n-        current_item: hir::DUMMY_HIR_ID,\n+        current_item: None,\n         empty_tables: &empty_tables,\n     };\n     let (module, span, hir_id) = tcx.hir().get_module(module_def_id);"}]}