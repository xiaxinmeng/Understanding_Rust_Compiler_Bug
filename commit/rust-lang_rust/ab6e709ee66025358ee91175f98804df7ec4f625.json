{"sha": "ab6e709ee66025358ee91175f98804df7ec4f625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNmU3MDllZTY2MDI1MzU4ZWU5MTE3NWY5ODgwNGRmN2VjNGY2MjU=", "commit": {"author": {"name": "Vivek Ghaisas", "email": "v.a.ghaisas@gmail.com", "date": "2020-03-08T21:28:06Z"}, "committer": {"name": "Vivek Ghaisas", "email": "v.a.ghaisas@gmail.com", "date": "2020-03-08T21:28:06Z"}, "message": "Improve error messages for {option,result}_map_unit_fn\n\nInstead of saying \"unit function\", use the phrase the description\nuses: \"function that returns the unit type\".\n\nFixes #5180.", "tree": {"sha": "e437bfab9ca44c09891d51aa20bd902d18585824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e437bfab9ca44c09891d51aa20bd902d18585824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab6e709ee66025358ee91175f98804df7ec4f625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6e709ee66025358ee91175f98804df7ec4f625", "html_url": "https://github.com/rust-lang/rust/commit/ab6e709ee66025358ee91175f98804df7ec4f625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab6e709ee66025358ee91175f98804df7ec4f625/comments", "author": {"login": "polybuildr", "id": 6189009, "node_id": "MDQ6VXNlcjYxODkwMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6189009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/polybuildr", "html_url": "https://github.com/polybuildr", "followers_url": "https://api.github.com/users/polybuildr/followers", "following_url": "https://api.github.com/users/polybuildr/following{/other_user}", "gists_url": "https://api.github.com/users/polybuildr/gists{/gist_id}", "starred_url": "https://api.github.com/users/polybuildr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/polybuildr/subscriptions", "organizations_url": "https://api.github.com/users/polybuildr/orgs", "repos_url": "https://api.github.com/users/polybuildr/repos", "events_url": "https://api.github.com/users/polybuildr/events{/privacy}", "received_events_url": "https://api.github.com/users/polybuildr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "polybuildr", "id": 6189009, "node_id": "MDQ6VXNlcjYxODkwMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6189009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/polybuildr", "html_url": "https://github.com/polybuildr", "followers_url": "https://api.github.com/users/polybuildr/followers", "following_url": "https://api.github.com/users/polybuildr/following{/other_user}", "gists_url": "https://api.github.com/users/polybuildr/gists{/gist_id}", "starred_url": "https://api.github.com/users/polybuildr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/polybuildr/subscriptions", "organizations_url": "https://api.github.com/users/polybuildr/orgs", "repos_url": "https://api.github.com/users/polybuildr/repos", "events_url": "https://api.github.com/users/polybuildr/events{/privacy}", "received_events_url": "https://api.github.com/users/polybuildr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0f0e33aff4f5d916ec286bc586935d767c3cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0f0e33aff4f5d916ec286bc586935d767c3cfc", "html_url": "https://github.com/rust-lang/rust/commit/3d0f0e33aff4f5d916ec286bc586935d767c3cfc"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "a4e1b2c0d3326a1f4058132ecb86af2862281fec", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6e709ee66025358ee91175f98804df7ec4f625/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6e709ee66025358ee91175f98804df7ec4f625/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=ab6e709ee66025358ee91175f98804df7ec4f625", "patch": "@@ -198,7 +198,7 @@ fn let_binding_name(cx: &LateContext<'_, '_>, var_arg: &hir::Expr<'_>) -> String\n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n     format!(\n-        \"called `map(f)` on an `{0}` value where `f` is a unit {1}\",\n+        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type\",\n         map_type, function_type\n     )\n }"}, {"sha": "f84d1fadf7f37443fbbc064cbd537a54cb0f2467", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab6e709ee66025358ee91175f98804df7ec4f625/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab6e709ee66025358ee91175f98804df7ec4f625/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=ab6e709ee66025358ee91175f98804df7ec4f625", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Option` value where `f` is a unit function\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:34:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,127 +8,127 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit function\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:36:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit function\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:44:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:46:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:71:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n   --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });}"}, {"sha": "467e00263cd3ae58ae9eeed948825e6f8c054da0", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab6e709ee66025358ee91175f98804df7ec4f625/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab6e709ee66025358ee91175f98804df7ec4f625/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=ab6e709ee66025358ee91175f98804df7ec4f625", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Result` value where `f` is a unit function\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:35:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,127 +8,127 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit function\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:37:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit function\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:45:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:47:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:52:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:61:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:70:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:72:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n   --> $DIR/result_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });"}]}