{"sha": "49c9ac175f07505f2113feaca3546d4b8b44dfa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YzlhYzE3NWYwNzUwNWYyMTEzZmVhY2EzNTQ2ZDRiOGI0NGRmYTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T23:34:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T23:34:36Z"}, "message": "Silence non-implicitly-copyable-typarams in coretest", "tree": {"sha": "a37546402cfacb8ae111345ae6225d5d8b3e5962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37546402cfacb8ae111345ae6225d5d8b3e5962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c9ac175f07505f2113feaca3546d4b8b44dfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c9ac175f07505f2113feaca3546d4b8b44dfa8", "html_url": "https://github.com/rust-lang/rust/commit/49c9ac175f07505f2113feaca3546d4b8b44dfa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c9ac175f07505f2113feaca3546d4b8b44dfa8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa5d76a784512f1e6a5de50d2e058270f3fd92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa5d76a784512f1e6a5de50d2e058270f3fd92f", "html_url": "https://github.com/rust-lang/rust/commit/ffa5d76a784512f1e6a5de50d2e058270f3fd92f"}], "stats": {"total": 130, "additions": 69, "deletions": 61}, "files": [{"sha": "530cf66b55a3a57c4520a9ac0efa9cb71adc9065", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -55,6 +55,7 @@ fn inflate_buf(buf: &[const u8]) -> ~[u8] {\n }\n \n #[test]\n+#[allow(non_implicitly_copyable_typarams)]\n fn test_flate_round_trip() {\n     let r = rand::Rng();\n     let mut words = ~[];"}, {"sha": "6b0204e6b2b8d4c996da06568ac2d0a8705928d0", "filename": "src/libcore/future.rs", "status": "modified", "additions": 57, "deletions": 54, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -174,66 +174,69 @@ proto! future_pipe (\n     }\n )\n \n-#[test]\n-fn test_from_value() {\n-    let f = from_value(~\"snail\");\n-    assert get(&f) == ~\"snail\";\n-}\n+#[allow(non_implicitly_copyable_typarams)]\n+mod test {\n+    #[test]\n+    fn test_from_value() {\n+        let f = from_value(~\"snail\");\n+        assert get(&f) == ~\"snail\";\n+    }\n \n-#[test]\n-fn test_from_port() {\n-    let (po, ch) = future_pipe::init();\n-    future_pipe::server::completed(ch, ~\"whale\");\n-    let f = from_port(po);\n-    assert get(&f) == ~\"whale\";\n-}\n+    #[test]\n+    fn test_from_port() {\n+        let (po, ch) = future_pipe::init();\n+        future_pipe::server::completed(ch, ~\"whale\");\n+        let f = from_port(po);\n+        assert get(&f) == ~\"whale\";\n+    }\n \n-#[test]\n-fn test_from_fn() {\n-    let f = from_fn(|| ~\"brail\");\n-    assert get(&f) == ~\"brail\";\n-}\n+    #[test]\n+    fn test_from_fn() {\n+        let f = from_fn(|| ~\"brail\");\n+        assert get(&f) == ~\"brail\";\n+    }\n \n-#[test]\n-fn test_interface_get() {\n-    let f = from_value(~\"fail\");\n-    assert f.get() == ~\"fail\";\n-}\n+    #[test]\n+    fn test_interface_get() {\n+        let f = from_value(~\"fail\");\n+        assert f.get() == ~\"fail\";\n+    }\n \n-#[test]\n-fn test_with() {\n-    let f = from_value(~\"nail\");\n-    assert with(&f, |v| *v) == ~\"nail\";\n-}\n+    #[test]\n+    fn test_with() {\n+        let f = from_value(~\"nail\");\n+        assert with(&f, |v| copy *v) == ~\"nail\";\n+    }\n \n-#[test]\n-fn test_get_ref_method() {\n-    let f = from_value(22);\n-    assert *f.get_ref() == 22;\n-}\n+    #[test]\n+    fn test_get_ref_method() {\n+        let f = from_value(22);\n+        assert *f.get_ref() == 22;\n+    }\n \n-#[test]\n-fn test_get_ref_fn() {\n-    let f = from_value(22);\n-    assert *get_ref(&f) == 22;\n-}\n+    #[test]\n+    fn test_get_ref_fn() {\n+        let f = from_value(22);\n+        assert *get_ref(&f) == 22;\n+    }\n \n-#[test]\n-fn test_interface_with() {\n-    let f = from_value(~\"kale\");\n-    assert f.with(|v| *v) == ~\"kale\";\n-}\n+    #[test]\n+    fn test_interface_with() {\n+        let f = from_value(~\"kale\");\n+        assert f.with(|v| copy *v) == ~\"kale\";\n+    }\n \n-#[test]\n-fn test_spawn() {\n-    let f = spawn(|| ~\"bale\");\n-    assert get(&f) == ~\"bale\";\n-}\n+    #[test]\n+    fn test_spawn() {\n+        let f = spawn(|| ~\"bale\");\n+        assert get(&f) == ~\"bale\";\n+    }\n \n-#[test]\n-#[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n-fn test_futurefail() {\n-    let f = spawn(|| fail);\n-    let _x: ~str = get(&f);\n-}\n+    #[test]\n+    #[should_fail]\n+    #[ignore(cfg(target_os = \"win32\"))]\n+    fn test_futurefail() {\n+        let f = spawn(|| fail);\n+        let _x: ~str = get(&f);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "5ce0a51fbf3f2a7c68627416f480e418829f97ed", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -827,6 +827,7 @@ fn arch() -> ~str { ~\"x86_64\" }\n fn arch() -> str { ~\"arm\" }\n \n #[cfg(test)]\n+#[allow(non_implicitly_copyable_typarams)]\n mod tests {\n \n     #[test]\n@@ -893,7 +894,7 @@ mod tests {\n         let e = env();\n         assert vec::len(e) > 0u;\n         for vec::each(e) |p| {\n-            let (n, v) = p;\n+            let (n, v) = copy p;\n             log(debug, n);\n             let v2 = getenv(n);\n             // MingW seems to set some funky environment variables like\n@@ -909,7 +910,7 @@ mod tests {\n \n         let mut e = env();\n         setenv(n, ~\"VALUE\");\n-        assert !vec::contains(e, (n, ~\"VALUE\"));\n+        assert !vec::contains(e, (copy n, ~\"VALUE\"));\n \n         e = env();\n         assert vec::contains(e, (n, ~\"VALUE\"));"}, {"sha": "4c86e1541598434a13f6a43b4a6ce0abb84e92cb", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -376,6 +376,7 @@ impl<T:Eq,U:Eq> Result<T,U> : Eq {\n }\n \n #[cfg(test)]\n+#[allow(non_implicitly_copyable_typarams)]\n mod tests {\n     fn op1() -> result::Result<int, ~str> { result::Ok(666) }\n "}, {"sha": "800b4a130e6b6d0503978a153572a10042e19dcc", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -3099,7 +3099,7 @@ mod tests {\n                0x000a_u16 ]) ];\n \n         for vec::each(pairs) |p| {\n-            let (s, u) = p;\n+            let (s, u) = copy p;\n             assert to_utf16(s) == u;\n             assert from_utf16(u) == s;\n             assert from_utf16(to_utf16(s)) == s;"}, {"sha": "6303bbbf0e590ef4fe7a2faf96b93966814af5df", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -84,6 +84,7 @@ impl<A: ToStr> ~A: ToStr {\n }\n \n #[cfg(test)]\n+#[allow(non_implicitly_copyable_typarams)]\n mod tests {\n     #[test]\n     fn test_simple_types() {"}, {"sha": "92a0f681a5652db0fba19a24366c0301b9db75a5", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -144,6 +144,7 @@ impl<A: Ord, B: Ord, C: Ord> (A, B, C): Ord {\n }\n \n #[test]\n+#[allow(non_implicitly_copyable_typarams)]\n fn test_tuple() {\n     assert (948, 4039.48).first() == 948;\n     assert (34.5, ~\"foo\").second() == ~\"foo\";"}, {"sha": "680eb1e2dcbd5330fbf94cd70a504b9d826c295d", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c9ac175f07505f2113feaca3546d4b8b44dfa8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=49c9ac175f07505f2113feaca3546d4b8b44dfa8", "patch": "@@ -2381,19 +2381,19 @@ mod tests {\n         let mut results: ~[~[int]];\n \n         results = ~[];\n-        permute(~[], |v| vec::push(results, v));\n+        permute(~[], |v| vec::push(results, copy v));\n         assert results == ~[~[]];\n \n         results = ~[];\n-        permute(~[7], |v| results += ~[v]);\n+        permute(~[7], |v| results += ~[copy v]);\n         assert results == ~[~[7]];\n \n         results = ~[];\n-        permute(~[1,1], |v| results += ~[v]);\n+        permute(~[1,1], |v| results += ~[copy v]);\n         assert results == ~[~[1,1],~[1,1]];\n \n         results = ~[];\n-        permute(~[5,2,0], |v| results += ~[v]);\n+        permute(~[5,2,0], |v| results += ~[copy v]);\n         assert results ==\n             ~[~[5,2,0],~[5,0,2],~[2,5,0],~[2,0,5],~[0,5,2],~[0,2,5]];\n     }"}]}