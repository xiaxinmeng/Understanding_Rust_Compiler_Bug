{"sha": "abe040d876f697ef86b1ad395caf68c03ecbf046", "node_id": "C_kwDOAAsO6NoAKGFiZTA0MGQ4NzZmNjk3ZWY4NmIxYWQzOTVjYWY2OGMwM2VjYmYwNDY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-12-04T19:58:03Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-09T08:41:21Z"}, "message": "Change commit_if_ok to probe", "tree": {"sha": "4ce6a171da739b7492ac1b007f328b040ff9ad7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ce6a171da739b7492ac1b007f328b040ff9ad7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe040d876f697ef86b1ad395caf68c03ecbf046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe040d876f697ef86b1ad395caf68c03ecbf046", "html_url": "https://github.com/rust-lang/rust/commit/abe040d876f697ef86b1ad395caf68c03ecbf046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe040d876f697ef86b1ad395caf68c03ecbf046/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e677c0645862d17a12c6d04b3019203c8e23fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e677c0645862d17a12c6d04b3019203c8e23fcc", "html_url": "https://github.com/rust-lang/rust/commit/2e677c0645862d17a12c6d04b3019203c8e23fcc"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "f449d360c16869426b6ae5dd1e8be74d0fa07e4f", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abe040d876f697ef86b1ad395caf68c03ecbf046/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe040d876f697ef86b1ad395caf68c03ecbf046/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=abe040d876f697ef86b1ad395caf68c03ecbf046", "patch": "@@ -173,16 +173,11 @@ fn satisfied_from_param_env<'tcx>(\n         type BreakTy = ();\n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"is_const_evaluatable: candidate={:?}\", c);\n-            if let Ok(()) = self.infcx.commit_if_ok(|_| {\n+            if self.infcx.probe(|_| {\n                 let ocx = ObligationCtxt::new_in_snapshot(self.infcx);\n-                if let Ok(()) = ocx.eq(&ObligationCause::dummy(), self.param_env, c.ty(), self.ct.ty())\n-                    && let Ok(()) = ocx.eq(&ObligationCause::dummy(), self.param_env, c, self.ct)\n+                ocx.eq(&ObligationCause::dummy(), self.param_env, c.ty(), self.ct.ty()).is_ok()\n+                    && ocx.eq(&ObligationCause::dummy(), self.param_env, c, self.ct).is_ok()\n                     && ocx.select_all_or_error().is_empty()\n-                {\n-                    Ok(())\n-                } else {\n-                    Err(())\n-                }\n             }) {\n                 ControlFlow::BREAK\n             } else if let ty::ConstKind::Expr(e) = c.kind() {"}, {"sha": "b96e210808b97f1fb525187ee93b1a1eb5525eac", "filename": "src/test/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abe040d876f697ef86b1ad395caf68c03ecbf046/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe040d876f697ef86b1ad395caf68c03ecbf046/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs?ref=abe040d876f697ef86b1ad395caf68c03ecbf046", "patch": "@@ -15,8 +15,7 @@ where\n     [(); (L - 1) + 1 + L]:,\n {\n     foo::<_, L>([(); L + 1 + L]);\n-    //~^ ERROR: mismatched types\n-    //~^^ ERROR: unconstrained generic constant\n+    //~^ ERROR: unconstrained generic constant\n }\n \n fn main() {}"}, {"sha": "09e5e3f862a2092bb3904b6ba3fb40f316621d6a", "filename": "src/test/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abe040d876f697ef86b1ad395caf68c03ecbf046/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe040d876f697ef86b1ad395caf68c03ecbf046/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.stderr?ref=abe040d876f697ef86b1ad395caf68c03ecbf046", "patch": "@@ -1,12 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/wf_obligation.rs:17:17\n-   |\n-LL |     foo::<_, L>([(); L + 1 + L]);\n-   |                 ^^^^^^^^^^^^^^^ expected `N + 1 + M`, found `L + 1 + L`\n-   |\n-   = note: expected constant `N + 1 + M`\n-              found constant `L + 1 + L`\n-\n error: unconstrained generic constant\n   --> $DIR/wf_obligation.rs:17:22\n    |\n@@ -15,6 +6,5 @@ LL |     foo::<_, L>([(); L + 1 + L]);\n    |\n    = help: try adding a `where` bound using this expression: `where [(); L + 1 + L]:`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "f7d239499439688047b95f81ad9543c989e25525", "filename": "src/test/ui/const-generics/issues/issue-105037.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/abe040d876f697ef86b1ad395caf68c03ecbf046/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-105037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe040d876f697ef86b1ad395caf68c03ecbf046/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-105037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-105037.rs?ref=abe040d876f697ef86b1ad395caf68c03ecbf046", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+#![allow(dead_code)]\n+\n+trait Table<const D: usize>: Sync {\n+    const COLUMNS: usize;\n+}\n+\n+struct Table1<const D: usize>;\n+impl<const D: usize> Table<D> for Table1<D> {\n+    const COLUMNS: usize = 123;\n+}\n+\n+struct Table2<const D: usize>;\n+impl<const D: usize> Table<D> for Table2<D> {\n+    const COLUMNS: usize = 456;\n+}\n+\n+fn process_table<T: Table<D>, const D: usize>(_table: T)\n+where\n+    [(); T::COLUMNS]:,\n+{\n+}\n+\n+fn process_all_tables<const D: usize>()\n+where\n+    [(); Table2::<D>::COLUMNS]:,\n+    [(); Table1::<D>::COLUMNS]:,\n+{\n+    process_table(Table1::<D>);\n+    process_table(Table2::<D>);\n+}\n+\n+fn main() {}"}]}