{"sha": "331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMWQyZDZkMzFlMWM3OTI1YzIzZjUxNzNlNWZiYmI2MWY4YjNlOTE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-02T06:56:08Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-02T08:10:56Z"}, "message": "repr: handle tuple structs sanely\n\nCloses #8919", "tree": {"sha": "ab38cdf7efc4210edaac42b0e6fa6ac2e9bf8a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab38cdf7efc4210edaac42b0e6fa6ac2e9bf8a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "html_url": "https://github.com/rust-lang/rust/commit/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1f0027c73f2728fa20867a4dfdbdcfad77847f", "html_url": "https://github.com/rust-lang/rust/commit/cc1f0027c73f2728fa20867a4dfdbdcfad77847f"}], "stats": {"total": 92, "additions": 58, "deletions": 34}, "files": [{"sha": "45f2830dafee9d8b1eb8c7822788925c767b7daa", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "patch": "@@ -51,6 +51,10 @@ impl Reflector {\n         C_int(self.bcx.ccx(), i)\n     }\n \n+    pub fn c_bool(&mut self, b: bool) -> ValueRef {\n+        C_bool(b)\n+    }\n+\n     pub fn c_slice(&mut self, s: @str) -> ValueRef {\n         // We're careful to not use first class aggregates here because that\n         // will kick us off fast isel. (Issue #4352.)\n@@ -250,14 +254,19 @@ impl Reflector {\n \n           ty::ty_struct(did, ref substs) => {\n               let fields = ty::struct_fields(tcx, did, substs);\n+              let mut named_fields = false;\n+              if !fields.is_empty() {\n+                  named_fields = fields[0].ident != special_idents::unnamed_field;\n+              }\n \n               let extra = ~[self.c_slice(ty_to_str(tcx, t).to_managed()),\n+                            self.c_bool(named_fields),\n                             self.c_uint(fields.len())] + self.c_size_and_align(t);\n               do self.bracketed(\"class\", extra) |this| {\n                   for (i, field) in fields.iter().enumerate() {\n                       let extra = ~[this.c_uint(i),\n-                                    this.c_slice(\n-                                        bcx.ccx().sess.str_of(field.ident))]\n+                                    this.c_slice(bcx.ccx().sess.str_of(field.ident)),\n+                                    this.c_bool(named_fields)]\n                           + this.c_mt(&field.mt);\n                       this.visit(\"class_field\", extra);\n                   }"}, {"sha": "91e3719e3d0532c79eb6c0c753a09339f524033b", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "patch": "@@ -331,25 +331,28 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint) -> bool {\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_class(name, n_fields, sz, align) {\n+        if ! self.inner.visit_enter_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str, mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool, mtbl: uint,\n+                         inner: *TyDesc) -> bool {\n         unsafe { self.align((*inner).align); }\n-        if ! self.inner.visit_class_field(i, name, mtbl, inner) {\n+        if ! self.inner.visit_class_field(i, name, named, mtbl, inner) {\n             return false;\n         }\n         unsafe { self.bump((*inner).size); }\n         true\n     }\n \n-    fn visit_leave_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint) -> bool {\n-        if ! self.inner.visit_leave_class(name, n_fields, sz, align) {\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n+        if ! self.inner.visit_leave_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true"}, {"sha": "02a3561a6f41f5b81cf5e90fbd88f8b0c2cef0f7", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "patch": "@@ -412,31 +412,40 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint,\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n                          _sz: uint, _align: uint) -> bool {\n         self.writer.write(name.as_bytes());\n         if n_fields != 0 {\n-            self.writer.write(['{' as u8]);\n+            if named_fields {\n+                self.writer.write(['{' as u8]);\n+            } else {\n+                self.writer.write(['(' as u8]);\n+            }\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str,\n-                         mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n+                         _mtbl: uint, inner: *TyDesc) -> bool {\n         if i != 0 {\n             self.writer.write(\", \".as_bytes());\n         }\n-        self.write_mut_qualifier(mtbl);\n-        self.writer.write(name.as_bytes());\n-        self.writer.write(\": \".as_bytes());\n+        if named {\n+            self.writer.write(name.as_bytes());\n+            self.writer.write(\": \".as_bytes());\n+        }\n         self.visit_inner(inner);\n         true\n     }\n \n-    fn visit_leave_class(&mut self, _name: &str, n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, named_fields: bool, n_fields: uint,\n                          _sz: uint, _align: uint) -> bool {\n         if n_fields != 0 {\n-            self.writer.write(['}' as u8]);\n+            if named_fields {\n+                self.writer.write(['}' as u8]);\n+            } else {\n+                self.writer.write([')' as u8]);\n+            }\n         }\n         true\n     }\n@@ -669,4 +678,7 @@ fn test_repr() {\n \n     struct Foo;\n     exact_test(&(~[Foo, Foo]), \"~[repr::test_repr::Foo, repr::test_repr::Foo]\");\n+\n+    struct Bar(int, int);\n+    exact_test(&(Bar(2, 2)), \"repr::test_repr::Bar(2, 2)\");\n }"}, {"sha": "fbd5bdaf587e72b69be35df51c0c76888fbc3068", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "patch": "@@ -220,11 +220,11 @@ pub trait TyVisitor {\n     fn visit_leave_rec(&mut self, n_fields: uint,\n                        sz: uint, align: uint) -> bool;\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint,\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n                          sz: uint, align: uint) -> bool;\n-    fn visit_class_field(&mut self, i: uint, name: &str,\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n                          mtbl: uint, inner: *TyDesc) -> bool;\n-    fn visit_leave_class(&mut self, name: &str, n_fields: uint,\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n                          sz: uint, align: uint) -> bool;\n \n     fn visit_enter_tup(&mut self, n_fields: uint,"}, {"sha": "2d9f4a2ff6f6d9192ca0e756acfe018fb3a0156a", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "patch": "@@ -317,26 +317,26 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint)\n-                      -> bool {\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_class(name, n_fields, sz, align) {\n+        if ! self.inner.visit_enter_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str,\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n                          mtbl: uint, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_class_field(i, name, mtbl, inner) {\n+        if ! self.inner.visit_class_field(i, name, named, mtbl, inner) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_leave_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint)\n-                      -> bool {\n-        if ! self.inner.visit_leave_class(name, n_fields, sz, align) {\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n+        if ! self.inner.visit_leave_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n@@ -565,13 +565,13 @@ impl TyVisitor for my_visitor {\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_enter_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(&mut self, _i: uint, _name: &str,\n+    fn visit_class_field(&mut self, _i: uint, _name: &str, _named: bool,\n                          _mtbl: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n-    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,"}, {"sha": "b3d81d9c51102ac5430bd92bbc874eb1ad57007a", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=331d2d6d31e1c7925c23f5173e5fbbb61f8b3e91", "patch": "@@ -99,11 +99,11 @@ impl TyVisitor for MyVisitor {\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_enter_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(&mut self, _i: uint, _name: &str,\n+    fn visit_class_field(&mut self, _i: uint, _name: &str, _named: bool,\n                          _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,"}]}