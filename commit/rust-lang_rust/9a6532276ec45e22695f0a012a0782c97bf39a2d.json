{"sha": "9a6532276ec45e22695f0a012a0782c97bf39a2d", "node_id": "C_kwDOAAsO6NoAKDlhNjUzMjI3NmVjNDVlMjI2OTVmMGEwMTJhMDc4MmM5N2JmMzlhMmQ", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-10T13:11:00Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-10T13:11:00Z"}, "message": "replace `self.clone()` with `self.create_snapshot_for_diagnostic()`", "tree": {"sha": "70d129a529c2b93bebfc8be07e3f22b67228e4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70d129a529c2b93bebfc8be07e3f22b67228e4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6532276ec45e22695f0a012a0782c97bf39a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6532276ec45e22695f0a012a0782c97bf39a2d", "html_url": "https://github.com/rust-lang/rust/commit/9a6532276ec45e22695f0a012a0782c97bf39a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6532276ec45e22695f0a012a0782c97bf39a2d/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db82368574b7b751203418300345a4eb75f1147", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db82368574b7b751203418300345a4eb75f1147", "html_url": "https://github.com/rust-lang/rust/commit/2db82368574b7b751203418300345a4eb75f1147"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "a90eff02210821d890e387194aa451342ff8976e", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=9a6532276ec45e22695f0a012a0782c97bf39a2d", "patch": "@@ -151,7 +151,7 @@ impl<'a> Parser<'a> {\n         span: Span,\n         attr_type: OuterAttributeType,\n     ) -> Option<Span> {\n-        let mut snapshot = self.clone();\n+        let mut snapshot = self.create_snapshot_for_diagnostic();\n         let lo = span.lo()\n             + BytePos(match attr_type {\n                 OuterAttributeType::Attribute => 1,"}, {"sha": "250050a48f0a9e72bf1c83b453eb4ea9f24b8997", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9a6532276ec45e22695f0a012a0782c97bf39a2d", "patch": "@@ -481,7 +481,7 @@ impl<'a> Parser<'a> {\n             // fn foo() -> Foo {\n             //     field: value,\n             // }\n-            let mut snapshot = self.clone();\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n             let path =\n                 Path { segments: vec![], span: self.prev_token.span.shrink_to_lo(), tokens: None };\n             let struct_expr = snapshot.parse_struct_expr(None, path, AttrVec::new(), false);\n@@ -507,7 +507,7 @@ impl<'a> Parser<'a> {\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],\n                         s,\n@@ -721,7 +721,7 @@ impl<'a> Parser<'a> {\n     /// angle brackets.\n     pub(super) fn check_turbofish_missing_angle_brackets(&mut self, segment: &mut PathSegment) {\n         if token::ModSep == self.token.kind && segment.args.is_none() {\n-            let snapshot = self.clone();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             self.bump();\n             let lo = self.token.span;\n             match self.parse_angle_args(None) {\n@@ -755,14 +755,14 @@ impl<'a> Parser<'a> {\n                         .emit();\n                     } else {\n                         // This doesn't look like an invalid turbofish, can't recover parse state.\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                     }\n                 }\n                 Err(err) => {\n                     // We couldn't parse generic parameters, unlikely to be a turbofish. Rely on\n                     // generic parse error instead.\n                     err.cancel();\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                 }\n             }\n         }\n@@ -868,7 +868,7 @@ impl<'a> Parser<'a> {\n                 // `x == y < z`\n                 (BinOpKind::Eq, AssocOp::Less | AssocOp::LessEqual | AssocOp::Greater | AssocOp::GreaterEqual) => {\n                     // Consume `z`/outer-op-rhs.\n-                    let snapshot = self.clone();\n+                    let snapshot = self.create_snapshot_for_diagnostic();\n                     match self.parse_expr() {\n                         Ok(r2) => {\n                             // We are sure that outer-op-rhs could be consumed, the suggestion is\n@@ -878,14 +878,14 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(expr_err) => {\n                             expr_err.cancel();\n-                            *self = snapshot;\n+                            self.restore_snapshot(snapshot);\n                             false\n                         }\n                     }\n                 }\n                 // `x > y == z`\n                 (BinOpKind::Lt | BinOpKind::Le | BinOpKind::Gt | BinOpKind::Ge, AssocOp::Equal) => {\n-                    let snapshot = self.clone();\n+                    let snapshot = self.create_snapshot_for_diagnostic();\n                     // At this point it is always valid to enclose the lhs in parentheses, no\n                     // further checks are necessary.\n                     match self.parse_expr() {\n@@ -895,7 +895,7 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(expr_err) => {\n                             expr_err.cancel();\n-                            *self = snapshot;\n+                            self.restore_snapshot(snapshot);\n                             false\n                         }\n                     }\n@@ -960,7 +960,7 @@ impl<'a> Parser<'a> {\n                     || outer_op.node == AssocOp::Greater\n                 {\n                     if outer_op.node == AssocOp::Less {\n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump();\n                         // So far we have parsed `foo<bar<`, consume the rest of the type args.\n                         let modifiers =\n@@ -972,15 +972,15 @@ impl<'a> Parser<'a> {\n                         {\n                             // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n                             // parser and bail out.\n-                            *self = snapshot.clone();\n+                            self.restore_snapshot(snapshot);\n                         }\n                     }\n                     return if token::ModSep == self.token.kind {\n                         // We have some certainty that this was a bad turbofish at this point.\n                         // `foo< bar >::`\n                         suggest(&mut err);\n \n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump(); // `::`\n \n                         // Consume the rest of the likely `foo<bar>::new()` or return at `foo<bar>`.\n@@ -997,7 +997,7 @@ impl<'a> Parser<'a> {\n                                 expr_err.cancel();\n                                 // Not entirely sure now, but we bubble the error up with the\n                                 // suggestion.\n-                                *self = snapshot;\n+                                self.restore_snapshot(snapshot);\n                                 Err(err)\n                             }\n                         }\n@@ -1051,7 +1051,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn consume_fn_args(&mut self) -> Result<(), ()> {\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         self.bump(); // `(`\n \n         // Consume the fn call arguments.\n@@ -1061,7 +1061,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == token::Eof {\n             // Not entirely sure that what we consumed were fn arguments, rollback.\n-            *self = snapshot;\n+            self.restore_snapshot(snapshot);\n             Err(())\n         } else {\n             // 99% certain that the suggestion is correct, continue parsing.\n@@ -2002,12 +2002,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn recover_const_param_decl(&mut self, ty_generics: Option<&Generics>) -> Option<GenericArg> {\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         let param = match self.parse_const_param(vec![]) {\n             Ok(param) => param,\n             Err(err) => {\n                 err.cancel();\n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n                 return None;\n             }\n         };\n@@ -2099,7 +2099,7 @@ impl<'a> Parser<'a> {\n             // We perform these checks and early return to avoid taking a snapshot unnecessarily.\n             return Err(err);\n         }\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         if is_op_or_dot {\n             self.bump();\n         }\n@@ -2131,7 +2131,7 @@ impl<'a> Parser<'a> {\n                 err.cancel();\n             }\n         }\n-        *self = snapshot;\n+        self.restore_snapshot(snapshot);\n         Err(err)\n     }\n \n@@ -2191,7 +2191,7 @@ impl<'a> Parser<'a> {\n         let span = self.token.span;\n         // We only emit \"unexpected `:`\" error here if we can successfully parse the\n         // whole pattern correctly in that case.\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n \n         // Create error for \"unexpected `:`\".\n         match self.expected_one_of_not_found(&[], &[]) {\n@@ -2203,7 +2203,7 @@ impl<'a> Parser<'a> {\n                         // reasonable error.\n                         inner_err.cancel();\n                         err.cancel();\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                     }\n                     Ok(mut pat) => {\n                         // We've parsed the rest of the pattern.\n@@ -2282,7 +2282,7 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 // Carry on as if we had not done anything. This should be unreachable.\n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n             }\n         };\n         first_pat"}, {"sha": "e160385d3a4be80efa8ae05b98261a835d207e1d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9a6532276ec45e22695f0a012a0782c97bf39a2d", "patch": "@@ -704,7 +704,7 @@ impl<'a> Parser<'a> {\n                         ExprKind::Path(None, ast::Path { segments, .. }),\n                         TokenKind::Ident(kw::For | kw::Loop | kw::While, false),\n                     ) if segments.len() == 1 => {\n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         let label = Label {\n                             ident: Ident::from_str_and_span(\n                                 &format!(\"'{}\", segments[0].ident),\n@@ -726,7 +726,7 @@ impl<'a> Parser<'a> {\n                             }\n                             Err(err) => {\n                                 err.cancel();\n-                                *self = snapshot;\n+                                self.restore_snapshot(snapshot);\n                             }\n                         }\n                     }\n@@ -1886,7 +1886,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         attrs: AttrVec,\n     ) -> Option<P<Expr>> {\n-        let mut snapshot = self.clone();\n+        let mut snapshot = self.create_snapshot_for_diagnostic();\n         match snapshot.parse_array_or_repeat_expr(attrs, token::Brace) {\n             Ok(arr) => {\n                 let hi = snapshot.prev_token.span;\n@@ -1902,7 +1902,7 @@ impl<'a> Parser<'a> {\n                 .note(\"to define an array, one would use square brackets instead of curly braces\")\n                 .emit();\n \n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n                 Some(self.mk_expr_err(arr.span))\n             }\n             Err(e) => {\n@@ -2370,7 +2370,7 @@ impl<'a> Parser<'a> {\n         if self.token.kind != token::Semi {\n             return None;\n         }\n-        let start_snapshot = self.clone();\n+        let start_snapshot = self.create_snapshot_for_diagnostic();\n         let semi_sp = self.token.span;\n         self.bump(); // `;`\n         let mut stmts =\n@@ -2418,15 +2418,15 @@ impl<'a> Parser<'a> {\n                 return Some(err(self, stmts));\n             }\n             if self.token.kind == token::Comma {\n-                *self = start_snapshot;\n+                self.restore_snapshot(start_snapshot);\n                 return None;\n             }\n-            let pre_pat_snapshot = self.clone();\n+            let pre_pat_snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_pat_no_top_alt(None) {\n                 Ok(_pat) => {\n                     if self.token.kind == token::FatArrow {\n                         // Reached arm end.\n-                        *self = pre_pat_snapshot;\n+                        self.restore_snapshot(pre_pat_snapshot);\n                         return Some(err(self, stmts));\n                     }\n                 }\n@@ -2435,21 +2435,21 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            *self = pre_pat_snapshot;\n+            self.restore_snapshot(pre_pat_snapshot);\n             match self.parse_stmt_without_recovery(true, ForceCollect::No) {\n                 // Consume statements for as long as possible.\n                 Ok(Some(stmt)) => {\n                     stmts.push(stmt);\n                 }\n                 Ok(None) => {\n-                    *self = start_snapshot;\n+                    self.restore_snapshot(start_snapshot);\n                     break;\n                 }\n                 // We couldn't parse either yet another statement missing it's\n                 // enclosing block nor the next arm's pattern or closing brace.\n                 Err(stmt_err) => {\n                     stmt_err.cancel();\n-                    *self = start_snapshot;\n+                    self.restore_snapshot(start_snapshot);\n                     break;\n                 }\n             }"}, {"sha": "17c57867cf9cfff8435f098efa7891060d29a860", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6532276ec45e22695f0a012a0782c97bf39a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=9a6532276ec45e22695f0a012a0782c97bf39a2d", "patch": "@@ -645,7 +645,7 @@ impl<'a> Parser<'a> {\n         } else {\n             // Fall back by trying to parse a const-expr expression. If we successfully do so,\n             // then we should report an error that it needs to be wrapped in braces.\n-            let snapshot = self.clone();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_expr_res(Restrictions::CONST_EXPR, None) {\n                 Ok(expr) => {\n                     return Ok(Some(self.dummy_const_arg_needs_braces(\n@@ -654,7 +654,7 @@ impl<'a> Parser<'a> {\n                     )));\n                 }\n                 Err(err) => {\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                     err.cancel();\n                     return Ok(None);\n                 }"}]}