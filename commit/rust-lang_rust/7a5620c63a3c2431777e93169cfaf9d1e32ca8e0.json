{"sha": "7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNTYyMGM2M2EzYzI0MzE3NzdlOTMxNjljZmFmOWQxZTMyY2E4ZTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-28T21:12:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:55:35Z"}, "message": "Iterate DefId to encode expn_that_defined.", "tree": {"sha": "0ec5a7a7f4f01050753a72ef526875c1006f2cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ec5a7a7f4f01050753a72ef526875c1006f2cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "html_url": "https://github.com/rust-lang/rust/commit/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "293e885daaa6fdb518f713e46170e1fc5cdb7183", "url": "https://api.github.com/repos/rust-lang/rust/commits/293e885daaa6fdb518f713e46170e1fc5cdb7183", "html_url": "https://github.com/rust-lang/rust/commit/293e885daaa6fdb518f713e46170e1fc5cdb7183"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "da611ab9c1c209457305fb3119396ca48c643c55", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "patch": "@@ -769,6 +769,7 @@ impl EncodeContext<'a, 'tcx> {\n             });\n             record!(self.tables.span[def_id] <- tcx.def_span(def_id));\n             record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));\n+            record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n             if should_encode_visibility(def_kind) {\n                 record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n             }\n@@ -799,7 +800,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -910,7 +910,6 @@ impl EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_field({:?})\", def_id);\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n-        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -933,7 +932,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n-        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -1380,7 +1378,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         };\n         record!(self.tables.kind[def_id] <- entry_kind);\n-        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n             hir::ItemKind::ForeignMod { items, .. } => record!(self.tables.children[def_id] <-"}]}