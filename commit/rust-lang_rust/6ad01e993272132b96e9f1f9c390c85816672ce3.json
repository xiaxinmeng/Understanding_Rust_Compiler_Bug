{"sha": "6ad01e993272132b96e9f1f9c390c85816672ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZDAxZTk5MzI3MjEzMmI5NmU5ZjFmOWMzOTBjODU4MTY2NzJjZTM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-13T20:26:55Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-18T20:14:40Z"}, "message": "run wfcheck in parralel again, add test for 74950", "tree": {"sha": "7c1a167b890754ddf7cfb9563c221400bfbc7284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1a167b890754ddf7cfb9563c221400bfbc7284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ad01e993272132b96e9f1f9c390c85816672ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad01e993272132b96e9f1f9c390c85816672ce3", "html_url": "https://github.com/rust-lang/rust/commit/6ad01e993272132b96e9f1f9c390c85816672ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ad01e993272132b96e9f1f9c390c85816672ce3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70dfe3fa746ac459747da30aca0bac11379088d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dfe3fa746ac459747da30aca0bac11379088d5", "html_url": "https://github.com/rust-lang/rust/commit/70dfe3fa746ac459747da30aca0bac11379088d5"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "824e81a974ca61f00b8dd7c6bf1d08a4fad52448", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6ad01e993272132b96e9f1f9c390c85816672ce3", "patch": "@@ -729,8 +729,8 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n }\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n-    let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-    tcx.hir().krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n+    let visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n+    tcx.hir().krate().par_visit_all_item_likes(&visit);\n }\n \n fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {"}, {"sha": "cbf302ad71005c5e4b7ab2f2a1cf39ee9f1b6dd4", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=6ad01e993272132b96e9f1f9c390c85816672ce3", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n use rustc_hir::lang_items;\n use rustc_hir::ItemKind;\n use rustc_middle::hir::map as hir_map;\n@@ -1373,6 +1374,7 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     fcx.select_all_obligations_or_error();\n }\n \n+#[derive(Clone, Copy)]\n pub struct CheckTypeWellFormedVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n@@ -1383,6 +1385,20 @@ impl CheckTypeWellFormedVisitor<'tcx> {\n     }\n }\n \n+impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n+    fn visit_item(&self, i: &'tcx hir::Item<'tcx>) {\n+        Visitor::visit_item(&mut self.clone(), i);\n+    }\n+\n+    fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n+        Visitor::visit_trait_item(&mut self.clone(), trait_item);\n+    }\n+\n+    fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n+        Visitor::visit_impl_item(&mut self.clone(), impl_item);\n+    }\n+}\n+\n impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     type Map = hir_map::Map<'tcx>;\n \n@@ -1413,8 +1429,7 @@ impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n         check_param_wf(self.tcx, p);\n-        // No need to walk further here, there is nothing interesting\n-        // inside of generic params we don't already check in `check_param_wf`.\n+        hir_visit::walk_generic_param(self, p);\n     }\n }\n "}, {"sha": "bcb27d8d1e19740a4f1a3c975c01393077b354a2", "filename": "src/test/ui/const-generics/issues/issue-56445.min.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr?ref=6ad01e993272132b96e9f1f9c390c85816672ce3", "patch": "@@ -6,15 +6,6 @@ LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |\n    = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n \n-error: using `&'static str` as const generic parameters is forbidden\n-  --> $DIR/issue-56445.rs:9:25\n-   |\n-LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-   |                         ^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0771`."}, {"sha": "0bcde348b05d5d1ef52d007fe1941481162ae5a3", "filename": "src/test/ui/const-generics/issues/issue-56445.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs?ref=6ad01e993272132b96e9f1f9c390c85816672ce3", "patch": "@@ -8,6 +8,5 @@ use std::marker::PhantomData;\n \n struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n //~^ ERROR: use of non-static lifetime `'a` in const generic\n-//[min]~| ERROR: using `&'static str` as const\n \n impl Bug<'_, \"\"> {}"}, {"sha": "e98f1d94a72409efb1d4be445de6e8af6177101d", "filename": "src/test/ui/const-generics/issues/issue-74950.min.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=6ad01e993272132b96e9f1f9c390c85816672ce3", "patch": "@@ -0,0 +1,47 @@\n+error: using `Inner` as const generic parameters is forbidden\n+  --> $DIR/issue-74950.rs:18:23\n+   |\n+LL | struct Outer<const I: Inner>;\n+   |                       ^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `Inner` as const generic parameters is forbidden\n+  --> $DIR/issue-74950.rs:18:23\n+   |\n+LL | struct Outer<const I: Inner>;\n+   |                       ^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `Inner` as const generic parameters is forbidden\n+  --> $DIR/issue-74950.rs:18:23\n+   |\n+LL | struct Outer<const I: Inner>;\n+   |                       ^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `Inner` as const generic parameters is forbidden\n+  --> $DIR/issue-74950.rs:18:23\n+   |\n+LL | struct Outer<const I: Inner>;\n+   |                       ^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `Inner` as const generic parameters is forbidden\n+  --> $DIR/issue-74950.rs:18:23\n+   |\n+LL | struct Outer<const I: Inner>;\n+   |                       ^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "bfa0630a9362991259bfee784a01b27cd623ef74", "filename": "src/test/ui/const-generics/issues/issue-74950.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad01e993272132b96e9f1f9c390c85816672ce3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs?ref=6ad01e993272132b96e9f1f9c390c85816672ce3", "patch": "@@ -0,0 +1,25 @@\n+// [full] build-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+\n+#[derive(PartialEq, Eq)]\n+struct Inner;\n+\n+// Note: We emit the error 5 times if we don't deduplicate:\n+// - struct definition\n+// - impl PartialEq\n+// - impl Eq\n+// - impl StructuralPartialEq\n+// - impl StructuralEq\n+#[derive(PartialEq, Eq)]\n+struct Outer<const I: Inner>;\n+//[min]~^ using `Inner` as const generic parameters is forbidden\n+//[min]~| using `Inner` as const generic parameters is forbidden\n+//[min]~| using `Inner` as const generic parameters is forbidden\n+//[min]~| using `Inner` as const generic parameters is forbidden\n+//[min]~| using `Inner` as const generic parameters is forbidden\n+\n+fn main() {}"}]}