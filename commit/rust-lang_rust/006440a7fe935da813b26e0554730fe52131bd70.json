{"sha": "006440a7fe935da813b26e0554730fe52131bd70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNjQ0MGE3ZmU5MzVkYTgxM2IyNmUwNTU0NzMwZmU1MjEzMWJkNzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-16T04:05:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-16T04:05:12Z"}, "message": "Rollup merge of #61447 - scottmcm:vec-vecdeque, r=sfackler\n\nAdd some Vec <-> VecDeque documentation\n\nThese are more than just `.into_iter().collect()`, so talk about some of their nuances.\n\nFor VecDeque -> Vec I'm trying to intentionally not write a guarantee for people making their own `Vec`s, since the rules are more complicated than I think we want to commit to forever.\n\nThe \"Vec -> VecDeque doesn't reallocate\" guarantee seems reasonable, though.  (And I'm intentionally ambiguous about when it's O(1) instead of O(n).)", "tree": {"sha": "2cd83799f08519d01cd49256d230740f691797a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd83799f08519d01cd49256d230740f691797a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/006440a7fe935da813b26e0554730fe52131bd70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdBb/4CRBK7hj4Ov3rIwAAdHIIAEVX4bpiyLG7rhTxxfNt4RS3\nKwwocYTDwzgoVCcD4QBMvilR25CHwpT6no+I5AO7anuu0BWyL+Xfl3xExRh5ZNqQ\n+DYJDojLYAyMSp90mYA6V+0GYSI79Ay2rOQiYfaPSd4i4kcI4IumtFj5zcDFSTzk\nT3v8ABybjU55F8KednCSp1DpMXAmi9yrFgXNFp34LztOLoaUQbM25K88A/+Hyv7B\nZ+b9rNa/gjVY7PeLGvxiXJyl0j5l4aS8Ht8f2CMRuFMZbpao0iw1VoP5nRuugnNr\nJu6nqQPCQKRi0Ie7D4e8GjyEBkAg+7vWbD1FdUmmc+eJ3iWcRAGmLDZ61YMCOm8=\n=Nydl\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cd83799f08519d01cd49256d230740f691797a0\nparent 0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\nparent 0150448f1b5474bb0c5fe3297eed0c51dae44dc8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560657912 +0200\ncommitter GitHub <noreply@github.com> 1560657912 +0200\n\nRollup merge of #61447 - scottmcm:vec-vecdeque, r=sfackler\n\nAdd some Vec <-> VecDeque documentation\n\nThese are more than just `.into_iter().collect()`, so talk about some of their nuances.\n\nFor VecDeque -> Vec I'm trying to intentionally not write a guarantee for people making their own `Vec`s, since the rules are more complicated than I think we want to commit to forever.\n\nThe \"Vec -> VecDeque doesn't reallocate\" guarantee seems reasonable, though.  (And I'm intentionally ambiguous about when it's O(1) instead of O(n).)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/006440a7fe935da813b26e0554730fe52131bd70", "html_url": "https://github.com/rust-lang/rust/commit/006440a7fe935da813b26e0554730fe52131bd70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/006440a7fe935da813b26e0554730fe52131bd70/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77", "html_url": "https://github.com/rust-lang/rust/commit/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77"}, {"sha": "0150448f1b5474bb0c5fe3297eed0c51dae44dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0150448f1b5474bb0c5fe3297eed0c51dae44dc8", "html_url": "https://github.com/rust-lang/rust/commit/0150448f1b5474bb0c5fe3297eed0c51dae44dc8"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "71faf672962b3312bd7052ae44c117ca9b321de2", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/006440a7fe935da813b26e0554730fe52131bd70/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006440a7fe935da813b26e0554730fe52131bd70/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=006440a7fe935da813b26e0554730fe52131bd70", "patch": "@@ -2709,6 +2709,11 @@ impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n \n #[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]\n impl<T> From<Vec<T>> for VecDeque<T> {\n+    /// Turn a [`Vec<T>`] into a [`VecDeque<T>`].\n+    ///\n+    /// This avoids reallocating where possible, but the conditions for that are\n+    /// strict, and subject to change, and so shouldn't be relied upon unless the\n+    /// `Vec<T>` came from `From<VecDeque<T>>` and hasn't been reallocated.\n     fn from(mut other: Vec<T>) -> Self {\n         unsafe {\n             let other_buf = other.as_mut_ptr();\n@@ -2735,6 +2740,32 @@ impl<T> From<Vec<T>> for VecDeque<T> {\n \n #[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]\n impl<T> From<VecDeque<T>> for Vec<T> {\n+    /// Turn a [`VecDeque<T>`] into a [`Vec<T>`].\n+    ///\n+    /// This never needs to re-allocate, but does need to do O(n) data movement if\n+    /// the circular buffer doesn't happen to be at the beginning of the allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// // This one is O(1).\n+    /// let deque: VecDeque<_> = (1..5).collect();\n+    /// let ptr = deque.as_slices().0.as_ptr();\n+    /// let vec = Vec::from(deque);\n+    /// assert_eq!(vec, [1, 2, 3, 4]);\n+    /// assert_eq!(vec.as_ptr(), ptr);\n+    ///\n+    /// // This one needs data rearranging.\n+    /// let mut deque: VecDeque<_> = (1..5).collect();\n+    /// deque.push_front(9);\n+    /// deque.push_front(8);\n+    /// let ptr = deque.as_slices().1.as_ptr();\n+    /// let vec = Vec::from(deque);\n+    /// assert_eq!(vec, [8, 9, 1, 2, 3, 4]);\n+    /// assert_eq!(vec.as_ptr(), ptr);\n+    /// ```\n     fn from(other: VecDeque<T>) -> Self {\n         unsafe {\n             let buf = other.buf.ptr();"}]}