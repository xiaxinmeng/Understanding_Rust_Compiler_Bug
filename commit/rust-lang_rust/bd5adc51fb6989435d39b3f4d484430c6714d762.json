{"sha": "bd5adc51fb6989435d39b3f4d484430c6714d762", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNWFkYzUxZmI2OTg5NDM1ZDM5YjNmNGQ0ODQ0MzBjNjcxNGQ3NjI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-16T18:11:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-25T14:50:04Z"}, "message": "Rename surviving uses of `sty`", "tree": {"sha": "6e78476e009a43e3404fa942fb43e2514bf06b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e78476e009a43e3404fa942fb43e2514bf06b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd5adc51fb6989435d39b3f4d484430c6714d762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5adc51fb6989435d39b3f4d484430c6714d762", "html_url": "https://github.com/rust-lang/rust/commit/bd5adc51fb6989435d39b3f4d484430c6714d762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd5adc51fb6989435d39b3f4d484430c6714d762/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e0f9af85cbe9c79a04b963df9e87c719339e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e0f9af85cbe9c79a04b963df9e87c719339e0e", "html_url": "https://github.com/rust-lang/rust/commit/e2e0f9af85cbe9c79a04b963df9e87c719339e0e"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "8cbadebaea5a591444fe8bc61d101001c2ce6d49", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -85,11 +85,11 @@ impl<'tcx> Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-        if let Some(sty) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n-            debug!(\"insert_blindly: impl_def_id={:?} sty={:?}\", impl_def_id, sty);\n-            self.nonblanket_impls.entry(sty).or_default().push(impl_def_id)\n+        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n+            debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n+            self.nonblanket_impls.entry(st).or_default().push(impl_def_id)\n         } else {\n-            debug!(\"insert_blindly: impl_def_id={:?} sty=None\", impl_def_id);\n+            debug!(\"insert_blindly: impl_def_id={:?} st=None\", impl_def_id);\n             self.blanket_impls.push(impl_def_id)\n         }\n     }\n@@ -100,11 +100,11 @@ impl<'tcx> Children {\n     fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n-        if let Some(sty) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n-            debug!(\"remove_existing: impl_def_id={:?} sty={:?}\", impl_def_id, sty);\n-            vec = self.nonblanket_impls.get_mut(&sty).unwrap();\n+        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n+            debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n+            vec = self.nonblanket_impls.get_mut(&st).unwrap();\n         } else {\n-            debug!(\"remove_existing: impl_def_id={:?} sty=None\", impl_def_id);\n+            debug!(\"remove_existing: impl_def_id={:?} st=None\", impl_def_id);\n             vec = &mut self.blanket_impls;\n         }\n \n@@ -130,7 +130,7 @@ impl<'tcx> Children {\n         );\n \n         let possible_siblings = match simplified_self {\n-            Some(sty) => PotentialSiblings::Filtered(self.filtered(sty)),\n+            Some(st) => PotentialSiblings::Filtered(self.filtered(st)),\n             None => PotentialSiblings::Unfiltered(self.iter()),\n         };\n "}, {"sha": "c08f250f3dceee09c5d45af5d0f3c15fea2703c4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -890,7 +890,7 @@ EnumLiftImpl! {\n \n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n-        let mk = |sty| interners.intern_ty(sty);\n+        let mk = |ty| interners.intern_ty(ty);\n \n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n@@ -2080,7 +2080,7 @@ impl<'tcx, T: 'tcx+?Sized> Clone for Interned<'tcx, T> {\n }\n impl<'tcx, T: 'tcx+?Sized> Copy for Interned<'tcx, T> {}\n \n-// N.B., an `Interned<Ty>` compares and hashes as a sty.\n+// N.B., an `Interned<Ty>` compares and hashes as a `TyKind`.\n impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {\n         self.0.kind == other.0.kind"}, {"sha": "42d632d120ea1992a34f70261b22f62df6d698ad", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -1023,7 +1023,7 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let sty = match self.kind {\n+        let kind = match self.kind {\n             ty::RawPtr(tm) => ty::RawPtr(tm.fold_with(folder)),\n             ty::Array(typ, sz) => ty::Array(typ.fold_with(folder), sz.fold_with(folder)),\n             ty::Slice(typ) => ty::Slice(typ.fold_with(folder)),\n@@ -1064,13 +1064,13 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Bound(..) |\n             ty::Placeholder(..) |\n             ty::Never |\n-            ty::Foreign(..) => return self\n+            ty::Foreign(..) => return self,\n         };\n \n-        if self.kind == sty {\n+        if self.kind == kind {\n             self\n         } else {\n-            folder.tcx().mk_ty(sty)\n+            folder.tcx().mk_ty(kind)\n         }\n     }\n "}, {"sha": "eadc58cc80027185683a0f043867dfb692cf1692", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -424,15 +424,15 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         let mut place_ty = match &place.base {\n             PlaceBase::Local(index) =>\n                 PlaceTy::from_ty(self.body.local_decls[*index].ty),\n-            PlaceBase::Static(box Static { kind, ty: sty, def_id }) => {\n-                let sty = self.sanitize_type(place, sty);\n+            PlaceBase::Static(box Static { kind, ty, def_id }) => {\n+                let san_ty = self.sanitize_type(place, ty);\n                 let check_err =\n                     |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                      place: &Place<'tcx>,\n                      ty,\n-                     sty| {\n+                     san_ty| {\n                         if let Err(terr) = verifier.cx.eq_types(\n-                            sty,\n+                            san_ty,\n                             ty,\n                             location.to_locations(),\n                             ConstraintCategory::Boring,\n@@ -442,7 +442,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                             place,\n                             \"bad promoted type ({:?}: {:?}): {:?}\",\n                             ty,\n-                            sty,\n+                            san_ty,\n                             terr\n                         );\n                         };\n@@ -454,17 +454,17 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                             self.sanitize_promoted(promoted_body, location);\n \n                             let promoted_ty = promoted_body.return_ty();\n-                            check_err(self, place, promoted_ty, sty);\n+                            check_err(self, place, promoted_ty, san_ty);\n                         }\n                     }\n                     StaticKind::Static => {\n                         let ty = self.tcx().type_of(*def_id);\n                         let ty = self.cx.normalize(ty, location);\n \n-                        check_err(self, place, ty, sty);\n+                        check_err(self, place, ty, san_ty);\n                     }\n                 }\n-                PlaceTy::from_ty(sty)\n+                PlaceTy::from_ty(san_ty)\n             }\n         };\n "}, {"sha": "564a0eac7553977690c1f6acffb03b4fc227640c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -566,15 +566,14 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_ref = match obligation.predicate {\n-                ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => {\n-                    if unsize_did == tr.def_id() {\n-                        let sty = &tr.skip_binder().input_types().nth(1).unwrap().kind;\n-                        if let ty::Tuple(..) = sty {\n+                ty::Predicate::Trait(ref t) if traits.contains(&t.def_id()) => {\n+                    if unsize_did == t.def_id() {\n+                        if let ty::Tuple(..) = &t.skip_binder().input_types().nth(1).unwrap().kind {\n                             debug!(\"coerce_unsized: found unsized tuple coercion\");\n                             has_unsized_tuple_coercion = true;\n                         }\n                     }\n-                    tr.clone()\n+                    t.clone()\n                 }\n                 _ => {\n                     coercion.obligations.push(obligation);"}, {"sha": "f716a78a031f25be07c25679094d00c652b18099", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -8,9 +8,9 @@ use rustc::ty::{self, Ty, TyKind};\n \n #[deny(rustc::usage_of_ty_tykind)]\n fn main() {\n-    let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n+    let kind = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n \n-    match sty {\n+    match kind {\n         TyKind::Bool => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Char => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Int(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n@@ -41,9 +41,9 @@ fn main() {\n         TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n     }\n \n-    if let ty::Int(int_ty) = sty {}\n+    if let ty::Int(int_ty) = kind {}\n \n-    if let TyKind::Int(int_ty) = sty {} //~ ERROR usage of `ty::TyKind::<kind>`\n+    if let TyKind::Int(int_ty) = kind {} //~ ERROR usage of `ty::TyKind::<kind>`\n \n     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {} //~ ERROR usage of `ty::TyKind`\n }"}, {"sha": "a5c9ed3478cf4c6534a91f0fb4d7563e31d054f0", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd5adc51fb6989435d39b3f4d484430c6714d762/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=bd5adc51fb6989435d39b3f4d484430c6714d762", "patch": "@@ -1,7 +1,7 @@\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:11:15\n    |\n-LL |     let sty = TyKind::Bool;\n+LL |     let kind = TyKind::Bool;\n    |               ^^^^^^ help: try using ty::<kind> directly: `ty`\n    |\n note: lint level defined here\n@@ -181,7 +181,7 @@ LL |         TyKind::Error => (),\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:46:12\n    |\n-LL |     if let TyKind::Int(int_ty) = sty {}\n+LL |     if let TyKind::Int(int_ty) = kind {}\n    |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind`"}]}