{"sha": "3f6ea7788b5c65c00e995d04622533554a13dd38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNmVhNzc4OGI1YzY1YzAwZTk5NWQwNDYyMjUzMzU1NGExM2RkMzg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-12-18T02:30:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-18T02:30:08Z"}, "message": "Merge pull request #3240 from Xanewok/parser-panic\n\nCatch possible tokenizer panics", "tree": {"sha": "24a11abdbe79cdef7333efd081e85b0de43abef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a11abdbe79cdef7333efd081e85b0de43abef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f6ea7788b5c65c00e995d04622533554a13dd38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGFuwCRBK7hj4Ov3rIwAAdHIIAF27BTg5DlsR+8Kg6vS5viiq\nHu9MYuMycXtgNx4rp5gKk2iwdG0zCm6K8mxYUZBe+2nPPCoS5GGuyjsTWWZEksS5\nyb2VYGiiYApUyPas1hOV4KQ7qyhGItzErn4FMtVxDivDFfx97QZR3GK7r+vrtKPH\n/k6axvwyAkOBfXhHxv6/CFrHIq95WJr+MDo98mAjPB3YVeRELsS905teAZRvwbzp\nErDuqRUEQr7+VDl96a2gWnIvVopgQSieHTX3VawCoNk+Kzsvl0loI1o8KxHhyego\nn23AoEtcxVkijSEqkg102BC++CzGQzUDDkjlrdiZ0yPlZBjepFpws4j/at0JaX8=\n=mfhO\n-----END PGP SIGNATURE-----\n", "payload": "tree 24a11abdbe79cdef7333efd081e85b0de43abef9\nparent d1c7afe0805b3229d9a2b72592c296eaa3e63ae4\nparent c7ee2a2857b0b8f1346bb02aabf19ce46184530f\nauthor Seiichi Uchida <seuchida@gmail.com> 1545100208 +0900\ncommitter GitHub <noreply@github.com> 1545100208 +0900\n\nMerge pull request #3240 from Xanewok/parser-panic\n\nCatch possible tokenizer panics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6ea7788b5c65c00e995d04622533554a13dd38", "html_url": "https://github.com/rust-lang/rust/commit/3f6ea7788b5c65c00e995d04622533554a13dd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f6ea7788b5c65c00e995d04622533554a13dd38/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c7afe0805b3229d9a2b72592c296eaa3e63ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c7afe0805b3229d9a2b72592c296eaa3e63ae4", "html_url": "https://github.com/rust-lang/rust/commit/d1c7afe0805b3229d9a2b72592c296eaa3e63ae4"}, {"sha": "c7ee2a2857b0b8f1346bb02aabf19ce46184530f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ee2a2857b0b8f1346bb02aabf19ce46184530f", "html_url": "https://github.com/rust-lang/rust/commit/c7ee2a2857b0b8f1346bb02aabf19ce46184530f"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "f909086f0e084e94e4bc15e7301921f58a5240b8", "filename": "src/formatting.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3f6ea7788b5c65c00e995d04622533554a13dd38/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6ea7788b5c65c00e995d04622533554a13dd38/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=3f6ea7788b5c65c00e995d04622533554a13dd38", "patch": "@@ -8,7 +8,7 @@ use std::time::{Duration, Instant};\n \n use syntax::ast;\n use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n-use syntax::errors::Handler;\n+use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n use syntax::source_map::{FilePathMapping, SourceMap, Span};\n \n@@ -73,7 +73,12 @@ fn format_project<T: FormatHandler>(\n     let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n     let mut parse_session = make_parse_sess(source_map.clone(), config);\n     let mut report = FormatReport::new();\n-    let krate = parse_crate(input, &parse_session, config, &mut report)?;\n+    let krate = match parse_crate(input, &parse_session, config, &mut report) {\n+        Ok(krate) => krate,\n+        // Surface parse error via Session (errors are merged there from report)\n+        Err(ErrorKind::ParseError) => return Ok(report),\n+        Err(e) => return Err(e),\n+    };\n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n@@ -604,30 +609,41 @@ fn parse_crate(\n ) -> Result<ast::Crate, ErrorKind> {\n     let input_is_stdin = input.is_text();\n \n-    let mut parser = match input {\n-        Input::File(file) => parse::new_parser_from_file(parse_session, &file),\n-        Input::Text(text) => parse::new_parser_from_source_str(\n+    let parser = match input {\n+        Input::File(file) => Ok(parse::new_parser_from_file(parse_session, &file)),\n+        Input::Text(text) => parse::maybe_new_parser_from_source_str(\n             parse_session,\n             syntax::source_map::FileName::Custom(\"stdin\".to_owned()),\n             text,\n-        ),\n+        )\n+        .map_err(|diags| {\n+            diags\n+                .into_iter()\n+                .map(|d| DiagnosticBuilder::new_diagnostic(&parse_session.span_diagnostic, d))\n+                .collect::<Vec<_>>()\n+        }),\n     };\n \n-    parser.cfg_mods = false;\n-    if config.skip_children() {\n-        parser.recurse_into_file_modules = false;\n-    }\n+    let result = match parser {\n+        Ok(mut parser) => {\n+            parser.cfg_mods = false;\n+            if config.skip_children() {\n+                parser.recurse_into_file_modules = false;\n+            }\n \n-    let mut parser = AssertUnwindSafe(parser);\n-    let result = catch_unwind(move || parser.0.parse_crate_mod());\n+            let mut parser = AssertUnwindSafe(parser);\n+            catch_unwind(move || parser.0.parse_crate_mod().map_err(|d| vec![d]))\n+        }\n+        Err(db) => Ok(Err(db)),\n+    };\n \n     match result {\n         Ok(Ok(c)) => {\n             if !parse_session.span_diagnostic.has_errors() {\n                 return Ok(c);\n             }\n         }\n-        Ok(Err(mut e)) => e.emit(),\n+        Ok(Err(mut diagnostics)) => diagnostics.iter_mut().for_each(|d| d.emit()),\n         Err(_) => {\n             // Note that if you see this message and want more information,\n             // then run the `parse_crate_mod` function above without"}, {"sha": "f7517b18134fbf4286a45393634aae614258b70b", "filename": "src/test/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f6ea7788b5c65c00e995d04622533554a13dd38/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6ea7788b5c65c00e995d04622533554a13dd38/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=3f6ea7788b5c65c00e995d04622533554a13dd38", "patch": "@@ -286,6 +286,18 @@ fn stdin_formatting_smoke_test() {\n     assert_eq!(buf, \"fn main() {}\\r\\n\".as_bytes());\n }\n \n+#[test]\n+fn stdin_parser_panic_caught() {\n+    // https://github.com/rust-lang/rustfmt/issues/3239\n+    for text in [\"{\", \"}\"].iter().cloned().map(String::from) {\n+        let mut buf = vec![];\n+        let mut session = Session::new(Default::default(), Some(&mut buf));\n+        let _ = session.format(Input::Text(text));\n+\n+        assert!(session.has_parsing_errors());\n+    }\n+}\n+\n #[test]\n fn stdin_disable_all_formatting_test() {\n     match option_env!(\"CFG_RELEASE_CHANNEL\") {"}]}