{"sha": "1720fd94e8aafc0e24a537688fe88cb1fd14831e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MjBmZDk0ZThhYWZjMGUyNGE1Mzc2ODhmZTg4Y2IxZmQxNDgzMWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:47:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-19T09:47:43Z"}, "message": "Rollup merge of #76434 - RalfJung:black-box, r=Mark-Simulacrum\n\ndo not inline black_box when building for Miri\n\nWe cannot do the assembly trick in Miri, but let's at least make sure MIR inlining does not circumvent the black_box.\n\nAlso use black_box instead of local optimization barriers in a few const tests.", "tree": {"sha": "7302b98938cbb02f456c755fb2d5a4c088ded8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7302b98938cbb02f456c755fb2d5a4c088ded8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1720fd94e8aafc0e24a537688fe88cb1fd14831e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZdPACRBK7hj4Ov3rIwAAdHIIAAnM2PrX+1GC3VFHbxWlh3p3\nms4MChmnM/AjMSqn8O/WNe1Kj0KnU+UUKHLALqlLSI/xlxPnTUynon7eoKVlDYqg\n4e7irVypwvoxmJJHA3ZoM3LfOAhGYBGKD/7syJezOi9Jd+6yigk5J0WLFyW28dDH\nCrR1RF1vORDVmuAVCn42st1Qr615hEGrBmq/OqAXTikbpoeb5U/tZc7nQe8JRDZr\nnr8daPslxsk4HXnB+W+yAE/wnpGrlDI9huHvu3YG/mTaIN6heI7JmKDXDFF6pcdp\nx5cnwqqQcSQY7GOl2brQJTYMTrOOrz5s7tdzEtbptBoqNdC7rHyzE2svr+PJIkw=\n=ozTD\n-----END PGP SIGNATURE-----\n", "payload": "tree 7302b98938cbb02f456c755fb2d5a4c088ded8c0\nparent 67fa7b78a4e2af5ca5edc05b4d8d89d78ab1803a\nparent 284b16913aa6fccdf7b14edc3bb2693aadd39919\nauthor Ralf Jung <post@ralfj.de> 1600508863 +0200\ncommitter GitHub <noreply@github.com> 1600508863 +0200\n\nRollup merge of #76434 - RalfJung:black-box, r=Mark-Simulacrum\n\ndo not inline black_box when building for Miri\n\nWe cannot do the assembly trick in Miri, but let's at least make sure MIR inlining does not circumvent the black_box.\n\nAlso use black_box instead of local optimization barriers in a few const tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1720fd94e8aafc0e24a537688fe88cb1fd14831e", "html_url": "https://github.com/rust-lang/rust/commit/1720fd94e8aafc0e24a537688fe88cb1fd14831e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1720fd94e8aafc0e24a537688fe88cb1fd14831e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67fa7b78a4e2af5ca5edc05b4d8d89d78ab1803a", "url": "https://api.github.com/repos/rust-lang/rust/commits/67fa7b78a4e2af5ca5edc05b4d8d89d78ab1803a", "html_url": "https://github.com/rust-lang/rust/commit/67fa7b78a4e2af5ca5edc05b4d8d89d78ab1803a"}, {"sha": "284b16913aa6fccdf7b14edc3bb2693aadd39919", "url": "https://api.github.com/repos/rust-lang/rust/commits/284b16913aa6fccdf7b14edc3bb2693aadd39919", "html_url": "https://github.com/rust-lang/rust/commit/284b16913aa6fccdf7b14edc3bb2693aadd39919"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "e53682ece1d7f55d47704bc6e638097fc985f07e", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720fd94e8aafc0e24a537688fe88cb1fd14831e/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720fd94e8aafc0e24a537688fe88cb1fd14831e/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=1720fd94e8aafc0e24a537688fe88cb1fd14831e", "patch": "@@ -108,7 +108,8 @@ pub fn spin_loop() {\n /// Note however, that `black_box` is only (and can only be) provided on a \"best-effort\" basis. The\n /// extent to which it can block optimisations may vary depending upon the platform and code-gen\n /// backend used. Programs cannot rely on `black_box` for *correctness* in any way.\n-#[inline]\n+#[cfg_attr(not(miri), inline)]\n+#[cfg_attr(miri, inline(never))]\n #[unstable(feature = \"test\", issue = \"50297\")]\n #[allow(unreachable_code)] // this makes #[cfg] a bit easier below.\n pub fn black_box<T>(mut dummy: T) -> T {"}, {"sha": "9c02d232e134b1a9ea5afeff0fd2f526b5f32c36", "filename": "src/test/ui/consts/cast-discriminant-zst-enum.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1720fd94e8aafc0e24a537688fe88cb1fd14831e/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720fd94e8aafc0e24a537688fe88cb1fd14831e/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs?ref=1720fd94e8aafc0e24a537688fe88cb1fd14831e", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to a i32.\n+#![feature(test)]\n+use std::hint::black_box;\n \n #[derive(Copy, Clone)]\n enum Nums {\n@@ -12,9 +14,6 @@ const NEG_ONE_I32: i32 = Nums::NegOne as i32;\n const NEG_ONE_I64: i64 = Nums::NegOne as i64;\n const NEG_ONE_I128: i128 = Nums::NegOne as i128;\n \n-#[inline(never)]\n-fn identity<T>(t: T) -> T { t }\n-\n fn test_as_arg(n: Nums) {\n     assert_eq!(-1i8, n as i8);\n     assert_eq!(-1i16, n as i16);\n@@ -31,11 +30,11 @@ fn main() {\n     assert_eq!(-1i64, kind as i64);\n     assert_eq!(-1i128, kind as i128);\n \n-    assert_eq!(-1i8, identity(kind) as i8);\n-    assert_eq!(-1i16, identity(kind) as i16);\n-    assert_eq!(-1i32, identity(kind) as i32);\n-    assert_eq!(-1i64, identity(kind) as i64);\n-    assert_eq!(-1i128, identity(kind) as i128);\n+    assert_eq!(-1i8, black_box(kind) as i8);\n+    assert_eq!(-1i16, black_box(kind) as i16);\n+    assert_eq!(-1i32, black_box(kind) as i32);\n+    assert_eq!(-1i64, black_box(kind) as i64);\n+    assert_eq!(-1i128, black_box(kind) as i128);\n \n     test_as_arg(Nums::NegOne);\n "}, {"sha": "d016d236dbf81a5e24127f33099d13585c1078cf", "filename": "src/test/ui/consts/const_discriminant.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1720fd94e8aafc0e24a537688fe88cb1fd14831e/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720fd94e8aafc0e24a537688fe88cb1fd14831e/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs?ref=1720fd94e8aafc0e24a537688fe88cb1fd14831e", "patch": "@@ -1,14 +1,10 @@\n // run-pass\n #![feature(const_discriminant)]\n+#![feature(test)]\n #![allow(dead_code)]\n \n use std::mem::{discriminant, Discriminant};\n-\n-// `discriminant(const_expr)` may get const-propagated.\n-// As we want to check that const-eval is equal to ordinary exection,\n-// we wrap `const_expr` with a function which is not const to prevent this.\n-#[inline(never)]\n-fn identity<T>(x: T) -> T { x }\n+use std::hint::black_box;\n \n enum Test {\n     A(u8),\n@@ -31,10 +27,10 @@ const TEST_V: Discriminant<SingleVariant> = discriminant(&SingleVariant::V);\n \n fn main() {\n     assert_eq!(TEST_A, TEST_A_OTHER);\n-    assert_eq!(TEST_A, discriminant(identity(&Test::A(17))));\n-    assert_eq!(TEST_B, discriminant(identity(&Test::B)));\n+    assert_eq!(TEST_A, discriminant(black_box(&Test::A(17))));\n+    assert_eq!(TEST_B, discriminant(black_box(&Test::B)));\n     assert_ne!(TEST_A, TEST_B);\n-    assert_ne!(TEST_B, discriminant(identity(&Test::C { a: 42, b: 7 })));\n+    assert_ne!(TEST_B, discriminant(black_box(&Test::C { a: 42, b: 7 })));\n \n-    assert_eq!(TEST_V, discriminant(identity(&SingleVariant::V)));\n+    assert_eq!(TEST_V, discriminant(black_box(&SingleVariant::V)));\n }"}]}