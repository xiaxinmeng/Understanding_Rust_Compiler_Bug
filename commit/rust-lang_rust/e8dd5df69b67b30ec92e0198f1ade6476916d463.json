{"sha": "e8dd5df69b67b30ec92e0198f1ade6476916d463", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGQ1ZGY2OWI2N2IzMGVjOTJlMDE5OGYxYWRlNjQ3NjkxNmQ0NjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-28T10:59:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:27Z"}, "message": "Add LinkReplacer pass for pulldown", "tree": {"sha": "7030870d43eaea9792ec5ace426254a471064b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7030870d43eaea9792ec5ace426254a471064b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8dd5df69b67b30ec92e0198f1ade6476916d463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dd5df69b67b30ec92e0198f1ade6476916d463", "html_url": "https://github.com/rust-lang/rust/commit/e8dd5df69b67b30ec92e0198f1ade6476916d463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8dd5df69b67b30ec92e0198f1ade6476916d463/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae2e22e814931ea26e571c7d6e72aa1b05a871d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae2e22e814931ea26e571c7d6e72aa1b05a871d", "html_url": "https://github.com/rust-lang/rust/commit/dae2e22e814931ea26e571c7d6e72aa1b05a871d"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "c91be9ad7b8f4667289e9e253be641cf84202736", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e8dd5df69b67b30ec92e0198f1ade6476916d463", "patch": "@@ -308,6 +308,11 @@ impl Item {\n     pub fn collapsed_doc_value(&self) -> Option<String> {\n         self.attrs.collapsed_doc_value()\n     }\n+\n+    pub fn links(&self) -> Vec<(String, String)> {\n+        self.attrs.links()\n+    }\n+\n     pub fn is_crate(&self) -> bool {\n         match self.inner {\n             StrippedItem(box ModuleItem(Module { is_crate: true, ..})) |\n@@ -791,6 +796,20 @@ impl Attributes {\n             None\n         }\n     }\n+\n+    /// Get links as a vector\n+    ///\n+    /// Cache must be populated before call\n+    pub fn links(&self) -> Vec<(String, String)> {\n+        use html::format::href;\n+        self.links.iter().filter_map(|&(ref s, did)| {\n+            if let Some((href, ..)) = href(did) {\n+                Some((s.clone(), href))\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n }\n \n impl AttributesExt for Attributes {"}, {"sha": "f7d07af04ea989191b15ca5be29c1b8a029fbbc8", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=e8dd5df69b67b30ec92e0198f1ade6476916d463", "patch": "@@ -37,15 +37,15 @@ impl ExternalHtml {\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(md_before_content)\n-                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, render))))\n+                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, &[], render))))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content)\n                     .map(|ac| (ih, bc, ac))\n             )\n             .and_then(|(ih, bc, ac)|\n                 load_external_files(md_after_content)\n-                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, render))))\n+                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, &[], render))))\n             )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {"}, {"sha": "9e875a7c280599758563e764ba6616a5c9e64c0d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e8dd5df69b67b30ec92e0198f1ade6476916d463", "patch": "@@ -56,15 +56,16 @@ pub enum RenderType {\n /// A unit struct which has the `fmt::Display` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n-// The second parameter is whether we need a shorter version or not.\n-pub struct Markdown<'a>(pub &'a str, pub RenderType);\n+/// The second parameter is a list of link replacements\n+// The third parameter is whether we need a shorter version or not.\n+pub struct Markdown<'a>(pub &'a str, pub &'a [(String, String)], pub RenderType);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n pub struct MarkdownWithToc<'a>(pub &'a str, pub RenderType);\n /// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n pub struct MarkdownHtml<'a>(pub &'a str, pub RenderType);\n /// A unit struct like `Markdown`, that renders only the first paragraph.\n-pub struct MarkdownSummaryLine<'a>(pub &'a str);\n+pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n \n /// Controls whether a line will be hidden or shown in HTML output.\n ///\n@@ -247,6 +248,38 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n     }\n }\n \n+/// Make headings links with anchor ids and build up TOC.\n+struct LinkReplacer<'a, 'b, I: Iterator<Item = Event<'a>>> {\n+    inner: I,\n+    links: &'b [(String, String)]\n+}\n+\n+impl<'a, 'b, I: Iterator<Item = Event<'a>>> LinkReplacer<'a, 'b, I> {\n+    fn new(iter: I, links: &'b [(String, String)]) -> Self {\n+        LinkReplacer {\n+            inner: iter,\n+            links\n+        }\n+    }\n+}\n+\n+impl<'a, 'b, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, 'b, I> {\n+    type Item = Event<'a>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let event = self.inner.next();\n+        if let Some(Event::Start(Tag::Link(dest, text))) = event {\n+            if let Some(&(_, ref replace)) = self.links.into_iter().find(|link| &*link.0 == &*dest) {\n+                Some(Event::Start(Tag::Link(replace.to_owned().into(), text)))\n+            } else {\n+                Some(Event::Start(Tag::Link(dest, text)))\n+            }\n+        } else {\n+            event\n+        }\n+    }\n+}\n+\n /// Make headings links with anchor ids and build up TOC.\n struct HeadingLinks<'a, 'b, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n@@ -996,7 +1029,7 @@ impl LangString {\n \n impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let Markdown(md, render_type) = *self;\n+        let Markdown(md, links, render_type) = *self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n@@ -1012,7 +1045,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n             let mut s = String::with_capacity(md.len() * 3 / 2);\n \n             html::push_html(&mut s,\n-                            Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, None))));\n+                            Footnotes::new(CodeBlocks::new(LinkReplacer::new(HeadingLinks::new(p, None), links))));\n \n             fmt.write_str(&s)\n         }\n@@ -1079,15 +1112,15 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n \n impl<'a> fmt::Display for MarkdownSummaryLine<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let MarkdownSummaryLine(md) = *self;\n+        let MarkdownSummaryLine(md, links) = *self;\n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n \n         let p = Parser::new(md);\n \n         let mut s = String::new();\n \n-        html::push_html(&mut s, SummaryLine::new(p));\n+        html::push_html(&mut s, LinkReplacer::new(SummaryLine::new(p), links));\n \n         fmt.write_str(&s)\n     }"}, {"sha": "52200f5afd79aa826ef91e6116cfac0990242da0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e8dd5df69b67b30ec92e0198f1ade6476916d463", "patch": "@@ -1861,12 +1861,13 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n /// rendering between Pulldown and Hoedown.\n fn render_markdown(w: &mut fmt::Formatter,\n                    md_text: &str,\n+                   links: Vec<(String, String)>,\n                    span: Span,\n                    render_type: RenderType,\n                    prefix: &str,\n                    scx: &SharedContext)\n                    -> fmt::Result {\n-    let (hoedown_output, pulldown_output) = render_text(|ty| format!(\"{}\", Markdown(md_text, ty)));\n+    let (hoedown_output, pulldown_output) = render_text(|ty| format!(\"{}\", Markdown(md_text, &links, ty)));\n     let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n     differences.retain(|s| {\n         match *s {\n@@ -1898,7 +1899,7 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        render_markdown(w, &markdown, item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n+        render_markdown(w, &markdown, item.links(), item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1924,7 +1925,7 @@ fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, &*s, item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n+        render_markdown(w, &*s, item.links(), item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -2146,10 +2147,10 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        stab_docs = stab_docs,\n                        docs = if cx.render_type == RenderType::Hoedown {\n                            format!(\"{}\",\n-                                   shorter(Some(&Markdown(doc_value,\n+                                   shorter(Some(&Markdown(doc_value, &item.links(),\n                                                           RenderType::Hoedown).to_string())))\n                        } else {\n-                           format!(\"{}\", MarkdownSummaryLine(doc_value))\n+                           format!(\"{}\", MarkdownSummaryLine(doc_value, &item.links()))\n                        },\n                        class = myitem.type_(),\n                        stab = myitem.stability_class().unwrap_or(\"\".to_string()),\n@@ -3338,7 +3339,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         write!(w, \"</span>\")?;\n         write!(w, \"</h3>\\n\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-            write!(w, \"<div class='docblock'>{}</div>\", Markdown(&*dox, cx.render_type))?;\n+            write!(w, \"<div class='docblock'>{}</div>\", Markdown(&*dox, &i.impl_item.links(), cx.render_type))?;\n         }\n     }\n "}, {"sha": "9af2ebf0661da72960f63200fb2feff211230a0d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dd5df69b67b30ec92e0198f1ade6476916d463/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=e8dd5df69b67b30ec92e0198f1ade6476916d463", "patch": "@@ -104,7 +104,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n     } else {\n         // Save the state of USED_ID_MAP so it only gets updated once even\n         // though we're rendering twice.\n-        render_text(|ty| format!(\"{}\", Markdown(text, ty)))\n+        render_text(|ty| format!(\"{}\", Markdown(text, &[], ty)))\n     };\n \n     let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);"}]}