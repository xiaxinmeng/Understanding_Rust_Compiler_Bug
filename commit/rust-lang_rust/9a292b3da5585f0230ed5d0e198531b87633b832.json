{"sha": "9a292b3da5585f0230ed5d0e198531b87633b832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMjkyYjNkYTU1ODVmMDIzMGVkNWQwZTE5ODUzMWI4NzYzM2I4MzI=", "commit": {"author": {"name": "Youngmin Yoo", "email": "youngmin.yoo@samsung.com", "date": "2013-05-08T07:23:14Z"}, "committer": {"name": "Youngmin Yoo", "email": "youngmin.yoo@samsung.com", "date": "2013-05-09T05:17:18Z"}, "message": "libcore: rename vec::each(variable) to variable.each", "tree": {"sha": "bdbab0e599fb96e7439c78dc8f343ee139c05508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbab0e599fb96e7439c78dc8f343ee139c05508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a292b3da5585f0230ed5d0e198531b87633b832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a292b3da5585f0230ed5d0e198531b87633b832", "html_url": "https://github.com/rust-lang/rust/commit/9a292b3da5585f0230ed5d0e198531b87633b832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a292b3da5585f0230ed5d0e198531b87633b832/comments", "author": {"login": "recrack", "id": 329213, "node_id": "MDQ6VXNlcjMyOTIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/329213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recrack", "html_url": "https://github.com/recrack", "followers_url": "https://api.github.com/users/recrack/followers", "following_url": "https://api.github.com/users/recrack/following{/other_user}", "gists_url": "https://api.github.com/users/recrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/recrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recrack/subscriptions", "organizations_url": "https://api.github.com/users/recrack/orgs", "repos_url": "https://api.github.com/users/recrack/repos", "events_url": "https://api.github.com/users/recrack/events{/privacy}", "received_events_url": "https://api.github.com/users/recrack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "recrack", "id": 329213, "node_id": "MDQ6VXNlcjMyOTIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/329213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recrack", "html_url": "https://github.com/recrack", "followers_url": "https://api.github.com/users/recrack/followers", "following_url": "https://api.github.com/users/recrack/following{/other_user}", "gists_url": "https://api.github.com/users/recrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/recrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recrack/subscriptions", "organizations_url": "https://api.github.com/users/recrack/orgs", "repos_url": "https://api.github.com/users/recrack/repos", "events_url": "https://api.github.com/users/recrack/events{/privacy}", "received_events_url": "https://api.github.com/users/recrack/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bbbb314ee61aa00deb3e9756421fd2465fd7a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbbb314ee61aa00deb3e9756421fd2465fd7a91", "html_url": "https://github.com/rust-lang/rust/commit/3bbbb314ee61aa00deb3e9756421fd2465fd7a91"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "a6306c33eb9cd6879b04c66692614dc6fa340e75", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -102,7 +102,7 @@ pub fn build_sized_opt<A>(size: Option<uint>,\n #[inline(always)]\n pub fn append<T:Copy>(lhs: @[T], rhs: &const [T]) -> @[T] {\n     do build_sized(lhs.len() + rhs.len()) |push| {\n-        for vec::each(lhs) |x| { push(*x); }\n+        for lhs.each |x| { push(*x); }\n         for uint::range(0, rhs.len()) |i| { push(rhs[i]); }\n     }\n }\n@@ -111,7 +111,7 @@ pub fn append<T:Copy>(lhs: @[T], rhs: &const [T]) -> @[T] {\n /// Apply a function to each element of a vector and return the results\n pub fn map<T, U>(v: &[T], f: &fn(x: &T) -> U) -> @[U] {\n     do build_sized(v.len()) |push| {\n-        for vec::each(v) |elem| {\n+        for v.each |elem| {\n             push(f(elem));\n         }\n     }"}, {"sha": "957e848b5e7d080b96bc83171c614b6542a72bc7", "filename": "src/libcore/either.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -44,7 +44,7 @@ pub fn lefts<T:Copy,U>(eithers: &[Either<T, U>]) -> ~[T] {\n     //! Extracts from a vector of either all the left values\n \n     do vec::build_sized(eithers.len()) |push| {\n-        for vec::each(eithers) |elt| {\n+        for eithers.each |elt| {\n             match *elt {\n                 Left(ref l) => { push(*l); }\n                 _ => { /* fallthrough */ }\n@@ -57,7 +57,7 @@ pub fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n     //! Extracts from a vector of either all the right values\n \n     do vec::build_sized(eithers.len()) |push| {\n-        for vec::each(eithers) |elt| {\n+        for eithers.each |elt| {\n             match *elt {\n                 Right(ref r) => { push(*r); }\n                 _ => { /* fallthrough */ }"}, {"sha": "e00fb33fad94e48d0db15a3e7c4d1b60db3ffab2", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -378,7 +378,7 @@ impl Streaming for SipState {\n     fn result_str(&mut self) -> ~str {\n         let r = self.result_bytes();\n         let mut s = ~\"\";\n-        for vec::each(r) |b| {\n+        for r.each |b| {\n             s += uint::to_str_radix(*b as uint, 16u);\n         }\n         s\n@@ -478,7 +478,7 @@ mod tests {\n \n         fn to_hex_str(r: &[u8, ..8]) -> ~str {\n             let mut s = ~\"\";\n-            for vec::each(*r) |b| {\n+            for (*r).each |b| {\n                 s += uint::to_str_radix(*b as uint, 16u);\n             }\n             s"}, {"sha": "7fc2c2559c2452b4446838e7a4c17fc51fa2d75a", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -1200,7 +1200,7 @@ pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n     fn wb() -> c_int { O_WRONLY as c_int }\n \n     let mut fflags: c_int = wb();\n-    for vec::each(flags) |f| {\n+    for flags.each |f| {\n         match *f {\n           Append => fflags |= O_APPEND as c_int,\n           Create => fflags |= O_CREAT as c_int,"}, {"sha": "574618026d98332eeceb88393865627263be5c2f", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -1491,7 +1491,7 @@ mod tests {\n     fn test_env_getenv() {\n         let e = env();\n         assert!(vec::len(e) > 0u);\n-        for vec::each(e) |p| {\n+        for e.each |p| {\n             let (n, v) = copy *p;\n             debug!(copy n);\n             let v2 = getenv(n);\n@@ -1583,7 +1583,7 @@ mod tests {\n         // Just assuming that we've got some contents in the current directory\n         assert!((vec::len(dirs) > 0u));\n \n-        for vec::each(dirs) |dir| {\n+        for dirs.each |dir| {\n             debug!(copy *dir);\n         }\n     }"}, {"sha": "1d67e754a4f2461f48f7e5e10a654b4ac3dd3fe1", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -300,7 +300,7 @@ pub fn map_vec<T,U:Copy,V:Copy>(\n     ts: &[T], op: &fn(&T) -> Result<V,U>) -> Result<~[V],U> {\n \n     let mut vs: ~[V] = vec::with_capacity(vec::len(ts));\n-    for vec::each(ts) |t| {\n+    for ts.each |t| {\n         match op(t) {\n           Ok(copy v) => vs.push(v),\n           Err(copy u) => return Err(u)"}, {"sha": "fd168dc02f6061edd3e8561acd35b97bed8476ec", "filename": "src/libcore/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -426,7 +426,7 @@ fn with_argv<T>(prog: &str, args: &[~str],\n                 cb: &fn(**libc::c_char) -> T) -> T {\n     let mut argptrs = str::as_c_str(prog, |b| ~[b]);\n     let mut tmps = ~[];\n-    for vec::each(args) |arg| {\n+    for args.each |arg| {\n         let t = @copy *arg;\n         tmps.push(t);\n         argptrs.push_all(str::as_c_str(*t, |b| ~[b]));\n@@ -445,7 +445,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         let mut tmps = ~[];\n         let mut ptrs = ~[];\n \n-        for vec::each(*es) |e| {\n+        for (*es).each |e| {\n             let (k,v) = copy *e;\n             let t = @(fmt!(\"%s=%s\", k, v));\n             tmps.push(t);\n@@ -470,7 +470,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         match *env {\n           Some(ref es) if !vec::is_empty(*es) => {\n             let mut blk : ~[u8] = ~[];\n-            for vec::each(*es) |e| {\n+            for (*es).each |e| {\n                 let (k,v) = copy *e;\n                 let t = fmt!(\"%s=%s\", k, v);\n                 let mut v : ~[u8] = ::cast::transmute(t);"}, {"sha": "5ec6471ac4a29305ea56ba0dacfb524e97d20b03", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a292b3da5585f0230ed5d0e198531b87633b832/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9a292b3da5585f0230ed5d0e198531b87633b832", "patch": "@@ -189,7 +189,7 @@ pub fn from_char(ch: char) -> ~str {\n pub fn from_chars(chs: &[char]) -> ~str {\n     let mut buf = ~\"\";\n     reserve(&mut buf, chs.len());\n-    for vec::each(chs) |ch| {\n+    for chs.each |ch| {\n         push_char(&mut buf, *ch);\n     }\n     buf\n@@ -326,7 +326,7 @@ pub fn connect_slices(v: &[&str], sep: &str) -> ~str {\n             do as_buf(sep) |sepbuf, seplen| {\n                 let seplen = seplen - 1;\n                 let mut buf = ::cast::transmute_mut_unsafe(buf);\n-                for vec::each(v) |ss| {\n+                for v.each |ss| {\n                     do as_buf(*ss) |ssbuf, sslen| {\n                         let sslen = sslen - 1;\n                         if first {\n@@ -2407,7 +2407,7 @@ pub mod raw {\n     unsafe fn push_bytes(s: &mut ~str, bytes: &[u8]) {\n         let new_len = s.len() + bytes.len();\n         reserve_at_least(&mut *s, new_len);\n-        for vec::each(bytes) |byte| { push_byte(&mut *s, *byte); }\n+        for bytes.each |byte| { push_byte(&mut *s, *byte); }\n     }\n \n     /// Removes the last byte from a string and returns it. (Not UTF-8 safe).\n@@ -3782,7 +3782,7 @@ mod tests {\n                0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n                0x000a_u16 ]) ];\n \n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             let (s, u) = copy *p;\n             assert!(to_utf16(s) == u);\n             assert!(from_utf16(u) == s);"}]}