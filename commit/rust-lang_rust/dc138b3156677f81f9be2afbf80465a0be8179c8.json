{"sha": "dc138b3156677f81f9be2afbf80465a0be8179c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTM4YjMxNTY2NzdmODFmOWJlMmFmYmY4MDQ2NWEwYmU4MTc5Yzg=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-11-03T10:51:11Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-11-03T11:05:45Z"}, "message": "use DefId's in const eval for cross-crate const fn's", "tree": {"sha": "3f73888fbc5fa770f8a8c08af22fe47b0b481ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f73888fbc5fa770f8a8c08af22fe47b0b481ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc138b3156677f81f9be2afbf80465a0be8179c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc138b3156677f81f9be2afbf80465a0be8179c8", "html_url": "https://github.com/rust-lang/rust/commit/dc138b3156677f81f9be2afbf80465a0be8179c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc138b3156677f81f9be2afbf80465a0be8179c8/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0", "html_url": "https://github.com/rust-lang/rust/commit/ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "41baa1080b1fbb38a8b27d3a9832ab6f0e2bdc9e", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc138b3156677f81f9be2afbf80465a0be8179c8/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc138b3156677f81f9be2afbf80465a0be8179c8/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=dc138b3156677f81f9be2afbf80465a0be8179c8", "patch": "@@ -27,7 +27,7 @@ use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::Substs;\n use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n-use rustc::util::nodemap::NodeMap;\n+use rustc::util::nodemap::DefIdMap;\n use rustc::lint;\n \n use graphviz::IntoCow;\n@@ -413,7 +413,7 @@ pub fn eval_const_expr_checked<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     eval_const_expr_partial(tcx, e, ExprTypeChecked, None)\n }\n \n-pub type FnArgMap<'a> = Option<&'a NodeMap<ConstVal>>;\n+pub type FnArgMap<'a> = Option<&'a DefIdMap<ConstVal>>;\n \n #[derive(Clone, Debug)]\n pub struct ConstEvalErr {\n@@ -835,9 +835,8 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   ConstVal::Struct(e.id)\n               }\n               Def::Local(def_id) => {\n-                  let id = tcx.map.as_local_node_id(def_id).unwrap();\n-                  debug!(\"Def::Local({:?}): {:?}\", id, fn_args);\n-                  if let Some(val) = fn_args.and_then(|args| args.get(&id)) {\n+                  debug!(\"Def::Local({:?}): {:?}\", def_id, fn_args);\n+                  if let Some(val) = fn_args.and_then(|args| args.get(&def_id)) {\n                       val.clone()\n                   } else {\n                       signal!(e, NonConstPath);\n@@ -863,7 +862,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n           let result = result.as_ref().expect(\"const fn has no result expression\");\n           assert_eq!(decl.inputs.len(), args.len());\n \n-          let mut call_args = NodeMap();\n+          let mut call_args = DefIdMap();\n           for (arg, arg_expr) in decl.inputs.iter().zip(args.iter()) {\n               let arg_hint = ty_hint.erase_hint();\n               let arg_val = eval_const_expr_partial(\n@@ -873,7 +872,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   fn_args\n               )?;\n               debug!(\"const call arg: {:?}\", arg);\n-              let old = call_args.insert(arg.pat.id, arg_val);\n+              let old = call_args.insert(tcx.expect_def(arg.pat.id).def_id(), arg_val);\n               assert!(old.is_none());\n           }\n           debug!(\"const call({:?})\", call_args);"}, {"sha": "832ee1d7c1b456be5e7a6744518041a400b4bc67", "filename": "src/test/run-pass/auxiliary/issue-36954.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc138b3156677f81f9be2afbf80465a0be8179c8/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-36954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc138b3156677f81f9be2afbf80465a0be8179c8/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-36954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-36954.rs?ref=dc138b3156677f81f9be2afbf80465a0be8179c8", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+#![crate_type = \"lib\"]\n+\n+const fn foo(i: i32) -> i32 {\n+    i\n+}\n+\n+pub const FOO: i32 = foo(1);"}, {"sha": "f8330ba99b7ae80fd0695c403a62884fdea94f80", "filename": "src/test/run-pass/issue-36954.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc138b3156677f81f9be2afbf80465a0be8179c8/src%2Ftest%2Frun-pass%2Fissue-36954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc138b3156677f81f9be2afbf80465a0be8179c8/src%2Ftest%2Frun-pass%2Fissue-36954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36954.rs?ref=dc138b3156677f81f9be2afbf80465a0be8179c8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-36954.rs\n+\n+extern crate issue_36954 as lib;\n+\n+fn main() {\n+    let _ = lib::FOO;\n+}"}]}