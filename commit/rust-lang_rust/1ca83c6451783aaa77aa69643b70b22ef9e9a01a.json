{"sha": "1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYTgzYzY0NTE3ODNhYWE3N2FhNjk2NDNiNzBiMjJlZjllOWEwMWE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-02T10:59:53Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-09T05:21:32Z"}, "message": "Use trait select logic instead of query", "tree": {"sha": "1c8d6ae32eb0353472adbb255bce0d408278482c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8d6ae32eb0353472adbb255bce0d408278482c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE5mdwACgkQAn35M4hi\nrd1FhhAAnlothxN/i55Rd5RkdDYp6qRAYCQO/JtrG1jkH/baGXjv/D2mCzBp8Hsj\n1iXTjSFySDE9FKwlCdpArOBQnKApLfbN8Z7nBOSJp5UEtWbBgn++4SE6y2rs7sXi\nE2MCujmfVCmL2I9tJMnk2aoLfwJdr/VTSNbpsttPv6CCmSHTvx7Ls6lrfvF19H2F\neHL7CouxUJBmHxiMAToky0V7bsvULe6y/INjbkVitASZy+5rG1xEGfkHRsZMgD7m\nvf1xVcOtDn/XgLSJlatQ7ehfGJULw/uX9hKWarkqL5atSl6m2QXkBRx3h+zErjqE\nUx7nikgDNfTErKpXtMx6wifDg5wcHXtmx1/qFHQ1xw59QmOJLk9mvZvz26iWd0D4\nI4I0Lb9WttfcdEBv4mZTI7IEf1FYu0Up3QDdCESLgxHNdfK2Xqa/i0hqvO5oDTqw\nA9XD96wtsXzo8Lu5ILn+KsvjnPQQKpBaawbx655hFNKVywbQ4kQmqlxEdqwgDBZp\niDUUNyByg9NgroeXeC1oNmwNZmc3OSYIlAQdN5etm7iiWgaufGCq3v6eTRp1X1uj\nqDLVT2UxzmpRpcx6DwwXi82zhpRFd1ZS4+HOX/vkXj9ph7jG7P1hGsv8t3hTflsR\nljSg6U6gn5X8iDpw1eAohw0egxbb5b7fKQWSpxmFOFn/5xhIA1Y=\n=ZtXo\n-----END PGP SIGNATURE-----", "payload": "tree 1c8d6ae32eb0353472adbb255bce0d408278482c\nparent f0a52128ee2d522e12893637428d88a3287c818e\nauthor Deadbeef <ent3rm4n@gmail.com> 1630580393 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631164892 +0000\n\nUse trait select logic instead of query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "html_url": "https://github.com/rust-lang/rust/commit/1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0a52128ee2d522e12893637428d88a3287c818e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a52128ee2d522e12893637428d88a3287c818e", "html_url": "https://github.com/rust-lang/rust/commit/f0a52128ee2d522e12893637428d88a3287c818e"}], "stats": {"total": 133, "additions": 101, "deletions": 32}, "files": [{"sha": "f1c7d3035b977ec28a70d10dcda146785b5e601e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "patch": "@@ -988,14 +988,12 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 let mut err_span = self.span;\n \n-                // Check to see if the type of this place can ever have a drop impl. If not, this\n-                // `Drop` terminator is frivolous.\n-                let ty_needs_drop = dropped_place\n-                    .ty(self.body, self.tcx)\n-                    .ty\n-                    .needs_non_const_drop(self.tcx, self.param_env);\n-\n-                if !ty_needs_drop {\n+                let ty_needs_non_const_drop = qualifs::NeedsNonConstDrop::in_any_value_of_ty(\n+                    self.ccx,\n+                    dropped_place.ty(self.body, self.tcx).ty,\n+                );\n+\n+                if !ty_needs_non_const_drop {\n                     return;\n                 }\n "}, {"sha": "ea8f0a29181ef14811b41f0be6784ce19cf2a643", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "patch": "@@ -3,10 +3,14 @@\n //! See the `Qualif` trait for more info.\n \n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n-use rustc_trait_selection::traits;\n+use rustc_trait_selection::traits::{\n+    self, ImplSource, Obligation, ObligationCause, SelectionContext,\n+};\n \n use super::ConstCx;\n \n@@ -108,7 +112,28 @@ impl Qualif for NeedsNonConstDrop {\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-        ty.needs_drop(cx.tcx, cx.param_env)\n+        let trait_ref = ty::TraitRef {\n+            def_id: cx.tcx.require_lang_item(hir::LangItem::Drop, None),\n+            substs: cx.tcx.mk_substs_trait(ty, &[]),\n+        };\n+        let obligation = Obligation::new(\n+            ObligationCause::dummy(),\n+            cx.param_env,\n+            ty::Binder::dummy(ty::TraitPredicate {\n+                trait_ref,\n+                constness: ty::BoundConstness::ConstIfConst,\n+            }),\n+        );\n+\n+        let implsrc = cx.tcx.infer_ctxt().enter(|infcx| {\n+            let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+            selcx.select(&obligation)\n+        });\n+        match implsrc {\n+            Ok(Some(ImplSource::ConstDrop(_)))\n+            | Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => false,\n+            _ => true,\n+        }\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {"}, {"sha": "6d64dc8254bb4a426379aa977ba7790e6000a16a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "patch": "@@ -283,6 +283,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if self.is_in_const_context {\n                 self.assemble_const_drop_candidates(obligation, &mut candidates)?;\n             } else {\n+                debug!(\"passing ~const Drop bound; in non-const context\");\n                 // `~const Drop` when we are not in a const context has no effect.\n                 candidates.vec.push(ConstDropCandidate)\n             }\n@@ -821,6 +822,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut stack: Vec<(Ty<'tcx>, usize)> = vec![(obligation.self_ty().skip_binder(), 0)];\n \n         while let Some((ty, depth)) = stack.pop() {\n+            let mut noreturn = false;\n+\n             self.check_recursion_depth(depth, obligation)?;\n             let mut copy_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n             let mut copy_obligation =\n@@ -836,8 +839,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let copy_conditions = self.copy_clone_conditions(&copy_obligation);\n             self.assemble_builtin_bound_candidates(copy_conditions, &mut copy_candidates);\n             if !copy_candidates.vec.is_empty() {\n-                continue;\n+                noreturn = true;\n             }\n+            debug!(?copy_candidates.vec, \"assemble_const_drop_candidates - copy\");\n \n             match ty.kind() {\n                 ty::Int(_)\n@@ -857,22 +861,28 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 ty::Adt(def, subst) => {\n                     let mut set = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n-                    self.assemble_candidates_from_impls(obligation, &mut set);\n-                    if set\n-                        .vec\n-                        .into_iter()\n-                        .find(|candidate| {\n-                            if let SelectionCandidate::ImplCandidate(did) = candidate {\n-                                matches!(self.tcx().impl_constness(*did), hir::Constness::NotConst)\n-                            } else {\n-                                false\n-                            }\n-                        })\n-                        .is_none()\n-                    {\n-                        // could not find a const impl for Drop, iterate over its fields.\n-                        stack\n-                            .extend(def.all_fields().map(|f| (f.ty(self.tcx(), subst), depth + 1)));\n+                    self.assemble_candidates_from_impls(\n+                        &obligation.with(obligation.predicate.map_bound(|mut pred| {\n+                            pred.trait_ref.substs = self.tcx().mk_substs_trait(ty, &[]);\n+                            pred\n+                        })),\n+                        &mut set,\n+                    );\n+                    stack.extend(def.all_fields().map(|f| (f.ty(self.tcx(), subst), depth + 1)));\n+\n+                    debug!(?set.vec, \"assemble_const_drop_candidates - ty::Adt\");\n+                    if set.vec.into_iter().any(|candidate| {\n+                        if let SelectionCandidate::ImplCandidate(did) = candidate {\n+                            matches!(self.tcx().impl_constness(did), hir::Constness::NotConst)\n+                        } else {\n+                            false\n+                        }\n+                    }) {\n+                        if !noreturn {\n+                            // has non-const Drop\n+                            return Ok(());\n+                        }\n+                        debug!(\"not returning\");\n                     }\n                 }\n \n@@ -903,8 +913,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ty::Infer(_)\n                 | ty::Placeholder(_)\n                 | ty::Projection(..)\n-                | ty::Param(..) => return Ok(()),\n+                | ty::Param(..) => {\n+                    if !noreturn {\n+                        return Ok(());\n+                    }\n+                    debug!(\"not returning\");\n+                }\n             }\n+            debug!(?stack, \"assemble_const_drop_candidates - in loop\");\n         }\n         // all types have passed.\n         candidates.vec.push(ConstDropCandidate);"}, {"sha": "17442e1b05a169a1f9ef0b926d6de9d9b9e79735", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "patch": "@@ -16,16 +16,19 @@ impl const Drop for ConstImplWithDropGlue {\n     fn drop(&mut self) {}\n }\n \n-const fn check<T: ~const Drop>() {}\n+const fn check<T: ~const Drop>(_: T) {}\n \n macro_rules! check_all {\n-    ($($T:ty),*$(,)?) => {$(\n-        const _: () = check::<$T>();\n+    ($($exp:expr),*$(,)?) => {$(\n+        const _: () = check($exp);\n     )*};\n }\n \n check_all! {\n-    ConstImplWithDropGlue,\n+    NonTrivialDrop,\n+    //~^ ERROR the trait bound\n+    ConstImplWithDropGlue(NonTrivialDrop),\n+    //~^ ERROR the trait bound\n }\n \n fn main() {}"}, {"sha": "e962503d7df88ea4f67a781e67a5178d5984d4ab", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca83c6451783aaa77aa69643b70b22ef9e9a01a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stderr?ref=1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `NonTrivialDrop: Drop` is not satisfied\n+  --> $DIR/const-drop-fail.rs:28:5\n+   |\n+LL |     NonTrivialDrop,\n+   |     ^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const-drop-fail.rs:19:19\n+   |\n+LL | const fn check<T: ~const Drop>(_: T) {}\n+   |                   ^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: the trait bound `ConstImplWithDropGlue: Drop` is not satisfied\n+  --> $DIR/const-drop-fail.rs:30:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `ConstImplWithDropGlue`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const-drop-fail.rs:19:19\n+   |\n+LL | const fn check<T: ~const Drop>(_: T) {}\n+   |                   ^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}