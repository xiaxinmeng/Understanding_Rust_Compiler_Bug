{"sha": "f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZWY0YjJjZWZiNWY0ZGM5NDRlZDRhZTJmNzRkOWY5OTE4ZDc4MjI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T01:27:19Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T19:56:14Z"}, "message": "Use ItemType in cache", "tree": {"sha": "366374e67e5a4e228332fe6325f0a3dfeb0473a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/366374e67e5a4e228332fe6325f0a3dfeb0473a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "html_url": "https://github.com/rust-lang/rust/commit/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1481af9f598c84d58fc1f720777a3e482d8a33c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1481af9f598c84d58fc1f720777a3e482d8a33c1", "html_url": "https://github.com/rust-lang/rust/commit/1481af9f598c84d58fc1f720777a3e482d8a33c1"}], "stats": {"total": 43, "additions": 11, "deletions": 32}, "files": [{"sha": "de37f4eedf6a13bf71e86b1904421c614a2c7d2a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "patch": "@@ -1456,7 +1456,6 @@ crate enum TypeKind {\n     Foreign,\n     Macro,\n     TraitAlias,\n-    Primitive,\n }\n \n impl From<hir::def::DefKind> for TypeKind {"}, {"sha": "cfaa5b59a26bf1bac48f51464c217fc029584176", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "patch": "@@ -20,7 +20,7 @@ use crate::clean;\n /// module headings. If you are adding to this enum and want to ensure that the sidebar also prints\n /// a heading, edit the listing in `html/render.rs`, function `sidebar_module`. This uses an\n /// ordering based on a helper function inside `item_module`, in the same file.\n-#[derive(Copy, PartialEq, Eq, Clone, Debug, PartialOrd, Ord)]\n+#[derive(Copy, PartialEq, Eq, Hash, Clone, Debug, PartialOrd, Ord)]\n crate enum ItemType {\n     Module = 0,\n     ExternCrate = 1,\n@@ -103,26 +103,6 @@ impl<'a> From<&'a clean::Item> for ItemType {\n     }\n }\n \n-impl From<clean::TypeKind> for ItemType {\n-    fn from(kind: clean::TypeKind) -> ItemType {\n-        match kind {\n-            clean::TypeKind::Struct => ItemType::Struct,\n-            clean::TypeKind::Union => ItemType::Union,\n-            clean::TypeKind::Enum => ItemType::Enum,\n-            clean::TypeKind::Function => ItemType::Function,\n-            clean::TypeKind::Trait => ItemType::Trait,\n-            clean::TypeKind::Module => ItemType::Module,\n-            clean::TypeKind::Static => ItemType::Static,\n-            clean::TypeKind::Const => ItemType::Constant,\n-            clean::TypeKind::Typedef => ItemType::Typedef,\n-            clean::TypeKind::Foreign => ItemType::ForeignType,\n-            clean::TypeKind::Macro => ItemType::Macro,\n-            clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n-            clean::TypeKind::Primitive => ItemType::Primitive,\n-        }\n-    }\n-}\n-\n impl From<hir::def::DefKind> for ItemType {\n     fn from(other: hir::def::DefKind) -> Self {\n         match other {"}, {"sha": "f93a0d4fc2d72cf9d38647f2bffd333cd4228baf", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "patch": "@@ -7,7 +7,7 @@ use rustc_span::symbol::{sym, Symbol};\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean::types::{\n-    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, TypeKind, WherePredicate,\n+    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n };\n use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n@@ -316,15 +316,15 @@ crate fn get_real_types<'tcx>(\n     arg: &Type,\n     tcx: TyCtxt<'tcx>,\n     recurse: i32,\n-    res: &mut FxHashSet<(Type, TypeKind)>,\n+    res: &mut FxHashSet<(Type, ItemType)>,\n ) -> usize {\n-    fn insert(res: &mut FxHashSet<(Type, TypeKind)>, tcx: TyCtxt<'_>, ty: Type) -> usize {\n+    fn insert(res: &mut FxHashSet<(Type, ItemType)>, tcx: TyCtxt<'_>, ty: Type) -> usize {\n         if let Some(kind) = ty.def_id().map(|did| tcx.def_kind(did).into()) {\n             res.insert((ty, kind));\n             1\n         } else if ty.is_primitive() {\n             // This is a primitive, let's store it as such.\n-            res.insert((ty, TypeKind::Primitive));\n+            res.insert((ty, ItemType::Primitive));\n             1\n         } else {\n             0\n@@ -394,7 +394,7 @@ crate fn get_all_types<'tcx>(\n     generics: &Generics,\n     decl: &FnDecl,\n     tcx: TyCtxt<'tcx>,\n-) -> (Vec<(Type, TypeKind)>, Vec<(Type, TypeKind)>) {\n+) -> (Vec<(Type, ItemType)>, Vec<(Type, ItemType)>) {\n     let mut all_types = FxHashSet::default();\n     for arg in decl.inputs.values.iter() {\n         if arg.type_.is_self_type() {"}, {"sha": "f1d0ba9319a7993e18e7d6ce84bdf9b604a1abf2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f3ef4b2cefb5f4dc944ed4ae2f74d9f9918d7822", "patch": "@@ -54,7 +54,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n-use crate::clean::{self, GetDefId, RenderedLink, SelfTy, TypeKind};\n+use crate::clean::{self, GetDefId, RenderedLink, SelfTy};\n use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -182,11 +182,11 @@ impl Serialize for IndexItemFunctionType {\n #[derive(Debug)]\n crate struct TypeWithKind {\n     ty: RenderType,\n-    kind: TypeKind,\n+    kind: ItemType,\n }\n \n-impl From<(RenderType, TypeKind)> for TypeWithKind {\n-    fn from(x: (RenderType, TypeKind)) -> TypeWithKind {\n+impl From<(RenderType, ItemType)> for TypeWithKind {\n+    fn from(x: (RenderType, ItemType)) -> TypeWithKind {\n         TypeWithKind { ty: x.0, kind: x.1 }\n     }\n }\n@@ -196,7 +196,7 @@ impl Serialize for TypeWithKind {\n     where\n         S: Serializer,\n     {\n-        (&self.ty.name, ItemType::from(self.kind)).serialize(serializer)\n+        (&self.ty.name, self.kind).serialize(serializer)\n     }\n }\n "}]}