{"sha": "6766abbfa9959581ebfdba32131125e2b3b624f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NjZhYmJmYTk5NTk1ODFlYmZkYmEzMjEzMTEyNWUyYjNiNjI0ZjM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-27T15:51:26Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:31:55Z"}, "message": "Clippy lints", "tree": {"sha": "cc7ea7c31d5cd9757dbb9de0288010e77780513f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7ea7c31d5cd9757dbb9de0288010e77780513f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6766abbfa9959581ebfdba32131125e2b3b624f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6766abbfa9959581ebfdba32131125e2b3b624f3", "html_url": "https://github.com/rust-lang/rust/commit/6766abbfa9959581ebfdba32131125e2b3b624f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6766abbfa9959581ebfdba32131125e2b3b624f3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "802b6db0041115d261f3d0ea1855f35658141c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/802b6db0041115d261f3d0ea1855f35658141c0b", "html_url": "https://github.com/rust-lang/rust/commit/802b6db0041115d261f3d0ea1855f35658141c0b"}], "stats": {"total": 80, "additions": 37, "deletions": 43}, "files": [{"sha": "199c01cf821521ef60e2563c30e5b3ca0d75a019", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -99,6 +99,6 @@ impl GitInfo {\n             version.push_str(&inner.commit_date);\n             version.push_str(\")\");\n         }\n-        return version\n+        version\n     }\n }"}, {"sha": "5123e59a5dbbe445521cb85eba3d008444897df7", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -559,23 +559,24 @@ fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path) {\n             // If this was an output file in the \"host dir\" we don't actually\n             // worry about it, it's not relevant for us.\n             if filename.starts_with(&host_root_dir) {\n-                continue\n+                continue;\n+            }\n \n             // If this was output in the `deps` dir then this is a precise file\n             // name (hash included) so we start tracking it.\n-            } else if filename.starts_with(&target_deps_dir) {\n+            if filename.starts_with(&target_deps_dir) {\n                 deps.push(filename.to_path_buf());\n+                continue;\n+            }\n \n             // Otherwise this was a \"top level artifact\" which right now doesn't\n             // have a hash in the name, but there's a version of this file in\n             // the `deps` folder which *does* have a hash in the name. That's\n             // the one we'll want to we'll probe for it later.\n-            } else {\n-                toplevel.push((filename.file_stem().unwrap()\n-                                       .to_str().unwrap().to_string(),\n-                               filename.extension().unwrap().to_owned()\n-                                       .to_str().unwrap().to_string()));\n-            }\n+            toplevel.push((filename.file_stem().unwrap()\n+                                    .to_str().unwrap().to_string(),\n+                            filename.extension().unwrap().to_owned()\n+                                    .to_str().unwrap().to_string()));\n         }\n     }\n "}, {"sha": "56808d69ee2c7d1f685cd44c6377ba0c0884a9f3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -417,7 +417,7 @@ impl Config {\n             config.update_with_config_mk();\n         }\n \n-        return config\n+        config\n     }\n \n     /// \"Temporary\" routine to parse `config.mk` into this configuration."}, {"sha": "8e3f88c8a34857f07e747df379d5437eafaee6b4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -488,12 +488,11 @@ fn copy_src_dirs(build: &Build, src_dirs: &[&str], exclude_dirs: &[&str], dst_di\n         if spath.ends_with(\"~\") || spath.ends_with(\".pyc\") {\n             return false\n         }\n-        if spath.contains(\"llvm/test\") || spath.contains(\"llvm\\\\test\") {\n-            if spath.ends_with(\".ll\") ||\n-               spath.ends_with(\".td\") ||\n-               spath.ends_with(\".s\") {\n-                return false\n-            }\n+        if (spath.contains(\"llvm/test\") || spath.contains(\"llvm\\\\test\")) &&\n+            (spath.ends_with(\".ll\") ||\n+             spath.ends_with(\".td\") ||\n+             spath.ends_with(\".s\")) {\n+            return false\n         }\n \n         let full_path = Path::new(dir).join(path);"}, {"sha": "1a73c48966598aeb08844571e31dd7ef549b0148", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -315,10 +315,8 @@ Arguments:\n \n         let mut stage = matches.opt_str(\"stage\").map(|j| j.parse().unwrap());\n \n-        if matches.opt_present(\"incremental\") {\n-            if stage.is_none() {\n-                stage = Some(1);\n-            }\n+        if matches.opt_present(\"incremental\") && stage.is_none() {\n+            stage = Some(1);\n         }\n \n         Flags {"}, {"sha": "8e2ef527b1658dc0ea4a6a0aca491b439dfbf1f3", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -146,5 +146,5 @@ fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n             _ => {}\n         }\n     }\n-    return ret\n+    ret\n }"}, {"sha": "35abe21452372c1c67dd0a4dc5de9bb68fe2f95f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -496,7 +496,7 @@ impl Build {\n \n         self.ci_env.force_coloring_in_ci(&mut cargo);\n \n-        return cargo\n+        cargo\n     }\n \n     /// Get a path to the compiler specified.\n@@ -519,15 +519,15 @@ impl Build {\n         let mut rustdoc = self.compiler_path(compiler);\n         rustdoc.pop();\n         rustdoc.push(exe(\"rustdoc\", compiler.host));\n-        return rustdoc\n+        rustdoc\n     }\n \n     /// Get a `Command` which is ready to run `tool` in `stage` built for\n     /// `host`.\n     fn tool_cmd(&self, compiler: &Compiler, tool: &str) -> Command {\n         let mut cmd = Command::new(self.tool(&compiler, tool));\n         self.prepare_tool_cmd(compiler, &mut cmd);\n-        return cmd\n+        cmd\n     }\n \n     /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n@@ -578,7 +578,7 @@ impl Build {\n         if self.config.profiler {\n             features.push_str(\" profiler\");\n         }\n-        return features\n+        features\n     }\n \n     /// Get the space-separated set of activated features for the compiler.\n@@ -587,7 +587,7 @@ impl Build {\n         if self.config.use_jemalloc {\n             features.push_str(\" jemalloc\");\n         }\n-        return features\n+        features\n     }\n \n     /// Component directory that Cargo will produce output into (e.g.\n@@ -834,7 +834,7 @@ impl Build {\n         if target == \"i686-pc-windows-gnu\" {\n             base.push(\"-fno-omit-frame-pointer\".into());\n         }\n-        return base\n+        base\n     }\n \n     /// Returns the path to the `ar` archive utility for the target specified.\n@@ -866,7 +866,7 @@ impl Build {\n             !target.contains(\"emscripten\") {\n             base.push(format!(\"-Clinker={}\", self.cc(target).display()));\n         }\n-        return base\n+        base\n     }\n \n     /// Returns the \"musl root\" for this `target`, if defined"}, {"sha": "d6def25cfaa9466bb73c8c3976ee2cadeb6e74f3", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -56,7 +56,7 @@ impl Finder {\n                     return Some(target);\n                 }\n             }\n-            return None;\n+            None\n         }).clone()\n     }\n \n@@ -73,10 +73,8 @@ pub fn check(build: &mut Build) {\n     // one is present as part of the PATH then that can lead to the system\n     // being unable to identify the files properly. See\n     // https://github.com/rust-lang/rust/issues/34959 for more details.\n-    if cfg!(windows) {\n-        if path.to_string_lossy().contains(\"\\\"\") {\n-            panic!(\"PATH contains invalid character '\\\"'\");\n-        }\n+    if cfg!(windows) && path.to_string_lossy().contains(\"\\\"\") {\n+        panic!(\"PATH contains invalid character '\\\"'\");\n     }\n \n     let mut cmd_finder = Finder::new();\n@@ -95,12 +93,10 @@ pub fn check(build: &mut Build) {\n     }\n \n     // Ninja is currently only used for LLVM itself.\n-    if building_llvm && build.config.ninja {\n-        // Some Linux distros rename `ninja` to `ninja-build`.\n-        // CMake can work with either binary name.\n-        if cmd_finder.maybe_have(\"ninja-build\").is_none() {\n-            cmd_finder.must_have(\"ninja\");\n-        }\n+    // Some Linux distros rename `ninja` to `ninja-build`.\n+    // CMake can work with either binary name.\n+    if building_llvm && build.config.ninja && cmd_finder.maybe_have(\"ninja-build\").is_none() {\n+        cmd_finder.must_have(\"ninja\");\n     }\n \n     build.config.python = build.config.python.take().map(|p| cmd_finder.must_have(p))"}, {"sha": "61e9a0d16dac021824aa319235fbd0f02012dc56", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6766abbfa9959581ebfdba32131125e2b3b624f3/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=6766abbfa9959581ebfdba32131125e2b3b624f3", "patch": "@@ -148,7 +148,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                 }\n             }\n         }\n-        return ret\n+        ret\n     };\n \n     // ========================================================================\n@@ -237,7 +237,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                          s.target)\n                 }\n             });\n-            return rule\n+            rule\n     }\n \n     // Similar to the `libstd`, `libtest`, and `librustc` rules above, except\n@@ -1326,7 +1326,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         for idx in 0..nodes.len() {\n             self.topo_sort(idx, &idx_to_node, &edges, &mut visited, &mut order);\n         }\n-        return order\n+        order\n     }\n \n     /// Builds the dependency graph rooted at `step`.\n@@ -1365,7 +1365,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         }\n \n         edges.entry(idx).or_insert(HashSet::new()).extend(deps);\n-        return idx\n+        idx\n     }\n \n     /// Given a dependency graph with a finished list of `nodes`, fill out more"}]}