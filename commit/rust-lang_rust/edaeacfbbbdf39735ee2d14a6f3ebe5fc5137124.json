{"sha": "edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "node_id": "C_kwDOAAsO6NoAKGVkYWVhY2ZiYmJkZjM5NzM1ZWUyZDE0YTZmM2ViZTVmYzUxMzcxMjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T02:10:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T02:10:26Z"}, "message": "Auto merge of #89139 - camsteffen:write-perf, r=Mark-Simulacrum\n\nUse ZST for fmt unsafety\n\nas suggested here - https://github.com/rust-lang/rust/pull/83302#issuecomment-923529151.", "tree": {"sha": "f60eacbf2cdbe503aa176c1df7a262fc8dfab806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60eacbf2cdbe503aa176c1df7a262fc8dfab806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "html_url": "https://github.com/rust-lang/rust/commit/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51b17288ea990e097b51b8644cbd8e7877412cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51b17288ea990e097b51b8644cbd8e7877412cb", "html_url": "https://github.com/rust-lang/rust/commit/b51b17288ea990e097b51b8644cbd8e7877412cb"}, {"sha": "4873ebee4ca98805ba4a404c7bbeae98639dc91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4873ebee4ca98805ba4a404c7bbeae98639dc91c", "html_url": "https://github.com/rust-lang/rust/commit/4873ebee4ca98805ba4a404c7bbeae98639dc91c"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "e6c062249994f85c37266b85fc54eb9b0b72f405", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "patch": "@@ -523,28 +523,12 @@ impl FormatArgsExpn<'tcx> {\n             if let ExpnKind::Macro(_, name) = expr.span.ctxt().outer_expn_data().kind;\n             let name = name.as_str();\n             if name.ends_with(\"format_args\") || name.ends_with(\"format_args_nl\");\n-\n-            if let ExprKind::Match(inner_match, [arm], _) = expr.kind;\n-\n-            // `match match`, if you will\n-            if let ExprKind::Match(args, [inner_arm], _) = inner_match.kind;\n-            if let ExprKind::Tup(value_args) = args.kind;\n-            if let Some(value_args) = value_args\n-                .iter()\n-                .map(|e| match e.kind {\n-                    ExprKind::AddrOf(_, _, e) => Some(e),\n-                    _ => None,\n-                })\n-                .collect();\n-            if let ExprKind::Array(args) = inner_arm.body.kind;\n-\n-            if let ExprKind::Block(Block { stmts: [], expr: Some(expr), .. }, _) = arm.body.kind;\n-            if let ExprKind::Call(_, call_args) = expr.kind;\n-            if let Some((strs_ref, fmt_expr)) = match call_args {\n+            if let ExprKind::Call(_, args) = expr.kind;\n+            if let Some((strs_ref, args, fmt_expr)) = match args {\n                 // Arguments::new_v1\n-                [strs_ref, _] => Some((strs_ref, None)),\n+                [strs_ref, args] => Some((strs_ref, args, None)),\n                 // Arguments::new_v1_formatted\n-                [strs_ref, _, fmt_expr] => Some((strs_ref, Some(fmt_expr))),\n+                [strs_ref, args, fmt_expr, _unsafe_arg] => Some((strs_ref, args, Some(fmt_expr))),\n                 _ => None,\n             };\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, strs_arr) = strs_ref.kind;\n@@ -560,6 +544,17 @@ impl FormatArgsExpn<'tcx> {\n                     None\n                 })\n                 .collect();\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, args) = args.kind;\n+            if let ExprKind::Match(args, [arm], _) = args.kind;\n+            if let ExprKind::Tup(value_args) = args.kind;\n+            if let Some(value_args) = value_args\n+                .iter()\n+                .map(|e| match e.kind {\n+                    ExprKind::AddrOf(_, _, e) => Some(e),\n+                    _ => None,\n+                })\n+                .collect();\n+            if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,"}]}