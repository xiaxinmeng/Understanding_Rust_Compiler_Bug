{"sha": "7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYTYyN2ZlNTgyZTg4MTFlOWU5OGI1OGM4YTZkYTgwMDU0YmEyZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:37:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:37:51Z"}, "message": "Move more stuff to SourceBinder", "tree": {"sha": "ef5a255acddf3aeef6dcb2f38a1d937c36a55242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef5a255acddf3aeef6dcb2f38a1d937c36a55242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "html_url": "https://github.com/rust-lang/rust/commit/7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d6ddbe694498a1bf69c6253422efb89431164e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6ddbe694498a1bf69c6253422efb89431164e", "html_url": "https://github.com/rust-lang/rust/commit/a3d6ddbe694498a1bf69c6253422efb89431164e"}], "stats": {"total": 136, "additions": 70, "deletions": 66}, "files": [{"sha": "c766c3f0b9de068cb834311bdc822419432ea455", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 3, "deletions": 56, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "patch": "@@ -1,66 +1,13 @@\n //! Finds a corresponding hir data structure for a syntax node in a specific\n //! file.\n \n-use hir_def::{\n-    child_by_source::ChildBySource, keys, nameres::ModuleSource, GenericDefId, ModuleId,\n-};\n+use hir_def::{nameres::ModuleSource, ModuleId};\n use hir_expand::name::AsName;\n use ra_db::FileId;\n use ra_prof::profile;\n-use ra_syntax::{\n-    ast::{self, AstNode, NameOwner},\n-    match_ast,\n-};\n+use ra_syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{\n-    db::{DefDatabase, HirDatabase},\n-    DefWithBody, InFile, Local, Module, SourceBinder, TypeParam,\n-};\n-\n-impl Local {\n-    pub fn from_source(db: &impl HirDatabase, src: InFile<ast::BindPat>) -> Option<Self> {\n-        let mut sb = SourceBinder::new(db);\n-        let file_id = src.file_id;\n-        let parent: DefWithBody = src.value.syntax().ancestors().find_map(|it| {\n-            let res = match_ast! {\n-                match it {\n-                    ast::ConstDef(value) => { sb.to_def(InFile { value, file_id})?.into() },\n-                    ast::StaticDef(value) => { sb.to_def(InFile { value, file_id})?.into() },\n-                    ast::FnDef(value) => { sb.to_def(InFile { value, file_id})?.into() },\n-                    _ => return None,\n-                }\n-            };\n-            Some(res)\n-        })?;\n-        let (_body, source_map) = db.body_with_source_map(parent.into());\n-        let src = src.map(ast::Pat::from);\n-        let pat_id = source_map.node_pat(src.as_ref())?;\n-        Some(Local { parent, pat_id })\n-    }\n-}\n-\n-impl TypeParam {\n-    pub fn from_source(db: &impl HirDatabase, src: InFile<ast::TypeParam>) -> Option<Self> {\n-        let mut sb = SourceBinder::new(db);\n-        let file_id = src.file_id;\n-        let parent: GenericDefId = src.value.syntax().ancestors().find_map(|it| {\n-            let res = match_ast! {\n-                match it {\n-                    ast::FnDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n-                    ast::StructDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n-                    ast::EnumDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n-                    ast::TraitDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n-                    ast::TypeAliasDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n-                    ast::ImplBlock(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n-                    _ => return None,\n-                }\n-            };\n-            Some(res)\n-        })?;\n-        let &id = parent.child_by_source(db)[keys::TYPE_PARAM].get(&src)?;\n-        Some(TypeParam { id })\n-    }\n-}\n+use crate::{db::DefDatabase, InFile, Module};\n \n impl Module {\n     pub fn from_declaration(db: &impl DefDatabase, src: InFile<ast::Module>) -> Option<Self> {"}, {"sha": "97e3aef34c0d7cb1d1a80bb8c6c0492396a55bbd", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 65, "deletions": 8, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "patch": "@@ -8,15 +8,15 @@ use hir_def::{\n     dyn_map::DynMap,\n     keys::{self, Key},\n     resolver::{HasResolver, Resolver},\n-    ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, ImplId, ModuleId, StaticId,\n-    StructFieldId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n+    ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId,\n+    StaticId, StructFieldId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n use hir_expand::{AstId, InFile, MacroDefId, MacroDefKind};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode, SyntaxNode, TextUnit};\n use rustc_hash::FxHashMap;\n \n-use crate::{db::HirDatabase, ModuleSource, SourceAnalyzer};\n+use crate::{db::HirDatabase, Local, ModuleSource, SourceAnalyzer, TypeParam};\n \n pub struct SourceBinder<'a, DB> {\n     pub db: &'a DB,\n@@ -53,8 +53,7 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n     }\n \n     pub fn to_def<T: ToDef>(&mut self, src: InFile<T>) -> Option<T::Def> {\n-        let id: T::ID = self.to_id(src)?;\n-        Some(id.into())\n+        T::to_def(self, src)\n     }\n \n     fn to_id<T: ToId>(&mut self, src: InFile<T>) -> Option<T::ID> {\n@@ -110,20 +109,27 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n     }\n }\n \n-pub trait ToId: Sized + AstNode + 'static {\n+pub trait ToId: Sized {\n     type ID: Sized + Copy + 'static;\n     fn to_id<DB: HirDatabase>(sb: &mut SourceBinder<'_, DB>, src: InFile<Self>)\n         -> Option<Self::ID>;\n }\n \n-pub trait ToDef: ToId {\n-    type Def: From<Self::ID>;\n+pub trait ToDef: Sized + AstNode + 'static {\n+    type Def;\n+    fn to_def<DB: HirDatabase>(\n+        sb: &mut SourceBinder<'_, DB>,\n+        src: InFile<Self>,\n+    ) -> Option<Self::Def>;\n }\n \n macro_rules! to_def_impls {\n     ($(($def:path, $ast:path)),* ,) => {$(\n         impl ToDef for $ast {\n             type Def = $def;\n+            fn to_def<DB: HirDatabase>(sb: &mut SourceBinder<'_, DB>, src: InFile<Self>)\n+                -> Option<Self::Def>\n+            { sb.to_id(src).map(Into::into) }\n         }\n     )*}\n }\n@@ -230,3 +236,54 @@ impl ToId for ast::MacroCall {\n         Some(MacroDefId { krate, ast_id, kind })\n     }\n }\n+\n+impl ToDef for ast::BindPat {\n+    type Def = Local;\n+\n+    fn to_def<DB: HirDatabase>(sb: &mut SourceBinder<'_, DB>, src: InFile<Self>) -> Option<Local> {\n+        let file_id = src.file_id;\n+        let parent: DefWithBodyId = src.value.syntax().ancestors().find_map(|it| {\n+            let res = match_ast! {\n+                match it {\n+                    ast::ConstDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::StaticDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::FnDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    _ => return None,\n+                }\n+            };\n+            Some(res)\n+        })?;\n+        let (_body, source_map) = sb.db.body_with_source_map(parent);\n+        let src = src.map(ast::Pat::from);\n+        let pat_id = source_map.node_pat(src.as_ref())?;\n+        Some(Local { parent: parent.into(), pat_id })\n+    }\n+}\n+\n+impl ToDef for ast::TypeParam {\n+    type Def = TypeParam;\n+\n+    fn to_def<DB: HirDatabase>(\n+        sb: &mut SourceBinder<'_, DB>,\n+        src: InFile<ast::TypeParam>,\n+    ) -> Option<TypeParam> {\n+        let mut sb = SourceBinder::new(sb.db);\n+        let file_id = src.file_id;\n+        let parent: GenericDefId = src.value.syntax().ancestors().find_map(|it| {\n+            let res = match_ast! {\n+                match it {\n+                    ast::FnDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::StructDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::EnumDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::TraitDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::TypeAliasDef(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    ast::ImplBlock(value) => { sb.to_id(InFile { value, file_id})?.into() },\n+                    _ => return None,\n+                }\n+            };\n+            Some(res)\n+        })?;\n+        let &id = parent.child_by_source(sb.db)[keys::TYPE_PARAM].get(&src)?;\n+        Some(TypeParam { id })\n+    }\n+}"}, {"sha": "82a18a0a5e7d3c064d141836d4b451ff83812dd7", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa627fe582e8811e9e98b58c8a6da80054ba2e3/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn classify_name(\n         match parent {\n             ast::BindPat(it) => {\n                 let src = name.with_value(it);\n-                let local = hir::Local::from_source(sb.db, src)?;\n+                let local = sb.to_def(src)?;\n                 Some(NameDefinition {\n                     visibility: None,\n                     container: local.module(sb.db),\n@@ -114,7 +114,7 @@ pub(crate) fn classify_name(\n             },\n             ast::TypeParam(it) => {\n                 let src = name.with_value(it);\n-                let def = hir::TypeParam::from_source(sb.db, src)?;\n+                let def = sb.to_def(src)?;\n                 Some(NameDefinition {\n                     visibility: None,\n                     container: def.module(sb.db),"}]}