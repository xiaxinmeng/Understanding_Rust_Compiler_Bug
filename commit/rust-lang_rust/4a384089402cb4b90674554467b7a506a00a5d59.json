{"sha": "4a384089402cb4b90674554467b7a506a00a5d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMzg0MDg5NDAyY2I0YjkwNjc0NTU0NDY3YjdhNTA2YTAwYTVkNTk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-08T17:30:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-19T20:17:53Z"}, "message": "Remove `eliminate_crate_var` and special pretty-printing for `$crate`", "tree": {"sha": "d7194666dc222a715f3148837b5e150685e43d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7194666dc222a715f3148837b5e150685e43d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a384089402cb4b90674554467b7a506a00a5d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a384089402cb4b90674554467b7a506a00a5d59", "html_url": "https://github.com/rust-lang/rust/commit/4a384089402cb4b90674554467b7a506a00a5d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a384089402cb4b90674554467b7a506a00a5d59/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4a4ffc69f2d05eb8b8a32eaf9bd0607b69fe38", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4a4ffc69f2d05eb8b8a32eaf9bd0607b69fe38", "html_url": "https://github.com/rust-lang/rust/commit/0a4a4ffc69f2d05eb8b8a32eaf9bd0607b69fe38"}], "stats": {"total": 119, "additions": 7, "deletions": 112}, "files": [{"sha": "5c6845181afd19725f6f7132cfc58455dbefd8d6", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -1622,8 +1622,7 @@ impl<'a> State<'a> {\n             if i > 0 {\n                 self.s.word(\"::\")?\n             }\n-            if segment.ident.name != keywords::PathRoot.name() &&\n-               segment.ident.name != keywords::DollarCrate.name() {\n+            if segment.ident.name != keywords::PathRoot.name() {\n                self.print_ident(segment.ident)?;\n                segment.with_generic_args(|generic_args| {\n                    self.print_generic_args(generic_args, segment.infer_types,\n@@ -1636,8 +1635,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_path_segment(&mut self, segment: &hir::PathSegment) -> io::Result<()> {\n-        if segment.ident.name != keywords::PathRoot.name() &&\n-           segment.ident.name != keywords::DollarCrate.name() {\n+        if segment.ident.name != keywords::PathRoot.name() {\n            self.print_ident(segment.ident)?;\n            segment.with_generic_args(|generic_args| {\n                self.print_generic_args(generic_args, segment.infer_types, false)\n@@ -1664,8 +1662,7 @@ impl<'a> State<'a> {\n                     if i > 0 {\n                         self.s.word(\"::\")?\n                     }\n-                    if segment.ident.name != keywords::PathRoot.name() &&\n-                       segment.ident.name != keywords::DollarCrate.name() {\n+                    if segment.ident.name != keywords::PathRoot.name() {\n                         self.print_ident(segment.ident)?;\n                         segment.with_generic_args(|generic_args| {\n                             self.print_generic_args(generic_args,"}, {"sha": "794e5741d62ca42265c1645dcc3e77e1f7633f35", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -1173,10 +1173,6 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn is_local(&self) -> bool {\n-        self.normal_ancestor_id.is_local()\n-    }\n-\n     fn nearest_item_scope(&'a self) -> Module<'a> {\n         if self.is_trait() { self.parent.unwrap() } else { self }\n     }"}, {"sha": "81633c8f57f9e73dac3ddd83b09aa20f460ce983", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -10,7 +10,7 @@\n \n use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n use {CrateLint, Resolver, ResolutionError, ScopeSet, Weak};\n-use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n+use {Module, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n use {is_known_tool, resolve_error};\n use ModuleOrUniformRoot;\n use Namespace::*;\n@@ -30,8 +30,6 @@ use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{feature_err, is_builtin_attr_name, GateIssue};\n-use syntax::fold::{self, Folder};\n-use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -138,58 +136,6 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n-    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n-        struct EliminateCrateVar<'b, 'a: 'b>(\n-            &'b mut Resolver<'a>, Span\n-        );\n-\n-        impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n-            fn fold_path(&mut self, path: ast::Path) -> ast::Path {\n-                match self.fold_qpath(None, path) {\n-                    (None, path) => path,\n-                    _ => unreachable!(),\n-                }\n-            }\n-\n-            fn fold_qpath(&mut self, mut qself: Option<ast::QSelf>, mut path: ast::Path)\n-                          -> (Option<ast::QSelf>, ast::Path) {\n-                qself = qself.map(|ast::QSelf { ty, path_span, position }| {\n-                    ast::QSelf {\n-                        ty: self.fold_ty(ty),\n-                        path_span: self.new_span(path_span),\n-                        position,\n-                    }\n-                });\n-\n-                if path.segments[0].ident.name == keywords::DollarCrate.name() {\n-                    let module = self.0.resolve_crate_root(path.segments[0].ident);\n-                    path.segments[0].ident.name = keywords::PathRoot.name();\n-                    if !module.is_local() {\n-                        let span = path.segments[0].ident.span;\n-                        path.segments.insert(1, match module.kind {\n-                            ModuleKind::Def(_, name) => ast::PathSegment::from_ident(\n-                                ast::Ident::with_empty_ctxt(name).with_span_pos(span)\n-                            ),\n-                            _ => unreachable!(),\n-                        });\n-                        if let Some(qself) = &mut qself {\n-                            qself.position += 1;\n-                        }\n-                    }\n-                }\n-                (qself, path)\n-            }\n-\n-            fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n-                fold::noop_fold_mac(mac, self)\n-            }\n-        }\n-\n-        let ret = EliminateCrateVar(self, item.span).fold_item(item);\n-        assert!(ret.len() == 1);\n-        ret.into_iter().next().unwrap()\n-    }\n-\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]) {\n         let invocation = self.invocations[&mark];\n@@ -259,7 +205,6 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.mark,\n                                                             normal_module_def_id);\n             invoc.expansion_data.mark.set_default_transparency(ext.default_transparency());\n-            invoc.expansion_data.mark.set_is_builtin(def_id.krate == CrateNum::BuiltinMacros);\n         }\n \n         Ok(Some(ext))"}, {"sha": "b807a65f6aed60d86d63b27274a38a85cf78bedf", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -732,7 +732,6 @@ pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n-    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item>;\n \n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n@@ -766,7 +765,6 @@ pub struct DummyResolver;\n impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n-    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> { item }\n \n     fn visit_ast_fragment_with_placeholders(&mut self, _invoc: Mark, _fragment: &AstFragment,\n                                             _derives: &[Mark]) {}"}, {"sha": "57ccc3e981720a7dede977a971dc7a3ef73c7f7c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -203,10 +203,7 @@ fn macro_bang_format(path: &ast::Path) -> ExpnFormat {\n         if i != 0 {\n             path_str.push_str(\"::\");\n         }\n-\n-        if segment.ident.name != keywords::PathRoot.name() &&\n-            segment.ident.name != keywords::DollarCrate.name()\n-        {\n+        if segment.ident.name != keywords::PathRoot.name() {\n             path_str.push_str(&segment.ident.as_str())\n         }\n     }"}, {"sha": "8250587f9e0850648f2d7a7f9e904f81d6c8bb5c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -16,7 +16,6 @@ use util::parser::{self, AssocOp, Fixity};\n use attr;\n use source_map::{self, SourceMap, Spanned};\n use syntax_pos::{self, BytePos};\n-use syntax_pos::hygiene::{Mark, SyntaxContext};\n use parse::token::{self, BinOpToken, Token};\n use parse::lexer::comments;\n use parse::{self, ParseSess};\n@@ -724,12 +723,8 @@ pub trait PrintState<'a> {\n             if i > 0 {\n                 self.writer().word(\"::\")?\n             }\n-            if segment.ident.name != keywords::PathRoot.name() &&\n-               segment.ident.name != keywords::DollarCrate.name()\n-            {\n+            if segment.ident.name != keywords::PathRoot.name() {\n                 self.writer().word(segment.ident.as_str().get())?;\n-            } else if segment.ident.name == keywords::DollarCrate.name() {\n-                self.print_dollar_crate(segment.ident.span.ctxt())?;\n             }\n         }\n         Ok(())\n@@ -842,19 +837,6 @@ pub trait PrintState<'a> {\n     }\n \n     fn nbsp(&mut self) -> io::Result<()> { self.writer().word(\" \") }\n-\n-    fn print_dollar_crate(&mut self, mut ctxt: SyntaxContext) -> io::Result<()> {\n-        if let Some(mark) = ctxt.adjust(Mark::root()) {\n-            // Make a best effort to print something that complies\n-            if mark.is_builtin() {\n-                if let Some(name) = std_inject::injected_crate_name() {\n-                    self.writer().word(\"::\")?;\n-                    self.writer().word(name)?;\n-                }\n-            }\n-        }\n-        Ok(())\n-    }\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n@@ -2463,14 +2445,11 @@ impl<'a> State<'a> {\n                           colons_before_params: bool)\n                           -> io::Result<()>\n     {\n-        if segment.ident.name != keywords::PathRoot.name() &&\n-           segment.ident.name != keywords::DollarCrate.name() {\n+        if segment.ident.name != keywords::PathRoot.name() {\n             self.print_ident(segment.ident)?;\n             if let Some(ref args) = segment.args {\n                 self.print_generic_args(args, colons_before_params)?;\n             }\n-        } else if segment.ident.name == keywords::DollarCrate.name() {\n-            self.print_dollar_crate(segment.ident.span.ctxt())?;\n         }\n         Ok(())\n     }"}, {"sha": "cc2fa68568713283ef2d78df097aecc6107ca4ab", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -74,7 +74,6 @@ impl MultiItemModifier for ProcMacroDerive {\n         // Mark attributes as known, and used.\n         MarkAttrs(&self.attrs).visit_item(&item);\n \n-        let item = ecx.resolver.eliminate_crate_var(item);\n         let token = Token::interpolated(token::NtItem(item));\n         let input = tokenstream::TokenTree::Token(DUMMY_SP, token).into();\n "}, {"sha": "72b48ede58e17062df20b00576440609ca4e9968", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a384089402cb4b90674554467b7a506a00a5d59/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4a384089402cb4b90674554467b7a506a00a5d59", "patch": "@@ -47,7 +47,6 @@ pub struct Mark(u32);\n struct MarkData {\n     parent: Mark,\n     default_transparency: Transparency,\n-    is_builtin: bool,\n     expn_info: Option<ExpnInfo>,\n }\n \n@@ -77,7 +76,6 @@ impl Mark {\n                 parent,\n                 // By default expansions behave like `macro_rules`.\n                 default_transparency: Transparency::SemiTransparent,\n-                is_builtin: false,\n                 expn_info: None,\n             });\n             Mark(data.marks.len() as u32 - 1)\n@@ -121,18 +119,6 @@ impl Mark {\n         HygieneData::with(|data| data.marks[self.0 as usize].default_transparency = transparency)\n     }\n \n-    #[inline]\n-    pub fn is_builtin(self) -> bool {\n-        assert_ne!(self, Mark::root());\n-        HygieneData::with(|data| data.marks[self.0 as usize].is_builtin)\n-    }\n-\n-    #[inline]\n-    pub fn set_is_builtin(self, is_builtin: bool) {\n-        assert_ne!(self, Mark::root());\n-        HygieneData::with(|data| data.marks[self.0 as usize].is_builtin = is_builtin)\n-    }\n-\n     pub fn is_descendant_of(mut self, ancestor: Mark) -> bool {\n         HygieneData::with(|data| {\n             while self != ancestor {\n@@ -206,7 +192,6 @@ impl HygieneData {\n                 // If the root is opaque, then loops searching for an opaque mark\n                 // will automatically stop after reaching it.\n                 default_transparency: Transparency::Opaque,\n-                is_builtin: true,\n                 expn_info: None,\n             }],\n             syntax_contexts: vec![SyntaxContextData {\n@@ -262,7 +247,6 @@ impl SyntaxContext {\n             data.marks.push(MarkData {\n                 parent: Mark::root(),\n                 default_transparency: Transparency::SemiTransparent,\n-                is_builtin: false,\n                 expn_info: Some(expansion_info),\n             });\n "}]}