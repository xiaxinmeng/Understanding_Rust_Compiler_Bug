{"sha": "f6e566185eaa4675cf2791ee69e63eb20ea01edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTU2NjE4NWVhYTQ2NzVjZjI3OTFlZTY5ZTYzZWIyMGVhMDFlZGI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-03-22T21:35:09Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-04-09T15:50:50Z"}, "message": "Implement Manually Drop", "tree": {"sha": "3be54575e0b0900320fc0ddd2a606b1dcdba6344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3be54575e0b0900320fc0ddd2a606b1dcdba6344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e566185eaa4675cf2791ee69e63eb20ea01edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e566185eaa4675cf2791ee69e63eb20ea01edb", "html_url": "https://github.com/rust-lang/rust/commit/f6e566185eaa4675cf2791ee69e63eb20ea01edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e566185eaa4675cf2791ee69e63eb20ea01edb/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c48ae6f7ffae392d85c86240c67f49df01f44fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c48ae6f7ffae392d85c86240c67f49df01f44fd", "html_url": "https://github.com/rust-lang/rust/commit/2c48ae6f7ffae392d85c86240c67f49df01f44fd"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "f4a19af02a6619ae7c5771969cc9c7498bc51fed", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f6e566185eaa4675cf2791ee69e63eb20ea01edb/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e566185eaa4675cf2791ee69e63eb20ea01edb/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=f6e566185eaa4675cf2791ee69e63eb20ea01edb", "patch": "@@ -736,3 +736,99 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n     }\n }\n \n+\n+/// A wrapper to inhibit compiler from automatically calling `T`\u2019s destructor.\n+///\n+/// This wrapper is 0-cost.\n+///\n+/// # Examples\n+///\n+/// This wrapper helps with explicitly documenting the drop order dependencies between fields of\n+/// the type:\n+///\n+/// ```rust\n+/// # #![feature(manually_drop)]\n+/// use std::mem::ManuallyDrop;\n+/// struct Peach;\n+/// struct Banana;\n+/// struct Melon;\n+/// struct FruitBox {\n+///     // Immediately clear there\u2019s something non-trivial going on with these fields.\n+///     peach: ManuallyDrop<Peach>,\n+///     melon: Melon, // Field that\u2019s independent of the other two.\n+///     banana: ManuallyDrop<Banana>,\n+/// }\n+///\n+/// impl Drop for FruitBox {\n+///     fn drop(&mut self) {\n+///         unsafe {\n+///             // Explicit ordering in which field destructors are run specified in the intuitive\n+///             // location \u2013 the destructor of the structure containing the fields.\n+///             // Moreover, one can now reorder fields within the struct however much they want.\n+///             ManuallyDrop::drop(&mut self.peach);\n+///             ManuallyDrop::drop(&mut self.banana);\n+///         }\n+///         // After destructor for `FruitBox` runs (this function), the destructor for Melon gets\n+///         // invoked in the usual manner, as it is not wrapped in `ManuallyDrop`.\n+///     }\n+/// }\n+/// ```\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+#[allow(unions_with_drop_fields)]\n+pub union ManuallyDrop<T>{ value: T }\n+\n+impl<T> ManuallyDrop<T> {\n+    /// Wrap a value to be manually dropped.\n+    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    pub fn new(value: T) -> ManuallyDrop<T> {\n+        ManuallyDrop { value: value }\n+    }\n+\n+    /// Extract the value from the ManuallyDrop container.\n+    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    pub fn into_inner(self) -> T {\n+        unsafe {\n+            self.value\n+        }\n+    }\n+\n+    /// Manually drops the contained value.\n+    ///\n+    /// # Unsafety\n+    ///\n+    /// This function runs the destructor of the contained value and thus the wrapped value\n+    /// now represents uninitialized data. It is up to the user of this method to ensure the\n+    /// uninitialized data is not actually used.\n+    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {\n+        ptr::drop_in_place(&mut slot.value)\n+    }\n+}\n+\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+impl<T> ::ops::Deref for ManuallyDrop<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            &self.value\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+impl<T> ::ops::DerefMut for ManuallyDrop<T> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        unsafe {\n+            &mut self.value\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n+    fn fmt(&self, fmt: &mut ::fmt::Formatter) -> ::fmt::Result {\n+        unsafe {\n+            fmt.debug_tuple(\"ManuallyDrop\").field(&self.value).finish()\n+        }\n+    }\n+}"}]}