{"sha": "d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "node_id": "C_kwDOAAsO6NoAKGQ1MTE5YzViOWYxZjcxMDkwZDA3OGU5NDVlYTZiNWQzOWQwOGNmZmE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-28T08:36:20Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:02Z"}, "message": "errors: implement sysroot/testing bundle loading\n\nExtend loading of Fluent bundles so that bundles can be loaded from the\nsysroot based on the language requested by the user, or using a nightly\nflag.\n\nSysroot bundles are loaded from `$sysroot/share/locale/$locale/*.ftl`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "d63f8049bf2692b7fe2d34bf9e86ec7c26af6fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63f8049bf2692b7fe2d34bf9e86ec7c26af6fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "html_url": "https://github.com/rust-lang/rust/commit/d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f91697b5035f8620df4de47057024c3539b55a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f91697b5035f8620df4de47057024c3539b55a6", "html_url": "https://github.com/rust-lang/rust/commit/7f91697b5035f8620df4de47057024c3539b55a6"}], "stats": {"total": 368, "additions": 322, "deletions": 46}, "files": [{"sha": "6940406a7665b3a2253ed15064dcff60c44dc1fb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -1238,16 +1238,6 @@ dependencies = [\n  \"miniz_oxide\",\n ]\n \n-[[package]]\n-name = \"fluent\"\n-version = \"0.16.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"61f69378194459db76abd2ce3952b790db103ceb003008d3d50d97c41ff847a7\"\n-dependencies = [\n- \"fluent-bundle\",\n- \"unic-langid\",\n-]\n-\n [[package]]\n name = \"fluent-bundle\"\n version = \"0.15.2\"\n@@ -3719,7 +3709,8 @@ version = \"0.0.0\"\n name = \"rustc_error_messages\"\n version = \"0.0.0\"\n dependencies = [\n- \"fluent\",\n+ \"fluent-bundle\",\n+ \"fluent-syntax\",\n  \"rustc_data_structures\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "7fa3c1d17b0f9b81665362fb74c2e4fcfa05c840", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -1172,10 +1172,12 @@ static DEFAULT_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n /// When `install_ice_hook` is called, this function will be called as the panic\n /// hook.\n pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+    let fallback_bundle =\n+        rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,\n+        None,\n         fallback_bundle,\n         false,\n         false,"}, {"sha": "bda44d691e56e5df8f88a1d3221e7b075faaa2e4", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -7,7 +7,8 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-fluent = \"0.16.0\"\n+fluent-bundle = \"0.15.2\"\n+fluent-syntax = \"0.11\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "15f0db49b078e6141f9dd20baffa141b15277a05", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 156, "deletions": 11, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -1,24 +1,169 @@\n+#![feature(path_try_exists)]\n+\n+use fluent_bundle::FluentResource;\n+use fluent_syntax::parser::ParserError;\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::{Decodable, Encodable};\n use rustc_span::Span;\n use std::borrow::Cow;\n-use tracing::debug;\n+use std::error::Error;\n+use std::fmt;\n+use std::fs;\n+use std::io;\n+use std::path::Path;\n+use tracing::{instrument, trace};\n \n-pub use fluent::{FluentArgs, FluentValue};\n+pub use fluent_bundle::{FluentArgs, FluentError, FluentValue};\n+pub use unic_langid::{langid, LanguageIdentifier};\n \n static FALLBACK_FLUENT_RESOURCE: &'static str = include_str!(\"../locales/en-US/diagnostics.ftl\");\n \n-pub type FluentBundle = fluent::FluentBundle<fluent::FluentResource>;\n+pub type FluentBundle = fluent_bundle::FluentBundle<FluentResource>;\n+\n+#[derive(Debug)]\n+pub enum TranslationBundleError {\n+    /// Failed to read from `.ftl` file.\n+    ReadFtl(io::Error),\n+    /// Failed to parse contents of `.ftl` file.\n+    ParseFtl(ParserError),\n+    /// Failed to add `FluentResource` to `FluentBundle`.\n+    AddResource(FluentError),\n+    /// `$sysroot/share/locale/$locale` does not exist.\n+    MissingLocale(io::Error),\n+    /// Cannot read directory entries of `$sysroot/share/locale/$locale`.\n+    ReadLocalesDir(io::Error),\n+    /// Cannot read directory entry of `$sysroot/share/locale/$locale`.\n+    ReadLocalesDirEntry(io::Error),\n+    /// `$sysroot/share/locale/$locale` is not a directory.\n+    LocaleIsNotDir,\n+}\n+\n+impl fmt::Display for TranslationBundleError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            TranslationBundleError::ReadFtl(e) => write!(f, \"could not read ftl file: {}\", e),\n+            TranslationBundleError::ParseFtl(e) => {\n+                write!(f, \"could not parse ftl file: {}\", e)\n+            }\n+            TranslationBundleError::AddResource(e) => write!(f, \"failed to add resource: {}\", e),\n+            TranslationBundleError::MissingLocale(e) => {\n+                write!(f, \"missing locale directory: {}\", e)\n+            }\n+            TranslationBundleError::ReadLocalesDir(e) => {\n+                write!(f, \"could not read locales dir: {}\", e)\n+            }\n+            TranslationBundleError::ReadLocalesDirEntry(e) => {\n+                write!(f, \"could not read locales dir entry: {}\", e)\n+            }\n+            TranslationBundleError::LocaleIsNotDir => {\n+                write!(f, \"`$sysroot/share/locales/$locale` is not a directory\")\n+            }\n+        }\n+    }\n+}\n+\n+impl Error for TranslationBundleError {\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        match self {\n+            TranslationBundleError::ReadFtl(e) => Some(e),\n+            TranslationBundleError::ParseFtl(e) => Some(e),\n+            TranslationBundleError::AddResource(e) => Some(e),\n+            TranslationBundleError::MissingLocale(e) => Some(e),\n+            TranslationBundleError::ReadLocalesDir(e) => Some(e),\n+            TranslationBundleError::ReadLocalesDirEntry(e) => Some(e),\n+            TranslationBundleError::LocaleIsNotDir => None,\n+        }\n+    }\n+}\n+\n+impl From<(FluentResource, Vec<ParserError>)> for TranslationBundleError {\n+    fn from((_, mut errs): (FluentResource, Vec<ParserError>)) -> Self {\n+        TranslationBundleError::ParseFtl(errs.pop().expect(\"failed ftl parse with no errors\"))\n+    }\n+}\n+\n+impl From<Vec<FluentError>> for TranslationBundleError {\n+    fn from(mut errs: Vec<FluentError>) -> Self {\n+        TranslationBundleError::AddResource(\n+            errs.pop().expect(\"failed adding resource to bundle with no errors\"),\n+        )\n+    }\n+}\n+\n+/// Returns Fluent bundle with the user's locale resources from\n+/// `$sysroot/share/locale/$requested_locale/*.ftl`.\n+///\n+/// If `-Z additional-ftl-path` was provided, load that resource and add it  to the bundle\n+/// (overriding any conflicting messages).\n+#[instrument(level = \"trace\")]\n+pub fn fluent_bundle(\n+    sysroot: &Path,\n+    requested_locale: Option<LanguageIdentifier>,\n+    additional_ftl_path: Option<&Path>,\n+) -> Result<Option<Lrc<FluentBundle>>, TranslationBundleError> {\n+    if requested_locale.is_none() && additional_ftl_path.is_none() {\n+        return Ok(None);\n+    }\n+\n+    // If there is only `-Z additional-ftl-path`, assume locale is \"en-US\", otherwise use user\n+    // provided locale.\n+    let locale = requested_locale.clone().unwrap_or_else(|| langid!(\"en-US\"));\n+    trace!(?locale);\n+    let mut bundle = FluentBundle::new(vec![locale]);\n+\n+    if let Some(requested_locale) = requested_locale {\n+        let mut sysroot = sysroot.to_path_buf();\n+        sysroot.push(\"share\");\n+        sysroot.push(\"locale\");\n+        sysroot.push(requested_locale.to_string());\n+        trace!(?sysroot);\n+\n+        let _ = sysroot.try_exists().map_err(TranslationBundleError::MissingLocale)?;\n+\n+        if !sysroot.is_dir() {\n+            return Err(TranslationBundleError::LocaleIsNotDir);\n+        }\n+\n+        for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n+            let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n+            let path = entry.path();\n+            trace!(?path);\n+            if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+                trace!(\"skipping\");\n+                continue;\n+            }\n+\n+            let resource_str = fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n+            let resource =\n+                FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n+            trace!(?resource);\n+            bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+        }\n+    }\n+\n+    if let Some(additional_ftl_path) = additional_ftl_path {\n+        let resource_str =\n+            fs::read_to_string(additional_ftl_path).map_err(TranslationBundleError::ReadFtl)?;\n+        let resource =\n+            FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n+        trace!(?resource);\n+        bundle.add_resource_overriding(resource);\n+    }\n+\n+    let bundle = Lrc::new(bundle);\n+    Ok(Some(bundle))\n+}\n \n-/// Return the default `FluentBundle` with standard en-US diagnostic messages.\n-pub fn fallback_fluent_bundle() -> Lrc<FluentBundle> {\n-    let fallback_resource = fluent::FluentResource::try_new(FALLBACK_FLUENT_RESOURCE.to_string())\n-        .expect(\"failed to parse ftl resource\");\n-    debug!(?fallback_resource);\n-    let mut fallback_bundle = FluentBundle::new(vec![unic_langid::langid!(\"en-US\")]);\n-    fallback_bundle.add_resource(fallback_resource).expect(\"failed to add resource to bundle\");\n+/// Return the default `FluentBundle` with standard \"en-US\" diagnostic messages.\n+#[instrument(level = \"trace\")]\n+pub fn fallback_fluent_bundle() -> Result<Lrc<FluentBundle>, TranslationBundleError> {\n+    let fallback_resource = FluentResource::try_new(FALLBACK_FLUENT_RESOURCE.to_string())\n+        .map_err(TranslationBundleError::from)?;\n+    trace!(?fallback_resource);\n+    let mut fallback_bundle = FluentBundle::new(vec![langid!(\"en-US\")]);\n+    fallback_bundle.add_resource(fallback_resource).map_err(TranslationBundleError::from)?;\n     let fallback_bundle = Lrc::new(fallback_bundle);\n-    fallback_bundle\n+    Ok(fallback_bundle)\n }\n \n /// Identifier for the Fluent message/attribute corresponding to a diagnostic message."}, {"sha": "003fd1eea3ace943dbba6f08e90a6b86be3be4fc", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -21,6 +21,7 @@ use rustc_span::SourceFile;\n /// Generates diagnostics using annotate-snippet\n pub struct AnnotateSnippetEmitterWriter {\n     source_map: Option<Lrc<SourceMap>>,\n+    fluent_bundle: Option<Lrc<FluentBundle>>,\n     fallback_bundle: Lrc<FluentBundle>,\n \n     /// If true, hides the longer explanation text\n@@ -63,7 +64,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n     }\n \n     fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n-        None\n+        self.fluent_bundle.as_ref()\n     }\n \n     fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n@@ -99,11 +100,19 @@ fn annotation_type_for_level(level: Level) -> AnnotationType {\n impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMap>>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         short_message: bool,\n         macro_backtrace: bool,\n     ) -> Self {\n-        Self { source_map, fallback_bundle, short_message, ui_testing: false, macro_backtrace }\n+        Self {\n+            source_map,\n+            fluent_bundle,\n+            fallback_bundle,\n+            short_message,\n+            ui_testing: false,\n+            macro_backtrace,\n+        }\n     }\n \n     /// Allows to modify `Self` to enable or disable the `ui_testing` flag."}, {"sha": "c8281bd37d11393ab7b04348e4c321812cb9ebef", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -59,6 +59,7 @@ impl HumanReadableErrorType {\n         self,\n         dst: Box<dyn Write + Send>,\n         source_map: Option<Lrc<SourceMap>>,\n+        bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         teach: bool,\n         terminal_width: Option<usize>,\n@@ -69,6 +70,7 @@ impl HumanReadableErrorType {\n         EmitterWriter::new(\n             dst,\n             source_map,\n+            bundle,\n             fallback_bundle,\n             short,\n             teach,\n@@ -568,7 +570,7 @@ impl Emitter for EmitterWriter {\n     }\n \n     fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n-        None\n+        self.fluent_bundle.as_ref()\n     }\n \n     fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n@@ -686,6 +688,7 @@ impl ColorConfig {\n pub struct EmitterWriter {\n     dst: Destination,\n     sm: Option<Lrc<SourceMap>>,\n+    fluent_bundle: Option<Lrc<FluentBundle>>,\n     fallback_bundle: Lrc<FluentBundle>,\n     short_message: bool,\n     teach: bool,\n@@ -706,6 +709,7 @@ impl EmitterWriter {\n     pub fn stderr(\n         color_config: ColorConfig,\n         source_map: Option<Lrc<SourceMap>>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         short_message: bool,\n         teach: bool,\n@@ -716,6 +720,7 @@ impl EmitterWriter {\n         EmitterWriter {\n             dst,\n             sm: source_map,\n+            fluent_bundle,\n             fallback_bundle,\n             short_message,\n             teach,\n@@ -728,6 +733,7 @@ impl EmitterWriter {\n     pub fn new(\n         dst: Box<dyn Write + Send>,\n         source_map: Option<Lrc<SourceMap>>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         short_message: bool,\n         teach: bool,\n@@ -738,6 +744,7 @@ impl EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n             sm: source_map,\n+            fluent_bundle,\n             fallback_bundle,\n             short_message,\n             teach,"}, {"sha": "f78490da245b25ab446e43168186c07f96618da9", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -37,6 +37,7 @@ pub struct JsonEmitter {\n     dst: Box<dyn Write + Send>,\n     registry: Option<Registry>,\n     sm: Lrc<SourceMap>,\n+    fluent_bundle: Option<Lrc<FluentBundle>>,\n     fallback_bundle: Lrc<FluentBundle>,\n     pretty: bool,\n     ui_testing: bool,\n@@ -49,6 +50,7 @@ impl JsonEmitter {\n     pub fn stderr(\n         registry: Option<Registry>,\n         source_map: Lrc<SourceMap>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n@@ -59,6 +61,7 @@ impl JsonEmitter {\n             dst: Box::new(io::BufWriter::new(io::stderr())),\n             registry,\n             sm: source_map,\n+            fluent_bundle,\n             fallback_bundle,\n             pretty,\n             ui_testing: false,\n@@ -71,6 +74,7 @@ impl JsonEmitter {\n     pub fn basic(\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         terminal_width: Option<usize>,\n         macro_backtrace: bool,\n@@ -79,6 +83,7 @@ impl JsonEmitter {\n         JsonEmitter::stderr(\n             None,\n             Lrc::new(SourceMap::new(file_path_mapping)),\n+            fluent_bundle,\n             fallback_bundle,\n             pretty,\n             json_rendered,\n@@ -91,6 +96,7 @@ impl JsonEmitter {\n         dst: Box<dyn Write + Send>,\n         registry: Option<Registry>,\n         source_map: Lrc<SourceMap>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n@@ -101,6 +107,7 @@ impl JsonEmitter {\n             dst,\n             registry,\n             sm: source_map,\n+            fluent_bundle,\n             fallback_bundle,\n             pretty,\n             ui_testing: false,\n@@ -182,7 +189,7 @@ impl Emitter for JsonEmitter {\n     }\n \n     fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n-        None\n+        self.fluent_bundle.as_ref()\n     }\n \n     fn fallback_fluent_bundle(&self) -> &Lrc<FluentBundle> {\n@@ -395,6 +402,7 @@ impl Diagnostic {\n             .new_emitter(\n                 Box::new(buf),\n                 Some(je.sm.clone()),\n+                je.fluent_bundle.clone(),\n                 je.fallback_bundle.clone(),\n                 false,\n                 je.terminal_width,"}, {"sha": "4174a85204fe503ea360bd8d72e360fed1bd909d", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -39,13 +39,15 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     rustc_span::create_default_session_globals_then(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n-        let fallback_bundle = crate::fallback_fluent_bundle();\n+        let fallback_bundle =\n+            crate::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n \n         let output = Arc::new(Mutex::new(Vec::new()));\n         let je = JsonEmitter::new(\n             Box::new(Shared { data: output.clone() }),\n             None,\n             sm,\n+            None,\n             fallback_bundle,\n             true,\n             HumanReadableErrorType::Short(ColorConfig::Never),"}, {"sha": "5db6614c14129bbfad359b4598884bdf49e913b3", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -32,7 +32,8 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n-    fallback_fluent_bundle, DiagnosticMessage, FluentBundle, MultiSpan, SpanLabel,\n+    fallback_fluent_bundle, fluent_bundle, DiagnosticMessage, FluentBundle, LanguageIdentifier,\n+    MultiSpan, SpanLabel,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_serialize::json::Json;\n@@ -544,11 +545,13 @@ impl Handler {\n         can_emit_warnings: bool,\n         treat_err_as_bug: Option<NonZeroUsize>,\n         sm: Option<Lrc<SourceMap>>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n             color_config,\n             sm,\n+            fluent_bundle,\n             fallback_bundle,\n             HandlerFlags { can_emit_warnings, treat_err_as_bug, ..Default::default() },\n         )\n@@ -557,12 +560,14 @@ impl Handler {\n     pub fn with_tty_emitter_and_flags(\n         color_config: ColorConfig,\n         sm: Option<Lrc<SourceMap>>,\n+        fluent_bundle: Option<Lrc<FluentBundle>>,\n         fallback_bundle: Lrc<FluentBundle>,\n         flags: HandlerFlags,\n     ) -> Self {\n         let emitter = Box::new(EmitterWriter::stderr(\n             color_config,\n             sm,\n+            fluent_bundle,\n             fallback_bundle,\n             false,\n             false,"}, {"sha": "406095ab5e052c55abd7331800ed25f8742c7540", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -127,7 +127,8 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n     create_default_session_if_not_set_then(|_| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+        let fallback_bundle =\n+            rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         source_map.new_source_file(Path::new(\"test.rs\").to_owned().into(), file_text.to_owned());\n \n@@ -143,6 +144,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n         let emitter = EmitterWriter::new(\n             Box::new(Shared { data: output.clone() }),\n             Some(source_map.clone()),\n+            None,\n             fallback_bundle,\n             false,\n             false,"}, {"sha": "5a447aa6237345f2e6c608666f90bf0fecc34a8f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -2856,6 +2856,7 @@ crate mod dep_tracking {\n     use crate::lint;\n     use crate::options::WasiExecModel;\n     use crate::utils::{NativeLib, NativeLibKind};\n+    use rustc_errors::LanguageIdentifier;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n     use rustc_span::RealFileName;\n@@ -2948,6 +2949,7 @@ crate mod dep_tracking {\n         LocationDetail,\n         BranchProtection,\n         OomStrategy,\n+        LanguageIdentifier,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "7303d701ae1281efe89f8fd743874da1936cf5f6", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -4,6 +4,7 @@ use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n+use rustc_errors::LanguageIdentifier;\n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n     RelocModel, RelroLevel, SplitDebuginfo, StackProtector, TargetTriple, TlsModel,\n@@ -365,6 +366,7 @@ mod desc {\n     pub const parse_string: &str = \"a string\";\n     pub const parse_opt_string: &str = parse_string;\n     pub const parse_string_push: &str = parse_string;\n+    pub const parse_opt_langid: &str = \"a language identifier\";\n     pub const parse_opt_pathbuf: &str = \"a path\";\n     pub const parse_list: &str = \"a space-separated list of strings\";\n     pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n@@ -487,6 +489,17 @@ mod parse {\n         }\n     }\n \n+    /// Parse an optional language identifier, e.g. `en-US` or `zh-CN`.\n+    crate fn parse_opt_langid(slot: &mut Option<LanguageIdentifier>, v: Option<&str>) -> bool {\n+        match v {\n+            Some(s) => {\n+                *slot = rustc_errors::LanguageIdentifier::from_str(s).ok();\n+                true\n+            }\n+            None => false,\n+        }\n+    }\n+\n     crate fn parse_opt_pathbuf(slot: &mut Option<PathBuf>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => {\n@@ -1462,6 +1475,13 @@ options! {\n         \"the directory the intermediate files are written to\"),\n     terminal_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current terminal width\"),\n+    // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n+    // alongside query results and changes to translation options can affect diagnostics - so\n+    // translation options should be tracked.\n+    translate_lang: Option<LanguageIdentifier> = (None, parse_opt_langid, [TRACKED],\n+        \"language identifier for diagnostic output\"),\n+    translate_additional_ftl: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"additional fluent translation to preferentially use (for testing translation)\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "6b99e011c452dc4ae750faf3829a71f6f3a2e6fd", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -174,13 +174,15 @@ pub struct ParseSess {\n impl ParseSess {\n     /// Used for testing.\n     pub fn new(file_path_mapping: FilePathMapping) -> Self {\n-        let fallback_bundle = fallback_fluent_bundle();\n+        let fallback_bundle =\n+            fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n         let sm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n             true,\n             None,\n             Some(sm.clone()),\n+            None,\n             fallback_bundle,\n         );\n         ParseSess::with_span_handler(handler, sm)\n@@ -211,10 +213,11 @@ impl ParseSess {\n     }\n \n     pub fn with_silent_emitter(fatal_note: Option<String>) -> Self {\n-        let fallback_bundle = fallback_fluent_bundle();\n+        let fallback_bundle =\n+            fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let fatal_handler =\n-            Handler::with_tty_emitter(ColorConfig::Auto, false, None, None, fallback_bundle);\n+            Handler::with_tty_emitter(ColorConfig::Auto, false, None, None, None, fallback_bundle);\n         let handler = Handler::with_emitter(\n             false,\n             None,"}, {"sha": "76a2c579990b7e5a0122e1909ec022b5173b7595", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -20,8 +20,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, ErrorGuaranteed,\n-    FluentBundle, MultiSpan,\n+    fallback_fluent_bundle, fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n+    ErrorGuaranteed, FluentBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -1069,6 +1069,7 @@ fn default_emitter(\n     sopts: &config::Options,\n     registry: rustc_errors::registry::Registry,\n     source_map: Lrc<SourceMap>,\n+    bundle: Option<Lrc<FluentBundle>>,\n     fallback_bundle: Lrc<FluentBundle>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n@@ -1080,6 +1081,7 @@ fn default_emitter(\n             if let HumanReadableErrorType::AnnotateSnippet(_) = kind {\n                 let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map),\n+                    bundle,\n                     fallback_bundle,\n                     short,\n                     macro_backtrace,\n@@ -1090,6 +1092,7 @@ fn default_emitter(\n                     None => EmitterWriter::stderr(\n                         color_config,\n                         Some(source_map),\n+                        bundle,\n                         fallback_bundle,\n                         short,\n                         sopts.debugging_opts.teach,\n@@ -1099,6 +1102,7 @@ fn default_emitter(\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n                         Some(source_map),\n+                        bundle,\n                         fallback_bundle,\n                         short,\n                         false, // no teach messages when writing to a buffer\n@@ -1114,6 +1118,7 @@ fn default_emitter(\n             JsonEmitter::stderr(\n                 Some(registry),\n                 source_map,\n+                bundle,\n                 fallback_bundle,\n                 pretty,\n                 json_rendered,\n@@ -1127,6 +1132,7 @@ fn default_emitter(\n                 dst,\n                 Some(registry),\n                 source_map,\n+                bundle,\n                 fallback_bundle,\n                 pretty,\n                 json_rendered,\n@@ -1198,9 +1204,15 @@ pub fn build_session(\n         hash_kind,\n     ));\n \n-    let fallback_bundle = fallback_fluent_bundle();\n+    let bundle = fluent_bundle(\n+        &sysroot,\n+        sopts.debugging_opts.translate_lang.clone(),\n+        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n+    )\n+    .expect(\"failed to load fluent bundle\");\n+    let fallback_bundle = fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n     let emitter =\n-        default_emitter(&sopts, registry, source_map.clone(), fallback_bundle.clone(), write_dest);\n+        default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n \n     let span_diagnostic = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n@@ -1433,13 +1445,14 @@ pub enum IncrCompSession {\n }\n \n fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler {\n-    let fallback_bundle = fallback_fluent_bundle();\n+    let fallback_bundle = fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n             Box::new(EmitterWriter::stderr(\n                 color_config,\n                 None,\n+                None,\n                 fallback_bundle,\n                 short,\n                 false,\n@@ -1448,7 +1461,7 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n             ))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } => {\n-            Box::new(JsonEmitter::basic(pretty, json_rendered, fallback_bundle, None, false))\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, None, fallback_bundle, None, false))\n         }\n     };\n     rustc_errors::Handler::with_emitter(true, None, emitter)"}, {"sha": "7cd799d84f074d54ca59901818687908e0914797", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -143,14 +143,16 @@ crate fn new_handler(\n     source_map: Option<Lrc<source_map::SourceMap>>,\n     debugging_opts: &DebuggingOptions,\n ) -> rustc_errors::Handler {\n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+    let fallback_bundle =\n+        rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n             Box::new(\n                 EmitterWriter::stderr(\n                     color_config,\n                     source_map.map(|sm| sm as _),\n+                    None,\n                     fallback_bundle,\n                     short,\n                     debugging_opts.teach,\n@@ -168,6 +170,7 @@ crate fn new_handler(\n                 JsonEmitter::stderr(\n                     None,\n                     source_map,\n+                    None,\n                     fallback_bundle,\n                     pretty,\n                     json_rendered,"}, {"sha": "94e3c99640052439b1de0497a7326c027292d3cc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -537,10 +537,12 @@ crate fn make_test(\n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+            let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+                .expect(\"failed to load fallback fluent bundle\");\n             supports_color = EmitterWriter::stderr(\n                 ColorConfig::Auto,\n                 None,\n+                None,\n                 fallback_bundle.clone(),\n                 false,\n                 false,\n@@ -552,6 +554,7 @@ crate fn make_test(\n             let emitter = EmitterWriter::new(\n                 box io::sink(),\n                 None,\n+                None,\n                 fallback_bundle,\n                 false,\n                 false,"}, {"sha": "01bfc522e1b7b3df920b1d29eb0904c5c231cc1d", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -32,7 +32,8 @@ struct SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n         let buffer = Lrc::new(Lock::new(Buffer::default()));\n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+        let fallback_bundle =\n+            rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n         let emitter = BufferEmitter { buffer: Lrc::clone(&buffer), fallback_bundle };\n \n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "22a3bf57ecf9679819227c61d13581420ff55dde", "filename": "src/test/run-make/translation/Makefile", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -0,0 +1,33 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+# This test uses `ln -s` rather than copying to save testing time, but its\n+# usage doesn't work on Windows.\n+# ignore-windows\n+\n+SYSROOT:=$(shell $(RUSTC) --print sysroot)\n+FAKEROOT=$(TMPDIR)/fakeroot\n+\n+all: normal custom sysroot\n+\n+normal: basic-translation.rs\n+\t$(RUSTC) $< 2>&1 | grep \"struct literal body without path\"\n+\n+custom: basic-translation.rs basic-translation.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/basic-translation.ftl 2>&1 | grep \"this is a test message\"\n+\n+# Make a local copy of the sysroot and add the custom locale to it.\n+sysroot: basic-translation.rs basic-translation.ftl\n+\tmkdir $(FAKEROOT)\n+\tln -s $(SYSROOT)/* $(FAKEROOT)\n+\trm -f $(FAKEROOT)/lib\n+\tmkdir $(FAKEROOT)/lib\n+\tln -s $(SYSROOT)/lib/* $(FAKEROOT)/lib\n+\trm -f $(FAKEROOT)/lib/rustlib\n+\tmkdir $(FAKEROOT)/lib/rustlib\n+\tln -s $(SYSROOT)/lib/rustlib/* $(FAKEROOT)/lib/rustlib\n+\trm -f $(FAKEROOT)/lib/rustlib/src\n+\tmkdir $(FAKEROOT)/lib/rustlib/src\n+\tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n+\tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n+\tln -s $(CURDIR)/basic-translation.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n+\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\""}, {"sha": "4681b879cda6a3deb25d9474a2d0efec0e9183cc", "filename": "src/test/run-make/translation/basic-translation.ftl", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftest%2Frun-make%2Ftranslation%2Fbasic-translation.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftest%2Frun-make%2Ftranslation%2Fbasic-translation.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fbasic-translation.ftl?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -0,0 +1,2 @@\n+parser-struct-literal-body-without-path = this is a test message\n+    .suggestion = this is a test suggestion"}, {"sha": "b8f5bff315337cba90a3b6a1feebf7efb90c2c03", "filename": "src/test/run-make/translation/basic-translation.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftest%2Frun-make%2Ftranslation%2Fbasic-translation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftest%2Frun-make%2Ftranslation%2Fbasic-translation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fbasic-translation.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -0,0 +1,18 @@\n+// Exact error being tested isn't relevant, it just needs to be known that it uses Fluent-backed\n+// diagnostics.\n+\n+struct Foo {\n+    val: (),\n+}\n+\n+fn foo() -> Foo {\n+    val: (),\n+}\n+\n+fn main() {\n+    let x = foo();\n+    x.val == 42;\n+    let x = {\n+        val: (),\n+    };\n+}"}, {"sha": "e08e9e499938a7f4b108022559378d82ed3c79a8", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -621,10 +621,12 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+                let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+                    .expect(\"failed to load fallback fluent bundle\");\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,\n+                    None,\n                     fallback_bundle,\n                     false,\n                     false,"}, {"sha": "f04535b2bea0b8d2bc2539bd36f30ee10c6c4089", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -165,10 +165,12 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+        .expect(\"failed to load fallback fluent bundle\");\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,\n+        None,\n         fallback_bundle,\n         false,\n         false,"}, {"sha": "6967028d55f56d8bcf98daee27e87b2cb2cd13a8", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119c5b9f1f71090d078e945ea6b5d39d08cffa/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=d5119c5b9f1f71090d078e945ea6b5d39d08cffa", "patch": "@@ -114,10 +114,12 @@ fn default_handler(\n     let emitter = if hide_parse_errors {\n         silent_emitter()\n     } else {\n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+            .expect(\"failed to load fallback fluent bundle\");\n         Box::new(EmitterWriter::stderr(\n             color_cfg,\n             Some(source_map.clone()),\n+            None,\n             fallback_bundle,\n             false,\n             false,"}]}