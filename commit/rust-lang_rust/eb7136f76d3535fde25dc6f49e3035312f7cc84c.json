{"sha": "eb7136f76d3535fde25dc6f49e3035312f7cc84c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzEzNmY3NmQzNTM1ZmRlMjVkYzZmNDllMzAzNTMxMmY3Y2M4NGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-10T21:59:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T21:59:00Z"}, "message": "Merge #5957\n\n5957: Add consuming modifier to lvalues that are passed by value and not Copy r=jonas-schievink a=Nashenas88\n\nRelated to #5856 \n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>", "tree": {"sha": "7ab3116f47e49495ac9d30c8a8d7d4fb108db8e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab3116f47e49495ac9d30c8a8d7d4fb108db8e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7136f76d3535fde25dc6f49e3035312f7cc84c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWqGkCRBK7hj4Ov3rIwAAdHIIACPSGohv7aY7LK9uTD7qStIE\nL4Ba5SqxfdmOP6QnCnUIfobKBdTCOUAEb1Ls4Xf6/Tm8MnhSIgJwRUroWVKBlRC5\nPjsDWOUGbt0EXI4zcqIvmHWlBUkQnbS/8br0MeNk2XrPxTxS7BoYL8rG/H2O1BlR\nQCeE6gCGMUR2q5Jf3/bbI0Y8ZDxLqOf2ifFiF96n6LphE1CVnhL38skZMbkWzXLD\niMzLEyzrhc6AOMwxmKGgQMR9gbcA7UNDALUC2hQXUzDabfbw0ykiEuAjO/aMaylx\nbQztd4DZQ8CfBCIF8COdG152MLorKT2xgE5Ctbmw7EAUlZEgAIfyjHzlHLsJ19E=\n=spoM\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ab3116f47e49495ac9d30c8a8d7d4fb108db8e0\nparent 868f4b57561cab3f537c9c5d0c9ad78fc4703891\nparent a1a7b07ad33b7dcadedc2af26c3a5f8ef3daca27\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1599775140 +0000\ncommitter GitHub <noreply@github.com> 1599775140 +0000\n\nMerge #5957\n\n5957: Add consuming modifier to lvalues that are passed by value and not Copy r=jonas-schievink a=Nashenas88\n\nRelated to #5856 \n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7136f76d3535fde25dc6f49e3035312f7cc84c", "html_url": "https://github.com/rust-lang/rust/commit/eb7136f76d3535fde25dc6f49e3035312f7cc84c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7136f76d3535fde25dc6f49e3035312f7cc84c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868f4b57561cab3f537c9c5d0c9ad78fc4703891", "url": "https://api.github.com/repos/rust-lang/rust/commits/868f4b57561cab3f537c9c5d0c9ad78fc4703891", "html_url": "https://github.com/rust-lang/rust/commit/868f4b57561cab3f537c9c5d0c9ad78fc4703891"}, {"sha": "a1a7b07ad33b7dcadedc2af26c3a5f8ef3daca27", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a7b07ad33b7dcadedc2af26c3a5f8ef3daca27", "html_url": "https://github.com/rust-lang/rust/commit/a1a7b07ad33b7dcadedc2af26c3a5f8ef3daca27"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "d9fc25d88bc8423eebfed1d8a8451be98e4807f9", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/eb7136f76d3535fde25dc6f49e3035312f7cc84c/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7136f76d3535fde25dc6f49e3035312f7cc84c/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=eb7136f76d3535fde25dc6f49e3035312f7cc84c", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics, VariantDef};\n+use hir::{Local, Name, Semantics, VariantDef};\n use ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -13,8 +13,8 @@ use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{self, HasFormatSpecifier},\n     AstNode, AstToken, Direction, NodeOrToken, SyntaxElement,\n-    SyntaxKind::*,\n-    TextRange, WalkEvent, T,\n+    SyntaxKind::{self, *},\n+    SyntaxNode, SyntaxToken, TextRange, WalkEvent, T,\n };\n \n use crate::FileId;\n@@ -454,6 +454,32 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n+/// Returns true if the parent nodes of `node` all match the `SyntaxKind`s in `kinds` exactly.\n+fn parents_match(mut node: NodeOrToken<SyntaxNode, SyntaxToken>, mut kinds: &[SyntaxKind]) -> bool {\n+    while let (Some(parent), [kind, rest @ ..]) = (&node.parent(), kinds) {\n+        if parent.kind() != *kind {\n+            return false;\n+        }\n+\n+        // FIXME: Would be nice to get parent out of the match, but binding by-move and by-value\n+        // in the same pattern is unstable: rust-lang/rust#68354.\n+        node = node.parent().unwrap().into();\n+        kinds = rest;\n+    }\n+\n+    // Only true if we matched all expected kinds\n+    kinds.len() == 0\n+}\n+\n+fn is_consumed_lvalue(\n+    node: NodeOrToken<SyntaxNode, SyntaxToken>,\n+    local: &Local,\n+    db: &RootDatabase,\n+) -> bool {\n+    // When lvalues are passed as arguments and they're not Copy, then mark them as Consuming.\n+    parents_match(node, &[PATH_SEGMENT, PATH, PATH_EXPR, ARG_LIST]) && !local.ty(db).is_copy(db)\n+}\n+\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -522,6 +548,12 @@ fn highlight_element(\n \n                             let mut h = highlight_def(db, def);\n \n+                            if let Definition::Local(local) = &def {\n+                                if is_consumed_lvalue(name_ref.syntax().clone().into(), local, db) {\n+                                    h |= HighlightModifier::Consuming;\n+                                }\n+                            }\n+\n                             if let Some(parent) = name_ref.syntax().parent() {\n                                 if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n                                     if let Definition::Field(field) = def {\n@@ -645,21 +677,30 @@ fn highlight_element(\n                         .and_then(ast::SelfParam::cast)\n                         .and_then(|p| p.mut_token())\n                         .is_some();\n-                    // closure to enforce lazyness\n-                    let self_path = || {\n-                        sema.resolve_path(&element.parent()?.parent().and_then(ast::Path::cast)?)\n-                    };\n+                    let self_path = &element\n+                        .parent()\n+                        .as_ref()\n+                        .and_then(SyntaxNode::parent)\n+                        .and_then(ast::Path::cast)\n+                        .and_then(|p| sema.resolve_path(&p));\n+                    let mut h = HighlightTag::SelfKeyword.into();\n                     if self_param_is_mut\n-                        || matches!(self_path(),\n+                        || matches!(self_path,\n                             Some(hir::PathResolution::Local(local))\n                                 if local.is_self(db)\n                                     && (local.is_mut(db) || local.ty(db).is_mutable_reference())\n                         )\n                     {\n-                        HighlightTag::SelfKeyword | HighlightModifier::Mutable\n-                    } else {\n-                        HighlightTag::SelfKeyword.into()\n+                        h |= HighlightModifier::Mutable\n                     }\n+\n+                    if let Some(hir::PathResolution::Local(local)) = self_path {\n+                        if is_consumed_lvalue(element, &local, db) {\n+                            h |= HighlightModifier::Consuming;\n+                        }\n+                    }\n+\n+                    h\n                 }\n                 T![ref] => element\n                     .parent()"}, {"sha": "cde42024c03defa31f4a041c34f6d01656949a7f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb7136f76d3535fde25dc6f49e3035312f7cc84c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/eb7136f76d3535fde25dc6f49e3035312f7cc84c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=eb7136f76d3535fde25dc6f49e3035312f7cc84c", "patch": "@@ -61,8 +61,8 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">Foo</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword consuming\">self</span><span class=\"punctuation\">)</span>\n     <span class=\"punctuation\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n@@ -80,8 +80,8 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">FooCopy</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"punctuation\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span>\n     <span class=\"punctuation\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n@@ -144,14 +144,15 @@\n     <span class=\"variable\">y</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">clone</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"variable consuming\">foo2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"punctuation\">.</span><span class=\"function\">baz</span><span class=\"punctuation\">(</span><span class=\"variable mutable\">copy</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>"}, {"sha": "57d4e1252d28ca99a331024340ec099cf9e7fb36", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb7136f76d3535fde25dc6f49e3035312f7cc84c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7136f76d3535fde25dc6f49e3035312f7cc84c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=eb7136f76d3535fde25dc6f49e3035312f7cc84c", "patch": "@@ -35,8 +35,8 @@ impl Bar for Foo {\n }\n \n impl Foo {\n-    fn baz(mut self) -> i32 {\n-        self.x\n+    fn baz(mut self, f: Foo) -> i32 {\n+        f.baz(self)\n     }\n \n     fn qux(&mut self) {\n@@ -54,8 +54,8 @@ struct FooCopy {\n }\n \n impl FooCopy {\n-    fn baz(self) -> u32 {\n-        self.x\n+    fn baz(self, f: FooCopy) -> u32 {\n+        f.baz(self)\n     }\n \n     fn qux(&mut self) {\n@@ -118,14 +118,15 @@ fn main() {\n     y;\n \n     let mut foo = Foo { x, y: x };\n+    let foo2 = foo.clone();\n     foo.quop();\n     foo.qux();\n-    foo.baz();\n+    foo.baz(foo2);\n \n     let mut copy = FooCopy { x };\n     copy.quop();\n     copy.qux();\n-    copy.baz();\n+    copy.baz(copy);\n }\n \n enum Option<T> {"}]}