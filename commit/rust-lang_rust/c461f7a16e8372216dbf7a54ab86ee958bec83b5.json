{"sha": "c461f7a16e8372216dbf7a54ab86ee958bec83b5", "node_id": "C_kwDOAAsO6NoAKGM0NjFmN2ExNmU4MzcyMjE2ZGJmN2E1NGFiODZlZTk1OGJlYzgzYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T07:38:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T07:38:08Z"}, "message": "Auto merge of #98841 - Kobzol:hir-validator-bitset, r=cjgillot\n\nUse a bitset instead of a hash map in HIR ID validator\n\nThe hashset insertion was slightly hot in incr patched runs, but it seems unnecessary to use a hashset here, as it just checks that a dense set of N integers was seen.\n\nI'm not sure if it's possible to know the amount of items beforehand to preallocate the bitset? I suppose not.", "tree": {"sha": "d0ac9ca1113c0ddf0ae3dcd6f811dc83e102535b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ac9ca1113c0ddf0ae3dcd6f811dc83e102535b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c461f7a16e8372216dbf7a54ab86ee958bec83b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c461f7a16e8372216dbf7a54ab86ee958bec83b5", "html_url": "https://github.com/rust-lang/rust/commit/c461f7a16e8372216dbf7a54ab86ee958bec83b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c461f7a16e8372216dbf7a54ab86ee958bec83b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78e747f53c36e53ff99c94438d2efa26830fc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78e747f53c36e53ff99c94438d2efa26830fc4b", "html_url": "https://github.com/rust-lang/rust/commit/e78e747f53c36e53ff99c94438d2efa26830fc4b"}, {"sha": "928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "url": "https://api.github.com/repos/rust-lang/rust/commits/928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "html_url": "https://github.com/rust-lang/rust/commit/928c17203a4d6ca9c119787c7ebfd3d2a487eeab"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "5b664e19c18c0f23b3c33250ae3d20b88450015d", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c461f7a16e8372216dbf7a54ab86ee958bec83b5/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461f7a16e8372216dbf7a54ab86ee958bec83b5/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=c461f7a16e8372216dbf7a54ab86ee958bec83b5", "patch": "@@ -1546,6 +1546,16 @@ impl<T: Idx> GrowableBitSet<T> {\n         let (word_index, mask) = word_index_and_mask(elem);\n         self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)\n     }\n+\n+    #[inline]\n+    pub fn iter(&self) -> BitIter<'_, T> {\n+        self.bit_set.iter()\n+    }\n+\n+    #[inline]\n+    pub fn len(&self) -> usize {\n+        self.bit_set.count()\n+    }\n }\n \n impl<T: Idx> From<BitSet<T>> for GrowableBitSet<T> {"}, {"sha": "550c062f4de0a8da721f69b64e569de727bb4695", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c461f7a16e8372216dbf7a54ab86ee958bec83b5/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461f7a16e8372216dbf7a54ab86ee958bec83b5/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=c461f7a16e8372216dbf7a54ab86ee958bec83b5", "patch": "@@ -1,9 +1,9 @@\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, ItemLocalId};\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n@@ -15,32 +15,35 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n         crate::hir_stats::print_hir_stats(tcx);\n     }\n \n-    let errors = Lock::new(Vec::new());\n-    let hir_map = tcx.hir();\n+    #[cfg(debug_assertions)]\n+    {\n+        let errors = Lock::new(Vec::new());\n+        let hir_map = tcx.hir();\n \n-    hir_map.par_for_each_module(|module_id| {\n-        let mut v = HirIdValidator {\n-            hir_map,\n-            owner: None,\n-            hir_ids_seen: Default::default(),\n-            errors: &errors,\n-        };\n+        hir_map.par_for_each_module(|module_id| {\n+            let mut v = HirIdValidator {\n+                hir_map,\n+                owner: None,\n+                hir_ids_seen: Default::default(),\n+                errors: &errors,\n+            };\n \n-        tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n-    });\n+            tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n+        });\n \n-    let errors = errors.into_inner();\n+        let errors = errors.into_inner();\n \n-    if !errors.is_empty() {\n-        let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-        tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+        if !errors.is_empty() {\n+            let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n+            tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+        }\n     }\n }\n \n struct HirIdValidator<'a, 'hir> {\n     hir_map: Map<'hir>,\n     owner: Option<LocalDefId>,\n-    hir_ids_seen: FxHashSet<ItemLocalId>,\n+    hir_ids_seen: GrowableBitSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n@@ -80,7 +83,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n             let missing: Vec<_> = (0..=max as u32)\n-                .filter(|&i| !self.hir_ids_seen.contains(&ItemLocalId::from_u32(i)))\n+                .filter(|&i| !self.hir_ids_seen.contains(ItemLocalId::from_u32(i)))\n                 .collect();\n \n             // Try to map those to something more useful\n@@ -106,7 +109,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                     missing_items,\n                     self.hir_ids_seen\n                         .iter()\n-                        .map(|&local_id| HirId { owner, local_id })\n+                        .map(|local_id| HirId { owner, local_id })\n                         .map(|h| format!(\"({:?} {})\", h, self.hir_map.node_to_string(h)))\n                         .collect::<Vec<_>>()\n                 )"}]}