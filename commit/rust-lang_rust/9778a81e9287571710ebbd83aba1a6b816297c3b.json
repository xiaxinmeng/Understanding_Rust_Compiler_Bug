{"sha": "9778a81e9287571710ebbd83aba1a6b816297c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzhhODFlOTI4NzU3MTcxMGViYmQ4M2FiYTFhNmI4MTYyOTdjM2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-20T01:10:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:04Z"}, "message": "Improve macros with reduced repetition", "tree": {"sha": "2f0cd2b234b9f22941436ecf45683f1c4b2ccded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f0cd2b234b9f22941436ecf45683f1c4b2ccded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9778a81e9287571710ebbd83aba1a6b816297c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9778a81e9287571710ebbd83aba1a6b816297c3b", "html_url": "https://github.com/rust-lang/rust/commit/9778a81e9287571710ebbd83aba1a6b816297c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9778a81e9287571710ebbd83aba1a6b816297c3b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7476ba4c8aa5b23dde757778bdd153c1bbc869a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7476ba4c8aa5b23dde757778bdd153c1bbc869a4", "html_url": "https://github.com/rust-lang/rust/commit/7476ba4c8aa5b23dde757778bdd153c1bbc869a4"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "c7deb30dd3f5cf76e77232208a7157caa51dc9e3", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9778a81e9287571710ebbd83aba1a6b816297c3b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9778a81e9287571710ebbd83aba1a6b816297c3b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=9778a81e9287571710ebbd83aba1a6b816297c3b", "patch": "@@ -273,7 +273,7 @@ impl<'tcx> Constructor<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub enum Usefulness<'tcx> {\n     Useful,\n     UsefulWithWitness(Vec<Witness<'tcx>>),\n@@ -468,13 +468,18 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         }\n         ty::TyInt(int_ty) if exhaustive_integer_patterns => {\n             use syntax::ast::IntTy::*;\n+            macro_rules! min_max_ty {\n+                ($ity:ident, $uty:ty, $sty:expr) => {\n+                    ($ity::MIN as $uty as u128, $ity::MAX as $uty as u128, $sty)\n+                }\n+            }\n             let (min, max, ty) = match int_ty {\n-                Isize => (isize::MIN as usize as u128, isize::MAX as usize as u128, cx.tcx.types.isize),\n-                I8    => (   i8::MIN as u8 as u128,    i8::MAX as u8 as u128, cx.tcx.types.i8),\n-                I16   => (  i16::MIN as u16 as u128,   i16::MAX as u16 as u128, cx.tcx.types.i16),\n-                I32   => (  i32::MIN as u32 as u128,   i32::MAX as u32 as u128, cx.tcx.types.i32),\n-                I64   => (  i64::MIN as u64 as u128,   i64::MAX as u64 as u128, cx.tcx.types.i64),\n-                I128  => ( i128::MIN as u128 as u128,  i128::MAX as u128 as u128, cx.tcx.types.i128),\n+                Isize => min_max_ty!(isize, usize, cx.tcx.types.isize),\n+                I8    => min_max_ty!(i8, u8, cx.tcx.types.i8),\n+                I16   => min_max_ty!(i16, u16, cx.tcx.types.i16),\n+                I32   => min_max_ty!(i32, u32, cx.tcx.types.i32),\n+                I64   => min_max_ty!(i64, u64, cx.tcx.types.i64),\n+                I128  => min_max_ty!(i128, u128, cx.tcx.types.i128),\n             };\n             value_constructors = true;\n             vec![ConstantRange(ty::Const::from_bits(cx.tcx, min, ty),\n@@ -653,8 +658,8 @@ impl<'tcx> Interval<'tcx> {\n         match ty.sty {\n             ty::TyInt(int_ty) => {\n                 macro_rules! offset_sign_for_ty {\n-                    ($ity:ty, $uty:ty, $min:expr) => {{\n-                        let min = Wrapping($min as $uty);\n+                    ($ity:ident, $uty:ty) => {{\n+                        let min = Wrapping($ity::MIN as $uty);\n                         if forwards {\n                             ((Wrapping(lo as $uty) + min).0 as u128,\n                              (Wrapping(hi as $uty) + min).0 as u128)\n@@ -665,12 +670,12 @@ impl<'tcx> Interval<'tcx> {\n                     }}\n                 }\n                 match int_ty {\n-                    Isize => offset_sign_for_ty!(isize, usize, isize::MIN),\n-                    I8    => offset_sign_for_ty!(i8, u8, i8::MIN),\n-                    I16   => offset_sign_for_ty!(i16, u16, i16::MIN),\n-                    I32   => offset_sign_for_ty!(i32, u32, i32::MIN),\n-                    I64   => offset_sign_for_ty!(i64, u64, i64::MIN),\n-                    I128  => offset_sign_for_ty!(i128, u128, i128::MIN),\n+                    Isize => offset_sign_for_ty!(isize, usize),\n+                    I8    => offset_sign_for_ty!(i8, u8),\n+                    I16   => offset_sign_for_ty!(i16, u16),\n+                    I32   => offset_sign_for_ty!(i32, u32),\n+                    I64   => offset_sign_for_ty!(i64, u64),\n+                    I128  => offset_sign_for_ty!(i128, u128),\n                 }\n             }\n             ty::TyUint(_) | ty::TyChar => {"}]}