{"sha": "01fa283d6feac5838317d0b16e4dda8dff3e4826", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZmEyODNkNmZlYWM1ODM4MzE3ZDBiMTZlNGRkYThkZmYzZTQ4MjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-07T17:14:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: remove fmt::{Debug,Display} from ty::TyKind.", "tree": {"sha": "d52822c83d1e794ea956519204278372cfbcc125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52822c83d1e794ea956519204278372cfbcc125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01fa283d6feac5838317d0b16e4dda8dff3e4826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01fa283d6feac5838317d0b16e4dda8dff3e4826", "html_url": "https://github.com/rust-lang/rust/commit/01fa283d6feac5838317d0b16e4dda8dff3e4826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01fa283d6feac5838317d0b16e4dda8dff3e4826/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b3ab4018b41c42ce29c265fb8c06b13ac90b355", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3ab4018b41c42ce29c265fb8c06b13ac90b355", "html_url": "https://github.com/rust-lang/rust/commit/0b3ab4018b41c42ce29c265fb8c06b13ac90b355"}], "stats": {"total": 144, "additions": 73, "deletions": 71}, "files": [{"sha": "ea1c9d8141611ce3276e752a57cf7b57b46a21df", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -786,7 +786,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // FnMut          | copied -> &'env mut  | upvar -> &'env mut -> &'up bk\n         // FnOnce         | copied               | upvar -> &'up bk\n \n-        let kind = match self.node_ty(fn_hir_id)?.sty {\n+        let ty = self.node_ty(fn_hir_id)?;\n+        let kind = match ty.sty {\n             ty::Generator(..) => ty::ClosureKind::FnOnce,\n             ty::Closure(closure_def_id, closure_substs) => {\n                 match self.infcx {\n@@ -803,7 +804,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                                 .closure_kind(closure_def_id, self.tcx.global_tcx()),\n                 }\n             }\n-            ref t => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", t),\n+            _ => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", ty),\n         };\n \n         let closure_expr_def_id = self.tcx.hir().local_def_id(fn_node_id);\n@@ -1064,7 +1065,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 let bk = ty::BorrowKind::from_mutbl(mutbl);\n                 BorrowedPtr(bk, r)\n             }\n-            ref ty => bug!(\"unexpected type in cat_deref: {:?}\", ty)\n+            _ => bug!(\"unexpected type in cat_deref: {:?}\", base_cmt.ty)\n         };\n         let ret = cmt_ {\n             hir_id: node.hir_id(),\n@@ -1279,11 +1280,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         self.tcx.adt_def(enum_def).variant_with_id(def_id).fields.len())\n                     }\n                     Def::StructCtor(_, CtorKind::Fn) | Def::SelfCtor(..) => {\n-                        match self.pat_ty_unadjusted(&pat)?.sty {\n+                        let ty = self.pat_ty_unadjusted(&pat)?;\n+                        match ty.sty {\n                             ty::Adt(adt_def, _) => {\n                                 (cmt, adt_def.non_enum_variant().fields.len())\n                             }\n-                            ref ty => {\n+                            _ => {\n                                 span_bug!(pat.span,\n                                           \"tuple struct pattern unexpected type {:?}\", ty);\n                             }\n@@ -1334,9 +1336,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n             PatKind::Tuple(ref subpats, ddpos) => {\n                 // (p1, ..., pN)\n-                let expected_len = match self.pat_ty_unadjusted(&pat)?.sty {\n+                let ty = self.pat_ty_unadjusted(&pat)?;\n+                let expected_len = match ty.sty {\n                     ty::Tuple(ref tys) => tys.len(),\n-                    ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n+                    _ => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n                 };\n                 for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n                     let subpat_ty = self.pat_ty_adjusted(&subpat)?; // see (*2)"}, {"sha": "0dd076481c88774908165e57608c3ea8e5f71b91", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -854,10 +854,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     _ => vec![ArgKind::empty()],\n                 };\n \n-                let expected = match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n+                let expected_ty = expected_trait_ref.skip_binder().substs.type_at(1);\n+                let expected = match expected_ty.sty {\n                     ty::Tuple(ref tys) => tys.iter()\n                         .map(|t| ArgKind::from_expected_ty(t, Some(span))).collect(),\n-                    ref sty => vec![ArgKind::Arg(\"_\".to_owned(), sty.to_string())],\n+                    _ => vec![ArgKind::Arg(\"_\".to_owned(), expected_ty.to_string())],\n                 };\n \n                 if found.len() == expected.len() {\n@@ -1686,10 +1687,10 @@ impl ArgKind {\n             ty::Tuple(ref tys) => ArgKind::Tuple(\n                 span,\n                 tys.iter()\n-                   .map(|ty| (\"_\".to_owned(), ty.sty.to_string()))\n+                   .map(|ty| (\"_\".to_owned(), ty.to_string()))\n                    .collect::<Vec<_>>()\n             ),\n-            _ => ArgKind::Arg(\"_\".to_owned(), t.sty.to_string()),\n+            _ => ArgKind::Arg(\"_\".to_owned(), t.to_string()),\n         }\n     }\n }"}, {"sha": "b245d90379996951f6775dcac6ff099f77ebf859", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -351,10 +351,8 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n     where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n {\n     let tcx = relation.tcx();\n-    let a_sty = &a.sty;\n-    let b_sty = &b.sty;\n-    debug!(\"super_relate_tys: a_sty={:?} b_sty={:?}\", a_sty, b_sty);\n-    match (a_sty, b_sty) {\n+    debug!(\"super_relate_tys: a={:?} b={:?}\", a, b);\n+    match (&a.sty, &b.sty) {\n         (&ty::Infer(_), _) |\n         (_, &ty::Infer(_)) =>\n         {"}, {"sha": "20acbb5b9c7122d37517bf21db7e1bcadeb66faf", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -84,7 +84,7 @@ impl BoundRegion {\n \n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `libsyntax/ast.rs` as well.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n          RustcEncodable, RustcDecodable, HashStable)]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n@@ -383,9 +383,10 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     ///\n     /// If you have an inference context, use `infcx.closure_sig()`.\n     pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n-        match self.closure_sig_ty(def_id, tcx).sty {\n+        let ty = self.closure_sig_ty(def_id, tcx);\n+        match ty.sty {\n             ty::FnPtr(sig) => sig,\n-            ref t => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", t),\n+            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty),\n         }\n     }\n }"}, {"sha": "7f41947fbb929186cb1fdb7150fefd62ecad8cda", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -1124,9 +1124,9 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) ty::TyKind<'tcx>, (self, f, cx) {\n+    ('tcx) ty::TyS<'tcx>, (self, f, cx) {\n         display {\n-            match *self {\n+            match self.sty {\n                 Bool => write!(f, \"bool\"),\n                 Char => write!(f, \"char\"),\n                 Int(t) => write!(f, \"{}\", t.ty_to_string()),\n@@ -1376,16 +1376,8 @@ define_print! {\n                 }\n             }\n         }\n-    }\n-}\n-\n-define_print! {\n-    ('tcx) ty::TyS<'tcx>, (self, f, cx) {\n-        display {\n-            self.sty.print(f, cx)\n-        }\n         debug {\n-            self.sty.print_display(f, cx)\n+            self.print_display(f, cx)\n         }\n     }\n }"}, {"sha": "12edb3a090712b471a09d883662c924bb84697b9", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -513,8 +513,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n             },\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n-                let sty = &arg_tys[0].sty;\n-                match float_type_width(sty) {\n+                match float_type_width(arg_tys[0]) {\n                     Some(_width) =>\n                         match name {\n                             \"fadd_fast\" => self.fadd_fast(args[0].immediate(), args[1].immediate()),\n@@ -528,7 +527,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         span_invalid_monomorphization_error(\n                             tcx.sess, span,\n                             &format!(\"invalid monomorphization of `{}` intrinsic: \\\n-                                      expected basic float type, found `{}`\", name, sty));\n+                                      expected basic float type, found `{}`\", name, arg_tys[0]));\n                         return;\n                     }\n                 }\n@@ -1473,8 +1472,8 @@ fn generic_simd_intrinsic(\n                 require!(false, \"expected element type `{}` of second argument `{}` \\\n                                  to be a pointer to the element type `{}` of the first \\\n                                  argument `{}`, found `{}` != `*_ {}`\",\n-                         arg_tys[1].simd_type(tcx).sty, arg_tys[1], in_elem, in_ty,\n-                         arg_tys[1].simd_type(tcx).sty, in_elem);\n+                         arg_tys[1].simd_type(tcx), arg_tys[1], in_elem, in_ty,\n+                         arg_tys[1].simd_type(tcx), in_elem);\n                 unreachable!();\n             }\n         };\n@@ -1488,7 +1487,7 @@ fn generic_simd_intrinsic(\n             _ => {\n                 require!(false, \"expected element type `{}` of third argument `{}` \\\n                                  to be a signed integer type\",\n-                         arg_tys[2].simd_type(tcx).sty, arg_tys[2]);\n+                         arg_tys[2].simd_type(tcx), arg_tys[2]);\n             }\n         }\n \n@@ -1573,8 +1572,8 @@ fn generic_simd_intrinsic(\n                 require!(false, \"expected element type `{}` of second argument `{}` \\\n                                  to be a pointer to the element type `{}` of the first \\\n                                  argument `{}`, found `{}` != `*mut {}`\",\n-                         arg_tys[1].simd_type(tcx).sty, arg_tys[1], in_elem, in_ty,\n-                         arg_tys[1].simd_type(tcx).sty, in_elem);\n+                         arg_tys[1].simd_type(tcx), arg_tys[1], in_elem, in_ty,\n+                         arg_tys[1].simd_type(tcx), in_elem);\n                 unreachable!();\n             }\n         };\n@@ -1588,7 +1587,7 @@ fn generic_simd_intrinsic(\n             _ => {\n                 require!(false, \"expected element type `{}` of third argument `{}` \\\n                                  to be a signed integer type\",\n-                         arg_tys[2].simd_type(tcx).sty, arg_tys[2]);\n+                         arg_tys[2].simd_type(tcx), arg_tys[2]);\n             }\n         }\n \n@@ -1954,10 +1953,10 @@ fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, boo\n     }\n }\n \n-// Returns the width of a float TypeVariant\n+// Returns the width of a float Ty\n // Returns None if the type is not a float\n-fn float_type_width<'tcx>(sty: &ty::TyKind<'tcx>) -> Option<u64> {\n-    match *sty {\n+fn float_type_width(ty: Ty) -> Option<u64> {\n+    match ty.sty {\n         ty::Float(t) => Some(t.bit_width() as u64),\n         _ => None,\n     }"}, {"sha": "2bb68dc687ca9c849661450dabc8eb91eba5e215", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let field_ty = c.ty.builtin_index().unwrap();\n                 let fields = match c.ty.sty {\n                     ty::Array(_, n) => n.unwrap_usize(bx.tcx()),\n-                    ref other => bug!(\"invalid simd shuffle type: {}\", other),\n+                    _ => bug!(\"invalid simd shuffle type: {}\", c.ty),\n                 };\n                 let values: Vec<_> = (0..fields).map(|field| {\n                     let field = const_field("}, {"sha": "fe00276a55a45f25ae7064ea417f45f7cc7d071b", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -148,7 +148,7 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n         match tail.sty {\n             ty::Foreign(..) => false,\n             ty::Str | ty::Slice(..) | ty::Dynamic(..) => true,\n-            _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n+            _ => bug!(\"unexpected unsized tail: {:?}\", tail),\n         }\n     }\n }"}, {"sha": "aa3750946d366cf879d9f66f1b90c40acd04f9c2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -1799,7 +1799,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     // (https://github.com/rust-lang/rfcs/pull/1546)\n                     bug!(\n                         \"End-user description not implemented for field access on `{:?}`\",\n-                        ty.sty\n+                        ty\n                     );\n                 }\n             }"}, {"sha": "c8c6d73d4536a4267b2537f990a55c867ec248d3", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -955,7 +955,8 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_provided_types = cx.tables.user_provided_types();\n             let user_provided_type = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n             debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n-            match cx.tables().node_type(expr.hir_id).sty {\n+            let ty = cx.tables().node_type(expr.hir_id);\n+            match ty.sty {\n                 // A unit struct/variant which is used as a value.\n                 // We return a completely different ExprKind here to account for this special case.\n                 ty::Adt(adt_def, substs) => {\n@@ -968,7 +969,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         base: None,\n                     }\n                 }\n-                ref sty => bug!(\"unexpected sty: {:?}\", sty),\n+                _ => bug!(\"unexpected ty: {:?}\", ty),\n             }\n         }\n "}, {"sha": "8aa4fdedc18e2a89cb2dae6ec066c0af58c03c49", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -529,11 +529,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     ty::Error => { // Avoid ICE\n                         return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n                     }\n-                    ref sty =>\n+                    _ =>\n                         span_bug!(\n                             pat.span,\n                             \"unexpanded type for vector pattern: {:?}\",\n-                            sty),\n+                            ty),\n                 }\n             }\n \n@@ -554,7 +554,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     ty::Error => { // Avoid ICE (#50577)\n                         return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n                     }\n-                    ref sty => span_bug!(pat.span, \"unexpected type for tuple pattern: {:?}\", sty),\n+                    _ => span_bug!(pat.span, \"unexpected type for tuple pattern: {:?}\", ty),\n                 }\n             }\n \n@@ -608,7 +608,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     }\n                     _ => span_bug!(pat.span,\n                                    \"tuple struct pattern not applied to an ADT {:?}\",\n-                                   ty.sty),\n+                                   ty),\n                 };\n                 let variant_def = adt_def.variant_of_def(def);\n \n@@ -744,7 +744,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         ty::Error => {  // Avoid ICE (#50585)\n                             return PatternKind::Wild;\n                         }\n-                        _ => bug!(\"inappropriate type for def: {:?}\", ty.sty),\n+                        _ => bug!(\"inappropriate type for def: {:?}\", ty),\n                     };\n                     PatternKind::Variant {\n                         adt_def,"}, {"sha": "c9dae6990795be5276853a93cb49bfff621cb810", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -16,16 +16,20 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         let user_provided_types = self.tables().user_provided_types();\n         let mut user_ty = *user_provided_types.get(hir_id)?;\n         debug!(\"user_subts_applied_to_ty_of_hir_id: user_ty={:?}\", user_ty);\n-        match &self.tables().node_type(hir_id).sty {\n+        let ty = self.tables().node_type(hir_id);\n+        match ty.sty {\n             ty::Adt(adt_def, ..) => {\n                 if let UserType::TypeOf(ref mut did, _) = &mut user_ty.value {\n                     *did = adt_def.did;\n                 }\n                 Some(user_ty)\n             }\n             ty::FnDef(..) => Some(user_ty),\n-            sty =>\n-                bug!(\"sty: {:?} should not have user provided type {:?} recorded \", sty, user_ty),\n+            _ => bug!(\n+                \"ty: {:?} should not have user provided type {:?} recorded \",\n+                ty,\n+                user_ty\n+            ),\n         }\n     }\n }"}, {"sha": "7543dd678d032fdd9a3f730ea0845ae4708a52e4", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         let fn_ptr = self.memory.create_fn_alloc(instance?).with_default_tag();\n                         self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n                     }\n-                    ref other => bug!(\"reify fn pointer on {:?}\", other),\n+                    _ => bug!(\"reify fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n \n@@ -101,7 +101,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         // No change to value\n                         self.write_immediate(*src, dest)?;\n                     }\n-                    ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n+                    _ => bug!(\"fn to unsafe fn cast on {:?}\", dest.layout.ty),\n                 }\n             }\n \n@@ -120,7 +120,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         let val = Immediate::Scalar(Scalar::Ptr(fn_ptr.into()).into());\n                         self.write_immediate(val, dest)?;\n                     }\n-                    ref other => bug!(\"closure fn pointer on {:?}\", other),\n+                    _ => bug!(\"closure fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n         }"}, {"sha": "944e393d296fc9e172d3205d660c21e4475b1988", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -336,7 +336,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n \n         let layout = val.layout;\n         let val = val.to_scalar()?;\n-        trace!(\"Running unary op {:?}: {:?} ({:?})\", un_op, val, layout.ty.sty);\n+        trace!(\"Running unary op {:?}: {:?} ({:?})\", un_op, val, layout.ty);\n \n         match layout.ty.sty {\n             ty::Bool => {"}, {"sha": "755bbd96b02f9131b1d75b2e8020bb643c1f265d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -354,7 +354,7 @@ where\n             ty::Ref(_, _, mutbl) => Some(mutbl),\n             ty::Adt(def, _) if def.is_box() => Some(hir::MutMutable),\n             ty::RawPtr(_) => None,\n-            _ => bug!(\"Unexpected pointer type {}\", val.layout.ty.sty),\n+            _ => bug!(\"Unexpected pointer type {}\", val.layout.ty),\n         };\n         place.mplace.ptr = M::tag_dereference(self, place, mutbl)?;\n         Ok(place)"}, {"sha": "bfdf34f3e37e49a5c938bb184004a0e74992d568", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -836,7 +836,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             match tail.sty {\n                 ty::Foreign(..) => false,\n                 ty::Str | ty::Slice(..) | ty::Dynamic(..) => true,\n-                _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n+                _ => bug!(\"unexpected unsized tail: {:?}\", tail),\n             }\n         };\n         if type_has_metadata(inner_source) {"}, {"sha": "fd09ce7f689b5f52c2aeb461c7e9344848ba2ebf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -959,7 +959,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     /// removing the dummy `Self` type (`TRAIT_OBJECT_DUMMY_SELF`).\n     fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n                                 -> ty::ExistentialTraitRef<'tcx> {\n-        assert_eq!(trait_ref.self_ty().sty, TRAIT_OBJECT_DUMMY_SELF);\n+        if trait_ref.self_ty().sty != TRAIT_OBJECT_DUMMY_SELF {\n+            bug!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", trait_ref);\n+        }\n         ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n     }\n "}, {"sha": "342a214e0cc229d9e1d9652eaaa3a8e20d6288e6", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // See the examples in `run-pass/match-defbm*.rs`.\n             let mut pat_adjustments = vec![];\n             while let ty::Ref(_, inner_ty, inner_mutability) = exp_ty.sty {\n-                debug!(\"inspecting {:?} with type {:?}\", exp_ty, exp_ty.sty);\n+                debug!(\"inspecting {:?}\", exp_ty);\n \n                 debug!(\"current discriminant is Ref, inserting implicit deref\");\n                 // Preserve the reference type. We'll need it later during HAIR lowering.\n@@ -894,7 +894,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 subpats.len() < variant.fields.len() && ddpos.is_some() {\n             let substs = match pat_ty.sty {\n                 ty::Adt(_, substs) => substs,\n-                ref ty => bug!(\"unexpected pattern type {:?}\", ty),\n+                _ => bug!(\"unexpected pattern type {:?}\", pat_ty),\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(variant.fields.len(), ddpos) {\n                 let field_ty = self.field_ty(subpat.span, &variant.fields[i], substs);"}, {"sha": "c40bdae0762a96b29ae3d1f3a8f9a91671f91ce4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -3885,7 +3885,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::Adt(adt, substs) => {\n                         Some((adt.variant_of_def(def), adt.did, substs))\n                     }\n-                    _ => bug!(\"unexpected type: {:?}\", ty.sty)\n+                    _ => bug!(\"unexpected type: {:?}\", ty)\n                 }\n             }\n             Def::Struct(..) | Def::Union(..) | Def::TyAlias(..) |\n@@ -5226,8 +5226,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.node);\n                 let sp = ty.span;\n                 let ty = AstConv::ast_ty_to_ty(self, ty);\n-                debug!(\"suggest_missing_return_type: return type sty {:?}\", ty.sty);\n-                debug!(\"suggest_missing_return_type: expected type sty {:?}\", ty.sty);\n+                debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n+                debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n                 if ty.sty == expected.sty {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\",\n                                                expected));"}, {"sha": "a76dfdd69ba9797304da44193f7093b797910962", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -93,19 +93,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n \n         // Extract the type of the closure.\n-        let (closure_def_id, substs) = match self.node_ty(closure_hir_id).sty {\n+        let ty = self.node_ty(closure_hir_id);\n+        let (closure_def_id, substs) = match ty.sty {\n             ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n             ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n             ty::Error => {\n                 // #51714: skip analysis when we have already encountered type errors\n                 return;\n             }\n-            ref t => {\n+            _ => {\n                 span_bug!(\n                     span,\n                     \"type of closure expr {:?} is not a closure {:?}\",\n                     closure_hir_id,\n-                    t\n+                    ty\n                 );\n             }\n         };"}, {"sha": "92c44e24998e5de692a8d7fb7a0b8e51ba7e116e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -618,7 +618,7 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n     span: Span,\n     ty: Ty<'tcx>,\n ) -> Vec<ty::Predicate<'tcx>> {\n-    trace!(\"check_existential_types: {:?}, {:?}\", ty, ty.sty);\n+    trace!(\"check_existential_types: {:?}\", ty);\n     let mut substituted_predicates = Vec::new();\n     ty.fold_with(&mut ty::fold::BottomUpFolder {\n         tcx: fcx.tcx,"}, {"sha": "4a3d4f31a24731eed44d220ea783e4adb3f47ed6", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01fa283d6feac5838317d0b16e4dda8dff3e4826/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=01fa283d6feac5838317d0b16e4dda8dff3e4826", "patch": "@@ -472,7 +472,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 instantiated_ty.fold_with(&mut BottomUpFolder {\n                     tcx: self.tcx().global_tcx(),\n                     fldop: |ty| {\n-                        trace!(\"checking type {:?}: {:#?}\", ty, ty.sty);\n+                        trace!(\"checking type {:?}\", ty);\n                         // find a type parameter\n                         if let ty::Param(..) = ty.sty {\n                             // look it up in the substitution list"}]}