{"sha": "057eab7ae96ee491f8939e52722b6c29ce3cc445", "node_id": "C_kwDOAAsO6NoAKDA1N2VhYjdhZTk2ZWU0OTFmODkzOWU1MjcyMmI2YzI5Y2UzY2M0NDU", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-05-07T03:42:36Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-19T20:54:31Z"}, "message": "Make \"Assemble stage1 compiler\" orders of magnitude faster\n\nThis used to take upwards of 5 seconds for me locally. I found that the\nculprit was copying the downloaded LLVM shared object:\n```\n[22:28:03] Install \"/home/jnelson/rust-lang/rust/build/x86_64-unknown-linux-gnu/ci-llvm/lib/libLLVM-14-rust-1.62.0-nightly.so\" to \"/home/jnelson/rust-lang/rust/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libLLVM-14-rust-1.62.0-nightly.so\"\n[22:28:09]   c Sysroot { compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu(x86_64-unknown-linux-gnu) } }\n```\n\nIt turned out that `install()` used full copies unconditionally. Change\nit to use `copy()` internally, which uses hard links instead when\navailable.\n\nNote that this has a change in behavior: Installing a file will also\nchange permissions on the source, not just the destination, if hard\nlinks are used.\n\nTo avoid changing the behavior on symlinks for existing code, I\nintroduce a new function `copy_internal` which only dereferences\nsymlinks when told to do so.", "tree": {"sha": "d8b0477f16cebc262e4177e4757f236405d02394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b0477f16cebc262e4177e4757f236405d02394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/057eab7ae96ee491f8939e52722b6c29ce3cc445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/057eab7ae96ee491f8939e52722b6c29ce3cc445", "html_url": "https://github.com/rust-lang/rust/commit/057eab7ae96ee491f8939e52722b6c29ce3cc445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/057eab7ae96ee491f8939e52722b6c29ce3cc445/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9eedea4b0368fd1f00f204db75109ff444fab5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9eedea4b0368fd1f00f204db75109ff444fab5b", "html_url": "https://github.com/rust-lang/rust/commit/b9eedea4b0368fd1f00f204db75109ff444fab5b"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "6546a00bb57853c7b89fd08a5372431492eb400b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/057eab7ae96ee491f8939e52722b6c29ce3cc445/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/057eab7ae96ee491f8939e52722b6c29ce3cc445/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=057eab7ae96ee491f8939e52722b6c29ce3cc445", "patch": "@@ -1873,7 +1873,6 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n \n /// Maybe add LLVM object files to the given destination lib-dir. Allows either static or dynamic linking.\n ///\n-\n /// Returns whether the files were actually copied.\n fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) -> bool {\n     if let Some(config) = builder.config.target_config.get(&target) {\n@@ -1983,6 +1982,8 @@ impl Step for LlvmTools {\n             }\n         }\n \n+        builder.ensure(crate::native::Llvm { target });\n+\n         let mut tarball = Tarball::new(builder, \"llvm-tools\", &target.triple);\n         tarball.set_overlay(OverlayKind::LLVM);\n         tarball.is_preview(true);"}, {"sha": "8dfb4975368d2b18516d97ed357b0009c073d635", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/057eab7ae96ee491f8939e52722b6c29ce3cc445/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/057eab7ae96ee491f8939e52722b6c29ce3cc445/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=057eab7ae96ee491f8939e52722b6c29ce3cc445", "patch": "@@ -1408,6 +1408,10 @@ impl Build {\n \n     /// Copies a file from `src` to `dst`\n     pub fn copy(&self, src: &Path, dst: &Path) {\n+        self.copy_internal(src, dst, false);\n+    }\n+\n+    fn copy_internal(&self, src: &Path, dst: &Path, dereference_symlinks: bool) {\n         if self.config.dry_run {\n             return;\n         }\n@@ -1417,15 +1421,22 @@ impl Build {\n         }\n         let _ = fs::remove_file(&dst);\n         let metadata = t!(src.symlink_metadata());\n+        let mut src = src.to_path_buf();\n         if metadata.file_type().is_symlink() {\n-            let link = t!(fs::read_link(src));\n-            t!(symlink_file(link, dst));\n-        } else if let Ok(()) = fs::hard_link(src, dst) {\n+            if dereference_symlinks {\n+                src = t!(fs::canonicalize(src));\n+            } else {\n+                let link = t!(fs::read_link(src));\n+                t!(symlink_file(link, dst));\n+                return;\n+            }\n+        }\n+        if let Ok(()) = fs::hard_link(&src, dst) {\n             // Attempt to \"easy copy\" by creating a hard link\n             // (symlinks don't work on windows), but if that fails\n             // just fall back to a slow `copy` operation.\n         } else {\n-            if let Err(e) = fs::copy(src, dst) {\n+            if let Err(e) = fs::copy(&src, dst) {\n                 panic!(\"failed to copy `{}` to `{}`: {}\", src.display(), dst.display(), e)\n             }\n             t!(fs::set_permissions(dst, metadata.permissions()));\n@@ -1497,20 +1508,10 @@ impl Build {\n         let dst = dstdir.join(src.file_name().unwrap());\n         self.verbose_than(1, &format!(\"Install {:?} to {:?}\", src, dst));\n         t!(fs::create_dir_all(dstdir));\n-        drop(fs::remove_file(&dst));\n-        {\n-            if !src.exists() {\n-                panic!(\"Error: File \\\"{}\\\" not found!\", src.display());\n-            }\n-            let metadata = t!(src.symlink_metadata());\n-            if let Err(e) = fs::copy(&src, &dst) {\n-                panic!(\"failed to copy `{}` to `{}`: {}\", src.display(), dst.display(), e)\n-            }\n-            t!(fs::set_permissions(&dst, metadata.permissions()));\n-            let atime = FileTime::from_last_access_time(&metadata);\n-            let mtime = FileTime::from_last_modification_time(&metadata);\n-            t!(filetime::set_file_times(&dst, atime, mtime));\n+        if !src.exists() {\n+            panic!(\"Error: File \\\"{}\\\" not found!\", src.display());\n         }\n+        self.copy_internal(src, &dst, true);\n         chmod(&dst, perms);\n     }\n "}]}