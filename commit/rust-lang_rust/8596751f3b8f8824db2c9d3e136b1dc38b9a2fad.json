{"sha": "8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "node_id": "C_kwDOAAsO6NoAKDg1OTY3NTFmM2I4Zjg4MjRkYjJjOWQzZTEzNmIxZGMzOGI5YTJmYWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-11T11:55:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-11T11:55:41Z"}, "message": "Rollup merge of #107629 - pitaj:rustdoc-search-deprecated, r=jsha\n\nrustdoc: sort deprecated items lower in search\n\ncloses #98759\n\n### Screenshots\n\n`i32::MAX` show sup above `std::i32::MAX` and `core::i32::MAX`\n![image](https://user-images.githubusercontent.com/803701/216725619-40afb7b0-e984-4a2e-ab5b-a95b24736b0e.png)\nIf just searching for `min`, the deprecated results show up far below other things:\n![image](https://user-images.githubusercontent.com/803701/216725672-e4325d37-9bfe-47eb-a1fe-0e57092aa811.png)\none page later\n![image](https://user-images.githubusercontent.com/803701/216725932-cd1c4a42-d527-44fb-a4ab-5a6d243659cc.png)\n\n~~And, as you can see, the \"Deprecation planned\" message shows up in the search results. The same is true for fully-deprecated items like `mem::uninitialized`:\n![image](https://user-images.githubusercontent.com/803701/216726268-1657e77a-563f-45a0-85a7-3a0cf4d66d6f.png)~~\n\nEdit: the deprecation message change was removed from this PR. Only the sorting is changed.", "tree": {"sha": "e79881ea19f58bf268e5e1a8eecf7ff1342928f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e79881ea19f58bf268e5e1a8eecf7ff1342928f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDGw9CRBK7hj4Ov3rIwAA1LYIAFQaYbzMwRfRYbl6jU6CbUgw\n6GjOSnsD4IGeYyxIKe1JahFLbZBfCON5T5P8DV1EZ7b2HLGRWoOS9hPBsxo/rUhW\nepArLTYfD5DkJbRuSAHGORmuthA8xVP7cl6Vyr0S6wmgyBe9LtqkqcJZ23YCUrU6\nGy3jOGBwc2oFshuCvSnOPlUh378LLfxN4lgS8i8Z7B0UOqd7CtS+fMbMSTP1kvbr\nRWubFlEWb197/fl8ZAEkgHhwESfMW+g+VTV45Cp8MkBnzLBd03OkDoLpTxzAHitm\nLZoVLkiDziyQtim8pFjaLUbDP8tssDvxQ6kcDc8nt/6QpjKBHDSLzPsrIxLyPc0=\n=r1H2\n-----END PGP SIGNATURE-----\n", "payload": "tree e79881ea19f58bf268e5e1a8eecf7ff1342928f7\nparent 790d9f349b061c8b7d113a3752b7e05c3304bccb\nparent d2e4b59e60aae6f47baae337a3a7f9f04c728592\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678535741 +0100\ncommitter GitHub <noreply@github.com> 1678535741 +0100\n\nRollup merge of #107629 - pitaj:rustdoc-search-deprecated, r=jsha\n\nrustdoc: sort deprecated items lower in search\n\ncloses #98759\n\n### Screenshots\n\n`i32::MAX` show sup above `std::i32::MAX` and `core::i32::MAX`\n![image](https://user-images.githubusercontent.com/803701/216725619-40afb7b0-e984-4a2e-ab5b-a95b24736b0e.png)\nIf just searching for `min`, the deprecated results show up far below other things:\n![image](https://user-images.githubusercontent.com/803701/216725672-e4325d37-9bfe-47eb-a1fe-0e57092aa811.png)\none page later\n![image](https://user-images.githubusercontent.com/803701/216725932-cd1c4a42-d527-44fb-a4ab-5a6d243659cc.png)\n\n~~And, as you can see, the \"Deprecation planned\" message shows up in the search results. The same is true for fully-deprecated items like `mem::uninitialized`:\n![image](https://user-images.githubusercontent.com/803701/216726268-1657e77a-563f-45a0-85a7-3a0cf4d66d6f.png)~~\n\nEdit: the deprecation message change was removed from this PR. Only the sorting is changed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "html_url": "https://github.com/rust-lang/rust/commit/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790d9f349b061c8b7d113a3752b7e05c3304bccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/790d9f349b061c8b7d113a3752b7e05c3304bccb", "html_url": "https://github.com/rust-lang/rust/commit/790d9f349b061c8b7d113a3752b7e05c3304bccb"}, {"sha": "d2e4b59e60aae6f47baae337a3a7f9f04c728592", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e4b59e60aae6f47baae337a3a7f9f04c728592", "html_url": "https://github.com/rust-lang/rust/commit/d2e4b59e60aae6f47baae337a3a7f9f04c728592"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "0295de8437ef195f9367e09508e77162eb377917", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "patch": "@@ -346,6 +346,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                                     self.cache,\n                                 ),\n                                 aliases: item.attrs.get_doc_aliases(),\n+                                deprecation: item.deprecation(self.tcx),\n                             });\n                         }\n                     }"}, {"sha": "5ade7c8e9607e262fc1e48d536c7455d87b882e1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "patch": "@@ -104,6 +104,7 @@ pub(crate) struct IndexItem {\n     pub(crate) parent_idx: Option<usize>,\n     pub(crate) search_type: Option<IndexItemFunctionType>,\n     pub(crate) aliases: Box<[Symbol]>,\n+    pub(crate) deprecation: Option<Deprecation>,\n }\n \n /// A type used for the search index."}, {"sha": "577497868f687b47d00fc1b33a73bbf68ee3e857", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "patch": "@@ -470,10 +470,11 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n \n     // The trailing space after each tag is to space it properly against the rest of the docs.\n     if let Some(depr) = &item.deprecation(tcx) {\n-        let mut message = \"Deprecated\";\n-        if !stability::deprecation_in_effect(depr) {\n-            message = \"Deprecation planned\";\n-        }\n+        let message = if stability::deprecation_in_effect(depr) {\n+            \"Deprecated\"\n+        } else {\n+            \"Deprecation planned\"\n+        };\n         tags += &tag_html(\"deprecated\", \"\", message);\n     }\n "}, {"sha": "146221f5806b4e4b5ba8169b3e1c91b1fe51f66c", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "patch": "@@ -40,6 +40,7 @@ pub(crate) fn build_index<'tcx>(\n                 parent_idx: None,\n                 search_type: get_function_type_for_search(item, tcx, impl_generics.as_ref(), cache),\n                 aliases: item.attrs.get_doc_aliases(),\n+                deprecation: item.deprecation(tcx),\n             });\n         }\n     }\n@@ -251,7 +252,17 @@ pub(crate) fn build_index<'tcx>(\n             )?;\n             crate_data.serialize_field(\n                 \"q\",\n-                &self.items.iter().map(|item| &item.path).collect::<Vec<_>>(),\n+                &self\n+                    .items\n+                    .iter()\n+                    .enumerate()\n+                    // Serialize as an array of item indices and full paths\n+                    .filter_map(\n+                        |(index, item)| {\n+                            if item.path.is_empty() { None } else { Some((index, &item.path)) }\n+                        },\n+                    )\n+                    .collect::<Vec<_>>(),\n             )?;\n             crate_data.serialize_field(\n                 \"d\",\n@@ -304,6 +315,16 @@ pub(crate) fn build_index<'tcx>(\n                     })\n                     .collect::<Vec<_>>(),\n             )?;\n+            crate_data.serialize_field(\n+                \"c\",\n+                &self\n+                    .items\n+                    .iter()\n+                    .enumerate()\n+                    // Serialize as an array of deprecated item indices\n+                    .filter_map(|(index, item)| item.deprecation.map(|_| index))\n+                    .collect::<Vec<_>>(),\n+            )?;\n             crate_data.serialize_field(\n                 \"p\",\n                 &self.paths.iter().map(|(it, s)| (it, s.as_str())).collect::<Vec<_>>(),"}, {"sha": "3ba2ca75458d25d714b13148c7ab663e461ca2cb", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/8596751f3b8f8824db2c9d3e136b1dc38b9a2fad/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=8596751f3b8f8824db2c9d3e136b1dc38b9a2fad", "patch": "@@ -881,6 +881,13 @@ function initSearch(rawSearchIndex) {\n                     return a - b;\n                 }\n \n+                // sort deprecated items later\n+                a = aaa.item.deprecated;\n+                b = bbb.item.deprecated;\n+                if (a !== b) {\n+                    return a - b;\n+                }\n+\n                 // sort by crate (current crate comes first)\n                 a = (aaa.item.crate !== preferredCrate);\n                 b = (bbb.item.crate !== preferredCrate);\n@@ -1244,6 +1251,7 @@ function initSearch(rawSearchIndex) {\n                 parent: item.parent,\n                 type: item.type,\n                 is_alias: true,\n+                deprecated: item.deprecated,\n             };\n         }\n \n@@ -2064,10 +2072,11 @@ function initSearch(rawSearchIndex) {\n              *   n: Array<string>,\n              *   t: String,\n              *   d: Array<string>,\n-             *   q: Array<string>,\n+             *   q: Array<[Number, string]>,\n              *   i: Array<Number>,\n              *   f: Array<RawFunctionSearchType>,\n              *   p: Array<Object>,\n+             *   c: Array<Number>\n              * }}\n              */\n             const crateCorpus = rawSearchIndex[crate];\n@@ -2086,6 +2095,7 @@ function initSearch(rawSearchIndex) {\n                 type: null,\n                 id: id,\n                 normalizedName: crate.indexOf(\"_\") === -1 ? crate : crate.replace(/_/g, \"\"),\n+                deprecated: null,\n             };\n             id += 1;\n             searchIndex.push(crateRow);\n@@ -2095,14 +2105,20 @@ function initSearch(rawSearchIndex) {\n             const itemTypes = crateCorpus.t;\n             // an array of (String) item names\n             const itemNames = crateCorpus.n;\n-            // an array of (String) full paths (or empty string for previous path)\n-            const itemPaths = crateCorpus.q;\n+            // an array of [(Number) item index,\n+            //              (String) full path]\n+            // an item whose index is not present will fall back to the previous present path\n+            // i.e. if indices 4 and 11 are present, but 5-10 and 12-13 are not present,\n+            // 5-10 will fall back to the path for 4 and 12-13 will fall back to the path for 11\n+            const itemPaths = new Map(crateCorpus.q);\n             // an array of (String) descriptions\n             const itemDescs = crateCorpus.d;\n             // an array of (Number) the parent path index + 1 to `paths`, or 0 if none\n             const itemParentIdxs = crateCorpus.i;\n             // an array of (Object | null) the type of the function, if any\n             const itemFunctionSearchTypes = crateCorpus.f;\n+            // an array of (Number) indices for the deprecated items\n+            const deprecatedItems = new Set(crateCorpus.c);\n             // an array of [(Number) item type,\n             //              (String) name]\n             const paths = crateCorpus.p;\n@@ -2142,12 +2158,13 @@ function initSearch(rawSearchIndex) {\n                     crate: crate,\n                     ty: itemTypes.charCodeAt(i) - charA,\n                     name: itemNames[i],\n-                    path: itemPaths[i] ? itemPaths[i] : lastPath,\n+                    path: itemPaths.has(i) ? itemPaths.get(i) : lastPath,\n                     desc: itemDescs[i],\n                     parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n                     type: buildFunctionSearchType(itemFunctionSearchTypes[i], lowercasePaths),\n                     id: id,\n                     normalizedName: word.indexOf(\"_\") === -1 ? word : word.replace(/_/g, \"\"),\n+                    deprecated: deprecatedItems.has(i),\n                 };\n                 id += 1;\n                 searchIndex.push(row);"}]}