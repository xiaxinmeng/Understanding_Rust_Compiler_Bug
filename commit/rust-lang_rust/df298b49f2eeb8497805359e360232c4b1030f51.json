{"sha": "df298b49f2eeb8497805359e360232c4b1030f51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjk4YjQ5ZjJlZWI4NDk3ODA1MzU5ZTM2MDIzMmM0YjEwMzBmNTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T03:13:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T03:13:42Z"}, "message": "syntax: document some methods.", "tree": {"sha": "311dd31345438c0423018432e64ee169e12f5919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/311dd31345438c0423018432e64ee169e12f5919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df298b49f2eeb8497805359e360232c4b1030f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df298b49f2eeb8497805359e360232c4b1030f51", "html_url": "https://github.com/rust-lang/rust/commit/df298b49f2eeb8497805359e360232c4b1030f51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df298b49f2eeb8497805359e360232c4b1030f51/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "html_url": "https://github.com/rust-lang/rust/commit/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "75ab768d55df8efda64ae1dd443b2920666ccab6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df298b49f2eeb8497805359e360232c4b1030f51/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df298b49f2eeb8497805359e360232c4b1030f51/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=df298b49f2eeb8497805359e360232c4b1030f51", "patch": "@@ -511,13 +511,15 @@ impl<'a> Parser<'a> {\n         is_present\n     }\n \n+    /// If the next token is the given keyword, returns `true` without eating it.\n+    /// An expectation is also added for diagnostics purposes.\n     fn check_keyword(&mut self, kw: Symbol) -> bool {\n         self.expected_tokens.push(TokenType::Keyword(kw));\n         self.token.is_keyword(kw)\n     }\n \n-    /// If the next token is the given keyword, eats it and returns\n-    /// `true`. Otherwise, returns `false`.\n+    /// If the next token is the given keyword, eats it and returns `true`.\n+    /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.\n     pub fn eat_keyword(&mut self, kw: Symbol) -> bool {\n         if self.check_keyword(kw) {\n             self.bump();\n@@ -896,6 +898,8 @@ impl<'a> Parser<'a> {\n         self.expected_tokens.clear();\n     }\n \n+    /// Look-ahead `dist` tokens of `self.token` and get access to that token there.\n+    /// When `dist == 0` then the current token is looked at.\n     pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {\n         if dist == 0 {\n             return looker(&self.token);"}]}