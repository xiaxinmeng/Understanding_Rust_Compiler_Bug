{"sha": "5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjc5MDUxOWIxMmFmYWU2ODhjODdhZTNmNTVlZTVlZWMxYTZkY2M=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T18:34:12Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T19:39:55Z"}, "message": "Reducing the chances for race conditions in join.", "tree": {"sha": "7bfb02b5732710dbb1f0a0716875bde903d49d24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfb02b5732710dbb1f0a0716875bde903d49d24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "html_url": "https://github.com/rust-lang/rust/commit/5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/comments", "author": null, "committer": null, "parents": [{"sha": "55c9842e7d16c3313ae12fbcc2d3a80cc9464190", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c9842e7d16c3313ae12fbcc2d3a80cc9464190", "html_url": "https://github.com/rust-lang/rust/commit/55c9842e7d16c3313ae12fbcc2d3a80cc9464190"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "5045b395477443dcaffc5c63a9a5675945b7a94a", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "patch": "@@ -115,7 +115,10 @@ static size_t const BUF_BYTES = 2048;\n     private:                                                            \\\n     intptr_t ref_count;                                                 \\\n public:                                                                 \\\n- void ref() { sync::increment(ref_count); }                             \\\n+ void ref() {                                                           \\\n+     intptr_t old = sync::increment(ref_count);                         \\\n+     assert(old > 0);                                                   \\\n+ }                                                                      \\\n  void deref() { if(0 == sync::decrement(ref_count)) { delete this; } }\n \n template <typename T> struct rc_base {"}, {"sha": "ceddcf5b1c9cdd925b348827d6c1142f57c856c3", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "patch": "@@ -160,7 +160,17 @@ rust_kernel::get_task_by_id(rust_task_id id) {\n     rust_task *task = NULL;\n     // get leaves task unchanged if not found.\n     task_table.get(id, &task);\n-    if(task) task->ref();\n+    if(task) {\n+        if(task->get_ref_count() == 0) {\n+            // this means the destructor is running, since the destructor\n+            // grabs the kernel lock to unregister the task. Pretend this\n+            // doesn't actually exist.\n+            return NULL;\n+        }\n+        else {\n+            task->ref();\n+        }\n+    }\n     return task;\n }\n "}, {"sha": "c757a9e69e1150484d25fe7312f44b9c85445958", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "patch": "@@ -169,6 +169,10 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     rust_port_id register_port(rust_port *port);\n     void release_port(rust_port_id id);\n     rust_port *get_port_by_id(rust_port_id id);\n+\n+    // Use this function sparingly. Depending on the ref count is generally\n+    // not at all safe.\n+    intptr_t get_ref_count() const { return ref_count; }\n };\n \n //"}, {"sha": "b7d9e07022e57db6dc5b7696917ee611437ac1d9", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6790519b12afae688c87ae3f55ee5eec1a6dcc/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=5c6790519b12afae688c87ae3f55ee5eec1a6dcc", "patch": "@@ -27,4 +27,4 @@ fn main(args: vec[str]) {\n         task::_spawn(bind f(n));\n         i += 1u;\n     }\n-}\n\\ No newline at end of file\n+}"}]}