{"sha": "93f84e558681df7c160d4673f69a07978ca6f955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZjg0ZTU1ODY4MWRmN2MxNjBkNDY3M2Y2OWEwNzk3OGNhNmY5NTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-30T10:55:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-30T10:55:37Z"}, "message": "Rollup merge of #55494 - pnkfelix:issue-55492-borrowck-migrate-must-look-at-parents-of-closures, r=davidtwco\n\nborrowck=migrate must look at parents of closures\n\nThis fixes the NLL migration mode (which is the default with edition=2018) to inspect all parents of a closure in addition to the closure itself when looking to see if AST-borrowck issues an error for the given code.\n\nThis should be a candidate for beta backport.\n\nFix #55492", "tree": {"sha": "155b922fd3bd98fc0e6c54203e135280425a030f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/155b922fd3bd98fc0e6c54203e135280425a030f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f84e558681df7c160d4673f69a07978ca6f955", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb2DipCRBK7hj4Ov3rIwAAdHIIAHiscrfW3xvMNsIU6GLx8pOd\nIaqt+j54IRp7Rc1pHDiZvYLCn5JEirbpIhJPK88bTJazBni4/cBKzymqUyTm0Z32\nQvHVhzyFx6ZP4zZ3lTLkIK0QlucaVtqKY2A0QmXusOan0s6CCNS/fopGPiRZoYCE\n41Gir/Zmj9rcUoyVr+/5f6sIWGomA2sgxO8kevEeaP3/r9ULdFcKMjiavFhSys6Q\nfePXF6YPd9KWyeR3WZm0H2H9/IDLR99FVKr/VilovWB87cBI+gzg+gb7KtmchZlk\nMK/58AT7wzhmvWcwKfPibnaV4xipwgD6oki4yHvUH+mc/v4rg5DpVjBW9hZiIes=\n=j1XE\n-----END PGP SIGNATURE-----\n", "payload": "tree 155b922fd3bd98fc0e6c54203e135280425a030f\nparent 50b8879bcfa77f8b615dcee9d48e3b5dacbf7fd0\nparent 87ce5ec6e955849189887e56dfafc45e1293f63f\nauthor kennytm <kennytm@gmail.com> 1540896937 +0800\ncommitter GitHub <noreply@github.com> 1540896937 +0800\n\nRollup merge of #55494 - pnkfelix:issue-55492-borrowck-migrate-must-look-at-parents-of-closures, r=davidtwco\n\nborrowck=migrate must look at parents of closures\n\nThis fixes the NLL migration mode (which is the default with edition=2018) to inspect all parents of a closure in addition to the closure itself when looking to see if AST-borrowck issues an error for the given code.\n\nThis should be a candidate for beta backport.\n\nFix #55492\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f84e558681df7c160d4673f69a07978ca6f955", "html_url": "https://github.com/rust-lang/rust/commit/93f84e558681df7c160d4673f69a07978ca6f955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f84e558681df7c160d4673f69a07978ca6f955/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b8879bcfa77f8b615dcee9d48e3b5dacbf7fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b8879bcfa77f8b615dcee9d48e3b5dacbf7fd0", "html_url": "https://github.com/rust-lang/rust/commit/50b8879bcfa77f8b615dcee9d48e3b5dacbf7fd0"}, {"sha": "87ce5ec6e955849189887e56dfafc45e1293f63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ce5ec6e955849189887e56dfafc45e1293f63f", "html_url": "https://github.com/rust-lang/rust/commit/87ce5ec6e955849189887e56dfafc45e1293f63f"}], "stats": {"total": 335, "additions": 269, "deletions": 66}, "files": [{"sha": "8d10c0395f5083fac7316a777e154ad5421cbf78", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -346,7 +346,33 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n \n         if tcx.migrate_borrowck() {\n-            match tcx.borrowck(def_id).signalled_any_error {\n+            // When borrowck=migrate, check if AST-borrowck would\n+            // error on the given code.\n+\n+            // rust-lang/rust#55492: loop over parents to ensure that\n+            // errors that AST-borrowck only detects in some parent of\n+            // a closure still allows NLL to signal an error.\n+            let mut curr_def_id = def_id;\n+            let signalled_any_error = loop {\n+                match tcx.borrowck(curr_def_id).signalled_any_error {\n+                    SignalledError::NoErrorsSeen => {\n+                        // keep traversing (and borrow-checking) parents\n+                    }\n+                    SignalledError::SawSomeError => {\n+                        // stop search here\n+                        break SignalledError::SawSomeError;\n+                    }\n+                }\n+\n+                if tcx.is_closure(curr_def_id) {\n+                    curr_def_id = tcx.parent_def_id(curr_def_id)\n+                        .expect(\"a closure must have a parent_def_id\");\n+                } else {\n+                    break SignalledError::NoErrorsSeen;\n+                }\n+            };\n+\n+            match signalled_any_error {\n                 SignalledError::NoErrorsSeen => {\n                     // if AST-borrowck signalled no errors, then\n                     // downgrade all the buffered MIR-borrowck errors"}, {"sha": "231ae53fe82bf97484dfbf112c1372e557d6b38a", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -40,19 +40,15 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n LL |     c1;\n    |     -- first borrow later used here\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/borrowck-closures-unique.rs:57:38\n    |\n LL | fn e(x: &'static mut isize) {\n    |      - help: consider changing this to be mutable: `mut x`\n LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n    |                                      ^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0500, E0524, E0594.\n For more information about an error, try `rustc --explain E0500`."}, {"sha": "c3aba793f190e617191eaf215608c30deac7d85f", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -20,7 +20,7 @@ LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than o\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n-warning: captured variable cannot escape `FnMut` closure body\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n    |\n LL |              || {\n@@ -36,9 +36,6 @@ LL | |                 }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:53:9\n@@ -382,7 +379,7 @@ LL |                 drop(x); //[ast]~ ERROR use of moved value: `x`\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 30 previous errors\n \n Some errors occurred: E0382, E0499, E0502, E0503.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "3180823f64327b153df962041009e6ec37f39390", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.ast.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -0,0 +1,55 @@\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:22\n+   |\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |         x\n+   |\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:29:22\n+   |\n+LL |         let mut c1 = |z: &'static mut isize| {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |         x\n+   |\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:9\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: make this binding mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:9\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: make this binding mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:9\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: make this binding mutable: `mut x`\n+LL |         || { &mut x; };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:9\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: make this binding mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |         ^^ cannot borrow mutably\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0595`."}, {"sha": "0ccddf0a67d6fa0809861708cece0a573f3b51ae", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -0,0 +1,54 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:46\n+   |\n+LL |     pub fn e(x: &'static mut isize) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |         static mut Y: isize = 3;\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                                              ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+   |\n+LL |     pub fn ee(x: &'static mut isize) {\n+   |               - help: consider changing this to be mutable: `mut x`\n+...\n+LL |             let mut c2 = |y: &'static mut isize| x = y;\n+   |                                                  ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: consider changing this to be mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |              ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: consider changing this to be mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |              ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x; };\n+   |              ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |              ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "0ccddf0a67d6fa0809861708cece0a573f3b51ae", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -0,0 +1,54 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:46\n+   |\n+LL |     pub fn e(x: &'static mut isize) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |         static mut Y: isize = 3;\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                                              ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+   |\n+LL |     pub fn ee(x: &'static mut isize) {\n+   |               - help: consider changing this to be mutable: `mut x`\n+...\n+LL |             let mut c2 = |y: &'static mut isize| x = y;\n+   |                                                  ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: consider changing this to be mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |              ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: consider changing this to be mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |              ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x; };\n+   |              ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |              ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "25ad66a5d9b4a6cb9367e5da03bc9f782bb2b2fd", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -0,0 +1,61 @@\n+// rust-lang/rust#55492: errors detected during MIR-borrowck's\n+// analysis of a closure body may only be caught when AST-borrowck\n+// looks at some parent.\n+\n+// revisions: ast migrate nll\n+\n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[migrate]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+\n+\n+// transcribed from borrowck-closures-unique.rs\n+mod borrowck_closures_unique {\n+    pub fn e(x: &'static mut isize) {\n+        static mut Y: isize = 3;\n+        let mut c1 = |y: &'static mut isize| x = y;\n+        unsafe { c1(&mut Y); }\n+    }\n+}\n+\n+mod borrowck_closures_unique_grandparent {\n+    pub fn ee(x: &'static mut isize) {\n+        static mut Z: isize = 3;\n+        let mut c1 = |z: &'static mut isize| {\n+            let mut c2 = |y: &'static mut isize| x = y;\n+            c2(z);\n+        };\n+        unsafe { c1(&mut Z); }\n+    }\n+}\n+\n+// adapted from mutability_errors.rs\n+mod mutability_errors {\n+    pub fn capture_assign_whole(x: (i32,)) {\n+        || { x = (1,); };\n+    }\n+    pub fn capture_assign_part(x: (i32,)) {\n+        || { x.0 = 1; };\n+    }\n+    pub fn capture_reborrow_whole(x: (i32,)) {\n+        || { &mut x; };\n+    }\n+    pub fn capture_reborrow_part(x: (i32,)) {\n+        || { &mut x.0; };\n+    }\n+}\n+\n+fn main() {\n+    static mut X: isize = 2;\n+    unsafe { borrowck_closures_unique::e(&mut X); }\n+\n+    mutability_errors::capture_assign_whole((1000,));\n+    mutability_errors::capture_assign_part((2000,));\n+    mutability_errors::capture_reborrow_whole((3000,));\n+    mutability_errors::capture_reborrow_part((4000,));\n+}"}, {"sha": "14c41bb81b2c65594af40320298f4e157a95e47b", "filename": "src/test/ui/borrowck/mutability-errors.nll.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -277,57 +277,41 @@ LL |     &mut x; //~ ERROR\n LL |     &mut x.0; //~ ERROR\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:70:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     || { //~ ERROR\n LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:71:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:72:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:73:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:76:9\n@@ -389,7 +373,7 @@ error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n LL |     &mut X.0; //~ ERROR\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 38 previous errors\n \n Some errors occurred: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "084d7ff3bcd61f85d26f3db6a4c7bc4c87908e32", "filename": "src/test/ui/unboxed-closures/unboxed-closure-immutable-capture.nll.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -33,59 +33,43 @@ LL |     let x = 0;\n LL |     move || set(&mut x); //~ ERROR cannot borrow\n    |                 ^^^^^^ cannot borrow as mutable\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:23:8\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |        ^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:25:12\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |            ^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:26:8\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |        ^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:28:12\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |            ^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors occurred: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "718c3a19938c4a8735ea1cffe8f973501520884d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -1,15 +1,11 @@\n-warning[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:27:9\n    |\n LL |     let tick1 = || {\n    |         ----- help: consider changing this to be mutable: `mut tick1`\n ...\n LL |         tick1();\n    |         ^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0596]: cannot borrow `tick2` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:30:5\n@@ -20,6 +16,6 @@ LL |     let tick2 = || { //~ ERROR closure cannot assign to immutable local var\n LL |     tick2(); //~ ERROR cannot borrow\n    |     ^^^^^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "f765f207303d2dd1b9bc74ee926c75820baf9469", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f84e558681df7c160d4673f69a07978ca6f955/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr?ref=93f84e558681df7c160d4673f69a07978ca6f955", "patch": "@@ -1,15 +1,11 @@\n-warning[E0594]: cannot assign to `n`, as it is not declared as mutable\n+error[E0594]: cannot assign to `n`, as it is not declared as mutable\n   --> $DIR/unboxed-closures-mutate-upvar.rs:25:9\n    |\n LL |     let n = 0;\n    |         - help: consider changing this to be mutable: `mut n`\n LL |     let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n LL |         n += 1;\n    |         ^^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0594]: cannot assign to `n`, as it is not declared as mutable\n   --> $DIR/unboxed-closures-mutate-upvar.rs:42:9\n@@ -44,6 +40,6 @@ LL | |         n += 1; //~ ERROR cannot assign\n LL | |     });\n    | |_____^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0594`."}]}