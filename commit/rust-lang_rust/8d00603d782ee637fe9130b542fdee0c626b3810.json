{"sha": "8d00603d782ee637fe9130b542fdee0c626b3810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMDA2MDNkNzgyZWU2MzdmZTkxMzBiNTQyZmRlZTBjNjI2YjM4MTA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-24T23:26:41Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-25T07:07:30Z"}, "message": "Use less move_it in pipes and future (all but one use)", "tree": {"sha": "02274e33dcff3f672ca4beedb5984e47369f72c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02274e33dcff3f672ca4beedb5984e47369f72c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d00603d782ee637fe9130b542fdee0c626b3810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d00603d782ee637fe9130b542fdee0c626b3810", "html_url": "https://github.com/rust-lang/rust/commit/8d00603d782ee637fe9130b542fdee0c626b3810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d00603d782ee637fe9130b542fdee0c626b3810/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf2f89452675d231956324333180810273625b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf2f89452675d231956324333180810273625b0", "html_url": "https://github.com/rust-lang/rust/commit/6cf2f89452675d231956324333180810273625b0"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "7bc7789c9c31efc604d40dc196d87b57a950ed58", "filename": "src/libcore/future.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d00603d782ee637fe9130b542fdee0c626b3810/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00603d782ee637fe9130b542fdee0c626b3810/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=8d00603d782ee637fe9130b542fdee0c626b3810", "patch": "@@ -64,25 +64,21 @@ fn from_value<A>(+val: A) -> Future<A> {\n     })\n }\n \n-macro_rules! move_it (\n-    ($x:expr) => { unsafe { let y <- *ptr::addr_of($x); y } }\n-)\n-\n fn from_port<A:send>(+port: future_pipe::client::waiting<A>) -> Future<A> {\n-    #[doc = \"\n-    Create a future from a port\n-\n-    The first time that the value is requested the task will block\n-    waiting for the result to be received on the port.\n-    \"];\n+    /*!\n+     * Create a future from a port\n+     *\n+     * The first time that the value is requested the task will block\n+     * waiting for the result to be received on the port.\n+     */\n \n     let port = ~mut some(port);\n     do from_fn |move port| {\n         let mut port_ = none;\n         port_ <-> *port;\n         let port = option::unwrap(port_);\n         match recv(port) {\n-          future_pipe::completed(data) => move_it!(data)\n+          future_pipe::completed(move data) => data\n         }\n     }\n }"}, {"sha": "41542a5a830e83b4b6ea44956393b4d0ad9ffd86", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d00603d782ee637fe9130b542fdee0c626b3810/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00603d782ee637fe9130b542fdee0c626b3810/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=8d00603d782ee637fe9130b542fdee0c626b3810", "patch": "@@ -325,6 +325,7 @@ unsafe fn get_buffer<T: send>(p: *packet_header) -> ~buffer<T> {\n     transmute((*p).buf_header())\n }\n \n+// This could probably be done with SharedMutableState to avoid move_it!().\n struct buffer_resource<T: send> {\n     let buffer: ~buffer<T>;\n     new(+b: ~buffer<T>) {\n@@ -962,8 +963,8 @@ impl<T: send> chan<T>: channel<T> {\n         let mut endp = none;\n         endp <-> self.endp;\n         match move streamp::client::try_data(unwrap(endp), x) {\n-            some(next) => {\n-                self.endp = some(move_it!(next));\n+            some(move next) => {\n+                self.endp = some(next);\n                 true\n             }\n             none => false\n@@ -984,9 +985,9 @@ impl<T: send> port<T>: recv<T> {\n         let mut endp = none;\n         endp <-> self.endp;\n         match move pipes::try_recv(unwrap(endp)) {\n-          some(streamp::data(x, endp)) => {\n-            self.endp = some(move_it!(endp));\n-            some(move_it!(x))\n+          some(streamp::data(move x, move endp)) => {\n+            self.endp = some(endp);\n+            some(x)\n           }\n           none => none\n         }\n@@ -1029,12 +1030,8 @@ struct PortSet<T: send> : recv<T> {\n         while result == none && ports.len() > 0 {\n             let i = wait_many(ports);\n             match move ports[i].try_recv() {\n-                // FIXME (#2329): use this version once move from enum works.\n-                //some(copy m) => {\n-                //  result = some(move m);\n-                //}\n-                some(m) => {\n-                  result = some(move_it!(m));\n+                some(move m) => {\n+                  result = some(m);\n                 }\n                 none => {\n                     // Remove this port.\n@@ -1047,12 +1044,7 @@ struct PortSet<T: send> : recv<T> {\n     }\n \n     fn recv() -> T {\n-        match move self.try_recv() {\n-            // FIXME (#2329): use this version once move from enum works.\n-            //some(copy x) => move x,\n-            some(x) => move_it!(x),\n-            none => fail ~\"port_set: endpoints closed\"\n-        }\n+        option::unwrap_expect(self.try_recv(), \"port_set: endpoints closed\")\n     }\n \n     pure fn peek() -> bool {"}]}