{"sha": "2a8fc9e6829c15a54e9094b940312e9485c6b79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOGZjOWU2ODI5YzE1YTU0ZTkwOTRiOTQwMzEyZTk0ODVjNmI3OWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T14:41:08Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T14:41:08Z"}, "message": "adt.rs: fetch struct/union data from item tree", "tree": {"sha": "373d0816001592e8cfcb1a80803989f459c80ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/373d0816001592e8cfcb1a80803989f459c80ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8fc9e6829c15a54e9094b940312e9485c6b79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8fc9e6829c15a54e9094b940312e9485c6b79a", "html_url": "https://github.com/rust-lang/rust/commit/2a8fc9e6829c15a54e9094b940312e9485c6b79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8fc9e6829c15a54e9094b940312e9485c6b79a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777", "html_url": "https://github.com/rust-lang/rust/commit/d84b3ff6a1c42df0e349dc8ec3fc08e8c1251777"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "65546b339ed4b1d80aab44d960fef977e7e6a26a", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2a8fc9e6829c15a54e9094b940312e9485c6b79a/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8fc9e6829c15a54e9094b940312e9485c6b79a/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=2a8fc9e6829c15a54e9094b940312e9485c6b79a", "patch": "@@ -14,6 +14,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n use crate::{\n     body::{CfgExpander, LowerCtx},\n     db::DefDatabase,\n+    item_tree::{Field, Fields, ItemTree},\n     src::HasChildSource,\n     src::HasSource,\n     trace::Trace,\n@@ -22,6 +23,7 @@ use crate::{\n     EnumId, HasModule, LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StructId, UnionId,\n     VariantId,\n };\n+use ra_cfg::CfgOptions;\n \n /// Note that we use `StructData` for unions as well!\n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -59,28 +61,24 @@ pub struct FieldData {\n \n impl StructData {\n     pub(crate) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {\n-        let src = id.lookup(db).source(db);\n+        let loc = id.lookup(db);\n+        let item_tree = db.item_tree(loc.id.file_id);\n+        let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n-        let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let variant_data =\n-            VariantData::new(db, src.map(|s| s.kind()), id.lookup(db).container.module(db));\n-        let variant_data = Arc::new(variant_data);\n-        Arc::new(StructData { name, variant_data })\n+        let strukt = &item_tree[loc.id.value];\n+        let variant_data = lower_fields(&item_tree, &cfg_options, &strukt.fields);\n+\n+        Arc::new(StructData { name: strukt.name.clone(), variant_data: Arc::new(variant_data) })\n     }\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n-        let src = id.lookup(db).source(db);\n-        let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let variant_data = VariantData::new(\n-            db,\n-            src.map(|s| {\n-                s.record_field_def_list()\n-                    .map(ast::StructKind::Record)\n-                    .unwrap_or(ast::StructKind::Unit)\n-            }),\n-            id.lookup(db).container.module(db),\n-        );\n-        let variant_data = Arc::new(variant_data);\n-        Arc::new(StructData { name, variant_data })\n+        let loc = id.lookup(db);\n+        let item_tree = db.item_tree(loc.id.file_id);\n+        let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n+\n+        let union = &item_tree[loc.id.value];\n+        let variant_data = lower_fields(&item_tree, &cfg_options, &union.fields);\n+\n+        Arc::new(StructData { name: union.name.clone(), variant_data: Arc::new(variant_data) })\n     }\n }\n \n@@ -251,3 +249,35 @@ fn lower_struct(\n         ast::StructKind::Unit => StructKind::Unit,\n     }\n }\n+\n+fn lower_fields(item_tree: &ItemTree, cfg_options: &CfgOptions, fields: &Fields) -> VariantData {\n+    match fields {\n+        Fields::Record(flds) => {\n+            let mut arena = Arena::new();\n+            for field_id in flds.clone() {\n+                if item_tree.attrs(field_id.into()).is_cfg_enabled(cfg_options) {\n+                    arena.alloc(lower_field(item_tree, &item_tree[field_id]));\n+                }\n+            }\n+            VariantData::Record(arena)\n+        }\n+        Fields::Tuple(flds) => {\n+            let mut arena = Arena::new();\n+            for field_id in flds.clone() {\n+                if item_tree.attrs(field_id.into()).is_cfg_enabled(cfg_options) {\n+                    arena.alloc(lower_field(item_tree, &item_tree[field_id]));\n+                }\n+            }\n+            VariantData::Tuple(arena)\n+        }\n+        Fields::Unit => VariantData::Unit,\n+    }\n+}\n+\n+fn lower_field(item_tree: &ItemTree, field: &Field) -> FieldData {\n+    FieldData {\n+        name: field.name.clone(),\n+        type_ref: field.type_ref.clone(),\n+        visibility: item_tree[field.visibility].clone(),\n+    }\n+}"}]}