{"sha": "e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "node_id": "C_kwDOAAsO6NoAKGU5ZWMwMjI2N2EwYjg0ZDZhMTczNTdjMWEwZGE0NjA5M2JhNWFkMWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-04T09:06:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-04T09:06:40Z"}, "message": "Rollup merge of #97647 - m-ou-se:lazy-box-locks, r=Amanieu\n\nLazily allocate and initialize pthread locks.\n\nLazily allocate and initialize pthread locks.\n\nThis allows {Mutex, Condvar, RwLock}::new() to be const, while still using the platform's native locks for features like priority inheritance and debug tooling. E.g. on macOS, we cannot directly use the (private) APIs that pthread's locks are implemented with, making it impossible for us to use anything other than pthread while still preserving priority inheritance, etc.\n\nThis PR doesn't yet make the public APIs const. That's for a separate PR with an FCP.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93740", "tree": {"sha": "7baf0f20f2a3f01acf059a4c178d92e3e826f279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7baf0f20f2a3f01acf059a4c178d92e3e826f279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimyCgCRBK7hj4Ov3rIwAApLMIAED79MYzDqNFAd0xPNQZKCx7\niFUHb4nGyEHUaHI8s6JBsI+CBPFa9wRCR2jpGW/Jk6M8DHWc8E2cnZ+O7FPNlx1V\nvxXLEEyL8XIvwvOOOzitxZ2R3byN/85JAJw26GsFTrhZ/dWGHvnnHfh5KNFlc0kg\nPIdG/A2ZPNnzhf3oBqcwfrQL3XzXrM5hwOrcHsys8dgMG+cZAUCC7sQsjttaeXsw\nbO8Z5akx+R8dz7bUhGvnCFdEJaufFUnkfaEy8vGiKIrtzq287w0RGf//xMLl9R07\nNp45aDTzGe2WAL6qmfbQYR4fJy3NJUBNCvfSo47b1gwHIhJngHFCYa6KQzEyCAg=\n=2pse\n-----END PGP SIGNATURE-----\n", "payload": "tree 7baf0f20f2a3f01acf059a4c178d92e3e826f279\nparent 07f586fe746a362fdebfc1cec0016dd024780dce\nparent 6a417d482899e13b1fbef5f5f9962f59e89e9e53\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654333600 +0200\ncommitter GitHub <noreply@github.com> 1654333600 +0200\n\nRollup merge of #97647 - m-ou-se:lazy-box-locks, r=Amanieu\n\nLazily allocate and initialize pthread locks.\n\nLazily allocate and initialize pthread locks.\n\nThis allows {Mutex, Condvar, RwLock}::new() to be const, while still using the platform's native locks for features like priority inheritance and debug tooling. E.g. on macOS, we cannot directly use the (private) APIs that pthread's locks are implemented with, making it impossible for us to use anything other than pthread while still preserving priority inheritance, etc.\n\nThis PR doesn't yet make the public APIs const. That's for a separate PR with an FCP.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93740\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "html_url": "https://github.com/rust-lang/rust/commit/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f586fe746a362fdebfc1cec0016dd024780dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f586fe746a362fdebfc1cec0016dd024780dce", "html_url": "https://github.com/rust-lang/rust/commit/07f586fe746a362fdebfc1cec0016dd024780dce"}, {"sha": "6a417d482899e13b1fbef5f5f9962f59e89e9e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a417d482899e13b1fbef5f5f9962f59e89e9e53", "html_url": "https://github.com/rust-lang/rust/commit/6a417d482899e13b1fbef5f5f9962f59e89e9e53"}], "stats": {"total": 307, "additions": 184, "deletions": 123}, "files": [{"sha": "46f45b1977173e1a0ceecd829552a7a3712e32e3", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -70,9 +70,13 @@ impl Condvar {\n         mutex.lock();\n         res == 0\n     }\n+}\n \n-    pub unsafe fn destroy(&self) {\n-        let _ = abi::sem_destroy(self.sem1);\n-        let _ = abi::sem_destroy(self.sem2);\n+impl Drop for Condvar {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let _ = abi::sem_destroy(self.sem1);\n+            let _ = abi::sem_destroy(self.sem2);\n+        }\n     }\n }"}, {"sha": "ef44bf411fba5c0bdf3845f1d8eabdd93489de52", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -215,7 +215,4 @@ impl Mutex {\n         }\n         guard.locked\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "d43fa08a17150418700c6e481463dafba6c77880", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -84,12 +84,6 @@ impl RwLock {\n         // FIXME: should only wake up one of these some of the time\n         self.cond.notify_all();\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        self.lock.destroy();\n-        self.cond.destroy();\n-    }\n }\n \n impl State {"}, {"sha": "008cd8fb1e3926f3dbe5c65bde43afda92ddc31c", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -117,8 +117,6 @@ impl Condvar {\n         unsafe { mutex.lock() };\n         success\n     }\n-\n-    pub unsafe fn destroy(&self) {}\n }\n \n mod waiter_queue {"}, {"sha": "2ba8454ff9245a6836b16843e3ace40e472ffcd9", "filename": "library/std/src/sys/itron/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -64,8 +64,10 @@ impl Mutex {\n             }\n         }\n     }\n+}\n \n-    pub unsafe fn destroy(&self) {\n+impl Drop for Mutex {\n+    fn drop(&mut self) {\n         if let Some(mtx) = self.mtx.get().map(|x| x.0) {\n             expect_success_aborting(unsafe { abi::del_mtx(mtx) }, &\"del_mtx\");\n         }"}, {"sha": "36534e0eff3fd91595f559ac011de1077a50f53d", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -1,4 +1,5 @@\n use crate::sys::locks::Mutex;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n use super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n@@ -7,16 +8,19 @@ pub struct Condvar {\n     inner: SpinMutex<WaitVariable<()>>,\n }\n \n-pub type MovableCondvar = Box<Condvar>;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n+\n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n impl Condvar {\n     pub const fn new() -> Condvar {\n         Condvar { inner: SpinMutex::new(WaitVariable::new(())) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn notify_one(&self) {\n         let _ = WaitQueue::notify_one(self.inner.lock());\n@@ -38,7 +42,4 @@ impl Condvar {\n         unsafe { mutex.lock() };\n         success\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "513cd77fd2aad17fff00752d6eba65d12b654929", "filename": "library/std/src/sys/sgx/mutex.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -1,11 +1,18 @@\n use super::waitqueue::{try_lock_or_false, SpinMutex, WaitQueue, WaitVariable};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct Mutex {\n     inner: SpinMutex<WaitVariable<bool>>,\n }\n \n // not movable: see UnsafeList implementation\n-pub type MovableMutex = Box<Mutex>;\n+pub(crate) type MovableMutex = LazyBox<Mutex>;\n+\n+impl LazyInit for Mutex {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {\n@@ -52,7 +59,4 @@ impl Mutex {\n             true\n         }\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "a97fb9ab026f02d57cc3f347ac5d62ac891d4c96", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -2,6 +2,7 @@\n mod tests;\n \n use crate::num::NonZeroUsize;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n use super::waitqueue::{\n     try_lock_or_false, NotifiedTcs, SpinMutex, SpinMutexGuard, WaitQueue, WaitVariable,\n@@ -13,7 +14,13 @@ pub struct RwLock {\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-pub type MovableRwLock = Box<RwLock>;\n+pub(crate) type MovableRwLock = LazyBox<RwLock>;\n+\n+impl LazyInit for RwLock {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n // Check at compile time that RwLock size matches C definition (see test_c_rwlock_initializer below)\n //\n@@ -168,9 +175,6 @@ impl RwLock {\n             unsafe { self.__read_unlock(rguard, wguard) };\n         }\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }\n \n // The following functions are needed by libunwind. These symbols are named"}, {"sha": "433abc895f5d5c5f7b9ecba4f513ae7a74bb4cca", "filename": "library/std/src/sys/solid/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -82,9 +82,11 @@ impl RwLock {\n         let rwl = self.raw();\n         expect_success_aborting(unsafe { abi::rwl_unl_rwl(rwl) }, &\"rwl_unl_rwl\");\n     }\n+}\n \n+impl Drop for RwLock {\n     #[inline]\n-    pub unsafe fn destroy(&self) {\n+    fn drop(&mut self) {\n         if let Some(rwl) = self.rwl.get().map(|x| x.0) {\n             expect_success_aborting(unsafe { abi::rwl_del_rwl(rwl) }, &\"rwl_del_rwl\");\n         }"}, {"sha": "a9a1a32c5afb09b41c434739d8de6bdcba73e194", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -24,9 +24,6 @@ impl Mutex {\n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n         self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_ok()\n@@ -118,12 +115,6 @@ impl Condvar {\n         Self { futex: AtomicU32::new(0) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     // All the memory orderings here are `Relaxed`,\n     // because synchronization is done by unlocking and locking the mutex.\n "}, {"sha": "1f902f50587d2193e8021d507edb01990e52800c", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -63,9 +63,6 @@ impl RwLock {\n         Self { state: AtomicU32::new(0), writer_notify: AtomicU32::new(0) }\n     }\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n         self.state"}, {"sha": "03400efa3c9aaf43d539d10d7fbea8bbadc95897", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -9,14 +9,14 @@ cfg_if::cfg_if! {\n     ))] {\n         mod futex;\n         mod futex_rwlock;\n-        pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n-        pub use futex_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use futex::{Mutex, MovableMutex, MovableCondvar};\n+        pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n     } else {\n         mod pthread_mutex;\n         mod pthread_rwlock;\n         mod pthread_condvar;\n-        pub use pthread_mutex::{Mutex, MovableMutex};\n-        pub use pthread_rwlock::{RwLock, MovableRwLock};\n-        pub use pthread_condvar::{Condvar, MovableCondvar};\n+        pub(crate) use pthread_mutex::{Mutex, MovableMutex};\n+        pub(crate) use pthread_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use pthread_condvar::MovableCondvar;\n     }\n }"}, {"sha": "61c28d696bcaa2dd52b7eaccb726347537ddd8ad", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -1,12 +1,13 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{pthread_mutex, Mutex};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n pub struct Condvar {\n     inner: UnsafeCell<libc::pthread_cond_t>,\n }\n \n-pub type MovableCondvar = Box<Condvar>;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n \n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n@@ -18,6 +19,14 @@ fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n     if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n }\n \n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        let mut condvar = Box::new(Self::new());\n+        unsafe { condvar.init() };\n+        condvar\n+    }\n+}\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n         // Might be moved and address is changing it is better to avoid\n@@ -32,14 +41,14 @@ impl Condvar {\n         target_os = \"android\",\n         target_os = \"redox\"\n     ))]\n-    pub unsafe fn init(&mut self) {}\n+    unsafe fn init(&mut self) {}\n \n     // NOTE: ESP-IDF's PTHREAD_COND_INITIALIZER support is not released yet\n     // So on that platform, init() should always be called\n     // Moreover, that platform does not have pthread_condattr_setclock support,\n     // hence that initialization should be skipped as well\n     #[cfg(target_os = \"espidf\")]\n-    pub unsafe fn init(&mut self) {\n+    unsafe fn init(&mut self) {\n         let r = libc::pthread_cond_init(self.inner.get(), crate::ptr::null());\n         assert_eq!(r, 0);\n     }\n@@ -52,7 +61,7 @@ impl Condvar {\n         target_os = \"redox\",\n         target_os = \"espidf\"\n     )))]\n-    pub unsafe fn init(&mut self) {\n+    unsafe fn init(&mut self) {\n         use crate::mem::MaybeUninit;\n         let mut attr = MaybeUninit::<libc::pthread_condattr_t>::uninit();\n         let r = libc::pthread_condattr_init(attr.as_mut_ptr());\n@@ -179,14 +188,14 @@ impl Condvar {\n \n     #[inline]\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_cond_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n \n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_cond_destroy(self.inner.get());\n         // On DragonFly pthread_cond_destroy() returns EINVAL if called on\n         // a condvar that was just initialized with\n@@ -195,3 +204,10 @@ impl Condvar {\n         debug_assert!(r == 0 || r == libc::EINVAL);\n     }\n }\n+\n+impl Drop for Condvar {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}"}, {"sha": "916e898d8906e2a8e9d22a44173d7773a92a6a45", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -1,12 +1,13 @@\n use crate::cell::UnsafeCell;\n use crate::mem::MaybeUninit;\n use crate::sys::cvt_nz;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n }\n \n-pub type MovableMutex = Box<Mutex>;\n+pub(crate) type MovableMutex = LazyBox<Mutex>;\n \n #[inline]\n pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n@@ -16,6 +17,14 @@ pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n+impl LazyInit for Mutex {\n+    fn init() -> Box<Self> {\n+        let mut mutex = Box::new(Self::new());\n+        unsafe { mutex.init() };\n+        mutex\n+    }\n+}\n+\n impl Mutex {\n     pub const fn new() -> Mutex {\n         // Might be moved to a different address, so it is better to avoid\n@@ -73,13 +82,13 @@ impl Mutex {\n     }\n     #[inline]\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         // On DragonFly pthread_mutex_destroy() returns EINVAL if called on a\n         // mutex that was just initialized with libc::PTHREAD_MUTEX_INITIALIZER.\n@@ -89,6 +98,13 @@ impl Mutex {\n     }\n }\n \n+impl Drop for Mutex {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}\n+\n pub(super) struct PthreadMutexAttr<'a>(pub &'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n \n impl Drop for PthreadMutexAttr<'_> {"}, {"sha": "75e5759c7879d07caeea7c9a88f1ebd9c756ced4", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -1,17 +1,24 @@\n use crate::cell::UnsafeCell;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct RwLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n     write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n-pub type MovableRwLock = Box<RwLock>;\n+pub(crate) type MovableRwLock = LazyBox<RwLock>;\n \n unsafe impl Send for RwLock {}\n unsafe impl Sync for RwLock {}\n \n+impl LazyInit for RwLock {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n+\n impl RwLock {\n     pub const fn new() -> RwLock {\n         RwLock {\n@@ -128,7 +135,7 @@ impl RwLock {\n         self.raw_unlock();\n     }\n     #[inline]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_rwlock_destroy(self.inner.get());\n         // On DragonFly pthread_rwlock_destroy() returns EINVAL if called on a\n         // rwlock that was just initialized with\n@@ -141,3 +148,10 @@ impl RwLock {\n         }\n     }\n }\n+\n+impl Drop for RwLock {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}"}, {"sha": "f27bf2b26bdaaaf88c397ffd5544e6600412298a", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -10,9 +10,6 @@ impl Condvar {\n         Condvar {}\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn notify_one(&self) {}\n \n@@ -26,7 +23,4 @@ impl Condvar {\n     pub unsafe fn wait_timeout(&self, _mutex: &Mutex, _dur: Duration) -> bool {\n         panic!(\"condvar wait not supported\");\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "56bad71b189f55a53578c44133ca8492314d10b9", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -32,7 +32,4 @@ impl Mutex {\n     pub unsafe fn try_lock(&self) -> bool {\n         self.locked.replace(true) == false\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "bf6e2d3d080b435e0f625877a8bbe05f501bc461", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -62,7 +62,4 @@ impl RwLock {\n     pub unsafe fn write_unlock(&self) {\n         assert_eq!(self.mode.replace(0), -1);\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "55b5ad314daf023ab0b3ca11d835ec740c10a827", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -54,8 +54,8 @@ cfg_if::cfg_if! {\n             #![allow(unsafe_op_in_unsafe_fn)]\n             mod futex;\n             mod futex_rwlock;\n-            pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n-            pub use futex_rwlock::{RwLock, MovableRwLock};\n+            pub(crate) use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+            pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n         }\n         #[path = \"atomics/futex.rs\"]\n         pub mod futex;"}, {"sha": "59e2c1be0f0f2dc7f86bed106a1f01e061a2d0fe", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -18,9 +18,6 @@ impl Condvar {\n         Condvar { inner: UnsafeCell::new(c::CONDITION_VARIABLE_INIT) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         let r = c::SleepConditionVariableSRW(self.inner.get(), mutex::raw(mutex), c::INFINITE, 0);\n@@ -51,8 +48,4 @@ impl Condvar {\n     pub unsafe fn notify_all(&self) {\n         c::WakeAllConditionVariable(self.inner.get())\n     }\n-\n-    pub unsafe fn destroy(&self) {\n-        // ...\n-    }\n }"}, {"sha": "08f55844a0efa23bdf56f9ee29c8cd333c34f81a", "filename": "library/std/src/sys/windows/locks/mutex.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -53,9 +53,4 @@ impl Mutex {\n     pub unsafe fn unlock(&self) {\n         c::ReleaseSRWLockExclusive(raw(self));\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        // SRWLock does not need to be destroyed.\n-    }\n }"}, {"sha": "a32df85e2f63c266ddd9693d9a1ef4a03bb9f96d", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -38,9 +38,4 @@ impl RwLock {\n     pub unsafe fn write_unlock(&self) {\n         c::ReleaseSRWLockExclusive(self.inner.get())\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        // ...\n-    }\n }"}, {"sha": "1def0518e0a6fff0825ea90205c2c7b805d82cbb", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -15,9 +15,7 @@ pub struct Condvar {\n impl Condvar {\n     /// Creates a new condition variable for use.\n     pub fn new() -> Self {\n-        let mut c = imp::MovableCondvar::from(imp::Condvar::new());\n-        unsafe { c.init() };\n-        Self { inner: c, check: CondvarCheck::new() }\n+        Self { inner: imp::MovableCondvar::new(), check: CondvarCheck::new() }\n     }\n \n     /// Signals one waiter on this condition variable to wake up.\n@@ -55,9 +53,3 @@ impl Condvar {\n         self.inner.wait_timeout(mutex.raw(), dur)\n     }\n }\n-\n-impl Drop for Condvar {\n-    fn drop(&mut self) {\n-        unsafe { self.inner.destroy() };\n-    }\n-}"}, {"sha": "ce8f36704877fe390558863f5821fc40fcd3c60b", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -1,6 +1,7 @@\n use crate::ptr;\n use crate::sync::atomic::{AtomicPtr, Ordering};\n use crate::sys::locks as imp;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::sys_common::mutex::MovableMutex;\n \n pub trait CondvarCheck {\n@@ -9,7 +10,7 @@ pub trait CondvarCheck {\n \n /// For boxed mutexes, a `Condvar` will check it's only ever used with the same\n /// mutex, based on its (stable) address.\n-impl CondvarCheck for Box<imp::Mutex> {\n+impl<T: LazyInit> CondvarCheck for LazyBox<T> {\n     type Check = SameMutexCheck;\n }\n "}, {"sha": "647c13d243724122f1a37cd0cc836b1d317b5c1b", "filename": "library/std/src/sys_common/lazy_box.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -0,0 +1,77 @@\n+#![allow(dead_code)] // Only used on some platforms.\n+\n+// This is used to wrap pthread {Mutex, Condvar, RwLock} in.\n+\n+use crate::marker::PhantomData;\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr::null_mut;\n+use crate::sync::atomic::{\n+    AtomicPtr,\n+    Ordering::{AcqRel, Acquire},\n+};\n+\n+pub(crate) struct LazyBox<T: LazyInit> {\n+    ptr: AtomicPtr<T>,\n+    _phantom: PhantomData<T>,\n+}\n+\n+pub(crate) trait LazyInit {\n+    /// This is called before the box is allocated, to provide the value to\n+    /// move into the new box.\n+    ///\n+    /// It might be called more than once per LazyBox, as multiple threads\n+    /// might race to initialize it concurrently, each constructing and initializing\n+    /// their own box. (All but one of them will be destroyed right after.)\n+    fn init() -> Box<Self>;\n+}\n+\n+impl<T: LazyInit> LazyBox<T> {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { ptr: AtomicPtr::new(null_mut()), _phantom: PhantomData }\n+    }\n+\n+    #[inline]\n+    fn get_pointer(&self) -> *mut T {\n+        let ptr = self.ptr.load(Acquire);\n+        if ptr.is_null() { self.initialize() } else { ptr }\n+    }\n+\n+    #[cold]\n+    fn initialize(&self) -> *mut T {\n+        let new_ptr = Box::into_raw(T::init());\n+        match self.ptr.compare_exchange(null_mut(), new_ptr, AcqRel, Acquire) {\n+            Ok(_) => new_ptr,\n+            Err(ptr) => {\n+                // Lost the race to another thread.\n+                // Drop the box we created, and use the one from the other thread instead.\n+                drop(unsafe { Box::from_raw(new_ptr) });\n+                ptr\n+            }\n+        }\n+    }\n+}\n+\n+impl<T: LazyInit> Deref for LazyBox<T> {\n+    type Target = T;\n+    #[inline]\n+    fn deref(&self) -> &T {\n+        unsafe { &*self.get_pointer() }\n+    }\n+}\n+\n+impl<T: LazyInit> DerefMut for LazyBox<T> {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut T {\n+        unsafe { &mut *self.get_pointer() }\n+    }\n+}\n+\n+impl<T: LazyInit> Drop for LazyBox<T> {\n+    fn drop(&mut self) {\n+        let ptr = *self.ptr.get_mut();\n+        if !ptr.is_null() {\n+            drop(unsafe { Box::from_raw(ptr) });\n+        }\n+    }\n+}"}, {"sha": "80f56bf7522b67edbf547f77cf8707fded8c9b21", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -24,6 +24,7 @@ pub mod backtrace;\n pub mod condvar;\n pub mod fs;\n pub mod io;\n+pub mod lazy_box;\n pub mod memchr;\n pub mod mutex;\n pub mod process;"}, {"sha": "36ea888d8de499cb7d3b5a42dac69a32f11a5781", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -61,9 +61,7 @@ unsafe impl Sync for MovableMutex {}\n impl MovableMutex {\n     /// Creates a new mutex.\n     pub fn new() -> Self {\n-        let mut mutex = imp::MovableMutex::from(imp::Mutex::new());\n-        unsafe { mutex.init() };\n-        Self(mutex)\n+        Self(imp::MovableMutex::new())\n     }\n \n     pub(super) fn raw(&self) -> &imp::Mutex {\n@@ -92,9 +90,3 @@ impl MovableMutex {\n         self.0.unlock()\n     }\n }\n-\n-impl Drop for MovableMutex {\n-    fn drop(&mut self) {\n-        unsafe { self.0.destroy() };\n-    }\n-}"}, {"sha": "8921af311d4152bb7b6fc7b4c37763ce35e14915", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -168,13 +168,6 @@ impl<T> ReentrantMutex<T> {\n     }\n }\n \n-impl<T> Drop for ReentrantMutex<T> {\n-    fn drop(&mut self) {\n-        // Safety: We're the unique owner of this mutex and not going to use it afterwards.\n-        unsafe { self.mutex.destroy() }\n-    }\n-}\n-\n impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n "}, {"sha": "abc9fd561f1f60d89d97157474be1274a6b32007", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ec02267a0b84d6a17357c1a0da46093ba5ad1d/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=e9ec02267a0b84d6a17357c1a0da46093ba5ad1d", "patch": "@@ -74,7 +74,7 @@ pub struct MovableRwLock(imp::MovableRwLock);\n impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n     pub fn new() -> Self {\n-        Self(imp::MovableRwLock::from(imp::RwLock::new()))\n+        Self(imp::MovableRwLock::new())\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n@@ -126,9 +126,3 @@ impl MovableRwLock {\n         self.0.write_unlock()\n     }\n }\n-\n-impl Drop for MovableRwLock {\n-    fn drop(&mut self) {\n-        unsafe { self.0.destroy() };\n-    }\n-}"}]}