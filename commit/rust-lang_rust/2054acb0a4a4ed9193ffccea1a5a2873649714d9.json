{"sha": "2054acb0a4a4ed9193ffccea1a5a2873649714d9", "node_id": "C_kwDOAAsO6NoAKDIwNTRhY2IwYTRhNGVkOTE5M2ZmY2NlYTFhNWEyODczNjQ5NzE0ZDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T09:19:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T09:19:09Z"}, "message": "Rollup merge of #112103 - Mark-Simulacrum:bootstrap-update, r=clubby789\n\nBootstrap update to 1.71 beta\n\nBest reviewed by-commit.", "tree": {"sha": "a118252d9b2870f1da5bf7cad5085d2ee5f7626b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a118252d9b2870f1da5bf7cad5085d2ee5f7626b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2054acb0a4a4ed9193ffccea1a5a2873649714d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdxENCRBK7hj4Ov3rIwAAJkgIACfW2Cqjx/o7RwcFHC5+1k6Q\n41kcJ0I7LQhA9ICQgPsuc3J2A7AqgVYA4ywU+im7GVulvVg5rQZ+8gj1qDZbgUyk\neph0PJy2fY8zHw768q4xw8MqO1nRYtGJDHP+fm4kxad9GJ2dpoY6CObqeLYDTTSE\nuosNPSUPOx8bRK2Rt8Huqa2TSc66f+hwe7J1cNugpjkAMBC+K63wHUKAHrq/l5Lv\nujal4SnqPvLLFw2cmjpcgPXQ8hO3uGQvLC/VtVXXHVy5NZRi/dBlqp67x1qs1sUM\nAehxtKJ9ZELFy/M3zQ+WetcrTg73yMPk1hSzjDzQlan14wfzz062+Ms9SLbOwrI=\n=v2lG\n-----END PGP SIGNATURE-----\n", "payload": "tree a118252d9b2870f1da5bf7cad5085d2ee5f7626b\nparent 9e108f89222e10c3ccd6a899a6b1ea71a91fc5ea\nparent 42e757192d9a4855e15f3244864fe305cd88359b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685524749 +0200\ncommitter GitHub <noreply@github.com> 1685524749 +0200\n\nRollup merge of #112103 - Mark-Simulacrum:bootstrap-update, r=clubby789\n\nBootstrap update to 1.71 beta\n\nBest reviewed by-commit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2054acb0a4a4ed9193ffccea1a5a2873649714d9", "html_url": "https://github.com/rust-lang/rust/commit/2054acb0a4a4ed9193ffccea1a5a2873649714d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2054acb0a4a4ed9193ffccea1a5a2873649714d9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e108f89222e10c3ccd6a899a6b1ea71a91fc5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e108f89222e10c3ccd6a899a6b1ea71a91fc5ea", "html_url": "https://github.com/rust-lang/rust/commit/9e108f89222e10c3ccd6a899a6b1ea71a91fc5ea"}, {"sha": "42e757192d9a4855e15f3244864fe305cd88359b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e757192d9a4855e15f3244864fe305cd88359b", "html_url": "https://github.com/rust-lang/rust/commit/42e757192d9a4855e15f3244864fe305cd88359b"}], "stats": {"total": 978, "additions": 459, "deletions": 519}, "files": [{"sha": "0170d52e82a2ef1b024708cdf3884af957fe9675", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -131,7 +131,7 @@ declare_features! (\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n     /// Allows using `#[debugger_visualizer]` attribute.\n-    (accepted, debugger_visualizer, \"CURRENT_RUSTC_VERSION\", Some(95939), None),\n+    (accepted, debugger_visualizer, \"1.71.0\", Some(95939), None),\n     /// Allows rustc to inject a default alloc_error_handler\n     (accepted, default_alloc_error_handler, \"1.68.0\", Some(66741), None),\n     /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n@@ -281,7 +281,7 @@ declare_features! (\n     /// Allows use of the postfix `?` operator in expressions.\n     (accepted, question_mark, \"1.13.0\", Some(31436), None),\n     /// Allows the use of raw-dylibs (RFC 2627).\n-    (accepted, raw_dylib, \"CURRENT_RUSTC_VERSION\", Some(58713), None),\n+    (accepted, raw_dylib, \"1.71.0\", Some(58713), None),\n     /// Allows keywords to be escaped for use as identifiers.\n     (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n     /// Allows relaxing the coherence rules such that"}, {"sha": "dde9890dfa5d68f6b0201cdef549515ec21cd316", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -165,7 +165,7 @@ declare_features! (\n     /// Allows the `multiple_supertrait_upcastable` lint.\n     (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n     /// Allow negative trait bounds. This is an internal-only feature for testing the trait solver!\n-    (incomplete, negative_bounds, \"CURRENT_RUSTC_VERSION\", None, None),\n+    (incomplete, negative_bounds, \"1.71.0\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n@@ -314,15 +314,15 @@ declare_features! (\n     /// Allows async functions to be declared, implemented, and used in traits.\n     (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Allows builtin # foo() syntax\n-    (active, builtin_syntax, \"CURRENT_RUSTC_VERSION\", Some(110680), None),\n+    (active, builtin_syntax, \"1.71.0\", Some(110680), None),\n     /// Allows `c\"foo\"` literals.\n-    (active, c_str_literals, \"CURRENT_RUSTC_VERSION\", Some(105723), None),\n+    (active, c_str_literals, \"1.71.0\", Some(105723), None),\n     /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n     /// Allows the use of `#[cfg(overflow_checks)` to check if integer overflow behaviour.\n-    (active, cfg_overflow_checks, \"CURRENT_RUSTC_VERSION\", Some(111466), None),\n+    (active, cfg_overflow_checks, \"1.71.0\", Some(111466), None),\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`.\n@@ -338,7 +338,7 @@ declare_features! (\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n     /// Allows to use the `#[cfi_encoding = \"\"]` attribute.\n-    (active, cfi_encoding, \"CURRENT_RUSTC_VERSION\", Some(89653), None),\n+    (active, cfi_encoding, \"1.71.0\", Some(89653), None),\n     /// Allows `for<...>` on closures and generators.\n     (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators."}, {"sha": "8c4f6a73d7fea3edf07dd1775f062f7b14aca16b", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -38,7 +38,6 @@ extern \"Rust\" {\n     #[rustc_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n \n-    #[cfg(not(bootstrap))]\n     static __rust_no_alloc_shim_is_unstable: u8;\n }\n \n@@ -96,7 +95,6 @@ pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n     unsafe {\n         // Make sure we don't accidentally allow omitting the allocator shim in\n         // stable code until it is actually stabilized.\n-        #[cfg(not(bootstrap))]\n         core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);\n \n         __rust_alloc(layout.size(), layout.align())"}, {"sha": "59e3f887b523225948bdd3f14074c7cd19edf5c0", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -2624,7 +2624,7 @@ impl ToString for String {\n }\n \n #[cfg(not(no_global_oom_handling))]\n-#[stable(feature = \"fmt_arguments_to_string_specialization\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"fmt_arguments_to_string_specialization\", since = \"1.71.0\")]\n impl ToString for fmt::Arguments<'_> {\n     #[inline]\n     fn to_string(&self) -> String {"}, {"sha": "50c7516b7fe8dd5464724d5567706b21b17b45a6", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -81,7 +81,7 @@ use crate::str;\n #[derive(Hash)]\n #[stable(feature = \"core_c_str\", since = \"1.64.0\")]\n #[rustc_has_incoherent_inherent_impls]\n-#[cfg_attr(not(bootstrap), lang = \"CStr\")]\n+#[lang = \"CStr\"]\n // FIXME:\n // `fn from` in `impl From<&CStr> for Box<CStr>` current implementation relies\n // on `CStr` being layout-compatible with `[u8]`.\n@@ -531,8 +531,8 @@ impl CStr {\n     /// # }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"cstr_is_empty\", since = \"1.71.0\")]\n+    #[rustc_const_stable(feature = \"cstr_is_empty\", since = \"1.71.0\")]\n     pub const fn is_empty(&self) -> bool {\n         // SAFETY: We know there is at least one byte; for empty strings it\n         // is the NUL terminator."}, {"sha": "86ea154a8868ea730b6962d1fa7e1df6fbd06fa9", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -202,7 +202,7 @@ mod c_long_definition {\n //     would be uninhabited and at least dereferencing such pointers would\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n-#[cfg_attr(not(bootstrap), lang = \"c_void\")]\n+#[lang = \"c_void\"]\n #[cfg_attr(not(doc), repr(u8))] // work around https://github.com/rust-lang/rust/issues/90435\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {"}, {"sha": "794a57f09226c035c50fda5d4f157b94f029ca60", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -695,7 +695,7 @@ pub trait BuildHasher {\n     ///     bh.hash_one(&OrderAmbivalentPair(2, 10))\n     /// );\n     /// ```\n-    #[stable(feature = \"build_hasher_simple_hash_one\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"build_hasher_simple_hash_one\", since = \"1.71.0\")]\n     fn hash_one<T: Hash>(&self, x: T) -> u64\n     where\n         Self: Sized,"}, {"sha": "6dca1fe1e69615600d11788dc8ab382411155378", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -1385,7 +1385,6 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This is not expected to ever be exposed directly to users, rather it\n     /// may eventually be exposed through some more-constrained API.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     #[rustc_nounwind]\n     pub fn transmute_unchecked<Src, Dst>(src: Src) -> Dst;\n@@ -1425,19 +1424,11 @@ extern \"rust-intrinsic\" {\n     /// returned value will result in undefined behavior.\n     ///\n     /// The stabilized version of this intrinsic is [`pointer::offset`].\n-    #[cfg(not(bootstrap))]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[rustc_nounwind]\n     pub fn offset<Ptr, Delta>(dst: Ptr, offset: Delta) -> Ptr;\n \n-    /// The bootstrap version of this is more restricted.\n-    #[cfg(bootstrap)]\n-    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n-    #[rustc_nounwind]\n-    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n-\n     /// Calculates the offset from a pointer, potentially wrapping.\n     ///\n     /// This is implemented as an intrinsic to avoid converting to and from an\n@@ -2260,7 +2251,7 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the pointer is a local without\n     /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[rustc_nounwind]\n     pub fn read_via_copy<T>(ptr: *const T) -> T;\n \n@@ -2270,7 +2261,6 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the pointer is a local without\n     /// projections (`write_via_move(ptr, x)`, not `write_via_move(*ptr, x)`) so\n     /// that it trivially obeys runtime-MIR rules about derefs in operands.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[rustc_nounwind]\n     pub fn write_via_move<T>(ptr: *mut T, value: T);\n@@ -2832,24 +2822,3 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n         write_bytes(dst, val, count)\n     }\n }\n-\n-/// Polyfill for bootstrap\n-#[cfg(bootstrap)]\n-pub const unsafe fn transmute_unchecked<Src, Dst>(src: Src) -> Dst {\n-    use crate::mem::*;\n-    // SAFETY: It's a transmute -- the caller promised it's fine.\n-    unsafe { transmute_copy(&ManuallyDrop::new(src)) }\n-}\n-\n-/// Polyfill for bootstrap\n-#[cfg(bootstrap)]\n-pub const unsafe fn write_via_move<T>(ptr: *mut T, value: T) {\n-    use crate::mem::*;\n-    // SAFETY: the caller must guarantee that `dst` is valid for writes.\n-    // `dst` cannot overlap `src` because the caller has mutable access\n-    // to `dst` while `src` is owned by this function.\n-    unsafe {\n-        copy_nonoverlapping::<T>(&value, ptr, 1);\n-        forget(value);\n-    }\n-}"}, {"sha": "2d2d5d491758874f127817bf2c1d64f5a3bb1751", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -971,15 +971,14 @@ pub trait Tuple {}\n pub trait PointerLike {}\n \n /// A marker for types which can be used as types of `const` generic parameters.\n-#[cfg_attr(not(bootstrap), lang = \"const_param_ty\")]\n+#[lang = \"const_param_ty\"]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n pub trait ConstParamTy: StructuralEq {}\n \n /// Derive macro generating an impl of the trait `ConstParamTy`.\n #[rustc_builtin_macro]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-#[cfg(not(bootstrap))]\n pub macro ConstParamTy($item:item) {\n     /* compiler built-in */\n }"}, {"sha": "39c9a04eea92b36e3bbe6fcfce4554f71188023e", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -968,7 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n-/// # #![cfg_attr(not(bootstrap), allow(dropping_copy_types))]\n+/// # #![allow(dropping_copy_types)]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///\n@@ -1316,7 +1316,6 @@ impl<T> SizedTypeProperties for T {}\n ///\n /// assert_eq!(mem::offset_of!(NestedA, b.0), 0);\n /// ```\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"offset_of\", issue = \"106655\")]\n #[allow_internal_unstable(builtin_syntax)]\n pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {"}, {"sha": "7f06e170ad0f022d763e1b7434122f3919db0ce4", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -769,8 +769,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn is_positive(self) -> bool {\n                     self.get().is_positive()\n                 }\n@@ -794,8 +794,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn is_negative(self) -> bool {\n                     self.get().is_negative()\n                 }\n@@ -819,8 +819,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn checked_neg(self) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_neg() {\n                         // SAFETY: negation of nonzero cannot yield zero values.\n@@ -851,8 +851,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn overflowing_neg(self) -> ($Ty, bool) {\n                     let (result, overflow) = self.get().overflowing_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values.\n@@ -884,8 +884,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn saturating_neg(self) -> $Ty {\n                     if let Some(result) = self.checked_neg() {\n                         return result;\n@@ -916,16 +916,16 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn wrapping_neg(self) -> $Ty {\n                     let result = self.get().wrapping_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values.\n                     unsafe { $Ty::new_unchecked(result) }\n                 }\n             }\n \n-            #[stable(feature = \"signed_nonzero_neg\", since = \"CURRENT_RUSTC_VERSION\")]\n+            #[stable(feature = \"signed_nonzero_neg\", since = \"1.71.0\")]\n             impl Neg for $Ty {\n                 type Output = $Ty;\n \n@@ -937,7 +937,7 @@ macro_rules! nonzero_signed_operations {\n             }\n \n             forward_ref_unop! { impl Neg, neg for $Ty,\n-                #[stable(feature = \"signed_nonzero_neg\", since = \"CURRENT_RUSTC_VERSION\")] }\n+                #[stable(feature = \"signed_nonzero_neg\", since = \"1.71.0\")] }\n         )+\n     }\n }"}, {"sha": "c579c3672a72d17fc0e69d82795c6a0b658ca1d3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -916,16 +916,8 @@ impl<T: ?Sized> *const T {\n     where\n         T: Sized,\n     {\n-        #[cfg(bootstrap)]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            self.offset(count as isize)\n-        }\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            intrinsics::offset(self, count)\n-        }\n+        unsafe { intrinsics::offset(self, count) }\n     }\n \n     /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n@@ -1195,7 +1187,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1236,7 +1228,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "d0cb2f715d067161268ca155f739c249b2ff50a3", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -1139,7 +1139,7 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// [valid]: self#safety\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n #[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read<T>(src: *const T) -> T {\n@@ -1256,7 +1256,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n #[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read_unaligned<T>(src: *const T) -> T {"}, {"sha": "c6f43857887c96e02e71bc25caea546a07a6673d", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -473,20 +473,10 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n-        #[cfg(bootstrap)]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         // The obtained pointer is valid for writes since the caller must\n         // guarantee that it points to the same allocated object as `self`.\n-        unsafe {\n-            intrinsics::offset(self, count) as *mut T\n-        }\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: the caller must uphold the safety contract for `offset`.\n-        // The obtained pointer is valid for writes since the caller must\n-        // guarantee that it points to the same allocated object as `self`.\n-        unsafe {\n-            intrinsics::offset(self, count)\n-        }\n+        unsafe { intrinsics::offset(self, count) }\n     }\n \n     /// Calculates the offset from a pointer in bytes.\n@@ -1026,16 +1016,8 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n-        #[cfg(bootstrap)]\n-        // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            self.offset(count as isize)\n-        }\n-        #[cfg(not(bootstrap))]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            intrinsics::offset(self, count)\n-        }\n+        unsafe { intrinsics::offset(self, count) }\n     }\n \n     /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n@@ -1305,7 +1287,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1346,7 +1328,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "c87af35fbc44972314bd69f2875ddc3acb954233", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -1854,7 +1854,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_slice_split_at_not_mut\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_slice_split_at_not_mut\", since = \"1.71.0\")]\n     #[rustc_allow_const_fn_unstable(slice_split_at_unchecked)]\n     #[inline]\n     #[track_caller]"}, {"sha": "a1388dfeee643cd2e87b2fde1987d812018aa4da", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -100,7 +100,7 @@ macro_rules! tuple_impls {\n             }\n         }\n \n-        #[stable(feature = \"array_tuple_conv\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.71.0\")]\n         impl<T> From<[T; ${count(T)}]> for ($(${ignore(T)} T,)+) {\n             #[inline]\n             #[allow(non_snake_case)]\n@@ -110,7 +110,7 @@ macro_rules! tuple_impls {\n             }\n         }\n \n-        #[stable(feature = \"array_tuple_conv\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.71.0\")]\n         impl<T> From<($(${ignore(T)} T,)+)> for [T; ${count(T)}] {\n             #[inline]\n             #[allow(non_snake_case)]"}, {"sha": "64193e115589059a510916ad142c5e7a11d0506f", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -1,5 +1,5 @@\n #[test]\n-#[cfg_attr(not(bootstrap), allow(suspicious_double_ref_op))]\n+#[allow(suspicious_double_ref_op)]\n fn test_borrowed_clone() {\n     let x = 5;\n     let y: &i32 = &x;"}, {"sha": "3e6d31fcd2fb81e1f871f9b1cf4ec52984a14ec4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -109,7 +109,7 @@\n #![feature(utf8_chunks)]\n #![feature(is_ascii_octdigit)]\n #![feature(get_many_mut)]\n-#![cfg_attr(not(bootstrap), feature(offset_of))]\n+#![feature(offset_of)]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(fuzzy_provenance_casts)]\n "}, {"sha": "5c2e18745ea21d7719bc61b4993613944c31d5e6", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -366,7 +366,6 @@ fn const_maybe_uninit() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of() {\n     #[repr(C)]\n     struct Foo {\n@@ -391,7 +390,7 @@ fn offset_of() {\n     struct Generic<T> {\n         x: u8,\n         y: u32,\n-        z: T\n+        z: T,\n     }\n \n     trait Trait {}\n@@ -409,7 +408,6 @@ fn offset_of() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_union() {\n     #[repr(C)]\n     union Foo {\n@@ -429,7 +427,6 @@ fn offset_of_union() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_dst() {\n     #[repr(C)]\n     struct Alpha {\n@@ -469,7 +466,6 @@ fn offset_of_dst() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_packed() {\n     #[repr(C, packed)]\n     struct Foo {\n@@ -482,7 +478,6 @@ fn offset_of_packed() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_projection() {\n     #[repr(C)]\n     struct Foo {\n@@ -503,7 +498,6 @@ fn offset_of_projection() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_alias() {\n     #[repr(C)]\n     struct Foo {\n@@ -518,7 +512,6 @@ fn offset_of_alias() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn const_offset_of() {\n     #[repr(C)]\n     struct Foo {\n@@ -534,7 +527,6 @@ fn const_offset_of() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_without_const_promotion() {\n     #[repr(C)]\n     struct Foo<SuppressConstPromotion> {\n@@ -555,7 +547,6 @@ fn offset_of_without_const_promotion() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_addr() {\n     #[repr(C)]\n     struct Foo {"}, {"sha": "274af08a3881c963c7c7ec4ea47f99c9e03ec286", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -437,7 +437,7 @@ impl<T: AsHandle> AsHandle for &mut T {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n /// This impl allows implementing traits that require `AsHandle` on Arc.\n /// ```\n /// # #[cfg(windows)] mod group_cfg {\n@@ -457,15 +457,15 @@ impl<T: AsHandle> AsHandle for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsHandle> AsHandle for crate::rc::Rc<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         (**self).as_handle()\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsHandle> AsHandle for Box<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {"}, {"sha": "6359835cad5d9221888a7f686d2045caf4eb9078", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9", "patch": "@@ -254,7 +254,7 @@ impl<T: AsSocket> AsSocket for &mut T {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n /// This impl allows implementing traits that require `AsSocket` on Arc.\n /// ```\n /// # #[cfg(windows)] mod group_cfg {\n@@ -274,15 +274,15 @@ impl<T: AsSocket> AsSocket for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsSocket> AsSocket for crate::rc::Rc<T> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         (**self).as_socket()\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsSocket> AsSocket for Box<T> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {"}, {"sha": "89ad4e0a649c1e56dfdbe8d91eaf4c456cf38915", "filename": "src/stage0.json", "status": "modified", "additions": 408, "deletions": 398, "changes": 806, "blob_url": "https://github.com/rust-lang/rust/blob/2054acb0a4a4ed9193ffccea1a5a2873649714d9/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/2054acb0a4a4ed9193ffccea1a5a2873649714d9/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=2054acb0a4a4ed9193ffccea1a5a2873649714d9"}]}