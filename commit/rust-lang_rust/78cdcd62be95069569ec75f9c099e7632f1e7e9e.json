{"sha": "78cdcd62be95069569ec75f9c099e7632f1e7e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Y2RjZDYyYmU5NTA2OTU2OWVjNzVmOWMwOTllNzYzMmYxZTdlOWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T14:56:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:38:37Z"}, "message": "Don't limit vector size", "tree": {"sha": "a25eeddaf79aaa8b151e52d1e5a96b7298eb0406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a25eeddaf79aaa8b151e52d1e5a96b7298eb0406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cdcd62be95069569ec75f9c099e7632f1e7e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cdcd62be95069569ec75f9c099e7632f1e7e9e", "html_url": "https://github.com/rust-lang/rust/commit/78cdcd62be95069569ec75f9c099e7632f1e7e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cdcd62be95069569ec75f9c099e7632f1e7e9e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73fd31129136f1ad204084a51dc6f84f645d3c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/73fd31129136f1ad204084a51dc6f84f645d3c62", "html_url": "https://github.com/rust-lang/rust/commit/73fd31129136f1ad204084a51dc6f84f645d3c62"}], "stats": {"total": 7, "additions": 1, "deletions": 6}, "files": [{"sha": "6bef21afff2127a40a1718c8c0d75d54a1712884", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78cdcd62be95069569ec75f9c099e7632f1e7e9e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cdcd62be95069569ec75f9c099e7632f1e7e9e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=78cdcd62be95069569ec75f9c099e7632f1e7e9e", "patch": "@@ -72,12 +72,7 @@ pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types:\n                 tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap(),\n             );\n             let lane_type = clif_type_from_ty(tcx, lane_type.ty)?;\n-            let simd_type = lane_type.by(u16::try_from(lane_count).unwrap());\n-            if simd_type.map(|t| t.bits()) == Some(128) {\n-                return simd_type;\n-            } else {\n-                return None; // Not yet implemented\n-            }\n+            return lane_type.by(u16::try_from(lane_count).unwrap());\n         }\n         _ => return None,\n     })"}]}