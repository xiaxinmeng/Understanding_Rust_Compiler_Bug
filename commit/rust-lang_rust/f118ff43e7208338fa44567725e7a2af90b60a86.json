{"sha": "f118ff43e7208338fa44567725e7a2af90b60a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMThmZjQzZTcyMDgzMzhmYTQ0NTY3NzI1ZTdhMmFmOTBiNjBhODY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-04T02:55:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-04T03:37:33Z"}, "message": "implement the unchecked_ intrinsics; add all the doctests from one of the integer modules", "tree": {"sha": "f7aec8e2fa6452650547e2e994521af57a0e8e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7aec8e2fa6452650547e2e994521af57a0e8e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f118ff43e7208338fa44567725e7a2af90b60a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f118ff43e7208338fa44567725e7a2af90b60a86", "html_url": "https://github.com/rust-lang/rust/commit/f118ff43e7208338fa44567725e7a2af90b60a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f118ff43e7208338fa44567725e7a2af90b60a86/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79ab4f0e8c618c94aae163377bcbedf9159c2489", "url": "https://api.github.com/repos/rust-lang/rust/commits/79ab4f0e8c618c94aae163377bcbedf9159c2489", "html_url": "https://github.com/rust-lang/rust/commit/79ab4f0e8c618c94aae163377bcbedf9159c2489"}], "stats": {"total": 198, "additions": 196, "deletions": 2}, "files": [{"sha": "35d3ab213afe58dc4ef9257227655a6b3601a5a0", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f118ff43e7208338fa44567725e7a2af90b60a86/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f118ff43e7208338fa44567725e7a2af90b60a86/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=f118ff43e7208338fa44567725e7a2af90b60a86", "patch": "@@ -226,6 +226,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         // These ops can have an RHS with a different numeric type.\n         if right_kind.is_int() && (bin_op == Shl || bin_op == Shr) {\n+            // FIXME: The \"as u32\" here could hide an overflow\n             return match bin_op {\n                 Shl => int_shift!(left_kind, overflowing_shl, l, r as u32),\n                 Shr => int_shift!(left_kind, overflowing_shr, l, r as u32),"}, {"sha": "ae2d0b4f5dea3d966ba5d9a47d9df3a59ec7cd3f", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f118ff43e7208338fa44567725e7a2af90b60a86/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f118ff43e7208338fa44567725e7a2af90b60a86/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=f118ff43e7208338fa44567725e7a2af90b60a86", "patch": "@@ -407,6 +407,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n+            \"unchecked_shl\" => {\n+                // FIXME Check for too-wide shifts\n+                self.intrinsic_overflowing(mir::BinOp::Shl, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n+            \"unchecked_shr\" => {\n+                // FIXME Check for too-wide shifts\n+                self.intrinsic_overflowing(mir::BinOp::Shr, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n+            \"unchecked_div\" => {\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs == 0 {\n+                    return Err(EvalError::Intrinsic(format!(\"Division by 0 in unchecked_div\")));\n+                }\n+                self.intrinsic_overflowing(mir::BinOp::Div, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n+            \"unchecked_rem\" => {\n+                let rhs = self.value_to_primval(arg_vals[1], substs.type_at(0))?.to_bytes()?;\n+                if rhs == 0 {\n+                    return Err(EvalError::Intrinsic(format!(\"Division by 0 in unchecked_rem\")));\n+                }\n+                self.intrinsic_overflowing(mir::BinOp::Rem, &args[0], &args[1], dest, dest_ty)?;\n+            }\n+\n             \"uninit\" => {\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes();\n                 let uninit = |this: &mut Self, val: Value| {"}, {"sha": "3773e699ddf36e0dcff1f984f93a82f91a4743cf", "filename": "tests/run-pass-fullmir/integer-ops.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/f118ff43e7208338fa44567725e7a2af90b60a86/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f118ff43e7208338fa44567725e7a2af90b60a86/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Finteger-ops.rs?ref=f118ff43e7208338fa44567725e7a2af90b60a86", "patch": "@@ -0,0 +1,167 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::i32;\n+\n+pub fn main() {\n+    assert_eq!(i8::min_value(), -128);\n+\n+    assert_eq!(i8::max_value(), 127);\n+\n+    assert_eq!(i32::from_str_radix(\"A\", 16), Ok(10));\n+\n+    let n = -0b1000_0000i8;\n+    assert_eq!(n.count_ones(), 1);\n+\n+    let n = -0b1000_0000i8;\n+    assert_eq!(n.count_zeros(), 7);\n+\n+    let n = -1i16;\n+    assert_eq!(n.leading_zeros(), 0);\n+\n+    let n = -4i8;\n+    assert_eq!(n.trailing_zeros(), 2);\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    let m = -0x76543210FEDCBA99i64;\n+    assert_eq!(n.rotate_left(32), m);\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    let m = -0xFEDCBA987654322i64;\n+    assert_eq!(n.rotate_right(4), m);\n+\n+    let n =  0x0123456789ABCDEFi64;\n+    let m = -0x1032547698BADCFFi64;\n+    assert_eq!(n.swap_bytes(), m);\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"big\") {\n+        assert_eq!(i64::from_be(n), n)\n+    } else {\n+        assert_eq!(i64::from_be(n), n.swap_bytes())\n+    }\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"little\") {\n+        assert_eq!(i64::from_le(n), n)\n+    } else {\n+        assert_eq!(i64::from_le(n), n.swap_bytes())\n+    }\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"big\") {\n+        assert_eq!(n.to_be(), n)\n+    } else {\n+        assert_eq!(n.to_be(), n.swap_bytes())\n+    }\n+\n+    let n = 0x0123456789ABCDEFi64;\n+    if cfg!(target_endian = \"little\") {\n+        assert_eq!(n.to_le(), n)\n+    } else {\n+        assert_eq!(n.to_le(), n.swap_bytes())\n+    }\n+\n+    assert_eq!(7i16.checked_add(32760), Some(32767));\n+    assert_eq!(8i16.checked_add(32760), None);\n+\n+    assert_eq!((-127i8).checked_sub(1), Some(-128));\n+    assert_eq!((-128i8).checked_sub(1), None);\n+\n+    assert_eq!(6i8.checked_mul(21), Some(126));\n+    assert_eq!(6i8.checked_mul(22), None);\n+\n+    assert_eq!((-127i8).checked_div(-1), Some(127));\n+    assert_eq!((-128i8).checked_div(-1), None);\n+    assert_eq!((1i8).checked_div(0), None);\n+\n+    assert_eq!(5i32.checked_rem(2), Some(1));\n+    assert_eq!(5i32.checked_rem(0), None);\n+    assert_eq!(i32::MIN.checked_rem(-1), None);\n+\n+    assert_eq!(5i32.checked_neg(), Some(-5));\n+    assert_eq!(i32::MIN.checked_neg(), None);\n+\n+    assert_eq!(0x10i32.checked_shl(4), Some(0x100));\n+    assert_eq!(0x10i32.checked_shl(33), None);\n+\n+    assert_eq!(0x10i32.checked_shr(4), Some(0x1));\n+    assert_eq!(0x10i32.checked_shr(33), None);\n+\n+    assert_eq!((-5i32).checked_abs(), Some(5));\n+    assert_eq!(i32::MIN.checked_abs(), None);\n+\n+    assert_eq!(100i8.saturating_add(1), 101);\n+    assert_eq!(100i8.saturating_add(127), 127);\n+\n+    assert_eq!(100i8.saturating_sub(127), -27);\n+    assert_eq!((-100i8).saturating_sub(127), -128);\n+\n+    assert_eq!(100i32.saturating_mul(127), 12700);\n+    assert_eq!((1i32 << 23).saturating_mul(1 << 23), i32::MAX);\n+    assert_eq!((-1i32 << 23).saturating_mul(1 << 23), i32::MIN);\n+\n+    assert_eq!(100i8.wrapping_add(27), 127);\n+    assert_eq!(100i8.wrapping_add(127), -29);\n+\n+    assert_eq!(0i8.wrapping_sub(127), -127);\n+    assert_eq!((-2i8).wrapping_sub(127), 127);\n+\n+    assert_eq!(10i8.wrapping_mul(12), 120);\n+    assert_eq!(11i8.wrapping_mul(12), -124);\n+\n+    assert_eq!(100u8.wrapping_div(10), 10);\n+    assert_eq!((-128i8).wrapping_div(-1), -128);\n+\n+    assert_eq!(100i8.wrapping_rem(10), 0);\n+    assert_eq!((-128i8).wrapping_rem(-1), 0);\n+\n+    assert_eq!(100i8.wrapping_neg(), -100);\n+    assert_eq!((-128i8).wrapping_neg(), -128);\n+\n+    assert_eq!((-1i8).wrapping_shl(7), -128);\n+    assert_eq!((-1i8).wrapping_shl(8), -1);\n+\n+    assert_eq!((-128i8).wrapping_shr(7), -1);\n+    assert_eq!((-128i8).wrapping_shr(8), -128);\n+\n+    assert_eq!(100i8.wrapping_abs(), 100);\n+    assert_eq!((-100i8).wrapping_abs(), 100);\n+    assert_eq!((-128i8).wrapping_abs(), -128);\n+    assert_eq!((-128i8).wrapping_abs() as u8, 128);\n+\n+    assert_eq!(5i32.overflowing_add(2), (7, false));\n+    assert_eq!(i32::MAX.overflowing_add(1), (i32::MIN, true));\n+\n+    assert_eq!(5i32.overflowing_sub(2), (3, false));\n+    assert_eq!(i32::MIN.overflowing_sub(1), (i32::MAX, true));\n+\n+    assert_eq!(5i32.overflowing_mul(2), (10, false));\n+    assert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));\n+\n+    assert_eq!(5i32.overflowing_div(2), (2, false));\n+    assert_eq!(i32::MIN.overflowing_div(-1), (i32::MIN, true));\n+\n+    assert_eq!(5i32.overflowing_rem(2), (1, false));\n+    assert_eq!(i32::MIN.overflowing_rem(-1), (0, true));\n+\n+    assert_eq!(2i32.overflowing_neg(), (-2, false));\n+    assert_eq!(i32::MIN.overflowing_neg(), (i32::MIN, true));\n+\n+    assert_eq!(0x10i32.overflowing_shl(4), (0x100, false));\n+    assert_eq!(0x10i32.overflowing_shl(36), (0x100, true));\n+\n+    assert_eq!(0x10i32.overflowing_shr(4), (0x1, false));\n+    assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\n+    \n+    assert_eq!(10i8.overflowing_abs(), (10,false));\n+    assert_eq!((-10i8).overflowing_abs(), (10,false));\n+    assert_eq!((-128i8).overflowing_abs(), (-128,true));\n+}"}, {"sha": "a05308acbe6761623f5ca7250048bd4e9febaa2a", "filename": "tests/run-pass-fullmir/u128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f118ff43e7208338fa44567725e7a2af90b60a86/tests%2Frun-pass-fullmir%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f118ff43e7208338fa44567725e7a2af90b60a86/tests%2Frun-pass-fullmir%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fu128.rs?ref=f118ff43e7208338fa44567725e7a2af90b60a86", "patch": "@@ -72,6 +72,6 @@ fn main() {\n     assert_eq!(l.checked_add(b(11)), None);\n     assert_eq!(l.checked_sub(l), Some(0));\n     assert_eq!(o.checked_sub(b(18)), None);\n-    //assert_eq!(b(1u128).checked_shl(b(127)), Some(1 << 127));\n-    //assert_eq!(o.checked_shl(b(128)), None);\n+    assert_eq!(b(1u128).checked_shl(b(127)), Some(1 << 127));\n+    assert_eq!(o.checked_shl(b(128)), None);\n }"}]}