{"sha": "f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxM2ZlNWYzZjdlMmUyZWQ2ODk5NjdlODE4ZmZhZGM5Y2RiYThhZjY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-20T19:26:46Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-20T21:26:37Z"}, "message": "Add \"dereference boxed value\" suggestion.\n\nThis commit adds a `help: consider dereferencing the boxed value`\nsuggestion to discriminants of match statements when the match arms have\ntype `T` and the discriminant has type `Box<T>`.", "tree": {"sha": "cefa4b51667cc98d3d68232fc962937ded56a975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cefa4b51667cc98d3d68232fc962937ded56a975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxE540ACgkQAXYLT59T\n8VRYkQ/+P457M8NlBUfqrycncjarA5vFly/USgK0J/R/LIVkVi3SR8srJ6qHpRyd\naBUlZlHpcDVpSTTCLWDYl7xSU8ZpGWa/O3+YBUg+iqDZ+I9aN6Wkgjcmce/Zyw/f\nOtA3gdkNdOoc/ESk3g7f9zvONHd4MTDROMwbZm4NxIkfc51zYmjrWoZNmYqFzjpS\nTxA1EY/PSjLjM0U4rJJ5zLN13cL558KjvWOaNnaQGLqaHha09sN8oIgnc6NyJIVf\nYJJNDMvIn3QQtX7ACqmqXrmWCnIopcKe4gUeLkhC0s2m6GN8ndES83UnVLh/L0yw\nLIquEYV1sfaYKGtIkwiFDNuQJGGCqQi/uYRp1lhmI2olCUdh4vHQI6GFiVPJxmzg\nO0nQkhiPnnDDs66I0iCgcgB7maSYjhRBb3UcNXp5fcSejfbe2VkAKnsHfDxt2dtk\nZHpLY86HsFDuMiwvu/EzY5au6UBpl4bGfwqzPF2JI1CWmtcPAf/3Jaakge0aVziy\nkIIHb61ClSkxlGlb17jhnPYYUVbW+xJSymbX5tAkwaRoPd7tNbCMUXh4ZhPk1Brr\nXBNWj5Yyi24HXOxIzcDOu5/FIWZEKl+sCaGusMZvZnnWSbWQe6/i0wHnme5ugpwh\nmKqwZjHiZL1ALgqZliVMI525dAWs6S51UtAMSkjgQYNbGRhCBPE=\n=81hX\n-----END PGP SIGNATURE-----", "payload": "tree cefa4b51667cc98d3d68232fc962937ded56a975\nparent f613dc138b4012cf3d2eb40718fbcc7cf0a34039\nauthor David Wood <david@davidtw.co> 1548012406 +0100\ncommitter David Wood <david@davidtw.co> 1548019597 +0100\n\nAdd \"dereference boxed value\" suggestion.\n\nThis commit adds a `help: consider dereferencing the boxed value`\nsuggestion to discriminants of match statements when the match arms have\ntype `T` and the discriminant has type `Box<T>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "html_url": "https://github.com/rust-lang/rust/commit/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "url": "https://api.github.com/repos/rust-lang/rust/commits/f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "html_url": "https://github.com/rust-lang/rust/commit/f613dc138b4012cf3d2eb40718fbcc7cf0a34039"}], "stats": {"total": 185, "additions": 183, "deletions": 2}, "files": [{"sha": "35f6e6aa610ad8d052f4f35ca78fc96596fd2579", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "patch": "@@ -485,12 +485,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn note_error_origin(&self, err: &mut DiagnosticBuilder<'tcx>, cause: &ObligationCause<'tcx>) {\n+    fn note_error_origin(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n+        exp_found: Option<ty::error::ExpectedFound<Ty<'tcx>>>,\n+    ) {\n         match cause.code {\n             ObligationCauseCode::MatchExpressionArmPattern { span, ty } => {\n                 if ty.is_suggestable() {  // don't show type `_`\n                     err.span_label(span, format!(\"this match expression has type `{}`\", ty));\n                 }\n+                if let Some(ty::error::ExpectedFound { found, .. }) = exp_found {\n+                    if ty.is_box() && ty.boxed_ty() == found {\n+                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"consider dereferencing the boxed value\",\n+                                format!(\"*{}\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    }\n+                }\n             }\n             ObligationCauseCode::MatchExpressionArm { arm_span, source } => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n@@ -1013,7 +1030,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // It reads better to have the error origin as the final\n         // thing.\n-        self.note_error_origin(diag, &cause);\n+        self.note_error_origin(diag, &cause, exp_found);\n     }\n \n     /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,"}, {"sha": "d0aae23b2fce603ed30f539b71b079d1635ce23b", "filename": "src/test/ui/issues/issue-57741-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.rs?ref=f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "patch": "@@ -0,0 +1,18 @@\n+#![allow(warnings)]\n+\n+// This tests that the `help: consider dereferencing the boxed value` suggestion isn't made\n+// because the box doesn't deref to the type of the arm.\n+\n+enum S {\n+    A { a: usize },\n+    B { b: usize },\n+}\n+\n+fn main() {\n+    let x = Box::new(3u32);\n+    let y = match x {\n+        S::A { a } | S::B { b: a } => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "d36424b83b4e17d5ac63db219e0cf7853f7cbaf3", "filename": "src/test/ui/issues/issue-57741-1.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr?ref=f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741-1.rs:14:9\n+   |\n+LL |     let y = match x {\n+   |                   - this match expression has type `std::boxed::Box<u32>`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<u32>`\n+              found type `S`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741-1.rs:14:22\n+   |\n+LL |     let y = match x {\n+   |                   - this match expression has type `std::boxed::Box<u32>`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<u32>`\n+              found type `S`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4cae080033ca27ea6b768bd78dbf47fffe74af9c", "filename": "src/test/ui/issues/issue-57741.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.fixed?ref=f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+// This tests that the `help: consider dereferencing the boxed value` suggestion is made and works.\n+\n+enum S {\n+    A { a: usize },\n+    B { b: usize },\n+}\n+\n+enum T {\n+    A(usize),\n+    B(usize),\n+}\n+\n+fn main() {\n+    let x = Box::new(T::A(3));\n+    let y = match *x {\n+        T::A(a) | T::B(a) => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+\n+    let x = Box::new(S::A { a: 3 });\n+    let y = match *x {\n+        S::A { a } | S::B { b: a } => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "e2658295af791719153f9259f520867351f7944b", "filename": "src/test/ui/issues/issue-57741.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.rs?ref=f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+// This tests that the `help: consider dereferencing the boxed value` suggestion is made and works.\n+\n+enum S {\n+    A { a: usize },\n+    B { b: usize },\n+}\n+\n+enum T {\n+    A(usize),\n+    B(usize),\n+}\n+\n+fn main() {\n+    let x = Box::new(T::A(3));\n+    let y = match x {\n+        T::A(a) | T::B(a) => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+\n+    let x = Box::new(S::A { a: 3 });\n+    let y = match x {\n+        S::A { a } | S::B { b: a } => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "a26b1d20ca3cb146a4f9b1436cd64d3308b4e630", "filename": "src/test/ui/issues/issue-57741.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr?ref=f13fe5f3f7e2e2ed689967e818ffadc9cdba8af6", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:20:9\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<T>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         T::A(a) | T::B(a) => a,\n+   |         ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n+   |\n+   = note: expected type `std::boxed::Box<T>`\n+              found type `T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:20:19\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<T>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         T::A(a) | T::B(a) => a,\n+   |                   ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n+   |\n+   = note: expected type `std::boxed::Box<T>`\n+              found type `T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:27:9\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<S>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<S>`\n+              found type `S`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:27:22\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<S>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<S>`\n+              found type `S`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}