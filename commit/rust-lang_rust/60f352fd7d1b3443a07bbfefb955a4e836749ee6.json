{"sha": "60f352fd7d1b3443a07bbfefb955a4e836749ee6", "node_id": "C_kwDOAAsO6NoAKDYwZjM1MmZkN2QxYjM0NDNhMDdiYmZlZmI5NTVhNGU4MzY3NDllZTY", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-11T09:01:06Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:47:42Z"}, "message": "replace potential ICE with graceful error (`no_core` only)", "tree": {"sha": "7c4758e41efc73db41a155581d13b46b3745faaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c4758e41efc73db41a155581d13b46b3745faaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f352fd7d1b3443a07bbfefb955a4e836749ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f352fd7d1b3443a07bbfefb955a4e836749ee6", "html_url": "https://github.com/rust-lang/rust/commit/60f352fd7d1b3443a07bbfefb955a4e836749ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f352fd7d1b3443a07bbfefb955a4e836749ee6/comments", "author": null, "committer": null, "parents": [{"sha": "8a6053618f99852d31b46144043e881f6556ff1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6053618f99852d31b46144043e881f6556ff1c", "html_url": "https://github.com/rust-lang/rust/commit/8a6053618f99852d31b46144043e881f6556ff1c"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "93afbbd27a4e6906bd3bd2e38258b09118987eaa", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60f352fd7d1b3443a07bbfefb955a4e836749ee6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f352fd7d1b3443a07bbfefb955a4e836749ee6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=60f352fd7d1b3443a07bbfefb955a4e836749ee6", "patch": "@@ -1,4 +1,5 @@\n use rustc_hir::def::DefKind;\n+use rustc_hir::LangItem;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::PointerArithmetic;\n use rustc_middle::ty::layout::LayoutOf;\n@@ -178,9 +179,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n             return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n         } else if Some(def_id) == self.tcx.lang_items().panic_fmt() {\n             // For panic_fmt, call const_panic_fmt instead.\n-            let Some(const_def_id) = self.tcx.lang_items().const_panic_fmt() else {\n-                bug!(\"`const_panic_fmt` must be defined to call `panic_fmt` in const eval\")\n-            };\n+            let const_def_id = self.tcx.require_lang_item(LangItem::ConstPanicFmt, None);\n             let new_instance = ty::Instance::resolve(\n                 *self.tcx,\n                 ty::ParamEnv::reveal_all(),"}]}