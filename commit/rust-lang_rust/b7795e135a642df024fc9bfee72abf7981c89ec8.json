{"sha": "b7795e135a642df024fc9bfee72abf7981c89ec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Nzk1ZTEzNWE2NDJkZjAyNGZjOWJmZWU3MmFiZjc5ODFjODllYzg=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-11T17:08:05Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-11T22:02:19Z"}, "message": "fix clippy::{needless_bool, manual_unwrap_or}", "tree": {"sha": "b3b5c42365b0cb15d067a6db5de1635e7fbea736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3b5c42365b0cb15d067a6db5de1635e7fbea736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7795e135a642df024fc9bfee72abf7981c89ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7795e135a642df024fc9bfee72abf7981c89ec8", "html_url": "https://github.com/rust-lang/rust/commit/b7795e135a642df024fc9bfee72abf7981c89ec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7795e135a642df024fc9bfee72abf7981c89ec8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "html_url": "https://github.com/rust-lang/rust/commit/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "6fbcc140978a7039e7886a0d3730dd3fbaa74041", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=b7795e135a642df024fc9bfee72abf7981c89ec8", "patch": "@@ -216,9 +216,10 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n         let discr = self.find_switch_discriminant_info(bb, switch)?;\n \n         // go through each target, finding a discriminant read, and a switch\n-        let results = discr.targets_with_values.iter().map(|(value, target)| {\n-            self.find_discriminant_switch_pairing(&discr, *target, *value)\n-        });\n+        let results = discr\n+            .targets_with_values\n+            .iter()\n+            .map(|(value, target)| self.find_discriminant_switch_pairing(&discr, *target, *value));\n \n         // if the optimization did not apply for one of the targets, then abort\n         if results.clone().any(|x| x.is_none()) || results.len() == 0 {"}, {"sha": "75faab12e3e127bfca1823c6a6e1a20261861191", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=b7795e135a642df024fc9bfee72abf7981c89ec8", "patch": "@@ -1109,10 +1109,7 @@ impl Session {\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n-        match self.opts.cg.link_dead_code {\n-            Some(explicitly_set) => explicitly_set,\n-            None => false,\n-        }\n+        self.opts.cg.link_dead_code.unwrap_or(false)\n     }\n \n     pub fn mark_attr_known(&self, attr: &Attribute) {"}, {"sha": "1b04351018a0c515504646710516b33367e0cc75", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=b7795e135a642df024fc9bfee72abf7981c89ec8", "patch": "@@ -297,17 +297,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     closure_captures.insert(*var_hir_id, upvar_id);\n \n-                    let new_capture_kind = if let Some(capture_kind) =\n-                        upvar_capture_map.get(&upvar_id)\n-                    {\n-                        // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n-                        // so we create a fake capture info with no expression.\n-                        let fake_capture_info =\n-                            ty::CaptureInfo { expr_id: None, capture_kind: *capture_kind };\n-                        determine_capture_info(fake_capture_info, capture_info).capture_kind\n-                    } else {\n-                        capture_info.capture_kind\n-                    };\n+                    let new_capture_kind =\n+                        if let Some(capture_kind) = upvar_capture_map.get(&upvar_id) {\n+                            // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n+                            // so we create a fake capture info with no expression.\n+                            let fake_capture_info =\n+                                ty::CaptureInfo { expr_id: None, capture_kind: *capture_kind };\n+                            determine_capture_info(fake_capture_info, capture_info).capture_kind\n+                        } else {\n+                            capture_info.capture_kind\n+                        };\n                     upvar_capture_map.insert(upvar_id, new_capture_kind);\n                 }\n             }"}, {"sha": "c70554cc6272580d144d3e701ef2d7a771b53d33", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7795e135a642df024fc9bfee72abf7981c89ec8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b7795e135a642df024fc9bfee72abf7981c89ec8", "patch": "@@ -2141,13 +2141,8 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             // * It must be an associated type for this trait (*not* a\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind() {\n-                if projection.substs == trait_identity_substs\n+                projection.substs == trait_identity_substs\n                     && tcx.associated_item(projection.item_def_id).container.id() == def_id\n-                {\n-                    true\n-                } else {\n-                    false\n-                }\n             } else {\n                 false\n             }"}, {"sha": "85b4a73439d906ef4815c120d783139574e18923", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7795e135a642df024fc9bfee72abf7981c89ec8/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7795e135a642df024fc9bfee72abf7981c89ec8/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=b7795e135a642df024fc9bfee72abf7981c89ec8", "patch": "@@ -159,11 +159,7 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        build\n-            .config\n-            .target_config\n-            .entry(*target)\n-            .or_insert(Target::from_triple(&target.triple));\n+        build.config.target_config.entry(*target).or_insert(Target::from_triple(&target.triple));\n \n         if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target) == Some(false) {"}]}