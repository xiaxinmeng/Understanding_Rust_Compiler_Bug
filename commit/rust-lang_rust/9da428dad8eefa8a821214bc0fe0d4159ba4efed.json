{"sha": "9da428dad8eefa8a821214bc0fe0d4159ba4efed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTQyOGRhZDhlZWZhOGE4MjEyMTRiYzBmZTBkNDE1OWJhNGVmZWQ=", "commit": {"author": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2018-10-03T21:24:31Z"}, "committer": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2018-10-05T09:47:57Z"}, "message": "make `Parser::parse_foreign_item()` return a foreign item or error\n\ncloses #54441", "tree": {"sha": "29615817e497aae756a4b8572411f7a90d856ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29615817e497aae756a4b8572411f7a90d856ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da428dad8eefa8a821214bc0fe0d4159ba4efed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da428dad8eefa8a821214bc0fe0d4159ba4efed", "html_url": "https://github.com/rust-lang/rust/commit/9da428dad8eefa8a821214bc0fe0d4159ba4efed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da428dad8eefa8a821214bc0fe0d4159ba4efed/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "html_url": "https://github.com/rust-lang/rust/commit/a57f1c9c955177e2a7563dd59f9e3a70458e2be1"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "ba70108ea471d6dde3a2e514ae7a653121cd5ef1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9da428dad8eefa8a821214bc0fe0d4159ba4efed", "patch": "@@ -1008,9 +1008,7 @@ impl<'a> Parser<'a> {\n             AstFragmentKind::ForeignItems => {\n                 let mut items = SmallVec::new();\n                 while self.token != token::Eof {\n-                    if let Some(item) = self.parse_foreign_item()? {\n-                        items.push(item);\n-                    }\n+                    items.push(self.parse_foreign_item()?);\n                 }\n                 AstFragment::ForeignItems(items)\n             }"}, {"sha": "d75a3f3fe9bdc627cd3b20f0998715652e6f16c1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9da428dad8eefa8a821214bc0fe0d4159ba4efed", "patch": "@@ -6718,10 +6718,9 @@ impl<'a> Parser<'a> {\n         attrs.extend(self.parse_inner_attributes()?);\n \n         let mut foreign_items = vec![];\n-        while let Some(item) = self.parse_foreign_item()? {\n-            foreign_items.push(item);\n+        while !self.eat(&token::CloseDelim(token::Brace)) {\n+            foreign_items.push(self.parse_foreign_item()?);\n         }\n-        self.expect(&token::CloseDelim(token::Brace))?;\n \n         let prev_span = self.prev_span;\n         let m = ast::ForeignMod {\n@@ -7305,8 +7304,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a foreign item.\n-    crate fn parse_foreign_item(&mut self) -> PResult<'a, Option<ForeignItem>> {\n-        maybe_whole!(self, NtForeignItem, |ni| Some(ni));\n+    crate fn parse_foreign_item(&mut self) -> PResult<'a, ForeignItem> {\n+        maybe_whole!(self, NtForeignItem, |ni| ni);\n \n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span;\n@@ -7326,20 +7325,20 @@ impl<'a> Parser<'a> {\n                     ).emit();\n             }\n             self.bump(); // `static` or `const`\n-            return Ok(Some(self.parse_item_foreign_static(visibility, lo, attrs)?));\n+            return Ok(self.parse_item_foreign_static(visibility, lo, attrs)?);\n         }\n         // FOREIGN FUNCTION ITEM\n         if self.check_keyword(keywords::Fn) {\n-            return Ok(Some(self.parse_item_foreign_fn(visibility, lo, attrs)?));\n+            return Ok(self.parse_item_foreign_fn(visibility, lo, attrs)?);\n         }\n         // FOREIGN TYPE ITEM\n         if self.check_keyword(keywords::Type) {\n-            return Ok(Some(self.parse_item_foreign_type(visibility, lo, attrs)?));\n+            return Ok(self.parse_item_foreign_type(visibility, lo, attrs)?);\n         }\n \n         match self.parse_assoc_macro_invoc(\"extern\", Some(&visibility), &mut false)? {\n             Some(mac) => {\n-                Ok(Some(\n+                Ok(\n                     ForeignItem {\n                         ident: keywords::Invalid.ident(),\n                         span: lo.to(self.prev_span),\n@@ -7348,14 +7347,14 @@ impl<'a> Parser<'a> {\n                         vis: visibility,\n                         node: ForeignItemKind::Macro(mac),\n                     }\n-                ))\n+                )\n             }\n             None => {\n-                if !attrs.is_empty() {\n+                if !attrs.is_empty()  {\n                     self.expected_item_err(&attrs);\n                 }\n \n-                Ok(None)\n+                self.unexpected()\n             }\n         }\n     }"}, {"sha": "cc3286fe70512881c31a834e2d0446b54a2d4d40", "filename": "src/test/parse-fail/duplicate-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Ftest%2Fparse-fail%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Ftest%2Fparse-fail%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fduplicate-visibility.rs?ref=9da428dad8eefa8a821214bc0fe0d4159ba4efed", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: -Z parse-only\n \n-// error-pattern:expected one of `(`, `fn`, `static`, `type`, or `}` here\n+// error-pattern:expected one of `(`, `fn`, `static`, or `type`\n extern {\n     pub pub fn foo();\n }"}, {"sha": "b45aedb549ecd66d6a5e77437d67e2b2f89d86a9", "filename": "src/test/ui/macros/issue-54441.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs?ref=9da428dad8eefa8a821214bc0fe0d4159ba4efed", "patch": "@@ -0,0 +1,13 @@\n+#![feature(macros_in_extern)]\n+\n+macro_rules! m {\n+    () => {\n+        let //~ ERROR expected\n+    };\n+}\n+\n+extern \"C\" {\n+    m!();\n+}\n+\n+fn main() {}"}, {"sha": "aa1edb2cf893fdd26ed2b99911ad8a5caf95c594", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9da428dad8eefa8a821214bc0fe0d4159ba4efed/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=9da428dad8eefa8a821214bc0fe0d4159ba4efed", "patch": "@@ -0,0 +1,14 @@\n+error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found `let`\n+  --> $DIR/issue-54441.rs:5:9\n+   |\n+LL | #![feature(macros_in_extern)]\n+   | - expected one of `crate`, `fn`, `pub`, `static`, or `type` here\n+...\n+LL |         let //~ ERROR expected\n+   |         ^^^ unexpected token\n+...\n+LL |     m!();\n+   |     ----- in this macro invocation\n+\n+error: aborting due to previous error\n+"}]}