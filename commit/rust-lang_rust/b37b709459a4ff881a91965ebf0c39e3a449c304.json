{"sha": "b37b709459a4ff881a91965ebf0c39e3a449c304", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzN2I3MDk0NTlhNGZmODgxYTkxOTY1ZWJmMGMzOWUzYTQ0OWMzMDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-06T17:29:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T17:29:30Z"}, "message": "Merge #8718\n\n8718: 1.52.0 r=SomeoneToIgnore a=matklad\n\nA lot of APIs we use in this release!\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "49eba918834c5a4fec5a8d5de39589219c81c846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49eba918834c5a4fec5a8d5de39589219c81c846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37b709459a4ff881a91965ebf0c39e3a449c304", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglCd7CRBK7hj4Ov3rIwAAU3oIAGxTNDqC8nSy/VKQxTo5f4BS\nrgNNnycWvWJbpjOP7T55H+Bj9wBJeYT/+8Fh68CFjU3vp50dBPsY+Ai09/HHzNCf\nhHfUYqtjVKfD8TSW9Tn+lRvVI4mM7tkJ4F7IaB14CHnEXD/7C35qMVYQ+rPwkz6v\nxiciXGAVq3dsy805pJ1ft5jWR8n3N3F/HBT2rwbq8ijwUxPv47PisF1ys2Q3kZaA\n75deS7sigViHc4/Op+Db2E6A7WenoPjRYrkie3d0VCd9AFe5h/TTwquhfjncEmhx\nbWRzPnS0M75B4qsgNOdRWqsPblw9VwWUjat9mGCvARwFqPe2AUbg2M+iqVYP58U=\n=//Gg\n-----END PGP SIGNATURE-----\n", "payload": "tree 49eba918834c5a4fec5a8d5de39589219c81c846\nparent 3b4d5df840f1c6a077ad1886a98ef453811a599f\nparent 607d8a2f61e56fabb7a3bc5132592917fcdca970\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620322170 +0000\ncommitter GitHub <noreply@github.com> 1620322170 +0000\n\nMerge #8718\n\n8718: 1.52.0 r=SomeoneToIgnore a=matklad\n\nA lot of APIs we use in this release!\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37b709459a4ff881a91965ebf0c39e3a449c304", "html_url": "https://github.com/rust-lang/rust/commit/b37b709459a4ff881a91965ebf0c39e3a449c304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37b709459a4ff881a91965ebf0c39e3a449c304/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b4d5df840f1c6a077ad1886a98ef453811a599f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4d5df840f1c6a077ad1886a98ef453811a599f", "html_url": "https://github.com/rust-lang/rust/commit/3b4d5df840f1c6a077ad1886a98ef453811a599f"}, {"sha": "607d8a2f61e56fabb7a3bc5132592917fcdca970", "url": "https://api.github.com/repos/rust-lang/rust/commits/607d8a2f61e56fabb7a3bc5132592917fcdca970", "html_url": "https://github.com/rust-lang/rust/commit/607d8a2f61e56fabb7a3bc5132592917fcdca970"}], "stats": {"total": 106, "additions": 16, "deletions": 90}, "files": [{"sha": "62ef40818284004939f97b1d06791aa17395e172", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -381,7 +381,7 @@ impl<'a> CompletionContext<'a> {\n                         let def = self.sema.to_def(&it);\n                         (def.map(|def| def.ret_type(self.db)), None)\n                     },\n-                    ast::Stmt(it) => (None, None),\n+                    ast::Stmt(_it) => (None, None),\n                     _ => {\n                         match node.parent() {\n                             Some(n) => {"}, {"sha": "816edfe6a8e2def1a65bda063ef5ab9e9e9aab15", "filename": "crates/ide_db/src/line_index.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fline_index.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -3,7 +3,6 @@\n use std::iter;\n \n use rustc_hash::FxHashMap;\n-use stdx::partition_point;\n use syntax::{TextRange, TextSize};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -97,7 +96,7 @@ impl LineIndex {\n     }\n \n     pub fn line_col(&self, offset: TextSize) -> LineCol {\n-        let line = partition_point(&self.newlines, |&it| it <= offset) - 1;\n+        let line = self.newlines.partition_point(|&it| it <= offset) - 1;\n         let line_start_offset = self.newlines[line];\n         let col = offset - line_start_offset;\n         LineCol { line: line as u32, col: col.into() }\n@@ -118,8 +117,8 @@ impl LineIndex {\n     }\n \n     pub fn lines(&self, range: TextRange) -> impl Iterator<Item = TextRange> + '_ {\n-        let lo = partition_point(&self.newlines, |&it| it < range.start());\n-        let hi = partition_point(&self.newlines, |&it| it <= range.end());\n+        let lo = self.newlines.partition_point(|&it| it < range.start());\n+        let hi = self.newlines.partition_point(|&it| it <= range.end());\n         let all = iter::once(range.start())\n             .chain(self.newlines[lo..hi].iter().copied())\n             .chain(iter::once(range.end()));"}, {"sha": "bfdfd458fbfc4fc4f0980b79858bf151feb65b7e", "filename": "crates/project_model/src/cfg_flag.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fproject_model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fproject_model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcfg_flag.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -4,7 +4,6 @@\n use std::str::FromStr;\n \n use cfg::CfgOptions;\n-use stdx::split_once;\n \n #[derive(Clone, Eq, PartialEq, Debug)]\n pub enum CfgFlag {\n@@ -15,7 +14,7 @@ pub enum CfgFlag {\n impl FromStr for CfgFlag {\n     type Err = String;\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        let res = match split_once(s, '=') {\n+        let res = match s.split_once('=') {\n             Some((key, value)) => {\n                 if !(value.starts_with('\"') && value.ends_with('\"')) {\n                     return Err(format!(\"Invalid cfg ({:?}), value should be in quotes\", s));"}, {"sha": "340fcacfa3fa05f1e1ee265471f3412b15684770", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -65,20 +65,6 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n     *buf = buf.replace(from, to)\n }\n \n-// https://github.com/rust-lang/rust/issues/74773\n-pub fn split_once(haystack: &str, delim: char) -> Option<(&str, &str)> {\n-    let mut split = haystack.splitn(2, delim);\n-    let prefix = split.next()?;\n-    let suffix = split.next()?;\n-    Some((prefix, suffix))\n-}\n-pub fn rsplit_once(haystack: &str, delim: char) -> Option<(&str, &str)> {\n-    let mut split = haystack.rsplitn(2, delim);\n-    let suffix = split.next()?;\n-    let prefix = split.next()?;\n-    Some((prefix, suffix))\n-}\n-\n pub fn trim_indent(mut text: &str) -> String {\n     if text.starts_with('\\n') {\n         text = &text[1..];\n@@ -89,7 +75,7 @@ pub fn trim_indent(mut text: &str) -> String {\n         .map(|it| it.len() - it.trim_start().len())\n         .min()\n         .unwrap_or(0);\n-    lines_with_ends(text)\n+    text.split_inclusive('\\n')\n         .map(\n             |line| {\n                 if line.len() <= indent {\n@@ -102,70 +88,12 @@ pub fn trim_indent(mut text: &str) -> String {\n         .collect()\n }\n \n-pub fn lines_with_ends(text: &str) -> LinesWithEnds {\n-    LinesWithEnds { text }\n-}\n-\n-pub struct LinesWithEnds<'a> {\n-    text: &'a str,\n-}\n-\n-impl<'a> Iterator for LinesWithEnds<'a> {\n-    type Item = &'a str;\n-    fn next(&mut self) -> Option<&'a str> {\n-        if self.text.is_empty() {\n-            return None;\n-        }\n-        let idx = self.text.find('\\n').map_or(self.text.len(), |it| it + 1);\n-        let (res, next) = self.text.split_at(idx);\n-        self.text = next;\n-        Some(res)\n-    }\n-}\n-\n-/// Returns `idx` such that:\n-///\n-/// ```text\n-///     \u2200 x in slice[..idx]:  pred(x)\n-///  && \u2200 x in slice[idx..]: !pred(x)\n-/// ```\n-///\n-/// https://github.com/rust-lang/rust/issues/73831\n-pub fn partition_point<T, P>(slice: &[T], mut pred: P) -> usize\n-where\n-    P: FnMut(&T) -> bool,\n-{\n-    let mut left = 0;\n-    let mut right = slice.len();\n-\n-    while left != right {\n-        let mid = left + (right - left) / 2;\n-        // SAFETY:\n-        // When left < right, left <= mid < right.\n-        // Therefore left always increases and right always decreases,\n-        // and either of them is selected.\n-        // In both cases left <= right is satisfied.\n-        // Therefore if left < right in a step,\n-        // left <= right is satisfied in the next step.\n-        // Therefore as long as left != right, 0 <= left < right <= len is satisfied\n-        // and if this case 0 <= mid < len is satisfied too.\n-        let value = unsafe { slice.get_unchecked(mid) };\n-        if pred(value) {\n-            left = mid + 1;\n-        } else {\n-            right = mid;\n-        }\n-    }\n-\n-    left\n-}\n-\n pub fn equal_range_by<T, F>(slice: &[T], mut key: F) -> ops::Range<usize>\n where\n     F: FnMut(&T) -> Ordering,\n {\n-    let start = partition_point(slice, |it| key(it) == Ordering::Less);\n-    let len = partition_point(&slice[start..], |it| key(it) == Ordering::Equal);\n+    let start = slice.partition_point(|it| key(it) == Ordering::Less);\n+    let len = slice[start..].partition_point(|it| key(it) == Ordering::Equal);\n     start..start + len\n }\n "}, {"sha": "d0bddf7d81f2a24313a46fdf288641e7e81c7c4e", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -62,7 +62,7 @@\n //! ```\n \n use rustc_hash::FxHashMap;\n-use stdx::{lines_with_ends, split_once, trim_indent};\n+use stdx::trim_indent;\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct Fixture {\n@@ -93,7 +93,7 @@ impl Fixture {\n \n         let default = if ra_fixture.contains(\"//-\") { None } else { Some(\"//- /main.rs\") };\n \n-        for (ix, line) in default.into_iter().chain(lines_with_ends(&fixture)).enumerate() {\n+        for (ix, line) in default.into_iter().chain(fixture.split_inclusive('\\n')).enumerate() {\n             if line.contains(\"//-\") {\n                 assert!(\n                     line.starts_with(\"//-\"),\n@@ -133,22 +133,22 @@ impl Fixture {\n         let mut env = FxHashMap::default();\n         let mut introduce_new_source_root = false;\n         for component in components[1..].iter() {\n-            let (key, value) = split_once(component, ':').unwrap();\n+            let (key, value) = component.split_once(':').unwrap();\n             match key {\n                 \"crate\" => krate = Some(value.to_string()),\n                 \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n                 \"edition\" => edition = Some(value.to_string()),\n                 \"cfg\" => {\n                     for entry in value.split(',') {\n-                        match split_once(entry, '=') {\n+                        match entry.split_once('=') {\n                             Some((k, v)) => cfg_key_values.push((k.to_string(), v.to_string())),\n                             None => cfg_atoms.push(entry.to_string()),\n                         }\n                     }\n                 }\n                 \"env\" => {\n                     for key in value.split(',') {\n-                        if let Some((k, v)) = split_once(key, '=') {\n+                        if let Some((k, v)) = key.split_once('=') {\n                             env.insert(k.into(), v.into());\n                         }\n                     }"}, {"sha": "fce4fd6bf2b9bbd1033e956259de25d0dc070f4d", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -17,7 +17,7 @@ use std::{\n };\n \n use profile::StopWatch;\n-use stdx::{is_ci, lines_with_ends};\n+use stdx::is_ci;\n use text_size::{TextRange, TextSize};\n \n pub use dissimilar::diff as __diff;\n@@ -181,7 +181,7 @@ pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n     let mut prev_line_start: Option<TextSize> = None;\n     let mut line_start: TextSize = 0.into();\n     let mut prev_line_annotations: Vec<(TextSize, usize)> = Vec::new();\n-    for line in lines_with_ends(text) {\n+    for line in text.split_inclusive('\\n') {\n         let mut this_line_annotations = Vec::new();\n         if let Some(idx) = line.find(\"//\") {\n             let annotation_offset = TextSize::of(&line[..idx + \"//\".len()]);"}, {"sha": "7e2dccdfe0950616684765faf0b906376bc2fdc2", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b37b709459a4ff881a91965ebf0c39e3a449c304/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b709459a4ff881a91965ebf0c39e3a449c304/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=b37b709459a4ff881a91965ebf0c39e3a449c304", "patch": "@@ -8,7 +8,7 @@ use xshell::{cmd, pushd};\n use crate::flags;\n \n // Latest stable, feel free to send a PR if this lags behind.\n-const REQUIRED_RUST_VERSION: u32 = 51;\n+const REQUIRED_RUST_VERSION: u32 = 52;\n \n impl flags::Install {\n     pub(crate) fn run(self) -> Result<()> {"}]}