{"sha": "5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZjFiZTE5N2VhYThhMDE0NzE4YjI2YjFmY2JlMGNlZDMzYjZlMWE=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-23T20:56:04Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-23T20:56:04Z"}, "message": "replaced some unwrap_or with unwrap_or_else", "tree": {"sha": "697e81ac40c38223d77eb7128a6a460166748137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697e81ac40c38223d77eb7128a6a460166748137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "html_url": "https://github.com/rust-lang/rust/commit/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446d4533e89db04f9568be4199e56b5fce0d176d", "url": "https://api.github.com/repos/rust-lang/rust/commits/446d4533e89db04f9568be4199e56b5fce0d176d", "html_url": "https://github.com/rust-lang/rust/commit/446d4533e89db04f9568be4199e56b5fce0d176d"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "531edd28c23ceb5b5af92d7f836c6c871088abe1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "patch": "@@ -2082,7 +2082,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n         cmd.link_rust_dylib(\n             Symbol::intern(&unlib(&sess.target, filestem)),\n-            parent.unwrap_or(Path::new(\"\")),\n+            parent.unwrap_or_else(|| Path::new(\"\")),\n         );\n     }\n }"}, {"sha": "1a6d968cdb5589d386484a7aedb0803709efec56", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "patch": "@@ -159,7 +159,7 @@ fn check_panic_str<'tcx>(\n             Some(v) if v.len() == 1 => \"panic message contains a brace\",\n             _ => \"panic message contains braces\",\n         };\n-        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or(vec![span]), |lint| {\n+        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n             if span.contains(arg.span) {"}, {"sha": "763f13d17eff891dbe78b39e6ac56ea610e3a3eb", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "patch": "@@ -378,14 +378,14 @@ fn add_query_description_impl(\n                 let t = &(t.0).0;\n                 quote! { #t }\n             })\n-            .unwrap_or(quote! { _ });\n+            .unwrap_or_else(|| quote! { _ });\n         let value = args\n             .as_ref()\n             .map(|t| {\n                 let t = &(t.1).0;\n                 quote! { #t }\n             })\n-            .unwrap_or(quote! { _ });\n+            .unwrap_or_else(|| quote! { _ });\n         // expr is a `Block`, meaning that `{ #expr }` gets expanded\n         // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n         quote! {"}, {"sha": "8a0fce209b7fbeb0a9b6ddfea32a78c909864d61", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "patch": "@@ -473,9 +473,9 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                         .map(\n                                             |applicability_idx| quote!(#binding.#applicability_idx),\n                                         )\n-                                        .unwrap_or(quote!(\n-                                            rustc_errors::Applicability::Unspecified\n-                                        ));\n+                                        .unwrap_or_else(|| {\n+                                            quote!(rustc_errors::Applicability::Unspecified)\n+                                        });\n                                     return Ok((span, applicability));\n                                 }\n                                 throw_span_err!("}, {"sha": "72daf666c99423d657075612cba08e003730ce62", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "patch": "@@ -169,7 +169,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n \n     // Check if sysroot is found using env::args().next(), and if is not found,\n     // use env::current_exe() to imply sysroot.\n-    from_env_args_next().unwrap_or(from_current_exe())\n+    from_env_args_next().unwrap_or_else(|| from_current_exe())\n }\n \n // The name of the directory rustc expects libraries to be located."}, {"sha": "af82a3bb4f59a31189f79518dec55b238ab1ff78", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "patch": "@@ -348,9 +348,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 let min_list_wb = min_list\n                     .iter()\n                     .map(|captured_place| {\n-                        let locatable = captured_place.info.path_expr_id.unwrap_or(\n-                            self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local()),\n-                        );\n+                        let locatable = captured_place.info.path_expr_id.unwrap_or_else(|| {\n+                            self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local())\n+                        });\n \n                         self.resolve(captured_place.clone(), &locatable)\n                     })"}]}