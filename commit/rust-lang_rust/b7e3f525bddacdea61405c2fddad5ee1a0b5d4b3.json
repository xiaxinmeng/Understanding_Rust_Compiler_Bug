{"sha": "b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "node_id": "C_kwDOAAsO6NoAKGI3ZTNmNTI1YmRkYWNkZWE2MTQwNWMyZmRkYWQ1ZWUxYTBiNWQ0YjM", "commit": {"author": {"name": "Raymond Luo", "email": "ray.luo@nyu.edu", "date": "2022-06-21T03:15:27Z"}, "committer": {"name": "Raymond Luo", "email": "ray.luo@nyu.edu", "date": "2022-06-21T03:15:27Z"}, "message": "handle autolink as edge case", "tree": {"sha": "44070a288c0e7d385fabfb1d860ab983c5588a3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44070a288c0e7d385fabfb1d860ab983c5588a3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "html_url": "https://github.com/rust-lang/rust/commit/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3/comments", "author": {"login": "erhuve", "id": 59463268, "node_id": "MDQ6VXNlcjU5NDYzMjY4", "avatar_url": "https://avatars.githubusercontent.com/u/59463268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuve", "html_url": "https://github.com/erhuve", "followers_url": "https://api.github.com/users/erhuve/followers", "following_url": "https://api.github.com/users/erhuve/following{/other_user}", "gists_url": "https://api.github.com/users/erhuve/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuve/subscriptions", "organizations_url": "https://api.github.com/users/erhuve/orgs", "repos_url": "https://api.github.com/users/erhuve/repos", "events_url": "https://api.github.com/users/erhuve/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuve/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erhuve", "id": 59463268, "node_id": "MDQ6VXNlcjU5NDYzMjY4", "avatar_url": "https://avatars.githubusercontent.com/u/59463268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuve", "html_url": "https://github.com/erhuve", "followers_url": "https://api.github.com/users/erhuve/followers", "following_url": "https://api.github.com/users/erhuve/following{/other_user}", "gists_url": "https://api.github.com/users/erhuve/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuve/subscriptions", "organizations_url": "https://api.github.com/users/erhuve/orgs", "repos_url": "https://api.github.com/users/erhuve/repos", "events_url": "https://api.github.com/users/erhuve/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuve/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6f776c5f9aa7d850be24d0288700905e833dc9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f776c5f9aa7d850be24d0288700905e833dc9e", "html_url": "https://github.com/rust-lang/rust/commit/c6f776c5f9aa7d850be24d0288700905e833dc9e"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "993e12f4a3e6e68da933f54c4caa9e8b2675b6c9", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "patch": "@@ -382,13 +382,21 @@ fn map_links<'e>(\n             ))\n         }\n         Event::Text(s) if in_link => {\n-            let (_, link_target_s, link_name) = callback(&end_link_target.take().unwrap(), &s);\n+            let (link_type, link_target_s, link_name) =\n+                callback(&end_link_target.take().unwrap(), &s);\n             end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            if !matches!(end_link_type, Some(link) if link == LinkType::Autolink) {\n+                end_link_type = link_type;\n+            }\n             Event::Text(CowStr::Boxed(link_name.into()))\n         }\n         Event::Code(s) if in_link => {\n-            let (_, link_target_s, link_name) = callback(&end_link_target.take().unwrap(), &s);\n+            let (link_type, link_target_s, link_name) =\n+                callback(&end_link_target.take().unwrap(), &s);\n             end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            if !matches!(end_link_type, Some(link) if link == LinkType::Autolink) {\n+                end_link_type = link_type;\n+            }\n             Event::Code(CowStr::Boxed(link_name.into()))\n         }\n         _ => evt,"}]}