{"sha": "a20081666becc9c48b8818a493349c20c480ef06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMDA4MTY2NmJlY2M5YzQ4Yjg4MThhNDkzMzQ5YzIwYzQ4MGVmMDY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-29T21:19:04Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-05T18:41:06Z"}, "message": "Fix an unused variable warning and clean up some dead code/names.", "tree": {"sha": "b6d543b8add16122162c61941a71e446fa952881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d543b8add16122162c61941a71e446fa952881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20081666becc9c48b8818a493349c20c480ef06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20081666becc9c48b8818a493349c20c480ef06", "html_url": "https://github.com/rust-lang/rust/commit/a20081666becc9c48b8818a493349c20c480ef06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20081666becc9c48b8818a493349c20c480ef06/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf62e790151eda088896cd5aeda4b727ec1572a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf62e790151eda088896cd5aeda4b727ec1572a", "html_url": "https://github.com/rust-lang/rust/commit/bcf62e790151eda088896cd5aeda4b727ec1572a"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "6b35f4ae9a4ee11086bc18b90c90837b79eb014a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a20081666becc9c48b8818a493349c20c480ef06/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20081666becc9c48b8818a493349c20c480ef06/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a20081666becc9c48b8818a493349c20c480ef06", "patch": "@@ -2218,23 +2218,14 @@ pub fn trans_mod(ccx: @mut CrateContext, m: &ast::_mod) {\n pub fn register_fn(ccx: @mut CrateContext,\n                    sp: span,\n                    sym: ~str,\n-                   node_id: ast::NodeId)\n-                -> ValueRef {\n-    let t = ty::node_id_to_type(ccx.tcx, node_id);\n-    register_fn_full(ccx, sp, sym, node_id, t)\n-}\n-\n-pub fn register_fn_full(ccx: @mut CrateContext,\n-                        sp: span,\n-                        sym: ~str,\n-                        node_id: ast::NodeId,\n-                        node_type: ty::t)\n-                     -> ValueRef {\n+                   node_id: ast::NodeId,\n+                   node_type: ty::t)\n+                   -> ValueRef {\n     let llfty = type_of_fn_from_ty(ccx, node_type);\n-    register_fn_fuller(ccx, sp, sym, node_id, lib::llvm::CCallConv, llfty)\n+    register_fn_llvmty(ccx, sp, sym, node_id, lib::llvm::CCallConv, llfty)\n }\n \n-pub fn register_fn_fuller(ccx: @mut CrateContext,\n+pub fn register_fn_llvmty(ccx: @mut CrateContext,\n                           sp: span,\n                           sym: ~str,\n                           node_id: ast::NodeId,\n@@ -2449,7 +2440,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                         ast::item_fn(_, purity, _, _, _) => {\n                             let llfn = if purity != ast::extern_fn {\n-                                register_fn_full(ccx, i.span, sym, i.id, ty)\n+                                register_fn(ccx, i.span, sym, i.id, ty)\n                             } else {\n                                 foreign::register_foreign_fn(ccx, i.span, sym, i.id)\n                             };\n@@ -2499,7 +2490,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             let path = vec::append((*pth).clone(), [path_name(ni.ident)]);\n                             let sym = exported_name(ccx, path, ty, ni.attrs);\n \n-                            register_fn_full(ccx, ni.span, sym, ni.id, ty)\n+                            register_fn(ccx, ni.span, sym, ni.id, ty)\n                         }\n                         ast::foreign_item_static(*) => {\n                             let ident = token::ident_to_str(&ni.ident);\n@@ -2527,7 +2518,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                             llfn = match enm.node {\n                                 ast::item_enum(_, _) => {\n-                                    register_fn_full(ccx, (*v).span, sym, id, ty)\n+                                    register_fn(ccx, (*v).span, sym, id, ty)\n                                 }\n                                 _ => fail!(\"node_variant, shouldn't happen\")\n                             };\n@@ -2551,7 +2542,8 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             let ty = ty::node_id_to_type(ccx.tcx, ctor_id);\n                             let sym = exported_name(ccx, (*struct_path).clone(), ty,\n                                                     struct_item.attrs);\n-                            let llfn = register_fn_full(ccx, struct_item.span, sym, ctor_id, ty);\n+                            let llfn = register_fn(ccx, struct_item.span,\n+                                                   sym, ctor_id, ty);\n                             set_inline_hint(llfn);\n                             llfn\n                         }\n@@ -2586,7 +2578,7 @@ pub fn register_method(ccx: @mut CrateContext,\n \n     let sym = exported_name(ccx, path, mty, m.attrs);\n \n-    let llfn = register_fn_full(ccx, m.span, sym, id, mty);\n+    let llfn = register_fn(ccx, m.span, sym, id, mty);\n     set_inline_hint_if_appr(m.attrs, llfn);\n     llfn\n }"}, {"sha": "ede2292725cc94283ba9eec1209219c55fe61b9e", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a20081666becc9c48b8818a493349c20c480ef06/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20081666becc9c48b8818a493349c20c480ef06/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=a20081666becc9c48b8818a493349c20c480ef06", "patch": "@@ -1157,6 +1157,6 @@ pub fn register_foreign_fn(ccx: @mut CrateContext,\n \n     let tys = shim_types(ccx, node_id);\n     do tys.fn_ty.decl_fn |fnty| {\n-        register_fn_fuller(ccx, sp, sym.take(), node_id, lib::llvm::CCallConv, fnty)\n+        register_fn_llvmty(ccx, sp, sym.take(), node_id, lib::llvm::CCallConv, fnty)\n     }\n }"}, {"sha": "84e6544f78092b56ca51416548ae9b03c1c47947", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a20081666becc9c48b8818a493349c20c480ef06/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20081666becc9c48b8818a493349c20c480ef06/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=a20081666becc9c48b8818a493349c20c480ef06", "patch": "@@ -410,7 +410,7 @@ impl IdVisitor {\n impl Visitor<()> for IdVisitor {\n     fn visit_mod(@mut self,\n                  module: &_mod,\n-                 span: span,\n+                 _span: span,\n                  node_id: NodeId,\n                  env: ()) {\n         (self.visit_callback)(node_id);"}]}