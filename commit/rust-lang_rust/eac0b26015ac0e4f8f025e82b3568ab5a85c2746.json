{"sha": "eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzBiMjYwMTVhYzBlNGY4ZjAyNWU4MmIzNTY4YWI1YTg1YzI3NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T07:11:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T07:11:01Z"}, "message": "Auto merge of #88214 - notriddle:notriddle/for-loop-span-drop-temps-mut, r=nagisa\n\nrustc: use more correct span data in for loop desugaring\n\nFixes #82462\n\nBefore:\n\n      help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n         |\n      LL |     for x in DroppingSlice(&*v).iter(); {\n         |                                       +\n\nAfter:\n\n      help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n         |\n      LL |     };\n         |      +\n\nThis seems like a reasonable fix: since the desugared \"expr_drop_temps_mut\" contains the entire desugared loop construct, its span should contain the entire loop construct as well.", "tree": {"sha": "df11a6aa754a5a8ce04fe0a6dae628a9ec7f4f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df11a6aa754a5a8ce04fe0a6dae628a9ec7f4f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "html_url": "https://github.com/rust-lang/rust/commit/eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ce2fb1678aa6e5508bd1700d2d6f3e436340bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ce2fb1678aa6e5508bd1700d2d6f3e436340bb", "html_url": "https://github.com/rust-lang/rust/commit/81ce2fb1678aa6e5508bd1700d2d6f3e436340bb"}, {"sha": "48268f523776f32a321c37a1464a2a6512e357b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/48268f523776f32a321c37a1464a2a6512e357b0", "html_url": "https://github.com/rust-lang/rust/commit/48268f523776f32a321c37a1464a2a6512e357b0"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "12ffe7a136457d67219c83c78a2f443cae616b6b", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "patch": "@@ -15,7 +15,6 @@ pub(super) fn check<'tcx>(\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,\n     body: &'tcx Expr<'_>,\n-    expr: &'tcx Expr<'_>,\n ) {\n     let pat_span = pat.span;\n \n@@ -43,7 +42,7 @@ pub(super) fn check<'tcx>(\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,\n-                    expr.span,\n+                    arg_span,\n                     &format!(\"you seem to want to iterate on a map's {}s\", kind),\n                     |diag| {\n                         let map = sugg::Sugg::hir(cx, arg, \"map\");"}, {"sha": "e640c62ebdaceabc102d798869f804e7a1d203b0", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "patch": "@@ -5,12 +5,12 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, expr: &Expr<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n     if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n             ITER_NEXT_LOOP,\n-            expr.span,\n+            arg.span,\n             \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n             probably not what you want\",\n         );"}, {"sha": "5df1b79640164302d2a8532175486208942569e4", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "patch": "@@ -616,15 +616,15 @@ fn check_for_loop<'tcx>(\n         needless_range_loop::check(cx, pat, arg, body, expr);\n         explicit_counter_loop::check(cx, pat, arg, body, expr);\n     }\n-    check_for_loop_arg(cx, pat, arg, expr);\n-    for_kv_map::check(cx, pat, arg, body, expr);\n+    check_for_loop_arg(cx, pat, arg);\n+    for_kv_map::check(cx, pat, arg, body);\n     mut_range_bound::check(cx, arg, body);\n     single_element_loop::check(cx, pat, arg, body, expr);\n     same_item_push::check(cx, pat, arg, body, expr);\n     manual_flatten::check(cx, pat, arg, body, span);\n }\n \n-fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n+fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n@@ -637,7 +637,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr:\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n             },\n             \"next\" => {\n-                next_loop_linted = iter_next_loop::check(cx, arg, expr);\n+                next_loop_linted = iter_next_loop::check(cx, arg);\n             },\n             _ => {},\n         }"}, {"sha": "7157b80118558b889cc41556e071dd71891a903e", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0b26015ac0e4f8f025e82b3568ab5a85c2746/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=eac0b26015ac0e4f8f025e82b3568ab5a85c2746", "patch": "@@ -144,7 +144,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n-                        expr.span,\n+                        arg.span,\n                         &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg(\n@@ -170,7 +170,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n-                        expr.span,\n+                        arg.span,\n                         &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg("}]}