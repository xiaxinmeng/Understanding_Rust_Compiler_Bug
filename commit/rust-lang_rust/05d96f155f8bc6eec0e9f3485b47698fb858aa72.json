{"sha": "05d96f155f8bc6eec0e9f3485b47698fb858aa72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDk2ZjE1NWY4YmM2ZWVjMGU5ZjM0ODViNDc2OThmYjg1OGFhNzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-30T20:50:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-30T20:50:48Z"}, "message": "rustc: Allow non-type-parametric resources to be logged", "tree": {"sha": "4814c9ecf2134338210e1010d337231aade4699d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4814c9ecf2134338210e1010d337231aade4699d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d96f155f8bc6eec0e9f3485b47698fb858aa72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d96f155f8bc6eec0e9f3485b47698fb858aa72", "html_url": "https://github.com/rust-lang/rust/commit/05d96f155f8bc6eec0e9f3485b47698fb858aa72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d96f155f8bc6eec0e9f3485b47698fb858aa72/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bbe8d2e8c61165d539a9e4d916566a57f59d708", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bbe8d2e8c61165d539a9e4d916566a57f59d708", "html_url": "https://github.com/rust-lang/rust/commit/7bbe8d2e8c61165d539a9e4d916566a57f59d708"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "71a11a7d758609d6225a2aed595c35288b9438ad", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/05d96f155f8bc6eec0e9f3485b47698fb858aa72/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/05d96f155f8bc6eec0e9f3485b47698fb858aa72/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=05d96f155f8bc6eec0e9f3485b47698fb858aa72", "patch": "@@ -111,23 +111,42 @@ print::walk_struct(bool align, const uint8_t *end_sp) {\n \n void\n print::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                const uint8_t *ty_params_sp) {\n+                const uint8_t *ty_params_sp, const uint8_t *end_sp) {\n     DPRINT(\"res@%p\", dtor);\n-    if (!n_ty_params)\n+\n+    // Print type parameters.\n+    if (n_ty_params) {\n+        DPRINT(\"<\");\n+\n+        bool first = true;\n+        for (uint16_t i = 0; i < n_ty_params; i++) {\n+            if (!first)\n+                DPRINT(\",\");\n+            first = false;\n+            get_u16_bump(sp);   // Skip over the size.\n+            walk(align);\n+        }\n+\n+        DPRINT(\">\");\n+    }\n+\n+    // Print arguments.\n+\n+    if (sp == end_sp)\n         return;\n \n-    DPRINT(\"<\");\n+    DPRINT(\"(\");\n \n     bool first = true;\n-    for (uint16_t i = 0; i < n_ty_params; i++) {\n+    while (sp != end_sp) {\n         if (!first)\n             DPRINT(\",\");\n         first = false;\n-        get_u16_bump(sp);   // Skip over the size.\n+\n         walk(align);\n     }\n \n-    DPRINT(\">\");\n+    DPRINT(\")\");\n }\n \n void\n@@ -328,7 +347,8 @@ class cmp : public data<cmp,ptr_pair> {\n                   const data_pair<uint32_t> &tag_variants);\n     void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp);\n+                  const uint8_t *ty_params_sp, const uint8_t *end_sp,\n+                  const data_pair<uintptr_t> &live);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n@@ -380,7 +400,8 @@ cmp::walk_struct(bool align, const uint8_t *end_sp) {\n \n void\n cmp::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-              const uint8_t *ty_params_sp) {\n+              const uint8_t *ty_params_sp, const uint8_t *end_sp,\n+              const data_pair<uintptr_t> &live) {\n     abort();    // TODO\n }\n \n@@ -480,6 +501,28 @@ log::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n         out << \")\";\n }\n \n+void\n+log::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n+              const uint8_t *ty_params_sp, const uint8_t *end_sp,\n+              bool live) {\n+    out << \"res\";\n+\n+    if (this->sp == end_sp)\n+        return;\n+\n+    out << \"(\";\n+\n+    bool first = true;\n+    while (sp != end_sp) {\n+        if (!first)\n+            out << \", \";\n+        walk(align);\n+        align = true, first = false;\n+    }\n+\n+    out << \")\";\n+}\n+\n } // end namespace shape\n \n extern \"C\" void"}, {"sha": "c2b551f65bc5e2b202f6641b7ba6d2536a41e398", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05d96f155f8bc6eec0e9f3485b47698fb858aa72/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/05d96f155f8bc6eec0e9f3485b47698fb858aa72/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=05d96f155f8bc6eec0e9f3485b47698fb858aa72", "patch": "@@ -453,7 +453,8 @@ ctxt<T>::walk_res(bool align) {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_res(align, dtor, n_ty_params, ty_params_sp);\n+    static_cast<T *>(this)->walk_res(align, dtor, n_ty_params, ty_params_sp,\n+                                     end_sp);\n \n     sp = end_sp;\n }\n@@ -479,7 +480,7 @@ class print : public ctxt<print> {\n     void walk_tag(bool align, tag_info &tinfo);\n     void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp);\n+                  const uint8_t *ty_params_sp, const uint8_t *end_sp);\n     void walk_var(bool align, uint8_t param);\n \n     void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n@@ -559,7 +560,7 @@ class size_of : public ctxt<size_of> {\n     }\n \n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp) {\n+                  const uint8_t *ty_params_sp, const uint8_t *end_sp) {\n         abort();    // TODO\n     }\n \n@@ -788,10 +789,11 @@ class data : public ctxt< data<T,U> > {\n     }\n \n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp) {\n+                  const uint8_t *ty_params_sp, const uint8_t *end_sp) {\n+        typename U::template data<uintptr_t>::t live = bump_dp<uintptr_t>(dp);\n         // Delegate to the implementation.\n         static_cast<T *>(this)->walk_res(align, dtor, n_ty_params,\n-                                         ty_params_sp);\n+                                         ty_params_sp, end_sp, live);\n     }\n \n     void walk_var(bool align, uint8_t param_index) {\n@@ -957,8 +959,6 @@ class log : public data<log,ptr> {\n     : data<log,ptr>(other.task, other.sp, other.params, other.tables, in_dp),\n       out(other.out) {}\n \n-    void walk_string(const std::pair<ptr,ptr> &data);\n-\n     void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n         walk_vec(align, is_pod, get_evec_data_range(dp));\n     }\n@@ -991,11 +991,6 @@ class log : public data<log,ptr> {\n     void walk_chan(bool align) { out << \"chan\"; }\n     void walk_task(bool align) { out << \"task\"; }\n \n-    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n-                  const uint8_t *ty_params_sp) {\n-        out << \"res\";   // TODO\n-    }\n-\n     void walk_subcontext(bool align, log &sub) { sub.walk(align); }\n \n     void walk_box_contents(bool align, log &sub, ptr &ref_count_dp) {\n@@ -1010,6 +1005,10 @@ class log : public data<log,ptr> {\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n+    void walk_string(const std::pair<ptr,ptr> &data);\n+    void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n+                  const uint8_t *ty_params_sp, const uint8_t *end_sp,\n+                  bool live);\n \n     template<typename T>\n     void walk_number() { out << get_dp<T>(dp); }"}]}