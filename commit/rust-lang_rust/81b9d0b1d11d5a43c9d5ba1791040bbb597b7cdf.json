{"sha": "81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "node_id": "C_kwDOAAsO6NoAKDgxYjlkMGIxZDExZDVhNDNjOWQ1YmExNzkxMDQwYmJiNTk3YjdjZGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-10T08:13:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-10T08:13:43Z"}, "message": "Rollup merge of #102868 - compiler-errors:rename-assoc-tyalias-to-ty, r=TaKO8Ki\n\nRename `AssocItemKind::TyAlias` to `AssocItemKind::Type`\n\nThanks `@camsteffen` for catching this in ast too, cc https://github.com/rust-lang/rust/pull/102829#issuecomment-1272649247", "tree": {"sha": "95eef182a5cfa50a9d32787c46c6cfe580be0da5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95eef182a5cfa50a9d32787c46c6cfe580be0da5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQ9Q3CRBK7hj4Ov3rIwAAKzYIAGv5gqSe/tUwDzXW0hNvKgFO\nLSTul5A0HIPX5dI2R0R6wKvGp5RG5FldAzFIhLGdndEQKIf61Jad4MIBi4/5fADu\nlKXkXfnUswNzHM68k+CERTLoZkDvc/KeHPhDLWDL/L/m6L9Otit8+HJVTK+l5KWy\nx6G94qWiUg9zXGtR5IW0rEy8Dp3M4FwJ2jxAwvXxgAzETlchfNVGmd1t8JhI2GLh\nPi1GaoGQ2vX6uCMl0/IbsG+XfKJYS5/Yjw1/9dkxRWo61WNhD5FA+BZ50G0qStwM\nzcoiPF2BZWmU7j2Ce6U6MmQq9eWFWOyt0XhEPWOEfbw/gMm2962wl+l4IgQen/w=\n=vd2a\n-----END PGP SIGNATURE-----\n", "payload": "tree 95eef182a5cfa50a9d32787c46c6cfe580be0da5\nparent 5a09b72156a77918d4f9c3a29e89f9b1442f4772\nparent d3bd6beb971aa712f29b881b5e613a12180c52ad\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665389623 +0530\ncommitter GitHub <noreply@github.com> 1665389623 +0530\n\nRollup merge of #102868 - compiler-errors:rename-assoc-tyalias-to-ty, r=TaKO8Ki\n\nRename `AssocItemKind::TyAlias` to `AssocItemKind::Type`\n\nThanks `@camsteffen` for catching this in ast too, cc https://github.com/rust-lang/rust/pull/102829#issuecomment-1272649247\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "html_url": "https://github.com/rust-lang/rust/commit/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a09b72156a77918d4f9c3a29e89f9b1442f4772", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a09b72156a77918d4f9c3a29e89f9b1442f4772", "html_url": "https://github.com/rust-lang/rust/commit/5a09b72156a77918d4f9c3a29e89f9b1442f4772"}, {"sha": "d3bd6beb971aa712f29b881b5e613a12180c52ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3bd6beb971aa712f29b881b5e613a12180c52ad", "html_url": "https://github.com/rust-lang/rust/commit/d3bd6beb971aa712f29b881b5e613a12180c52ad"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "340302766d2451b300285fd1607a3ed1a060b0ae", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -2953,7 +2953,7 @@ pub enum AssocItemKind {\n     /// An associated function.\n     Fn(Box<Fn>),\n     /// An associated type.\n-    TyAlias(Box<TyAlias>),\n+    Type(Box<TyAlias>),\n     /// A macro expanding to associated items.\n     MacCall(P<MacCall>),\n }\n@@ -2963,7 +2963,7 @@ impl AssocItemKind {\n         match *self {\n             Self::Const(defaultness, ..)\n             | Self::Fn(box Fn { defaultness, .. })\n-            | Self::TyAlias(box TyAlias { defaultness, .. }) => defaultness,\n+            | Self::Type(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n         }\n     }\n@@ -2974,7 +2974,7 @@ impl From<AssocItemKind> for ItemKind {\n         match assoc_item_kind {\n             AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n             AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n-            AssocItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n+            AssocItemKind::Type(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n         }\n     }\n@@ -2987,7 +2987,7 @@ impl TryFrom<ItemKind> for AssocItemKind {\n         Ok(match item_kind {\n             ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n             ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),\n-            ItemKind::TyAlias(ty_alias_kind) => AssocItemKind::TyAlias(ty_alias_kind),\n+            ItemKind::TyAlias(ty_kind) => AssocItemKind::Type(ty_kind),\n             ItemKind::MacCall(a) => AssocItemKind::MacCall(a),\n             _ => return Err(item_kind),\n         })"}, {"sha": "25022a02f4bb7e4793e0c0b6d1e74711378f05f5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -1106,7 +1106,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(box TyAlias {\n+        AssocItemKind::Type(box TyAlias {\n             defaultness,\n             generics,\n             where_clauses,"}, {"sha": "e752cc7dc2dcd6ab34d398c8fd6f09670caccb12", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -683,7 +683,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, generics, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n+        AssocItemKind::Type(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "56d71aaa7d332c48ce46cd1ad37a3c9e129f577f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -804,7 +804,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)), true)\n             }\n-            AssocItemKind::TyAlias(box TyAlias {\n+            AssocItemKind::Type(box TyAlias {\n                 ref generics,\n                 where_clauses,\n                 ref bounds,\n@@ -850,7 +850,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let kind = match &i.kind {\n             AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-            AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n+            AssocItemKind::Type(..) => hir::AssocItemKind::Type,\n             AssocItemKind::Fn(box Fn { sig, .. }) => {\n                 hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n             }\n@@ -898,7 +898,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n+            AssocItemKind::Type(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, *where_clauses, false);\n                 self.lower_generics(\n@@ -941,7 +941,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             span: self.lower_span(i.span),\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-                AssocItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n+                AssocItemKind::Type(..) => hir::AssocItemKind::Type,\n                 AssocItemKind::Fn(box Fn { sig, .. }) => {\n                     hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n                 }"}, {"sha": "1a4c60087c3851417cda8d33784a6daeaf37589a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -1556,7 +1556,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         });\n                     }\n                 }\n-                AssocItemKind::TyAlias(box TyAlias {\n+                AssocItemKind::Type(box TyAlias {\n                     generics,\n                     where_clauses,\n                     where_predicates_split,\n@@ -1595,7 +1595,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         match item.kind {\n-            AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. })\n+            AssocItemKind::Type(box TyAlias { ref generics, ref bounds, ref ty, .. })\n                 if ctxt == AssocCtxt::Trait =>\n             {\n                 self.visit_vis(&item.vis);"}, {"sha": "0f11c1766528a004db5fc63a4b96441f8bd573b3", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -517,7 +517,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n         let is_fn = match i.kind {\n             ast::AssocItemKind::Fn(_) => true,\n-            ast::AssocItemKind::TyAlias(box ast::TyAlias { ref ty, .. }) => {\n+            ast::AssocItemKind::Type(box ast::TyAlias { ref ty, .. }) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "159853c9e245984cb122bfac9191b84e685e3d99", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -516,7 +516,7 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Const(def, ty, body) => {\n                 self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n-            ast::AssocItemKind::TyAlias(box ast::TyAlias {\n+            ast::AssocItemKind::Type(box ast::TyAlias {\n                 defaultness,\n                 generics,\n                 where_clauses,"}, {"sha": "16ee3aa89bb1237967b3a7a16e2c65bd447ca8de", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -566,7 +566,7 @@ impl<'a> TraitDef<'a> {\n                     tokens: None,\n                 },\n                 attrs: ast::AttrVec::new(),\n-                kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAlias {\n+                kind: ast::AssocItemKind::Type(Box::new(ast::TyAlias {\n                     defaultness: ast::Defaultness::Final,\n                     generics: Generics::default(),\n                     where_clauses: ("}, {"sha": "6b32e78b910dbf69477a4d6d1e4604fd233ef2bc", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -187,7 +187,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n     }\n \n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n-        if let ast::AssocItemKind::TyAlias(..) = it.kind {\n+        if let ast::AssocItemKind::Type(..) = it.kind {\n             self.check_case(cx, \"associated type\", &it.ident);\n         }\n     }"}, {"sha": "33220fd2b395dd0c32de941878104d5728d91f50", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -620,7 +620,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n         record_variants!(\n             (self, i, i.kind, Id::None, ast, AssocItem, AssocItemKind),\n-            [Const, Fn, TyAlias, MacCall]\n+            [Const, Fn, Type, MacCall]\n         );\n         ast_visit::walk_assoc_item(self, i, ctxt);\n     }"}, {"sha": "c3d87b5b6af3c6300c9e3f0a8f5062bfbdd245d5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -1425,7 +1425,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                     }\n                     (DefKind::AssocFn, ValueNS)\n                 }\n-                AssocItemKind::TyAlias(..) => (DefKind::AssocTy, TypeNS),\n+                AssocItemKind::Type(..) => (DefKind::AssocTy, TypeNS),\n                 AssocItemKind::MacCall(_) => bug!(), // handled above\n             };\n "}, {"sha": "d36e0f61d9161967b94106cb90bd59e63bb7a7ef", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n             AssocItemKind::Fn(..) | AssocItemKind::Const(..) => DefPathData::ValueNs(i.ident.name),\n-            AssocItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n+            AssocItemKind::Type(..) => DefPathData::TypeNs(i.ident.name),\n             AssocItemKind::MacCall(..) => return self.visit_macro_invoc(i.id),\n         };\n "}, {"sha": "989a827ef7d9f77fcc51df96062242d591a41799", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -2498,7 +2498,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 AssocItemKind::Fn(box Fn { generics, .. }) => {\n                     walk_assoc_item(self, generics, LifetimeBinderKind::Function, item);\n                 }\n-                AssocItemKind::TyAlias(box TyAlias { generics, .. }) => self\n+                AssocItemKind::Type(box TyAlias { generics, .. }) => self\n                     .with_lifetime_rib(LifetimeRibKind::AnonymousReportError, |this| {\n                         walk_assoc_item(this, generics, LifetimeBinderKind::Item, item)\n                     }),\n@@ -2694,8 +2694,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     },\n                 );\n             }\n-            AssocItemKind::TyAlias(box TyAlias { generics, .. }) => {\n-                debug!(\"resolve_implementation AssocItemKind::TyAlias\");\n+            AssocItemKind::Type(box TyAlias { generics, .. }) => {\n+                debug!(\"resolve_implementation AssocItemKind::Type\");\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n@@ -2770,7 +2770,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let res = binding.res();\n         let Res::Def(def_kind, _) = res else { bug!() };\n         match (def_kind, kind) {\n-            (DefKind::AssocTy, AssocItemKind::TyAlias(..))\n+            (DefKind::AssocTy, AssocItemKind::Type(..))\n             | (DefKind::AssocFn, AssocItemKind::Fn(..))\n             | (DefKind::AssocConst, AssocItemKind::Const(..)) => {\n                 self.r.record_partial_res(id, PartialRes::new(res));\n@@ -2784,7 +2784,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let (code, kind) = match kind {\n             AssocItemKind::Const(..) => (rustc_errors::error_code!(E0323), \"const\"),\n             AssocItemKind::Fn(..) => (rustc_errors::error_code!(E0324), \"method\"),\n-            AssocItemKind::TyAlias(..) => (rustc_errors::error_code!(E0325), \"type\"),\n+            AssocItemKind::Type(..) => (rustc_errors::error_code!(E0325), \"type\"),\n             AssocItemKind::MacCall(..) => span_bug!(span, \"unexpanded macro\"),\n         };\n         let trait_path = path_names_to_string(path);"}, {"sha": "c05f89a65755f8630c1573468522826d0879d49f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -1482,7 +1482,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             .filter(|(_, res)| match (kind, res) {\n                 (AssocItemKind::Const(..), Res::Def(DefKind::AssocConst, _)) => true,\n                 (AssocItemKind::Fn(_), Res::Def(DefKind::AssocFn, _)) => true,\n-                (AssocItemKind::TyAlias(..), Res::Def(DefKind::AssocTy, _)) => true,\n+                (AssocItemKind::Type(..), Res::Def(DefKind::AssocTy, _)) => true,\n                 _ => false,\n             })\n             .map(|(key, _)| key.ident.name)\n@@ -1546,7 +1546,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             AssocSuggestion::MethodWithSelf\n                         }\n                         ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,\n-                        ast::AssocItemKind::TyAlias(..) => AssocSuggestion::AssocType,\n+                        ast::AssocItemKind::Type(..) => AssocSuggestion::AssocType,\n                         ast::AssocItemKind::MacCall(_) => continue,\n                     });\n                 }"}, {"sha": "1521b692a7524908d1e481e81f29431d28fa5527", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -26,7 +26,7 @@ ast-stats-1 Block                    288 ( 3.4%)             6            48\n ast-stats-1 GenericBound             352 ( 4.2%)             4            88\n ast-stats-1 - Trait                    352 ( 4.2%)             4\n ast-stats-1 AssocItem                416 ( 4.9%)             4           104\n-ast-stats-1 - TyAlias                  208 ( 2.5%)             2\n+ast-stats-1 - Type                     208 ( 2.5%)             2\n ast-stats-1 - Fn                       208 ( 2.5%)             2\n ast-stats-1 GenericParam             480 ( 5.7%)             5            96\n ast-stats-1 PathSegment              720 ( 8.6%)            30            24\n@@ -84,7 +84,7 @@ ast-stats-2 Block                    288 ( 3.1%)             6            48\n ast-stats-2 GenericBound             352 ( 3.8%)             4            88\n ast-stats-2 - Trait                    352 ( 3.8%)             4\n ast-stats-2 AssocItem                416 ( 4.5%)             4           104\n-ast-stats-2 - TyAlias                  208 ( 2.3%)             2\n+ast-stats-2 - Type                     208 ( 2.3%)             2\n ast-stats-2 - Fn                       208 ( 2.3%)             2\n ast-stats-2 GenericParam             480 ( 5.2%)             5            96\n ast-stats-2 PathSegment              792 ( 8.7%)            33            24"}, {"sha": "0133997560eae2120afcdc92060173576a4a7a03", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -438,14 +438,14 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n         (\n-            TyAlias(box ast::TyAlias {\n+            Type(box ast::TyAlias {\n                 defaultness: ld,\n                 generics: lg,\n                 bounds: lb,\n                 ty: lt,\n                 ..\n             }),\n-            TyAlias(box ast::TyAlias {\n+            Type(box ast::TyAlias {\n                 defaultness: rd,\n                 generics: rg,\n                 bounds: rb,"}, {"sha": "a2a73f0a5fb3a2d84862f9dbfc433ae7837c25b1", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -594,7 +594,7 @@ impl<'a> FmtVisitor<'a> {\n             let both_type = |l: &TyOpt, r: &TyOpt| is_type(l) && is_type(r);\n             let both_opaque = |l: &TyOpt, r: &TyOpt| is_opaque(l) && is_opaque(r);\n             let need_empty_line = |a: &ast::AssocItemKind, b: &ast::AssocItemKind| match (a, b) {\n-                (TyAlias(lty), TyAlias(rty))\n+                (Type(lty), Type(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     false\n@@ -612,7 +612,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n-                (TyAlias(lty), TyAlias(rty))\n+                (Type(lty), Type(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     a.ident.as_str().cmp(b.ident.as_str())\n@@ -621,10 +621,10 @@ impl<'a> FmtVisitor<'a> {\n                     a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n-                (_, TyAlias(ty)) if is_type(&ty.ty) => Ordering::Greater,\n-                (TyAlias(..), _) => Ordering::Less,\n-                (_, TyAlias(..)) => Ordering::Greater,\n+                (Type(ty), _) if is_type(&ty.ty) => Ordering::Less,\n+                (_, Type(ty)) if is_type(&ty.ty) => Ordering::Greater,\n+                (Type(..), _) => Ordering::Less,\n+                (_, Type(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n                 (_, Const(..)) => Ordering::Greater,\n                 (MacCall(..), _) => Ordering::Less,"}, {"sha": "9c3cc7820d2991b64e807e1edf4129e3138e6c7e", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=81b9d0b1d11d5a43c9d5ba1791040bbb597b7cdf", "patch": "@@ -660,7 +660,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.push_rewrite(ai.span, rewrite);\n                 }\n             }\n-            (ast::AssocItemKind::TyAlias(ref ty_alias), _) => {\n+            (ast::AssocItemKind::Type(ref ty_alias), _) => {\n                 self.visit_ty_alias_kind(ty_alias, visitor_kind, ai.span);\n             }\n             (ast::AssocItemKind::MacCall(ref mac), _) => {"}]}