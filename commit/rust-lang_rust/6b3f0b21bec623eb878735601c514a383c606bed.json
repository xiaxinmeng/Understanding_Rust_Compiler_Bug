{"sha": "6b3f0b21bec623eb878735601c514a383c606bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiM2YwYjIxYmVjNjIzZWI4Nzg3MzU2MDFjNTE0YTM4M2M2MDZiZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-26T04:08:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:44Z"}, "message": "Convert the rest of rustc::back to istrs. Issue #855", "tree": {"sha": "068badcecf9650c979534f21abe6bdd003b0a1ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/068badcecf9650c979534f21abe6bdd003b0a1ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b3f0b21bec623eb878735601c514a383c606bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3f0b21bec623eb878735601c514a383c606bed", "html_url": "https://github.com/rust-lang/rust/commit/6b3f0b21bec623eb878735601c514a383c606bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b3f0b21bec623eb878735601c514a383c606bed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58bfced3cdb8e4eccbee9c5f9494ab1929d3720", "url": "https://api.github.com/repos/rust-lang/rust/commits/a58bfced3cdb8e4eccbee9c5f9494ab1929d3720", "html_url": "https://github.com/rust-lang/rust/commit/a58bfced3cdb8e4eccbee9c5f9494ab1929d3720"}], "stats": {"total": 130, "additions": 71, "deletions": 59}, "files": [{"sha": "6055bc1ee52ee6235ef3734fe697abcdb170f8e8", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=6b3f0b21bec623eb878735601c514a383c606bed", "patch": "@@ -114,13 +114,13 @@ const worst_case_glue_call_args: int = 7;\n \n const abi_version: uint = 1u;\n \n-fn memcpy_glue_name() -> str { ret \"rust_memcpy_glue\"; }\n+fn memcpy_glue_name() -> istr { ret ~\"rust_memcpy_glue\"; }\n \n-fn bzero_glue_name() -> str { ret \"rust_bzero_glue\"; }\n+fn bzero_glue_name() -> istr { ret ~\"rust_bzero_glue\"; }\n \n-fn yield_glue_name() -> str { ret \"rust_yield_glue\"; }\n+fn yield_glue_name() -> istr { ret ~\"rust_yield_glue\"; }\n \n-fn no_op_type_glue_name() -> str { ret \"rust_no_op_type_glue\"; }\n+fn no_op_type_glue_name() -> istr { ret ~\"rust_no_op_type_glue\"; }\n //\n // Local Variables:\n // mode: rust"}, {"sha": "660118ebd1165694b5300697942acfa3a08bbece", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6b3f0b21bec623eb878735601c514a383c606bed", "patch": "@@ -91,7 +91,7 @@ mod write {\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n         link_intrinsics(sess, llmod);\n         let pm = mk_pass_manager();\n-        let td = mk_target_data(x86::get_data_layout());\n+        let td = mk_target_data(istr::to_estr(x86::get_data_layout()));\n         llvm::LLVMAddTargetData(td.lltd, pm.llpm);\n         // TODO: run the linter here also, once there are llvm-c bindings for\n         // it.\n@@ -190,7 +190,7 @@ mod write {\n                 // Save the assembly file if -S is used\n \n                 if opts.output_type == output_type_assembly {\n-                    let triple = x86::get_target_triple();\n+                    let triple = istr::to_estr(x86::get_target_triple());\n                     let output = istr::to_estr(output);\n                     llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n                                                   str::buf(triple),\n@@ -204,7 +204,7 @@ mod write {\n                 // This .o is needed when an exe is built\n                 if opts.output_type == output_type_object ||\n                        opts.output_type == output_type_exe {\n-                    let triple = x86::get_target_triple();\n+                    let triple = istr::to_estr(x86::get_target_triple());\n                     let output = istr::to_estr(output);\n                     llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n                                                   str::buf(triple),\n@@ -216,7 +216,7 @@ mod write {\n                 // If we aren't saving temps then just output the file\n                 // type corresponding to the '-c' or '-S' flag used\n \n-                let triple = x86::get_target_triple();\n+                let triple = istr::to_estr(x86::get_target_triple());\n                 let output = istr::to_estr(output);\n                 llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n                                               str::buf(triple),"}, {"sha": "04facd848a160dfa3dd2398947b3ea80ef813fcc", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=6b3f0b21bec623eb878735601c514a383c606bed", "patch": "@@ -1,4 +1,5 @@\n \n+import std::istr;\n import middle::trans;\n import trans::decl_cdecl_fn;\n import middle::trans_common::T_f32;\n@@ -52,14 +53,16 @@ type upcalls =\n \n fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n                    taskptr_type: TypeRef, llmod: ModuleRef) -> @upcalls {\n-    fn decl(llmod: ModuleRef, name: str, tys: [TypeRef], rv: TypeRef) ->\n+    fn decl(llmod: ModuleRef, name: &istr, tys: [TypeRef], rv: TypeRef) ->\n        ValueRef {\n         let arg_tys: [TypeRef] = [];\n         for t: TypeRef in tys { arg_tys += [t]; }\n         let fn_ty = T_fn(arg_tys, rv);\n-        ret trans::decl_cdecl_fn(llmod, \"upcall_\" + name, fn_ty);\n+        ret trans::decl_cdecl_fn(llmod,\n+                                 istr::to_estr(~\"upcall_\" + name), fn_ty);\n     }\n-    fn decl_with_taskptr(taskptr_type: TypeRef, llmod: ModuleRef, name: str,\n+    fn decl_with_taskptr(taskptr_type: TypeRef, llmod: ModuleRef,\n+                         name: &istr,\n                          tys: [TypeRef], rv: TypeRef) -> ValueRef {\n         ret decl(llmod, name, [taskptr_type] + tys, rv);\n     }\n@@ -68,55 +71,55 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n     let dr = bind decl(llmod, _, _, _);\n \n     let empty_vec: [TypeRef] = [];\n-    ret @{grow_task: dv(\"grow_task\", [T_size_t()]),\n-          _yield: dv(\"yield\", empty_vec),\n-          sleep: dv(\"sleep\", [T_size_t()]),\n-          _fail: dv(\"fail\", [T_ptr(T_i8()), T_ptr(T_i8()), T_size_t()]),\n-          kill: dv(\"kill\", [taskptr_type]),\n-          exit: dv(\"exit\", empty_vec),\n+    ret @{grow_task: dv(~\"grow_task\", [T_size_t()]),\n+          _yield: dv(~\"yield\", empty_vec),\n+          sleep: dv(~\"sleep\", [T_size_t()]),\n+          _fail: dv(~\"fail\", [T_ptr(T_i8()), T_ptr(T_i8()), T_size_t()]),\n+          kill: dv(~\"kill\", [taskptr_type]),\n+          exit: dv(~\"exit\", empty_vec),\n           malloc:\n-              d(\"malloc\", [T_size_t(), T_ptr(tydesc_type)], T_ptr(T_i8())),\n-          free: dv(\"free\", [T_ptr(T_i8()), T_int()]),\n+              d(~\"malloc\", [T_size_t(), T_ptr(tydesc_type)], T_ptr(T_i8())),\n+          free: dv(~\"free\", [T_ptr(T_i8()), T_int()]),\n           shared_malloc:\n-              d(\"shared_malloc\", [T_size_t(), T_ptr(tydesc_type)],\n+              d(~\"shared_malloc\", [T_size_t(), T_ptr(tydesc_type)],\n                 T_ptr(T_i8())),\n-          shared_free: dv(\"shared_free\", [T_ptr(T_i8())]),\n-          mark: d(\"mark\", [T_ptr(T_i8())], T_int()),\n-          new_str: d(\"new_str\", [T_ptr(T_i8()), T_size_t()], T_ptr(T_str())),\n+          shared_free: dv(~\"shared_free\", [T_ptr(T_i8())]),\n+          mark: d(~\"mark\", [T_ptr(T_i8())], T_int()),\n+          new_str: d(~\"new_str\", [T_ptr(T_i8()), T_size_t()], T_ptr(T_str())),\n           evec_append:\n-              d(\"evec_append\",\n+              d(~\"evec_append\",\n                 [T_ptr(tydesc_type), T_ptr(tydesc_type),\n                  T_ptr(T_opaque_vec_ptr()), T_opaque_vec_ptr(), T_bool()],\n                 T_void()),\n           get_type_desc:\n-              d(\"get_type_desc\",\n+              d(~\"get_type_desc\",\n                 [T_ptr(T_nil()), T_size_t(), T_size_t(), T_size_t(),\n                  T_ptr(T_ptr(tydesc_type)), T_int()], T_ptr(tydesc_type)),\n           ivec_resize:\n-              d(\"ivec_resize\", [T_ptr(T_opaque_ivec()), T_int()], T_void()),\n+              d(~\"ivec_resize\", [T_ptr(T_opaque_ivec()), T_int()], T_void()),\n           ivec_spill:\n-              d(\"ivec_spill\", [T_ptr(T_opaque_ivec()), T_int()], T_void()),\n+              d(~\"ivec_spill\", [T_ptr(T_opaque_ivec()), T_int()], T_void()),\n           ivec_resize_shared:\n-              d(\"ivec_resize_shared\", [T_ptr(T_opaque_ivec()), T_int()],\n+              d(~\"ivec_resize_shared\", [T_ptr(T_opaque_ivec()), T_int()],\n                 T_void()),\n           ivec_spill_shared:\n-              d(\"ivec_spill_shared\", [T_ptr(T_opaque_ivec()), T_int()],\n+              d(~\"ivec_spill_shared\", [T_ptr(T_opaque_ivec()), T_int()],\n                 T_void()),\n           ivec_push:\n-              d(\"ivec_push\", [T_ptr(T_opaque_ivec()), T_ptr(tydesc_type),\n+              d(~\"ivec_push\", [T_ptr(T_opaque_ivec()), T_ptr(tydesc_type),\n                               T_ptr(T_i8())], T_void()),\n           cmp_type:\n-              dr(\"cmp_type\",\n+              dr(~\"cmp_type\",\n                  [T_ptr(T_i1()), taskptr_type, T_ptr(tydesc_type),\n                   T_ptr(T_ptr(tydesc_type)), T_ptr(T_i8()), T_ptr(T_i8()),\n                   T_i8()], T_void()),\n           log_type:\n-              dr(\"log_type\",\n+              dr(~\"log_type\",\n                  [taskptr_type, T_ptr(tydesc_type), T_ptr(T_i8()), T_i32()],\n                  T_void()),\n-          dynastack_mark: d(\"dynastack_mark\", [], T_ptr(T_i8())),\n-          dynastack_alloc: d(\"dynastack_alloc\", [T_size_t()], T_ptr(T_i8())),\n-          dynastack_free: d(\"dynastack_free\", [T_ptr(T_i8())], T_void())};\n+          dynastack_mark: d(~\"dynastack_mark\", [], T_ptr(T_i8())),\n+          dynastack_alloc: d(~\"dynastack_alloc\", [T_size_t()], T_ptr(T_i8())),\n+          dynastack_free: d(~\"dynastack_free\", [T_ptr(T_i8())], T_void())};\n }\n //\n // Local Variables:"}, {"sha": "727bb319ae8e414c8e43b86dcc1a5c02c1724f9a", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=6b3f0b21bec623eb878735601c514a383c606bed", "patch": "@@ -5,30 +5,32 @@ import std::str;\n import std::istr;\n import std::os::target_os;\n \n-fn get_module_asm() -> str { ret \"\"; }\n+fn get_module_asm() -> istr { ret ~\"\"; }\n \n-fn get_meta_sect_name() -> str {\n-    if istr::eq(target_os(), ~\"macos\") { ret \"__DATA,__note.rustc\"; }\n-    if istr::eq(target_os(), ~\"win32\") { ret \".note.rustc\"; }\n-    ret \".note.rustc\";\n+fn get_meta_sect_name() -> istr {\n+    if istr::eq(target_os(), ~\"macos\") { ret ~\"__DATA,__note.rustc\"; }\n+    if istr::eq(target_os(), ~\"win32\") { ret ~\".note.rustc\"; }\n+    ret ~\".note.rustc\";\n }\n \n-fn get_data_layout() -> str {\n+fn get_data_layout() -> istr {\n     if istr::eq(target_os(), ~\"macos\") {\n-        ret \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\" + \"-i32:32:32-i64:32:64\" +\n-                \"-f32:32:32-f64:32:64-v64:64:64\" +\n-                \"-v128:128:128-a0:0:64-f80:128:128\" + \"-n8:16:32\";\n+        ret ~\"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\" +\n+            ~\"-i32:32:32-i64:32:64\" +\n+            ~\"-f32:32:32-f64:32:64-v64:64:64\" +\n+            ~\"-v128:128:128-a0:0:64-f80:128:128\" +\n+            ~\"-n8:16:32\";\n     }\n     if istr::eq(target_os(), ~\"win32\") {\n-        ret \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\";\n+        ret ~\"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\";\n     }\n-    ret \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\";\n+    ret ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\";\n }\n \n-fn get_target_triple() -> str {\n-    if istr::eq(target_os(), ~\"macos\") { ret \"i686-apple-darwin\"; }\n-    if istr::eq(target_os(), ~\"win32\") { ret \"i686-pc-mingw32\"; }\n-    ret \"i686-unknown-linux-gnu\";\n+fn get_target_triple() -> istr {\n+    if istr::eq(target_os(), ~\"macos\") { ret ~\"i686-apple-darwin\"; }\n+    if istr::eq(target_os(), ~\"win32\") { ret ~\"i686-pc-mingw32\"; }\n+    ret ~\"i686-unknown-linux-gnu\";\n }\n //\n // Local Variables:"}, {"sha": "fa624c76725b7a9c1f036ad870c172325de4f43b", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=6b3f0b21bec623eb878735601c514a383c606bed", "patch": "@@ -200,7 +200,7 @@ fn get_metadata_section(filename: str) -> option::t<@[u8]> {\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n         let name = str::str_from_cstr(name_buf);\n-        if str::eq(name, x86::get_meta_sect_name()) {\n+        if str::eq(name, istr::to_estr(x86::get_meta_sect_name())) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi);\n             let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);"}, {"sha": "ddadc1e46b570a0c928db72344ce9b6b6c16c7c3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3f0b21bec623eb878735601c514a383c606bed/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6b3f0b21bec623eb878735601c514a383c606bed", "patch": "@@ -6248,7 +6248,8 @@ fn trap(bcx: &@block_ctxt) {\n \n fn decl_no_op_type_glue(llmod: ModuleRef, taskptr_type: TypeRef) -> ValueRef {\n     let ty = T_fn([taskptr_type, T_ptr(T_i8())], T_void());\n-    ret decl_fastcall_fn(llmod, abi::no_op_type_glue_name(), ty);\n+    ret decl_fastcall_fn(llmod,\n+                         istr::to_estr(abi::no_op_type_glue_name()), ty);\n }\n \n fn vec_fill(bcx: &@block_ctxt, v: ValueRef) -> ValueRef {\n@@ -6274,13 +6275,16 @@ fn make_common_glue(sess: &session::session, output: &str) {\n     let llmod =\n         llvm::LLVMModuleCreateWithNameInContext(str::buf(\"rust_out\"),\n                                                 llvm::LLVMGetGlobalContext());\n-    let dat_layt = x86::get_data_layout(); //HACK (buf lifetime issue)\n+    let dat_layt = istr::to_estr(\n+        x86::get_data_layout()); //HACK (buf lifetime issue)\n     llvm::LLVMSetDataLayout(llmod, str::buf(dat_layt));\n-    let targ_trip = x86::get_target_triple(); //HACK (buf lifetime issue)\n+    let targ_trip = istr::to_estr(\n+        x86::get_target_triple()); //HACK (buf lifetime issue)\n     llvm::LLVMSetTarget(llmod, str::buf(targ_trip));\n-    mk_target_data(x86::get_data_layout());\n+    mk_target_data(istr::to_estr(x86::get_data_layout()));\n     declare_intrinsics(llmod);\n-    let modl_asm = x86::get_module_asm(); //HACK (buf lifetime issue)\n+    let modl_asm = istr::to_estr(\n+        x86::get_module_asm()); //HACK (buf lifetime issue)\n     llvm::LLVMSetModuleInlineAsm(llmod, str::buf(modl_asm));\n     make_glues(llmod, taskptr_type);\n     link::write::run_passes(sess, llmod, istr::from_estr(output));\n@@ -6342,7 +6346,8 @@ fn write_metadata(cx: &@crate_ctxt, crate: &@ast::crate) {\n         llvm::LLVMAddGlobal(cx.llmod, val_ty(llconst),\n                             str::buf(\"rust_metadata\"));\n     llvm::LLVMSetInitializer(llglobal, llconst);\n-    let met_sct_nm = x86::get_meta_sect_name(); //HACK (buf lifetime issue)\n+    let met_sct_nm = istr::to_estr(\n+        x86::get_meta_sect_name()); //HACK (buf lifetime issue)\n     llvm::LLVMSetSection(llglobal, str::buf(met_sct_nm));\n     llvm::LLVMSetLinkage(llglobal,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -6369,9 +6374,11 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n     let llmod =\n         llvm::LLVMModuleCreateWithNameInContext(str::buf(\"rust_out\"),\n                                                 llvm::LLVMGetGlobalContext());\n-    let dat_layt = x86::get_data_layout(); //HACK (buf lifetime issue)\n+    let dat_layt = istr::to_estr(\n+        x86::get_data_layout()); //HACK (buf lifetime issue)\n     llvm::LLVMSetDataLayout(llmod, str::buf(dat_layt));\n-    let targ_trip = x86::get_target_triple(); //HACK (buf lifetime issue)\n+    let targ_trip = istr::to_estr(\n+        x86::get_target_triple()); //HACK (buf lifetime issue)\n     llvm::LLVMSetTarget(llmod, str::buf(targ_trip));\n     let td = mk_target_data(dat_layt);\n     let tn = mk_type_names();"}]}