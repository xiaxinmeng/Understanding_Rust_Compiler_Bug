{"sha": "0c6f067961f4f7475a74e1f3c32ed0599f541291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmYwNjc5NjFmNGY3NDc1YTc0ZTFmM2MzMmVkMDU5OWY1NDEyOTE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-19T09:01:29Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-30T22:00:46Z"}, "message": "Add method `visible_item_path` to `CStore`", "tree": {"sha": "db8b23ba08162c9289e8e655c10a2655f26ae945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8b23ba08162c9289e8e655c10a2655f26ae945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6f067961f4f7475a74e1f3c32ed0599f541291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6f067961f4f7475a74e1f3c32ed0599f541291", "html_url": "https://github.com/rust-lang/rust/commit/0c6f067961f4f7475a74e1f3c32ed0599f541291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6f067961f4f7475a74e1f3c32ed0599f541291/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a91e69582b63f19192ad860df0f7a9a8530f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a91e69582b63f19192ad860df0f7a9a8530f56", "html_url": "https://github.com/rust-lang/rust/commit/d5a91e69582b63f19192ad860df0f7a9a8530f56"}], "stats": {"total": 117, "additions": 111, "deletions": 6}, "files": [{"sha": "e708950c69ef8ee95a6359cc66d932dff7a31696", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=0c6f067961f4f7475a74e1f3c32ed0599f541291", "patch": "@@ -32,7 +32,7 @@ use mir::repr::Mir;\n use mir::mir_map::MirMap;\n use session::Session;\n use session::search_paths::PathKind;\n-use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n use std::any::Any;\n use std::cell::RefCell;\n use std::rc::Rc;\n@@ -169,6 +169,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx>;\n     fn relative_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;\n     fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n     fn item_name(&self, def: DefId) -> ast::Name;\n     fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n@@ -347,6 +348,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx> { unimplemented!() }\n     fn relative_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n+        unimplemented!()\n+    }\n     fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n     fn item_name(&self, def: DefId) -> ast::Name { unimplemented!() }\n     fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)"}, {"sha": "caf7e6fe62938667bec32c82a3eab59253ea130b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=0c6f067961f4f7475a74e1f3c32ed0599f541291", "patch": "@@ -10,7 +10,7 @@\n \n use front::map::DefPathData;\n use middle::cstore::LOCAL_CRATE;\n-use middle::def_id::DefId;\n+use middle::def_id::{DefId, CRATE_DEF_INDEX};\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n \n@@ -75,9 +75,51 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// If possible, this pushes a global path resolving to `external_def_id` that is visible\n+    /// from at least one local module and returns true. If the crate defining `external_def_id` is\n+    /// declared with an `extern crate`, the path is guarenteed to use the `extern crate`.\n+    pub fn try_push_visible_item_path<T>(&self, buffer: &mut T, external_def_id: DefId) -> bool\n+        where T: ItemPathBuffer\n+    {\n+        let visible_parent_map = self.sess.cstore.visible_parent_map();\n+\n+        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<ast::Name>::new());\n+        loop {\n+            // If `cur_def` is a direct or injected extern crate, push the path to the crate\n+            // followed by the path to the item within the crate and return.\n+            if cur_def.index == CRATE_DEF_INDEX {\n+                match self.sess.cstore.extern_crate(cur_def.krate) {\n+                    Some(extern_crate) if extern_crate.direct => {\n+                        self.push_item_path(buffer, extern_crate.def_id);\n+                        cur_path.iter().rev().map(|segment| buffer.push(&segment.as_str())).count();\n+                        return true;\n+                    }\n+                    None => {\n+                        buffer.push(&self.crate_name(cur_def.krate));\n+                        cur_path.iter().rev().map(|segment| buffer.push(&segment.as_str())).count();\n+                        return true;\n+                    }\n+                    _ => {},\n+                }\n+            }\n+\n+            cur_path.push(self.sess.cstore.item_name(cur_def));\n+            match visible_parent_map.get(&cur_def) {\n+                Some(&def) => cur_def = def,\n+                None => return false,\n+            };\n+        }\n+    }\n+\n     pub fn push_item_path<T>(&self, buffer: &mut T, def_id: DefId)\n         where T: ItemPathBuffer\n     {\n+        match *buffer.root_mode() {\n+            RootMode::Local if !def_id.is_local() =>\n+                if self.try_push_visible_item_path(buffer, def_id) { return },\n+            _ => {}\n+        }\n+\n         let key = self.def_key(def_id);\n         match key.disambiguated_data.data {\n             DefPathData::CrateRoot => {"}, {"sha": "c11d9865516b9710c143c20ea1615b217947c07a", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=0c6f067961f4f7475a74e1f3c32ed0599f541291", "patch": "@@ -13,17 +13,17 @@ use decoder;\n use encoder;\n use loader;\n \n-use middle::cstore::{CrateStore, CrateSource, ChildItem, ExternCrate, FoundAst};\n+use middle::cstore::{CrateStore, CrateSource, ChildItem, ExternCrate, FoundAst, DefLike};\n use middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n use middle::def;\n use middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt, VariantKind};\n-use middle::def_id::{DefId, DefIndex};\n+use middle::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n \n use rustc::front::map as hir_map;\n use rustc::mir::repr::Mir;\n use rustc::mir::mir_map::MirMap;\n-use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n \n use std::cell::RefCell;\n use std::rc::Rc;\n@@ -544,4 +544,60 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         encoder::metadata_encoding_version\n     }\n+\n+    /// Returns a map from a sufficiently visible external item (i.e. an external item that is\n+    /// visible from at least one local module) to a sufficiently visible parent (considering\n+    /// modules that re-export the external item to be parents).\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n+        let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n+        if !visible_parent_map.is_empty() { return visible_parent_map; }\n+\n+        use rustc_front::hir;\n+        use rustc::middle::cstore::{CrateStore, ChildItem};\n+        use std::collections::vec_deque::VecDeque;\n+        use std::collections::hash_map::Entry;\n+        for cnum in 1 .. self.next_crate_num() {\n+            let cdata = self.get_crate_data(cnum);\n+\n+            match cdata.extern_crate.get() {\n+                // Ignore crates without a corresponding local `extern crate` item.\n+                Some(extern_crate) if !extern_crate.direct => continue,\n+                _ => {},\n+            }\n+\n+            let mut bfs_queue = &mut VecDeque::new();\n+            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: ChildItem, parent: DefId| {\n+                let child = match child.def {\n+                    DefLike::DlDef(def) if child.vis == hir::Public => def.def_id(),\n+                    _ => return,\n+                };\n+\n+                match visible_parent_map.entry(child) {\n+                    Entry::Occupied(mut entry) => {\n+                        // If `child` is defined in crate `cnum`, ensure\n+                        // that it is mapped to a parent in `cnum`.\n+                        if child.krate == cnum && entry.get().krate != cnum {\n+                            entry.insert(parent);\n+                        }\n+                    }\n+                    Entry::Vacant(entry) => {\n+                        entry.insert(parent);\n+                        bfs_queue.push_back(child);\n+                    }\n+                }\n+            };\n+\n+            let croot = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+            for child in self.crate_top_level_items(cnum) {\n+                add_child(bfs_queue, child, croot);\n+            }\n+            while let Some(def) = bfs_queue.pop_front() {\n+                for child in self.item_children(def) {\n+                    add_child(bfs_queue, child, def);\n+                }\n+            }\n+        }\n+\n+        visible_parent_map\n+    }\n }"}, {"sha": "5637301724bbc1076e8c4fc79c2a403730ece1c6", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6f067961f4f7475a74e1f3c32ed0599f541291/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=0c6f067961f4f7475a74e1f3c32ed0599f541291", "patch": "@@ -22,7 +22,8 @@ use loader;\n \n use rustc::back::svh::Svh;\n use rustc::middle::cstore::{ExternCrate};\n-use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n+use rustc::middle::def_id::DefId;\n \n use std::cell::{RefCell, Ref, Cell};\n use std::rc::Rc;\n@@ -92,6 +93,7 @@ pub struct CStore {\n     used_link_args: RefCell<Vec<String>>,\n     statically_included_foreign_items: RefCell<NodeSet>,\n     pub intr: Rc<IdentInterner>,\n+    pub visible_parent_map: RefCell<DefIdMap<DefId>>,\n }\n \n impl CStore {\n@@ -104,6 +106,7 @@ impl CStore {\n             used_link_args: RefCell::new(Vec::new()),\n             intr: intr,\n             statically_included_foreign_items: RefCell::new(NodeSet()),\n+            visible_parent_map: RefCell::new(FnvHashMap()),\n         }\n     }\n "}]}