{"sha": "3657d5606d7ea5607a0670341a57c3ef20202ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NTdkNTYwNmQ3ZWE1NjA3YTA2NzAzNDFhNTdjM2VmMjAyMDJlYTA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-10T17:00:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-11T21:57:57Z"}, "message": "core: add Eq impl to LinearMap.", "tree": {"sha": "940a30de5e97a6aa619792d14b6483fe400123bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940a30de5e97a6aa619792d14b6483fe400123bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3657d5606d7ea5607a0670341a57c3ef20202ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3657d5606d7ea5607a0670341a57c3ef20202ea0", "html_url": "https://github.com/rust-lang/rust/commit/3657d5606d7ea5607a0670341a57c3ef20202ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3657d5606d7ea5607a0670341a57c3ef20202ea0/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645bd98b602500ef910685eeeb899df298221e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/645bd98b602500ef910685eeeb899df298221e35", "html_url": "https://github.com/rust-lang/rust/commit/645bd98b602500ef910685eeeb899df298221e35"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "4a8fe459b375741504fb950ca5f82a5e33ef841d", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3657d5606d7ea5607a0670341a57c3ef20202ea0/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3657d5606d7ea5607a0670341a57c3ef20202ea0/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=3657d5606d7ea5607a0670341a57c3ef20202ea0", "patch": "@@ -428,6 +428,25 @@ pub mod linear {\n             option::unwrap(move value)\n         }\n     }\n+\n+    impl<K:Hash IterBytes Eq, V: Eq> LinearMap<K, V>: cmp::Eq {\n+        pure fn eq(&self, other: &LinearMap<K, V>) -> bool {\n+            if self.len() != other.len() { return false; }\n+\n+            for self.each |key, value| {\n+                match other.find_ref(key) {\n+                    None => return false,\n+                    Some(v) => if value != v { return false },\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        pure fn ne(&self, other: &LinearMap<K, V>) -> bool {\n+            !self.eq(other)\n+        }\n+    }\n }\n \n #[test]\n@@ -538,4 +557,22 @@ pub mod test {\n             Some(v) => assert *v == 2\n         }\n     }\n+\n+    #[test]\n+    pub fn test_eq() {\n+        let mut m1 = ~LinearMap();\n+        m1.insert(1, 2);\n+        m1.insert(2, 3);\n+        m1.insert(3, 4);\n+\n+        let mut m2 = ~LinearMap();\n+        m2.insert(1, 2);\n+        m2.insert(2, 3);\n+\n+        assert m1 != m2;\n+\n+        m2.insert(3, 4);\n+\n+        assert m1 == m2;\n+    }\n }"}]}