{"sha": "22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjYxNjNkYjQ3ZGZiMWM1YzAyYmNkMDU0M2ViMGY0ZjkyZGQxNjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-29T08:26:26Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-06-01T07:32:24Z"}, "message": "Make metadata decoding use AllocDecodingState/Session.", "tree": {"sha": "ba31bf674444d357200a2d1336631268337dc7ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba31bf674444d357200a2d1336631268337dc7ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "html_url": "https://github.com/rust-lang/rust/commit/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24dfcbef9c28158385f0cf526fd650f2d8a05064", "url": "https://api.github.com/repos/rust-lang/rust/commits/24dfcbef9c28158385f0cf526fd650f2d8a05064", "html_url": "https://github.com/rust-lang/rust/commit/24dfcbef9c28158385f0cf526fd650f2d8a05064"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "e41b3f5f53b252fee2d1829136d077bd8a0bcdd8", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "patch": "@@ -19,6 +19,7 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX};\n use rustc::hir::svh::Svh;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::DepKind;\n+use rustc::mir::interpret::AllocDecodingState;\n use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n@@ -222,6 +223,9 @@ impl<'a> CrateLoader<'a> {\n             crate_root.def_path_table.decode((&metadata, self.sess))\n         });\n \n+        let interpret_alloc_index: Vec<u32> = crate_root.interpret_alloc_index\n+                                                        .decode(&metadata)\n+                                                        .collect();\n         let trait_impls = crate_root\n             .impls\n             .decode((&metadata, self.sess))\n@@ -242,6 +246,7 @@ impl<'a> CrateLoader<'a> {\n             cnum,\n             dependencies: Lock::new(dependencies),\n             codemap_import_info: RwLock::new(vec![]),\n+            alloc_decoding_state: AllocDecodingState::new(interpret_alloc_index),\n             dep_kind: Lock::new(dep_kind),\n             source: cstore::CrateSource {\n                 dylib,"}, {"sha": "2bc5f6074866432742c32d15ce322dd817e7a1d3", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "patch": "@@ -12,10 +12,10 @@\n // crates and libraries\n \n use schema;\n-\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n+use rustc::mir::interpret::AllocDecodingState;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap};\n \n@@ -66,6 +66,9 @@ pub struct CrateMetadata {\n     pub dependencies: Lock<Vec<CrateNum>>,\n     pub codemap_import_info: RwLock<Vec<ImportedFileMap>>,\n \n+    /// Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n+    pub alloc_decoding_state: AllocDecodingState,\n+\n     pub root: schema::CrateRoot,\n \n     /// For each public item in this crate, we encode a key.  When the"}, {"sha": "69e873bb95d2557778ef12e5d5a2f480630d4739", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f6163db47dfb1c5c02bcd0543eb0f4f92dd164/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=22f6163db47dfb1c5c02bcd0543eb0f4f92dd164", "patch": "@@ -25,12 +25,12 @@ use rustc::hir::def_id::{CrateNum, DefId, DefIndex,\n use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n use rustc::mir::{self, interpret};\n+use rustc::mir::interpret::AllocDecodingSession;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n use rustc::mir::Mir;\n use rustc::util::captures::Captures;\n-use rustc::util::nodemap::FxHashMap;\n \n use std::io;\n use std::mem;\n@@ -55,11 +55,8 @@ pub struct DecodeContext<'a, 'tcx: 'a> {\n \n     lazy_state: LazyState,\n \n-    // interpreter allocation cache\n-    interpret_alloc_cache: FxHashMap<usize, interpret::AllocId>,\n-\n-    // Read from the LazySeq CrateRoot::inpterpret_alloc_index on demand\n-    interpret_alloc_index: Option<Vec<u32>>,\n+    // Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n+    alloc_decoding_session: Option<AllocDecodingSession<'a>>,\n }\n \n /// Abstract over the various ways one can create metadata decoders.\n@@ -78,8 +75,9 @@ pub trait Metadata<'a, 'tcx>: Copy {\n             tcx,\n             last_filemap_index: 0,\n             lazy_state: LazyState::NoNode,\n-            interpret_alloc_cache: FxHashMap::default(),\n-            interpret_alloc_index: None,\n+            alloc_decoding_session: self.cdata().map(|cdata| {\n+                cdata.alloc_decoding_state.new_decoding_session()\n+            }),\n         }\n     }\n }\n@@ -178,17 +176,6 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.lazy_state = LazyState::Previous(position + min_size);\n         Ok(position)\n     }\n-\n-    fn interpret_alloc(&mut self, idx: usize) -> usize {\n-        if let Some(index) = self.interpret_alloc_index.as_mut() {\n-            return index[idx] as usize;\n-        }\n-        let cdata = self.cdata();\n-        let index: Vec<u32> = cdata.root.interpret_alloc_index.decode(cdata).collect();\n-        let pos = index[idx];\n-        self.interpret_alloc_index = Some(index);\n-        pos as usize\n-    }\n }\n \n impl<'a, 'tcx: 'a> TyDecoder<'a, 'tcx> for DecodeContext<'a, 'tcx> {\n@@ -299,22 +286,11 @@ impl<'a, 'tcx> SpecializedDecoder<LocalDefId> for DecodeContext<'a, 'tcx> {\n \n impl<'a, 'tcx> SpecializedDecoder<interpret::AllocId> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<interpret::AllocId, Self::Error> {\n-        let tcx = self.tcx.unwrap();\n-        let idx = usize::decode(self)?;\n-\n-        if let Some(cached) = self.interpret_alloc_cache.get(&idx).cloned() {\n-            return Ok(cached);\n+        if let Some(alloc_decoding_session) = self.alloc_decoding_session {\n+            alloc_decoding_session.decode_alloc_id(self)\n+        } else {\n+            bug!(\"Attempting to decode interpret::AllocId without CrateMetadata\")\n         }\n-        let pos = self.interpret_alloc(idx);\n-        self.with_position(pos, |this| {\n-            interpret::specialized_decode_alloc_id(\n-                this,\n-                tcx,\n-                |this, alloc_id| {\n-                    assert!(this.interpret_alloc_cache.insert(idx, alloc_id).is_none());\n-                },\n-            )\n-        })\n     }\n }\n "}]}