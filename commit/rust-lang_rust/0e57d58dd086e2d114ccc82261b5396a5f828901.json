{"sha": "0e57d58dd086e2d114ccc82261b5396a5f828901", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNTdkNThkZDA4NmUyZDExNGNjYzgyMjYxYjUzOTZhNWY4Mjg5MDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T18:13:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T18:13:22Z"}, "message": "kill code_model_impl", "tree": {"sha": "4eb635aabd5730c41b82bb7be3f461687283d52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb635aabd5730c41b82bb7be3f461687283d52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e57d58dd086e2d114ccc82261b5396a5f828901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e57d58dd086e2d114ccc82261b5396a5f828901", "html_url": "https://github.com/rust-lang/rust/commit/0e57d58dd086e2d114ccc82261b5396a5f828901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e57d58dd086e2d114ccc82261b5396a5f828901/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce82fbfc44edff633d7f6a2d383b64bfd10d21c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4", "html_url": "https://github.com/rust-lang/rust/commit/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4"}], "stats": {"total": 153, "additions": 64, "deletions": 89}, "files": [{"sha": "49030ce67644d20847cf9f4195b7aac354b6c93b", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0e57d58dd086e2d114ccc82261b5396a5f828901/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57d58dd086e2d114ccc82261b5396a5f828901/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=0e57d58dd086e2d114ccc82261b5396a5f828901", "patch": "@@ -1,15 +1,15 @@\n use std::sync::Arc;\n \n use ra_db::{CrateId, SourceRootId, Edition, FileId};\n-use ra_syntax::{ast::self, TreeArc};\n+use ra_syntax::{ast::{self, NameOwner, TypeAscriptionOwner}, TreeArc};\n \n use crate::{\n     Name, AsName, AstId, Ty, HirFileId, Either,\n     HirDatabase, DefDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n     expr::{Body, BodySourceMap, validation::ExprValidator},\n-    ty::{ TraitRef, InferenceResult},\n+    ty::{TraitRef, InferenceResult},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::HasGenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n@@ -18,6 +18,7 @@ use crate::{\n     resolve::Resolver,\n     diagnostics::{DiagnosticSink},\n     traits::{TraitItem, TraitData},\n+    type_ref::Mutability,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -572,6 +573,44 @@ pub struct FnSignature {\n }\n \n impl FnSignature {\n+    pub(crate) fn fn_signature_query(db: &impl DefDatabase, func: Function) -> Arc<FnSignature> {\n+        let (_, node) = func.source(db);\n+        let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n+        let mut params = Vec::new();\n+        let mut has_self_param = false;\n+        if let Some(param_list) = node.param_list() {\n+            if let Some(self_param) = param_list.self_param() {\n+                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n+                    TypeRef::from_ast(type_ref)\n+                } else {\n+                    let self_type = TypeRef::Path(Name::self_type().into());\n+                    match self_param.kind() {\n+                        ast::SelfParamKind::Owned => self_type,\n+                        ast::SelfParamKind::Ref => {\n+                            TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n+                        }\n+                        ast::SelfParamKind::MutRef => {\n+                            TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n+                        }\n+                    }\n+                };\n+                params.push(self_type);\n+                has_self_param = true;\n+            }\n+            for param in param_list.params() {\n+                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n+                params.push(type_ref);\n+            }\n+        }\n+        let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n+            TypeRef::from_ast(type_ref)\n+        } else {\n+            TypeRef::unit()\n+        };\n+\n+        let sig = FnSignature { name, params, ret_type, has_self_param };\n+        Arc::new(sig)\n+    }\n     pub fn name(&self) -> &Name {\n         &self.name\n     }\n@@ -731,6 +770,29 @@ impl ConstSignature {\n     pub fn type_ref(&self) -> &TypeRef {\n         &self.type_ref\n     }\n+\n+    pub(crate) fn const_signature_query(\n+        db: &impl DefDatabase,\n+        konst: Const,\n+    ) -> Arc<ConstSignature> {\n+        let (_, node) = konst.source(db);\n+        const_signature_for(&*node)\n+    }\n+\n+    pub(crate) fn static_signature_query(\n+        db: &impl DefDatabase,\n+        konst: Static,\n+    ) -> Arc<ConstSignature> {\n+        let (_, node) = konst.source(db);\n+        const_signature_for(&*node)\n+    }\n+}\n+\n+fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstSignature> {\n+    let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n+    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n+    let sig = ConstSignature { name, type_ref };\n+    Arc::new(sig)\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "7bdd86eae51ad784eadc669ba26c58706f963f08", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=ce82fbfc44edff633d7f6a2d383b64bfd10d21c4", "patch": "@@ -1,2 +0,0 @@\n-mod konst; // `const` is invalid ident :(\n-pub(crate) mod function;"}, {"sha": "f8bd0f7847728258ace86b6987292bed4e4a8e70", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=ce82fbfc44edff633d7f6a2d383b64bfd10d21c4", "patch": "@@ -1,50 +0,0 @@\n-use std::sync::Arc;\n-\n-use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n-\n-use crate::{\n-    Name, AsName, Function, FnSignature,\n-    type_ref::{TypeRef, Mutability},\n-    DefDatabase,\n-};\n-\n-impl FnSignature {\n-    pub(crate) fn fn_signature_query(db: &impl DefDatabase, func: Function) -> Arc<FnSignature> {\n-        let (_, node) = func.source(db);\n-        let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n-        let mut params = Vec::new();\n-        let mut has_self_param = false;\n-        if let Some(param_list) = node.param_list() {\n-            if let Some(self_param) = param_list.self_param() {\n-                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n-                    TypeRef::from_ast(type_ref)\n-                } else {\n-                    let self_type = TypeRef::Path(Name::self_type().into());\n-                    match self_param.kind() {\n-                        ast::SelfParamKind::Owned => self_type,\n-                        ast::SelfParamKind::Ref => {\n-                            TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n-                        }\n-                        ast::SelfParamKind::MutRef => {\n-                            TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n-                        }\n-                    }\n-                };\n-                params.push(self_type);\n-                has_self_param = true;\n-            }\n-            for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n-                params.push(type_ref);\n-            }\n-        }\n-        let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n-            TypeRef::from_ast(type_ref)\n-        } else {\n-            TypeRef::unit()\n-        };\n-\n-        let sig = FnSignature { name, params, ret_type, has_self_param };\n-        Arc::new(sig)\n-    }\n-}"}, {"sha": "db4e5ce5cd146a99f826b63b9626ab7bddaa867c", "filename": "crates/ra_hir/src/code_model_impl/konst.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce82fbfc44edff633d7f6a2d383b64bfd10d21c4/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs?ref=ce82fbfc44edff633d7f6a2d383b64bfd10d21c4", "patch": "@@ -1,34 +0,0 @@\n-use std::sync::Arc;\r\n-\r\n-use ra_syntax::ast::{NameOwner, TypeAscriptionOwner};\r\n-\r\n-use crate::{\r\n-    Name, AsName, Const, ConstSignature, Static,\r\n-    type_ref::{TypeRef},\r\n-    DefDatabase,\r\n-};\r\n-\r\n-fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstSignature> {\r\n-    let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\r\n-    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\r\n-    let sig = ConstSignature { name, type_ref };\r\n-    Arc::new(sig)\r\n-}\r\n-\r\n-impl ConstSignature {\r\n-    pub(crate) fn const_signature_query(\r\n-        db: &impl DefDatabase,\r\n-        konst: Const,\r\n-    ) -> Arc<ConstSignature> {\r\n-        let (_, node) = konst.source(db);\r\n-        const_signature_for(&*node)\r\n-    }\r\n-\r\n-    pub(crate) fn static_signature_query(\r\n-        db: &impl DefDatabase,\r\n-        konst: Static,\r\n-    ) -> Arc<ConstSignature> {\r\n-        let (_, node) = konst.source(db);\r\n-        const_signature_for(&*node)\r\n-    }\r\n-}\r"}, {"sha": "55682894617d69daec70a45207742020d94c983a", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e57d58dd086e2d114ccc82261b5396a5f828901/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57d58dd086e2d114ccc82261b5396a5f828901/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=0e57d58dd086e2d114ccc82261b5396a5f828901", "patch": "@@ -43,7 +43,6 @@ mod resolve;\n pub mod diagnostics;\n \n mod code_model_api;\n-mod code_model_impl;\n \n #[cfg(test)]\n mod marks;"}]}