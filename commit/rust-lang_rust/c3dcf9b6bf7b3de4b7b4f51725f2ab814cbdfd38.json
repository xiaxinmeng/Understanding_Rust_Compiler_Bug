{"sha": "c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZGNmOWI2YmY3YjNkZTRiN2I0ZjUxNzI1ZjJhYjgxNGNiZGZkMzg=", "commit": {"author": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T08:57:05Z"}, "committer": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T08:57:05Z"}, "message": "fix code and comments referencing RW_LOCK_INIT", "tree": {"sha": "cd64d1bb2d572ddb72e1403634f58468bad54048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd64d1bb2d572ddb72e1403634f58468bad54048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38", "html_url": "https://github.com/rust-lang/rust/commit/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38/comments", "author": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5344ae2d4f66f5e8392b325320eeec0af29f503c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5344ae2d4f66f5e8392b325320eeec0af29f503c", "html_url": "https://github.com/rust-lang/rust/commit/5344ae2d4f66f5e8392b325320eeec0af29f503c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3bb0e257577cf7007d3e1f631f4e44b193911623", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38", "patch": "@@ -21,7 +21,7 @@ pub use alloc::arc::{Arc, Weak};\n \n pub use self::mutex::{Mutex, MutexGuard, StaticMutex};\n pub use self::mutex::MUTEX_INIT;\n-pub use self::rwlock::{RwLock, StaticRwLock, RWLOCK_INIT};\n+pub use self::rwlock::{RwLock, StaticRwLock, RW_LOCK_INIT};\n pub use self::rwlock::{RWLockReadGuard, RWLockWriteGuard};\n pub use self::condvar::{Condvar, StaticCondvar, CONDVAR_INIT};\n pub use self::once::{Once, ONCE_INIT};"}, {"sha": "f6fffd49deea09f36f152dd3505b6238be50b977", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=c3dcf9b6bf7b3de4b7b4f51725f2ab814cbdfd38", "patch": "@@ -76,9 +76,9 @@ unsafe impl<T> Sync for RwLock<T> {}\n /// # Example\n ///\n /// ```\n-/// use std::sync::{StaticRwLock, RWLOCK_INIT};\n+/// use std::sync::{StaticRwLock, RW_LOCK_INIT};\n ///\n-/// static LOCK: StaticRwLock = RWLOCK_INIT;\n+/// static LOCK: StaticRwLock = RW_LOCK_INIT;\n ///\n /// {\n ///     let _g = LOCK.read().unwrap();\n@@ -131,7 +131,7 @@ impl<T: Send + Sync> RwLock<T> {\n     /// Creates a new instance of an RwLock which is unlocked and read to go.\n     #[stable]\n     pub fn new(t: T) -> RwLock<T> {\n-        RwLock { inner: box RWLOCK_INIT, data: UnsafeCell::new(t) }\n+        RwLock { inner: box RW_LOCK_INIT, data: UnsafeCell::new(t) }\n     }\n \n     /// Locks this rwlock with shared read access, blocking the current thread\n@@ -365,7 +365,7 @@ mod tests {\n     use rand::{mod, Rng};\n     use sync::mpsc::channel;\n     use thread::Thread;\n-    use sync::{Arc, RwLock, StaticRwLock, RWLOCK_INIT};\n+    use sync::{Arc, RwLock, StaticRwLock, RW_LOCK_INIT};\n \n     #[test]\n     fn smoke() {\n@@ -378,7 +378,7 @@ mod tests {\n \n     #[test]\n     fn static_smoke() {\n-        static R: StaticRwLock = RWLOCK_INIT;\n+        static R: StaticRwLock = RW_LOCK_INIT;\n         drop(R.read().unwrap());\n         drop(R.write().unwrap());\n         drop((R.read().unwrap(), R.read().unwrap()));\n@@ -388,7 +388,7 @@ mod tests {\n \n     #[test]\n     fn frob() {\n-        static R: StaticRwLock = RWLOCK_INIT;\n+        static R: StaticRwLock = RW_LOCK_INIT;\n         static N: uint = 10;\n         static M: uint = 1000;\n "}]}