{"sha": "30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzM0YTlhN2JhOGU1OGJmNGJkNDE5NmY4YWJkMWZkNDAyNDE3MzI=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-09T14:52:07Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-09T14:52:07Z"}, "message": "Some pretty printing in the runtime.", "tree": {"sha": "fa281c9ad53c9acfa9f51e0d0b0abab41121ab64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa281c9ad53c9acfa9f51e0d0b0abab41121ab64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "html_url": "https://github.com/rust-lang/rust/commit/30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ff6a3d031d2ffaf2863e2a866f7a96ed7ddd029", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff6a3d031d2ffaf2863e2a866f7a96ed7ddd029", "html_url": "https://github.com/rust-lang/rust/commit/9ff6a3d031d2ffaf2863e2a866f7a96ed7ddd029"}], "stats": {"total": 84, "additions": 66, "deletions": 18}, "files": [{"sha": "dbf5059bf227d8205a3979f6b56bdf521e51c928", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "patch": "@@ -31,9 +31,7 @@ circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n }\n \n circular_buffer::~circular_buffer() {\n-    dom->log(rust_log::MEM | rust_log::COMM,\n-             \"~circular_buffer 0x%\" PRIxPTR,\n-             this);\n+    dom->log(rust_log::MEM, \"~circular_buffer 0x%\" PRIxPTR, this);\n     I(dom, _buffer);\n     W(dom, _unread == 0, \"~circular_buffer with unread messages.\");\n     dom->free(_buffer);"}, {"sha": "f0739097ca0d722154ff746b3b23c96dbdf78b9b", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "patch": "@@ -38,7 +38,8 @@ static void\n del_all_tasks(rust_dom *dom, ptr_vec<rust_task> *v) {\n     I(dom, v);\n     while (v->length()) {\n-        dom->log(rust_log::TASK, \"deleting task %\" PRIdPTR, v->length() - 1);\n+        dom->log(rust_log::TASK, \"deleting task 0x%\" PRIdPTR,\n+                 v->length() - 1);\n         delete v->pop();\n     }\n }\n@@ -48,16 +49,18 @@ rust_dom::delete_proxies() {\n     rust_task *task;\n     rust_proxy<rust_task> *task_proxy;\n     while (_task_proxies.pop(&task, &task_proxy)) {\n-        log(rust_log::TASK, \"deleting proxy %\" PRIxPTR\n-                            \" in dom %\" PRIxPTR, task_proxy, task_proxy->dom);\n+        log(rust_log::TASK, \"deleting proxy 0x%\" PRIxPTR\n+                            \" in dom 0x%\" PRIxPTR,\n+                            task_proxy, task_proxy->dom);\n         delete task_proxy;\n     }\n \n     rust_port *port;\n     rust_proxy<rust_port> *port_proxy;\n     while (_port_proxies.pop(&port, &port_proxy)) {\n-        log(rust_log::TASK, \"deleting proxy %\" PRIxPTR\n-                            \" in dom %\" PRIxPTR, port_proxy, port_proxy->dom);\n+        log(rust_log::TASK, \"deleting proxy 0x%\" PRIxPTR\n+                            \" in dom 0x%\" PRIxPTR,\n+                            port_proxy, port_proxy->dom);\n         delete port_proxy;\n     }\n }\n@@ -251,10 +254,12 @@ rust_dom::reap_dead_tasks() {\n  */\n void rust_dom::send_message(rust_message *message) {\n     log(rust_log::COMM, \"==> enqueueing \\\"%s\\\" 0x%\" PRIxPTR\n-                        \" in queue 0x%\" PRIxPTR,\n+                        \" in queue 0x%\" PRIxPTR\n+                        \" in domain 0x%\" PRIxPTR,\n                         message->label,\n                         message,\n-                        &_incoming_message_queue);\n+                        &_incoming_message_queue,\n+                        this);\n     A(this, message->dom == this, \"Message owned by non-local domain.\");\n     _incoming_message_queue.enqueue(message);\n     _incoming_message_pending.signal();\n@@ -358,7 +363,8 @@ rust_dom::log_state() {\n     if (!dead_tasks.is_empty()) {\n         log(rust_log::TASK, \"dead tasks:\");\n         for (size_t i = 0; i < dead_tasks.length(); i++) {\n-            log(rust_log::TASK, \"\\t task: 0x%\" PRIxPTR, dead_tasks[i]);\n+            log(rust_log::TASK, \"\\t task: 0x%\" PRIxPTR \", ref_count: %d\",\n+                dead_tasks[i], dead_tasks[i]->ref_count);\n         }\n     }\n }\n@@ -401,8 +407,14 @@ rust_dom::start_main_loop()\n         I(this, scheduled_task->running());\n \n         log(rust_log::TASK,\n-                 \"activating task 0x%\" PRIxPTR \", sp=0x%\" PRIxPTR,\n-                 (uintptr_t)scheduled_task, scheduled_task->rust_sp);\n+                 \"activating task 0x%\" PRIxPTR\n+                 \", sp=0x%\" PRIxPTR\n+                 \", ref_count=%d\"\n+                 \", state: %s\",\n+                 (uintptr_t)scheduled_task,\n+                 scheduled_task->rust_sp,\n+                 scheduled_task->ref_count,\n+                 scheduled_task->state_str());\n \n         interrupt_flag = 0;\n "}, {"sha": "bd9af6f9643c7002039ace85e0ed995b6f9ff32b", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "patch": "@@ -17,6 +17,8 @@ rust_port::~rust_port() {\n     task->log(rust_log::COMM | rust_log::MEM,\n               \"~rust_port 0x%\" PRIxPTR, (uintptr_t) this);\n \n+    log_state();\n+\n     // Disassociate channels from this port.\n     while (chans.is_empty() == false) {\n         chans.pop()->disassociate();\n@@ -27,6 +29,20 @@ rust_port::~rust_port() {\n     delete remote_channel;\n }\n \n+void rust_port::log_state() {\n+    task->log(rust_log::COMM,\n+              \"rust_port: 0x%\" PRIxPTR \", associated channel(s): %d\",\n+              this, chans.length());\n+    for (uint32_t i = 0; i < chans.length(); i++) {\n+        rust_chan *chan = chans[i];\n+        task->log(rust_log::COMM,\n+            \"\\tchan: 0x%\" PRIxPTR \", data pending: %s, remote: %s\",\n+            chan,\n+            !chan->buffer.is_empty() ? \"yes\" : \"no\",\n+            chan == remote_channel ? \"yes\" : \"no\");\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "3330701ad738ce9916a3af5861c8ca375acfc90c", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "patch": "@@ -15,6 +15,7 @@ class rust_port : public maybe_proxy<rust_port>,\n \n     rust_port(rust_task *task, size_t unit_sz);\n     ~rust_port();\n+    void log_state();\n };\n \n //"}, {"sha": "63724bbbcd33088665cf11431e4ea078afaadd8d", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "patch": "@@ -333,6 +333,7 @@ rust_task::kill() {\n     if (this == dom->root_task)\n         dom->fail();\n \n+    log(rust_log::TASK, \"preparing to unwind task: 0x%\" PRIxPTR, this);\n     run_on_resume(dom->root_crate->get_unwind_glue());\n }\n \n@@ -515,6 +516,10 @@ rust_task::free(void *p, bool is_gc)\n     }\n }\n \n+const char *\n+rust_task::state_str() {\n+    return dom->state_vec_name(state);\n+}\n \n void\n rust_task::transition(ptr_vec<rust_task> *src, ptr_vec<rust_task> *dst)"}, {"sha": "5040a1575a1f7c318cfd6f2d94221f317ee48904", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30734a9a7ba8e58bf4bd4196f8abd1fd40241732/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=30734a9a7ba8e58bf4bd4196f8abd1fd40241732", "patch": "@@ -7,9 +7,11 @@\n     (task)->dom->get_log().reset_indent(0);                 \\\n     (task)->log(rust_log::UPCALL,                           \\\n                 \"> UPCALL %s - task: 0x%\" PRIxPTR           \\\n-                \" retpc: x%\" PRIxPTR,                       \\\n+                \" retpc: x%\" PRIxPTR                        \\\n+                \" ref_count: %d\",                           \\\n                 __FUNCTION__,                               \\\n-                (task), __builtin_return_address(0));       \\\n+                (task), __builtin_return_address(0),        \\\n+                (task->ref_count));                         \\\n     (task)->dom->get_log().indent();\n #else\n #define LOG_UPCALL_ENTRY(task)                              \\\n@@ -19,6 +21,20 @@\n     (task)->dom->get_log().indent();\n #endif\n \n+void\n+log_task_state(rust_task *task, maybe_proxy<rust_task> *target) {\n+    rust_task *delegate = target->delegate();\n+    if (target->is_proxy()) {\n+        task->log(rust_log::TASK,\n+                  \"remote task: 0x%\" PRIxPTR \", ref_count: %d state: %s\",\n+                  delegate, delegate->ref_count, delegate->state_str());\n+    } else {\n+        task->log(rust_log::TASK,\n+                  \"local task: 0x%\" PRIxPTR \", ref_count: %d state: %s\",\n+                  delegate, delegate->ref_count, delegate->state_str());\n+    }\n+}\n+\n extern \"C\" CDECL char const *str_buf(rust_task *task, rust_str *s);\n \n extern \"C\" void upcall_grow_task(rust_task *task, size_t n_frame_bytes) {\n@@ -29,14 +45,13 @@ extern \"C\" void upcall_grow_task(rust_task *task, size_t n_frame_bytes) {\n extern \"C\" CDECL void upcall_log_int(rust_task *task, int32_t i) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::ULOG,\n-              \"upcall log_int(0x%\" PRIx32 \" = %\" PRId32 \" = '%c')\", i, i,\n-              (char) i);\n+              \"rust: %\" PRId32 \" (0x%\" PRIx32 \")\", i, i);\n }\n \n extern \"C\" CDECL void upcall_log_str(rust_task *task, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);\n     const char *c = str_buf(task, str);\n-    task->log(rust_log::UPCALL | rust_log::ULOG, \"upcall log_str(\\\"%s\\\")\", c);\n+    task->log(rust_log::UPCALL | rust_log::ULOG, \"rust: %s\", c);\n }\n \n extern \"C\" CDECL void upcall_trace_word(rust_task *task, uintptr_t i) {\n@@ -219,6 +234,7 @@ extern \"C\" CDECL void upcall_fail(rust_task *task, char const *expr,\n extern \"C\" CDECL void\n upcall_kill(rust_task *task, maybe_proxy<rust_task> *target) {\n     LOG_UPCALL_ENTRY(task);\n+    log_task_state(task, target);\n     rust_task *target_task = target->delegate();\n \n     task->log(rust_log::UPCALL | rust_log::TASK,"}]}