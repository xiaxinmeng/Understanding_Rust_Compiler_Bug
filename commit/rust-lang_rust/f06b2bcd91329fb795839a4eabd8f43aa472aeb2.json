{"sha": "f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNmIyYmNkOTEzMjlmYjc5NTgzOWE0ZWFiZDhmNDNhYTQ3MmFlYjI=", "commit": {"author": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-06-03T11:26:15Z"}, "committer": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-06-03T11:26:15Z"}, "message": "Use split1 when formatting function signature params", "tree": {"sha": "9642c029da5dc0bd44b36087464e2407062bf040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9642c029da5dc0bd44b36087464e2407062bf040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "html_url": "https://github.com/rust-lang/rust/commit/f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/comments", "author": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1211a46826ee8a08683e4cfe151649efd6fd90fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1211a46826ee8a08683e4cfe151649efd6fd90fa", "html_url": "https://github.com/rust-lang/rust/commit/1211a46826ee8a08683e4cfe151649efd6fd90fa"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "aca283cda34fd6f19f379d3bfb3df175dae39af7", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "patch": "@@ -1639,6 +1639,7 @@ dependencies = [\n  \"relative-path\",\n  \"rustc-hash\",\n  \"serde_json\",\n+ \"stdx\",\n  \"text-size\",\n ]\n "}, {"sha": "ca8a6a650994c38f24da8ec16d9f98fe0d5aad21", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "patch": "@@ -10,7 +10,7 @@ use std::{\n use hir::{Docs, Documentation, HasSource, HirDisplay};\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-use stdx::SepBy;\n+use stdx::{split1, SepBy};\n \n use crate::display::{generic_parameters, where_predicates};\n \n@@ -210,10 +210,8 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                 // macro-generated functions are missing whitespace\n                 fn fmt_param(param: ast::Param) -> String {\n                     let text = param.syntax().text().to_string();\n-                    match text.find(':') {\n-                        Some(pos) if 1 + pos < text.len() => {\n-                            format!(\"{} {}\", &text[0..1 + pos].trim(), &text[1 + pos..].trim())\n-                        }\n+                    match split1(&text, ':') {\n+                        Some((left, right)) => format!(\"{}: {}\", left.trim(), right.trim()),\n                         _ => text,\n                     }\n                 }"}, {"sha": "c0356344ca24e94f75a75d1fb08f225241f7a261", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "patch": "@@ -124,3 +124,8 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n     // FIXME: do this in place.\n     *buf = buf.replace(from, to)\n }\n+\n+pub fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+    let idx = haystack.find(delim)?;\n+    Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n+}"}, {"sha": "8840bf36ae325c79b39eaccaaa2ebdd56fa709d2", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "patch": "@@ -14,4 +14,5 @@ serde_json = \"1.0.48\"\n relative-path = \"1.0.0\"\n rustc-hash = \"1.1.0\"\n \n-ra_cfg = { path = \"../ra_cfg\" }\n\\ No newline at end of file\n+ra_cfg = { path = \"../ra_cfg\" }\n+stdx = { path = \"../stdx\" }\n\\ No newline at end of file"}, {"sha": "2141bfc202779a705eb7da0f378b2a94b61896d8", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06b2bcd91329fb795839a4eabd8f43aa472aeb2/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "patch": "@@ -15,6 +15,7 @@ use std::{\n };\n \n pub use ra_cfg::CfgOptions;\n+use stdx::split1;\n \n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use rustc_hash::FxHashMap;\n@@ -332,11 +333,6 @@ fn parse_meta(meta: &str) -> FixtureMeta {\n     FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n }\n \n-fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {\n-    let idx = haystack.find(delim)?;\n-    Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n-}\n-\n /// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n /// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n /// the other lines visually:"}]}