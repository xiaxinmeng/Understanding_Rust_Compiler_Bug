{"sha": "be30e602969cefee2785dc25f17c34ebc4f007b3", "node_id": "C_kwDOAAsO6NoAKGJlMzBlNjAyOTY5Y2VmZWUyNzg1ZGMyNWYxN2MzNGViYzRmMDA3YjM", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-10-20T09:21:06Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-10-20T09:21:06Z"}, "message": "remove duplicate subst", "tree": {"sha": "0929fbf8a47fe934675f75404757f4f6e2b8cebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0929fbf8a47fe934675f75404757f4f6e2b8cebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be30e602969cefee2785dc25f17c34ebc4f007b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be30e602969cefee2785dc25f17c34ebc4f007b3", "html_url": "https://github.com/rust-lang/rust/commit/be30e602969cefee2785dc25f17c34ebc4f007b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be30e602969cefee2785dc25f17c34ebc4f007b3/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b8c016cea9b1f1917d287401b498abd4eabd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b8c016cea9b1f1917d287401b498abd4eabd29", "html_url": "https://github.com/rust-lang/rust/commit/99b8c016cea9b1f1917d287401b498abd4eabd29"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "076597587f510fbc9ef10a8129677e3e6599a955", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be30e602969cefee2785dc25f17c34ebc4f007b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be30e602969cefee2785dc25f17c34ebc4f007b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=be30e602969cefee2785dc25f17c34ebc4f007b3", "patch": "@@ -91,7 +91,6 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                         ControlFlow::CONTINUE\n                     }\n                     Node::Cast(_, _, ty) => {\n-                        let ty = ty.subst(tcx, ct.substs);\n                         if ty.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n                         } else if ty.definitely_has_param_types_or_consts(tcx) {"}]}