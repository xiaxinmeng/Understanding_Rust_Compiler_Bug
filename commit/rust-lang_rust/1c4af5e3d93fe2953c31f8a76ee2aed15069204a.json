{"sha": "1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNGFmNWUzZDkzZmUyOTUzYzMxZjhhNzZlZTJhZWQxNTA2OTIwNGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-18T18:14:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:54Z"}, "message": "rustuv: Remove the id() function from IoFactory\n\nThe only user of this was the homing code in librustuv, and it just manually\ndoes the cast from a pointer to a uint now.", "tree": {"sha": "9c033596228af15427cd7c952c9713599c937ced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c033596228af15427cd7c952c9713599c937ced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "html_url": "https://github.com/rust-lang/rust/commit/1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dc38b0c51f8b98ea550b5a3842c87884f10fa8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc38b0c51f8b98ea550b5a3842c87884f10fa8d", "html_url": "https://github.com/rust-lang/rust/commit/3dc38b0c51f8b98ea550b5a3842c87884f10fa8d"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "32056215e7c97935c087ec7a1eb101ed9c38221a", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "patch": "@@ -111,9 +111,6 @@ fn mkerr_winbool(ret: libc::c_int) -> IoResult<()> {\n pub struct IoFactory;\n \n impl rtio::IoFactory for IoFactory {\n-    // all native io factories are the same\n-    fn id(&self) -> uint { 0 }\n-\n     // networking\n     fn tcp_connect(&mut self, _addr: SocketAddr) -> IoResult<~RtioTcpStream> {\n         Err(unimpl())"}, {"sha": "16534b7b38babbdbaf1a42d0f61a49e47a800ac6", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "patch": "@@ -33,6 +33,7 @@\n \n #[allow(dead_code)];\n \n+use std::cast;\n use std::rt::local::Local;\n use std::rt::rtio::LocalIo;\n use std::rt::task::{Task, BlockedTask};\n@@ -70,6 +71,17 @@ impl Clone for HomeHandle {\n     }\n }\n \n+pub fn local_id() -> uint {\n+    let mut io = match LocalIo::borrow() {\n+        Some(io) => io, None => return 0,\n+    };\n+    let io = io.get();\n+    unsafe {\n+        let (_vtable, ptr): (uint, uint) = cast::transmute(io);\n+        return ptr;\n+    }\n+}\n+\n pub trait HomingIO {\n     fn home<'r>(&'r mut self) -> &'r mut HomeHandle;\n \n@@ -79,35 +91,26 @@ pub trait HomingIO {\n     fn go_to_IO_home(&mut self) -> uint {\n         let _f = ForbidUnwind::new(\"going home\");\n \n-        let mut cur_task: ~Task = Local::take();\n-        let cur_loop_id = {\n-            let mut io = cur_task.local_io().expect(\"libuv must have I/O\");\n-            io.get().id()\n-        };\n+        let cur_loop_id = local_id();\n+        let destination = self.home().id;\n \n         // Try at all costs to avoid the homing operation because it is quite\n         // expensive. Hence, we only deschedule/send if we're not on the correct\n         // event loop. If we're already on the home event loop, then we're good\n         // to go (remember we have no preemption, so we're guaranteed to stay on\n         // this event loop as long as we avoid the scheduler).\n-        if cur_loop_id != self.home().id {\n+        if cur_loop_id != destination {\n+            let cur_task: ~Task = Local::take();\n             cur_task.deschedule(1, |task| {\n                 self.home().send(task);\n                 Ok(())\n             });\n \n             // Once we wake up, assert that we're in the right location\n-            let cur_loop_id = {\n-                let mut io = LocalIo::borrow().expect(\"libuv must have I/O\");\n-                io.get().id()\n-            };\n-            assert_eq!(cur_loop_id, self.home().id);\n-\n-            cur_loop_id\n-        } else {\n-            Local::put(cur_task);\n-            cur_loop_id\n+            assert_eq!(local_id(), destination);\n         }\n+\n+        return destination;\n     }\n \n     /// Fires a single homing missile, returning another missile targeted back\n@@ -130,8 +133,7 @@ impl HomingMissile {\n     /// Check at runtime that the task has *not* transplanted itself to a\n     /// different I/O loop while executing.\n     pub fn check(&self, msg: &'static str) {\n-        let mut io = LocalIo::borrow().expect(\"libuv must have I/O\");\n-        assert!(io.get().id() == self.io_home, \"{}\", msg);\n+        assert!(local_id() == self.io_home, \"{}\", msg);\n     }\n }\n "}, {"sha": "2ef10dd33ac9c915d0e5ac3c2988f20a6b18cc1e", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "patch": "@@ -53,7 +53,6 @@ use std::ptr::null;\n use std::ptr;\n use std::rt::local::Local;\n use std::rt::task::{BlockedTask, Task};\n-use std::rt::rtio::LocalIo;\n use std::str::raw::from_c_str;\n use std::str;\n use std::task;\n@@ -161,18 +160,16 @@ pub struct ForbidSwitch {\n \n impl ForbidSwitch {\n     fn new(s: &'static str) -> ForbidSwitch {\n-        let mut io = LocalIo::borrow().expect(\"libuv must have local I/O\");\n         ForbidSwitch {\n             msg: s,\n-            io: io.get().id(),\n+            io: homing::local_id(),\n         }\n     }\n }\n \n impl Drop for ForbidSwitch {\n     fn drop(&mut self) {\n-        let mut io = LocalIo::borrow().expect(\"libuv must have local I/O\");\n-        assert!(self.io == io.get().id(),\n+        assert!(self.io == homing::local_id(),\n                 \"didnt want a scheduler switch: {}\",\n                 self.msg);\n     }"}, {"sha": "9e7343aa2da94edfe575aa8169afc959ccf47d96", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "patch": "@@ -132,13 +132,14 @@ impl UvIoFactory {\n     pub fn uv_loop<'a>(&mut self) -> *uvll::uv_loop_t { self.loop_.handle }\n \n     pub fn make_handle(&mut self) -> HomeHandle {\n-        HomeHandle::new(self.id(), &mut **self.handle_pool.get_mut_ref())\n+        // It's understood by the homing code that the \"local id\" is just the\n+        // pointer of the local I/O factory cast to a uint.\n+        let id: uint = unsafe { cast::transmute_copy(&self) };\n+        HomeHandle::new(id, &mut **self.handle_pool.get_mut_ref())\n     }\n }\n \n impl IoFactory for UvIoFactory {\n-    fn id(&self) -> uint { unsafe { cast::transmute(self) } }\n-\n     // Connect to an address and return a new stream\n     // NB: This blocks the task waiting on the connection.\n     // It would probably be better to return a future"}, {"sha": "ad5fad99f20633a84d952c77418af5d98607b2c1", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "patch": "@@ -38,7 +38,7 @@ use std::libc;\n use std::libc::uintptr_t;\n \n pub use self::errors::{EACCES, ECONNREFUSED, ECONNRESET, EPIPE, ECONNABORTED,\n-                       ECANCELED, EBADF, ENOTCONN};\n+                       ECANCELED, EBADF, ENOTCONN, ENOENT};\n \n pub static OK: c_int = 0;\n pub static EOF: c_int = -4095;"}, {"sha": "97b08cc18caf978edf365d390ddfe9bcc4dfb5b1", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4af5e3d93fe2953c31f8a76ee2aed15069204a/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "patch": "@@ -150,8 +150,6 @@ impl<'a> LocalIo<'a> {\n }\n \n pub trait IoFactory {\n-    fn id(&self) -> uint;\n-\n     // networking\n     fn tcp_connect(&mut self, addr: SocketAddr) -> Result<~RtioTcpStream, IoError>;\n     fn tcp_bind(&mut self, addr: SocketAddr) -> Result<~RtioTcpListener, IoError>;"}]}