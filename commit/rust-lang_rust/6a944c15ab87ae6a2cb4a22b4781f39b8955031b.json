{"sha": "6a944c15ab87ae6a2cb4a22b4781f39b8955031b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTQ0YzE1YWI4N2FlNmEyY2I0YTIyYjQ3ODFmMzliODk1NTAzMWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-28T05:29:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-28T05:29:52Z"}, "message": "Rollup merge of #73243 - poliorcetics:discourage-is-file, r=Amanieu\n\nAdd documentation to point to `File::open` or `OpenOptions::open` instead of `is_file` to check read/write possibility\n\nFixes #64170.\n\nThis adds documentation to point user towards `!is_dir` instead of `is_file` when all they want to is read from a source.\n\nI ran `rg \"fn is_file\\(\"` to find all `is_file` methods, I hope I did not miss one.", "tree": {"sha": "74342f37d97cbb30c1cbb053efec5dd281ddb9db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74342f37d97cbb30c1cbb053efec5dd281ddb9db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a944c15ab87ae6a2cb4a22b4781f39b8955031b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+CrQCRBK7hj4Ov3rIwAAdHIIAA9vO7a4yggwQM526a6rJMbn\n4e6Q8zRPqCVp852ajLhDzm745nUUniDouICe56nfccUflQd1MvfYmz8G45qm6Fow\n5yZAktVSvSvbzLGQm1QxKBReIOm3PzMpsxjI+f9Rqn3HgKSk+v6H15D5J4o7Kwbt\n60KWrtRG6xFwj88R+eCbslXMbE8pOWP731w/LWlG5tqVUH7CGCNWwppXy99PmEBQ\nOwTqNmpTR31q24e0186XzI9/MIeLR/omq4YrylcAX0mxn6Ls9QO2//pD5LmaN8NJ\nvZZL96WijL5lJpotmSnjjDRBzk7X9ZnVtZg8E2CDUqcghTJF5CiyXy9+FDNEmp4=\n=WJ5+\n-----END PGP SIGNATURE-----\n", "payload": "tree 74342f37d97cbb30c1cbb053efec5dd281ddb9db\nparent 385d85c858863e9dee88c4d65d4016599c4323d7\nparent 8e8c54aa3a8d92d8443ec4596754d14b2d196899\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593322192 -0700\ncommitter GitHub <noreply@github.com> 1593322192 -0700\n\nRollup merge of #73243 - poliorcetics:discourage-is-file, r=Amanieu\n\nAdd documentation to point to `File::open` or `OpenOptions::open` instead of `is_file` to check read/write possibility\n\nFixes #64170.\n\nThis adds documentation to point user towards `!is_dir` instead of `is_file` when all they want to is read from a source.\n\nI ran `rg \"fn is_file\\(\"` to find all `is_file` methods, I hope I did not miss one.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a944c15ab87ae6a2cb4a22b4781f39b8955031b", "html_url": "https://github.com/rust-lang/rust/commit/6a944c15ab87ae6a2cb4a22b4781f39b8955031b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a944c15ab87ae6a2cb4a22b4781f39b8955031b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385d85c858863e9dee88c4d65d4016599c4323d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/385d85c858863e9dee88c4d65d4016599c4323d7", "html_url": "https://github.com/rust-lang/rust/commit/385d85c858863e9dee88c4d65d4016599c4323d7"}, {"sha": "8e8c54aa3a8d92d8443ec4596754d14b2d196899", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8c54aa3a8d92d8443ec4596754d14b2d196899", "html_url": "https://github.com/rust-lang/rust/commit/8e8c54aa3a8d92d8443ec4596754d14b2d196899"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "23bd8f6498b4a6ff64226b3b9eaf78f5c7663f00", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6a944c15ab87ae6a2cb4a22b4781f39b8955031b/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a944c15ab87ae6a2cb4a22b4781f39b8955031b/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6a944c15ab87ae6a2cb4a22b4781f39b8955031b", "patch": "@@ -1033,8 +1033,16 @@ impl Metadata {\n     /// [`is_dir`], and will be false for symlink metadata\n     /// obtained from [`symlink_metadata`].\n     ///\n+    /// When the goal is simply to read from (or write to) the source, the most\n+    /// reliable way to test the source can be read (or written to) is to open\n+    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n+    /// a Unix-like system for example. See [`File::open`] or\n+    /// [`OpenOptions::open`] for more information.\n+    ///\n     /// [`is_dir`]: struct.Metadata.html#method.is_dir\n     /// [`symlink_metadata`]: fn.symlink_metadata.html\n+    /// [`File::open`]: struct.File.html#method.open\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n     ///\n     /// # Examples\n     ///\n@@ -1307,8 +1315,16 @@ impl FileType {\n     /// [`is_dir`] and [`is_symlink`]; only zero or one of these\n     /// tests may pass.\n     ///\n+    /// When the goal is simply to read from (or write to) the source, the most\n+    /// reliable way to test the source can be read (or written to) is to open\n+    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n+    /// a Unix-like system for example. See [`File::open`] or\n+    /// [`OpenOptions::open`] for more information.\n+    ///\n     /// [`is_dir`]: struct.FileType.html#method.is_dir\n     /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n+    /// [`File::open`]: struct.File.html#method.open\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n     ///\n     /// # Examples\n     ///"}, {"sha": "f14a9ff72f62f473ef8437ed5c63650cbab30785", "filename": "src/libstd/path.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a944c15ab87ae6a2cb4a22b4781f39b8955031b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a944c15ab87ae6a2cb4a22b4781f39b8955031b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=6a944c15ab87ae6a2cb4a22b4781f39b8955031b", "patch": "@@ -2503,11 +2503,20 @@ impl Path {\n     /// # See Also\n     ///\n     /// This is a convenience function that coerces errors to false. If you want to\n-    /// check errors, call [fs::metadata] and handle its Result. Then call\n-    /// [fs::Metadata::is_file] if it was Ok.\n-    ///\n-    /// [fs::metadata]: ../../std/fs/fn.metadata.html\n-    /// [fs::Metadata::is_file]: ../../std/fs/struct.Metadata.html#method.is_file\n+    /// check errors, call [`fs::metadata`] and handle its Result. Then call\n+    /// [`fs::Metadata::is_file`] if it was Ok.\n+    ///\n+    /// When the goal is simply to read from (or write to) the source, the most\n+    /// reliable way to test the source can be read (or written to) is to open\n+    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n+    /// a Unix-like system for example. See [`File::open`] or\n+    /// [`OpenOptions::open`] for more information.\n+    ///\n+    /// [`fs::metadata`]: ../../std/fs/fn.metadata.html\n+    /// [`fs::Metadata`]: ../../std/fs/struct.Metadata.html\n+    /// [`fs::Metadata::is_file`]: ../../std/fs/struct.Metadata.html#method.is_file\n+    /// [`File::open`]: ../../std/fs/struct.File.html#method.open\n+    /// [`OpenOptions::open`]: ../../std/fs/struct.OpenOptions.html#method.open\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)"}]}