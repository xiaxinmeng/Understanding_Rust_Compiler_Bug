{"sha": "4833ce8673957a0a3a057bfa637298cee54ca7dd", "node_id": "C_kwDOAAsO6NoAKDQ4MzNjZTg2NzM5NTdhMGEzYTA1N2JmYTYzNzI5OGNlZTU0Y2E3ZGQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-21T04:32:07Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:43Z"}, "message": "fmt", "tree": {"sha": "bf2a407f4283e4a2a9d20838a5b517c0eed9aac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2a407f4283e4a2a9d20838a5b517c0eed9aac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4833ce8673957a0a3a057bfa637298cee54ca7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4833ce8673957a0a3a057bfa637298cee54ca7dd", "html_url": "https://github.com/rust-lang/rust/commit/4833ce8673957a0a3a057bfa637298cee54ca7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4833ce8673957a0a3a057bfa637298cee54ca7dd/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f59b91e8a0108db4126b227e8bd92671e1251e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59b91e8a0108db4126b227e8bd92671e1251e17", "html_url": "https://github.com/rust-lang/rust/commit/f59b91e8a0108db4126b227e8bd92671e1251e17"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "e297a01e90e7a3ca57978d97bfdde74b6b3377eb", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=4833ce8673957a0a3a057bfa637298cee54ca7dd", "patch": "@@ -35,7 +35,7 @@ TrivialTypeTraversalAndLiftImpls! {\n pub type BoundAbstractConst<'tcx> = Result<Option<EarlyBinder<ty::Const<'tcx>>>, ErrorGuaranteed>;\n \n impl<'tcx> TyCtxt<'tcx> {\n-    /// Returns a const with substs applied by\n+    /// Returns a const without substs applied\n     fn bound_abstract_const(self, uv: ty::WithOptConstParam<DefId>) -> BoundAbstractConst<'tcx> {\n         let ac = if let Some((did, param_did)) = uv.as_const_arg() {\n             self.thir_abstract_const_of_const_arg((did, param_did))"}, {"sha": "decd99de3c48e5b0ddf0c544756ac03485518ffc", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=4833ce8673957a0a3a057bfa637298cee54ca7dd", "patch": "@@ -647,7 +647,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Placeholder(p1), ty::ConstKind::Placeholder(p2)) => p1 == p2,\n         (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => a_val == b_val,\n \n-        (ty::ConstKind::Unevaluated(_au), ty::ConstKind::Unevaluated(_bu))\n+        (ty::ConstKind::Unevaluated(_), ty::ConstKind::Unevaluated(_))\n             if tcx.features().generic_const_exprs =>\n         {\n             if let (Ok(Some(a)), Ok(Some(b))) = (\n@@ -681,7 +681,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Expr(ae), ty::ConstKind::Expr(be)) => {\n             let r = relation;\n \n-            // FIXME(julianknodt): is it possible to relate two consts which are not identical\n+            // FIXME(generic_const_exprs): is it possible to relate two consts which are not identical\n             // exprs? Should we care about that?\n             let expr = match (ae, be) {\n                 (Expr::Binop(a_op, al, ar), Expr::Binop(b_op, bl, br))"}, {"sha": "eebff421b813b38eb070ec5fba0110fb4128c865", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4833ce8673957a0a3a057bfa637298cee54ca7dd", "patch": "@@ -286,8 +286,9 @@ where\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         self.visit_ty(c.ty())?;\n         let tcx = self.def_id_visitor.tcx();\n-        if let ty::ConstKind::Unevaluated(uv) = c.kind() &&\n-           let Ok(Some(ct)) = tcx.expand_unevaluated_abstract_const(uv.def, uv.substs) {\n+        if let ty::ConstKind::Unevaluated(uv) = c.kind()\n+            && let Ok(Some(ct)) = tcx.expand_unevaluated_abstract_const(uv.def, uv.substs)\n+        {\n             ct.super_visit_with(self)?;\n         }\n         ControlFlow::CONTINUE"}, {"sha": "d72e5c7a11c4b02d3aae432a1216dfeb1098057f", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4833ce8673957a0a3a057bfa637298cee54ca7dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=4833ce8673957a0a3a057bfa637298cee54ca7dd", "patch": "@@ -78,7 +78,7 @@ pub fn is_const_evaluatable<'tcx>(\n             // compilation with a useful error.\n             Err(_) if tcx.sess.is_nightly_build()\n                 && let Ok(Some(ac)) = tcx.expand_abstract_consts(ct)\n-                && let ty::ConstKind::Expr(_) = ac.kind() => \n+                && let ty::ConstKind::Expr(_) = ac.kind() =>\n             {\n                 tcx.sess\n                     .struct_span_fatal("}, {"sha": "65148c55ee54140bb40ae8ae550bd930898be274", "filename": "src/test/ui/const-generics/issues/issue-83249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4833ce8673957a0a3a057bfa637298cee54ca7dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4833ce8673957a0a3a057bfa637298cee54ca7dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs?ref=4833ce8673957a0a3a057bfa637298cee54ca7dd", "patch": "@@ -15,7 +15,7 @@ fn foo<T: Foo>(_: [u8; T::N]) -> T {\n \n pub fn bar() {\n     let _: u8 = foo([0; 1]);\n-    \n+\n     let _ = foo([0; 1]);\n     //~^ ERROR type annotations needed\n }"}]}