{"sha": "c96f62a29d6a2e61c886e7c8509aeb9a44f53164", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NmY2MmEyOWQ2YTJlNjFjODg2ZTdjODUwOWFlYjlhNDRmNTMxNjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-11T21:57:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-11T21:58:01Z"}, "message": "Fiddle the comm operators in the docs, add swap and move symbols (no docs yet).", "tree": {"sha": "35d58be596791d24b7046c46d900897061bee212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35d58be596791d24b7046c46d900897061bee212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96f62a29d6a2e61c886e7c8509aeb9a44f53164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96f62a29d6a2e61c886e7c8509aeb9a44f53164", "html_url": "https://github.com/rust-lang/rust/commit/c96f62a29d6a2e61c886e7c8509aeb9a44f53164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96f62a29d6a2e61c886e7c8509aeb9a44f53164/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "html_url": "https://github.com/rust-lang/rust/commit/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "d99aaea09cc683db6928ea57867f3b26c18db244", "filename": "doc/rust.texi", "status": "modified", "additions": 19, "deletions": 34, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c96f62a29d6a2e61c886e7c8509aeb9a44f53164/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/c96f62a29d6a2e61c886e7c8509aeb9a44f53164/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=c96f62a29d6a2e61c886e7c8509aeb9a44f53164", "patch": "@@ -915,8 +915,9 @@ The special symbols are:\n @tab @code{)}\n @item @code{=}\n @tab @code{<-}\n+@tab @code{<->}\n @tab @code{<|}\n-@tab @code{<+}\n+@tab @code{|>}\n @tab @code{->}\n @item @code{+}\n @tab @code{++}\n@@ -1464,21 +1465,20 @@ Each port and channel can carry only one type of message. The message type is\n encoded as a parameter of the channel or port type. The message type of a\n channel is equal to the message type of the port it is bound to.\n \n-Messages are sent asynchronously or semi-synchronously. A channel contains a\n-message queue and asynchronously sending a message merely inserts it into the\n-sending channel's queue; message receipt is the responsibility of the\n-receiving task.\n+Messages are generally sent asynchronously, with optional rate-limiting on the\n+transmit side. A channel contains a message queue and asynchronously sending a\n+message merely inserts it into the sending channel's queue; message receipt is\n+the responsibility of the receiving task.\n \n Queued messages in channels are charged to the domain of the @emph{sending}\n task. If too many messages are queued for transmission from a single sending\n task, without being received by a receiving task, the sending task may exceed\n its memory budget, which causes a run-time signal. To help control this\n possibility, a semi-synchronous send operation is possible, which blocks until\n-there is room in the existing queue and then executes an asynchronous send.\n+there is room in the existing queue before sending send.\n \n-The asynchronous message-send operator is @code{<+}. The semi-synchronous\n-message-send operator is @code{<|}. @xref{Ref.Expr.Send}. The message-receive\n-operator is @code{<-}. @xref{Ref.Expr.Recv}.\n+The message-send operator is @code{<|}. @xref{Ref.Expr.Send}. The\n+message-receive operator is @code{|>}. @xref{Ref.Expr.Recv}.\n \n @node       Ref.Task.Life\n @subsection Ref.Task.Life\n@@ -2344,7 +2344,7 @@ An example of a @code{port} type:\n type port[vec[str]] svp;\n let p: svp = get_port();\n let v: vec[str];\n-v <- p;\n+p |> v;\n @end example\n \n @node       Ref.Type.Chan\n@@ -2948,7 +2948,7 @@ let out: port[u8];\n let p: task = spawn helper(chan(out));\n let p2: task = spawn \"my_helper\" helper(chan(out));\n // let task run, do other things.\n-let result <- out;\n+let out |> result;\n \n @end example\n \n@@ -2958,27 +2958,11 @@ let result <- out;\n @cindex Send expression\n @cindex Communication\n \n-Sending a value through a channel can be done via two different expressions.\n-Both expressions take an @emph{lval}, denoting a channel, and a value to send\n-into the channel. The action of @emph{sending} varies depending on the\n-@dfn{send operator} employed.\n+Sending a value into a channel is done by the send operator @code{<|}, which\n+takes a channel and a value to send, and moves the value into the channel's\n+outgoing buffer.\n \n-The @emph{asynchronous send} operator @code{<+} adds a value to the channel's\n-queue, without blocking. If the queue is full, it is extended, taking memory\n-from the task's domain. If the task memory budget is exhausted, a signal is\n-sent to the task.\n-\n-The @emph{semi-synchronous send} operator @code{<|} adds a value to the\n-channel's queue @emph{only if} the queue has room; if the queue is full, the\n-operation @emph{blocks} the sender until the queue has room.\n-\n-An example of an asynchronous send:\n-@example\n-chan[str] c = @dots{};\n-c <+ \"hello, world\";\n-@end example\n-\n-An example of a semi-synchronous send:\n+An example of a send:\n @example\n chan[str] c = @dots{};\n c <| \"hello, world\";\n@@ -2992,7 +2976,7 @@ c <| \"hello, world\";\n \n The @dfn{receive expression} takes an @var{lval} to receive into and an\n expression denoting a port, and applies the @emph{receive operator}\n-(@code{<-}) to the pair, copying a value out of the port and into the\n+(@code{|>}) to the pair, moving a value out of the port and into the\n @var{lval}. The expression causes the receiving task to enter the @emph{blocked\n reading} state until a task is sending a value to the port, at which point the\n runtime pseudo-randomly selects a sending task and copies a value from the\n@@ -3002,7 +2986,8 @@ un-blocks the receiving task. @xref{Ref.Run.Comm}.\n An example of a @emph{receive}:\n @example\n port[str] p = @dots{};\n-let s: str <- p;\n+let s: str;\n+p |> p;\n @end example\n \n @node       Ref.Expr.Call\n@@ -3410,7 +3395,7 @@ let x: int = 0;\n let strs: vec[str];\n \n alt @{\n-    case (str s <- p) @{\n+    case (str s; p |> s) @{\n         vec::append(strs, s);\n     @}\n     case (c <| x) @{"}]}