{"sha": "82fae2be049f37bc20d2bad6c6c482a7d957f687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZmFlMmJlMDQ5ZjM3YmMyMGQyYmFkNmM2YzQ4MmE3ZDk1N2Y2ODc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-01-24T00:34:43Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-01-25T21:31:38Z"}, "message": "Correctly set filetime for copied LLVM\n\nThis also makes compiletest no longer always retest everything.", "tree": {"sha": "3cda509366d543b3c9fe0e1cc59e68ce085951b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cda509366d543b3c9fe0e1cc59e68ce085951b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82fae2be049f37bc20d2bad6c6c482a7d957f687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82fae2be049f37bc20d2bad6c6c482a7d957f687", "html_url": "https://github.com/rust-lang/rust/commit/82fae2be049f37bc20d2bad6c6c482a7d957f687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82fae2be049f37bc20d2bad6c6c482a7d957f687/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bba352cad2117f56353d400f71e96eafa2e6bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bba352cad2117f56353d400f71e96eafa2e6bd7", "html_url": "https://github.com/rust-lang/rust/commit/6bba352cad2117f56353d400f71e96eafa2e6bd7"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "37451a74dfad631819972c2a55068835fc38598b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82fae2be049f37bc20d2bad6c6c482a7d957f687/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fae2be049f37bc20d2bad6c6c482a7d957f687/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=82fae2be049f37bc20d2bad6c6c482a7d957f687", "patch": "@@ -135,7 +135,7 @@ use std::cell::{RefCell, Cell};\n use std::collections::{HashSet, HashMap};\n use std::env;\n use std::fs::{self, OpenOptions, File};\n-use std::io::{self, Seek, SeekFrom, Write, Read};\n+use std::io::{Seek, SeekFrom, Write, Read};\n use std::path::{PathBuf, Path};\n use std::process::{self, Command};\n use std::slice;\n@@ -1263,9 +1263,15 @@ impl Build {\n             if !src.exists() {\n                 panic!(\"Error: File \\\"{}\\\" not found!\", src.display());\n             }\n-            let mut s = t!(fs::File::open(&src));\n-            let mut d = t!(fs::File::create(&dst));\n-            io::copy(&mut s, &mut d).expect(\"failed to copy\");\n+            let metadata = t!(src.symlink_metadata());\n+            if let Err(e) = fs::copy(&src, &dst) {\n+                panic!(\"failed to copy `{}` to `{}`: {}\", src.display(),\n+                       dst.display(), e)\n+            }\n+            t!(fs::set_permissions(&dst, metadata.permissions()));\n+            let atime = FileTime::from_last_access_time(&metadata);\n+            let mtime = FileTime::from_last_modification_time(&metadata);\n+            t!(filetime::set_file_times(&dst, atime, mtime));\n         }\n         chmod(&dst, perms);\n     }"}, {"sha": "94317f541c311f532c985eb8143ed209cfdb42eb", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/82fae2be049f37bc20d2bad6c6c482a7d957f687/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fae2be049f37bc20d2bad6c6c482a7d957f687/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=82fae2be049f37bc20d2bad6c6c482a7d957f687", "patch": "@@ -669,15 +669,6 @@ fn stamp(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> Path\n     output_base_dir(config, testpaths, revision).join(\"stamp\")\n }\n \n-/// Return an iterator over timestamps of files in the directory at `path`.\n-fn collect_timestamps(path: &PathBuf) -> impl Iterator<Item=FileTime> {\n-    WalkDir::new(path)\n-        .into_iter()\n-        .map(|entry| entry.unwrap())\n-        .filter(|entry| entry.file_type().is_file())\n-        .map(|entry| mtime(entry.path()))\n-}\n-\n fn up_to_date(\n     config: &Config,\n     testpaths: &TestPaths,\n@@ -700,13 +691,15 @@ fn up_to_date(\n     let rust_src_dir = config\n         .find_rust_src_root()\n         .expect(\"Could not find Rust source root\");\n-    let stamp = mtime(&stamp_name);\n-    let mut inputs = vec![mtime(&testpaths.file), mtime(&config.rustc_path)];\n+    let stamp = Stamp::from_path(&stamp_name);\n+    let mut inputs = vec![Stamp::from_path(&testpaths.file), Stamp::from_path(&config.rustc_path)];\n     inputs.extend(\n         props\n             .aux\n             .iter()\n-            .map(|aux| mtime(&testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux))),\n+            .map(|aux| {\n+                Stamp::from_path(&testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux))\n+            }),\n     );\n     // Relevant pretty printer files\n     let pretty_printer_files = [\n@@ -717,24 +710,47 @@ fn up_to_date(\n         \"src/etc/lldb_rust_formatters.py\",\n     ];\n     inputs.extend(pretty_printer_files.iter().map(|pretty_printer_file| {\n-        mtime(&rust_src_dir.join(pretty_printer_file))\n+        Stamp::from_path(&rust_src_dir.join(pretty_printer_file))\n     }));\n-    inputs.extend(collect_timestamps(&config.run_lib_path));\n+    inputs.extend(Stamp::from_dir(&config.run_lib_path));\n     if let Some(ref rustdoc_path) = config.rustdoc_path {\n-        inputs.push(mtime(&rustdoc_path));\n-        inputs.push(mtime(&rust_src_dir.join(\"src/etc/htmldocck.py\")));\n+        inputs.push(Stamp::from_path(&rustdoc_path));\n+        inputs.push(Stamp::from_path(&rust_src_dir.join(\"src/etc/htmldocck.py\")));\n     }\n \n     // UI test files.\n     inputs.extend(UI_EXTENSIONS.iter().map(|extension| {\n         let path = &expected_output_path(testpaths, revision, &config.compare_mode, extension);\n-        mtime(path)\n+        Stamp::from_path(path)\n     }));\n \n     // Compiletest itself.\n-    inputs.extend(collect_timestamps(&rust_src_dir.join(\"src/tools/compiletest/\")));\n+    inputs.extend(Stamp::from_dir(&rust_src_dir.join(\"src/tools/compiletest/\")));\n \n-    inputs.iter().any(|input| *input > stamp)\n+    inputs.iter().any(|input| input > &stamp)\n+}\n+\n+#[derive(Debug, PartialEq, PartialOrd, Ord, Eq)]\n+struct Stamp {\n+    time: FileTime,\n+    file: PathBuf,\n+}\n+\n+impl Stamp {\n+    fn from_path(p: &Path) -> Self {\n+        Stamp {\n+            time: mtime(&p),\n+            file: p.into(),\n+        }\n+    }\n+\n+    fn from_dir(path: &Path) -> impl Iterator<Item=Stamp> {\n+        WalkDir::new(path)\n+            .into_iter()\n+            .map(|entry| entry.unwrap())\n+            .filter(|entry| entry.file_type().is_file())\n+            .map(|entry| Stamp::from_path(entry.path()))\n+    }\n }\n \n fn mtime(path: &Path) -> FileTime {"}, {"sha": "3c2ca9702dc7fd1ed7314a5b8f98b4e436aa9b8e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82fae2be049f37bc20d2bad6c6c482a7d957f687/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fae2be049f37bc20d2bad6c6c482a7d957f687/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=82fae2be049f37bc20d2bad6c6c482a7d957f687", "patch": "@@ -1998,7 +1998,8 @@ impl<'test> TestCx<'test> {\n \n     fn fatal(&self, err: &str) -> ! {\n         self.error(err);\n-        panic!();\n+        error!(\"fatal error, panic: {:?}\", err);\n+        panic!(\"fatal error\");\n     }\n \n     fn fatal_proc_rec(&self, err: &str, proc_res: &ProcRes) -> ! {"}]}