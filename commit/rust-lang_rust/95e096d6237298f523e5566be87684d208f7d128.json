{"sha": "95e096d6237298f523e5566be87684d208f7d128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZTA5NmQ2MjM3Mjk4ZjUyM2U1NTY2YmU4NzY4NGQyMDhmN2QxMjg=", "commit": {"author": {"name": "Harald van Dijk", "email": "harald@gigawatt.nl", "date": "2021-03-06T16:02:48Z"}, "committer": {"name": "Harald van Dijk", "email": "harald@gigawatt.nl", "date": "2021-03-06T16:02:48Z"}, "message": "Change x64 size checks to not apply to x32.\n\nRust contains various size checks conditional on target_arch = \"x86_64\",\nbut these checks were never intended to apply to\nx86_64-unknown-linux-gnux32. Add target_pointer_width = \"64\" to the\nconditions.", "tree": {"sha": "468b0d4c282d5b94d8320dda8b79ccc74943ec5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468b0d4c282d5b94d8320dda8b79ccc74943ec5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e096d6237298f523e5566be87684d208f7d128", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFHBAABCAAxFiEExHIvDMPIFtjZnrWxfXG7MYpb1W0FAmBDp6gTHGhhcmFsZEBn\naWdhd2F0dC5ubAAKCRB9cbsxilvVbeXGCACelfoMM8Mh5Om28OjNjucqwNcAaTQT\nRsRVDW0WFQZ8rixiMZQFGj6ItqShh3VbGMdRCs4/cOaYZlHHGXZIZIDNI9DjtxE+\npDABGMU4dvXltGTj+mxmZ5U3kqlDHiFIitz+ELi8ifRmxC4pbmCjSAdIAUdypKoc\nFPrjahRPtzMZcWekZ1HIW8PLlSOjlqAhe0szDfGjy7HjGralLGMABbwpK6gt+0Q5\nr7iuQbng/hgmCIHnpCODEhWYOi7q0u06hVVzyk3gKQ6QYA1oN0jWPHyiR1J45Se+\nhZzlPaUT7JUT+AvebD/NbZ+xWoDWprkAdDGWmIoZ8hCo85MdH8m8j8+J\n=UPN/\n-----END PGP SIGNATURE-----", "payload": "tree 468b0d4c282d5b94d8320dda8b79ccc74943ec5f\nparent 51748a8fc77283914d4135f31b5966a407208187\nauthor Harald van Dijk <harald@gigawatt.nl> 1615046568 +0000\ncommitter Harald van Dijk <harald@gigawatt.nl> 1615046568 +0000\n\nChange x64 size checks to not apply to x32.\n\nRust contains various size checks conditional on target_arch = \"x86_64\",\nbut these checks were never intended to apply to\nx86_64-unknown-linux-gnux32. Add target_pointer_width = \"64\" to the\nconditions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e096d6237298f523e5566be87684d208f7d128", "html_url": "https://github.com/rust-lang/rust/commit/95e096d6237298f523e5566be87684d208f7d128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e096d6237298f523e5566be87684d208f7d128/comments", "author": {"login": "hvdijk", "id": 1389950, "node_id": "MDQ6VXNlcjEzODk5NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1389950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hvdijk", "html_url": "https://github.com/hvdijk", "followers_url": "https://api.github.com/users/hvdijk/followers", "following_url": "https://api.github.com/users/hvdijk/following{/other_user}", "gists_url": "https://api.github.com/users/hvdijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hvdijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hvdijk/subscriptions", "organizations_url": "https://api.github.com/users/hvdijk/orgs", "repos_url": "https://api.github.com/users/hvdijk/repos", "events_url": "https://api.github.com/users/hvdijk/events{/privacy}", "received_events_url": "https://api.github.com/users/hvdijk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hvdijk", "id": 1389950, "node_id": "MDQ6VXNlcjEzODk5NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1389950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hvdijk", "html_url": "https://github.com/hvdijk", "followers_url": "https://api.github.com/users/hvdijk/followers", "following_url": "https://api.github.com/users/hvdijk/following{/other_user}", "gists_url": "https://api.github.com/users/hvdijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hvdijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hvdijk/subscriptions", "organizations_url": "https://api.github.com/users/hvdijk/orgs", "repos_url": "https://api.github.com/users/hvdijk/repos", "events_url": "https://api.github.com/users/hvdijk/events{/privacy}", "received_events_url": "https://api.github.com/users/hvdijk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51748a8fc77283914d4135f31b5966a407208187", "url": "https://api.github.com/repos/rust-lang/rust/commits/51748a8fc77283914d4135f31b5966a407208187", "html_url": "https://github.com/rust-lang/rust/commit/51748a8fc77283914d4135f31b5966a407208187"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "0f5fabbc5742c80f4d8efecb3e5e641d820ca32a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -1083,7 +1083,7 @@ pub struct Expr {\n }\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Expr, 120);\n \n impl Expr {\n@@ -2757,7 +2757,7 @@ pub enum ItemKind {\n     MacroDef(MacroDef),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(ItemKind, 112);\n \n impl ItemKind {\n@@ -2831,7 +2831,7 @@ pub enum AssocItemKind {\n     MacCall(MacCall),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(AssocItemKind, 72);\n \n impl AssocItemKind {\n@@ -2883,7 +2883,7 @@ pub enum ForeignItemKind {\n     MacCall(MacCall),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(ForeignItemKind, 72);\n \n impl From<ForeignItemKind> for ItemKind {"}, {"sha": "71792acb37d13be3010345ec17ba07adf059706f", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -244,7 +244,7 @@ pub enum TokenKind {\n }\n \n // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(TokenKind, 16);\n \n #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n@@ -682,7 +682,7 @@ pub enum Nonterminal {\n }\n \n // `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Nonterminal, 48);\n \n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]"}, {"sha": "c5c3142602b9bb57083fcfa599f661987ed9faee", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -189,7 +189,7 @@ pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);\n pub type TreeAndSpacing = (TokenTree, Spacing);\n \n // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(TokenStream, 8);\n \n #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]"}, {"sha": "1db39fbfba5025ee5b7ec528ae4124fcd7523116", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -52,7 +52,7 @@ pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n // (See also the comment on `DiagnosticBuilderInner`.)\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, bool>, 16);\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, Encodable, Decodable)]"}, {"sha": "1938cdd1e46f4c6207677276c9824842c9e929a7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -3088,7 +3088,7 @@ impl<'hir> Node<'hir> {\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Block<'static>, 48);\n     rustc_data_structures::static_assert_size!(super::Expr<'static>, 72);"}, {"sha": "3df58cb7857f14125b869e14c0f8ed52a828bb4d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -408,7 +408,7 @@ pub enum SubregionOrigin<'tcx> {\n }\n \n // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(SubregionOrigin<'_>, 32);\n \n /// Times when we replace late-bound regions with variables:"}, {"sha": "f9170ef5dc346b7b338221fe00d27751a933de69", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -27,7 +27,7 @@\n \n #[macro_use]\n extern crate rustc_macros;\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n #[macro_use]\n extern crate rustc_data_structures;\n #[macro_use]"}, {"sha": "0882d682e1537012b47bd3045e0d07154f97ba71", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -56,7 +56,7 @@ pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PredicateObligation<'_>, 32);\n \n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "b2b969e9b34e87adc9b6b4371d4ace405510adee", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -40,7 +40,7 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(InterpErrorInfo<'_>, 8);\n \n /// Packages the kind of error we got from the const code interpreter\n@@ -444,7 +444,7 @@ impl dyn MachineStopType {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(InterpError<'_>, 72);\n \n pub enum InterpError<'tcx> {"}, {"sha": "a07ccd4d2b5285e2a3fb2dbff373b09b94b56089", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -44,7 +44,7 @@ pub enum ConstValue<'tcx> {\n     },\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(ConstValue<'_>, 32);\n \n impl<'tcx> ConstValue<'tcx> {\n@@ -111,7 +111,7 @@ pub enum Scalar<Tag = ()> {\n     Ptr(Pointer<Tag>),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Scalar, 24);\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n@@ -509,7 +509,7 @@ pub enum ScalarMaybeUninit<Tag = ()> {\n     Uninit,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(ScalarMaybeUninit, 24);\n \n impl<Tag> From<Scalar<Tag>> for ScalarMaybeUninit<Tag> {"}, {"sha": "17117c5d85c2f33f6a084598ed4a2f56d76a721f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -951,7 +951,7 @@ pub struct LocalDecl<'tcx> {\n }\n \n // `LocalDecl` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(LocalDecl<'_>, 56);\n \n /// Extra information about a some locals that's used for diagnostics and for\n@@ -1468,7 +1468,7 @@ pub struct Statement<'tcx> {\n }\n \n // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Statement<'_>, 32);\n \n impl Statement<'_> {\n@@ -1752,7 +1752,7 @@ impl<V, T> ProjectionElem<V, T> {\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n \n // At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PlaceElem<'_>, 24);\n \n /// Alias for projections as they appear in `UserTypeProjection`, where we"}, {"sha": "0682ab62d0881a0166959050b30fd54af8e3e1c5", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -17,7 +17,7 @@ pub struct PlaceTy<'tcx> {\n }\n \n // At least on 64 bit systems, `PlaceTy` should not be larger than two or three pointers.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PlaceTy<'_>, 16);\n \n impl<'tcx> PlaceTy<'tcx> {"}, {"sha": "0bd0a701fb2e7aa2ebd2693130e377fe7ac0b858", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -340,7 +340,7 @@ impl ObligationCauseCode<'_> {\n }\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(ObligationCauseCode<'_>, 32);\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "e7b2c9efd63cfa23da83525a5d4b694a76a55aad", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -23,7 +23,7 @@ pub struct Const<'tcx> {\n     pub val: ConstKind<'tcx>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Const<'_>, 48);\n \n impl<'tcx> Const<'tcx> {"}, {"sha": "98c215407a8e037685c150a8751b98b6f68fa352", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -37,7 +37,7 @@ pub enum ConstKind<'tcx> {\n     Error(ty::DelaySpanBugEmitted),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(ConstKind<'_>, 40);\n \n impl<'tcx> ConstKind<'tcx> {"}, {"sha": "6b9186d476b697592192acbdb545b3024e54959e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -483,7 +483,7 @@ impl<'tcx> TyS<'tcx> {\n }\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(TyS<'_>, 32);\n \n impl<'tcx> Ord for TyS<'tcx> {\n@@ -1030,7 +1030,7 @@ crate struct PredicateInner<'tcx> {\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PredicateInner<'_>, 40);\n \n #[derive(Clone, Copy, Lift)]"}, {"sha": "2cd969d7a16abfe32d7b740bbfc9ad2f45c3aa75", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -231,7 +231,7 @@ impl TyKind<'tcx> {\n }\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(TyKind<'_>, 24);\n \n /// A closure can be modeled as a struct that looks like:"}, {"sha": "2c4aba19e4a2ee221984ca8c8a0ebceacbca0b07", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -32,7 +32,7 @@ pub enum Immediate<Tag = ()> {\n     ScalarPair(ScalarMaybeUninit<Tag>, ScalarMaybeUninit<Tag>),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Immediate, 56);\n \n impl<Tag> From<ScalarMaybeUninit<Tag>> for Immediate<Tag> {\n@@ -95,7 +95,7 @@ pub struct ImmTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n \n impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n@@ -162,7 +162,7 @@ pub struct OpTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(OpTy<'_, ()>, 80);\n \n impl<'tcx, Tag> std::ops::Deref for OpTy<'tcx, Tag> {"}, {"sha": "7ba79e6f759891fe54ec58c5ac6ff98552b5e60c", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -33,7 +33,7 @@ pub enum MemPlaceMeta<Tag = ()> {\n     Poison,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);\n \n impl<Tag> MemPlaceMeta<Tag> {\n@@ -74,7 +74,7 @@ pub struct MemPlace<Tag = ()> {\n     pub meta: MemPlaceMeta<Tag>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(MemPlace, 56);\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -87,7 +87,7 @@ pub enum Place<Tag = ()> {\n     Local { frame: usize, local: mir::Local },\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Place, 64);\n \n #[derive(Copy, Clone, Debug)]\n@@ -96,7 +96,7 @@ pub struct PlaceTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PlaceTy<'_>, 80);\n \n impl<'tcx, Tag> std::ops::Deref for PlaceTy<'tcx, Tag> {\n@@ -114,7 +114,7 @@ pub struct MPlaceTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 72);\n \n impl<'tcx, Tag> std::ops::Deref for MPlaceTy<'tcx, Tag> {"}, {"sha": "ce0098fdf860bc2e93679b75d4cde20dae41c5c8", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -96,7 +96,7 @@ crate enum StmtKind<'tcx> {\n }\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Expr<'_>, 168);\n \n /// The Thir trait implementor lowers their expressions (`&'tcx H::Expr`)"}, {"sha": "aea3d8eef65d090721496d021441f7af7d07d8c6", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -23,7 +23,7 @@\n \n #[macro_use]\n extern crate rustc_macros;\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n #[macro_use]\n extern crate rustc_data_structures;\n #[macro_use]"}, {"sha": "7d451fc234106e7d966623763a671144d19bb69a", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -87,7 +87,7 @@ pub struct PendingPredicateObligation<'tcx> {\n }\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PendingPredicateObligation<'_>, 56);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {"}, {"sha": "33cc26410363a965c839d3a0bcd11a89ec5dedcf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95e096d6237298f523e5566be87684d208f7d128/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e096d6237298f523e5566be87684d208f7d128/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=95e096d6237298f523e5566be87684d208f7d128", "patch": "@@ -93,7 +93,7 @@ crate struct Item {\n }\n \n // `Item` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Item, 48);\n \n impl fmt::Debug for Item {"}]}