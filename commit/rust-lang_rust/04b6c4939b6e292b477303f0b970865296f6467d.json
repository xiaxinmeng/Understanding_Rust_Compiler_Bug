{"sha": "04b6c4939b6e292b477303f0b970865296f6467d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjZjNDkzOWI2ZTI5MmI0NzczMDNmMGI5NzA4NjUyOTZmNjQ2N2Q=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-01-04T11:08:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-01-05T17:40:35Z"}, "message": "[MIR] Handle overloaded call expressions during HIR -> HAIR translation.", "tree": {"sha": "3d00a679e271dc2387883ddd118e655e4a202116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d00a679e271dc2387883ddd118e655e4a202116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b6c4939b6e292b477303f0b970865296f6467d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b6c4939b6e292b477303f0b970865296f6467d", "html_url": "https://github.com/rust-lang/rust/commit/04b6c4939b6e292b477303f0b970865296f6467d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b6c4939b6e292b477303f0b970865296f6467d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5253294d222fe725fbbae1052d110f7eaa4ae10e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5253294d222fe725fbbae1052d110f7eaa4ae10e", "html_url": "https://github.com/rust-lang/rust/commit/5253294d222fe725fbbae1052d110f7eaa4ae10e"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "aa6257345fe445a31a147ce12cc2619315306826", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04b6c4939b6e292b477303f0b970865296f6467d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b6c4939b6e292b477303f0b970865296f6467d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=04b6c4939b6e292b477303f0b970865296f6467d", "patch": "@@ -46,6 +46,26 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 }\n             }\n \n+            hir::ExprCall(ref fun, ref args) => {\n+                if cx.tcx.is_method_call(self.id) {\n+                    // The callee is something implementing Fn, FnMut, or FnOnce.\n+                    // Find the actual method implementation being called and\n+                    // build the appropriate UFCS call expression with the\n+                    // callee-object as self parameter.\n+\n+                    let method = method_callee(cx, self, ty::MethodCall::expr(self.id));\n+                    let mut argrefs = vec![fun.to_ref()];\n+                    argrefs.extend(args.iter().map(|a| a.to_ref()));\n+\n+                    ExprKind::Call {\n+                        fun: method.to_ref(),\n+                        args: argrefs,\n+                    }\n+                } else {\n+                    ExprKind::Call { fun: fun.to_ref(), args: args.to_ref() }\n+                }\n+            }\n+\n             hir::ExprAddrOf(mutbl, ref expr) => {\n                 let region = match expr_ty.sty {\n                     ty::TyRef(r, _) => r,\n@@ -328,8 +348,6 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 ExprKind::Vec { fields: fields.to_ref() },\n             hir::ExprTup(ref fields) =>\n                 ExprKind::Tuple { fields: fields.to_ref() },\n-            hir::ExprCall(ref fun, ref args) =>\n-                ExprKind::Call { fun: fun.to_ref(), args: args.to_ref() },\n         };\n \n         let temp_lifetime = cx.tcx.region_maps.temporary_scope(self.id);"}, {"sha": "1ce0618daf36ab1258c5c25b31ebe91ac9a5c124", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/04b6c4939b6e292b477303f0b970865296f6467d/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b6c4939b6e292b477303f0b970865296f6467d/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=04b6c4939b6e292b477303f0b970865296f6467d", "patch": "@@ -93,6 +93,19 @@ fn test8() -> isize {\n     Two::two()\n }\n \n+#[rustc_mir]\n+fn test_fn_impl(f: &&Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+    // This call goes through the Fn implementation for &Fn provided in\n+    // core::ops::impls. It expands to a static Fn::call() that calls the\n+    // Fn::call() implemenation of the object shim underneath.\n+    f(x, y)\n+}\n+\n+#[rustc_mir]\n+fn test_fn_object(f: &Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+    f(x, y)\n+}\n+\n fn main() {\n     assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n     assert_eq!(test2(98), 98);\n@@ -103,4 +116,8 @@ fn main() {\n     // assert_eq!(test6(&Foo, 12367), 12367);\n     assert_eq!(test7(), 1);\n     assert_eq!(test8(), 2);\n+\n+    let function_object = (&|x: i32, y: i32| { x + y }) as &Fn(i32, i32) -> i32;\n+    assert_eq!(test_fn_object(function_object, 100, 1), 101);\n+    assert_eq!(test_fn_impl(&function_object, 100, 2), 102);\n }"}]}