{"sha": "7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "node_id": "C_kwDOAAsO6NoAKDdhNjI2Y2Y3Y2U5MDhhMWMyMTBjYzkxYTA0M2M0YzRhMjNkNDJiNjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T07:16:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T07:16:26Z"}, "message": "Rollup merge of #89090 - cjgillot:bare-dyn, r=jackh726\n\nLint bare traits in AstConv.\n\nRemoving the lint from lowering allows to:\n- make lowering querification easier;\n- have the lint implementation in only one place.\n\nr? `@estebank`", "tree": {"sha": "fd9ed91ad999c74c2ea5aebf82ef2c0fc4e5b659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9ed91ad999c74c2ea5aebf82ef2c0fc4e5b659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvYrKCRBK7hj4Ov3rIwAAwtMIACoWG5gvK01KjPhE6fqCYcR7\njOiHsHjK594/g2bu32vr++JIVwWKGFHGHkv7DXurAzMajncvwcdrt3IwxVtjwCHF\nXSARlrCZ8YMwjvWgZPVNbIKdMTXK7PIOi31U/9LH2MvRhV5oz7tSywnSzBM/S5NN\ni99rIqBxuGZ3IaLBoB24oaKCfqbQOWAAGD1DKtuTgymMdCkqWbbu4cKg9aUHI+sf\nYfOjDtdU+IyiW5pNd2pQSw/tZbKHgPXzyfj69hIAuc7Ihr0N3VKoDoJIRcaZ7GJX\nWmyZak9iVIAiWNQ1FqiPJiJNXRRLPFe9/9Ddffr3uvICMPpL6UPjabS4/Tb/OzU=\n=D+05\n-----END PGP SIGNATURE-----\n", "payload": "tree fd9ed91ad999c74c2ea5aebf82ef2c0fc4e5b659\nparent 54e7946d0fde56ea25b331df8d971bed0d232cac\nparent 6fcbc3a3238ac6f914b788fc49876a0becd31969\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639811786 +0100\ncommitter GitHub <noreply@github.com> 1639811786 +0100\n\nRollup merge of #89090 - cjgillot:bare-dyn, r=jackh726\n\nLint bare traits in AstConv.\n\nRemoving the lint from lowering allows to:\n- make lowering querification easier;\n- have the lint implementation in only one place.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "html_url": "https://github.com/rust-lang/rust/commit/7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e7946d0fde56ea25b331df8d971bed0d232cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e7946d0fde56ea25b331df8d971bed0d232cac", "html_url": "https://github.com/rust-lang/rust/commit/54e7946d0fde56ea25b331df8d971bed0d232cac"}, {"sha": "6fcbc3a3238ac6f914b788fc49876a0becd31969", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcbc3a3238ac6f914b788fc49876a0becd31969", "html_url": "https://github.com/rust-lang/rust/commit/6fcbc3a3238ac6f914b788fc49876a0becd31969"}], "stats": {"total": 1051, "additions": 731, "deletions": 320}, "files": [{"sha": "77738b2c5cc75dce4969cea76fa81cee12ec31e5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -46,7 +46,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n@@ -55,11 +55,9 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n-use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::lint::LintBuffer;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -1184,11 +1182,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::Ty<'hir> {\n         let id = self.lower_node_id(t.id);\n         let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n-        let ty = self.ty_path(id, t.span, qpath);\n-        if let hir::TyKind::TraitObject(..) = ty.kind {\n-            self.maybe_lint_bare_trait(t.span, t.id, qself.is_none() && path.is_global());\n-        }\n-        ty\n+        self.ty_path(id, t.span, qpath)\n     }\n \n     fn ty(&mut self, span: Span, kind: hir::TyKind<'hir>) -> hir::Ty<'hir> {\n@@ -1285,9 +1279,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         lifetime_bound.unwrap_or_else(|| this.elided_dyn_bound(t.span));\n                     (bounds, lifetime_bound)\n                 });\n-                if kind != TraitObjectSyntax::Dyn {\n-                    self.maybe_lint_bare_trait(t.span, t.id, false);\n-                }\n                 hir::TyKind::TraitObject(bounds, lifetime_bound, kind)\n             }\n             TyKind::ImplTrait(def_node_id, ref bounds) => {\n@@ -2380,39 +2371,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             name: hir::LifetimeName::Implicit(missing),\n         }\n     }\n-\n-    fn maybe_lint_bare_trait(&mut self, span: Span, id: NodeId, is_global: bool) {\n-        // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n-        // call site which do not have a macro backtrace. See #61963.\n-        let is_macro_callsite = self\n-            .sess\n-            .source_map()\n-            .span_to_snippet(span)\n-            .map(|snippet| snippet.starts_with(\"#[\"))\n-            .unwrap_or(true);\n-        if !is_macro_callsite {\n-            if span.edition() < Edition::Edition2021 {\n-                self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                    BARE_TRAIT_OBJECTS,\n-                    id,\n-                    span,\n-                    \"trait objects without an explicit `dyn` are deprecated\",\n-                    BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n-                )\n-            } else {\n-                let msg = \"trait objects must include the `dyn` keyword\";\n-                let label = \"add `dyn` keyword before this trait\";\n-                let mut err = struct_span_err!(self.sess, span, E0782, \"{}\", msg,);\n-                err.span_suggestion_verbose(\n-                    span.shrink_to_lo(),\n-                    label,\n-                    String::from(\"dyn \"),\n-                    Applicability::MachineApplicable,\n-                );\n-                err.emit();\n-            }\n-        }\n-    }\n }\n \n /// Helper struct for delayed construction of GenericArgs."}, {"sha": "ba1b8caa3684f6218036aad0607fd1bbcc7ad4a8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -633,16 +633,6 @@ pub trait LintContext: Sized {\n                     }\n                 },\n                 BuiltinLintDiagnostics::Normal => (),\n-                BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                    let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                        Ok(s) if is_global => {\n-                            (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                        }\n-                        Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                        Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                    };\n-                    db.span_suggestion(span, \"use `dyn`\", sugg, app);\n-                }\n                 BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n                     let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n                         Ok(ref s) => {"}, {"sha": "e22c9c68de6e625ded762303d1e3d361ce1ac1a8", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -285,7 +285,6 @@ pub enum ExternDepSpec {\n #[derive(PartialEq, Debug)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n-    BareTraitObject(Span, /* is_global */ bool),\n     AbsPathWithModule(Span),\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),"}, {"sha": "8db706c3709c1451767dd68a37bc67a53b9318e9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -13,6 +13,7 @@ use crate::errors::{\n };\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n+use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, ErrorReported, FatalError};\n use rustc_hir as hir;\n@@ -24,7 +25,8 @@ use rustc_hir::{GenericArg, GenericArgs};\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n-use rustc_session::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n+use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n+use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -2266,13 +2268,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Parses the programmer's textual representation of a type into our\n     /// internal notion of a type.\n     pub fn ast_ty_to_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n-        self.ast_ty_to_ty_inner(ast_ty, false)\n+        self.ast_ty_to_ty_inner(ast_ty, false, false)\n+    }\n+\n+    /// Parses the programmer's textual representation of a type into our\n+    /// internal notion of a type.  This is meant to be used within a path.\n+    pub fn ast_ty_to_ty_in_path(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n+        self.ast_ty_to_ty_inner(ast_ty, false, true)\n     }\n \n     /// Turns a `hir::Ty` into a `Ty`. For diagnostics' purposes we keep track of whether trait\n     /// objects are borrowed like `&dyn Trait` to avoid emitting redundant errors.\n     #[tracing::instrument(level = \"debug\", skip(self))]\n-    fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool) -> Ty<'tcx> {\n+    fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool, in_path: bool) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n         let result_ty = match ast_ty.kind {\n@@ -2283,7 +2291,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::Rptr(ref region, ref mt) => {\n                 let r = self.ast_region_to_region(region, None);\n                 debug!(?r);\n-                let t = self.ast_ty_to_ty_inner(mt.ty, true);\n+                let t = self.ast_ty_to_ty_inner(mt.ty, true, false);\n                 tcx.mk_ref(r, ty::TypeAndMut { ty: t, mutbl: mt.mutbl })\n             }\n             hir::TyKind::Never => tcx.types.never,\n@@ -2302,6 +2310,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ))\n             }\n             hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n+                self.maybe_lint_bare_trait(ast_ty, in_path);\n                 self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(ref maybe_qself, ref path)) => {\n@@ -2329,7 +2338,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(?qself, ?segment);\n-                let ty = self.ast_ty_to_ty(qself);\n+                let ty = self.ast_ty_to_ty_inner(qself, false, true);\n \n                 let res = if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = qself.kind {\n                     path.res\n@@ -2586,4 +2595,62 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n         Some(r)\n     }\n+\n+    fn maybe_lint_bare_trait(&self, self_ty: &hir::Ty<'_>, in_path: bool) {\n+        let tcx = self.tcx();\n+        if let hir::TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n+            self_ty.kind\n+        {\n+            let needs_bracket = in_path\n+                && !tcx\n+                    .sess\n+                    .source_map()\n+                    .span_to_prev_source(self_ty.span)\n+                    .ok()\n+                    .map_or(false, |s| s.trim_end().ends_with('<'));\n+\n+            let is_global = poly_trait_ref.trait_ref.path.is_global();\n+            let sugg = Vec::from_iter([\n+                (\n+                    self_ty.span.shrink_to_lo(),\n+                    format!(\n+                        \"{}dyn {}\",\n+                        if needs_bracket { \"<\" } else { \"\" },\n+                        if is_global { \"(\" } else { \"\" },\n+                    ),\n+                ),\n+                (\n+                    self_ty.span.shrink_to_hi(),\n+                    format!(\n+                        \"{}{}\",\n+                        if is_global { \")\" } else { \"\" },\n+                        if needs_bracket { \">\" } else { \"\" },\n+                    ),\n+                ),\n+            ]);\n+            if self_ty.span.edition() >= Edition::Edition2021 {\n+                let msg = \"trait objects must include the `dyn` keyword\";\n+                let label = \"add `dyn` keyword before this trait\";\n+                rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg)\n+                    .multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable)\n+                    .emit();\n+            } else {\n+                let msg = \"trait objects without an explicit `dyn` are deprecated\";\n+                tcx.struct_span_lint_hir(\n+                    BARE_TRAIT_OBJECTS,\n+                    self_ty.hir_id,\n+                    self_ty.span,\n+                    |lint| {\n+                        lint.build(msg)\n+                            .multipart_suggestion_verbose(\n+                                \"use `dyn`\",\n+                                sugg,\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n }"}, {"sha": "67630fd4e582bd24c1084df4ed781f40f082beab", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -6,15 +6,14 @@ use crate::check::callee::{self, DeferredCallResolution};\n use crate::check::method::{self, MethodCallee, SelfSource};\n use crate::check::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy};\n \n-use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, GenericArg, Node, QPath, TyKind};\n+use rustc_hir::{ExprKind, GenericArg, Node, QPath};\n use rustc_infer::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::{InferOk, InferResult};\n@@ -28,8 +27,6 @@ use rustc_middle::ty::{\n     Ty, UserType,\n };\n use rustc_session::lint;\n-use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -855,7 +852,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // to be object-safe.\n                 // We manually call `register_wf_obligation` in the success path\n                 // below.\n-                (<dyn AstConv<'_>>::ast_ty_to_ty(self, qself), qself, segment)\n+                (<dyn AstConv<'_>>::ast_ty_to_ty_in_path(self, qself), qself, segment)\n             }\n             QPath::LangItem(..) => {\n                 bug!(\"`resolve_ty_and_res_fully_qualified_call` called on `LangItem`\")\n@@ -901,7 +898,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n \n         if result.is_ok() {\n-            self.maybe_lint_bare_trait(qpath, hir_id, span);\n             self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n         }\n \n@@ -914,56 +910,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId, span: Span) {\n-        if let QPath::TypeRelative(self_ty, _) = qpath {\n-            if let TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n-                self_ty.kind\n-            {\n-                let msg = \"trait objects without an explicit `dyn` are deprecated\";\n-                let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span) {\n-                    Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n-                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                    }\n-                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                // Wrap in `<..>` if it isn't already.\n-                let sugg = match self.tcx.sess.source_map().span_to_snippet(span) {\n-                    Ok(s) if s.starts_with('<') => sugg,\n-                    _ => format!(\"<{}>\", sugg),\n-                };\n-                let sugg_label = \"use `dyn`\";\n-                if self.sess().edition() >= Edition::Edition2021 {\n-                    let mut err = rustc_errors::struct_span_err!(\n-                        self.sess(),\n-                        self_ty.span,\n-                        E0782,\n-                        \"{}\",\n-                        msg,\n-                    );\n-                    err.span_suggestion(\n-                        self_ty.span,\n-                        sugg_label,\n-                        sugg,\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-                } else {\n-                    self.tcx.struct_span_lint_hir(\n-                        BARE_TRAIT_OBJECTS,\n-                        hir_id,\n-                        self_ty.span,\n-                        |lint| {\n-                            let mut db = lint.build(msg);\n-                            db.span_suggestion(self_ty.span, sugg_label, sugg, app);\n-                            db.emit()\n-                        },\n-                    );\n-                }\n-            }\n-        }\n-    }\n-\n     /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n     pub(in super::super) fn get_node_fn_decl(\n         &self,"}, {"sha": "c40d99c9d4c3d70741e47be5c45f39724316a31d", "filename": "src/test/rustdoc-ui/display-output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -10,6 +10,6 @@\n /// #![warn(unused)]\n /// let x = 12;\n ///\n-/// fn foo(x: &std::fmt::Display) {}\n+/// fn foo(x: &dyn std::fmt::Display) {}\n /// ```\n pub fn foo() {}"}, {"sha": "41c1f41f2cfc8d3d9e9c27af5b40f3b8616440dd", "filename": "src/test/rustdoc-ui/display-output.stdout", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -5,16 +5,6 @@ test $DIR/display-output.rs - foo (line 9) ... ok\n successes:\n \n ---- $DIR/display-output.rs - foo (line 9) stdout ----\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/display-output.rs:13:12\n-   |\n-LL | fn foo(x: &std::fmt::Display) {}\n-   |            ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn std::fmt::Display`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n warning: unused variable: `x`\n   --> $DIR/display-output.rs:11:5\n    |\n@@ -31,13 +21,13 @@ LL | #![warn(unused)]\n warning: unused variable: `x`\n   --> $DIR/display-output.rs:13:8\n    |\n-LL | fn foo(x: &std::fmt::Display) {}\n+LL | fn foo(x: &dyn std::fmt::Display) {}\n    |        ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n warning: function is never used: `foo`\n   --> $DIR/display-output.rs:13:4\n    |\n-LL | fn foo(x: &std::fmt::Display) {}\n+LL | fn foo(x: &dyn std::fmt::Display) {}\n    |    ^^^\n    |\n note: the lint level is defined here\n@@ -47,7 +37,7 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n-warning: 4 warnings emitted\n+warning: 3 warnings emitted\n \n \n "}, {"sha": "e12e07a28e76363b03b0c796205582a56b0bf404", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -12,8 +12,6 @@ fn b() {\n     //~^ ERROR expected trait, found constant `BAR`\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n-    //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "d9bcc523b1fc46c454caf69567598dba6e0d3671", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -10,7 +10,7 @@ LL |     foo::<{ BAR + 3 }>();\n    |           +         +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:19:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:17:11\n    |\n LL |     foo::<3 + 3>();\n    |           ^^^^^\n@@ -21,7 +21,7 @@ LL |     foo::<{ 3 + 3 }>();\n    |           +       +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:22:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:20:15\n    |\n LL |     foo::<BAR - 3>();\n    |               ^ expected one of `,` or `>`\n@@ -32,7 +32,7 @@ LL |     foo::<{ BAR - 3 }>();\n    |           +         +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:25:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:23:15\n    |\n LL |     foo::<BAR - BAR>();\n    |               ^ expected one of `,` or `>`\n@@ -43,7 +43,7 @@ LL |     foo::<{ BAR - BAR }>();\n    |           +           +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:28:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:26:11\n    |\n LL |     foo::<100 - BAR>();\n    |           ^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     foo::<{ 100 - BAR }>();\n    |           +           +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:31:19\n+  --> $DIR/const-expression-suggest-missing-braces.rs:29:19\n    |\n LL |     foo::<bar<i32>()>();\n    |                   ^ expected one of `,` or `>`\n@@ -65,7 +65,7 @@ LL |     foo::<{ bar<i32>() }>();\n    |           +            +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:34:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:32:21\n    |\n LL |     foo::<bar::<i32>()>();\n    |                     ^ expected one of `,` or `>`\n@@ -76,7 +76,7 @@ LL |     foo::<{ bar::<i32>() }>();\n    |           +              +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:37:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:35:21\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -87,7 +87,7 @@ LL |     foo::<{ bar::<i32>() + BAR }>();\n    |           +                    +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:40:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:38:21\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -98,7 +98,7 @@ LL |     foo::<{ bar::<i32>() - BAR }>();\n    |           +                    +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:43:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:41:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -109,7 +109,7 @@ LL |     foo::<{ BAR - bar::<i32>() }>();\n    |           +                    +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:46:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:44:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -131,23 +131,13 @@ error[E0404]: expected trait, found constant `BAR`\n LL |     foo::<BAR + BAR>();\n    |                 ^^^ not a trait\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/const-expression-suggest-missing-braces.rs:11:11\n-   |\n-LL |     foo::<BAR + BAR>();\n-   |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0747]: type provided when a constant was expected\n   --> $DIR/const-expression-suggest-missing-braces.rs:11:11\n    |\n LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^\n \n-error: aborting due to 14 previous errors; 1 warning emitted\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0404, E0747.\n For more information about an error, try `rustc --explain E0404`."}, {"sha": "609a5b0de6b7e2c3ca7e374f5fd338b5e290672c", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -32,6 +32,8 @@ type G = dyn 'static + (Send)::AssocTy;\n // Recovery should not apply in this context.\n type H = Fn(u8) -> (u8)::Output;\n //~^ ERROR ambiguous associated type\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n macro_rules! ty {\n     ($ty: ty) => ($ty::AssocTy);"}, {"sha": "11514a28b2ca591394f48eb58de8c0ed388bcaec", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -41,13 +41,13 @@ LL | type G = dyn 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<dyn 'static + (Send)>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:44:10\n+  --> $DIR/bad-assoc-ty.rs:46:10\n    |\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: try: `<ty!()>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:37:19\n+  --> $DIR/bad-assoc-ty.rs:39:19\n    |\n LL |     ($ty: ty) => ($ty::AssocTy);\n    |                   ^^^^^^^^^^^^ help: try: `<$ty>::AssocTy`\n@@ -99,14 +99,28 @@ error[E0223]: ambiguous associated type\n LL | type G = dyn 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn Send + 'static) as Trait>::AssocTy`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bad-assoc-ty.rs:33:10\n+   |\n+LL | type H = Fn(u8) -> (u8)::Output;\n+   |          ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL | type H = <dyn Fn(u8) -> (u8)>::Output;\n+   |          ++++               +\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:33:10\n    |\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn Fn(u8) -> u8 + 'static) as Trait>::Output`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:37:19\n+  --> $DIR/bad-assoc-ty.rs:39:19\n    |\n LL |     ($ty: ty) => ($ty::AssocTy);\n    |                   ^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n@@ -117,13 +131,13 @@ LL | type J = ty!(u8);\n    = note: this error originates in the macro `ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:44:10\n+  --> $DIR/bad-assoc-ty.rs:46:10\n    |\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:49:13\n+  --> $DIR/bad-assoc-ty.rs:51:13\n    |\n LL | fn foo<X: K<_, _>>(x: X) {}\n    |             ^  ^ not allowed in type signatures\n@@ -136,7 +150,7 @@ LL | fn foo<X: K<T, T>, T>(x: X) {}\n    |             ~  ~ +++\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:52:34\n+  --> $DIR/bad-assoc-ty.rs:54:34\n    |\n LL | fn bar<F>(_: F) where F: Fn() -> _ {}\n    |                                  ^ not allowed in type signatures\n@@ -147,7 +161,7 @@ LL | fn bar<F, T>(_: F) where F: Fn() -> T {}\n    |         +++                         ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:55:19\n+  --> $DIR/bad-assoc-ty.rs:57:19\n    |\n LL | fn baz<F: Fn() -> _>(_: F) {}\n    |                   ^ not allowed in type signatures\n@@ -158,7 +172,7 @@ LL | fn baz<F: Fn() -> T, T>(_: F) {}\n    |                   ~+++\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/bad-assoc-ty.rs:58:33\n+  --> $DIR/bad-assoc-ty.rs:60:33\n    |\n LL | struct L<F>(F) where F: Fn() -> _;\n    |                                 ^ not allowed in type signatures\n@@ -169,7 +183,7 @@ LL | struct L<F, T>(F) where F: Fn() -> T;\n    |           +++                      ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/bad-assoc-ty.rs:60:30\n+  --> $DIR/bad-assoc-ty.rs:62:30\n    |\n LL | struct M<F> where F: Fn() -> _ {\n    |                              ^ not allowed in type signatures\n@@ -180,7 +194,7 @@ LL | struct M<F, T> where F: Fn() -> T {\n    |           +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for enums\n-  --> $DIR/bad-assoc-ty.rs:64:28\n+  --> $DIR/bad-assoc-ty.rs:66:28\n    |\n LL | enum N<F> where F: Fn() -> _ {\n    |                            ^ not allowed in type signatures\n@@ -191,7 +205,7 @@ LL | enum N<F, T> where F: Fn() -> T {\n    |         +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for unions\n-  --> $DIR/bad-assoc-ty.rs:69:29\n+  --> $DIR/bad-assoc-ty.rs:71:29\n    |\n LL | union O<F> where F: Fn() -> _ {\n    |                             ^ not allowed in type signatures\n@@ -202,7 +216,7 @@ LL | union O<F, T> where F: Fn() -> T {\n    |          +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for traits\n-  --> $DIR/bad-assoc-ty.rs:74:29\n+  --> $DIR/bad-assoc-ty.rs:76:29\n    |\n LL | trait P<F> where F: Fn() -> _ {\n    |                             ^ not allowed in type signatures\n@@ -213,7 +227,7 @@ LL | trait P<F, T> where F: Fn() -> T {\n    |          +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:79:38\n+  --> $DIR/bad-assoc-ty.rs:81:38\n    |\n LL |     fn foo<F>(_: F) where F: Fn() -> _ {}\n    |                                      ^ not allowed in type signatures\n@@ -223,7 +237,7 @@ help: use type parameters instead\n LL |     fn foo<F, T>(_: F) where F: Fn() -> T {}\n    |             +++                         ~\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 28 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0121, E0223.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "a074b5fa5f7aa88b442c24e53fe855c20af48c17", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -6,6 +6,14 @@ fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~| WARN this is accepted in the current edition\n     //~| ERROR trait objects without an explicit `dyn` are deprecated\n     //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let _x: &SomeTrait = todo!();\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n     //~| WARN this is accepted in the current edition"}, {"sha": "b8e4942dfefb241fce474c30e22fd582a3c86615", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 76, "deletions": 5, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,7 +2,7 @@ error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:17\n    |\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-   |                 ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                 ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/dyn-2018-edition-lint.rs:2:8\n@@ -11,24 +11,95 @@ LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n    |\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-   |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                                   ^^^^^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n \n error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/dyn-2018-edition-lint.rs:9:14\n+  --> $DIR/dyn-2018-edition-lint.rs:17:14\n    |\n LL |     let _x: &SomeTrait = todo!();\n-   |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |              ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     let _x: &SomeTrait = todo!();\n+LL +     let _x: &dyn SomeTrait = todo!();\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n \n-error: aborting due to 3 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "0f05d8753eaa58cbfde26b1baab1935cc2a56381", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -4,7 +4,6 @@ fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~^ ERROR trait objects must include the `dyn` keyword\n     //~| ERROR trait objects must include the `dyn` keyword\n     let _x: &SomeTrait = todo!();\n-    //~^ ERROR trait objects must include the `dyn` keyword\n }\n \n trait SomeTrait {}"}, {"sha": "b5bc359d7166d912bcb925889a48eb67ea192bc9", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,14 +1,3 @@\n-error[E0782]: trait objects must include the `dyn` keyword\n-  --> $DIR/dyn-2021-edition-error.rs:6:14\n-   |\n-LL |     let _x: &SomeTrait = todo!();\n-   |              ^^^^^^^^^\n-   |\n-help: add `dyn` keyword before this trait\n-   |\n-LL |     let _x: &dyn SomeTrait = todo!();\n-   |              +++\n-\n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:17\n    |\n@@ -17,8 +6,9 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |                 +++\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:35\n@@ -28,9 +18,10 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |                                   +++\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0782`."}, {"sha": "00069a3e7adb1c4135af4c2349d5b166c4eee915", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -15,8 +15,6 @@ impl fmt::Display for Foo {\n         <dyn fmt::Debug>::fmt(self, f)\n         //~^ ERROR trait objects without an explicit `dyn` are deprecated\n         //~| WARNING this is accepted in the current edition\n-        //~| ERROR trait objects without an explicit `dyn` are deprecated\n-        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "ee5fee4cfb8b4b8cc5d6ee4a59a1dc69b74c35a9", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -15,8 +15,6 @@ impl fmt::Display for Foo {\n         <fmt::Debug>::fmt(self, f)\n         //~^ ERROR trait objects without an explicit `dyn` are deprecated\n         //~| WARNING this is accepted in the current edition\n-        //~| ERROR trait objects without an explicit `dyn` are deprecated\n-        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "fd4030e96226b86516aaff36cce45be2c2a614fe", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,7 +2,7 @@ error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-angle-brackets.rs:15:10\n    |\n LL |         <fmt::Debug>::fmt(self, f)\n-   |          ^^^^^^^^^^ help: use `dyn`: `dyn fmt::Debug`\n+   |          ^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/dyn-angle-brackets.rs:4:9\n@@ -11,15 +11,11 @@ LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/dyn-angle-brackets.rs:15:10\n+help: use `dyn`\n    |\n-LL |         <fmt::Debug>::fmt(self, f)\n-   |          ^^^^^^^^^^ help: use `dyn`: `dyn fmt::Debug`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+LL -         <fmt::Debug>::fmt(self, f)\n+LL +         <dyn fmt::Debug>::fmt(self, f)\n+   | \n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "de0444b63e2670dbf84bdebdab259d415b285655", "filename": "src/test/ui/editions/dyn-trait-sugg-2021.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -3,10 +3,10 @@\n trait Foo<T> {}\n \n impl<T> dyn Foo<T> {\n-    fn hi(_x: T)  {}\n+    fn hi(_x: T) {}\n }\n \n fn main() {\n     Foo::hi(123);\n-    //~^ ERROR trait objects without an explicit `dyn` are deprecated\n+    //~^ ERROR trait objects must include the `dyn` keyword\n }"}, {"sha": "8c68dec1df7e407bca61289b95a4528222a26b06", "filename": "src/test/ui/editions/dyn-trait-sugg-2021.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,8 +1,13 @@\n-error[E0782]: trait objects without an explicit `dyn` are deprecated\n+error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-trait-sugg-2021.rs:10:5\n    |\n LL |     Foo::hi(123);\n-   |     ^^^ help: use `dyn`: `<dyn Foo>`\n+   |     ^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL |     <dyn Foo>::hi(123);\n+   |     ++++    +\n \n error: aborting due to previous error\n "}, {"sha": "f01da8c61ed1d8d47cfd4c861b57ecbc13e08c29", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -9,7 +9,5 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR: parenthesized generic arguments cannot be used\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n-  //~| WARNING: trait objects without an explicit `dyn` are deprecated\n-  //~| WARNING: this is accepted in the current edition\n \n fn main() {}"}, {"sha": "6014a02c4d96fb40f4e29cdbe325e0e8bd66b0c9", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -10,16 +10,6 @@ error: parenthesized generic arguments cannot be used in associated type constra\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:7:29\n-   |\n-LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n-   |                             ^^ help: use `dyn`: `dyn 'a`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n    |\n@@ -50,6 +40,6 @@ note: associated type defined here, with 0 generic parameters\n LL |   type Y<'a>;\n    |        ^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "1a6a7f46b2742da92b949c6d22b7782f0faadd6b", "filename": "src/test/ui/issues/issue-28344.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-28344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-28344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -4,8 +4,12 @@ fn main() {\n     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n     //~^ ERROR must be specified\n     //~| no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n \n     let g = BitXor::bitor;\n     //~^ ERROR must be specified\n     //~| no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "b1d1c01b27a3c483c70e8679159dfb19ce7901f3", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,3 +1,17 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-28344.rs:4:17\n+   |\n+LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n+   |                 ^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let x: u8 = <dyn BitXor>::bitor(0 as u8, 0 as u8);\n+   |                 ++++       +\n+\n error[E0191]: the value of the associated type `Output` (from trait `BitXor`) must be specified\n   --> $DIR/issue-28344.rs:4:17\n    |\n@@ -13,22 +27,35 @@ LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                         function or associated item not found in `dyn BitXor<_>`\n    |                         help: there is an associated function with a similar name: `bitxor`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-28344.rs:10:13\n+   |\n+LL |     let g = BitXor::bitor;\n+   |             ^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let g = <dyn BitXor>::bitor;\n+   |             ++++       +\n+\n error[E0191]: the value of the associated type `Output` (from trait `BitXor`) must be specified\n-  --> $DIR/issue-28344.rs:8:13\n+  --> $DIR/issue-28344.rs:10:13\n    |\n LL |     let g = BitXor::bitor;\n    |             ^^^^^^ help: specify the associated type: `BitXor<Output = Type>`\n \n error[E0599]: no function or associated item named `bitor` found for trait object `dyn BitXor<_>` in the current scope\n-  --> $DIR/issue-28344.rs:8:21\n+  --> $DIR/issue-28344.rs:10:21\n    |\n LL |     let g = BitXor::bitor;\n    |                     ^^^^^\n    |                     |\n    |                     function or associated item not found in `dyn BitXor<_>`\n    |                     help: there is an associated function with a similar name: `bitxor`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 2 warnings emitted\n \n Some errors have detailed explanations: E0191, E0599.\n For more information about an error, try `rustc --explain E0191`."}, {"sha": "c838fde5d73b6867e5a242634445b63c69aa1df0", "filename": "src/test/ui/issues/issue-58734.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -19,4 +19,6 @@ fn main() {\n     // no object safety error\n     Trait::nonexistent(());\n     //~^ ERROR no function or associated item named `nonexistent` found\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "a91a1b3778edbdd0e668276c901ea2ac60b89298", "filename": "src/test/ui/issues/issue-58734.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,9 +1,23 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-58734.rs:20:5\n+   |\n+LL |     Trait::nonexistent(());\n+   |     ^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn Trait>::nonexistent(());\n+   |     ++++      +\n+\n error[E0599]: no function or associated item named `nonexistent` found for trait object `dyn Trait` in the current scope\n   --> $DIR/issue-58734.rs:20:12\n    |\n LL |     Trait::nonexistent(());\n    |            ^^^^^^^^^^^ function or associated item not found in `dyn Trait`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "5b2f04ffa83093b1c3eaa773dc3e54b520cbd7f7", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -18,11 +18,16 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-86756.rs:5:15\n    |\n LL |     eq::<dyn, Foo>\n-   |               ^^^ help: use `dyn`: `dyn Foo`\n+   |               ^^^\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     eq::<dyn, Foo>\n+LL +     eq::<dyn, dyn Foo>\n+   | \n \n error[E0107]: missing generics for trait `Foo`\n   --> $DIR/issue-86756.rs:5:15"}, {"sha": "0e2294715cd8bb1762c950efa68ec354e445b750", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -21,4 +21,6 @@ fn main() {\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n     //~| WARN this is accepted in the current edition\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "4b8c2b539d55aefcf860691e462c950351c81e02", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,3 +1,17 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bare-trait-objects-path.rs:23:12\n+   |\n+LL |     let _: Dyn::Ty;\n+   |            ^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let _: <dyn Dyn>::Ty;\n+   |            ++++    +\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bare-trait-objects-path.rs:23:12\n    |\n@@ -8,30 +22,41 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:14:5\n    |\n LL |     Dyn::func();\n-   |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |     ^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn Dyn>::func();\n+   |     ++++    +\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:17:5\n    |\n LL |     ::Dyn::func();\n-   |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n+   |     ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn (::Dyn)>::func();\n+   |     ++++++     ++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:20:5\n    |\n LL |     Dyn::CONST;\n-   |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |     ^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn Dyn>::CONST;\n+   |     ++++    +\n \n-error: aborting due to previous error; 3 warnings emitted\n+error: aborting due to previous error; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0223`."}, {"sha": "631a8cb2f08cc0fae85cb64824aef2fe2e797101", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -10,5 +10,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "99d97ba52a0f23987a7a5e00a03b0f80daecfdc6", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "fdba7f4105e732fb7e5e6b4d722db6b078f68c4b", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -8,5 +8,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "90496ca7d2078439d8b5ad068837a5b0b96d81ce", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/cap-lints-allow.rs:8:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/cap-lints-allow.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/cap-lints-allow.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "7ad7462ddc55060dc0c13a520b9ec5795c87ed9d", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -8,5 +8,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "b6d36eaac44480b04a13310aab2cab520fda720d", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "ee5a18c38292bf700d4b5a4211dec5498344a0cf", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -10,5 +10,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "e8fdaa72cc0f653ce286cf7a5839ddf2ae25e463", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-lint-group.rs:10:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-lint-group.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-lint-group.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "248aece6fe77c8723aa40862cef2016960a4c7b7", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -10,5 +10,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "2de30d0c2f43d1f7c3115d495e3ce8238361e66a", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "29c12352146b54568aeac81d6a121978f2fa294a", "filename": "src/test/ui/parser/issues/issue-68890-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -3,5 +3,3 @@ fn main() {}\n type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n-//~| WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this is accepted in the current edition"}, {"sha": "d9fb7beebdb69e2191ecd93ccf88baf4f80e4641", "filename": "src/test/ui/parser/issues/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -4,22 +4,12 @@ error: `?` may only modify trait bounds, not lifetime bounds\n LL | type X<'a> = (?'a) +;\n    |               ^\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-68890-2.rs:3:14\n-   |\n-LL | type X<'a> = (?'a) +;\n-   |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-68890-2.rs:3:14\n    |\n LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0224`."}, {"sha": "5f731f8db775b97a48879bf14425a6e1fdbbc83a", "filename": "src/test/ui/parser/issues/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -13,11 +13,7 @@ mac!('a);\n // avoid false positives\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n-    //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n-    //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n }"}, {"sha": "799bc16bd6abfb61da04ca6a530dc5e98719eeed", "filename": "src/test/ui/parser/issues/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -22,37 +22,18 @@ LL | mac!('a);\n    = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found trait `Send`\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:19:28\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:17:28\n    |\n LL |     let z = y as &mut 'a + Send;\n    |                            ^^^^ not a value\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:14:18\n-   |\n-LL | fn y<'a>(y: &mut 'a + Send) {\n-   |                  ^^ help: use `dyn`: `dyn 'a`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:19:23\n-   |\n-LL |     let z = y as &mut 'a + Send;\n-   |                       ^^ help: use `dyn`: `dyn 'a`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-73568-lifetime-after-mut.rs:14:18\n    |\n LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^\n \n-error: aborting due to 5 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0178, E0224, E0423.\n For more information about an error, try `rustc --explain E0178`."}, {"sha": "560195977d03a91776673da99db60d48b1f9a70b", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -11,6 +11,4 @@ fn main() {\n     m!('static);\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n-    //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n }"}, {"sha": "40082564bad4c52a2ee9e4d7e98abd1dc69d88f2", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -4,22 +4,12 @@ error: lifetime in trait object type must be followed by `+`\n LL |     m!('static);\n    |        ^^^^^^^\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-macro-matcher.rs:11:8\n-   |\n-LL |     m!('static);\n-   |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-macro-matcher.rs:11:8\n    |\n LL |     m!('static);\n    |        ^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0224`."}, {"sha": "a852337b6fe454d30155e102101eaf484e0dc369", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -20,29 +20,16 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:8:16\n    |\n LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:13:16\n-   |\n-LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n+help: use `dyn`\n    |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:18:16\n-   |\n-LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+LL -     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+LL +     let _: Box<dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+   | \n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35\n@@ -55,6 +42,20 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + for<'a> Trait<'a> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/trait-object-trait-parens.rs:13:16\n+   |\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+LL +     let _: Box<dyn ?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   | \n+\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:13:47\n    |\n@@ -66,6 +67,20 @@ LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/trait-object-trait-parens.rs:18:16\n+   |\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+LL +     let _: Box<dyn for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   | \n+\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:18:36\n    |"}, {"sha": "a27c38452539cd408601ee8ff43d97625bc0157e", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -18,10 +18,20 @@ pub struct Qux<T>(T);\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n     //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n     //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "1eebd8d60ca90b43fe812e450e8e80a09df5aeb2", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 84, "deletions": 4, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,8 +1,8 @@\n error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-61963.rs:22:14\n+  --> $DIR/issue-61963.rs:28:14\n    |\n LL |     bar: Box<Bar>,\n-   |              ^^^ help: use `dyn`: `dyn Bar`\n+   |              ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-61963.rs:3:9\n@@ -11,15 +11,95 @@ LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     bar: Box<Bar>,\n+LL +     bar: Box<dyn Bar>,\n+   | \n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n    |\n LL | pub struct Foo {\n-   | ^^^ help: use `dyn`: `dyn pub`\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:28:14\n+   |\n+LL |     bar: Box<Bar>,\n+   |              ^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     bar: Box<Bar>,\n+LL +     bar: Box<dyn Bar>,\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:28:14\n+   |\n+LL |     bar: Box<Bar>,\n+   |              ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     bar: Box<Bar>,\n+LL +     bar: Box<dyn Bar>,\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:18:1\n+   |\n+LL | pub struct Foo {\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:18:1\n+   |\n+LL | pub struct Foo {\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:18:1\n+   |\n+LL | pub struct Foo {\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n \n-error: aborting due to 2 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "08f6d166d226f85f476df509fcf7e7a2b90d460b", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -2,11 +2,16 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/not-on-bare-trait.rs:7:12\n    |\n LL | fn foo(_x: Foo + Send) {\n-   |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n+   |            ^^^^^^^^^^\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn foo(_x: Foo + Send) {\n+LL + fn foo(_x: dyn Foo + Send) {\n+   | \n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}, {"sha": "158b5a9855752b126a189f45b788f730da0bc09c", "filename": "src/test/ui/unspecified-self-in-trait-ref.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.rs?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -9,12 +9,22 @@ pub trait Bar<X=usize, A=Self> {\n fn main() {\n     let a = Foo::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let b = Foo::<_>::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let c = Bar::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let d = Bar::<usize, _>::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let e = Bar::<usize>::lol();\n     //~^ ERROR must be explicitly specified\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "2ba921871577304f8aa6b0b486d3bf9d411697c2", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a626cf7ce908a1c210cc91a043c4c4a23d42b62/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=7a626cf7ce908a1c210cc91a043c4c4a23d42b62", "patch": "@@ -1,29 +1,95 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:10:13\n+   |\n+LL |     let a = Foo::lol();\n+   |             ^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let a = <dyn Foo>::lol();\n+   |             ++++    +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Foo<_>` in the current scope\n   --> $DIR/unspecified-self-in-trait-ref.rs:10:18\n    |\n LL |     let a = Foo::lol();\n    |                  ^^^ function or associated item not found in `dyn Foo<_>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:14:13\n+   |\n+LL |     let b = Foo::<_>::lol();\n+   |             ^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let b = <dyn Foo::<_>>::lol();\n+   |             ++++         +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Foo<_>` in the current scope\n-  --> $DIR/unspecified-self-in-trait-ref.rs:12:23\n+  --> $DIR/unspecified-self-in-trait-ref.rs:14:23\n    |\n LL |     let b = Foo::<_>::lol();\n    |                       ^^^ function or associated item not found in `dyn Foo<_>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:18:13\n+   |\n+LL |     let c = Bar::lol();\n+   |             ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let c = <dyn Bar>::lol();\n+   |             ++++    +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Bar<_, _>` in the current scope\n-  --> $DIR/unspecified-self-in-trait-ref.rs:14:18\n+  --> $DIR/unspecified-self-in-trait-ref.rs:18:18\n    |\n LL |     let c = Bar::lol();\n    |                  ^^^ function or associated item not found in `dyn Bar<_, _>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:22:13\n+   |\n+LL |     let d = Bar::<usize, _>::lol();\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let d = <dyn Bar::<usize, _>>::lol();\n+   |             ++++                +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Bar<usize, _>` in the current scope\n-  --> $DIR/unspecified-self-in-trait-ref.rs:16:30\n+  --> $DIR/unspecified-self-in-trait-ref.rs:22:30\n    |\n LL |     let d = Bar::<usize, _>::lol();\n    |                              ^^^ function or associated item not found in `dyn Bar<usize, _>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:26:13\n+   |\n+LL |     let e = Bar::<usize>::lol();\n+   |             ^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let e = <dyn Bar::<usize>>::lol();\n+   |             ++++             +\n+\n error[E0393]: the type parameter `A` must be explicitly specified\n-  --> $DIR/unspecified-self-in-trait-ref.rs:18:13\n+  --> $DIR/unspecified-self-in-trait-ref.rs:26:13\n    |\n LL | / pub trait Bar<X=usize, A=Self> {\n LL | |     fn foo(&self);\n@@ -35,7 +101,7 @@ LL |       let e = Bar::<usize>::lol();\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 5 warnings emitted\n \n Some errors have detailed explanations: E0393, E0599.\n For more information about an error, try `rustc --explain E0393`."}]}