{"sha": "ffe20d61d662fd5a32505a9b9f5258207351e00b", "node_id": "C_kwDOAAsO6NoAKGZmZTIwZDYxZDY2MmZkNWEzMjUwNWE5YjlmNTI1ODIwNzM1MWUwMGI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-27T12:07:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-13T17:18:23Z"}, "message": "Only keep one version of ImplicitSelfKind.", "tree": {"sha": "b51436b75df98c0be3b94b7f5e37b01d6cde814f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51436b75df98c0be3b94b7f5e37b01d6cde814f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe20d61d662fd5a32505a9b9f5258207351e00b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe20d61d662fd5a32505a9b9f5258207351e00b", "html_url": "https://github.com/rust-lang/rust/commit/ffe20d61d662fd5a32505a9b9f5258207351e00b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe20d61d662fd5a32505a9b9f5258207351e00b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "url": "https://api.github.com/repos/rust-lang/rust/commits/5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "html_url": "https://github.com/rust-lang/rust/commit/5338f5f1d4ad9c99706e5cb691f8d5bbac341262"}], "stats": {"total": 51, "additions": 13, "deletions": 38}, "files": [{"sha": "6fd67b07467852b99155f8c12e56fcbe462057c0", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=ffe20d61d662fd5a32505a9b9f5258207351e00b", "patch": "@@ -9,10 +9,7 @@ use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n     hir::place::PlaceBase,\n-    mir::{\n-        self, BindingForm, ClearCrossCrate, ImplicitSelfKind, Local, LocalDecl, LocalInfo,\n-        LocalKind, Location,\n-    },\n+    mir::{self, BindingForm, ClearCrossCrate, Local, LocalDecl, LocalInfo, LocalKind, Location},\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n@@ -312,7 +309,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     && !matches!(\n                         decl.local_info,\n                         Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n-                            ImplicitSelfKind::MutRef\n+                            hir::ImplicitSelfKind::MutRef\n                         ))))\n                     )\n                 {\n@@ -1074,7 +1071,7 @@ fn mut_borrow_of_mutable_ref(local_decl: &LocalDecl<'_>, local_name: Option<Symb\n             //\n             // Deliberately fall into this case for all implicit self types,\n             // so that we don't fall in to the next case with them.\n-            *kind == mir::ImplicitSelfKind::MutRef\n+            *kind == hir::ImplicitSelfKind::MutRef\n         }\n         _ if Some(kw::SelfLower) == local_name => {\n             // Otherwise, check if the name is the `self` keyword - in which case"}, {"sha": "037cbc1be9adf03cff6287cb6c5b5de3353a6541", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ffe20d61d662fd5a32505a9b9f5258207351e00b", "patch": "@@ -2661,7 +2661,7 @@ pub struct FnDecl<'hir> {\n }\n \n /// Represents what type of implicit self a function has, if any.\n-#[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum ImplicitSelfKind {\n     /// Represents a `fn x(self);`.\n     Imm,"}, {"sha": "9a6d34c8ddd30f7ab003996c8ae7f8c0a262b783", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ffe20d61d662fd5a32505a9b9f5258207351e00b", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n-use rustc_hir::{self, GeneratorKind};\n+use rustc_hir::{self, GeneratorKind, ImplicitSelfKind};\n use rustc_hir::{self as hir, HirId};\n use rustc_session::Session;\n use rustc_target::abi::{Size, VariantIdx};\n@@ -653,22 +653,6 @@ pub enum BindingForm<'tcx> {\n     RefForGuard,\n }\n \n-/// Represents what type of implicit self a function has, if any.\n-#[derive(Clone, Copy, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n-pub enum ImplicitSelfKind {\n-    /// Represents a `fn x(self);`.\n-    Imm,\n-    /// Represents a `fn x(mut self);`.\n-    Mut,\n-    /// Represents a `fn x(&self);`.\n-    ImmRef,\n-    /// Represents a `fn x(&mut self);`.\n-    MutRef,\n-    /// Represents when a function does not have a self argument or\n-    /// when a function has a `self: X` argument.\n-    None,\n-}\n-\n TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n \n mod binding_form_impl {"}, {"sha": "0d8a2968ec048c2a9dd00bbb093ffdbcd112cb84", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=ffe20d61d662fd5a32505a9b9f5258207351e00b", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{GeneratorKind, Node};\n+use rustc_hir::{GeneratorKind, ImplicitSelfKind, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n@@ -170,13 +170,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                         // Make sure that inferred closure args have no type span\n                         .and_then(|ty| if arg.pat.span != ty.span { Some(ty.span) } else { None });\n                     self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n-                        match fn_decl.implicit_self {\n-                            hir::ImplicitSelfKind::Imm => Some(ImplicitSelfKind::Imm),\n-                            hir::ImplicitSelfKind::Mut => Some(ImplicitSelfKind::Mut),\n-                            hir::ImplicitSelfKind::ImmRef => Some(ImplicitSelfKind::ImmRef),\n-                            hir::ImplicitSelfKind::MutRef => Some(ImplicitSelfKind::MutRef),\n-                            _ => None,\n-                        }\n+                        Some(fn_decl.implicit_self)\n                     } else {\n                         None\n                     };"}, {"sha": "887e6572930669053b7d5de98996d47255f8c0ed", "filename": "compiler/rustc_smir/src/mir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe20d61d662fd5a32505a9b9f5258207351e00b/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fmir.rs?ref=ffe20d61d662fd5a32505a9b9f5258207351e00b", "patch": "@@ -1,10 +1,10 @@\n+pub use crate::very_unstable::hir::ImplicitSelfKind;\n pub use crate::very_unstable::middle::mir::{\n     visit::MutVisitor, AggregateKind, AssertKind, BasicBlock, BasicBlockData, BinOp, BindingForm,\n     BlockTailInfo, Body, BorrowKind, CastKind, ClearCrossCrate, Constant, ConstantKind,\n-    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, ImplicitSelfKind,\n-    InlineAsmOperand, Local, LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource,\n-    NullOp, Operand, Place, PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue,\n-    Safety, SourceInfo, SourceScope, SourceScopeData, SourceScopeLocalData, Statement,\n-    StatementKind, UnOp, UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo,\n-    VarDebugInfoContents,\n+    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, InlineAsmOperand, Local,\n+    LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource, NullOp, Operand, Place,\n+    PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue, Safety, SourceInfo,\n+    SourceScope, SourceScopeData, SourceScopeLocalData, Statement, StatementKind, UnOp,\n+    UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo, VarDebugInfoContents,\n };"}]}