{"sha": "6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZmI4ZjUzZWUxY2IwOTAzZjlkZjdkMmZkYjM3YWQwNmQ3NDg1NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T19:12:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T19:12:17Z"}, "message": "Auto merge of #61100 - varkor:must_use-tuple-expr, r=cramertj\n\nApply #[must_use] lint to components of tuples\n\nFixes https://github.com/rust-lang/rust/issues/61061.", "tree": {"sha": "3d027e55bac5a596c40da879190e94e86ab82db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d027e55bac5a596c40da879190e94e86ab82db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "html_url": "https://github.com/rust-lang/rust/commit/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d286e9d0530bea8fb1ae24be3989baa9ea08eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d286e9d0530bea8fb1ae24be3989baa9ea08eb", "html_url": "https://github.com/rust-lang/rust/commit/61d286e9d0530bea8fb1ae24be3989baa9ea08eb"}, {"sha": "de2bf3a761db4510c7aae109ada58acbbc450fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2bf3a761db4510c7aae109ada58acbbc450fa7", "html_url": "https://github.com/rust-lang/rust/commit/de2bf3a761db4510c7aae109ada58acbbc450fa7"}], "stats": {"total": 178, "additions": 136, "deletions": 42}, "files": [{"sha": "d540b3f7e40a3c38ea251897a07ad11ab10e1a89", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 72, "deletions": 42, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::lint;\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::ty::adjustment;\n use rustc_data_structures::fx::FxHashMap;\n use lint::{LateContext, EarlyContext, LintContext, LintArray};\n@@ -47,43 +47,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             return;\n         }\n \n-        let t = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = if t.is_unit()\n-            || cx.tcx.is_ty_uninhabited_from(\n-                cx.tcx.hir().get_module_parent_by_hir_id(expr.hir_id), t)\n-        {\n-            true\n-        } else {\n-            match t.sty {\n-                ty::Adt(def, _) => check_must_use(cx, def.did, s.span, \"\", \"\"),\n-                ty::Opaque(def, _) => {\n-                    let mut must_use = false;\n-                    for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n-                        if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n-                            let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n-                            if check_must_use(cx, trait_ref.def_id, s.span, \"implementer of \", \"\") {\n-                                must_use = true;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                    must_use\n-                }\n-                ty::Dynamic(binder, _) => {\n-                    let mut must_use = false;\n-                    for predicate in binder.skip_binder().iter() {\n-                        if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n-                            if check_must_use(cx, trait_ref.def_id, s.span, \"\", \" trait object\") {\n-                                must_use = true;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                    must_use\n-                }\n-                _ => false,\n-            }\n-        };\n+        let ty = cx.tables.expr_ty(&expr);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\");\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -108,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             _ => None\n         };\n         if let Some(def_id) = maybe_def_id {\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \", \"\");\n+            fn_warned = check_must_use_def(cx, def_id, s.span, \"return value of \", \"\");\n         } else if type_permits_lack_of_use {\n             // We don't warn about unused unit or uninhabited types.\n             // (See https://github.com/rust-lang/rust/issues/43806 for details.)\n@@ -162,18 +127,83 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n \n-        fn check_must_use(\n+        // Returns whether an error has been emitted (and thus another does not need to be later).\n+        fn check_must_use_ty<'tcx>(\n+            cx: &LateContext<'_, 'tcx>,\n+            ty: Ty<'tcx>,\n+            expr: &hir::Expr,\n+            span: Span,\n+            descr_post_path: &str,\n+        ) -> bool {\n+            if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n+                cx.tcx.hir().get_module_parent_by_hir_id(expr.hir_id), ty)\n+            {\n+                return true;\n+            }\n+\n+            match ty.sty {\n+                ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", descr_post_path),\n+                ty::Opaque(def, _) => {\n+                    let mut has_emitted = false;\n+                    for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n+                        if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n+                            let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n+                            let def_id = trait_ref.def_id;\n+                            if check_must_use_def(cx, def_id, span, \"implementer of \", \"\") {\n+                                has_emitted = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    has_emitted\n+                }\n+                ty::Dynamic(binder, _) => {\n+                    let mut has_emitted = false;\n+                    for predicate in binder.skip_binder().iter() {\n+                        if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+                            let def_id = trait_ref.def_id;\n+                            if check_must_use_def(cx, def_id, span, \"\", \" trait object\") {\n+                                has_emitted = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    has_emitted\n+                }\n+                ty::Tuple(ref tys) => {\n+                    let mut has_emitted = false;\n+                    let spans = if let hir::ExprKind::Tup(comps) = &expr.node {\n+                        debug_assert_eq!(comps.len(), tys.len());\n+                        comps.iter().map(|e| e.span).collect()\n+                    } else {\n+                        vec![]\n+                    };\n+                    for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n+                        let descr_post_path = &format!(\" in tuple element {}\", i);\n+                        let span = *spans.get(i).unwrap_or(&span);\n+                        if check_must_use_ty(cx, ty, expr, span, descr_post_path) {\n+                            has_emitted = true;\n+                        }\n+                    }\n+                    has_emitted\n+                }\n+                _ => false,\n+            }\n+        }\n+\n+        // Returns whether an error has been emitted (and thus another does not need to be later).\n+        fn check_must_use_def(\n             cx: &LateContext<'_, '_>,\n             def_id: DefId,\n-            sp: Span,\n+            span: Span,\n             descr_pre_path: &str,\n             descr_post_path: &str,\n         ) -> bool {\n             for attr in cx.tcx.get_attrs(def_id).iter() {\n                 if attr.check_name(sym::must_use) {\n                     let msg = format!(\"unused {}`{}`{} that must be used\",\n                         descr_pre_path, cx.tcx.def_path_str(def_id), descr_post_path);\n-                    let mut err = cx.struct_span_lint(UNUSED_MUST_USE, sp, &msg);\n+                    let mut err = cx.struct_span_lint(UNUSED_MUST_USE, span, &msg);\n                     // check for #[must_use = \"...\"]\n                     if let Some(note) = attr.value_str() {\n                         err.note(&note.as_str());"}, {"sha": "f6b579a7f35cfb672de9514f37e6230d38eee164", "filename": "src/test/ui/lint/must_use-tuple.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs?ref=6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "patch": "@@ -0,0 +1,17 @@\n+#![deny(unused_must_use)]\n+\n+fn foo() -> (Result<(), ()>, ()) {\n+    (Ok::<(), ()>(()), ())\n+}\n+\n+fn main() {\n+    (Ok::<(), ()>(()),); //~ ERROR unused `std::result::Result`\n+\n+    (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n+    //~^ ERROR unused `std::result::Result`\n+    //~^^ ERROR unused `std::result::Result`\n+\n+    foo(); //~ ERROR unused `std::result::Result`\n+\n+    ((Err::<(), ()>(()), ()), ()); //~ ERROR unused `std::result::Result`\n+}"}, {"sha": "45d2a439e52b0dde6cdd41d133a4814fe476b1d6", "filename": "src/test/ui/lint/must_use-tuple.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr?ref=6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "patch": "@@ -0,0 +1,47 @@\n+error: unused `std::result::Result` in tuple element 0 that must be used\n+  --> $DIR/must_use-tuple.rs:8:6\n+   |\n+LL |     (Ok::<(), ()>(()),);\n+   |      ^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/must_use-tuple.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this `Result` may be an `Err` variant, which should be handled\n+\n+error: unused `std::result::Result` in tuple element 0 that must be used\n+  --> $DIR/must_use-tuple.rs:10:6\n+   |\n+LL |     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n+   |      ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this `Result` may be an `Err` variant, which should be handled\n+\n+error: unused `std::result::Result` in tuple element 2 that must be used\n+  --> $DIR/must_use-tuple.rs:10:27\n+   |\n+LL |     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n+   |                           ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this `Result` may be an `Err` variant, which should be handled\n+\n+error: unused `std::result::Result` in tuple element 0 that must be used\n+  --> $DIR/must_use-tuple.rs:14:5\n+   |\n+LL |     foo();\n+   |     ^^^^^^\n+   |\n+   = note: this `Result` may be an `Err` variant, which should be handled\n+\n+error: unused `std::result::Result` in tuple element 0 that must be used\n+  --> $DIR/must_use-tuple.rs:16:6\n+   |\n+LL |     ((Err::<(), ()>(()), ()), ());\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this `Result` may be an `Err` variant, which should be handled\n+\n+error: aborting due to 5 previous errors\n+"}]}