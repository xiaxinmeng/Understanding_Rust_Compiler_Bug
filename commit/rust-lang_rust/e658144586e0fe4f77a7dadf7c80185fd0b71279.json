{"sha": "e658144586e0fe4f77a7dadf7c80185fd0b71279", "node_id": "C_kwDOAAsO6NoAKGU2NTgxNDQ1ODZlMGZlNGY3N2E3ZGFkZjdjODAxODVmZDBiNzEyNzk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T02:01:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-01T23:23:44Z"}, "message": "Rename `LitKind::to_token_lit` as `LitKind::synthesize_token_lit`.\n\nThis makes it clearer that it's not a lossless conversion, which I find\nhelpful.", "tree": {"sha": "f9a81b8ffbd8b03117b29893542368c0274b2d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a81b8ffbd8b03117b29893542368c0274b2d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e658144586e0fe4f77a7dadf7c80185fd0b71279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e658144586e0fe4f77a7dadf7c80185fd0b71279", "html_url": "https://github.com/rust-lang/rust/commit/e658144586e0fe4f77a7dadf7c80185fd0b71279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e658144586e0fe4f77a7dadf7c80185fd0b71279/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c090c6880c0183ba248bde4a16e29ba29ac4fbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c090c6880c0183ba248bde4a16e29ba29ac4fbba", "html_url": "https://github.com/rust-lang/rust/commit/c090c6880c0183ba248bde4a16e29ba29ac4fbba"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1ba4691467586bd6edfa817770173761e70aae6c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=e658144586e0fe4f77a7dadf7c80185fd0b71279", "patch": "@@ -328,7 +328,7 @@ pub fn mk_name_value_item_str(ident: Ident, str: Symbol, str_span: Span) -> Meta\n }\n \n pub fn mk_name_value_item(ident: Ident, kind: LitKind, lit_span: Span) -> MetaItem {\n-    let lit = MetaItemLit { token_lit: kind.to_token_lit(), kind, span: lit_span };\n+    let lit = MetaItemLit { token_lit: kind.synthesize_token_lit(), kind, span: lit_span };\n     let span = ident.span.to(lit_span);\n     MetaItem { path: Path::from_ident(ident), kind: MetaItemKind::NameValue(lit), span }\n }\n@@ -408,7 +408,7 @@ pub fn mk_attr_name_value_str(\n     val: Symbol,\n     span: Span,\n ) -> Attribute {\n-    let lit = LitKind::Str(val, StrStyle::Cooked).to_token_lit();\n+    let lit = LitKind::Str(val, StrStyle::Cooked).synthesize_token_lit();\n     let expr = P(Expr {\n         id: DUMMY_NODE_ID,\n         kind: ExprKind::Lit(lit),"}, {"sha": "5e6c94f1e6fc89bdabe6b70ade65bd368d62e5d9", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=e658144586e0fe4f77a7dadf7c80185fd0b71279", "patch": "@@ -142,10 +142,10 @@ impl LitKind {\n         })\n     }\n \n-    /// Attempts to recover a token from semantic literal.\n+    /// Synthesizes a token from a semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n-    pub fn to_token_lit(&self) -> token::Lit {\n+    pub fn synthesize_token_lit(&self) -> token::Lit {\n         let (kind, symbol, suffix) = match *self {\n             LitKind::Str(symbol, ast::StrStyle::Cooked) => {\n                 // Don't re-intern unless the escaped string is different."}, {"sha": "828b9d5ad5f68b1fb7a7a7582e3bac97f8d6ab08", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=e658144586e0fe4f77a7dadf7c80185fd0b71279", "patch": "@@ -323,7 +323,7 @@ impl<'a> State<'a> {\n                 self.print_token_literal(*token_lit, expr.span);\n             }\n             ast::ExprKind::IncludedBytes(bytes) => {\n-                let lit = ast::LitKind::ByteStr(bytes.clone()).to_token_lit();\n+                let lit = ast::LitKind::ByteStr(bytes.clone()).synthesize_token_lit();\n                 self.print_token_literal(lit, expr.span)\n             }\n             ast::ExprKind::Cast(expr, ty) => {"}, {"sha": "b56e1a24834f0b3536b9819107acf18bedd40411", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=e658144586e0fe4f77a7dadf7c80185fd0b71279", "patch": "@@ -333,7 +333,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n-        let token_lit = lit_kind.to_token_lit();\n+        let token_lit = lit_kind.synthesize_token_lit();\n         self.expr(span, ast::ExprKind::Lit(token_lit))\n     }\n "}, {"sha": "57f66758ef0055a83acad15ad25c8db8e6276415", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=e658144586e0fe4f77a7dadf7c80185fd0b71279", "patch": "@@ -526,7 +526,7 @@ impl server::TokenStream for Rustc<'_, '_> {\n                 Ok(tokenstream::TokenStream::token_alone(token::Literal(*token_lit), expr.span))\n             }\n             ast::ExprKind::IncludedBytes(bytes) => {\n-                let lit = ast::LitKind::ByteStr(bytes.clone()).to_token_lit();\n+                let lit = ast::LitKind::ByteStr(bytes.clone()).synthesize_token_lit();\n                 Ok(tokenstream::TokenStream::token_alone(token::TokenKind::Literal(lit), expr.span))\n             }\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {"}, {"sha": "10b2265c522a0a2aca551f054d0b90c2ec93c767", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e658144586e0fe4f77a7dadf7c80185fd0b71279/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e658144586e0fe4f77a7dadf7c80185fd0b71279", "patch": "@@ -1256,7 +1256,7 @@ impl<'a> State<'a> {\n \n     fn print_literal(&mut self, lit: &hir::Lit) {\n         self.maybe_print_comment(lit.span.lo());\n-        self.word(lit.node.to_token_lit().to_string())\n+        self.word(lit.node.synthesize_token_lit().to_string())\n     }\n \n     fn print_inline_asm(&mut self, asm: &hir::InlineAsm<'_>) {"}]}