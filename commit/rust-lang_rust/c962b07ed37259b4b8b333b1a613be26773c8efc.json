{"sha": "c962b07ed37259b4b8b333b1a613be26773c8efc", "node_id": "C_kwDOAAsO6NoAKGM5NjJiMDdlZDM3MjU5YjRiOGIzMzNiMWE2MTNiZTI2NzczYzhlZmM", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-11T16:30:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T16:30:54Z"}, "message": "Rollup merge of #106570 - Xaeroxe:div-duration-tests, r=JohnTitor\n\nadd tests for div_duration_* functions\n\nPer https://github.com/rust-lang/rust/issues/63139#issuecomment-817070719\n\nthis adds unit tests for the functions that will hopefully effectively demonstrate that `div_duration` is ready to be stabilized.", "tree": {"sha": "466a60547c97f89fdfaca2cbac001f81f1923f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/466a60547c97f89fdfaca2cbac001f81f1923f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c962b07ed37259b4b8b333b1a613be26773c8efc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvuQ+CRBK7hj4Ov3rIwAAbEcIAAZfOSEeZnjeAVATe1RCPBrN\nPpunaqwYJfGbm+VsPtxu0wf5aVI6WGv61H8gnolTU8FPNg59ESADbv09hbaNmyog\nskBGcqu0BZe4ViiUa0V8d9Oox+Y1grSLckKJW7Gd281saSeMhU/iyYk7+pkBJvxQ\nquMs/RLxz+rlK/Kpp8p53H7avt9ZHm/xBV25TXIHEsU9iBrjmL9cBVjLp8DQUgKf\nQNIqRe2LP/nNYSKIU4h1XyxbOdnxfoGsLN79NNqPe30V2s52lPqTay3oISLz+8l7\nYopI2qQ7z5VmjxHK3KvFkv2EQSe4CT+k8iuXPHYUHki+C9WGYZNqfdzCSY/qH2E=\n=c6MJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 466a60547c97f89fdfaca2cbac001f81f1923f46\nparent 73476554e9f89245be50195d5ff8e66cc5e64c82\nparent 9fd744b3e32817db3dcc3210fee67bfd0bcc11fe\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1673454654 +0100\ncommitter GitHub <noreply@github.com> 1673454654 +0100\n\nRollup merge of #106570 - Xaeroxe:div-duration-tests, r=JohnTitor\n\nadd tests for div_duration_* functions\n\nPer https://github.com/rust-lang/rust/issues/63139#issuecomment-817070719\n\nthis adds unit tests for the functions that will hopefully effectively demonstrate that `div_duration` is ready to be stabilized.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c962b07ed37259b4b8b333b1a613be26773c8efc", "html_url": "https://github.com/rust-lang/rust/commit/c962b07ed37259b4b8b333b1a613be26773c8efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c962b07ed37259b4b8b333b1a613be26773c8efc/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73476554e9f89245be50195d5ff8e66cc5e64c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/73476554e9f89245be50195d5ff8e66cc5e64c82", "html_url": "https://github.com/rust-lang/rust/commit/73476554e9f89245be50195d5ff8e66cc5e64c82"}, {"sha": "9fd744b3e32817db3dcc3210fee67bfd0bcc11fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd744b3e32817db3dcc3210fee67bfd0bcc11fe", "html_url": "https://github.com/rust-lang/rust/commit/9fd744b3e32817db3dcc3210fee67bfd0bcc11fe"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "2975c81f8fec90e872ab684df3b39d793cbfa025", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c962b07ed37259b4b8b333b1a613be26773c8efc/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c962b07ed37259b4b8b333b1a613be26773c8efc/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=c962b07ed37259b4b8b333b1a613be26773c8efc", "patch": "@@ -173,6 +173,32 @@ fn div() {\n     assert_eq!(Duration::new(99, 999_999_000) / 100, Duration::new(0, 999_999_990));\n }\n \n+#[test]\n+fn div_duration_f32() {\n+    assert_eq!(Duration::ZERO.div_duration_f32(Duration::MAX), 0.0);\n+    assert_eq!(Duration::MAX.div_duration_f32(Duration::ZERO), f32::INFINITY);\n+    assert_eq!((Duration::SECOND * 2).div_duration_f32(Duration::SECOND), 2.0);\n+    assert!(Duration::ZERO.div_duration_f32(Duration::ZERO).is_nan());\n+    // These tests demonstrate it doesn't panic with extreme values.\n+    // Accuracy of the computed value is not a huge concern, we know floats don't work well\n+    // at these extremes.\n+    assert!((Duration::MAX).div_duration_f32(Duration::NANOSECOND) > 10.0f32.powf(28.0));\n+    assert!((Duration::NANOSECOND).div_duration_f32(Duration::MAX) < 0.1);\n+}\n+\n+#[test]\n+fn div_duration_f64() {\n+    assert_eq!(Duration::ZERO.div_duration_f64(Duration::MAX), 0.0);\n+    assert_eq!(Duration::MAX.div_duration_f64(Duration::ZERO), f64::INFINITY);\n+    assert_eq!((Duration::SECOND * 2).div_duration_f64(Duration::SECOND), 2.0);\n+    assert!(Duration::ZERO.div_duration_f64(Duration::ZERO).is_nan());\n+    // These tests demonstrate it doesn't panic with extreme values.\n+    // Accuracy of the computed value is not a huge concern, we know floats don't work well\n+    // at these extremes.\n+    assert!((Duration::MAX).div_duration_f64(Duration::NANOSECOND) > 10.0f64.powf(28.0));\n+    assert!((Duration::NANOSECOND).div_duration_f64(Duration::MAX) < 0.1);\n+}\n+\n #[test]\n fn checked_div() {\n     assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));"}]}