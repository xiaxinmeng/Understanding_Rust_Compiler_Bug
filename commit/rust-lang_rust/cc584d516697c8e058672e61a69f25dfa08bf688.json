{"sha": "cc584d516697c8e058672e61a69f25dfa08bf688", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTg0ZDUxNjY5N2M4ZTA1ODY3MmU2MWE2OWYyNWRmYTA4YmY2ODg=", "commit": {"author": {"name": "TyPR124", "email": "t.ruckinger@gmail.com", "date": "2020-03-11T19:53:55Z"}, "committer": {"name": "TyPR124", "email": "t.ruckinger@gmail.com", "date": "2020-03-28T22:34:48Z"}, "message": "ascii methods on osstr", "tree": {"sha": "f0656724c567c763435fd3e78f4a77ffe9d0334d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0656724c567c763435fd3e78f4a77ffe9d0334d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc584d516697c8e058672e61a69f25dfa08bf688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc584d516697c8e058672e61a69f25dfa08bf688", "html_url": "https://github.com/rust-lang/rust/commit/cc584d516697c8e058672e61a69f25dfa08bf688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc584d516697c8e058672e61a69f25dfa08bf688/comments", "author": {"login": "TyPR124", "id": 29851190, "node_id": "MDQ6VXNlcjI5ODUxMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/29851190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TyPR124", "html_url": "https://github.com/TyPR124", "followers_url": "https://api.github.com/users/TyPR124/followers", "following_url": "https://api.github.com/users/TyPR124/following{/other_user}", "gists_url": "https://api.github.com/users/TyPR124/gists{/gist_id}", "starred_url": "https://api.github.com/users/TyPR124/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TyPR124/subscriptions", "organizations_url": "https://api.github.com/users/TyPR124/orgs", "repos_url": "https://api.github.com/users/TyPR124/repos", "events_url": "https://api.github.com/users/TyPR124/events{/privacy}", "received_events_url": "https://api.github.com/users/TyPR124/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TyPR124", "id": 29851190, "node_id": "MDQ6VXNlcjI5ODUxMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/29851190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TyPR124", "html_url": "https://github.com/TyPR124", "followers_url": "https://api.github.com/users/TyPR124/followers", "following_url": "https://api.github.com/users/TyPR124/following{/other_user}", "gists_url": "https://api.github.com/users/TyPR124/gists{/gist_id}", "starred_url": "https://api.github.com/users/TyPR124/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TyPR124/subscriptions", "organizations_url": "https://api.github.com/users/TyPR124/orgs", "repos_url": "https://api.github.com/users/TyPR124/repos", "events_url": "https://api.github.com/users/TyPR124/events{/privacy}", "received_events_url": "https://api.github.com/users/TyPR124/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45416cd91a6bdc493ea62fb3f412713a0fd8e52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45416cd91a6bdc493ea62fb3f412713a0fd8e52e", "html_url": "https://github.com/rust-lang/rust/commit/45416cd91a6bdc493ea62fb3f412713a0fd8e52e"}], "stats": {"total": 239, "additions": 233, "deletions": 6}, "files": [{"sha": "136ebc8f03f48605cc75942196c4889947297bb7", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=cc584d516697c8e058672e61a69f25dfa08bf688", "patch": "@@ -698,6 +698,149 @@ impl OsStr {\n     fn bytes(&self) -> &[u8] {\n         unsafe { &*(&self.inner as *const _ as *const [u8]) }\n     }\n+\n+    /// Converts this string to its ASCII lower case equivalent in-place.\n+    ///\n+    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To return a new lowercased value without modifying the existing one, use\n+    /// [`to_ascii_lowercase`].\n+    ///\n+    /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"GR\u00dc\u00dfE, J\u00dcRGEN \u2764\");\n+    ///\n+    /// s.make_ascii_lowercase();\n+    ///\n+    /// assert_eq!(\"gr\u00dc\u00dfe, j\u00dcrgen \u2764\", s);\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.inner.make_ascii_lowercase()\n+    }\n+\n+    /// Converts this string to its ASCII upper case equivalent in-place.\n+    ///\n+    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To return a new uppercased value without modifying the existing one, use\n+    /// [`to_ascii_uppercase`].\n+    ///\n+    /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// s.make_ascii_uppercase();\n+    ///\n+    /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s);\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.inner.make_ascii_uppercase()\n+    }\n+\n+    /// Returns a copy of this string where each character is mapped to its\n+    /// ASCII lower case equivalent.\n+    ///\n+    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    /// let s = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// assert_eq!(\"gr\u00fc\u00dfe, j\u00fcrgen \u2764\", s.to_ascii_lowercase());\n+    /// ```\n+    ///\n+    /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n+    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    pub fn to_ascii_lowercase(&self) -> OsString {\n+        // OsString::from_inner(Buf::from_inner(self.inner.inner.to_ascii_lowercase()))\n+        OsString::from_inner(self.inner.to_ascii_lowercase())\n+    }\n+\n+    /// Returns a copy of this string where each character is mapped to its\n+    /// ASCII upper case equivalent.\n+    ///\n+    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    /// let s = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s.to_ascii_uppercase());\n+    /// ```\n+    ///\n+    /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n+    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    pub fn to_ascii_uppercase(&self) -> OsString {\n+        // OsString::from_inner(Buf::from_inner(self.inner.inner.to_ascii_lowercase()))\n+        OsString::from_inner(self.inner.to_ascii_uppercase())\n+    }\n+\n+    /// Checks if all characters in this string are within the ASCII range.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let ascii = OsString::from(\"hello!\\n\");\n+    /// let non_ascii = OsString::from(\"Gr\u00fc\u00dfe, J\u00fcrgen \u2764\");\n+    ///\n+    /// assert!(ascii.is_ascii());\n+    /// assert!(!non_ascii.is_ascii());\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    pub fn is_ascii(&self) -> bool {\n+        self.inner.is_ascii()\n+    }\n+\n+    /// Checks that two strings are an ASCII case-insensitive match.\n+    ///\n+    /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n+    /// but without allocating and copying temporaries.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(osstring_ascii)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// assert!(OsString::from(\"Ferris\").eq_ignore_ascii_case(\"FERRIS\"));\n+    /// assert!(OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00f6S\"));\n+    /// assert!(!OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00d6S\"));\n+    /// ```\n+    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    pub fn eq_ignore_ascii_case<S: ?Sized + AsRef<OsStr>>(&self, other: &S) -> bool {\n+        self.inner.eq_ignore_ascii_case(&other.as_ref().inner)\n+    }\n }\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]"}, {"sha": "6aab028873e07442d7c3ed778bc3542bd2f0e608", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=cc584d516697c8e058672e61a69f25dfa08bf688", "patch": "@@ -179,4 +179,34 @@ impl Slice {\n         let rc = self.inner.into_rc();\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n     }\n+\n+    #[inline]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.inner.make_ascii_lowercase()\n+    }\n+\n+    #[inline]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.inner.make_ascii_uppercase()\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_lowercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_lowercase() }\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_uppercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_uppercase() }\n+    }\n+\n+    #[inline]\n+    pub fn is_ascii(&self) -> bool {\n+        self.inner.is_ascii()\n+    }\n+\n+    #[inline]\n+    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {\n+        self.inner.eq_ignore_ascii_case(&other.inner)\n+    }\n }"}, {"sha": "aa6cc33d831e0f8870a1956388ef457118f0ecd2", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=cc584d516697c8e058672e61a69f25dfa08bf688", "patch": "@@ -195,6 +195,36 @@ impl Slice {\n         let rc: Rc<[u8]> = Rc::from(&self.inner);\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n     }\n+\n+    #[inline]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.inner.make_ascii_lowercase()\n+    }\n+\n+    #[inline]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.inner.make_ascii_uppercase()\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_lowercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_lowercase() }\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_uppercase(&self) -> Buf {\n+        Buf { inner: self.inner.to_ascii_uppercase() }\n+    }\n+\n+    #[inline]\n+    pub fn is_ascii(&self) -> bool {\n+        self.inner.is_ascii()\n+    }\n+\n+    #[inline]\n+    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {\n+        self.inner.eq_ignore_ascii_case(&other.inner)\n+    }\n }\n \n /// Platform-specific extensions to [`OsString`]."}, {"sha": "e9617dee6ac1f3fdb8ed2d2517ce71e1decf99f6", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc584d516697c8e058672e61a69f25dfa08bf688/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=cc584d516697c8e058672e61a69f25dfa08bf688", "patch": "@@ -645,6 +645,36 @@ impl Wtf8 {\n         let rc: Rc<[u8]> = Rc::from(&self.bytes);\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Wtf8) }\n     }\n+\n+    #[inline]\n+    pub fn make_ascii_lowercase(&mut self) {\n+        self.bytes.make_ascii_lowercase()\n+    }\n+\n+    #[inline]\n+    pub fn make_ascii_uppercase(&mut self) {\n+        self.bytes.make_ascii_uppercase()\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_lowercase(&self) -> Wtf8Buf {\n+        Wtf8Buf { bytes: self.bytes.to_ascii_lowercase() }\n+    }\n+\n+    #[inline]\n+    pub fn to_ascii_uppercase(&self) -> Wtf8Buf {\n+        Wtf8Buf { bytes: self.bytes.to_ascii_uppercase() }\n+    }\n+\n+    #[inline]\n+    pub fn is_ascii(&self) -> bool {\n+        self.bytes.is_ascii()\n+    }\n+\n+    #[inline]\n+    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {\n+        self.bytes.eq_ignore_ascii_case(&other.bytes)\n+    }\n }\n \n /// Returns a slice of the given string for the byte range [`begin`..`end`).\n@@ -845,12 +875,6 @@ impl Hash for Wtf8 {\n     }\n }\n \n-impl Wtf8 {\n-    pub fn make_ascii_uppercase(&mut self) {\n-        self.bytes.make_ascii_uppercase()\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}