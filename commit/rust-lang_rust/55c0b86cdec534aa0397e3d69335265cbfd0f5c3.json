{"sha": "55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "node_id": "C_kwDOAAsO6NoAKDU1YzBiODZjZGVjNTM0YWEwMzk3ZTNkNjkzMzUyNjVjYmZkMGY1YzM", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-03T12:39:43Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-03T12:39:43Z"}, "message": "Add semicolons for consistency\n\n`clippy::semicolon_if_nothing_returned`", "tree": {"sha": "afe64c11eca87dd091dc8bfafe6ff06c6006ee17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe64c11eca87dd091dc8bfafe6ff06c6006ee17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmFZpUUACgkQ94j36ZAT\nYAPFQQ/+JXgY96+al/ZbOWjcIWNFwOxvjshqyiFrGjClUZPg+V+519s1YaebZQyp\nHBPbWGpNbG4iTiiGk/lzmZ3+6kx+FMYLgfsqd150cJsvejjduZeT1bAeXZ3zU+Cu\nWPm4/UP1lGkjprgwFuj1YYDsJ/jYGHy3nen/RpbQUB3Th2a+toBaZ9XS+wVgKb7r\ndW9sNTZpiaFVkNPGz0uSgTFIxCqAVFn/fdPbkkr5vcxYV2X3/Pj3w2kq59eXR13l\nOvIpZee2DA4jAYdTyb3XWhuVRX+1QVV2R4/a9sVaOaM2uRjARTuKSSMt43y9czSo\nwNcEsj+J6AlciX6VD7EKZPBgQsd7xA2oV8pFNSqrA+Iy6sjSVK6zbbdcVYu4nroI\nwtww+u4JhUk1Vq3Um1UUtiy1YWM+zPU7rrZrE6+MB5FgSZho3TIth+nZCRhCHk4/\n6r8SVoWeDqh1CviXm1FTXyMcrxxQ8F0PY6vsEurwymTxSgiVUF8DRlyYVsDnFRDd\niNQAl2ZbG9QFoLFo1N3HKMnZKrowxeFz13THv62LAvsBpeBu6F0M+YxV3U1CRAwZ\nM0jnr0v2zA7AhLzQuMmfoAjheMrnoawsCLDv6UWRMXGANgOtqQmQaRrQsy7lzJ6A\ntspaOnxjx1arLl/26TxuGf8eC4PsUDjhAsFnlYkY24QdE0D/QIc=\n=HzYh\n-----END PGP SIGNATURE-----", "payload": "tree afe64c11eca87dd091dc8bfafe6ff06c6006ee17\nparent 60c5449120659fdef1b716c9e584356accf5e5e3\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1633264783 +1100\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1633264783 +1100\n\nAdd semicolons for consistency\n\n`clippy::semicolon_if_nothing_returned`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "html_url": "https://github.com/rust-lang/rust/commit/55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c5449120659fdef1b716c9e584356accf5e5e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c5449120659fdef1b716c9e584356accf5e5e3", "html_url": "https://github.com/rust-lang/rust/commit/60c5449120659fdef1b716c9e584356accf5e5e3"}], "stats": {"total": 302, "additions": 151, "deletions": 151}, "files": [{"sha": "e2645d9e5f3625b4a313f9adb6e5f778f1bd0833", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -179,7 +179,7 @@ impl FlycheckActor {\n                         tracing::error!(\n                             \"Flycheck failed to run the following command: {:?}\",\n                             self.check_command()\n-                        )\n+                        );\n                     }\n                     self.progress(Progress::DidFinish(res));\n                 }\n@@ -253,7 +253,7 @@ impl FlycheckActor {\n     }\n \n     fn send(&self, check_task: Message) {\n-        (self.sender)(check_task)\n+        (self.sender)(check_task);\n     }\n }\n \n@@ -334,15 +334,15 @@ impl CargoActor {\n                     // Skip certain kinds of messages to only spend time on what's useful\n                     JsonMessage::Cargo(message) => match message {\n                         cargo_metadata::Message::CompilerArtifact(artifact) if !artifact.fresh => {\n-                            self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap()\n+                            self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap();\n                         }\n                         cargo_metadata::Message::CompilerMessage(msg) => {\n-                            self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap()\n+                            self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap();\n                         }\n                         _ => (),\n                     },\n                     JsonMessage::Rustc(message) => {\n-                        self.sender.send(CargoMessage::Diagnostic(message)).unwrap()\n+                        self.sender.send(CargoMessage::Diagnostic(message)).unwrap();\n                     }\n                 }\n             }"}, {"sha": "2b874d6e1c363df4c88225e27cccb3d199e3c5cf", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -67,11 +67,11 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn stmt(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::No, true)\n+        expressions::stmt(p, expressions::StmtWithSemi::No, true);\n     }\n \n     pub(crate) fn stmt_optional_semi(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::Optional, false)\n+        expressions::stmt(p, expressions::StmtWithSemi::Optional, false);\n     }\n \n     pub(crate) fn visibility(p: &mut Parser) {\n@@ -84,7 +84,7 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn item(p: &mut Parser) {\n-        items::item_or_macro(p, true)\n+        items::item_or_macro(p, true);\n     }\n \n     pub(crate) fn macro_items(p: &mut Parser) {\n@@ -109,7 +109,7 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn attr(p: &mut Parser) {\n-        attributes::outer_attrs(p)\n+        attributes::outer_attrs(p);\n     }\n }\n \n@@ -246,7 +246,7 @@ fn name_r(p: &mut Parser, recovery: TokenSet) {\n }\n \n fn name(p: &mut Parser) {\n-    name_r(p, TokenSet::EMPTY)\n+    name_r(p, TokenSet::EMPTY);\n }\n \n fn name_ref(p: &mut Parser) {"}, {"sha": "1efffca515cb48bd8bd939ddb13540c3322d3083", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -2,13 +2,13 @@ use super::*;\n \n pub(super) fn inner_attrs(p: &mut Parser) {\n     while p.at(T![#]) && p.nth(1) == T![!] {\n-        attr(p, true)\n+        attr(p, true);\n     }\n }\n \n pub(super) fn outer_attrs(p: &mut Parser) {\n     while p.at(T![#]) {\n-        attr(p, false)\n+        attr(p, false);\n     }\n }\n "}, {"sha": "23727d1e9bc5b5e2b503b5f1e1d5f9e261c30f87", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -139,7 +139,7 @@ pub(super) fn expr_block_contents(p: &mut Parser) {\n             continue;\n         }\n \n-        stmt(p, StmtWithSemi::Yes, false)\n+        stmt(p, StmtWithSemi::Yes, false);\n     }\n }\n \n@@ -468,12 +468,12 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     let m = lhs.precede(p);\n     p.bump(T![.]);\n     if p.at(IDENT) || p.at(INT_NUMBER) {\n-        name_ref_or_index(p)\n+        name_ref_or_index(p);\n     } else if p.at(FLOAT_NUMBER) {\n         // FIXME: How to recover and instead parse INT + T![.]?\n         p.bump_any();\n     } else {\n-        p.error(\"expected field name or number\")\n+        p.error(\"expected field name or number\");\n     }\n     m.complete(p, FIELD_EXPR)\n }"}, {"sha": "7075ae297f01541e0b45087c4334e3debe34909b", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -374,7 +374,7 @@ fn match_expr(p: &mut Parser) -> CompletedMarker {\n     if p.at(T!['{']) {\n         match_arm_list(p);\n     } else {\n-        p.error(\"expected `{`\")\n+        p.error(\"expected `{`\");\n     }\n     m.complete(p, MATCH_EXPR)\n }\n@@ -602,7 +602,7 @@ fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     if p.at(T!['{']) {\n         stmt_list(p);\n     } else {\n-        p.error(\"expected a block\")\n+        p.error(\"expected a block\");\n     }\n     m.complete(p, BLOCK_EXPR)\n }\n@@ -639,7 +639,7 @@ fn meta_var_expr(p: &mut Parser) -> CompletedMarker {\n         }\n         _ => {\n             while !p.at(R_DOLLAR) {\n-                p.bump_any()\n+                p.bump_any();\n             }\n             p.bump(R_DOLLAR);\n             m.complete(p, ERROR)"}, {"sha": "00ccbf5010eefb0f06f50edbed0836db15324933", "filename": "crates/parser/src/grammar/generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -34,7 +34,7 @@ fn generic_param(p: &mut Parser) {\n         T![const] => const_param(p, m),\n         _ => {\n             m.abandon(p);\n-            p.err_and_bump(\"expected type parameter\")\n+            p.err_and_bump(\"expected type parameter\");\n         }\n     }\n }\n@@ -62,7 +62,7 @@ fn type_param(p: &mut Parser, m: Marker) {\n         // test type_param_default\n         // struct S<T = i32>;\n         p.bump(T![=]);\n-        types::type_(p)\n+        types::type_(p);\n     }\n     m.complete(p, TYPE_PARAM);\n }"}, {"sha": "9de9afde5d362464980d648f3c7ff5124bd89717", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -20,7 +20,7 @@ use super::*;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attrs(p);\n     while !p.at(EOF) && !(p.at(T!['}']) && stop_on_r_curly) {\n-        item_or_macro(p, stop_on_r_curly)\n+        item_or_macro(p, stop_on_r_curly);\n     }\n }\n \n@@ -165,7 +165,7 @@ pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n                     p.bump_remap(T![default]);\n                     p.bump(T![async]);\n                     if is_unsafe {\n-                        p.bump(T![unsafe])\n+                        p.bump(T![unsafe]);\n                     }\n                     has_mods = true;\n                 }\n@@ -404,7 +404,7 @@ fn fn_(p: &mut Parser, m: Marker) {\n         // trait T { fn foo(); }\n         p.bump(T![;]);\n     } else {\n-        expressions::block_expr(p)\n+        expressions::block_expr(p);\n     }\n     m.complete(p, FN);\n }"}, {"sha": "42ebecc6d6c8a341601f53d1113e2063feb11b47", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -58,7 +58,7 @@ pub(super) fn enum_(p: &mut Parser, m: Marker) {\n     if p.at(T!['{']) {\n         variant_list(p);\n     } else {\n-        p.error(\"expected `{`\")\n+        p.error(\"expected `{`\");\n     }\n     m.complete(p, ENUM);\n }"}, {"sha": "98064cd98ad6f5b794df0f0f89d81cc4b631ad38", "filename": "crates/parser/src/grammar/items/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -4,12 +4,12 @@ use super::*;\n // const C: u32 = 92;\n pub(super) fn konst(p: &mut Parser, m: Marker) {\n     p.bump(T![const]);\n-    const_or_static(p, m, true)\n+    const_or_static(p, m, true);\n }\n \n pub(super) fn static_(p: &mut Parser, m: Marker) {\n     p.bump(T![static]);\n-    const_or_static(p, m, false)\n+    const_or_static(p, m, false);\n }\n \n fn const_or_static(p: &mut Parser, m: Marker, is_const: bool) {\n@@ -27,7 +27,7 @@ fn const_or_static(p: &mut Parser, m: Marker, is_const: bool) {\n     if p.at(T![:]) {\n         types::ascription(p);\n     } else {\n-        p.error(\"missing type for `const` or `static`\")\n+        p.error(\"missing type for `const` or `static`\");\n     }\n     if p.eat(T![=]) {\n         expressions::expr(p);"}, {"sha": "a000f515cc084aba2238c6579c1a09cd7fe1e92b", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -6,21 +6,21 @@ use super::*;\n // fn c(x: i32, ) {}\n // fn d(x: i32, y: ()) {}\n pub(super) fn param_list_fn_def(p: &mut Parser) {\n-    list_(p, Flavor::FnDef)\n+    list_(p, Flavor::FnDef);\n }\n \n // test param_list_opt_patterns\n // fn foo<F: FnMut(&mut Foo<'a>)>(){}\n pub(super) fn param_list_fn_trait(p: &mut Parser) {\n-    list_(p, Flavor::FnTrait)\n+    list_(p, Flavor::FnTrait);\n }\n \n pub(super) fn param_list_fn_ptr(p: &mut Parser) {\n-    list_(p, Flavor::FnPointer)\n+    list_(p, Flavor::FnPointer);\n }\n \n pub(super) fn param_list_closure(p: &mut Parser) {\n-    list_(p, Flavor::Closure)\n+    list_(p, Flavor::Closure);\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -104,13 +104,13 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n         Flavor::FnDef => {\n             patterns::pattern(p);\n             if variadic_param(p) {\n-                res = Variadic(true)\n+                res = Variadic(true);\n             } else if p.at(T![:]) {\n-                types::ascription(p)\n+                types::ascription(p);\n             } else {\n                 // test_err missing_fn_param_type\n                 // fn f(x y: i32, z, t: i32) {}\n-                p.error(\"missing type for function parameter\")\n+                p.error(\"missing type for function parameter\");\n             }\n         }\n         // test value_parameters_no_patterns\n@@ -128,11 +128,11 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n             if (p.at(IDENT) || p.at(UNDERSCORE)) && p.nth(1) == T![:] && !p.nth_at(1, T![::]) {\n                 patterns::pattern_single(p);\n                 if variadic_param(p) {\n-                    res = Variadic(true)\n+                    res = Variadic(true);\n                 } else if p.at(T![:]) {\n-                    types::ascription(p)\n+                    types::ascription(p);\n                 } else {\n-                    p.error(\"missing type for function parameter\")\n+                    p.error(\"missing type for function parameter\");\n                 }\n             } else {\n                 types::type_(p);"}, {"sha": "0cc0ed31aaf05940fe5a8e18fb10fd6cc0a44729", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -16,15 +16,15 @@ pub(super) fn is_use_path_start(p: &Parser) -> bool {\n }\n \n pub(super) fn use_path(p: &mut Parser) {\n-    path(p, Mode::Use)\n+    path(p, Mode::Use);\n }\n \n pub(crate) fn type_path(p: &mut Parser) {\n-    path(p, Mode::Type)\n+    path(p, Mode::Type);\n }\n \n pub(super) fn expr_path(p: &mut Parser) {\n-    path(p, Mode::Expr)\n+    path(p, Mode::Expr);\n }\n \n pub(crate) fn type_path_for_qualifier(p: &mut Parser, qual: CompletedMarker) -> CompletedMarker {\n@@ -117,7 +117,7 @@ fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n                 params::param_list_fn_trait(p);\n                 opt_ret_type(p);\n             } else {\n-                generic_args::opt_generic_arg_list(p, false)\n+                generic_args::opt_generic_arg_list(p, false);\n             }\n         }\n         Mode::Expr => generic_args::opt_generic_arg_list(p, true),"}, {"sha": "3ed63bd437a8a07a557351ce9bad9b66a7728a1e", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn pattern(p: &mut Parser) {\n \n /// Parses a pattern list separated by pipes `|`.\n pub(super) fn pattern_top(p: &mut Parser) {\n-    pattern_top_r(p, PAT_RECOVERY_SET)\n+    pattern_top_r(p, PAT_RECOVERY_SET);\n }\n \n pub(crate) fn pattern_single(p: &mut Parser) {"}, {"sha": "1a6fb651cbd91a8a3220a7f4e2ec6466881b2269", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -57,7 +57,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n pub(super) fn ascription(p: &mut Parser) {\n     assert!(p.at(T![:]));\n     p.bump(T![:]);\n-    type_(p)\n+    type_(p);\n }\n \n fn paren_or_tuple_type(p: &mut Parser) {\n@@ -204,7 +204,7 @@ fn fn_ptr_type(p: &mut Parser) {\n     if p.at(T!['(']) {\n         params::param_list_fn_ptr(p);\n     } else {\n-        p.error(\"expected parameters\")\n+        p.error(\"expected parameters\");\n     }\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n@@ -274,7 +274,7 @@ fn dyn_trait_type(p: &mut Parser) {\n // type C = self::Foo;\n // type D = super::Foo;\n pub(super) fn path_type(p: &mut Parser) {\n-    path_type_(p, true)\n+    path_type_(p, true);\n }\n \n // test macro_call_type"}, {"sha": "89dfea52f8f9d1c0c6d6d6f3ccd276b65e8ee4ed", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -177,7 +177,7 @@ impl<'t> Parser<'t> {\n         if kind == EOF {\n             return;\n         }\n-        self.do_bump(kind, 1)\n+        self.do_bump(kind, 1);\n     }\n \n     /// Advances the parser by one token, remapping its kind.\n@@ -200,7 +200,7 @@ impl<'t> Parser<'t> {\n     /// does.\n     pub(crate) fn error<T: Into<String>>(&mut self, message: T) {\n         let msg = ParseError(Box::new(message.into()));\n-        self.push_event(Event::Error { msg })\n+        self.push_event(Event::Error { msg });\n     }\n \n     /// Consume the next token if it is `kind` or emit an error\n@@ -258,7 +258,7 @@ impl<'t> Parser<'t> {\n     }\n \n     fn push_event(&mut self, event: Event) {\n-        self.events.push(event)\n+        self.events.push(event);\n     }\n }\n "}, {"sha": "cd4894c1e8b5f3398d3efd72f3d7d583b0d5687b", "filename": "crates/parser/src/token_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fparser%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftoken_set.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -14,7 +14,7 @@ impl TokenSet {\n         let mut i = 0;\n         while i < kinds.len() {\n             res |= mask(kinds[i]);\n-            i += 1\n+            i += 1;\n         }\n         TokenSet(res)\n     }"}, {"sha": "01a8345bdf7abe0f21a39df1cd5e6dbd5ac3a0a0", "filename": "crates/proc_macro_api/src/msg/flat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -320,7 +320,7 @@ impl Reader {\n                     })\n                     .collect(),\n             };\n-            res[i] = Some(s)\n+            res[i] = Some(s);\n         }\n \n         res[0].take().unwrap()"}, {"sha": "db2f33d06505f50ddc1209cdf5bfeb09dd6937f5", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -93,7 +93,7 @@ struct ProfilerImpl {\n impl ProfileSpan {\n     pub fn detail(mut self, detail: impl FnOnce() -> String) -> ProfileSpan {\n         if let Some(profiler) = &mut self.0 {\n-            profiler.detail = Some(detail())\n+            profiler.detail = Some(detail());\n         }\n         self\n     }\n@@ -114,7 +114,7 @@ impl HeartbeatSpan {\n     #[inline]\n     pub fn new(enabled: bool) -> Self {\n         if enabled {\n-            with_profile_stack(|it| it.heartbeats(true))\n+            with_profile_stack(|it| it.heartbeats(true));\n         }\n         Self { enabled }\n     }\n@@ -123,7 +123,7 @@ impl HeartbeatSpan {\n impl Drop for HeartbeatSpan {\n     fn drop(&mut self) {\n         if self.enabled {\n-            with_profile_stack(|it| it.heartbeats(false))\n+            with_profile_stack(|it| it.heartbeats(false));\n         }\n     }\n }\n@@ -238,7 +238,7 @@ impl ProfileStack {\n             self.heartbeat(frame.heartbeats);\n             let avg_span = duration / (frame.heartbeats + 1);\n             if avg_span > self.filter.heartbeat_longer_than {\n-                eprintln!(\"Too few heartbeats {} ({}/{:?})?\", label, frame.heartbeats, duration)\n+                eprintln!(\"Too few heartbeats {} ({}/{:?})?\", label, frame.heartbeats, duration);\n             }\n         }\n \n@@ -292,7 +292,7 @@ fn print(\n         accounted_for += tree[child].duration;\n \n         if tree[child].duration.as_millis() > longer_than.as_millis() {\n-            print(tree, child, level + 1, longer_than, out)\n+            print(tree, child, level + 1, longer_than, out);\n         } else {\n             let (total_duration, cnt) =\n                 short_children.entry(tree[child].label).or_insert((Duration::default(), 0));"}, {"sha": "c5f6bccca1143a418b1479afaa85c042568a2ced", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -92,7 +92,7 @@ pub fn cpu_span() -> CpuSpan {\n     {\n         eprintln!(\n             r#\"cpu profiling is disabled, uncomment `default = [ \"cpu_profiler\" ]` in Cargo.toml to enable.\"#\n-        )\n+        );\n     }\n \n     CpuSpan { _private: () }"}, {"sha": "43b1ce9e6dab5ff0afef9b8be897eb3c27147297", "filename": "crates/profile/src/stop_watch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fstop_watch.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -70,15 +70,15 @@ impl fmt::Display for StopWatchSpan {\n             let mut prefix = \"\";\n             if instructions > 10000 {\n                 instructions /= 1000;\n-                prefix = \"k\"\n+                prefix = \"k\";\n             }\n             if instructions > 10000 {\n                 instructions /= 1000;\n-                prefix = \"m\"\n+                prefix = \"m\";\n             }\n             if instructions > 10000 {\n                 instructions /= 1000;\n-                prefix = \"g\"\n+                prefix = \"g\";\n             }\n             write!(f, \", {}{}instr\", instructions, prefix)?;\n         }"}, {"sha": "99780343fd28a94ee03831fc8fe9cfde85235c3b", "filename": "crates/rust-analyzer/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Frust-analyzer%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Frust-analyzer%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fbuild.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -4,7 +4,7 @@ use std::{env, path::PathBuf, process::Command};\n \n fn main() {\n     set_rerun();\n-    println!(\"cargo:rustc-env=REV={}\", rev())\n+    println!(\"cargo:rustc-env=REV={}\", rev());\n }\n \n fn set_rerun() {"}, {"sha": "398e846a14c2a8ab4dec9c0f62fae2b22abd48d3", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -33,9 +33,9 @@ pub fn list_files(dir: &Path) -> Vec<PathBuf> {\n                 path.file_name().unwrap_or_default().to_str().unwrap_or_default().starts_with('.');\n             if !is_hidden {\n                 if file_type.is_dir() {\n-                    work.push(path)\n+                    work.push(path);\n                 } else if file_type.is_file() {\n-                    res.push(path)\n+                    res.push(path);\n                 }\n             }\n         }\n@@ -66,7 +66,7 @@ impl CommentBlock {\n                         panic!(\n                             \"Use plain (non-doc) comments with tags like {}:\\n    {}\",\n                             tag, first\n-                        )\n+                        );\n                     }\n \n                     block.id = id.trim().to_string();\n@@ -106,7 +106,7 @@ impl CommentBlock {\n             }\n         }\n         if !block.contents.is_empty() {\n-            res.push(block)\n+            res.push(block);\n         }\n         res\n     }\n@@ -139,7 +139,7 @@ fn ensure_rustfmt() {\n         panic!(\n             \"Failed to run rustfmt from toolchain 'stable'. \\\n                  Please run `rustup component add rustfmt --toolchain stable` to install it.\",\n-        )\n+        );\n     }\n }\n \n@@ -185,7 +185,7 @@ pub fn ensure_file_contents(file: &Path, contents: &str) {\n         let _ = fs::create_dir_all(parent);\n     }\n     fs::write(file, contents).unwrap();\n-    panic!(\"some file was not up to date and has been updated, simply re-run the tests\")\n+    panic!(\"some file was not up to date and has been updated, simply re-run the tests\");\n }\n \n fn normalize_newlines(s: &str) -> String {"}, {"sha": "bfa6024679bdb9a3dc296f60dcb060e23b4acb71", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -45,7 +45,7 @@ fn to_snake_case<F: Fn(&char) -> char>(s: &str, change_case: F) -> String {\n         if c.is_ascii_uppercase() && prev {\n             // This check is required to not translate `Weird_Case` into `weird__case`.\n             if !buf.ends_with('_') {\n-                buf.push('_')\n+                buf.push('_');\n             }\n         }\n         prev = true;\n@@ -60,7 +60,7 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n         return;\n     }\n     // FIXME: do this in place.\n-    *buf = buf.replace(from, to)\n+    *buf = buf.replace(from, to);\n }\n \n pub fn trim_indent(mut text: &str) -> String {\n@@ -101,7 +101,7 @@ pub fn defer<F: FnOnce()>(f: F) -> impl Drop {\n     impl<F: FnOnce()> Drop for D<F> {\n         fn drop(&mut self) {\n             if let Some(f) = self.0.take() {\n-                f()\n+                f();\n             }\n         }\n     }"}, {"sha": "f8fafc5a677242ceb7532dcf62e28f444adc05d4", "filename": "crates/stdx/src/panic_context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fpanic_context.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -25,25 +25,25 @@ impl PanicContext {\n                 if !ctx.is_empty() {\n                     eprintln!(\"Panic context:\");\n                     for frame in ctx.iter() {\n-                        eprintln!(\"> {}\\n\", frame)\n+                        eprintln!(\"> {}\\n\", frame);\n                     }\n                 }\n-                default_hook(panic_info)\n-            })\n+                default_hook(panic_info);\n+            });\n         };\n-        panic::set_hook(Box::new(hook))\n+        panic::set_hook(Box::new(hook));\n     }\n }\n \n impl Drop for PanicContext {\n     fn drop(&mut self) {\n-        with_ctx(|ctx| assert!(ctx.pop().is_some()))\n+        with_ctx(|ctx| assert!(ctx.pop().is_some()));\n     }\n }\n \n fn with_ctx(f: impl FnOnce(&mut Vec<String>)) {\n     thread_local! {\n         static CTX: RefCell<Vec<String>> = RefCell::new(Vec::new());\n     }\n-    CTX.with(|ctx| f(&mut *ctx.borrow_mut()))\n+    CTX.with(|ctx| f(&mut *ctx.borrow_mut()));\n }"}, {"sha": "34cabf7807d97f48d55fe8111d68ff6128fc8ae7", "filename": "crates/stdx/src/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fstdx%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fstdx%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fprocess.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -42,9 +42,9 @@ pub fn streaming_output(\n                 };\n                 for line in String::from_utf8_lossy(new_lines).lines() {\n                     if is_out {\n-                        on_stdout_line(line)\n+                        on_stdout_line(line);\n                     } else {\n-                        on_stderr_line(line)\n+                        on_stderr_line(line);\n                     }\n                 }\n             }"}, {"sha": "7043d2e35ab9f0c7750a3c8dd18c89c75981fb47", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -120,7 +120,7 @@ impl TreeDiff {\n             to.iter().for_each(|to| builder.insert(offset, to.to_string()));\n         }\n         for (from, to) in self.replacements.iter() {\n-            builder.replace(from.text_range(), to.to_string())\n+            builder.replace(from.text_range(), to.to_string());\n         }\n         for text_range in self.deletions.iter().map(SyntaxElement::text_range) {\n             builder.delete(text_range);\n@@ -233,7 +233,7 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                         diff.insertions.entry(insert_pos).or_insert_with(Vec::new).extend(drain);\n                         rhs_children = rhs_children_clone;\n                     } else {\n-                        go(diff, lhs_ele, rhs_ele)\n+                        go(diff, lhs_ele, rhs_ele);\n                     }\n                 }\n             }"}, {"sha": "43a9c6756d576dba7ed2229462ae3ac3cc756292", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -126,7 +126,7 @@ impl IndentLevel {\n             if let Some(ws) = ast::Whitespace::cast(token) {\n                 if ws.text().contains('\\n') {\n                     let new_ws = make::tokens::whitespace(&format!(\"{}{}\", ws.syntax(), self));\n-                    ted::replace(ws.syntax(), &new_ws)\n+                    ted::replace(ws.syntax(), &new_ws);\n                 }\n             }\n         }\n@@ -143,7 +143,7 @@ impl IndentLevel {\n                     let new_ws = make::tokens::whitespace(\n                         &ws.syntax().text().replace(&format!(\"\\n{}\", self), \"\\n\"),\n                     );\n-                    ted::replace(ws.syntax(), &new_ws)\n+                    ted::replace(ws.syntax(), &new_ws);\n                 }\n             }\n         }"}, {"sha": "61f1265290ab41edc1b5559695212eec3a7a135a", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -49,7 +49,7 @@ impl GenericParamsOwnerEdit for ast::Fn {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -77,7 +77,7 @@ impl GenericParamsOwnerEdit for ast::Impl {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -107,7 +107,7 @@ impl GenericParamsOwnerEdit for ast::Trait {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -145,7 +145,7 @@ impl GenericParamsOwnerEdit for ast::Struct {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -177,7 +177,7 @@ impl GenericParamsOwnerEdit for ast::Enum {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -234,7 +234,7 @@ impl ast::GenericParamList {\n             }\n             None => {\n                 let after_l_angle = Position::after(self.l_angle_token().unwrap());\n-                ted::insert(after_l_angle, generic_param.syntax())\n+                ted::insert(after_l_angle, generic_param.syntax());\n             }\n         }\n     }\n@@ -247,7 +247,7 @@ impl ast::WhereClause {\n                 ted::append_child_raw(self.syntax(), make::token(T![,]));\n             }\n         }\n-        ted::append_child(self.syntax(), predicate.syntax())\n+        ted::append_child(self.syntax(), predicate.syntax());\n     }\n }\n \n@@ -267,7 +267,7 @@ impl ast::PathSegment {\n     pub fn get_or_create_generic_arg_list(&self) -> ast::GenericArgList {\n         if self.generic_arg_list().is_none() {\n             let arg_list = make::generic_arg_list().clone_for_update();\n-            ted::append_child(self.syntax(), arg_list.syntax())\n+            ted::append_child(self.syntax(), arg_list.syntax());\n         }\n         self.generic_arg_list().unwrap()\n     }\n@@ -286,7 +286,7 @@ impl ast::UseTree {\n                 break;\n             }\n         }\n-        ted::remove(self.syntax())\n+        ted::remove(self.syntax());\n     }\n }\n \n@@ -301,13 +301,13 @@ impl ast::Use {\n             let ws_text = next_ws.syntax().text();\n             if let Some(rest) = ws_text.strip_prefix('\\n') {\n                 if rest.is_empty() {\n-                    ted::remove(next_ws.syntax())\n+                    ted::remove(next_ws.syntax());\n                 } else {\n-                    ted::replace(next_ws.syntax(), make::tokens::whitespace(rest))\n+                    ted::replace(next_ws.syntax(), make::tokens::whitespace(rest));\n                 }\n             }\n         }\n-        ted::remove(self.syntax())\n+        ted::remove(self.syntax());\n     }\n }\n \n@@ -525,7 +525,7 @@ pub trait Indent: AstNode + Clone + Sized {\n     fn reindent_to(&self, target_level: IndentLevel) {\n         let current_level = IndentLevel::from_node(self.syntax());\n         self.dedent(current_level);\n-        self.indent(target_level)\n+        self.indent(target_level);\n     }\n }\n "}, {"sha": "b4ad26c13a35607edb427daa3d6c52376b20d375", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -257,7 +257,7 @@ pub fn block_expr(\n         format_to!(buf, \"    {}\\n\", stmt);\n     }\n     if let Some(tail_expr) = tail_expr {\n-        format_to!(buf, \"    {}\\n\", tail_expr)\n+        format_to!(buf, \"    {}\\n\", tail_expr);\n     }\n     buf += \"}\";\n     ast_from_text(&format!(\"fn f() {}\", buf))"}, {"sha": "003c90533e95b7bce841715e2695ca03703c26df", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -609,7 +609,7 @@ impl HasFormatSpecifier for ast::String {\n                 TextRange::new(range.start.try_into().unwrap(), range.end.try_into().unwrap())\n                     + offset,\n                 unescaped_char,\n-            ))\n+            ));\n         });\n \n         Some(res)\n@@ -631,7 +631,7 @@ impl ast::IntNumber {\n \n         let mut text = token.text();\n         if let Some(suffix) = self.suffix() {\n-            text = &text[..text.len() - suffix.len()]\n+            text = &text[..text.len() - suffix.len()];\n         }\n \n         let radix = self.radix();"}, {"sha": "95e37944cc4d14ff0faf9d28d35d49c8eae02626", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -28,7 +28,7 @@ pub fn function_declaration(node: &ast::Fn) -> String {\n         format_to!(buf, \"{} \", abi);\n     }\n     if let Some(name) = node.name() {\n-        format_to!(buf, \"fn {}\", name)\n+        format_to!(buf, \"fn {}\", name);\n     }\n     if let Some(type_params) = node.generic_param_list() {\n         format_to!(buf, \"{}\", type_params);"}, {"sha": "8c1de92048fe2480be7c47f41c3e838441a40dac", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -88,7 +88,7 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n     }\n \n     fn error(&mut self, error: ParseError) {\n-        self.inner.error(error, self.text_pos)\n+        self.inner.error(error, self.text_pos);\n     }\n }\n \n@@ -108,7 +108,7 @@ impl<'a> TextTreeSink<'a> {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingFinish => {\n                 self.eat_trivias();\n-                self.inner.finish_node()\n+                self.inner.finish_node();\n             }\n             State::PendingStart | State::Normal => unreachable!(),\n         }"}, {"sha": "57ae64cafe0cca8ec57cac9e5e4bfb9af6a02812", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -81,7 +81,7 @@ impl<N: AstNode> PartialEq for AstPtr<N> {\n \n impl<N: AstNode> Hash for AstPtr<N> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.raw.hash(state)\n+        self.raw.hash(state);\n     }\n }\n "}, {"sha": "bd7ea0240b9cae557528674722f20f1f4fd64da7", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -56,19 +56,19 @@ impl SyntaxTreeBuilder {\n \n     pub fn token(&mut self, kind: SyntaxKind, text: &str) {\n         let kind = RustLanguage::kind_to_raw(kind);\n-        self.inner.token(kind, text)\n+        self.inner.token(kind, text);\n     }\n \n     pub fn start_node(&mut self, kind: SyntaxKind) {\n         let kind = RustLanguage::kind_to_raw(kind);\n-        self.inner.start_node(kind)\n+        self.inner.start_node(kind);\n     }\n \n     pub fn finish_node(&mut self) {\n-        self.inner.finish_node()\n+        self.inner.finish_node();\n     }\n \n     pub fn error(&mut self, error: parser::ParseError, text_pos: TextSize) {\n-        self.errors.push(SyntaxError::new_at_offset(*error.0, text_pos))\n+        self.errors.push(SyntaxError::new_at_offset(*error.0, text_pos));\n     }\n }"}, {"sha": "a47b4b11c0ae6e5e22f288e7fc4288726c5f034d", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -77,23 +77,23 @@ impl Position {\n }\n \n pub fn insert(position: Position, elem: impl Element) {\n-    insert_all(position, vec![elem.syntax_element()])\n+    insert_all(position, vec![elem.syntax_element()]);\n }\n pub fn insert_raw(position: Position, elem: impl Element) {\n-    insert_all_raw(position, vec![elem.syntax_element()])\n+    insert_all_raw(position, vec![elem.syntax_element()]);\n }\n pub fn insert_all(position: Position, mut elements: Vec<SyntaxElement>) {\n     if let Some(first) = elements.first() {\n         if let Some(ws) = ws_before(&position, first) {\n-            elements.insert(0, ws.into())\n+            elements.insert(0, ws.into());\n         }\n     }\n     if let Some(last) = elements.last() {\n         if let Some(ws) = ws_after(&position, last) {\n-            elements.push(ws.into())\n+            elements.push(ws.into());\n         }\n     }\n-    insert_all_raw(position, elements)\n+    insert_all_raw(position, elements);\n }\n pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n     let (parent, index) = match position.repr {\n@@ -104,47 +104,47 @@ pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n }\n \n pub fn remove(elem: impl Element) {\n-    elem.syntax_element().detach()\n+    elem.syntax_element().detach();\n }\n pub fn remove_all(range: RangeInclusive<SyntaxElement>) {\n-    replace_all(range, Vec::new())\n+    replace_all(range, Vec::new());\n }\n pub fn remove_all_iter(range: impl IntoIterator<Item = SyntaxElement>) {\n     let mut it = range.into_iter();\n     if let Some(mut first) = it.next() {\n         match it.last() {\n             Some(mut last) => {\n                 if first.index() > last.index() {\n-                    mem::swap(&mut first, &mut last)\n+                    mem::swap(&mut first, &mut last);\n                 }\n-                remove_all(first..=last)\n+                remove_all(first..=last);\n             }\n             None => remove(first),\n         }\n     }\n }\n \n pub fn replace(old: impl Element, new: impl Element) {\n-    replace_with_many(old, vec![new.syntax_element()])\n+    replace_with_many(old, vec![new.syntax_element()]);\n }\n pub fn replace_with_many(old: impl Element, new: Vec<SyntaxElement>) {\n     let old = old.syntax_element();\n-    replace_all(old.clone()..=old, new)\n+    replace_all(old.clone()..=old, new);\n }\n pub fn replace_all(range: RangeInclusive<SyntaxElement>, new: Vec<SyntaxElement>) {\n     let start = range.start().index();\n     let end = range.end().index();\n     let parent = range.start().parent().unwrap();\n-    parent.splice_children(start..end + 1, new)\n+    parent.splice_children(start..end + 1, new);\n }\n \n pub fn append_child(node: &(impl Into<SyntaxNode> + Clone), child: impl Element) {\n     let position = Position::last_child_of(node);\n-    insert(position, child)\n+    insert(position, child);\n }\n pub fn append_child_raw(node: &(impl Into<SyntaxNode> + Clone), child: impl Element) {\n     let position = Position::last_child_of(node);\n-    insert_raw(position, child)\n+    insert_raw(position, child);\n }\n \n fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {"}, {"sha": "521ffce20ef6b6a7f4944bb9697f700ba2973488", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -137,7 +137,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                         if let Err(err) = char {\n                             push_err(1, (range.start, err));\n                         }\n-                    })\n+                    });\n                 }\n             }\n         }\n@@ -148,7 +148,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                         if let Err(err) = char {\n                             push_err(2, (range.start, err));\n                         }\n-                    })\n+                    });\n                 }\n             }\n         }"}, {"sha": "8eb4a10a3f502b4e3d24141f4e5c4b5fd6e4e9f8", "filename": "crates/syntax/src/validation/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -19,6 +19,6 @@ pub(crate) fn validate_block_expr(block: ast::BlockExpr, errors: &mut Vec<Syntax\n                 \"A block in this position cannot accept inner attributes\",\n                 attr.syntax().text_range(),\n             )\n-        }))\n+        }));\n     }\n }"}, {"sha": "24502ddb41aff489af210866ddbf1f4e93ca2aee", "filename": "crates/test_utils/src/assert_linear.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftest_utils%2Fsrc%2Fassert_linear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftest_utils%2Fsrc%2Fassert_linear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fassert_linear.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -43,7 +43,7 @@ impl AssertLinear {\n     }\n \n     pub fn sample(&mut self, x: f64, y: f64) {\n-        self.rounds.last_mut().unwrap().samples.push((x, y))\n+        self.rounds.last_mut().unwrap().samples.push((x, y));\n     }\n }\n \n@@ -54,7 +54,7 @@ impl Drop for AssertLinear {\n             for round in &self.rounds {\n                 eprintln!(\"\\n{}\", round.plot);\n             }\n-            panic!(\"Doesn't look linear!\")\n+            panic!(\"Doesn't look linear!\");\n         }\n     }\n }"}, {"sha": "7c5c18df7422a81fcc3b436bf12446db7bf0df2e", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -142,14 +142,14 @@ impl Fixture {\n \n             if line.starts_with(\"//-\") {\n                 let meta = Fixture::parse_meta_line(line);\n-                res.push(meta)\n+                res.push(meta);\n             } else {\n                 if line.starts_with(\"// \")\n                     && line.contains(':')\n                     && !line.contains(\"::\")\n                     && line.chars().all(|it| !it.is_uppercase())\n                 {\n-                    panic!(\"looks like invalid metadata line: {:?}\", line)\n+                    panic!(\"looks like invalid metadata line: {:?}\", line);\n                 }\n \n                 if let Some(entry) = res.last_mut() {\n@@ -256,9 +256,9 @@ impl MiniCore {\n         let line = line.strip_prefix(\"//- minicore:\").unwrap().trim();\n         for entry in line.split(\", \") {\n             if res.has_flag(entry) {\n-                panic!(\"duplicate minicore flag: {:?}\", entry)\n+                panic!(\"duplicate minicore flag: {:?}\", entry);\n             }\n-            res.activated_flags.push(entry.to_string())\n+            res.activated_flags.push(entry.to_string());\n         }\n \n         res\n@@ -354,7 +354,7 @@ impl MiniCore {\n             }\n \n             if keep {\n-                buf.push_str(line)\n+                buf.push_str(line);\n             }\n             if line_region {\n                 active_regions.pop().unwrap();"}, {"sha": "146e4f0c3060c276d4a9700bfb93e655bd334927", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -244,7 +244,7 @@ pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n \n                             range + line_start.1\n                         };\n-                        res.push((range, content))\n+                        res.push((range, content));\n                     }\n                     LineAnnotation::Continuation { mut offset, content } => {\n                         offset += annotation_offset;\n@@ -301,7 +301,7 @@ fn extract_line_annotations(mut line: &str) -> Vec<LineAnnotation> {\n         let mut file = false;\n         if !continuation && content.starts_with(\"file\") {\n             file = true;\n-            content = &content[\"file\".len()..]\n+            content = &content[\"file\".len()..];\n         }\n \n         let content = content.trim().to_string();\n@@ -371,7 +371,7 @@ fn main() {\n pub fn skip_slow_tests() -> bool {\n     let should_skip = std::env::var(\"CI\").is_err() && std::env::var(\"RUN_SLOW_TESTS\").is_err();\n     if should_skip {\n-        eprintln!(\"ignoring slow test\")\n+        eprintln!(\"ignoring slow test\");\n     } else {\n         let path = project_root().join(\"./target/.slow_tests_cookie\");\n         fs::write(&path, \".\").unwrap();\n@@ -432,7 +432,7 @@ pub fn bench(label: &'static str) -> impl Drop {\n \n     impl Drop for Bencher {\n         fn drop(&mut self) {\n-            eprintln!(\"{}: {}\", self.label, self.sw.elapsed())\n+            eprintln!(\"{}: {}\", self.label, self.sw.elapsed());\n         }\n     }\n "}, {"sha": "4270d1e3081afd92d082ba15583cc012993f6e37", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -110,7 +110,7 @@ impl TextEdit {\n \n         // FIXME: figure out a way to mutate the text in-place or reuse the\n         // memory in some other way\n-        *text = buf\n+        *text = buf;\n     }\n \n     pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {\n@@ -163,13 +163,13 @@ impl TextEditBuilder {\n         self.indels.is_empty()\n     }\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n-        self.indel(Indel::replace(range, replace_with))\n+        self.indel(Indel::replace(range, replace_with));\n     }\n     pub fn delete(&mut self, range: TextRange) {\n-        self.indel(Indel::delete(range))\n+        self.indel(Indel::delete(range));\n     }\n     pub fn insert(&mut self, offset: TextSize, text: String) {\n-        self.indel(Indel::insert(offset, text))\n+        self.indel(Indel::insert(offset, text));\n     }\n     pub fn finish(self) -> TextEdit {\n         let mut indels = self.indels;"}, {"sha": "7e147b3fa92e24163afcd686388e87ccceca7134", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -169,7 +169,7 @@ impl fmt::Display for Subtree {\n             match tt {\n                 TokenTree::Leaf(Leaf::Punct(p)) => {\n                     needs_space = p.spacing == Spacing::Alone;\n-                    fmt::Display::fmt(p, f)?\n+                    fmt::Display::fmt(p, f)?;\n                 }\n                 tt => fmt::Display::fmt(tt, f)?,\n             }"}, {"sha": "bcad0edf6422b484d817850f9580b391efdbba29", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -38,7 +38,7 @@ impl loader::Handle for NotifyHandle {\n         NotifyHandle { sender, _thread: thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {\n-        self.sender.send(Message::Config(config)).unwrap()\n+        self.sender.send(Message::Config(config)).unwrap();\n     }\n     fn invalidate(&mut self, path: AbsPathBuf) {\n         self.sender.send(Message::Invalidate(path)).unwrap();\n@@ -84,7 +84,7 @@ impl NotifyActor {\n                         if !config.watch.is_empty() {\n                             let (watcher_sender, watcher_receiver) = unbounded();\n                             let watcher = log_notify_error(RecommendedWatcher::new(move |event| {\n-                                watcher_sender.send(event).unwrap()\n+                                watcher_sender.send(event).unwrap();\n                             }));\n                             self.watcher = watcher.map(|it| (it, watcher_receiver));\n                         }\n@@ -99,7 +99,7 @@ impl NotifyActor {\n                         for (i, entry) in config.load.into_iter().enumerate() {\n                             let watch = config.watch.contains(&i);\n                             if watch {\n-                                self.watched_entries.push(entry.clone())\n+                                self.watched_entries.push(entry.clone());\n                             }\n                             let files = self.load_entry(entry, watch);\n                             self.send(loader::Message::Loaded { files });\n@@ -149,7 +149,7 @@ impl NotifyActor {\n                                 Some((path, contents))\n                             })\n                             .collect();\n-                        self.send(loader::Message::Loaded { files })\n+                        self.send(loader::Message::Loaded { files });\n                     }\n                 }\n             }\n@@ -165,7 +165,7 @@ impl NotifyActor {\n                 .into_iter()\n                 .map(|file| {\n                     if watch {\n-                        self.watch(file.clone())\n+                        self.watch(file.clone());\n                     }\n                     let contents = read(file.as_path());\n                     (file, contents)\n@@ -218,7 +218,7 @@ impl NotifyActor {\n         }\n     }\n     fn send(&mut self, msg: loader::Message) {\n-        (self.sender)(msg)\n+        (self.sender)(msg);\n     }\n }\n "}, {"sha": "6a89263e53988723aaa0623a036c3f1e69ff1c51", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -112,7 +112,7 @@ impl FileSetConfig {\n         let mut res = vec![FileSet::default(); self.len()];\n         for (file_id, path) in vfs.iter() {\n             let root = self.classify(path, &mut scratch_space);\n-            res[root].insert(file_id, path.clone())\n+            res[root].insert(file_id, path.clone());\n         }\n         res\n     }\n@@ -157,7 +157,7 @@ impl FileSetConfigBuilder {\n \n     /// Add a new set of paths prefixes.\n     pub fn add_file_set(&mut self, roots: Vec<VfsPath>) {\n-        self.roots.push(roots)\n+        self.roots.push(roots);\n     }\n \n     /// Build the `FileSetConfig`."}, {"sha": "75dca8a57e588a5ef49b097685402528e53a8caa", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -357,7 +357,7 @@ impl VirtualPath {\n             if !res.pop() {\n                 return None;\n             }\n-            path = &path[\"../\".len()..]\n+            path = &path[\"../\".len()..];\n         }\n         path = path.trim_start_matches(\"./\");\n         res.0 = format!(\"{}/{}\", res.0, path);"}, {"sha": "162d556fb7f8eac2e6b9e3d4e1f1623e7df7fa69", "filename": "lib/arena/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/lib%2Farena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/lib%2Farena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Flib.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -63,15 +63,15 @@ impl<T> Eq for Idx<T> {}\n \n impl<T> Hash for Idx<T> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.raw.hash(state)\n+        self.raw.hash(state);\n     }\n }\n \n impl<T> fmt::Debug for Idx<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut type_name = std::any::type_name::<T>();\n         if let Some(idx) = type_name.rfind(':') {\n-            type_name = &type_name[idx + 1..]\n+            type_name = &type_name[idx + 1..];\n         }\n         write!(f, \"Idx::<{}>({})\", type_name, self.raw)\n     }"}, {"sha": "d026df6c15025e2df8111023fade58819afda49b", "filename": "xtask/src/install.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c0b86cdec534aa0397e3d69335265cbfd0f5c3/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "patch": "@@ -13,7 +13,7 @@ const REQUIRED_RUST_VERSION: u32 = 55;\n impl flags::Install {\n     pub(crate) fn run(self) -> Result<()> {\n         if cfg!(target_os = \"macos\") {\n-            fix_path_for_mac().context(\"Fix path for mac\")?\n+            fix_path_for_mac().context(\"Fix path for mac\")?;\n         }\n         if let Some(server) = self.server() {\n             install_server(server).context(\"install server\")?;\n@@ -148,7 +148,7 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n         eprintln!(\n             \"\\nWARNING: at least rust 1.{}.0 is required to compile rust-analyzer\\n\",\n             REQUIRED_RUST_VERSION,\n-        )\n+        );\n     }\n     let features = match opts.malloc {\n         Malloc::System => &[][..],"}]}