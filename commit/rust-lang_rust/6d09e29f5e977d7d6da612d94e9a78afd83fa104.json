{"sha": "6d09e29f5e977d7d6da612d94e9a78afd83fa104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDllMjlmNWU5NzdkN2Q2ZGE2MTJkOTRlOWE3OGFmZDgzZmExMDQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:47:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:47:03Z"}, "message": "Rollup merge of #75530 - nixphix:docs/os-raw, r=jyn514\n\nSwitch to intra-doc links in os/raw/*.md\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514", "tree": {"sha": "cf02df86fb45122b02187043a8a8e3042d6f5e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf02df86fb45122b02187043a8a8e3042d6f5e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d09e29f5e977d7d6da612d94e9a78afd83fa104", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwZXCRBK7hj4Ov3rIwAAdHIIAAw+SdNrZZfJNEzh9KeVtxjq\nXI3Ptg2SwYa8OHVNGzmzqIGtnF3kaTIRX1xzbsyOGQivNCmdSZhzZsNhrTVAEqvs\n3/W7qiYGAj3kLCsGcZvr1SJb6aOVs9tgGQnJlkDw1LKYHOpY2sFpwoQMJ2eyHsSa\nrZtF6WO9O+KSCXRhbZFkqD6dyJZ9kXImJ5OGEvOi3bgjczSSqpUCVJea9YnlwSOb\nfjLouxJKTHygNIY+Ve6HlcFrhvO2pqzd+A7vJZ3nEqyV2KVUKv1NYFf3adnm3ihK\nZwKVxDYMiqInnxwhHY6i30cVaIGy3FIIHo8u015W4FKvdJIsPmDZtzMxHnrTY3M=\n=zcmH\n-----END PGP SIGNATURE-----\n", "payload": "tree cf02df86fb45122b02187043a8a8e3042d6f5e02\nparent 25641351159cdc6198fe28434956d2a3871360df\nparent 84539eb7b5de1b15467c591dcfb272fefa488bc8\nauthor Tyler Mandry <tmandry@gmail.com> 1597441623 -0700\ncommitter GitHub <noreply@github.com> 1597441623 -0700\n\nRollup merge of #75530 - nixphix:docs/os-raw, r=jyn514\n\nSwitch to intra-doc links in os/raw/*.md\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d09e29f5e977d7d6da612d94e9a78afd83fa104", "html_url": "https://github.com/rust-lang/rust/commit/6d09e29f5e977d7d6da612d94e9a78afd83fa104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d09e29f5e977d7d6da612d94e9a78afd83fa104/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25641351159cdc6198fe28434956d2a3871360df", "url": "https://api.github.com/repos/rust-lang/rust/commits/25641351159cdc6198fe28434956d2a3871360df", "html_url": "https://github.com/rust-lang/rust/commit/25641351159cdc6198fe28434956d2a3871360df"}, {"sha": "84539eb7b5de1b15467c591dcfb272fefa488bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/84539eb7b5de1b15467c591dcfb272fefa488bc8", "html_url": "https://github.com/rust-lang/rust/commit/84539eb7b5de1b15467c591dcfb272fefa488bc8"}], "stats": {"total": 46, "additions": 13, "deletions": 33}, "files": [{"sha": "8256b725acfa399877768d57c53b9b6c35915d4b", "filename": "library/std/src/os/raw/char.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -5,7 +5,5 @@ Equivalent to C's `char` type.\n C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n \n [C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n-[Rust's `char` type]: ../../primitive.char.html\n-[`CStr`]: ../../ffi/struct.CStr.html\n-[`i8`]: ../../primitive.i8.html\n-[`u8`]: ../../primitive.u8.html\n+[Rust's `char` type]: char\n+[`CStr`]: crate::ffi::CStr"}, {"sha": "57f4534829ec834a1b69ae377b393adc3dfd0519", "filename": "library/std/src/os/raw/double.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -3,5 +3,4 @@ Equivalent to C's `double` type.\n This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n \n [IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n-[`float`]: type.c_float.html\n-[`f64`]: ../../primitive.f64.html\n+[`float`]: c_float"}, {"sha": "61e2abc05189df2e12d7fa1b77894868f3e2d269", "filename": "library/std/src/os/raw/float.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -3,4 +3,3 @@ Equivalent to C's `float` type.\n This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n \n [IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n-[`f32`]: ../../primitive.f32.html"}, {"sha": "8062ff2307a9537ccf9007c982aa5e0eda09135e", "filename": "library/std/src/os/raw/int.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,6 +2,4 @@ Equivalent to C's `signed int` (`int`) type.\n \n This type will almost always be [`i32`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a [`short`]; some systems define it as an [`i16`], for example.\n \n-[`short`]: type.c_short.html\n-[`i32`]: ../../primitive.i32.html\n-[`i16`]: ../../primitive.i16.html\n+[`short`]: c_short"}, {"sha": "cc160783f78b7d5b429f92ac9e8750531ce64063", "filename": "library/std/src/os/raw/long.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,6 +2,4 @@ Equivalent to C's `signed long` (`long`) type.\n \n This type will always be [`i32`] or [`i64`]. Most notably, many Linux-based systems assume an `i64`, but Windows assumes `i32`. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an [`int`], although in practice, no system would have a `long` that is neither an `i32` nor `i64`.\n \n-[`int`]: type.c_int.html\n-[`i32`]: ../../primitive.i32.html\n-[`i64`]: ../../primitive.i64.html\n+[`int`]: c_int"}, {"sha": "49c61bd61f4ad71c2c569289b978b182f125c85c", "filename": "library/std/src/os/raw/longlong.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,6 +2,4 @@ Equivalent to C's `signed long long` (`long long`) type.\n \n This type will almost always be [`i64`], but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a [`long`], although in practice, no system would have a `long long` that is not an `i64`, as most systems do not have a standardised [`i128`] type.\n \n-[`long`]: type.c_int.html\n-[`i64`]: ../../primitive.i64.html\n-[`i128`]: ../../primitive.i128.html\n+[`long`]: c_int"}, {"sha": "69879c9f17f4d80af70250424ed18558942cdc5c", "filename": "library/std/src/os/raw/schar.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,5 +2,4 @@ Equivalent to C's `signed char` type.\n \n This type will always be [`i8`], but is included for completeness. It is defined as being a signed integer the same size as a C [`char`].\n \n-[`char`]: type.c_char.html\n-[`i8`]: ../../primitive.i8.html\n+[`char`]: c_char"}, {"sha": "3d1e53d1325f31a12fee0825a30a8e89a2c0c857", "filename": "library/std/src/os/raw/short.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,5 +2,4 @@ Equivalent to C's `signed short` (`short`) type.\n \n This type will almost always be [`i16`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as `i32`, for example.\n \n-[`char`]: type.c_char.html\n-[`i16`]: ../../primitive.i16.html\n+[`char`]: c_char"}, {"sha": "b633bb7f8dacf5bf2ca300d0ab0a793acbbc3a49", "filename": "library/std/src/os/raw/uchar.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,5 +2,4 @@ Equivalent to C's `unsigned char` type.\n \n This type will always be [`u8`], but is included for completeness. It is defined as being an unsigned integer the same size as a C [`char`].\n \n-[`char`]: type.c_char.html\n-[`u8`]: ../../primitive.u8.html\n+[`char`]: c_char"}, {"sha": "f3abea35937abd712a916313955b86932570fb00", "filename": "library/std/src/os/raw/uint.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,6 +2,4 @@ Equivalent to C's `unsigned int` type.\n \n This type will almost always be [`u32`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an [`int`]; some systems define it as a [`u16`], for example.\n \n-[`int`]: type.c_int.html\n-[`u32`]: ../../primitive.u32.html\n-[`u16`]: ../../primitive.u16.html\n+[`int`]: c_int"}, {"sha": "4ab304e65777326eeef30e4e950e0296bb38881b", "filename": "library/std/src/os/raw/ulong.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,6 +2,4 @@ Equivalent to C's `unsigned long` type.\n \n This type will always be [`u32`] or [`u64`]. Most notably, many Linux-based systems assume an `u64`, but Windows assumes `u32`. The C standard technically only requires that this type be an unsigned integer with the size of a [`long`], although in practice, no system would have a `ulong` that is neither a `u32` nor `u64`.\n \n-[`long`]: type.c_long.html\n-[`u32`]: ../../primitive.u32.html\n-[`u64`]: ../../primitive.u64.html\n+[`long`]: c_long"}, {"sha": "a27d70e17537d440fcddae685df71b4e1d6a9fd8", "filename": "library/std/src/os/raw/ulonglong.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,6 +2,4 @@ Equivalent to C's `unsigned long long` type.\n \n This type will almost always be [`u64`], but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a [`long long`], although in practice, no system would have a `long long` that is not a `u64`, as most systems do not have a standardised [`u128`] type.\n \n-[`long long`]: type.c_longlong.html\n-[`u64`]: ../../primitive.u64.html\n-[`u128`]: ../../primitive.u128.html\n+[`long long`]: c_longlong"}, {"sha": "6928e51b352c82d2a5aa413f20c402f4ff28dca4", "filename": "library/std/src/os/raw/ushort.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d09e29f5e977d7d6da612d94e9a78afd83fa104/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md?ref=6d09e29f5e977d7d6da612d94e9a78afd83fa104", "patch": "@@ -2,5 +2,4 @@ Equivalent to C's `unsigned short` type.\n \n This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a [`short`].\n \n-[`short`]: type.c_short.html\n-[`u16`]: ../../primitive.u16.html\n+[`short`]: c_short"}]}