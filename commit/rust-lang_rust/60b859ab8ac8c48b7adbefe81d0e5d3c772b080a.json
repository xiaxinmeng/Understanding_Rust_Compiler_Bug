{"sha": "60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYjg1OWFiOGFjOGM0OGI3YWRiZWZlODFkMGU1ZDNjNzcyYjA4MGE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-10-01T04:09:29Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-10-01T17:33:11Z"}, "message": "Remove all use of librustuv", "tree": {"sha": "dd69212497286ffa9073ec5838adf0e51c246af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd69212497286ffa9073ec5838adf0e51c246af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "html_url": "https://github.com/rust-lang/rust/commit/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49fcb27df63b845c42d4883c47d2cfc512edeb78", "url": "https://api.github.com/repos/rust-lang/rust/commits/49fcb27df63b845c42d4883c47d2cfc512edeb78", "html_url": "https://github.com/rust-lang/rust/commit/49fcb27df63b845c42d4883c47d2cfc512edeb78"}], "stats": {"total": 448, "additions": 43, "deletions": 405}, "files": [{"sha": "0a486ef03055606620796c1317764a08dec24cfe", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -11,15 +11,10 @@\n #![crate_type = \"bin\"]\n #![feature(phase)]\n \n-// we use our own (green) start below; do not link in libnative; issue #13247.\n-#![no_start]\n-\n #![deny(warnings)]\n \n extern crate test;\n extern crate getopts;\n-extern crate green;\n-extern crate rustuv;\n #[phase(plugin, link)] extern crate log;\n \n extern crate regex;\n@@ -41,11 +36,6 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n \n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n-}\n-\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);"}, {"sha": "66a1e46c82acba20320d1ecef03acc9115f4aad2", "filename": "src/doc/guide-runtime.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Fdoc%2Fguide-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Fdoc%2Fguide-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-runtime.md?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -240,7 +240,7 @@ To create a pool of green tasks which have no I/O support, you may shed the\n `rustuv::event_loop`. All tasks will have no I/O support, but they will still be\n able to deschedule/reschedule (use channels, locks, etc).\n \n-~~~{.rust}\n+~~~{.ignore}\n extern crate green;\n extern crate rustuv;\n "}, {"sha": "7c67a3840b0572be12345a08e89c5e65361ca3b8", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -128,35 +128,6 @@\n //! > **Note**: This `main` function in this example does *not* have I/O\n //! >           support. The basic event loop does not provide any support\n //!\n-//! # Starting with I/O support in libgreen\n-//!\n-//! ```rust\n-//! extern crate green;\n-//! extern crate rustuv;\n-//!\n-//! #[start]\n-//! fn start(argc: int, argv: *const *const u8) -> int {\n-//!     green::start(argc, argv, rustuv::event_loop, main)\n-//! }\n-//!\n-//! fn main() {\n-//!     // this code is running in a pool of schedulers all powered by libuv\n-//! }\n-//! ```\n-//!\n-//! The above code can also be shortened with a macro from libgreen.\n-//!\n-//! ```\n-//! #![feature(phase)]\n-//! #[phase(plugin)] extern crate green;\n-//!\n-//! green_start!(main)\n-//!\n-//! fn main() {\n-//!     // run inside of a green pool\n-//! }\n-//! ```\n-//!\n //! # Using a scheduler pool\n //!\n //! This library adds a `GreenTaskBuilder` trait that extends the methods\n@@ -165,17 +136,13 @@\n //!\n //! ```rust\n //! extern crate green;\n-//! extern crate rustuv;\n //!\n //! # fn main() {\n //! use std::task::TaskBuilder;\n //! use green::{SchedPool, PoolConfig, GreenTaskBuilder};\n //!\n //! let mut config = PoolConfig::new();\n //!\n-//! // Optional: Set the event loop to be rustuv's to allow I/O to work\n-//! config.event_loop_factory = rustuv::event_loop;\n-//!\n //! let mut pool = SchedPool::new(config);\n //!\n //! // Spawn tasks into the pool of schedulers\n@@ -221,7 +188,6 @@\n #![allow(deprecated)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n-#[cfg(test)] extern crate rustuv;\n extern crate libc;\n extern crate alloc;\n \n@@ -253,33 +219,6 @@ pub mod sleeper_list;\n pub mod stack;\n pub mod task;\n \n-/// A helper macro for booting a program with libgreen\n-///\n-/// # Example\n-///\n-/// ```\n-/// #![feature(phase)]\n-/// #[phase(plugin)] extern crate green;\n-///\n-/// green_start!(main)\n-///\n-/// fn main() {\n-///     // running with libgreen\n-/// }\n-/// ```\n-#[macro_export]\n-macro_rules! green_start( ($f:ident) => (\n-    mod __start {\n-        extern crate green;\n-        extern crate rustuv;\n-\n-        #[start]\n-        fn start(argc: int, argv: *const *const u8) -> int {\n-            green::start(argc, argv, rustuv::event_loop, super::$f)\n-        }\n-    }\n-) )\n-\n /// Set up a default runtime configuration, given compiler-supplied arguments.\n ///\n /// This function will block until the entire pool of M:N schedulers have"}, {"sha": "feb381e4a21b4bc381b99f057b2586fe902d5963", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -1024,8 +1024,6 @@ fn new_sched_rng() -> XorShiftRng {\n \n #[cfg(test)]\n mod test {\n-    use rustuv;\n-\n     use std::rt::task::TaskOpts;\n     use std::rt::task::Task;\n     use std::rt::local::Local;\n@@ -1277,28 +1275,6 @@ mod test {\n     //    }\n     //}\n \n-    #[test]\n-    fn test_io_callback() {\n-        use std::io::timer;\n-\n-        let mut pool = SchedPool::new(PoolConfig {\n-            threads: 2,\n-            event_loop_factory: rustuv::event_loop,\n-        });\n-\n-        // This is a regression test that when there are no schedulable tasks in\n-        // the work queue, but we are performing I/O, that once we do put\n-        // something in the work queue again the scheduler picks it up and\n-        // doesn't exit before emptying the work queue\n-        pool.spawn(TaskOpts::new(), proc() {\n-            spawn(proc() {\n-                timer::sleep(Duration::milliseconds(10));\n-            });\n-        });\n-\n-        pool.shutdown();\n-    }\n-\n     #[test]\n     fn wakeup_across_scheds() {\n         let (tx1, rx1) = channel();"}, {"sha": "3b751a5a28d8945bfe9883b1afef394555787ae8", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -506,7 +506,7 @@ mod tests {\n     fn spawn_opts(opts: TaskOpts, f: proc():Send) {\n         let mut pool = SchedPool::new(PoolConfig {\n             threads: 1,\n-            event_loop_factory: ::rustuv::event_loop,\n+            event_loop_factory: super::super::basic::event_loop,\n         });\n         pool.spawn(opts, f);\n         pool.shutdown();"}, {"sha": "7304871cf214c5447389c1166c4015f5a788de90", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -116,11 +116,6 @@\n \n #![reexport_test_harness_main = \"test_main\"]\n \n-// When testing libstd, bring in libuv as the I/O backend so tests can print\n-// things and all of the std::io tests have an I/O interface to run on top\n-// of\n-#[cfg(test)] extern crate rustuv;\n-#[cfg(test)] extern crate native;\n #[cfg(test)] extern crate green;\n #[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n@@ -187,12 +182,6 @@ pub use unicode::char;\n \n pub use core_sync::comm;\n \n-// Run tests with libgreen instead of libnative.\n-#[cfg(test)] #[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, test_main)\n-}\n-\n /* Exported macros */\n \n pub mod macros;"}, {"sha": "6f02bff9f310e5e4caee9a005a0c96f529db1c8b", "filename": "src/test/bench/rt-spawn-rate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-spawn-rate.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -11,7 +11,6 @@\n #![no_start]\n \n extern crate green;\n-extern crate rustuv;\n \n use std::task::spawn;\n use std::os;\n@@ -22,7 +21,7 @@ use std::uint;\n \n #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n+    green::start(argc, argv, green::basic::event_loop, main)\n }\n \n fn main() {"}, {"sha": "2eddc301a83681e156deba3443e9849b6b6ee6eb", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -40,14 +40,9 @@\n \n // no-pretty-expanded\n \n-#![feature(phase)]\n-#[phase(plugin)] extern crate green;\n-\n use std::string::String;\n use std::fmt;\n \n-green_start!(main)\n-\n fn print_complements() {\n     let all = [Blue, Red, Yellow];\n     for aa in all.iter() {"}, {"sha": "10408dd0ef43d9b087c46ae2b504b96cad97de34", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -40,13 +40,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(phase)]\n-#[phase(plugin)] extern crate green;\n-\n use std::sync::Arc;\n \n-green_start!(main)\n-\n //\n // Utilities.\n //"}, {"sha": "685e900b37eee52bbf925397f49dd9c9923f83ac", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -40,18 +40,14 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(phase)]\n #![allow(non_snake_case)]\n-#[phase(plugin)] extern crate green;\n \n use std::from_str::FromStr;\n use std::iter::count;\n use std::cmp::min;\n use std::os;\n use std::sync::{Arc, RWLock};\n \n-green_start!(main)\n-\n fn A(i: uint, j: uint) -> f64 {\n     ((i + j) * (i + j + 1) / 2 + i + 1) as f64\n }"}, {"sha": "cda0feb8b55a312d8eccd92bf576201c78b9daca", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -38,10 +38,6 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-#![feature(phase)]\n-#[phase(plugin)] extern crate green;\n-green_start!(main)\n-\n fn start(n_tasks: int, token: int) {\n     let (tx, mut rx) = channel();\n     tx.send(token);"}, {"sha": "bc2723f6d74b3b2900577d78d43f2c66e31025ef", "filename": "src/test/bench/silly-test-spawn.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fsilly-test-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Fbench%2Fsilly-test-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsilly-test-spawn.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -9,16 +9,13 @@\n // except according to those terms.\n \n // This is (hopefully) a quick test to get a good idea about spawning\n-// performance in libgreen. Note that this uses the rustuv event loop rather\n-// than the basic event loop in order to get a better real world idea about the\n-// performance of a task spawn.\n+// performance in libgreen.\n \n extern crate green;\n-extern crate rustuv;\n \n #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n+    green::start(argc, argv, green::basic::event_loop, main)\n }\n \n fn main() {"}, {"sha": "c7753a67464ac64ad0e9b8193c8996632a076f41", "filename": "src/test/run-make/bootstrap-from-c-with-green/Makefile", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49fcb27df63b845c42d4883c47d2cfc512edeb78/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/49fcb27df63b845c42d4883c47d2cfc512edeb78/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile?ref=49fcb27df63b845c42d4883c47d2cfc512edeb78", "patch": "@@ -1,12 +0,0 @@\n--include ../tools.mk\n-\n-HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n-# This overrides the LD_LIBRARY_PATH for RUN\n-TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n-\n-all:\n-\t$(RUSTC) lib.rs\n-\t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n-\t$(call RUN,main)\n-\t$(call REMOVE_DYLIBS,boot)\n-\t$(call FAIL,main)"}, {"sha": "7f17018c486c0e11ef543dc54e8fa4fa69bff0c9", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49fcb27df63b845c42d4883c47d2cfc512edeb78/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fcb27df63b845c42d4883c47d2cfc512edeb78/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=49fcb27df63b845c42d4883c47d2cfc512edeb78", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"boot\"]\n-#![crate_type=\"dylib\"]\n-\n-extern crate rustuv;\n-extern crate green;\n-\n-#[no_mangle] // this needs to get called from C\n-pub extern \"C\" fn foo(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, proc() {\n-        spawn(proc() {\n-            println!(\"hello\");\n-        });\n-    })\n-}"}, {"sha": "1872c1ea43b1139cfaf90e728d6f11d8c07c2c52", "filename": "src/test/run-make/bootstrap-from-c-with-green/main.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49fcb27df63b845c42d4883c47d2cfc512edeb78/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Fmain.c", "raw_url": "https://github.com/rust-lang/rust/raw/49fcb27df63b845c42d4883c47d2cfc512edeb78/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Fmain.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Fmain.c?ref=49fcb27df63b845c42d4883c47d2cfc512edeb78", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// this is the rust entry point that we're going to call.\n-int foo(int argc, char *argv[]);\n-\n-int main(int argc, char *argv[]) {\n-  return foo(argc, argv);\n-}"}, {"sha": "4bde2712140ef7f98305a756eeb51d6f223fe61e", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 12, "deletions": 41, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -21,53 +21,24 @@\n extern crate libc;\n \n extern crate native;\n-extern crate green;\n-extern crate rustuv;\n \n-use std::io::{Process, Command};\n+use std::io::{Process, Command, timer};\n use std::time::Duration;\n \n+use libc;\n+use std::str;\n+\n macro_rules! succeed( ($e:expr) => (\n     match $e { Ok(..) => {}, Err(e) => fail!(\"failure: {}\", e) }\n ) )\n \n-macro_rules! iotest (\n-    { fn $name:ident() $b:block $($a:attr)* } => (\n-        mod $name {\n-            #![allow(unused_imports)]\n-\n-            use std::io::timer;\n-            use libc;\n-            use std::str;\n-            use std::io::process::Command;\n-            use native;\n-            use super::{sleeper, test_destroy_actually_kills};\n-\n-            fn f() $b\n-\n-            $($a)* #[test] fn green() { f() }\n-            $($a)* #[test] fn native() {\n-                use native;\n-                let (tx, rx) = channel();\n-                native::task::spawn(proc() { tx.send(f()) });\n-                rx.recv();\n-            }\n-        }\n-    )\n-)\n-\n-#[cfg(test)] #[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, test_main)\n-}\n-\n-iotest!(fn test_destroy_once() {\n+fn test_destroy_once() {\n     let mut p = sleeper();\n     match p.signal_exit() {\n         Ok(()) => {}\n         Err(e) => fail!(\"error: {}\", e),\n     }\n-})\n+}\n \n #[cfg(unix)]\n pub fn sleeper() -> Process {\n@@ -81,11 +52,11 @@ pub fn sleeper() -> Process {\n     Command::new(\"ping\").arg(\"127.0.0.1\").arg(\"-n\").arg(\"1000\").spawn().unwrap()\n }\n \n-iotest!(fn test_destroy_twice() {\n+fn test_destroy_twice() {\n     let mut p = sleeper();\n     succeed!(p.signal_exit()); // this shouldnt crash...\n     let _ = p.signal_exit(); // ...and nor should this (and nor should the destructor)\n-})\n+}\n \n pub fn test_destroy_actually_kills(force: bool) {\n     use std::io::process::{Command, ProcessOutput, ExitStatus, ExitSignal};\n@@ -129,10 +100,10 @@ pub fn test_destroy_actually_kills(force: bool) {\n     }\n }\n \n-iotest!(fn test_unforced_destroy_actually_kills() {\n+fn test_unforced_destroy_actually_kills() {\n     test_destroy_actually_kills(false);\n-})\n+}\n \n-iotest!(fn test_forced_destroy_actually_kills() {\n+fn test_forced_destroy_actually_kills() {\n     test_destroy_actually_kills(true);\n-})\n+}"}, {"sha": "536a72f9cb34eb08dd63587f87cb257f908e4885", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -8,18 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate native;\n-extern crate green;\n-extern crate rustuv;\n-\n use std::time::Duration;\n \n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n-}\n-\n fn main() {\n     native::task::spawn(proc() customtask());\n }"}, {"sha": "c868189197e0a5c60738c11076ecb039ad84b6d5", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -10,48 +10,25 @@\n \n // ignore-fast\n \n-extern crate green;\n-extern crate rustuv;\n-extern crate native;\n-\n use std::os;\n use std::io;\n use std::str;\n \n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n-}\n-\n fn main() {\n     let args = os::args();\n     let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n-        if args[2].as_slice() == \"green\" {\n-            child();\n-        } else {\n-            let (tx, rx) = channel();\n-            native::task::spawn(proc() { tx.send(child()); });\n-            rx.recv();\n-        }\n+        child();\n     } else {\n-        parent(\"green\".to_string());\n-        parent(\"native\".to_string());\n-        let (tx, rx) = channel();\n-        native::task::spawn(proc() {\n-            parent(\"green\".to_string());\n-            parent(\"native\".to_string());\n-            tx.send(());\n-        });\n-        rx.recv();\n+        parent();\n     }\n }\n \n-fn parent(flavor: String) {\n+fn parent() {\n     let args = os::args();\n     let args = args.as_slice();\n     let mut p = io::process::Command::new(args[0].as_slice())\n-                                     .arg(\"child\").arg(flavor).spawn().unwrap();\n+                                     .arg(\"child\").spawn().unwrap();\n     p.stdin.get_mut_ref().write_str(\"test1\\ntest2\\ntest3\").unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(out.status.success());"}, {"sha": "9fe41f7e0243e9796ce56e719f4518df081a9efb", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -11,22 +11,13 @@\n // This test may not always fail, but it can be flaky if the race it used to\n // expose is still present.\n \n-extern crate green;\n-extern crate rustuv;\n-extern crate native;\n-\n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n-}\n-\n fn helper(rx: Receiver<Sender<()>>) {\n     for tx in rx.iter() {\n         let _ = tx.send_opt(());\n     }\n }\n \n-fn test() {\n+fn main() {\n     let (tx, rx) = channel();\n     spawn(proc() { helper(rx) });\n     let (snd, rcv) = channel::<int>();\n@@ -40,17 +31,3 @@ fn test() {\n         }\n     }\n }\n-\n-fn main() {\n-    let (tx, rx) = channel();\n-    spawn(proc() {\n-        tx.send(test());\n-    });\n-    rx.recv();\n-\n-    let (tx, rx) = channel();\n-    native::task::spawn(proc() {\n-        tx.send(test());\n-    });\n-    rx.recv();\n-}"}, {"sha": "bee4baf68a03d9483bd6ae54c7f7aaaca814f5ff", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -8,19 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(phase)]\n-\n-#[phase(plugin, link)]\n-extern crate green;\n-extern crate native;\n \n use std::io::process;\n use std::io::Command;\n use std::io;\n use std::os;\n \n-green_start!(main)\n-\n fn main() {\n     let args = os::args();\n     if args.len() > 1 && args.get(1).as_slice() == \"child\" {\n@@ -29,12 +22,6 @@ fn main() {\n \n     test();\n \n-    let (tx, rx) = channel();\n-    native::task::spawn(proc() {\n-        tx.send(test());\n-    });\n-    rx.recv();\n-\n }\n \n fn child() {\n@@ -52,4 +39,3 @@ fn test() {\n                                      .spawn().unwrap();\n     assert!(p.wait().unwrap().success());\n }\n-"}, {"sha": "cc80232691d1d3206b4ed8f9f9d730fb3000bf85", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -8,18 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(phase)]\n-extern crate native;\n-#[phase(plugin)]\n-extern crate green;\n-\n-use native::NativeTaskBuilder;\n use std::io::{TempDir, Command, fs};\n use std::os;\n use std::task::TaskBuilder;\n \n-green_start!(main)\n-\n fn main() {\n     // If we're the child, make sure we were invoked correctly\n     let args = os::args();\n@@ -28,11 +20,6 @@ fn main() {\n     }\n \n     test();\n-    let (tx, rx) = channel();\n-    TaskBuilder::new().native().spawn(proc() {\n-        tx.send(test());\n-    });\n-    rx.recv();\n }\n \n fn test() {"}, {"sha": "8c3d765b5eebbd08c89a8b24b55a75094dd68165", "filename": "src/test/run-pass/issue-16272.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16272.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -8,28 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(phase)]\n-#[phase(plugin)]\n-extern crate green;\n-extern crate native;\n-\n-use native::NativeTaskBuilder;\n use std::io::{process, Command};\n use std::os;\n-use std::task::TaskBuilder;\n-\n-green_start!(main)\n \n fn main() {\n     let len = os::args().len();\n \n     if len == 1 {\n         test();\n-        let (tx, rx) = channel();\n-        TaskBuilder::new().native().spawn(proc() {\n-            tx.send(test());\n-        });\n-        rx.recv();\n     } else {\n         assert_eq!(len, 3);\n     }"}, {"sha": "f4ba9901560b89c22ada7eceba6204dd79ac5c29", "filename": "src/test/run-pass/process-detach.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-detach.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -19,19 +19,12 @@\n // Note that the first thing we do is put ourselves in our own process group so\n // we don't interfere with other running tests.\n \n-extern crate green;\n-extern crate rustuv;\n extern crate libc;\n \n use std::io::process;\n use std::io::process::Command;\n use std::io::signal::{Listener, Interrupt};\n \n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n-}\n-\n fn main() {\n     unsafe { libc::setsid(); }\n "}, {"sha": "fe882937ca0189fbae6d41ad094b9b682a7e6729", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -13,30 +13,14 @@\n //              quite quickly and it takes a few seconds for the sockets to get\n //              recycled.\n \n-#![feature(phase)]\n-\n-#[phase(plugin)]\n-extern crate green;\n-extern crate native;\n-\n use std::io::{TcpListener, Listener, Acceptor, EndOfFile, TcpStream};\n use std::sync::{atomic, Arc};\n-use std::task::TaskBuilder;\n-use native::NativeTaskBuilder;\n \n static N: uint = 8;\n static M: uint = 20;\n \n-green_start!(main)\n-\n fn main() {\n     test();\n-\n-    let (tx, rx) = channel();\n-    TaskBuilder::new().native().spawn(proc() {\n-        tx.send(test());\n-    });\n-    rx.recv();\n }\n \n fn test() {\n@@ -98,4 +82,3 @@ fn test() {\n     // Everything should have been accepted.\n     assert_eq!(cnt.load(atomic::SeqCst), N * M);\n }\n-"}, {"sha": "167e89ffd30701c56eee4cd2bd302ee13a1622df", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 21, "deletions": 46, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -20,40 +20,16 @@\n #![allow(experimental)]\n #![reexport_test_harness_main = \"test_main\"]\n \n-extern crate native;\n-extern crate green;\n-extern crate rustuv;\n+#![allow(unused_imports)]\n \n-#[cfg(test)] #[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, test_main)\n-}\n-\n-macro_rules! iotest (\n-    { fn $name:ident() $b:block $(#[$a:meta])* } => (\n-        mod $name {\n-            #![allow(unused_imports)]\n-\n-            use std::io::*;\n-            use std::io::net::tcp::*;\n-            use std::io::test::*;\n-            use std::io;\n-            use std::time::Duration;\n-\n-            fn f() $b\n+use std::io::*;\n+use std::io::net::tcp::*;\n+use std::io::test::*;\n+use std::io;\n+use std::time::Duration;\n \n-            $(#[$a])* #[test] fn green() { f() }\n-            $(#[$a])* #[test] fn native() {\n-                use native;\n-                let (tx, rx) = channel();\n-                native::task::spawn(proc() { tx.send(f()) });\n-                rx.recv();\n-            }\n-        }\n-    )\n-)\n-\n-iotest!(fn eventual_timeout() {\n+#[cfg_attr(target_os = \"freebsd\", ignore)]\n+fn eventual_timeout() {\n     use native;\n     let addr = next_test_ip4();\n     let host = addr.ip.to_string();\n@@ -80,30 +56,29 @@ iotest!(fn eventual_timeout() {\n         }\n     }\n     fail!(\"never timed out!\");\n-} #[cfg_attr(target_os = \"freebsd\", ignore)])\n+}\n \n-iotest!(fn timeout_success() {\n+fn timeout_success() {\n     let addr = next_test_ip4();\n     let host = addr.ip.to_string();\n     let port = addr.port;\n     let _l = TcpListener::bind(host.as_slice(), port).unwrap().listen();\n \n     assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_ok());\n-})\n+}\n \n-iotest!(fn timeout_error() {\n+fn timeout_error() {\n     let addr = next_test_ip4();\n \n     assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_err());\n-})\n-\n-    iotest!(fn connect_timeout_zero() {\n-        let addr = next_test_ip4();\n-        assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(0)).is_err());\n-    })\n+}\n \n-    iotest!(fn connect_timeout_negative() {\n-        let addr = next_test_ip4();\n-        assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(-1)).is_err());\n-    })\n+fn connect_timeout_zero() {\n+    let addr = next_test_ip4();\n+    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(0)).is_err());\n+}\n \n+fn connect_timeout_negative() {\n+    let addr = next_test_ip4();\n+    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(-1)).is_err());\n+}"}, {"sha": "506e1a9bbe73f1a02140186e71b48c8c8eb4b5e5", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b859ab8ac8c48b7adbefe81d0e5d3c772b080a/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=60b859ab8ac8c48b7adbefe81d0e5d3c772b080a", "patch": "@@ -16,20 +16,13 @@\n #[phase(plugin, link)]\n extern crate log;\n extern crate libc;\n-extern crate green;\n-extern crate rustuv;\n extern crate debug;\n \n use std::io::net::tcp::{TcpListener, TcpStream};\n use std::io::{Acceptor, Listener};\n use std::task::TaskBuilder;\n use std::time::Duration;\n \n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, main)\n-}\n-\n fn main() {\n     // This test has a chance to time out, try to not let it time out\n     spawn(proc() {"}]}