{"sha": "2e485ea086990ed6a13c4f3116006635a6266ca1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNDg1ZWEwODY5OTBlZDZhMTNjNGYzMTE2MDA2NjM1YTYyNjZjYTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-29T03:00:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-29T03:03:15Z"}, "message": "Better attribute handling", "tree": {"sha": "0e252e2d7899ae43a043609a03402a89dd1c113c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e252e2d7899ae43a043609a03402a89dd1c113c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e485ea086990ed6a13c4f3116006635a6266ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e485ea086990ed6a13c4f3116006635a6266ca1", "html_url": "https://github.com/rust-lang/rust/commit/2e485ea086990ed6a13c4f3116006635a6266ca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e485ea086990ed6a13c4f3116006635a6266ca1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "decafbbaea1f2131f2c414dfb21da594b43464cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/decafbbaea1f2131f2c414dfb21da594b43464cd", "html_url": "https://github.com/rust-lang/rust/commit/decafbbaea1f2131f2c414dfb21da594b43464cd"}], "stats": {"total": 126, "additions": 101, "deletions": 25}, "files": [{"sha": "c861d631be855d9d3b0bc5eced05bcb29407c8be", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -44,6 +44,8 @@ impl<'a> FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(end));\n \n         if start == end {\n+            let file_name = &self.codemap.lookup_char_pos(start).file.name;\n+            process_last_snippet(self, \"\", file_name, \"\");\n             return;\n         }\n "}, {"sha": "076a826035b86092359be6e3212e03e7d3826ae7", "filename": "src/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -262,8 +262,8 @@ fn run(args: Vec<String>, write_mode: WriteMode) {\n \n fn main() {\n     let args: Vec<_> = std::env::args().collect();\n-    //run(args, WriteMode::Display);\n-    run(args, WriteMode::Overwrite);\n+    run(args, WriteMode::Display);\n+    //run(args, WriteMode::Overwrite);\n     std::env::set_exit_status(0);\n \n     // TODO unit tests"}, {"sha": "e4d48201dd6e116a1ea26f51b9c6d554c6b1df63", "filename": "src/visitor.rs", "status": "modified", "additions": 68, "deletions": 9, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -9,9 +9,11 @@\n // except according to those terms.\n \n use syntax::ast;\n-use syntax::codemap::{CodeMap, Span, BytePos};\n+use syntax::codemap::{self, CodeMap, Span, BytePos};\n use syntax::visit;\n \n+use utils;\n+\n use {MAX_WIDTH, TAB_SPACES, SKIP_ANNOTATION};\n use changes::ChangeSet;\n \n@@ -35,6 +37,26 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         self.last_pos = ex.span.hi;\n     }\n \n+    fn visit_stmt(&mut self, stmt: &'v ast::Stmt) {\n+        // If the stmt is actually an item, then we'll handle any missing spans\n+        // there. This is important because of annotations.\n+        // Although it might make more sense for the statement span to include\n+        // any annotations on the item.\n+        let skip_missing = match stmt.node {\n+            ast::Stmt_::StmtDecl(ref decl, _) => {\n+                match decl.node {\n+                    ast::Decl_::DeclItem(_) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        };\n+        if !skip_missing {\n+            self.format_missing_with_indent(stmt.span.lo);\n+        }\n+        visit::walk_stmt(self, stmt);\n+    }\n+\n     fn visit_block(&mut self, b: &'v ast::Block) {\n         debug!(\"visit_block: {:?} {:?}\",\n                self.codemap.lookup_char_pos(b.span.lo),\n@@ -46,7 +68,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         self.block_indent += TAB_SPACES;\n \n         for stmt in &b.stmts {\n-            self.format_missing_with_indent(stmt.span.lo);\n             self.visit_stmt(&stmt)\n         }\n         match b.expr {\n@@ -148,6 +169,12 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 visit::walk_item(self, item);\n                 self.block_indent -= TAB_SPACES;\n             }\n+            ast::Item_::ItemExternCrate(_) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                let new_str = self.snippet(item.span);\n+                self.changes.push_str_span(item.span, &new_str);\n+                self.last_pos = item.span.hi;\n+            }\n             _ => {\n                 visit::walk_item(self, item);\n             }\n@@ -206,18 +233,50 @@ impl<'a> FmtVisitor<'a> {\n \n     // Returns true if we should skip the following item.\n     fn visit_attrs(&mut self, attrs: &[ast::Attribute]) -> bool {\n-        for a in attrs {\n-            self.format_missing_with_indent(a.span.lo);\n+        if attrs.len() == 0 {\n+            return false;\n+        }\n+\n+        let first = &attrs[0];\n+        self.format_missing_with_indent(first.span.lo);\n+\n+        match self.rewrite_attrs(attrs, self.block_indent) {\n+            Some(s) => {\n+                self.changes.push_str_span(first.span, &s);\n+                let last = attrs.last().unwrap();\n+                self.last_pos = last.span.hi;\n+                false\n+            }\n+            None => true\n+        }\n+    }\n+\n+    fn rewrite_attrs(&self, attrs: &[ast::Attribute], indent: usize) -> Option<String> {\n+        let mut result = String::new();\n+        let indent = utils::make_indent(indent);\n+\n+        for (i, a) in attrs.iter().enumerate() {\n             if is_skip(&a.node.value) {\n-                return true;\n+                return None;\n             }\n \n-            let attr_str = self.snippet(a.span);\n-            self.changes.push_str_span(a.span, &attr_str);\n-            self.last_pos = a.span.hi;\n+            result.push_str(&self.snippet(a.span));\n+\n+            if i < attrs.len() - 1 {\n+                result.push('\\n');\n+                result.push_str(&indent);\n+\n+                let comment = self.snippet(codemap::mk_sp(a.span.hi, attrs[i+1].span.lo));\n+                let comment = comment.trim();\n+                if comment.len() > 0 {\n+                    result.push_str(&self.snippet(a.span));\n+                    result.push('\\n');\n+                    result.push_str(comment);\n+                }\n+            }\n         }\n \n-        false\n+        Some(result)\n     }\n }\n "}, {"sha": "fe06195b154d3ad10fce6a766f35eaa7bd9aee88", "filename": "tests/idem/attrib-extern-crate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fattrib-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fattrib-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fattrib-extern-crate.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -0,0 +1,17 @@\n+// Attributes on extern crate.\n+\n+extern crate Foo;\n+#[Attr1]\n+extern crate Bar;\n+#[Attr2]\n+#[Attr2]\n+extern crate Baz;\n+\n+fn foo() {\n+    extern crate Foo;\n+    #[Attr1]\n+    extern crate Bar;\n+    #[Attr2]\n+    #[Attr2]\n+    extern crate Baz;\n+}"}, {"sha": "e36f64254213eef94396d9240924eb8bfc819d75", "filename": "tests/idem/attrib.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fattrib.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -1,17 +1,11 @@\n // Test attributes and doc comments are preserved.\n \n-extern crate Foo;\n-#[Attr1]\n-extern crate Bar;\n-#[Attr2]\n-#[Attr2]\n-extern crate Baz;\n-\n /// Blah blah blah.\n impl Bar {\n     /// Blah blah blooo.\n     #[an_attribute]\n-    fn foo(&mut self) -> isize {}\n+    fn foo(&mut self) -> isize {\n+    }\n \n     /// Blah blah bing.\n     pub fn f2(self) {\n@@ -22,8 +16,3 @@ impl Bar {\n     fn f3(self) -> Dog {\n     }\n }\n-\n-/// Blah\n-fn main() {\n-    println!(\"Hello world!\");\n-}"}, {"sha": "748a6edb6ca12075fe139a0cc73e66933de4cb40", "filename": "tests/idem/comments-fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fcomments-fn.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -16,7 +16,8 @@ fn foo<F, G>(a: aaaaaaaaaaaaa, // A comment\n \n }\n \n-fn bar<F /* comment on F */, G /* comment on G */>() {}\n+fn bar<F /* comment on F */, G /* comment on G */>() {\n+}\n \n fn baz() -> Baz /* Comment after return type */ {\n }"}, {"sha": "9891994c66e76c4f609fae5bfe7024abaff1f911", "filename": "tests/idem/imports.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e485ea086990ed6a13c4f3116006635a6266ca1/tests%2Fidem%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fimports.rs?ref=2e485ea086990ed6a13c4f3116006635a6266ca1", "patch": "@@ -0,0 +1,8 @@\n+// Imports.\n+\n+// Long import.\n+use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic,\n+                  ItemDefaultImpl};\n+\n+use {Foo, Bar};\n+use Foo::{Bar, Baz};"}]}