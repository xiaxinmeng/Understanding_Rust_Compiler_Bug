{"sha": "855fa13463eea85cf91b37726c5d2e4351a6da6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NWZhMTM0NjNlZWE4NWNmOTFiMzc3MjZjNWQyZTQzNTFhNmRhNmY=", "commit": {"author": {"name": "Audun Halland", "email": "audun.halland@pm.me", "date": "2021-07-25T22:31:42Z"}, "committer": {"name": "Audun Halland", "email": "audun.halland@pm.me", "date": "2021-07-25T23:31:09Z"}, "message": "simplify primary_body_of, fix comment to match ret signature", "tree": {"sha": "3155f446e616ee4b575133b96b68d5502bd5257e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3155f446e616ee4b575133b96b68d5502bd5257e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855fa13463eea85cf91b37726c5d2e4351a6da6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855fa13463eea85cf91b37726c5d2e4351a6da6f", "html_url": "https://github.com/rust-lang/rust/commit/855fa13463eea85cf91b37726c5d2e4351a6da6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855fa13463eea85cf91b37726c5d2e4351a6da6f/comments", "author": {"login": "audunhalland", "id": 5767935, "node_id": "MDQ6VXNlcjU3Njc5MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5767935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/audunhalland", "html_url": "https://github.com/audunhalland", "followers_url": "https://api.github.com/users/audunhalland/followers", "following_url": "https://api.github.com/users/audunhalland/following{/other_user}", "gists_url": "https://api.github.com/users/audunhalland/gists{/gist_id}", "starred_url": "https://api.github.com/users/audunhalland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/audunhalland/subscriptions", "organizations_url": "https://api.github.com/users/audunhalland/orgs", "repos_url": "https://api.github.com/users/audunhalland/repos", "events_url": "https://api.github.com/users/audunhalland/events{/privacy}", "received_events_url": "https://api.github.com/users/audunhalland/received_events", "type": "User", "site_admin": false}, "committer": {"login": "audunhalland", "id": 5767935, "node_id": "MDQ6VXNlcjU3Njc5MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5767935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/audunhalland", "html_url": "https://github.com/audunhalland", "followers_url": "https://api.github.com/users/audunhalland/followers", "following_url": "https://api.github.com/users/audunhalland/following{/other_user}", "gists_url": "https://api.github.com/users/audunhalland/gists{/gist_id}", "starred_url": "https://api.github.com/users/audunhalland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/audunhalland/subscriptions", "organizations_url": "https://api.github.com/users/audunhalland/orgs", "repos_url": "https://api.github.com/users/audunhalland/repos", "events_url": "https://api.github.com/users/audunhalland/events{/privacy}", "received_events_url": "https://api.github.com/users/audunhalland/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c25eb7aa3a71fb951564b0ddf131be59c2c951d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c25eb7aa3a71fb951564b0ddf131be59c2c951d", "html_url": "https://github.com/rust-lang/rust/commit/9c25eb7aa3a71fb951564b0ddf131be59c2c951d"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "4c153b8cc9954582988290e0a23e4ad792b0c0c9", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/855fa13463eea85cf91b37726c5d2e4351a6da6f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855fa13463eea85cf91b37726c5d2e4351a6da6f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=855fa13463eea85cf91b37726c5d2e4351a6da6f", "patch": "@@ -257,9 +257,7 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n }\n \n /// If this `DefId` is a \"primary tables entry\", returns\n-/// `Some((body_id, header, decl))` with information about\n-/// its body-id, fn-header and fn-decl (if any). Otherwise,\n-/// returns `None`.\n+/// `Some((body_id, body_ty, fn_sig))`. Otherwise, returns `None`.\n ///\n /// If this function returns `Some`, then `typeck_results(def_id)` will\n /// succeed; if it returns `None`, then `typeck_results(def_id)` may or\n@@ -269,32 +267,28 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::Ty<'_>>, Option<&hir::FnHeader>, Option<&hir::FnDecl<'_>>)> {\n+) -> Option<(hir::BodyId, Option<&hir::Ty<'_>>, Option<&hir::FnSig<'_>>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Const(ref ty, body) | hir::ItemKind::Static(ref ty, _, body) => {\n-                Some((body, Some(ty), None, None))\n-            }\n-            hir::ItemKind::Fn(ref sig, .., body) => {\n-                Some((body, None, Some(&sig.header), Some(&sig.decl)))\n+                Some((body, Some(ty), None))\n             }\n+            hir::ItemKind::Fn(ref sig, .., body) => Some((body, None, Some(&sig))),\n             _ => None,\n         },\n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None, None)),\n+            hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None)),\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                Some((body, None, Some(&sig.header), Some(&sig.decl)))\n+                Some((body, None, Some(&sig)))\n             }\n             _ => None,\n         },\n         Node::ImplItem(item) => match item.kind {\n-            hir::ImplItemKind::Const(ref ty, body) => Some((body, Some(ty), None, None)),\n-            hir::ImplItemKind::Fn(ref sig, body) => {\n-                Some((body, None, Some(&sig.header), Some(&sig.decl)))\n-            }\n+            hir::ImplItemKind::Const(ref ty, body) => Some((body, Some(ty), None)),\n+            hir::ImplItemKind::Fn(ref sig, body) => Some((body, None, Some(&sig))),\n             _ => None,\n         },\n-        Node::AnonConst(constant) => Some((constant.body, None, None, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None)),\n         _ => None,\n     }\n }\n@@ -362,14 +356,14 @@ fn typeck_with_fallback<'tcx>(\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, body_ty, fn_header, fn_decl) = primary_body_of(tcx, id).unwrap_or_else(|| {\n+    let (body_id, body_ty, fn_sig) = primary_body_of(tcx, id).unwrap_or_else(|| {\n         span_bug!(span, \"can't type-check body of {:?}\", def_id);\n     });\n     let body = tcx.hir().body(body_id);\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n+        let fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n                 <dyn AstConv<'_>>::ty_of_fn(\n@@ -513,7 +507,7 @@ fn typeck_with_fallback<'tcx>(\n \n         fcx.select_all_obligations_or_error();\n \n-        if fn_decl.is_some() {\n+        if fn_sig.is_some() {\n             fcx.regionck_fn(id, body);\n         } else {\n             fcx.regionck_expr(body);"}]}