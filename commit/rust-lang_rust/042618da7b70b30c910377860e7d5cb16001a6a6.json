{"sha": "042618da7b70b30c910377860e7d5cb16001a6a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MjYxOGRhN2I3MGIzMGM5MTAzNzc4NjBlN2Q1Y2IxNjAwMWE2YTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-31T15:22:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-31T15:32:27Z"}, "message": "ptr: replace unnecessary unsafe code", "tree": {"sha": "a0287490792a9cc0d1dde960f52229fac96e3bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0287490792a9cc0d1dde960f52229fac96e3bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042618da7b70b30c910377860e7d5cb16001a6a6", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042618da7b70b30c910377860e7d5cb16001a6a6", "html_url": "https://github.com/rust-lang/rust/commit/042618da7b70b30c910377860e7d5cb16001a6a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042618da7b70b30c910377860e7d5cb16001a6a6/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29aba8033afa4cab0261c82d5a4eded4b79af656", "url": "https://api.github.com/repos/rust-lang/rust/commits/29aba8033afa4cab0261c82d5a4eded4b79af656", "html_url": "https://github.com/rust-lang/rust/commit/29aba8033afa4cab0261c82d5a4eded4b79af656"}], "stats": {"total": 76, "additions": 18, "deletions": 58}, "files": [{"sha": "ebc0a4b1e96ba02eeb02dde3f32453e794fa4cdb", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 18, "deletions": 58, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/042618da7b70b30c910377860e7d5cb16001a6a6/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042618da7b70b30c910377860e7d5cb16001a6a6/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=042618da7b70b30c910377860e7d5cb16001a6a6", "patch": "@@ -72,11 +72,11 @@ pub unsafe fn position<T>(buf: *T, f: &fn(&T) -> bool) -> uint {\n \n /// Create an unsafe null pointer\n #[inline(always)]\n-pub fn null<T>() -> *T { unsafe { cast::transmute(0u) } }\n+pub fn null<T>() -> *T { 0 as *T }\n \n /// Create an unsafe mutable null pointer\n #[inline(always)]\n-pub fn mut_null<T>() -> *mut T { unsafe { cast::transmute(0u) } }\n+pub fn mut_null<T>() -> *mut T { 0 as *mut T }\n \n /// Returns true if the pointer is equal to the null pointer.\n #[inline(always)]\n@@ -237,48 +237,28 @@ pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n     src\n }\n \n-/**\n-  Transform a region pointer - &T - to an unsafe pointer - *T.\n-  This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-*/\n+/// Transform a region pointer - &T - to an unsafe pointer - *T.\n #[inline(always)]\n pub fn to_unsafe_ptr<T>(thing: &T) -> *T {\n-    unsafe { cast::transmute(thing) }\n+    thing as *T\n }\n \n-/**\n-  Transform a const region pointer - &const T - to a const unsafe pointer -\n-  *const T. This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-*/\n+/// Transform a const region pointer - &const T - to a const unsafe pointer - *const T.\n #[inline(always)]\n pub fn to_const_unsafe_ptr<T>(thing: &const T) -> *const T {\n-    unsafe { cast::transmute(thing) }\n+    thing as *const T\n }\n \n-/**\n-  Transform a mutable region pointer - &mut T - to a mutable unsafe pointer -\n-  *mut T. This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-*/\n+/// Transform a mutable region pointer - &mut T - to a mutable unsafe pointer - *mut T.\n #[inline(always)]\n pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n-    unsafe { cast::transmute(thing) }\n+    thing as *mut T\n }\n \n-/**\n-  Cast a region pointer - &T - to a uint.\n-  This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-\n-  (I couldn't think of a cutesy name for this one.)\n-*/\n+/// Cast a region pointer - &T - to a uint.\n #[inline(always)]\n pub fn to_uint<T>(thing: &T) -> uint {\n-    unsafe {\n-        cast::transmute(thing)\n-    }\n+    thing as *T as uint\n }\n \n /// Determine if two borrowed pointers point to the same thing.\n@@ -404,50 +384,30 @@ impl<T> Ptr<T> for *mut T {\n impl<T> Eq for *const T {\n     #[inline(always)]\n     fn eq(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a == b;\n-        }\n+        (*self as uint) == (*other as uint)\n     }\n     #[inline(always)]\n-    fn ne(&self, other: &*const T) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &*const T) -> bool { !self.eq(other) }\n }\n \n // Comparison for pointers\n #[cfg(not(test))]\n impl<T> Ord for *const T {\n     #[inline(always)]\n     fn lt(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a < b;\n-        }\n+        (*self as uint) < (*other as uint)\n     }\n     #[inline(always)]\n     fn le(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a <= b;\n-        }\n+        (*self as uint) <= (*other as uint)\n     }\n     #[inline(always)]\n     fn ge(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a >= b;\n-        }\n+        (*self as uint) >= (*other as uint)\n     }\n     #[inline(always)]\n     fn gt(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a > b;\n-        }\n+        (*self as uint) > (*other as uint)\n     }\n }\n \n@@ -456,11 +416,11 @@ impl<T> Ord for *const T {\n impl<'self,T:Eq> Eq for &'self T {\n     #[inline(always)]\n     fn eq(&self, other: & &'self T) -> bool {\n-        return *(*self) == *(*other);\n+        *(*self) == *(*other)\n     }\n     #[inline(always)]\n     fn ne(&self, other: & &'self T) -> bool {\n-        return *(*self) != *(*other);\n+        *(*self) != *(*other)\n     }\n }\n "}]}