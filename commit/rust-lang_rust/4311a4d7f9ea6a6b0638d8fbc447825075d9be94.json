{"sha": "4311a4d7f9ea6a6b0638d8fbc447825075d9be94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTFhNGQ3ZjllYTZhNmIwNjM4ZDhmYmM0NDc4MjUwNzVkOWJlOTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T14:31:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_lit_expr and simplify", "tree": {"sha": "e706dc36e7857117fc412f1b658ca09a2c10ec5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e706dc36e7857117fc412f1b658ca09a2c10ec5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4311a4d7f9ea6a6b0638d8fbc447825075d9be94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4311a4d7f9ea6a6b0638d8fbc447825075d9be94", "html_url": "https://github.com/rust-lang/rust/commit/4311a4d7f9ea6a6b0638d8fbc447825075d9be94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4311a4d7f9ea6a6b0638d8fbc447825075d9be94/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a4d94c4445552830f5f08ba0903d90f1b42c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a4d94c4445552830f5f08ba0903d90f1b42c16", "html_url": "https://github.com/rust-lang/rust/commit/e9a4d94c4445552830f5f08ba0903d90f1b42c16"}], "stats": {"total": 143, "additions": 64, "deletions": 79}, "files": [{"sha": "9a22641ce81ac73a7ecdc782799860098c9f69b8", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 64, "deletions": 79, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/4311a4d7f9ea6a6b0638d8fbc447825075d9be94/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4311a4d7f9ea6a6b0638d8fbc447825075d9be94/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=4311a4d7f9ea6a6b0638d8fbc447825075d9be94", "patch": "@@ -822,98 +822,62 @@ impl<'a> Parser<'a> {\n         // attributes by giving them a empty \"already-parsed\" list.\n         let attrs = ThinVec::new();\n \n-        let lo = self.token.span;\n-\n-        macro_rules! parse_lit {\n-            () => {\n-                match self.parse_opt_lit() {\n-                    Some(literal) => (self.prev_span, ExprKind::Lit(literal)),\n-                    None => return Err(self.expected_expression_found()),\n-                }\n-            }\n-        }\n-\n         // Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.\n-        let (hi, ex) = match self.token.kind {\n+        let lo = self.token.span;\n+        match self.token.kind {\n             // This match arm is a special-case of the `_` match arm below and\n             // could be removed without changing functionality, but it's faster\n             // to have it here, especially for programs with large constants.\n-            token::Literal(_) => parse_lit!(),\n-            token::OpenDelim(token::Paren) => return self.parse_tuple_parens_expr(attrs),\n+            token::Literal(_) => self.parse_lit_expr(attrs),\n+            token::OpenDelim(token::Paren) => self.parse_tuple_parens_expr(attrs),\n             token::OpenDelim(token::Brace) => {\n-                return self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs);\n+                self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)\n             }\n-            token::BinOp(token::Or) | token::OrOr => return self.parse_closure_expr(attrs),\n-            token::OpenDelim(token::Bracket) => return self.parse_array_or_repeat_expr(attrs),\n+            token::BinOp(token::Or) | token::OrOr => self.parse_closure_expr(attrs),\n+            token::OpenDelim(token::Bracket) => self.parse_array_or_repeat_expr(attrs),\n             _ => {\n                 if self.eat_lt() {\n                     let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n-                    let hi = path.span;\n-                    return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n-                }\n-                if self.token.is_path_start() {\n-                    return self.parse_path_start_expr(attrs);\n-                }\n-                if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n-                    return self.parse_closure_expr(attrs);\n-                }\n-                if self.eat_keyword(kw::If) {\n-                    return self.parse_if_expr(attrs);\n-                }\n-                if self.eat_keyword(kw::For) {\n-                    return self.parse_for_expr(None, self.prev_span, attrs);\n-                }\n-                if self.eat_keyword(kw::While) {\n-                    return self.parse_while_expr(None, self.prev_span, attrs);\n-                }\n-                if let Some(label) = self.eat_label() {\n-                    return self.parse_labeled_expr(label, attrs);\n-                }\n-                if self.eat_keyword(kw::Loop) {\n-                    return self.parse_loop_expr(None, self.prev_span, attrs);\n-                }\n-                if self.eat_keyword(kw::Continue) {\n+                    Ok(self.mk_expr(lo.to(path.span), ExprKind::Path(Some(qself), path), attrs))\n+                } else if self.token.is_path_start() {\n+                    self.parse_path_start_expr(attrs)\n+                } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n+                    self.parse_closure_expr(attrs)\n+                } else if self.eat_keyword(kw::If) {\n+                    self.parse_if_expr(attrs)\n+                } else if self.eat_keyword(kw::For) {\n+                    self.parse_for_expr(None, self.prev_span, attrs)\n+                } else if self.eat_keyword(kw::While) {\n+                    self.parse_while_expr(None, self.prev_span, attrs)\n+                } else if let Some(label) = self.eat_label() {\n+                    self.parse_labeled_expr(label, attrs)\n+                } else if self.eat_keyword(kw::Loop) {\n+                    self.parse_loop_expr(None, self.prev_span, attrs)\n+                } else if self.eat_keyword(kw::Continue) {\n                     let kind = ExprKind::Continue(self.eat_label());\n-                    return Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs));\n-                }\n-                if self.eat_keyword(kw::Match) {\n+                    Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs))\n+                } else if self.eat_keyword(kw::Match) {\n                     let match_sp = self.prev_span;\n-                    return self.parse_match_expr(attrs).map_err(|mut err| {\n+                    self.parse_match_expr(attrs).map_err(|mut err| {\n                         err.span_label(match_sp, \"while parsing this match expression\");\n                         err\n-                    });\n-                }\n-                if self.eat_keyword(kw::Unsafe) {\n+                    })\n+                } else if self.eat_keyword(kw::Unsafe) {\n                     let mode = BlockCheckMode::Unsafe(ast::UserProvided);\n-                    return self.parse_block_expr(None, lo, mode, attrs);\n-                }\n-                if self.is_do_catch_block() {\n-                    return self.recover_do_catch(attrs);\n-                }\n-                if self.is_try_block() {\n+                    self.parse_block_expr(None, lo, mode, attrs)\n+                } else if self.is_do_catch_block() {\n+                    self.recover_do_catch(attrs)\n+                } else if self.is_try_block() {\n                     self.expect_keyword(kw::Try)?;\n-                    return self.parse_try_block(lo, attrs);\n-                }\n-\n-                // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.\n-                let is_span_rust_2018 = self.token.span.rust_2018();\n-                if is_span_rust_2018 && self.check_keyword(kw::Async) {\n-                    return if self.is_async_block() { // Check for `async {` and `async move {`.\n-                        self.parse_async_block(attrs)\n-                    } else {\n-                        self.parse_closure_expr(attrs)\n-                    };\n-                }\n-                if self.eat_keyword(kw::Return) {\n-                    return self.parse_return_expr(attrs);\n+                    self.parse_try_block(lo, attrs)\n+                } else if self.eat_keyword(kw::Return) {\n+                    self.parse_return_expr(attrs)\n                 } else if self.eat_keyword(kw::Break) {\n-                    return self.parse_break_expr(attrs);\n+                    self.parse_break_expr(attrs)\n                 } else if self.eat_keyword(kw::Yield) {\n-                    return self.parse_yield_expr(attrs);\n+                    self.parse_yield_expr(attrs)\n                 } else if self.eat_keyword(kw::Let) {\n-                    return self.parse_let_expr(attrs);\n-                } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n-                    return self.recover_incorrect_await_syntax(lo, self.prev_span, attrs);\n+                    self.parse_let_expr(attrs)\n                 } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                     // Don't complain about bare semicolons after unclosed braces\n                     // recovery in order to keep the error count down. Fixing the\n@@ -926,15 +890,36 @@ impl<'a> Parser<'a> {\n                     //     2 |     foo(bar(;\n                     //       |             ^ expected expression\n                     self.bump();\n-                    return Ok(self.mk_expr(self.token.span, ExprKind::Err, ThinVec::new()));\n+                    Ok(self.mk_expr(self.token.span, ExprKind::Err, ThinVec::new()))\n+                } else if self.token.span.rust_2018() {\n+                    // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.\n+                    if self.check_keyword(kw::Async) {\n+                        if self.is_async_block() { // Check for `async {` and `async move {`.\n+                            self.parse_async_block(attrs)\n+                        } else {\n+                            self.parse_closure_expr(attrs)\n+                        }\n+                    } else if self.eat_keyword(kw::Await) {\n+                        self.recover_incorrect_await_syntax(lo, self.prev_span, attrs)\n+                    } else {\n+                        self.parse_lit_expr(attrs)\n+                    }\n                 } else {\n-                    parse_lit!()\n+                    self.parse_lit_expr(attrs)\n                 }\n             }\n-        };\n+        }\n+    }\n \n-        let expr = self.mk_expr(lo.to(hi), ex, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+    fn parse_lit_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let lo = self.token.span;\n+        match self.parse_opt_lit() {\n+            Some(literal) => {\n+                let expr = self.mk_expr(lo.to(self.prev_span), ExprKind::Lit(literal), attrs);\n+                self.maybe_recover_from_bad_qpath(expr, true)\n+            }\n+            None => return Err(self.expected_expression_found()),\n+        }\n     }\n \n     fn parse_tuple_parens_expr(&mut self, mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {"}]}