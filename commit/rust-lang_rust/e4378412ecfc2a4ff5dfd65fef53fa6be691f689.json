{"sha": "e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Mzc4NDEyZWNmYzJhNGZmNWRmZDY1ZmVmNTNmYTZiZTY5MWY2ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-30T10:19:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-30T10:19:38Z"}, "message": "Auto merge of #52830 - matthewjasper:bootstrap-prep, r=matthewjasper\n\n[NLL] Fix some things for bootstrap\n\nSome changes that are required when bootstrapping rustc with NLL enabled.\n\n* Remove a bunch of unused `mut`s that aren't needed, but the existing lint doesn't catch.\n* Rewrite a function call to satisfy NLL borrowck. Note that the borrow is two-phase, but gets activated immediately by an unsizing coercion.\n\ncc #51823", "tree": {"sha": "2da55959070dea0d160b61dc09c276593434b767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da55959070dea0d160b61dc09c276593434b767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "html_url": "https://github.com/rust-lang/rust/commit/e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed2b5120bd875a7eb9fd8545d86eb1de1e41bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed2b5120bd875a7eb9fd8545d86eb1de1e41bce", "html_url": "https://github.com/rust-lang/rust/commit/5ed2b5120bd875a7eb9fd8545d86eb1de1e41bce"}, {"sha": "18d5f821480803811f3f7ef866ef0ef8ae9bf9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d5f821480803811f3f7ef866ef0ef8ae9bf9c1", "html_url": "https://github.com/rust-lang/rust/commit/18d5f821480803811f3f7ef866ef0ef8ae9bf9c1"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "373db1f1664cd87ce0ddbe81a0aa1b4e4529f1b7", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -168,7 +168,7 @@ impl<'a> Iterator for Parser<'a> {\n                     if self.consume('{') {\n                         Some(String(self.string(pos + 1)))\n                     } else {\n-                        let mut arg = self.argument();\n+                        let arg = self.argument();\n                         if let Some(arg_pos) = self.must_consume('}').map(|end| {\n                             (pos + raw + 1, end + raw + 2)\n                         }) {"}, {"sha": "63755bcea5e62f293d923be13efc7fb8d22ecbd6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -2814,7 +2814,7 @@ impl<'a> LoweringContext<'a> {\n                 let mut defs = self.expect_full_def_from_use(id);\n                 // we want to return *something* from this function, so hang onto the first item\n                 // for later\n-                let mut ret_def = defs.next().unwrap_or(Def::Err);\n+                let ret_def = defs.next().unwrap_or(Def::Err);\n \n                 for (def, &new_node_id) in defs.zip([id1, id2].iter()) {\n                     let vis = vis.clone();"}, {"sha": "c04785aac2095f7a2b62c475773f0700427fabee", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -1054,7 +1054,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n-                let mut underscores = \"_\".repeat(expected_args.len())\n+                let underscores = \"_\".repeat(expected_args.len())\n                                       .split(\"\")\n                                       .filter(|s| !s.is_empty())\n                                       .collect::<Vec<_>>()"}, {"sha": "bb54e18360495c938d7660aedcc75e2bbd7b6cc9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -354,7 +354,7 @@ impl PrintContext {\n                 };\n                 if has_default {\n                     if let Some(substs) = tcx.lift(&substs) {\n-                        let mut types = substs.types().rev().skip(child_types);\n+                        let types = substs.types().rev().skip(child_types);\n                         for ((def_id, has_default), actual) in type_params.zip(types) {\n                             if !has_default {\n                                 break;"}, {"sha": "730b13a0584fc2710ee7b986f17e14aa87643387", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -56,7 +56,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n     pub fn insert(&mut self, key: K, mut value: V) -> Option<V> {\n         match self.lookup_index_for(&key) {\n             Ok(index) => {\n-                let mut slot = unsafe {\n+                let slot = unsafe {\n                     self.data.get_unchecked_mut(index)\n                 };\n                 mem::swap(&mut slot.1, &mut value);"}, {"sha": "da291f56ee4e56ce175817dc7f1c42caf02e100f", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         fn check_must_use(cx: &LateContext, def_id: DefId, sp: Span, describe_path: &str) -> bool {\n             for attr in cx.tcx.get_attrs(def_id).iter() {\n                 if attr.check_name(\"must_use\") {\n-                    let mut msg = format!(\"unused {}`{}` which must be used\",\n+                    let msg = format!(\"unused {}`{}` which must be used\",\n                                           describe_path, cx.tcx.item_path_str(def_id));\n                     let mut err = cx.struct_span_lint(UNUSED_MUST_USE, sp, &msg);\n                     // check for #[must_use = \"...\"]"}, {"sha": "5f05ae8ade5107947d5dc1c65af66cad9899b3ef", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -28,8 +28,8 @@ impl ConstraintGraph {\n         let mut next_constraints = IndexVec::from_elem(None, &set.constraints);\n \n         for (idx, constraint) in set.constraints.iter_enumerated().rev() {\n-            let mut head = &mut first_constraints[constraint.sup];\n-            let mut next = &mut next_constraints[idx];\n+            let head = &mut first_constraints[constraint.sup];\n+            let next = &mut next_constraints[idx];\n             debug_assert!(next.is_none());\n             *next = *head;\n             *head = Some(idx);"}, {"sha": "f8bfb5b48ba99fdc18ec18087d1a7c703d1d4a2f", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             TestKind::Eq { value, mut ty } => {\n-                let mut val = Operand::Copy(place.clone());\n+                let val = Operand::Copy(place.clone());\n                 let mut expect = self.literal_operand(test.span, ty, value);\n                 // Use PartialEq::eq instead of BinOp::Eq\n                 // (the binop can only handle primitives)"}, {"sha": "bd0b2c6c278b131c526b0eb25605857e92e7c8c7", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -353,7 +353,7 @@ fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 Visibility::Hidden\n             }\n         };\n-        let (linkage, mut visibility) = match mono_item.explicit_linkage(tcx) {\n+        let (linkage, visibility) = match mono_item.explicit_linkage(tcx) {\n             Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n             None => {\n                 match mono_item {"}, {"sha": "b3ae65f5325925b855570e5e607e0ee276b8df3b", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -390,7 +390,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n             LocalDecl::new_return_place(tcx.types.never, mir.span)\n         ).collect();\n \n-        let mut promoter = Promoter {\n+        let promoter = Promoter {\n             promoted: Mir::new(\n                 IndexVec::new(),\n                 // FIXME: maybe try to filter this to avoid blowing up"}, {"sha": "114fd8754a21fb21e256eb765c56d6f53f42d062", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -248,7 +248,8 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let tcx = self.tcx;\n         let param_env = self.param_env;\n         let region_scope_tree = self.tcx.region_scope_tree(item_def_id);\n-        euv::ExprUseVisitor::new(self, tcx, param_env, &region_scope_tree, self.tables, None)\n+        let tables = self.tables;\n+        euv::ExprUseVisitor::new(self, tcx, param_env, &region_scope_tree, tables, None)\n             .consume_body(body);\n \n         let body_promotable = self.check_expr(&body.value);"}, {"sha": "acdb7c4d4edfc6feade1788dc50968215946d8d3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -865,7 +865,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         // this may resolve to either a value or a type, but for documentation\n         // purposes it's good enough to just favor one over the other.\n         self.per_ns(|this, ns| if let Some(binding) = result[ns].get().ok() {\n-            let mut import = this.import_map.entry(directive.id).or_default();\n+            let import = this.import_map.entry(directive.id).or_default();\n             import[ns] = Some(PathResolution::new(binding.def()));\n         });\n "}, {"sha": "761521c8807ca3f42147433202222d816b42590b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -423,7 +423,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             let mut qualname = String::from(\"<\");\n                             qualname.push_str(&self.tcx.hir.node_to_pretty_string(ty.id));\n \n-                            let mut trait_id = self.tcx.trait_id_of_impl(impl_id);\n+                            let trait_id = self.tcx.trait_id_of_impl(impl_id);\n                             let mut decl_id = None;\n                             let mut docs = String::new();\n                             let mut attrs = vec![];"}, {"sha": "f658d57426497d47ed7eff325e97a5de023055e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4378412ecfc2a4ff5dfd65fef53fa6be691f689/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e4378412ecfc2a4ff5dfd65fef53fa6be691f689", "patch": "@@ -1172,7 +1172,7 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n \n         // Try looking for methods and associated items\n         let mut split = path_str.rsplitn(2, \"::\");\n-        let mut item_name = if let Some(first) = split.next() {\n+        let item_name = if let Some(first) = split.next() {\n             first\n         } else {\n             return Err(())"}]}