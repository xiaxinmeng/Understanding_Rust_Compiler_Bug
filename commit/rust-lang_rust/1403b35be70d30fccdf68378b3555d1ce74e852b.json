{"sha": "1403b35be70d30fccdf68378b3555d1ce74e852b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MDNiMzViZTcwZDMwZmNjZGY2ODM3OGIzNTU1ZDFjZTc0ZTg1MmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-09T01:46:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:58Z"}, "message": "std,syntax: make std::fmt::parse use `Vec`s.", "tree": {"sha": "cff22f960cd1379d40a59069548ca009af81bc89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff22f960cd1379d40a59069548ca009af81bc89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1403b35be70d30fccdf68378b3555d1ce74e852b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1403b35be70d30fccdf68378b3555d1ce74e852b", "html_url": "https://github.com/rust-lang/rust/commit/1403b35be70d30fccdf68378b3555d1ce74e852b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1403b35be70d30fccdf68378b3555d1ce74e852b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "301594917fca62ffa1ca4589ac398c3196427547", "url": "https://api.github.com/repos/rust-lang/rust/commits/301594917fca62ffa1ca4589ac398c3196427547", "html_url": "https://github.com/rust-lang/rust/commit/301594917fca62ffa1ca4589ac398c3196427547"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "36ffb8572378f170fb2b0d9296c93c3a809afe26", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1403b35be70d30fccdf68378b3555d1ce74e852b/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1403b35be70d30fccdf68378b3555d1ce74e852b/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=1403b35be70d30fccdf68378b3555d1ce74e852b", "patch": "@@ -131,13 +131,13 @@ pub enum Method<'a> {\n     ///\n     /// The final element of this enum is the default \"other\" case which is\n     /// always required to be specified.\n-    Plural(Option<uint>, ~[PluralArm<'a>], ~[Piece<'a>]),\n+    Plural(Option<uint>, Vec<PluralArm<'a>>, Vec<Piece<'a>>),\n \n     /// A select method selects over a string. Each arm is a different string\n     /// which can be selected for.\n     ///\n     /// As with `Plural`, a default \"other\" case is required as well.\n-    Select(~[SelectArm<'a>], ~[Piece<'a>]),\n+    Select(Vec<SelectArm<'a>>, Vec<Piece<'a>>),\n }\n \n /// A selector for what pluralization a plural method should take\n@@ -156,7 +156,7 @@ pub struct PluralArm<'a> {\n     /// literal.\n     pub selector: PluralSelector,\n     /// Array of pieces which are the format of this arm\n-    pub result: ~[Piece<'a>],\n+    pub result: Vec<Piece<'a>>,\n }\n \n /// Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that\n@@ -184,7 +184,7 @@ pub struct SelectArm<'a> {\n     /// String selector which guards this arm\n     pub selector: &'a str,\n     /// Array of pieces which are the format of this arm\n-    pub result: ~[Piece<'a>],\n+    pub result: Vec<Piece<'a>>,\n }\n \n /// The parser structure for interpreting the input format string. This is\n@@ -198,7 +198,7 @@ pub struct Parser<'a> {\n     cur: str::CharOffsets<'a>,\n     depth: uint,\n     /// Error messages accumulated during parsing\n-    pub errors: ~[~str],\n+    pub errors: Vec<~str>,\n }\n \n impl<'a> Iterator<Piece<'a>> for Parser<'a> {\n@@ -236,7 +236,7 @@ impl<'a> Parser<'a> {\n             input: s,\n             cur: s.char_indices(),\n             depth: 0,\n-            errors: ~[],\n+            errors: vec!(),\n         }\n     }\n \n@@ -463,7 +463,7 @@ impl<'a> Parser<'a> {\n     /// Parses a 'select' statement (after the initial 'select' word)\n     fn select(&mut self) -> ~Method<'a> {\n         let mut other = None;\n-        let mut arms = ~[];\n+        let mut arms = vec!();\n         // Consume arms one at a time\n         loop {\n             self.ws();\n@@ -496,7 +496,7 @@ impl<'a> Parser<'a> {\n             Some(arm) => { arm }\n             None => {\n                 self.err(\"`select` statement must provide an `other` case\");\n-                ~[]\n+                vec!()\n             }\n         };\n         ~Select(arms, other)\n@@ -506,7 +506,7 @@ impl<'a> Parser<'a> {\n     fn plural(&mut self) -> ~Method<'a> {\n         let mut offset = None;\n         let mut other = None;\n-        let mut arms = ~[];\n+        let mut arms = vec!();\n \n         // First, attempt to parse the 'offset:' field. We know the set of\n         // selector words which can appear in plural arms, and the only ones\n@@ -594,7 +594,7 @@ impl<'a> Parser<'a> {\n             Some(arm) => { arm }\n             None => {\n                 self.err(\"`plural` statement must provide an `other` case\");\n-                ~[]\n+                vec!()\n             }\n         };\n         ~Plural(offset, arms, other)\n@@ -684,9 +684,9 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n-    fn same(fmt: &'static str, p: ~[Piece<'static>]) {\n+    fn same(fmt: &'static str, p: &[Piece<'static>]) {\n         let mut parser = Parser::new(fmt);\n-        assert!(p == parser.collect());\n+        assert!(p == parser.collect::<Vec<Piece<'static>>>().as_slice());\n     }\n \n     fn fmtdflt() -> FormatSpec<'static> {\n@@ -708,12 +708,12 @@ mod tests {\n \n     #[test]\n     fn simple() {\n-        same(\"asdf\", ~[String(\"asdf\")]);\n-        same(\"a\\\\{b\", ~[String(\"a\"), String(\"{b\")]);\n-        same(\"a\\\\#b\", ~[String(\"a\"), String(\"#b\")]);\n-        same(\"a\\\\}b\", ~[String(\"a\"), String(\"}b\")]);\n-        same(\"a\\\\}\", ~[String(\"a\"), String(\"}\")]);\n-        same(\"\\\\}\", ~[String(\"}\")]);\n+        same(\"asdf\", [String(\"asdf\")]);\n+        same(\"a\\\\{b\", [String(\"a\"), String(\"{b\")]);\n+        same(\"a\\\\#b\", [String(\"a\"), String(\"#b\")]);\n+        same(\"a\\\\}b\", [String(\"a\"), String(\"}b\")]);\n+        same(\"a\\\\}\", [String(\"a\"), String(\"}\")]);\n+        same(\"\\\\}\", [String(\"}\")]);\n     }\n \n     #[test] fn invalid01() { musterr(\"{\") }\n@@ -725,31 +725,31 @@ mod tests {\n \n     #[test]\n     fn format_nothing() {\n-        same(\"{}\", ~[Argument(Argument {\n+        same(\"{}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: fmtdflt(),\n             method: None,\n         })]);\n     }\n     #[test]\n     fn format_position() {\n-        same(\"{3}\", ~[Argument(Argument {\n+        same(\"{3}\", [Argument(Argument {\n             position: ArgumentIs(3),\n             format: fmtdflt(),\n             method: None,\n         })]);\n     }\n     #[test]\n     fn format_position_nothing_else() {\n-        same(\"{3:}\", ~[Argument(Argument {\n+        same(\"{3:}\", [Argument(Argument {\n             position: ArgumentIs(3),\n             format: fmtdflt(),\n             method: None,\n         })]);\n     }\n     #[test]\n     fn format_type() {\n-        same(\"{3:a}\", ~[Argument(Argument {\n+        same(\"{3:a}\", [Argument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n                 fill: None,\n@@ -764,7 +764,7 @@ mod tests {\n     }\n     #[test]\n     fn format_align_fill() {\n-        same(\"{3:>}\", ~[Argument(Argument {\n+        same(\"{3:>}\", [Argument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n                 fill: None,\n@@ -776,7 +776,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{3:0<}\", ~[Argument(Argument {\n+        same(\"{3:0<}\", [Argument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n                 fill: Some('0'),\n@@ -788,7 +788,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{3:*<abcd}\", ~[Argument(Argument {\n+        same(\"{3:*<abcd}\", [Argument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n                 fill: Some('*'),\n@@ -803,7 +803,7 @@ mod tests {\n     }\n     #[test]\n     fn format_counts() {\n-        same(\"{:10s}\", ~[Argument(Argument {\n+        same(\"{:10s}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -815,7 +815,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{:10$.10s}\", ~[Argument(Argument {\n+        same(\"{:10$.10s}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -827,7 +827,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{:.*s}\", ~[Argument(Argument {\n+        same(\"{:.*s}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -839,7 +839,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{:.10$s}\", ~[Argument(Argument {\n+        same(\"{:.10$s}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -851,7 +851,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{:a$.b$s}\", ~[Argument(Argument {\n+        same(\"{:a$.b$s}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -866,7 +866,7 @@ mod tests {\n     }\n     #[test]\n     fn format_flags() {\n-        same(\"{:-}\", ~[Argument(Argument {\n+        same(\"{:-}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -878,7 +878,7 @@ mod tests {\n             },\n             method: None,\n         })]);\n-        same(\"{:+#}\", ~[Argument(Argument {\n+        same(\"{:+#}\", [Argument(Argument {\n             position: ArgumentNext,\n             format: FormatSpec {\n                 fill: None,\n@@ -893,7 +893,7 @@ mod tests {\n     }\n     #[test]\n     fn format_mixture() {\n-        same(\"abcd {3:a} efg\", ~[String(\"abcd \"), Argument(Argument {\n+        same(\"abcd {3:a} efg\", [String(\"abcd \"), Argument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n                 fill: None,\n@@ -909,42 +909,42 @@ mod tests {\n \n     #[test]\n     fn select_simple() {\n-        same(\"{, select, other { haha } }\", ~[Argument(Argument{\n+        same(\"{, select, other { haha } }\", [Argument(Argument{\n             position: ArgumentNext,\n             format: fmtdflt(),\n-            method: Some(~Select(~[], ~[String(\" haha \")]))\n+            method: Some(~Select(vec![], vec![String(\" haha \")]))\n         })]);\n-        same(\"{1, select, other { haha } }\", ~[Argument(Argument{\n+        same(\"{1, select, other { haha } }\", [Argument(Argument{\n             position: ArgumentIs(1),\n             format: fmtdflt(),\n-            method: Some(~Select(~[], ~[String(\" haha \")]))\n+            method: Some(~Select(vec![], vec![String(\" haha \")]))\n         })]);\n-        same(\"{1, select, other {#} }\", ~[Argument(Argument{\n+        same(\"{1, select, other {#} }\", [Argument(Argument{\n             position: ArgumentIs(1),\n             format: fmtdflt(),\n-            method: Some(~Select(~[], ~[CurrentArgument]))\n+            method: Some(~Select(vec![], vec![CurrentArgument]))\n         })]);\n-        same(\"{1, select, other {{2, select, other {lol}}} }\", ~[Argument(Argument{\n+        same(\"{1, select, other {{2, select, other {lol}}} }\", [Argument(Argument{\n             position: ArgumentIs(1),\n             format: fmtdflt(),\n-            method: Some(~Select(~[], ~[Argument(Argument{\n+            method: Some(~Select(vec![], vec![Argument(Argument{\n                 position: ArgumentIs(2),\n                 format: fmtdflt(),\n-                method: Some(~Select(~[], ~[String(\"lol\")]))\n+                method: Some(~Select(vec![], vec![String(\"lol\")]))\n             })])) // wat\n         })]);\n     }\n \n     #[test]\n     fn select_cases() {\n-        same(\"{1, select, a{1} b{2} c{3} other{4} }\", ~[Argument(Argument{\n+        same(\"{1, select, a{1} b{2} c{3} other{4} }\", [Argument(Argument{\n             position: ArgumentIs(1),\n             format: fmtdflt(),\n-            method: Some(~Select(~[\n-                SelectArm{ selector: \"a\", result: ~[String(\"1\")] },\n-                SelectArm{ selector: \"b\", result: ~[String(\"2\")] },\n-                SelectArm{ selector: \"c\", result: ~[String(\"3\")] },\n-            ], ~[String(\"4\")]))\n+            method: Some(~Select(vec![\n+                SelectArm{ selector: \"a\", result: vec![String(\"1\")] },\n+                SelectArm{ selector: \"b\", result: vec![String(\"2\")] },\n+                SelectArm{ selector: \"c\", result: vec![String(\"3\")] },\n+            ], vec![String(\"4\")]))\n         })]);\n     }\n \n@@ -961,25 +961,25 @@ mod tests {\n \n     #[test]\n     fn plural_simple() {\n-        same(\"{, plural, other { haha } }\", ~[Argument(Argument{\n+        same(\"{, plural, other { haha } }\", [Argument(Argument{\n             position: ArgumentNext,\n             format: fmtdflt(),\n-            method: Some(~Plural(None, ~[], ~[String(\" haha \")]))\n+            method: Some(~Plural(None, vec![], vec![String(\" haha \")]))\n         })]);\n-        same(\"{:, plural, other { haha } }\", ~[Argument(Argument{\n+        same(\"{:, plural, other { haha } }\", [Argument(Argument{\n             position: ArgumentNext,\n             format: fmtdflt(),\n-            method: Some(~Plural(None, ~[], ~[String(\" haha \")]))\n+            method: Some(~Plural(None, vec![], vec![String(\" haha \")]))\n         })]);\n         same(\"{, plural, offset:1 =2{2} =3{3} many{yes} other{haha} }\",\n-        ~[Argument(Argument{\n+        [Argument(Argument{\n             position: ArgumentNext,\n             format: fmtdflt(),\n-            method: Some(~Plural(Some(1), ~[\n-                PluralArm{ selector: Literal(2), result: ~[String(\"2\")] },\n-                PluralArm{ selector: Literal(3), result: ~[String(\"3\")] },\n-                PluralArm{ selector: Keyword(Many), result: ~[String(\"yes\")] }\n-            ], ~[String(\"haha\")]))\n+            method: Some(~Plural(Some(1), vec![\n+                PluralArm{ selector: Literal(2), result: vec![String(\"2\")] },\n+                PluralArm{ selector: Literal(3), result: vec![String(\"3\")] },\n+                PluralArm{ selector: Keyword(Many), result: vec![String(\"yes\")] }\n+            ], vec![String(\"haha\")]))\n         })]);\n     }\n }"}, {"sha": "cc0f26dcc2f079bbe5727d958dd87933d0bf8d67", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1403b35be70d30fccdf68378b3555d1ce74e852b/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1403b35be70d30fccdf68378b3555d1ce74e852b/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=1403b35be70d30fccdf68378b3555d1ce74e852b", "patch": "@@ -242,9 +242,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                             }\n                         }\n                     }\n-                    self.verify_pieces(arm.result);\n+                    self.verify_pieces(arm.result.as_slice());\n                 }\n-                self.verify_pieces(*default);\n+                self.verify_pieces(default.as_slice());\n             }\n             parse::Select(ref arms, ref default) => {\n                 self.verify_arg_type(pos, String);\n@@ -258,9 +258,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                         self.ecx.span_err(self.fmtsp,\n                                           \"empty selector in `select`\");\n                     }\n-                    self.verify_pieces(arm.result);\n+                    self.verify_pieces(arm.result.as_slice());\n                 }\n-                self.verify_pieces(*default);\n+                self.verify_pieces(default.as_slice());\n             }\n         }\n         self.nest_level -= 1;"}]}