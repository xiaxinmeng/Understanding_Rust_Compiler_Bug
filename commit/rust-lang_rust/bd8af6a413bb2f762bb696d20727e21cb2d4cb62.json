{"sha": "bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOGFmNmE0MTNiYjJmNzYyYmI2OTZkMjA3MjdlMjFjYjJkNGNiNjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T21:05:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T21:05:10Z"}, "message": "Sourcify some more", "tree": {"sha": "679bce5a6dc85a61b85c83b35f1c9c753b4fdfb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/679bce5a6dc85a61b85c83b35f1c9c753b4fdfb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "html_url": "https://github.com/rust-lang/rust/commit/bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8af6a413bb2f762bb696d20727e21cb2d4cb62/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920848940ae7b79b1655ac48a9e2c1694b9e06c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/920848940ae7b79b1655ac48a9e2c1694b9e06c8", "html_url": "https://github.com/rust-lang/rust/commit/920848940ae7b79b1655ac48a9e2c1694b9e06c8"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "f3bccd8ed75a4597aa7897ca2199cc5ae3a49e71", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bd8af6a413bb2f762bb696d20727e21cb2d4cb62/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8af6a413bb2f762bb696d20727e21cb2d4cb62/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "patch": "@@ -141,13 +141,16 @@ impl SourceAnalyzer {\n         node: &SyntaxNode,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let def_with_body = def_with_body_from_child_node(db, Source::new(file_id.into(), node));\n+        let node_source = Source::new(file_id.into(), node);\n+        let def_with_body = def_with_body_from_child_node(db, node_source);\n         if let Some(def) = def_with_body {\n             let source_map = def.body_source_map(db);\n             let scopes = def.expr_scopes(db);\n             let scope = match offset {\n-                None => scope_for(&scopes, &source_map, file_id.into(), &node),\n-                Some(offset) => scope_for_offset(&scopes, &source_map, file_id.into(), offset),\n+                None => scope_for(&scopes, &source_map, node_source),\n+                Some(offset) => {\n+                    scope_for_offset(&scopes, &source_map, Source::new(file_id.into(), offset))\n+                }\n             };\n             let resolver = expr::resolver_for_scope(db, def, scope);\n             SourceAnalyzer {\n@@ -287,7 +290,8 @@ impl SourceAnalyzer {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, self.file_id.into(), name_ref.syntax())?;\n+        let scope =\n+            scope_for(scopes, source_map, Source::new(self.file_id.into(), name_ref.syntax()))?;\n         let entry = scopes.resolve_name_in_scope(scope, &name)?;\n         Some(ScopeEntryWithSyntax {\n             name: entry.name().clone(),\n@@ -408,28 +412,27 @@ impl SourceAnalyzer {\n fn scope_for(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n-    file_id: HirFileId,\n-    node: &SyntaxNode,\n+    node: Source<&SyntaxNode>,\n ) -> Option<ScopeId> {\n-    node.ancestors()\n+    node.ast\n+        .ancestors()\n         .filter_map(ast::Expr::cast)\n-        .filter_map(|it| source_map.node_expr(Source { file_id, ast: &it }))\n+        .filter_map(|it| source_map.node_expr(Source::new(node.file_id, &it)))\n         .find_map(|it| scopes.scope_for(it))\n }\n \n fn scope_for_offset(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n-    file_id: HirFileId,\n-    offset: TextUnit,\n+    offset: Source<TextUnit>,\n ) -> Option<ScopeId> {\n     scopes\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n             let source = source_map.expr_syntax(*id)?;\n             // FIXME: correctly handle macro expansion\n-            if source.file_id != file_id {\n+            if source.file_id != offset.file_id {\n                 return None;\n             }\n             let syntax_node_ptr =\n@@ -438,9 +441,14 @@ fn scope_for_offset(\n         })\n         // find containing scope\n         .min_by_key(|(ptr, _scope)| {\n-            (!(ptr.range().start() <= offset && offset <= ptr.range().end()), ptr.range().len())\n+            (\n+                !(ptr.range().start() <= offset.ast && offset.ast <= ptr.range().end()),\n+                ptr.range().len(),\n+            )\n+        })\n+        .map(|(ptr, scope)| {\n+            adjust(scopes, source_map, ptr, offset.file_id, offset.ast).unwrap_or(*scope)\n         })\n-        .map(|(ptr, scope)| adjust(scopes, source_map, ptr, file_id, offset).unwrap_or(*scope))\n }\n \n // XXX: during completion, cursor might be outside of any particular"}, {"sha": "6c2cc3af3eacf5c9573c52f743dbf0924f6c457c", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8af6a413bb2f762bb696d20727e21cb2d4cb62/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8af6a413bb2f762bb696d20727e21cb2d4cb62/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "patch": "@@ -226,6 +226,8 @@ impl<N: AstNode> AstId<N> {\n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub struct Source<T> {\n     pub file_id: HirFileId,\n+    // FIXME: this stores all kind of things, not only `ast`.\n+    // There should be a better name...\n     pub ast: T,\n }\n "}]}