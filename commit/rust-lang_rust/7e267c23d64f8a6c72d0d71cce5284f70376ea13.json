{"sha": "7e267c23d64f8a6c72d0d71cce5284f70376ea13", "node_id": "C_kwDOAAsO6NoAKDdlMjY3YzIzZDY0ZjhhNmM3MmQwZDcxY2NlNTI4NGY3MDM3NmVhMTM", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-13T12:37:24Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-13T12:37:29Z"}, "message": "Fix Clippy sync fallout", "tree": {"sha": "17e54937046b4ca05155cc584eb0ba0c12313ea2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e54937046b4ca05155cc584eb0ba0c12313ea2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e267c23d64f8a6c72d0d71cce5284f70376ea13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e267c23d64f8a6c72d0d71cce5284f70376ea13", "html_url": "https://github.com/rust-lang/rust/commit/7e267c23d64f8a6c72d0d71cce5284f70376ea13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e267c23d64f8a6c72d0d71cce5284f70376ea13/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0142ae41a49a4dda6bc0c7487efa00818c8f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0142ae41a49a4dda6bc0c7487efa00818c8f49", "html_url": "https://github.com/rust-lang/rust/commit/fb0142ae41a49a4dda6bc0c7487efa00818c8f49"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "b7a242cf90a43369e752aa36451fd8e65b52f597", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e267c23d64f8a6c72d0d71cce5284f70376ea13/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e267c23d64f8a6c72d0d71cce5284f70376ea13/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=7e267c23d64f8a6c72d0d71cce5284f70376ea13", "patch": "@@ -191,13 +191,13 @@ impl<'a> PanicExpn<'a> {\n         if !macro_backtrace(expr.span).any(|macro_call| is_panic(cx, macro_call.def_id)) {\n             return None;\n         }\n-        let ExprKind::Call(callee, [arg]) = expr.kind else { return None };\n-        let ExprKind::Path(QPath::Resolved(_, path)) = callee.kind else { return None };\n+        let ExprKind::Call(callee, [arg]) = &expr.kind else { return None };\n+        let ExprKind::Path(QPath::Resolved(_, path)) = &callee.kind else { return None };\n         let result = match path.segments.last().unwrap().ident.as_str() {\n             \"panic\" if arg.span.ctxt() == expr.span.ctxt() => Self::Empty,\n             \"panic\" | \"panic_str\" => Self::Str(arg),\n             \"panic_display\" => {\n-                let ExprKind::AddrOf(_, _, e) = arg.kind else { return None };\n+                let ExprKind::AddrOf(_, _, e) = &arg.kind else { return None };\n                 Self::Display(e)\n             },\n             \"panic_fmt\" => Self::Format(FormatArgsExpn::parse(cx, arg)?),"}]}