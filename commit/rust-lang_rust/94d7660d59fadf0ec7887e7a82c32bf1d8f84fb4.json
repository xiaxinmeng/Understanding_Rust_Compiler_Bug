{"sha": "94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDc2NjBkNTlmYWRmMGVjNzg4N2U3YTgyYzMyYmYxZDhmODRmYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-17T06:02:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-17T06:02:16Z"}, "message": "Auto merge of #75468 - poliorcetics:intra-links-fs, r=jyn514\n\nMove to intra doc links in std/src/fs.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc", "tree": {"sha": "5a021bac2b1d240b99ad4527606e7c43b96e3447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a021bac2b1d240b99ad4527606e7c43b96e3447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "html_url": "https://github.com/rust-lang/rust/commit/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d39e55917a7cdfefddd499c09a7b6118851485", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d39e55917a7cdfefddd499c09a7b6118851485", "html_url": "https://github.com/rust-lang/rust/commit/49d39e55917a7cdfefddd499c09a7b6118851485"}, {"sha": "aa1fb31bf1a3c919ad9946ae6e2a7a63eb646276", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1fb31bf1a3c919ad9946ae6e2a7a63eb646276", "html_url": "https://github.com/rust-lang/rust/commit/aa1fb31bf1a3c919ad9946ae6e2a7a63eb646276"}], "stats": {"total": 191, "additions": 59, "deletions": 132}, "files": [{"sha": "2767675ff9258a81768145b96aa8ef58ac7e8e12", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 59, "deletions": 132, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=94d7660d59fadf0ec7887e7a82c32bf1d8f84fb4", "patch": "@@ -30,7 +30,7 @@ use crate::time::SystemTime;\n ///\n /// # Examples\n ///\n-/// Creates a new file and write bytes to it (you can also use [`write`]):\n+/// Creates a new file and write bytes to it (you can also use [`write()`]):\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -84,14 +84,8 @@ use crate::time::SystemTime;\n /// by different processes. Avoid assuming that holding a `&File` means that the\n /// file will not change.\n ///\n-/// [`Seek`]: ../io/trait.Seek.html\n-/// [`String`]: ../string/struct.String.html\n-/// [`Read`]: ../io/trait.Read.html\n-/// [`Write`]: ../io/trait.Write.html\n-/// [`BufReader<R>`]: ../io/struct.BufReader.html\n-/// [`sync_all`]: struct.File.html#method.sync_all\n-/// [`read`]: fn.read.html\n-/// [`write`]: fn.write.html\n+/// [`BufReader<R>`]: io::BufReader\n+/// [`sync_all`]: File::sync_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,\n@@ -103,9 +97,6 @@ pub struct File {\n /// [`symlink_metadata`] function or method and represents known\n /// metadata about a file such as its permissions, size, modification\n /// times, etc.\n-///\n-/// [`metadata`]: fn.metadata.html\n-/// [`symlink_metadata`]: fn.symlink_metadata.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Metadata(fs_imp::FileAttr);\n@@ -124,19 +115,12 @@ pub struct Metadata(fs_imp::FileAttr);\n ///\n /// This [`io::Result`] will be an [`Err`] if there's some sort of intermittent\n /// IO error during iteration.\n-///\n-/// [`read_dir`]: fn.read_dir.html\n-/// [`DirEntry`]: struct.DirEntry.html\n-/// [`io::Result`]: ../io/type.Result.html\n-/// [`Err`]: ../result/enum.Result.html#variant.Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct ReadDir(fs_imp::ReadDir);\n \n /// Entries returned by the [`ReadDir`] iterator.\n ///\n-/// [`ReadDir`]: struct.ReadDir.html\n-///\n /// An instance of `DirEntry` represents an entry inside of a directory on the\n /// filesystem. Each entry can be inspected via methods to learn about the full\n /// path or possibly other metadata through per-platform extension traits.\n@@ -150,20 +134,11 @@ pub struct DirEntry(fs_imp::DirEntry);\n /// [`File::create`] methods are aliases for commonly used options using this\n /// builder.\n ///\n-/// [`File`]: struct.File.html\n-/// [`File::open`]: struct.File.html#method.open\n-/// [`File::create`]: struct.File.html#method.create\n-///\n-/// Generally speaking, when using `OpenOptions`, you'll first call [`new`],\n-/// then chain calls to methods to set each option, then call [`open`],\n-/// passing the path of the file you're trying to open. This will give you a\n-/// [`io::Result`][result] with a [`File`][file] inside that you can further\n-/// operate on.\n-///\n-/// [`new`]: struct.OpenOptions.html#method.new\n-/// [`open`]: struct.OpenOptions.html#method.open\n-/// [result]: ../io/type.Result.html\n-/// [file]: struct.File.html\n+/// Generally speaking, when using `OpenOptions`, you'll first call\n+/// [`OpenOptions::new`], then chain calls to methods to set each option, then\n+/// call [`OpenOptions::open`], passing the path of the file you're trying to\n+/// open. This will give you a [`io::Result`] with a [`File`] inside that you\n+/// can further operate on.\n ///\n /// # Examples\n ///\n@@ -193,21 +168,18 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n \n /// Representation of the various permissions on a file.\n ///\n-/// This module only currently provides one bit of information, [`readonly`],\n-/// which is exposed on all currently supported platforms. Unix-specific\n-/// functionality, such as mode bits, is available through the\n-/// [`PermissionsExt`] trait.\n+/// This module only currently provides one bit of information,\n+/// [`Permissions::readonly`], which is exposed on all currently supported\n+/// platforms. Unix-specific functionality, such as mode bits, is available\n+/// through the [`PermissionsExt`] trait.\n ///\n-/// [`readonly`]: struct.Permissions.html#method.readonly\n-/// [`PermissionsExt`]: ../os/unix/fs/trait.PermissionsExt.html\n+/// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Permissions(fs_imp::FilePermissions);\n \n /// A structure representing a type of file with accessors for each file type.\n /// It is returned by [`Metadata::file_type`] method.\n-///\n-/// [`Metadata::file_type`]: struct.Metadata.html#method.file_type\n #[stable(feature = \"file_type\", since = \"1.1.0\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FileType(fs_imp::FileType);\n@@ -235,22 +207,17 @@ fn initial_buffer_size(file: &File) -> usize {\n /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n /// with fewer imports and without an intermediate variable. It pre-allocates a\n /// buffer based on the file size when available, so it is generally faster than\n-/// reading into a vector created with `Vec::new()`.\n+/// reading into a vector created with [`Vec::new()`].\n ///\n-/// [`File::open`]: struct.File.html#method.open\n-/// [`read_to_end`]: ../io/trait.Read.html#method.read_to_end\n+/// [`read_to_end`]: Read::read_to_end\n ///\n /// # Errors\n ///\n /// This function will return an error if `path` does not already exist.\n /// Other errors may also be returned according to [`OpenOptions::open`].\n ///\n-/// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n-///\n /// It will also return an error if it encounters while reading an error\n-/// of a kind other than [`ErrorKind::Interrupted`].\n-///\n-/// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+/// of a kind other than [`io::ErrorKind::Interrupted`].\n ///\n /// # Examples\n ///\n@@ -279,24 +246,19 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// This is a convenience function for using [`File::open`] and [`read_to_string`]\n /// with fewer imports and without an intermediate variable. It pre-allocates a\n /// buffer based on the file size when available, so it is generally faster than\n-/// reading into a string created with `String::new()`.\n+/// reading into a string created with [`String::new()`].\n ///\n-/// [`File::open`]: struct.File.html#method.open\n-/// [`read_to_string`]: ../io/trait.Read.html#method.read_to_string\n+/// [`read_to_string`]: Read::read_to_string\n ///\n /// # Errors\n ///\n /// This function will return an error if `path` does not already exist.\n /// Other errors may also be returned according to [`OpenOptions::open`].\n ///\n-/// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n-///\n /// It will also return an error if it encounters while reading an error\n-/// of a kind other than [`ErrorKind::Interrupted`],\n+/// of a kind other than [`io::ErrorKind::Interrupted`],\n /// or if the contents of the file are not valid UTF-8.\n ///\n-/// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -327,8 +289,7 @@ pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n /// This is a convenience function for using [`File::create`] and [`write_all`]\n /// with fewer imports.\n ///\n-/// [`File::create`]: struct.File.html#method.create\n-/// [`write_all`]: ../io/trait.Write.html#method.write_all\n+/// [`write_all`]: Write::write_all\n ///\n /// # Examples\n ///\n@@ -359,8 +320,6 @@ impl File {\n     /// This function will return an error if `path` does not already exist.\n     /// Other errors may also be returned according to [`OpenOptions::open`].\n     ///\n-    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -383,8 +342,6 @@ impl File {\n     ///\n     /// See the [`OpenOptions::open`] function for more details.\n     ///\n-    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -413,8 +370,6 @@ impl File {\n     ///\n     /// See the [`OpenOptions::new`] function for more details.\n     ///\n-    /// [`OpenOptions::new`]: struct.OpenOptions.html#method.new\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -469,7 +424,7 @@ impl File {\n     /// Note that some platforms may simply implement this in terms of\n     /// [`sync_all`].\n     ///\n-    /// [`sync_all`]: struct.File.html#method.sync_all\n+    /// [`sync_all`]: File::sync_all\n     ///\n     /// # Examples\n     ///\n@@ -824,15 +779,13 @@ impl OpenOptions {\n     ///\n     /// ## Note\n     ///\n-    /// This function doesn't create the file if it doesn't exist. Use the [`create`]\n-    /// method to do so.\n+    /// This function doesn't create the file if it doesn't exist. Use the\n+    /// [`OpenOptions::create`] method to do so.\n     ///\n-    /// [`write()`]: ../../std/fs/struct.File.html#method.write\n-    /// [`flush()`]: ../../std/fs/struct.File.html#method.flush\n-    /// [`seek`]: ../../std/fs/struct.File.html#method.seek\n-    /// [`SeekFrom`]: ../../std/io/enum.SeekFrom.html\n-    /// [`Current`]: ../../std/io/enum.SeekFrom.html#variant.Current\n-    /// [`create`]: #method.create\n+    /// [`write()`]: Write::write\n+    /// [`flush()`]: Write::flush\n+    /// [`seek`]: Seek::seek\n+    /// [`Current`]: SeekFrom::Current\n     ///\n     /// # Examples\n     ///\n@@ -869,11 +822,8 @@ impl OpenOptions {\n \n     /// Sets the option to create a new file, or open it if it already exists.\n     ///\n-    /// In order for the file to be created, [`write`] or [`append`] access must\n-    /// be used.\n-    ///\n-    /// [`write`]: #method.write\n-    /// [`append`]: #method.append\n+    /// In order for the file to be created, [`OpenOptions::write`] or\n+    /// [`OpenOptions::append`] access must be used.\n     ///\n     /// # Examples\n     ///\n@@ -903,8 +853,8 @@ impl OpenOptions {\n     /// The file must be opened with write or append access in order to create\n     /// a new file.\n     ///\n-    /// [`.create()`]: #method.create\n-    /// [`.truncate()`]: #method.truncate\n+    /// [`.create()`]: OpenOptions::create\n+    /// [`.truncate()`]: OpenOptions::truncate\n     ///\n     /// # Examples\n     ///\n@@ -927,9 +877,9 @@ impl OpenOptions {\n     ///\n     /// This function will return an error under a number of different\n     /// circumstances. Some of these error conditions are listed here, together\n-    /// with their [`ErrorKind`]. The mapping to [`ErrorKind`]s is not part of\n-    /// the compatibility contract of the function, especially the `Other` kind\n-    /// might change to more specific kinds in the future.\n+    /// with their [`io::ErrorKind`]. The mapping to [`io::ErrorKind`]s is not\n+    /// part of the compatibility contract of the function, especially the\n+    /// [`Other`] kind might change to more specific kinds in the future.\n     ///\n     /// * [`NotFound`]: The specified file does not exist and neither `create`\n     ///   or `create_new` is set.\n@@ -958,12 +908,11 @@ impl OpenOptions {\n     /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n     /// ```\n     ///\n-    /// [`ErrorKind`]: ../io/enum.ErrorKind.html\n-    /// [`AlreadyExists`]: ../io/enum.ErrorKind.html#variant.AlreadyExists\n-    /// [`InvalidInput`]: ../io/enum.ErrorKind.html#variant.InvalidInput\n-    /// [`NotFound`]: ../io/enum.ErrorKind.html#variant.NotFound\n-    /// [`Other`]: ../io/enum.ErrorKind.html#variant.Other\n-    /// [`PermissionDenied`]: ../io/enum.ErrorKind.html#variant.PermissionDenied\n+    /// [`AlreadyExists`]: io::ErrorKind::AlreadyExists\n+    /// [`InvalidInput`]: io::ErrorKind::InvalidInput\n+    /// [`NotFound`]: io::ErrorKind::NotFound\n+    /// [`Other`]: io::ErrorKind::Other\n+    /// [`PermissionDenied`]: io::ErrorKind::PermissionDenied\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n         self._open(path.as_ref())\n@@ -1008,12 +957,9 @@ impl Metadata {\n \n     /// Returns `true` if this metadata is for a directory. The\n     /// result is mutually exclusive to the result of\n-    /// [`is_file`], and will be false for symlink metadata\n+    /// [`Metadata::is_file`], and will be false for symlink metadata\n     /// obtained from [`symlink_metadata`].\n     ///\n-    /// [`is_file`]: struct.Metadata.html#method.is_file\n-    /// [`symlink_metadata`]: fn.symlink_metadata.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -1033,7 +979,7 @@ impl Metadata {\n \n     /// Returns `true` if this metadata is for a regular file. The\n     /// result is mutually exclusive to the result of\n-    /// [`is_dir`], and will be false for symlink metadata\n+    /// [`Metadata::is_dir`], and will be false for symlink metadata\n     /// obtained from [`symlink_metadata`].\n     ///\n     /// When the goal is simply to read from (or write to) the source, the most\n@@ -1042,11 +988,6 @@ impl Metadata {\n     /// a Unix-like system for example. See [`File::open`] or\n     /// [`OpenOptions::open`] for more information.\n     ///\n-    /// [`is_dir`]: struct.Metadata.html#method.is_dir\n-    /// [`symlink_metadata`]: fn.symlink_metadata.html\n-    /// [`File::open`]: struct.File.html#method.open\n-    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -1256,9 +1197,7 @@ impl Permissions {\n     /// writing.\n     ///\n     /// This operation does **not** modify the filesystem. To modify the\n-    /// filesystem use the [`fs::set_permissions`] function.\n-    ///\n-    /// [`fs::set_permissions`]: fn.set_permissions.html\n+    /// filesystem use the [`set_permissions`] function.\n     ///\n     /// # Examples\n     ///\n@@ -1292,8 +1231,8 @@ impl FileType {\n     /// [`is_file`] and [`is_symlink`]; only zero or one of these\n     /// tests may pass.\n     ///\n-    /// [`is_file`]: struct.FileType.html#method.is_file\n-    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n+    /// [`is_file`]: FileType::is_file\n+    /// [`is_symlink`]: FileType::is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1324,10 +1263,8 @@ impl FileType {\n     /// a Unix-like system for example. See [`File::open`] or\n     /// [`OpenOptions::open`] for more information.\n     ///\n-    /// [`is_dir`]: struct.FileType.html#method.is_dir\n-    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n-    /// [`File::open`]: struct.File.html#method.open\n-    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n+    /// [`is_dir`]: FileType::is_dir\n+    /// [`is_symlink`]: FileType::is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1358,12 +1295,11 @@ impl FileType {\n     /// follows symbolic links, so [`is_symlink`] would always\n     /// return `false` for the target file.\n     ///\n-    /// [`Metadata`]: struct.Metadata.html\n-    /// [`fs::metadata`]: fn.metadata.html\n-    /// [`fs::symlink_metadata`]: fn.symlink_metadata.html\n-    /// [`is_dir`]: struct.FileType.html#method.is_dir\n-    /// [`is_file`]: struct.FileType.html#method.is_file\n-    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n+    /// [`fs::metadata`]: metadata\n+    /// [`fs::symlink_metadata`]: symlink_metadata\n+    /// [`is_dir`]: FileType::is_dir\n+    /// [`is_file`]: FileType::is_file\n+    /// [`is_symlink`]: FileType::is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1450,8 +1386,8 @@ impl DirEntry {\n     /// This function will not traverse symlinks if this entry points at a\n     /// symlink. To traverse symlinks use [`fs::metadata`] or [`fs::File::metadata`].\n     ///\n-    /// [`fs::metadata`]: fn.metadata.html\n-    /// [`fs::File::metadata`]: struct.File.html#method.metadata\n+    /// [`fs::metadata`]: metadata\n+    /// [`fs::File::metadata`]: File::metadata\n     ///\n     /// # Platform-specific behavior\n     ///\n@@ -1721,9 +1657,6 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n /// working with [`File`]s, see the [`io::copy`] function.\n ///\n-/// [`io::copy`]: ../io/fn.copy.html\n-/// [`File`]: ./struct.File.html\n-///\n /// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `open` function in Unix\n@@ -1805,10 +1738,9 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n /// and [`std::os::windows::fs::symlink_file`] or [`symlink_dir`] should be\n /// used instead to make the intent explicit.\n ///\n-/// [`std::os::unix::fs::symlink`]: ../os/unix/fs/fn.symlink.html\n-/// [`std::os::windows::fs::symlink_file`]: ../os/windows/fs/fn.symlink_file.html\n-/// [`symlink_dir`]: ../os/windows/fs/fn.symlink_dir.html\n-///\n+/// [`std::os::unix::fs::symlink`]: crate::os::unix::fs::symlink\n+/// [`std::os::windows::fs::symlink_file`]: crate::os::windows::fs::symlink_file\n+/// [`symlink_dir`]: crate::os::windows::fs::symlink_dir\n ///\n /// # Examples\n ///\n@@ -1930,8 +1862,6 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///   function.)\n /// * `path` already exists.\n ///\n-/// [`create_dir_all`]: fn.create_dir_all.html\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -1974,7 +1904,7 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// concurrently from multiple threads or processes is guaranteed not to fail\n /// due to a race condition with itself.\n ///\n-/// [`fs::create_dir`]: fn.create_dir.html\n+/// [`fs::create_dir`]: create_dir\n ///\n /// # Examples\n ///\n@@ -2043,8 +1973,8 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// See [`fs::remove_file`] and [`fs::remove_dir`].\n ///\n-/// [`fs::remove_file`]:  fn.remove_file.html\n-/// [`fs::remove_dir`]: fn.remove_dir.html\n+/// [`fs::remove_file`]: remove_file\n+/// [`fs::remove_dir`]: remove_dir\n ///\n /// # Examples\n ///\n@@ -2066,9 +1996,6 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// The iterator will yield instances of [`io::Result`]`<`[`DirEntry`]`>`.\n /// New errors may be encountered after an iterator is initially constructed.\n ///\n-/// [`io::Result`]: ../io/type.Result.html\n-/// [`DirEntry`]: struct.DirEntry.html\n-///\n /// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `opendir` function on Unix"}]}