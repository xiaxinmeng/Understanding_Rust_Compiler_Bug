{"sha": "e4277472d277b740e57e5b075c0d71d49efa37cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Mjc3NDcyZDI3N2I3NDBlNTdlNWIwNzVjMGQ3MWQ0OWVmYTM3Y2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T05:28:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T07:12:42Z"}, "message": "core: Split sys::align_of into min_align_of, pref_align_of", "tree": {"sha": "1ec4621b512266349ad0b18a97c7844dfaa3e203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec4621b512266349ad0b18a97c7844dfaa3e203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4277472d277b740e57e5b075c0d71d49efa37cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4277472d277b740e57e5b075c0d71d49efa37cf", "html_url": "https://github.com/rust-lang/rust/commit/e4277472d277b740e57e5b075c0d71d49efa37cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4277472d277b740e57e5b075c0d71d49efa37cf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f909b8b5d9cb24d3d6e2c10231da28aa627e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f909b8b5d9cb24d3d6e2c10231da28aa627e54", "html_url": "https://github.com/rust-lang/rust/commit/f4f909b8b5d9cb24d3d6e2c10231da28aa627e54"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "eba700044c3c386e4c191bd13f90ac99ff6dc62b", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4277472d277b740e57e5b075c0d71d49efa37cf/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4277472d277b740e57e5b075c0d71d49efa37cf/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=e4277472d277b740e57e5b075c0d71d49efa37cf", "patch": "@@ -3,7 +3,8 @@\n export type_desc;\n export get_type_desc;\n export size_of;\n-export align_of;\n+export min_align_of;\n+export pref_align_of;\n export refcount;\n export log_str;\n \n@@ -43,8 +44,21 @@ fn size_of<T>() -> uint unsafe {\n     rusti::size_of::<T>()\n }\n \n-#[doc = \"Returns the alignment of a type\"]\n-fn align_of<T>() -> uint unsafe {\n+#[doc = \"\n+Returns the ABI-required minimum alignment of a type\n+\n+This is the alignment used for struct fields. It may be smaller\n+than the preferred alignment.\n+\"]\n+fn min_align_of<T>() -> uint unsafe {\n+    // FIXME: use rusti::min_align_of after snapshot\n+    // rusti::align_of::<T>()\n+    fail \"FIXME: uncomment the above line to use min_align_of\";\n+}\n+\n+#[doc = \"Returns the preferred alignment of a type\"]\n+fn pref_align_of<T>() -> uint unsafe {\n+    // FIXME: use rusti::pref_align_of after snapshot\n     rusti::align_of::<T>()\n }\n \n@@ -85,24 +99,24 @@ mod tests {\n \n     #[test]\n     fn align_of_basic() {\n-        assert align_of::<u8>() == 1u;\n-        assert align_of::<u16>() == 2u;\n-        assert align_of::<u32>() == 4u;\n+        assert pref_align_of::<u8>() == 1u;\n+        assert pref_align_of::<u16>() == 2u;\n+        assert pref_align_of::<u32>() == 4u;\n     }\n \n     #[test]\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n     fn align_of_32() {\n-        assert align_of::<uint>() == 4u;\n-        assert align_of::<*uint>() == 4u;\n+        assert pref_align_of::<uint>() == 4u;\n+        assert pref_align_of::<*uint>() == 4u;\n     }\n \n     #[test]\n     #[cfg(target_arch = \"x86_64\")]\n     fn align_of_64() {\n-        assert align_of::<uint>() == 8u;\n-        assert align_of::<*uint>() == 8u;\n+        assert pref_align_of::<uint>() == 8u;\n+        assert pref_align_of::<*uint>() == 8u;\n     }\n }\n "}, {"sha": "3176c234b7aa2e0ebbcc5c36ad8205d48990a4d3", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4277472d277b740e57e5b075c0d71d49efa37cf/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4277472d277b740e57e5b075c0d71d49efa37cf/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=e4277472d277b740e57e5b075c0d71d49efa37cf", "patch": "@@ -451,7 +451,7 @@ fn create_boxed_type(cx: @crate_ctxt, outer: ty::t, _inner: ty::t,\n                                           ast::ty_uint(ast::ty_u), span);\n     let scx = create_structure(file_node, ty_to_str(cx.tcx, outer), 0);\n     add_member(scx, \"refcnt\", 0, sys::size_of::<uint>() as int,\n-               sys::align_of::<uint>() as int, refcount_type.node);\n+               sys::min_align_of::<uint>() as int, refcount_type.node);\n     add_member(scx, \"boxed\", 0, 8, //XXX member_size_and_align(??)\n                8, //XXX just a guess\n                boxed.node);\n@@ -502,17 +502,17 @@ fn create_vec(cx: @crate_ctxt, vec_t: ty::t, elem_t: ty::t,\n     let size_t_type = create_basic_type(cx, ty::mk_uint(cx.tcx),\n                                         ast::ty_uint(ast::ty_u), vec_ty_span);\n     add_member(scx, \"fill\", 0, sys::size_of::<libc::size_t>() as int,\n-               sys::align_of::<libc::size_t>() as int, size_t_type.node);\n+               sys::min_align_of::<libc::size_t>() as int, size_t_type.node);\n     add_member(scx, \"alloc\", 0, sys::size_of::<libc::size_t>() as int,\n-               sys::align_of::<libc::size_t>() as int, size_t_type.node);\n+               sys::min_align_of::<libc::size_t>() as int, size_t_type.node);\n     let subrange = llmdnode([lltag(SubrangeTag), lli64(0), lli64(0)]);\n     let (arr_size, arr_align) = size_and_align_of(cx, elem_t);\n     let data_ptr = create_composite_type(ArrayTypeTag, \"\", file_node.node, 0,\n                                          arr_size, arr_align, 0,\n                                          option::some(elem_ty_md.node),\n                                          option::some([subrange]));\n     add_member(scx, \"data\", 0, 0, // clang says the size should be 0\n-               sys::align_of::<u8>() as int, data_ptr);\n+               sys::min_align_of::<u8>() as int, data_ptr);\n     let llnode = finish_structure(scx);\n     ret @{node: llnode, data: {hash: ty::type_id(vec_t)}};\n }"}, {"sha": "886796637eb9e71d464934ce775dff758331ed68", "filename": "src/test/run-pass/rec-align-32-bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4277472d277b740e57e5b075c0d71d49efa37cf/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4277472d277b740e57e5b075c0d71d49efa37cf/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs?ref=e4277472d277b740e57e5b075c0d71d49efa37cf", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     // Send it through the shape code\n     let y = #fmt[\"%?\", x];\n \n-    #debug(\"align inner = %?\", sys::align_of::<inner>()); // 8\n+    #debug(\"align inner = %?\", sys::pref_align_of::<inner>()); // 8\n     #debug(\"size outer = %?\", sys::size_of::<outer>());   // 12\n     #debug(\"y = %s\", y);                                  // (22, (0))\n "}]}