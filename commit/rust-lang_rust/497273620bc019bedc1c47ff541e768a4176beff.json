{"sha": "497273620bc019bedc1c47ff541e768a4176beff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzI3MzYyMGJjMDE5YmVkYzFjNDdmZjU0MWU3NjhhNDE3NmJlZmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T16:58:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T17:01:23Z"}, "message": "don't use Iterator and zip but just invoke `next` manually\n\nThis micro-optimizes some if checks away; the compiler may already\nhave been doing it, not sure.", "tree": {"sha": "9a4593ddf559a97cf95c1dc862f87092d375122f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4593ddf559a97cf95c1dc862f87092d375122f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497273620bc019bedc1c47ff541e768a4176beff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497273620bc019bedc1c47ff541e768a4176beff", "html_url": "https://github.com/rust-lang/rust/commit/497273620bc019bedc1c47ff541e768a4176beff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497273620bc019bedc1c47ff541e768a4176beff/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10414e0553742aba31fa6bcef054531955b4dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10414e0553742aba31fa6bcef054531955b4dd7", "html_url": "https://github.com/rust-lang/rust/commit/e10414e0553742aba31fa6bcef054531955b4dd7"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "8fe4282d90c43b91eee52f67bbce532047e323df", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/497273620bc019bedc1c47ff541e768a4176beff/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497273620bc019bedc1c47ff541e768a4176beff/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=497273620bc019bedc1c47ff541e768a4176beff", "patch": "@@ -38,8 +38,8 @@ pub(super) fn places_conflict<'gcx, 'tcx>(\n fn place_components_conflict<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    borrow_components: PlaceComponentsIter<'_, 'tcx>,\n-    access_components: PlaceComponentsIter<'_, 'tcx>,\n+    mut borrow_components: PlaceComponentsIter<'_, 'tcx>,\n+    mut access_components: PlaceComponentsIter<'_, 'tcx>,\n     access: ShallowOrDeep,\n ) -> bool {\n     // The borrowck rules for proving disjointness are applied from the \"root\" of the\n@@ -83,11 +83,14 @@ fn place_components_conflict<'gcx, 'tcx>(\n     //  - If we didn't run out of access to match, our borrow and access are comparable\n     //    and either equal or disjoint.\n     //  - If we did run out of accesss, the borrow can access a part of it.\n-    for (borrow_c, access_c) in borrow_components.zip(access_components) {\n+    loop {\n         // loop invariant: borrow_c is always either equal to access_c or disjoint from it.\n-        debug!(\"places_conflict: {:?} vs. {:?}\", borrow_c, access_c);\n-        if let Some(borrow_c) = borrow_c {\n-            if let Some(access_c) = access_c {\n+        if let Some(borrow_c) = borrow_components.next() {\n+            debug!(\"places_conflict: borrow_c = {:?}\", borrow_c);\n+\n+            if let Some(access_c) = access_components.next() {\n+                debug!(\"places_conflict: access_c = {:?}\", access_c);\n+\n                 // Borrow and access path both have more components.\n                 //\n                 // Examples:\n@@ -214,7 +217,6 @@ fn place_components_conflict<'gcx, 'tcx>(\n             return true;\n         }\n     }\n-    unreachable!(\"iter::repeat returned None\")\n }\n \n /// A linked list of places running up the stack; begins with the\n@@ -243,19 +245,21 @@ impl<'p, 'tcx> PlaceComponents<'p, 'tcx> {\n \n /// Iterator over components; see `PlaceComponents::iter` for more\n /// information.\n+///\n+/// NB: This is not a *true* Rust iterator -- the code above just\n+/// manually invokes `next`. This is because we (sometimes) want to\n+/// keep executing even after `None` has been returned.\n struct PlaceComponentsIter<'p, 'tcx: 'p> {\n     value: Option<&'p PlaceComponents<'p, 'tcx>>\n }\n \n-impl<'p, 'tcx> Iterator for PlaceComponentsIter<'p, 'tcx> {\n-    type Item = Option<&'p Place<'tcx>>;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n+impl<'p, 'tcx> PlaceComponentsIter<'p, 'tcx> {\n+    fn next(&mut self) -> Option<&'p Place<'tcx>> {\n         if let Some(&PlaceComponents { component, next }) = self.value {\n             self.value = next;\n-            Some(Some(component))\n+            Some(component)\n         } else {\n-            Some(None)\n+            None\n         }\n     }\n }"}]}