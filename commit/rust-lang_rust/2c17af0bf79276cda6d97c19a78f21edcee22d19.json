{"sha": "2c17af0bf79276cda6d97c19a78f21edcee22d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTdhZjBiZjc5Mjc2Y2RhNmQ5N2MxOWE3OGYyMWVkY2VlMjJkMTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-20T15:24:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "track if any region constraints involved placeholders", "tree": {"sha": "1b843079f0af0cc1fb14b090a060b7847c563501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b843079f0af0cc1fb14b090a060b7847c563501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c17af0bf79276cda6d97c19a78f21edcee22d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c17af0bf79276cda6d97c19a78f21edcee22d19", "html_url": "https://github.com/rust-lang/rust/commit/2c17af0bf79276cda6d97c19a78f21edcee22d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c17af0bf79276cda6d97c19a78f21edcee22d19/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ea9b877c68c62a52140f47d5e38adf5ee6c808", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ea9b877c68c62a52140f47d5e38adf5ee6c808", "html_url": "https://github.com/rust-lang/rust/commit/13ea9b877c68c62a52140f47d5e38adf5ee6c808"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "0a5e399aaad75a250d3899998c9adb5ccb1076cf", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c17af0bf79276cda6d97c19a78f21edcee22d19/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17af0bf79276cda6d97c19a78f21edcee22d19/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=2c17af0bf79276cda6d97c19a78f21edcee22d19", "patch": "@@ -867,10 +867,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         r\n     }\n \n+    /// Scan the constraints produced since `snapshot` began and returns:\n+    ///\n+    /// - None -- if none of them involve \"region outlives\" constraints\n+    /// - Some(true) -- if there are `'a: 'b` constraints where `'a` or `'b` is a placehodler\n+    /// - Some(false) -- if there are `'a: 'b` constraints but none involve placeholders\n     pub fn region_constraints_added_in_snapshot(\n         &self,\n         snapshot: &CombinedSnapshot<'a, 'tcx>,\n-    ) -> bool {\n+    ) -> Option<bool> {\n         self.borrow_region_constraints().region_constraints_added_in_snapshot(\n             &snapshot.region_constraints_snapshot,\n         )"}, {"sha": "56ae850226c91624f2ab24010555f9c993434225", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2c17af0bf79276cda6d97c19a78f21edcee22d19/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17af0bf79276cda6d97c19a78f21edcee22d19/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=2c17af0bf79276cda6d97c19a78f21edcee22d19", "patch": "@@ -128,6 +128,16 @@ pub enum Constraint<'tcx> {\n     RegSubReg(Region<'tcx>, Region<'tcx>),\n }\n \n+impl Constraint<'_> {\n+    pub fn involves_placeholders(&self) -> bool {\n+        match self {\n+            Constraint::VarSubVar(_, _) => false,\n+            Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),\n+            Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),\n+        }\n+    }\n+}\n+\n /// VerifyGenericBound(T, _, R, RS): The parameter type `T` (or\n /// associated type) must outlive the region `R`. `T` is known to\n /// outlive `RS`. Therefore verify that `R <= RS[i]` for some\n@@ -324,6 +334,8 @@ impl TaintDirections {\n     }\n }\n \n+pub struct ConstraintInfo {}\n+\n impl<'tcx> RegionConstraintCollector<'tcx> {\n     pub fn new() -> Self {\n         Self::default()\n@@ -485,7 +497,8 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table\n+        let u_vid = self\n+            .unification_table\n             .new_key(unify_key::RegionVidKey { min_vid: vid });\n         assert_eq!(vid, u_vid);\n         if self.in_snapshot() {\n@@ -517,7 +530,8 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n         assert!(self.in_snapshot());\n \n-        let constraints_to_kill: Vec<usize> = self.undo_log\n+        let constraints_to_kill: Vec<usize> = self\n+            .undo_log\n             .iter()\n             .enumerate()\n             .rev()\n@@ -820,17 +834,18 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             .filter_map(|&elt| match elt {\n                 AddVar(vid) => Some(vid),\n                 _ => None,\n-            })\n-            .collect()\n+            }).collect()\n     }\n \n-    pub fn region_constraints_added_in_snapshot(&self, mark: &RegionSnapshot) -> bool {\n+    /// See [`RegionInference::region_constraints_added_in_snapshot`]\n+    pub fn region_constraints_added_in_snapshot(&self, mark: &RegionSnapshot) -> Option<bool> {\n         self.undo_log[mark.length..]\n             .iter()\n-            .any(|&elt| match elt {\n-                AddConstraint(_) => true,\n-                _ => false,\n-            })\n+            .map(|&elt| match elt {\n+                AddConstraint(constraint) => Some(constraint.involves_placeholders()),\n+                _ => None,\n+            }).max()\n+            .unwrap_or(None)\n     }\n }\n "}, {"sha": "373ec2d5e490fc5605a2389f2751b3a44a37232a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c17af0bf79276cda6d97c19a78f21edcee22d19/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17af0bf79276cda6d97c19a78f21edcee22d19/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2c17af0bf79276cda6d97c19a78f21edcee22d19", "patch": "@@ -639,10 +639,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {\n             let result = op(self)?;\n-            if !self.infcx.region_constraints_added_in_snapshot(snapshot) {\n-                Ok(result)\n-            } else {\n-                Ok(result.max(EvaluatedToOkModuloRegions))\n+            match self.infcx.region_constraints_added_in_snapshot(snapshot) {\n+                None => Ok(result),\n+                Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),\n             }\n         })\n     }"}]}