{"sha": "93310efdbe80d01e287b935e0f86a834bc6c4574", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzEwZWZkYmU4MGQwMWUyODdiOTM1ZTBmODZhODM0YmM2YzQ1NzQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-20T12:49:04Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T14:08:58Z"}, "message": "Use AcquireSRWLockExclusive::is_available() instead of an extra lookup.", "tree": {"sha": "e96a93ffef6ef5d195b369c4df77403c92a217b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96a93ffef6ef5d195b369c4df77403c92a217b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93310efdbe80d01e287b935e0f86a834bc6c4574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93310efdbe80d01e287b935e0f86a834bc6c4574", "html_url": "https://github.com/rust-lang/rust/commit/93310efdbe80d01e287b935e0f86a834bc6c4574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93310efdbe80d01e287b935e0f86a834bc6c4574/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b2bdfd453d196f4d108183efe1f5a58292d5f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2bdfd453d196f4d108183efe1f5a58292d5f11", "html_url": "https://github.com/rust-lang/rust/commit/8b2bdfd453d196f4d108183efe1f5a58292d5f11"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "1028dc9ff50c478e356c944e21a45d190b957a39", "filename": "library/std/src/sys/windows/mutex.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93310efdbe80d01e287b935e0f86a834bc6c4574/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93310efdbe80d01e287b935e0f86a834bc6c4574/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs?ref=93310efdbe80d01e287b935e0f86a834bc6c4574", "patch": "@@ -23,7 +23,6 @@ use crate::cell::{Cell, UnsafeCell};\n use crate::mem::{self, MaybeUninit};\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::c;\n-use crate::sys::compat;\n \n pub struct Mutex {\n     // This is either directly an SRWLOCK (if supported), or a Box<Inner> otherwise.\n@@ -40,8 +39,8 @@ struct Inner {\n \n #[derive(Clone, Copy)]\n enum Kind {\n-    SRWLock = 1,\n-    CriticalSection = 2,\n+    SRWLock,\n+    CriticalSection,\n }\n \n #[inline]\n@@ -130,21 +129,11 @@ impl Mutex {\n }\n \n fn kind() -> Kind {\n-    static KIND: AtomicUsize = AtomicUsize::new(0);\n-\n-    let val = KIND.load(Ordering::SeqCst);\n-    if val == Kind::SRWLock as usize {\n-        return Kind::SRWLock;\n-    } else if val == Kind::CriticalSection as usize {\n-        return Kind::CriticalSection;\n+    if c::AcquireSRWLockExclusive::is_available() {\n+        Kind::SRWLock\n+    } else {\n+        Kind::CriticalSection\n     }\n-\n-    let ret = match compat::lookup(\"kernel32\", \"AcquireSRWLockExclusive\") {\n-        None => Kind::CriticalSection,\n-        Some(..) => Kind::SRWLock,\n-    };\n-    KIND.store(ret as usize, Ordering::SeqCst);\n-    ret\n }\n \n pub struct ReentrantMutex {"}]}