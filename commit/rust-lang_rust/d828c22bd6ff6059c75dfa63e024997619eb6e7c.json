{"sha": "d828c22bd6ff6059c75dfa63e024997619eb6e7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjhjMjJiZDZmZjYwNTljNzVkZmE2M2UwMjQ5OTc2MTllYjZlN2M=", "commit": {"author": {"name": "Thomas Heck", "email": "t@b128.net", "date": "2018-12-08T08:35:23Z"}, "committer": {"name": "Thomas Heck", "email": "t@b128.net", "date": "2018-12-08T12:30:55Z"}, "message": "Add Arc/Rc Eq tests", "tree": {"sha": "9e7054823e431534a221d12553137e3275a7a289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7054823e431534a221d12553137e3275a7a289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d828c22bd6ff6059c75dfa63e024997619eb6e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d828c22bd6ff6059c75dfa63e024997619eb6e7c", "html_url": "https://github.com/rust-lang/rust/commit/d828c22bd6ff6059c75dfa63e024997619eb6e7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d828c22bd6ff6059c75dfa63e024997619eb6e7c/comments", "author": {"login": "chpio", "id": 545659, "node_id": "MDQ6VXNlcjU0NTY1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/545659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chpio", "html_url": "https://github.com/chpio", "followers_url": "https://api.github.com/users/chpio/followers", "following_url": "https://api.github.com/users/chpio/following{/other_user}", "gists_url": "https://api.github.com/users/chpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/chpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chpio/subscriptions", "organizations_url": "https://api.github.com/users/chpio/orgs", "repos_url": "https://api.github.com/users/chpio/repos", "events_url": "https://api.github.com/users/chpio/events{/privacy}", "received_events_url": "https://api.github.com/users/chpio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chpio", "id": 545659, "node_id": "MDQ6VXNlcjU0NTY1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/545659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chpio", "html_url": "https://github.com/chpio", "followers_url": "https://api.github.com/users/chpio/followers", "following_url": "https://api.github.com/users/chpio/following{/other_user}", "gists_url": "https://api.github.com/users/chpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/chpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chpio/subscriptions", "organizations_url": "https://api.github.com/users/chpio/orgs", "repos_url": "https://api.github.com/users/chpio/repos", "events_url": "https://api.github.com/users/chpio/events{/privacy}", "received_events_url": "https://api.github.com/users/chpio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d60a4608c76e8a74ab643f4629dbaf129e07a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d60a4608c76e8a74ab643f4629dbaf129e07a4", "html_url": "https://github.com/rust-lang/rust/commit/40d60a4608c76e8a74ab643f4629dbaf129e07a4"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "ec589710216c3b048e416412d36563f338eeb11a", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d828c22bd6ff6059c75dfa63e024997619eb6e7c/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d828c22bd6ff6059c75dfa63e024997619eb6e7c/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=d828c22bd6ff6059c75dfa63e024997619eb6e7c", "patch": "@@ -10,6 +10,8 @@\n \n use std::any::Any;\n use std::sync::{Arc, Weak};\n+use std::cell::RefCell;\n+use std::cmp::PartialEq;\n \n #[test]\n fn uninhabited() {\n@@ -53,3 +55,43 @@ fn trait_object() {\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }\n+\n+#[test]\n+fn float_nan_ne() {\n+    let x = Arc::new(std::f32::NAN);\n+    assert!(x != x);\n+    assert!(!(x == x));\n+}\n+\n+#[test]\n+fn partial_eq() {\n+    struct TestPEq (RefCell<usize>);\n+    impl PartialEq for TestPEq {\n+        fn eq(&self, other: &TestPEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Arc::new(TestPEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 4);\n+}\n+\n+#[test]\n+fn eq() {\n+    #[derive(Eq)]\n+    struct TestEq (RefCell<usize>);\n+    impl PartialEq for TestEq {\n+        fn eq(&self, other: &TestEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Arc::new(TestEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 0);\n+}"}, {"sha": "02e1dfe13bb360aab42e0d41ca1549a3feb62414", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d828c22bd6ff6059c75dfa63e024997619eb6e7c/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d828c22bd6ff6059c75dfa63e024997619eb6e7c/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=d828c22bd6ff6059c75dfa63e024997619eb6e7c", "patch": "@@ -10,6 +10,8 @@\n \n use std::any::Any;\n use std::rc::{Rc, Weak};\n+use std::cell::RefCell;\n+use std::cmp::PartialEq;\n \n #[test]\n fn uninhabited() {\n@@ -53,3 +55,43 @@ fn trait_object() {\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }\n+\n+#[test]\n+fn float_nan_ne() {\n+    let x = Rc::new(std::f32::NAN);\n+    assert!(x != x);\n+    assert!(!(x == x));\n+}\n+\n+#[test]\n+fn partial_eq() {\n+    struct TestPEq (RefCell<usize>);\n+    impl PartialEq for TestPEq {\n+        fn eq(&self, other: &TestPEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Rc::new(TestPEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 4);\n+}\n+\n+#[test]\n+fn eq() {\n+    #[derive(Eq)]\n+    struct TestEq (RefCell<usize>);\n+    impl PartialEq for TestEq {\n+        fn eq(&self, other: &TestEq) -> bool {\n+            *self.0.borrow_mut() += 1;\n+            *other.0.borrow_mut() += 1;\n+            true\n+        }\n+    }\n+    let x = Rc::new(TestEq(RefCell::new(0)));\n+    assert!(x == x);\n+    assert!(!(x != x));\n+    assert_eq!(*x.0.borrow(), 0);\n+}"}]}