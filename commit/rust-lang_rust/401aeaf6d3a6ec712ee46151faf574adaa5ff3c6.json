{"sha": "401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMWFlYWY2ZDNhNmVjNzEyZWU0NjE1MWZhZjU3NGFkYWE1ZmYzYzY=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-03T19:00:08Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-10-05T03:09:09Z"}, "message": "Add intrinsics::unreachable", "tree": {"sha": "d8f456d0fa5868f969d868ce0eaf7c62d9a327ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f456d0fa5868f969d868ce0eaf7c62d9a327ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "html_url": "https://github.com/rust-lang/rust/commit/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f3cda8bd8496c3b3771b0201d1073ed575321d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3cda8bd8496c3b3771b0201d1073ed575321d0", "html_url": "https://github.com/rust-lang/rust/commit/1f3cda8bd8496c3b3771b0201d1073ed575321d0"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "7d86b65168f3cdc2763cb5bc6a785196ee6bcd86", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "patch": "@@ -250,6 +250,13 @@ extern \"rust-intrinsic\" {\n     /// Abort the execution of the process.\n     pub fn abort() -> !;\n \n+    /// Tell LLVM that this point in the code is not reachable,\n+    /// enabling further optimizations.\n+    ///\n+    /// NB: This is very different from the `unreachable!()` macro!\n+    #[cfg(not(stage0))]\n+    pub fn unreachable() -> !;\n+\n     /// Execute a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n "}, {"sha": "f9d55143c840073695079e4eabaccbd4137a6c6f", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "patch": "@@ -228,6 +228,10 @@ pub fn trans_intrinsic_call<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>, node: ast::N\n             Unreachable(bcx);\n             v\n         }\n+        (_, \"unreachable\") => {\n+            Unreachable(bcx);\n+            C_nil(ccx)\n+        }\n         (_, \"breakpoint\") => {\n             let llfn = ccx.get_intrinsic(&(\"llvm.debugtrap\"));\n             Call(bcx, llfn, [], None)"}, {"sha": "197fd2367277a8095c68a3d018649c7111b76097", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401aeaf6d3a6ec712ee46151faf574adaa5ff3c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=401aeaf6d3a6ec712ee46151faf574adaa5ff3c6", "patch": "@@ -5589,6 +5589,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n     } else {\n         match name.get() {\n             \"abort\" => (0, Vec::new(), ty::mk_bot()),\n+            \"unreachable\" => (0, Vec::new(), ty::mk_bot()),\n             \"breakpoint\" => (0, Vec::new(), ty::mk_nil()),\n             \"size_of\" |\n             \"pref_align_of\" | \"min_align_of\" => (1u, Vec::new(), ty::mk_uint()),"}]}