{"sha": "0ef4da126a79f98139a4ddccd7ac368e14f625c0", "node_id": "C_kwDOAAsO6NoAKDBlZjRkYTEyNmE3OWY5ODEzOWE0ZGRjY2Q3YWMzNjhlMTRmNjI1YzA", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-21T12:00:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T12:00:22Z"}, "message": "Rollup merge of #108842 - compiler-errors:non_lifetime_binders-object-safe, r=b-naber\n\nEnforce non-lifetime-binders in supertrait preds are not object safe\n\nWe can't construct vtables for these supertraits.", "tree": {"sha": "bbe604acab0b9024edd74941b4099112ce775b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe604acab0b9024edd74941b4099112ce775b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef4da126a79f98139a4ddccd7ac368e14f625c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGZxWCRBK7hj4Ov3rIwAA5MsIAHFK0VjsnUwXOTzqZq+N9h5u\nXtX5EiLwZVeXwvIEoEOT01Yt50TVHkUBUSFBumnXQKet97sdwGGG3svjCNuLPfV6\nhw0MFRvQEgJ8dQSmDBx4fwkheHMYmsK3Re+rzFKmhoLLwzLS39aDzvt9ypUVuWdg\nhqn7mrbsDbj3xMcgZRN7VPykPlqGmaP3aW15qhGu2KQsuzBKCyXsZrbNAa24CmJM\nWd6d+YIaEz3yfih3yea20f8fFmLcARcl9shuoHa5s4NvlUIEXKyv8/98EcTp5dyq\n75CsM/h++1znhLxkpNNwABrsztIIZe5zizQt4BEcaUEhpcf5KUEr4H28BmKiKVo=\n=VPDY\n-----END PGP SIGNATURE-----\n", "payload": "tree bbe604acab0b9024edd74941b4099112ce775b75\nparent 82dc127d7be8ae7aeefed8821b65b1afb2080cf1\nparent 720cc40fa7114e4ea429b4d6f22790d157971756\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1679400022 +0100\ncommitter GitHub <noreply@github.com> 1679400022 +0100\n\nRollup merge of #108842 - compiler-errors:non_lifetime_binders-object-safe, r=b-naber\n\nEnforce non-lifetime-binders in supertrait preds are not object safe\n\nWe can't construct vtables for these supertraits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef4da126a79f98139a4ddccd7ac368e14f625c0", "html_url": "https://github.com/rust-lang/rust/commit/0ef4da126a79f98139a4ddccd7ac368e14f625c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef4da126a79f98139a4ddccd7ac368e14f625c0/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82dc127d7be8ae7aeefed8821b65b1afb2080cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/82dc127d7be8ae7aeefed8821b65b1afb2080cf1", "html_url": "https://github.com/rust-lang/rust/commit/82dc127d7be8ae7aeefed8821b65b1afb2080cf1"}, {"sha": "720cc40fa7114e4ea429b4d6f22790d157971756", "url": "https://api.github.com/repos/rust-lang/rust/commits/720cc40fa7114e4ea429b4d6f22790d157971756", "html_url": "https://github.com/rust-lang/rust/commit/720cc40fa7114e4ea429b4d6f22790d157971756"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "833402abfc4798a16ebb1cb64e7a11fa5550e5e7", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ef4da126a79f98139a4ddccd7ac368e14f625c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef4da126a79f98139a4ddccd7ac368e14f625c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=0ef4da126a79f98139a4ddccd7ac368e14f625c0", "patch": "@@ -897,6 +897,9 @@ pub enum ObjectSafetyViolation {\n     /// (e.g., `trait Foo : Bar<Self>`).\n     SupertraitSelf(SmallVec<[Span; 1]>),\n \n+    // Supertrait has a non-lifetime `for<T>` binder.\n+    SupertraitNonLifetimeBinder(SmallVec<[Span; 1]>),\n+\n     /// Method has something illegal.\n     Method(Symbol, MethodViolationCode, Span),\n \n@@ -919,6 +922,9 @@ impl ObjectSafetyViolation {\n                         .into()\n                 }\n             }\n+            ObjectSafetyViolation::SupertraitNonLifetimeBinder(_) => {\n+                format!(\"where clause cannot reference non-lifetime `for<...>` variables\").into()\n+            }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n             }\n@@ -969,7 +975,9 @@ impl ObjectSafetyViolation {\n \n     pub fn solution(&self, err: &mut Diagnostic) {\n         match self {\n-            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {}\n+            ObjectSafetyViolation::SizedSelf(_)\n+            | ObjectSafetyViolation::SupertraitSelf(_)\n+            | ObjectSafetyViolation::SupertraitNonLifetimeBinder(..) => {}\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::StaticMethod(Some((add_self_sugg, make_sized_sugg))),\n@@ -1023,7 +1031,8 @@ impl ObjectSafetyViolation {\n         // diagnostics use a `note` instead of a `span_label`.\n         match self {\n             ObjectSafetyViolation::SupertraitSelf(spans)\n-            | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n+            | ObjectSafetyViolation::SizedSelf(spans)\n+            | ObjectSafetyViolation::SupertraitNonLifetimeBinder(spans) => spans.clone(),\n             ObjectSafetyViolation::AssocConst(_, span)\n             | ObjectSafetyViolation::GAT(_, span)\n             | ObjectSafetyViolation::Method(_, _, span)"}, {"sha": "038f8964471f5c8f2190b93df6b15beacb46709f", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0ef4da126a79f98139a4ddccd7ac368e14f625c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef4da126a79f98139a4ddccd7ac368e14f625c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=0ef4da126a79f98139a4ddccd7ac368e14f625c0", "patch": "@@ -17,10 +17,10 @@ use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n-use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{\n     self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n+use rustc_middle::ty::{ToPredicate, TypeVisitableExt};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -139,6 +139,10 @@ fn object_safety_violations_for_trait(\n     if !spans.is_empty() {\n         violations.push(ObjectSafetyViolation::SupertraitSelf(spans));\n     }\n+    let spans = super_predicates_have_non_lifetime_binders(tcx, trait_def_id);\n+    if !spans.is_empty() {\n+        violations.push(ObjectSafetyViolation::SupertraitNonLifetimeBinder(spans));\n+    }\n \n     violations.extend(\n         tcx.associated_items(trait_def_id)\n@@ -348,6 +352,21 @@ fn predicate_references_self<'tcx>(\n     }\n }\n \n+fn super_predicates_have_non_lifetime_binders(\n+    tcx: TyCtxt<'_>,\n+    trait_def_id: DefId,\n+) -> SmallVec<[Span; 1]> {\n+    // If non_lifetime_binders is disabled, then exit early\n+    if !tcx.features().non_lifetime_binders {\n+        return SmallVec::new();\n+    }\n+    tcx.super_predicates_of(trait_def_id)\n+        .predicates\n+        .iter()\n+        .filter_map(|(pred, span)| pred.has_non_region_late_bound().then_some(*span))\n+        .collect()\n+}\n+\n fn trait_has_sized_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n     generics_require_sized_self(tcx, trait_def_id)\n }"}, {"sha": "a635edb4485bd94425a6b5a481c7593b72e99a19", "filename": "tests/ui/traits/non_lifetime_binders/supertrait-object-safety.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0ef4da126a79f98139a4ddccd7ac368e14f625c0/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef4da126a79f98139a4ddccd7ac368e14f625c0/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.rs?ref=0ef4da126a79f98139a4ddccd7ac368e14f625c0", "patch": "@@ -0,0 +1,24 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Foo: for<T> Bar<T> {}\n+\n+trait Bar<T: ?Sized> {\n+    fn method(&self) {}\n+}\n+\n+fn needs_bar(x: &(impl Bar<i32> + ?Sized)) {\n+    x.method();\n+}\n+\n+impl Foo for () {}\n+\n+impl<T: ?Sized> Bar<T> for () {}\n+\n+fn main() {\n+    let x: &dyn Foo = &();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+    //~| ERROR the trait `Foo` cannot be made into an object\n+    needs_bar(x);\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "47fa29b66488b4ec29beada11f8439b1f8d8474c", "filename": "tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0ef4da126a79f98139a4ddccd7ac368e14f625c0/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ef4da126a79f98139a4ddccd7ac368e14f625c0/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr?ref=0ef4da126a79f98139a4ddccd7ac368e14f625c0", "patch": "@@ -0,0 +1,56 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/supertrait-object-safety.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/supertrait-object-safety.rs:19:23\n+   |\n+LL |     let x: &dyn Foo = &();\n+   |                       ^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/supertrait-object-safety.rs:4:12\n+   |\n+LL | trait Foo: for<T> Bar<T> {}\n+   |       ---  ^^^^^^^^^^^^^ ...because where clause cannot reference non-lifetime `for<...>` variables\n+   |       |\n+   |       this trait cannot be made into an object...\n+   = note: required for `&()` to implement `CoerceUnsized<&dyn Foo>`\n+   = note: required by cast to type `&dyn Foo`\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/supertrait-object-safety.rs:19:12\n+   |\n+LL |     let x: &dyn Foo = &();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/supertrait-object-safety.rs:4:12\n+   |\n+LL | trait Foo: for<T> Bar<T> {}\n+   |       ---  ^^^^^^^^^^^^^ ...because where clause cannot reference non-lifetime `for<...>` variables\n+   |       |\n+   |       this trait cannot be made into an object...\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/supertrait-object-safety.rs:22:5\n+   |\n+LL |     needs_bar(x);\n+   |     ^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/supertrait-object-safety.rs:4:12\n+   |\n+LL | trait Foo: for<T> Bar<T> {}\n+   |       ---  ^^^^^^^^^^^^^ ...because where clause cannot reference non-lifetime `for<...>` variables\n+   |       |\n+   |       this trait cannot be made into an object...\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}]}