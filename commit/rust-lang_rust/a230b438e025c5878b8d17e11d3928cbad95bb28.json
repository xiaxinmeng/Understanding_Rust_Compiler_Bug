{"sha": "a230b438e025c5878b8d17e11d3928cbad95bb28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzBiNDM4ZTAyNWM1ODc4YjhkMTdlMTFkMzkyOGNiYWQ5NWJiMjg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-15T16:48:17Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-15T16:48:17Z"}, "message": "Merge #127\n\n127: Improve folding r=matklad a=aochagavia\n\nI was messing around with adding support for multiline comments in folding and ended up changing a bunch of other things. \r\n\r\nFirst of all, I am not convinced of folding groups of successive items. For instance, I don't see why it is worthwhile to be able to fold something like the following:\r\n\r\n```rust\r\nuse foo;\r\nuse bar;\r\n```\r\n\r\nFurthermore, this causes problems if you want to fold a multiline import:\r\n\r\n```rust\r\nuse foo::{\r\n  quux\r\n};\r\nuse bar;\r\n```\r\n\r\nThe problem is that now there are two possible folds at the same position: we could fold the first use or we could fold the import group. IMO, the only place where folding groups makes sense is when folding comments. Therefore I have **removed folding import groups in favor of folding multiline imports**.\r\n\r\nRegarding folding comments, I made it a bit more robust by requiring that comments can only be folded if they have the same flavor. So if you have a bunch of `//` comments followed by `//!` comments, you will get two separate fold groups instead of a single one.\r\n\r\nFinally, I rewrote the API in such a way that it should be trivial to add new folds. You only need to:\r\n\r\n* Create a new FoldKind\r\n* Add it to the `fold_kind` function that converts from `SyntaxKind` to `FoldKind`\r\n\r\nFixes #113 \n\nCo-authored-by: Adolfo Ochagav\u00eda <github@adolfo.ochagavia.xyz>", "tree": {"sha": "231872915ede46874b6e7d2b3d1240d1defa5231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231872915ede46874b6e7d2b3d1240d1defa5231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a230b438e025c5878b8d17e11d3928cbad95bb28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a230b438e025c5878b8d17e11d3928cbad95bb28", "html_url": "https://github.com/rust-lang/rust/commit/a230b438e025c5878b8d17e11d3928cbad95bb28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a230b438e025c5878b8d17e11d3928cbad95bb28/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e031b65f93f73164a5729cf81ff60299708bc931", "url": "https://api.github.com/repos/rust-lang/rust/commits/e031b65f93f73164a5729cf81ff60299708bc931", "html_url": "https://github.com/rust-lang/rust/commit/e031b65f93f73164a5729cf81ff60299708bc931"}, {"sha": "2bc9e9f32711047b06940c335eb5327281f8c555", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc9e9f32711047b06940c335eb5327281f8c555", "html_url": "https://github.com/rust-lang/rust/commit/2bc9e9f32711047b06940c335eb5327281f8c555"}], "stats": {"total": 266, "additions": 187, "deletions": 79}, "files": [{"sha": "a1699d44940370bfb09042184559e7ed36f89c8b", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 111, "deletions": 66, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=a230b438e025c5878b8d17e11d3928cbad95bb28", "patch": "@@ -1,8 +1,10 @@\n use rustc_hash::FxHashSet;\n \n use ra_syntax::{\n+    ast,\n+    AstNode,\n     File, TextRange, SyntaxNodeRef,\n-    SyntaxKind,\n+    SyntaxKind::{self, *},\n     Direction,\n };\n \n@@ -20,120 +22,163 @@ pub struct Fold {\n \n pub fn folding_ranges(file: &File) -> Vec<Fold> {\n     let mut res = vec![];\n-    let mut visited = FxHashSet::default();\n+    let mut visited_comments = FxHashSet::default();\n \n     for node in file.syntax().descendants() {\n-        if visited.contains(&node) {\n+        // Fold items that span multiple lines\n+        if let Some(kind) = fold_kind(node.kind()) {\n+            if has_newline(node) {\n+                res.push(Fold { range: node.range(), kind });\n+            }\n+        }\n+\n+        // Also fold groups of comments\n+        if visited_comments.contains(&node) {\n             continue;\n         }\n+        if node.kind() == COMMENT {\n+            contiguous_range_for_comment(node, &mut visited_comments)\n+                .map(|range| res.push(Fold { range, kind: FoldKind::Comment }));\n+        }\n+    }\n+\n+    res\n+}\n \n-        let range_and_kind = match node.kind() {\n-            SyntaxKind::COMMENT => (\n-                contiguous_range_for(SyntaxKind::COMMENT, node, &mut visited),\n-                Some(FoldKind::Comment),\n-            ),\n-            SyntaxKind::USE_ITEM => (\n-                contiguous_range_for(SyntaxKind::USE_ITEM, node, &mut visited),\n-                Some(FoldKind::Imports),\n-            ),\n-            _ => (None, None),\n-        };\n-\n-        match range_and_kind {\n-            (Some(range), Some(kind)) => {\n-                res.push(Fold {\n-                    range: range,\n-                    kind: kind\n-                });\n+fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n+    match kind {\n+        COMMENT => Some(FoldKind::Comment),\n+        USE_ITEM => Some(FoldKind::Imports),\n+        _ => None\n+    }\n+}\n+\n+fn has_newline(\n+    node: SyntaxNodeRef,\n+) -> bool {\n+    for descendant in node.descendants() {\n+        if let Some(ws) = ast::Whitespace::cast(descendant) {\n+            if ws.has_newlines() {\n+                return true;\n+            }\n+        } else if let Some(comment) = ast::Comment::cast(descendant) {\n+            if comment.has_newlines() {\n+                return true;\n             }\n-            _ => {}\n         }\n     }\n \n-    res\n+    false\n }\n \n-fn contiguous_range_for<'a>(\n-    kind: SyntaxKind,\n-    node: SyntaxNodeRef<'a>,\n+fn contiguous_range_for_comment<'a>(\n+    first: SyntaxNodeRef<'a>,\n     visited: &mut FxHashSet<SyntaxNodeRef<'a>>,\n ) -> Option<TextRange> {\n-    visited.insert(node);\n-\n-    let left = node;\n-    let mut right = node;\n-    for node in node.siblings(Direction::Next) {\n-        visited.insert(node);\n-        match node.kind() {\n-            SyntaxKind::WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),\n-            k => {\n-                if k == kind {\n-                    right = node\n-                } else {\n-                    break;\n-                }\n+    visited.insert(first);\n+\n+    // Only fold comments of the same flavor\n+    let group_flavor = ast::Comment::cast(first)?.flavor();\n+\n+    let mut last = first;\n+    for node in first.siblings(Direction::Next) {\n+        if let Some(ws) = ast::Whitespace::cast(node) {\n+            // There is a blank line, which means the group ends here\n+            if ws.count_newlines_lazy().take(2).count() == 2 {\n+                break;\n+            }\n+\n+            // Ignore whitespace without blank lines\n+            continue;\n+        }\n+\n+        match ast::Comment::cast(node) {\n+            Some(next_comment) if next_comment.flavor() == group_flavor => {\n+                visited.insert(node);\n+                last = node;\n+            }\n+            // The comment group ends because either:\n+            // * An element of a different kind was reached\n+            // * A comment of a different flavor was reached\n+            _ => {\n+                break\n             }\n         }\n     }\n-    if left != right {\n+\n+    if first != last {\n         Some(TextRange::from_to(\n-            left.range().start(),\n-            right.range().end(),\n+            first.range().start(),\n+            last.range().end(),\n         ))\n     } else {\n+        // The group consists of only one element, therefore it cannot be folded\n         None\n     }\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use test_utils::extract_ranges;\n+\n+    fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n+        let (ranges, text) = extract_ranges(text);\n+        let file = File::parse(&text);\n+        let folds = folding_ranges(&file);\n+\n+        assert_eq!(folds.len(), ranges.len());\n+        for ((fold, range), fold_kind) in folds.into_iter().zip(ranges.into_iter()).zip(fold_kinds.into_iter()) {\n+            assert_eq!(fold.range.start(), range.start());\n+            assert_eq!(fold.range.end(), range.end());\n+            assert_eq!(&fold.kind, fold_kind);\n+        }\n+    }\n \n     #[test]\n     fn test_fold_comments() {\n         let text = r#\"\n-// Hello\n+<|>// Hello\n // this is a multiline\n // comment\n-//\n+//<|>\n \n // But this is not\n \n fn main() {\n-    // We should\n+    <|>// We should\n     // also\n     // fold\n-    // this one.\n+    // this one.<|>\n+    <|>//! But this one is different\n+    //! because it has another flavor<|>\n+    <|>/* As does this\n+    multiline comment */<|>\n }\"#;\n \n-        let file = File::parse(&text);\n-        let folds = folding_ranges(&file);\n-        assert_eq!(folds.len(), 2);\n-        assert_eq!(folds[0].range.start(), 1.into());\n-        assert_eq!(folds[0].range.end(), 46.into());\n-        assert_eq!(folds[0].kind, FoldKind::Comment);\n-\n-        assert_eq!(folds[1].range.start(), 84.into());\n-        assert_eq!(folds[1].range.end(), 137.into());\n-        assert_eq!(folds[1].kind, FoldKind::Comment);\n+        let fold_kinds = &[\n+            FoldKind::Comment,\n+            FoldKind::Comment,\n+            FoldKind::Comment,\n+            FoldKind::Comment,\n+        ];\n+        do_check(text, fold_kinds);\n     }\n \n     #[test]\n     fn test_fold_imports() {\n         let text = r#\"\n-use std::str;\n-use std::vec;\n-use std::io as iop;\n+<|>use std::{\n+    str,\n+    vec,\n+    io as iop\n+};<|>\n \n fn main() {\n }\"#;\n \n-        let file = File::parse(&text);\n-        let folds = folding_ranges(&file);\n-        assert_eq!(folds.len(), 1);\n-        assert_eq!(folds[0].range.start(), 1.into());\n-        assert_eq!(folds[0].range.end(), 48.into());\n-        assert_eq!(folds[0].kind, FoldKind::Imports);\n+        let folds = &[FoldKind::Imports];\n+        do_check(text, folds);\n     }\n \n "}, {"sha": "4db1bcbf93d154b5422b9a68652e0ca184cc73bc", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a230b438e025c5878b8d17e11d3928cbad95bb28", "patch": "@@ -2197,3 +2197,21 @@ impl<'a> WhileExpr<'a> {\n     }\n }\n \n+// Whitespace\n+#[derive(Debug, Clone, Copy)]\n+pub struct Whitespace<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for Whitespace<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            WHITESPACE => Some(Whitespace { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> Whitespace<'a> {}\n+"}, {"sha": "12ddc0210057e0df0684ebf4a9d0edb2774b95c5", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=a230b438e025c5878b8d17e11d3928cbad95bb28", "patch": "@@ -100,8 +100,8 @@ impl<'a> Lifetime<'a> {\n }\n \n impl<'a> Comment<'a> {\n-    pub fn text(&self) -> SmolStr {\n-        self.syntax().leaf_text().unwrap().clone()\n+    pub fn text(&self) -> &SmolStr {\n+        self.syntax().leaf_text().unwrap()\n     }\n \n     pub fn flavor(&self) -> CommentFlavor {\n@@ -120,9 +120,17 @@ impl<'a> Comment<'a> {\n     pub fn prefix(&self) -> &'static str {\n         self.flavor().prefix()\n     }\n+\n+    pub fn count_newlines_lazy(&self) -> impl Iterator<Item = &()> {\n+        self.text().chars().filter(|&c| c == '\\n').map(|_| &())\n+    }\n+\n+    pub fn has_newlines(&self) -> bool {\n+        self.count_newlines_lazy().count() > 0\n+    }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum CommentFlavor {\n     Line,\n     Doc,\n@@ -142,6 +150,20 @@ impl CommentFlavor {\n     }\n }\n \n+impl<'a> Whitespace<'a> {\n+    pub fn text(&self) -> &SmolStr {\n+        &self.syntax().leaf_text().unwrap()\n+    }\n+\n+    pub fn count_newlines_lazy(&self) -> impl Iterator<Item = &()> {\n+        self.text().chars().filter(|&c| c == '\\n').map(|_| &())\n+    }\n+\n+    pub fn has_newlines(&self) -> bool {\n+        self.count_newlines_lazy().count() > 0\n+    }\n+}\n+\n impl<'a> Name<'a> {\n     pub fn text(&self) -> SmolStr {\n         let ident = self.syntax().first_child()"}, {"sha": "ea8063d3bb15e7ac4a75341aac5ccddd311e50f0", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=a230b438e025c5878b8d17e11d3928cbad95bb28", "patch": "@@ -538,5 +538,6 @@ Grammar(\n             options: [ \"NameRef\" ]\n         ),\n         \"Comment\": (),\n+        \"Whitespace\": (),\n     },\n )"}, {"sha": "ee73153f02f216788b29d315bc052235a2c4829f", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a230b438e025c5878b8d17e11d3928cbad95bb28/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=a230b438e025c5878b8d17e11d3928cbad95bb28", "patch": "@@ -38,22 +38,44 @@ pub fn assert_eq_dbg(expected: &str, actual: &impl fmt::Debug) {\n }\n \n pub fn extract_offset(text: &str) -> (TextUnit, String) {\n-    let cursor = \"<|>\";\n-    let cursor_pos = match text.find(cursor) {\n+    match try_extract_offset(text) {\n         None => panic!(\"text should contain cursor marker\"),\n-        Some(pos) => pos,\n-    };\n+        Some(result) => result,\n+    }\n+}\n+\n+pub fn try_extract_offset(text: &str) -> Option<(TextUnit, String)> {\n+    let cursor = \"<|>\";\n+    let cursor_pos = text.find(cursor)?;\n     let mut new_text = String::with_capacity(text.len() - cursor.len());\n     new_text.push_str(&text[..cursor_pos]);\n     new_text.push_str(&text[cursor_pos + cursor.len()..]);\n     let cursor_pos = TextUnit::from(cursor_pos as u32);\n-    (cursor_pos, new_text)\n+    Some((cursor_pos, new_text))\n }\n \n pub fn extract_range(text: &str) -> (TextRange, String) {\n-    let (start, text) = extract_offset(text);\n-    let (end, text) = extract_offset(&text);\n-    (TextRange::from_to(start, end), text)\n+    match try_extract_range(text) {\n+        None => panic!(\"text should contain cursor marker\"),\n+        Some(result) => result,\n+    }\n+}\n+\n+pub fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n+    let (start, text) = try_extract_offset(text)?;\n+    let (end, text) = try_extract_offset(&text)?;\n+    Some((TextRange::from_to(start, end), text))\n+}\n+\n+pub fn extract_ranges(text: &str) -> (Vec<TextRange>, String) {\n+    let mut ranges = Vec::new();\n+    let mut text = String::from(text);\n+    while let Some((range, new_text)) = try_extract_range(&text) {\n+        text = new_text;\n+        ranges.push(range);\n+    }\n+\n+    (ranges, text)\n }\n \n pub fn add_cursor(text: &str, offset: TextUnit) -> String {"}, {"sha": "d1c525f685abbd1d13b854d4a0833d7ce7423ff6", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a230b438e025c5878b8d17e11d3928cbad95bb28/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a230b438e025c5878b8d17e11d3928cbad95bb28/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=a230b438e025c5878b8d17e11d3928cbad95bb28", "patch": "@@ -20,8 +20,8 @@ export function activate(context: vscode.ExtensionContext) {\n         f: (...args: any[]) => Promise<boolean>\n     ) {\n         const defaultCmd = `default:${name}`;\n-        const original = async (...args: any[]) =>\n-            await vscode.commands.executeCommand(defaultCmd, ...args);\n+        const original = (...args: any[]) =>\n+            vscode.commands.executeCommand(defaultCmd, ...args);\n \n         registerCommand(name, async (...args: any[]) => {\n             const editor = vscode.window.activeTextEditor;"}]}