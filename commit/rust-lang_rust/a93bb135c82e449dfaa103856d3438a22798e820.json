{"sha": "a93bb135c82e449dfaa103856d3438a22798e820", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5M2JiMTM1YzgyZTQ0OWRmYWExMDM4NTZkMzQzOGEyMjc5OGU4MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-01T04:44:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-01T04:44:56Z"}, "message": "Auto merge of #31713 - alexcrichton:rustbuild-docs, r=brson\n\nThis commit implements documentation generation of the nomicon, the book, the\nstyle guide, and the standalone docs. New steps were added for each one as well\nas appropriate makefile targets for each one as well.", "tree": {"sha": "bc5d85ceed113a952ea2fd28d3e5081b7b55fa8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5d85ceed113a952ea2fd28d3e5081b7b55fa8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93bb135c82e449dfaa103856d3438a22798e820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93bb135c82e449dfaa103856d3438a22798e820", "html_url": "https://github.com/rust-lang/rust/commit/a93bb135c82e449dfaa103856d3438a22798e820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93bb135c82e449dfaa103856d3438a22798e820/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0308abadce38396f27122d5c8639ffb2a21469", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0308abadce38396f27122d5c8639ffb2a21469", "html_url": "https://github.com/rust-lang/rust/commit/5a0308abadce38396f27122d5c8639ffb2a21469"}, {"sha": "848e78550cb428aae6d003f48fb0d265b5d68c69", "url": "https://api.github.com/repos/rust-lang/rust/commits/848e78550cb428aae6d003f48fb0d265b5d68c69", "html_url": "https://github.com/rust-lang/rust/commit/848e78550cb428aae6d003f48fb0d265b5d68c69"}], "stats": {"total": 158, "additions": 157, "deletions": 1}, "files": [{"sha": "937a234bec86dda5f21c380876d5a6ae51910c31", "filename": "src/bootstrap/build/doc.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=a93bb135c82e449dfaa103856d3438a22798e820", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::path::Path;\n+use std::fs::{self, File};\n+use std::io::prelude::*;\n+\n+use build::{Build, Compiler};\n+use build::util::up_to_date;\n+\n+pub fn rustbook(build: &Build, stage: u32, host: &str, name: &str, out: &Path) {\n+    t!(fs::create_dir_all(out));\n+\n+    let out = out.join(name);\n+    let compiler = Compiler::new(stage, host);\n+    let src = build.src.join(\"src/doc\").join(name);\n+    let index = out.join(\"index.html\");\n+    let rustbook = build.tool(&compiler, \"rustbook\");\n+    if up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n+        return\n+    }\n+    println!(\"Rustbook stage{} ({}) - {}\", stage, host, name);\n+    let _ = fs::remove_dir_all(&out);\n+    build.run(build.tool_cmd(&compiler, \"rustbook\")\n+                   .arg(\"build\")\n+                   .arg(&src)\n+                   .arg(out));\n+}\n+\n+pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n+    println!(\"Documenting stage{} standalone ({})\", stage, host);\n+    t!(fs::create_dir_all(out));\n+\n+    let compiler = Compiler::new(stage, host);\n+\n+    let favicon = build.src.join(\"src/doc/favicon.inc\");\n+    let footer = build.src.join(\"src/doc/footer.inc\");\n+    let full_toc = build.src.join(\"src/doc/full-toc.inc\");\n+    t!(fs::copy(build.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n+\n+    let version_input = build.src.join(\"src/doc/version_info.html.template\");\n+    let version_info = out.join(\"version_info.html\");\n+\n+    if !up_to_date(&version_input, &version_info) {\n+        let mut info = String::new();\n+        t!(t!(File::open(&version_input)).read_to_string(&mut info));\n+        let blank = String::new();\n+        let short = build.short_ver_hash.as_ref().unwrap_or(&blank);\n+        let hash = build.ver_hash.as_ref().unwrap_or(&blank);\n+        let info = info.replace(\"VERSION\", &build.release)\n+                       .replace(\"SHORT_HASH\", short)\n+                       .replace(\"STAMP\", hash);\n+        t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n+    }\n+\n+    for file in t!(fs::read_dir(build.src.join(\"src/doc\"))) {\n+        let file = t!(file);\n+        let path = file.path();\n+        let filename = path.file_name().unwrap().to_str().unwrap();\n+        if !filename.ends_with(\".md\") || filename == \"README.md\" {\n+            continue\n+        }\n+\n+        let html = out.join(filename).with_extension(\"html\");\n+        let rustdoc = build.tool(&compiler, \"rustdoc\");\n+        if up_to_date(&path, &html) &&\n+           up_to_date(&footer, &html) &&\n+           up_to_date(&favicon, &html) &&\n+           up_to_date(&full_toc, &html) &&\n+           up_to_date(&version_info, &html) &&\n+           up_to_date(&rustdoc, &html) {\n+            continue\n+        }\n+\n+        let mut cmd = build.tool_cmd(&compiler, \"rustdoc\");\n+        cmd.arg(\"--html-after-content\").arg(&footer)\n+           .arg(\"--html-before-content\").arg(&version_info)\n+           .arg(\"--html-in-header\").arg(&favicon)\n+           .arg(\"--markdown-playground-url\")\n+           .arg(\"https://play.rust-lang.org/\")\n+           .arg(\"-o\").arg(out)\n+           .arg(&path);\n+\n+        if filename == \"reference.md\" {\n+           cmd.arg(\"--html-in-header\").arg(&full_toc);\n+        }\n+\n+        if filename == \"not_found.md\" {\n+            cmd.arg(\"--markdown-no-toc\")\n+               .arg(\"--markdown-css\")\n+               .arg(\"https://doc.rust-lang.org/rust.css\");\n+        } else {\n+            cmd.arg(\"--markdown-css\").arg(\"rust.css\");\n+        }\n+        build.run(&mut cmd);\n+    }\n+}"}, {"sha": "98d821b8b90235c71d4ed718e3e1b8544024a29a", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=a93bb135c82e449dfaa103856d3438a22798e820", "patch": "@@ -33,6 +33,7 @@ mod channel;\n mod clean;\n mod compile;\n mod config;\n+mod doc;\n mod flags;\n mod native;\n mod sanity;\n@@ -136,6 +137,7 @@ impl Build {\n         self.update_submodules();\n \n         for target in step::all(self) {\n+            let doc_out = self.out.join(&target.target).join(\"doc\");\n             match target.src {\n                 Llvm { _dummy } => {\n                     native::llvm(self, target.target);\n@@ -163,6 +165,21 @@ impl Build {\n                 Rustc { stage } => {\n                     compile::assemble_rustc(self, stage, target.target);\n                 }\n+                DocBook { stage } => {\n+                    doc::rustbook(self, stage, target.target, \"book\", &doc_out);\n+                }\n+                DocNomicon { stage } => {\n+                    doc::rustbook(self, stage, target.target, \"nomicon\",\n+                                  &doc_out);\n+                }\n+                DocStyle { stage } => {\n+                    doc::rustbook(self, stage, target.target, \"style\",\n+                                  &doc_out);\n+                }\n+                DocStandalone { stage } => {\n+                    doc::standalone(self, stage, target.target, &doc_out);\n+                }\n+                Doc { .. } => {} // pseudo-step\n             }\n         }\n     }"}, {"sha": "ba0095ce84980146dff3c10c620090ec9c5350f9", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=a93bb135c82e449dfaa103856d3438a22798e820", "patch": "@@ -53,6 +53,11 @@ macro_rules! targets {\n             // with braces are unstable so we just pick something that works.\n             (llvm, Llvm { _dummy: () }),\n             (compiler_rt, CompilerRt { _dummy: () }),\n+            (doc, Doc { stage: u32 }),\n+            (doc_book, DocBook { stage: u32 }),\n+            (doc_nomicon, DocNomicon { stage: u32 }),\n+            (doc_style, DocStyle { stage: u32 }),\n+            (doc_standalone, DocStandalone { stage: u32 }),\n         }\n     }\n }\n@@ -115,6 +120,7 @@ fn top_level(build: &Build) -> Vec<Step> {\n             src: Source::Llvm { _dummy: () },\n             target: &build.config.build,\n         };\n+        targets.push(t.doc(stage));\n         for host in build.config.host.iter() {\n             if !build.flags.host.contains(host) {\n                 continue\n@@ -164,6 +170,11 @@ fn add_steps<'a>(build: &'a Build,\n             \"rustc\" => targets.push(host.rustc(stage)),\n             \"llvm\" => targets.push(target.llvm(())),\n             \"compiler-rt\" => targets.push(target.compiler_rt(())),\n+            \"doc-style\" => targets.push(host.doc_style(stage)),\n+            \"doc-standalone\" => targets.push(host.doc_standalone(stage)),\n+            \"doc-nomicon\" => targets.push(host.doc_nomicon(stage)),\n+            \"doc-book\" => targets.push(host.doc_book(stage)),\n+            \"doc\" => targets.push(host.doc(stage)),\n             _ => panic!(\"unknown build target: `{}`\", step),\n         }\n     }\n@@ -219,6 +230,16 @@ impl<'a> Step<'a> {\n                 vec![self.llvm(()).target(&build.config.build)]\n             }\n             Source::Llvm { _dummy } => Vec::new(),\n+            Source::DocBook { stage } |\n+            Source::DocNomicon { stage } |\n+            Source::DocStyle { stage } |\n+            Source::DocStandalone { stage } => {\n+                vec![self.rustc(stage)]\n+            }\n+            Source::Doc { stage } => {\n+                vec![self.doc_book(stage), self.doc_nomicon(stage),\n+                     self.doc_style(stage), self.doc_standalone(stage)]\n+            }\n         }\n     }\n }"}, {"sha": "fa3dee2f358f94bbe397950679d8f50438a8a0c3", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=a93bb135c82e449dfaa103856d3438a22798e820", "patch": "@@ -24,3 +24,15 @@ all:\n \n clean:\n \t$(Q)$(BOOTSTRAP) --clean\n+\n+docs: doc\n+doc:\n+\t$(Q)$(BOOTSTRAP) --step doc\n+style:\n+\t$(Q)$(BOOTSTRAP) --step doc-style\n+nomicon:\n+\t$(Q)$(BOOTSTRAP) --step doc-nomicon\n+book:\n+\t$(Q)$(BOOTSTRAP) --step doc-book\n+standalone-docs:\n+\t$(Q)$(BOOTSTRAP) --step doc-standalone"}, {"sha": "6fc7219cdb3683fb7c67b8aa84c5164ac430445f", "filename": "src/doc/rustc-ux-guidelines.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/a93bb135c82e449dfaa103856d3438a22798e820/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=a93bb135c82e449dfaa103856d3438a22798e820", "patch": "@@ -1,3 +1,5 @@\n+% Rustc UX guidelines\n+\n Don't forget the user. Whether human or another program, such as an IDE, a\n good user experience with the compiler goes a long way into making developer\n lives better. We don't want users to be baffled by compiler output or\n@@ -70,4 +72,4 @@ understandable compiler scripts.\n * The `--verbose` flag is for adding verbose information to `rustc` output\n when not compiling a program. For example, using it with the `--version` flag\n gives information about the hashes of the code.\n-* Experimental flags and options must be guarded behind the `-Z unstable-options` flag.\n\\ No newline at end of file\n+* Experimental flags and options must be guarded behind the `-Z unstable-options` flag."}]}