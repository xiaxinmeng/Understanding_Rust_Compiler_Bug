{"sha": "dc8876196b7d0a219a02f479abb5876b71270eeb", "node_id": "C_kwDOAAsO6NoAKGRjODg3NjE5NmI3ZDBhMjE5YTAyZjQ3OWFiYjU4NzZiNzEyNzBlZWI", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-10-22T22:28:08Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2023-01-21T20:38:25Z"}, "message": "Add `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` to future-incompat report", "tree": {"sha": "992c7d4253b1e9a8d5c329cd1d4bf81fe840c363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992c7d4253b1e9a8d5c329cd1d4bf81fe840c363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8876196b7d0a219a02f479abb5876b71270eeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmPMTUEACgkQtAh+UQ6Y\nsWTICBAAqxBlMgWvWqBIKzE61Y5TD0kw8gc0b+oMYGUzonu30+EtFiM8Oj5Wplci\nGqWAkT38l86/8RtuOVKZRkcmXPVfThsRpxXUY5IA7sCK+QGok1BjkoMhO5S0Oj8i\nxsMB924E3X6nTHK5p1J7xJDGURxD51+mKUdhzkwN3T3Ya8/S+/h5vgNHsPu6HHjX\npfonnWopdAcLIs+kfIEdEjetaIQYJucsu0T3C2mwbnFB4Qw3Zy+B0vZjK428/s/a\nLjE9ICtBzvvMZJ3UnhpPoyANc/6DqhTx43o1KmqEFmPqjU+uTk8GCSS6ZWiFgWWf\nfJQ+55QXo5/I1YLel4xmOR229ZNFAso+4ABLJBP3+uxEEvP38VhawDF5zsSgQo+q\n3mqQn4uIyWn6KguNYfgy9OcdzB61JydFXRek+evs87MIJ8v6zrsZgkTHuDlMa30v\nrQWeadpgC9s4gzTyn7I9sH2L1D8ZhPI/J67P60W7ATac2J8XYYwa9BWUTIn3apzC\nN9Rg8sU3fx58lLP8jBN5RhZKaRk1f9BQy0D94I95sJTVTQ7zMkV4Upq39TFQz94I\nV3PeVs4tdr/r2NEcU4uyPXap15OEzU7q9x14NmNtKsi0sZ3Z9a6RzUbVMxJindVO\nhsLl+FPDjE+1SGESQzkPNh5U3yHCb968zr5CC8lLndQxyHWuhVI=\n=Xk/S\n-----END PGP SIGNATURE-----", "payload": "tree 992c7d4253b1e9a8d5c329cd1d4bf81fe840c363\nparent 005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf\nauthor Aaron Hill <aa1ronham@gmail.com> 1666477688 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1674333505 -0600\n\nAdd `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` to future-incompat report\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8876196b7d0a219a02f479abb5876b71270eeb", "html_url": "https://github.com/rust-lang/rust/commit/dc8876196b7d0a219a02f479abb5876b71270eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8876196b7d0a219a02f479abb5876b71270eeb/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf", "html_url": "https://github.com/rust-lang/rust/commit/005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf"}], "stats": {"total": 221, "additions": 221, "deletions": 0}, "files": [{"sha": "357b00b1a995849676c4f94062dd2fb2ad957bd0", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -2948,6 +2948,7 @@ declare_lint! {\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n }\n "}, {"sha": "c60120061643da4f595aef35afbc4279bb0d0693", "filename": "tests/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -46,3 +46,140 @@ LL |     let _ = #[allow(semicolon_in_expressions_from_macros)] foo!(allow_does_\n \n warning: 3 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         foo!(first)\n+   |         ----------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:24:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = foo!(second);\n+   |             ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:29:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         let _ = foo!(third);\n+   |                 ----------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:32:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         let _ = foo!(fourth);\n+   |                 ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:37:13\n+   |\n+LL |     #[allow(semicolon_in_expressions_from_macros)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         foo!(warn_in_block)\n+   |         ------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = foo!(warn_in_expr);\n+   |             ------------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = #[allow(semicolon_in_expressions_from_macros)] foo!(allow_does_not_work);\n+   |                                                            ------------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n+   |\n+LL | #![warn(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "0fec4996f1a0ae16dbce4848a7f7ec446730170f", "filename": "tests/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -14,3 +14,18 @@ LL |         _ => foo!()\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/warn-semicolon-in-expressions-from-macros.rs:6:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         _ => foo!()\n+   |              ------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "29ccd17e06999abf8a20e0c01dd8eb5775d75e1d", "filename": "tests/ui/macros/issue-84195-lint-anon-const.stderr", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -18,3 +18,22 @@ LL | #![deny(semicolon_in_expressions_from_macros)]\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: trailing semicolon in macro used in expression position\n+  --> $DIR/issue-84195-lint-anon-const.rs:8:14\n+   |\n+LL |     () => { 0; };\n+   |              ^\n+...\n+LL |     let val: [u8; len!()] = [];\n+   |                   ------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+note: the lint level is defined here\n+  --> $DIR/issue-84195-lint-anon-const.rs:5:9\n+   |\n+LL | #![deny(semicolon_in_expressions_from_macros)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `len` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "13cecc3a31d233cb662a6f6a1b62596452fd8a5b", "filename": "tests/ui/macros/lint-trailing-macro-call.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -16,3 +16,20 @@ LL |     expand_it!()\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/lint-trailing-macro-call.rs:9:25\n+   |\n+LL |         #[cfg(FALSE)] 25;\n+   |                         ^\n+...\n+LL |     expand_it!()\n+   |     ------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `expand_it`\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `expand_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "7785f415946277401d7cc61e4d8b0b11af93d987", "filename": "tests/ui/macros/macro-context.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-context.stderr?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -82,3 +82,18 @@ error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0412, E0425.\n For more information about an error, try `rustc --explain E0412`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-context.rs:3:15\n+   |\n+LL |     () => ( i ; typeof );\n+   |               ^\n+...\n+LL |     let i = m!();\n+   |             ---- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "3f492b141a5f5949875f5c9f33d728ab2c83ddca", "filename": "tests/ui/macros/macro-in-expression-context.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8876196b7d0a219a02f479abb5876b71270eeb/tests%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=dc8876196b7d0a219a02f479abb5876b71270eeb", "patch": "@@ -31,3 +31,20 @@ LL |     foo!()\n \n error: aborting due to previous error; 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-in-expression-context.rs:5:29\n+   |\n+LL |         assert_eq!(\"A\", \"A\");\n+   |                             ^\n+...\n+LL |     foo!()\n+   |     ------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}]}