{"sha": "b613ef143641382f7474f9ef2260e276514f3862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTNlZjE0MzY0MTM4MmY3NDc0ZjllZjIyNjBlMjc2NTE0ZjM4NjI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-29T12:53:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-30T17:19:28Z"}, "message": "Extend the #[must_use] lint to boxed types", "tree": {"sha": "2d3a03edd4fd9196fdd085438f345d55b405efd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3a03edd4fd9196fdd085438f345d55b405efd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b613ef143641382f7474f9ef2260e276514f3862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b613ef143641382f7474f9ef2260e276514f3862", "html_url": "https://github.com/rust-lang/rust/commit/b613ef143641382f7474f9ef2260e276514f3862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b613ef143641382f7474f9ef2260e276514f3862/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "html_url": "https://github.com/rust-lang/rust/commit/0af8e872ea5ac77effa59f8d3f8794f12cb8865c"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "2481c9d02837c4d98c32693628f845beba7b8632", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b613ef143641382f7474f9ef2260e276514f3862/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613ef143641382f7474f9ef2260e276514f3862/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=b613ef143641382f7474f9ef2260e276514f3862", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\");\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\");\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -133,6 +133,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty: Ty<'tcx>,\n             expr: &hir::Expr,\n             span: Span,\n+            descr_pre_path: &str,\n             descr_post_path: &str,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n@@ -142,14 +143,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             }\n \n             match ty.sty {\n-                ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", descr_post_path),\n+                ty::Adt(..) if ty.is_box() => {\n+                    let boxed_ty = ty.boxed_ty();\n+                    let descr_pre_path = format!(\"{}boxed \", descr_pre_path);\n+                    check_must_use_ty(cx, boxed_ty, expr, span, &descr_pre_path, descr_post_path)\n+                }\n+                ty::Adt(def, _) => {\n+                    check_must_use_def(cx, def.did, span, descr_pre_path, descr_post_path)\n+                }\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;\n-                            if check_must_use_def(cx, def_id, span, \"implementer of \", \"\") {\n+                            let descr_pre = format!(\"{}implementer of \", descr_pre_path);\n+                            if check_must_use_def(cx, def_id, span, &descr_pre, descr_post_path) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -162,7 +171,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for predicate in binder.skip_binder().iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n                             let def_id = trait_ref.def_id;\n-                            if check_must_use_def(cx, def_id, span, \"\", \" trait object\") {\n+                            let descr_post = \" trait object\";\n+                            if check_must_use_def(cx, def_id, span, descr_pre_path, descr_post) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -181,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                         let descr_post_path = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_post_path) {\n+                        if check_must_use_ty(cx, ty, expr, span, descr_pre_path, descr_post_path) {\n                             has_emitted = true;\n                         }\n                     }"}, {"sha": "797d85e941d96d2ee430039fd6f2f197e435e2aa", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b613ef143641382f7474f9ef2260e276514f3862/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613ef143641382f7474f9ef2260e276514f3862/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=b613ef143641382f7474f9ef2260e276514f3862", "patch": "@@ -103,7 +103,9 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n         HOOK_LOCK.write_unlock();\n \n         if let Hook::Custom(ptr) = old_hook {\n-            Box::from_raw(ptr);\n+            #[allow(unused_must_use)] {\n+                Box::from_raw(ptr);\n+            }\n         }\n     }\n }"}, {"sha": "fb6f5384bbea19a4d48c64774cc8b016982761a5", "filename": "src/test/ui/lint/must_use-trait.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b613ef143641382f7474f9ef2260e276514f3862/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613ef143641382f7474f9ef2260e276514f3862/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs?ref=b613ef143641382f7474f9ef2260e276514f3862", "patch": "@@ -17,6 +17,11 @@ fn get_critical() -> impl NotSoCritical + Critical + DecidedlyUnimportant {\n     Anon {}\n }\n \n+fn get_boxed_critical() -> Box<dyn Critical> {\n+    Box::new(Anon {})\n+}\n+\n fn main() {\n     get_critical(); //~ ERROR unused implementer of `Critical` that must be used\n+    get_boxed_critical(); //~ ERROR unused boxed `Critical` trait object that must be used\n }"}, {"sha": "124d4d42a74668a957773ecc320f06c5473bebb3", "filename": "src/test/ui/lint/must_use-trait.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b613ef143641382f7474f9ef2260e276514f3862/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b613ef143641382f7474f9ef2260e276514f3862/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr?ref=b613ef143641382f7474f9ef2260e276514f3862", "patch": "@@ -1,5 +1,5 @@\n error: unused implementer of `Critical` that must be used\n-  --> $DIR/must_use-trait.rs:21:5\n+  --> $DIR/must_use-trait.rs:25:5\n    |\n LL |     get_critical();\n    |     ^^^^^^^^^^^^^^^\n@@ -10,5 +10,11 @@ note: lint level defined here\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unused boxed `Critical` trait object that must be used\n+  --> $DIR/must_use-trait.rs:26:5\n+   |\n+LL |     get_boxed_critical();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}