{"sha": "3d2490ca97a038e97678f55a008627b4a395a8f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjQ5MGNhOTdhMDM4ZTk3Njc4ZjU1YTAwODYyN2I0YTM5NWE4Zjc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-01T19:10:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-01T19:10:45Z"}, "message": "Simplify", "tree": {"sha": "efaff492d7ffa71c31063e6a1bada6aa4ee3bb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efaff492d7ffa71c31063e6a1bada6aa4ee3bb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2490ca97a038e97678f55a008627b4a395a8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2490ca97a038e97678f55a008627b4a395a8f7", "html_url": "https://github.com/rust-lang/rust/commit/3d2490ca97a038e97678f55a008627b4a395a8f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2490ca97a038e97678f55a008627b4a395a8f7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a"}], "stats": {"total": 233, "additions": 116, "deletions": 117}, "files": [{"sha": "5c6bb986b91c74dff4b0c97024cc48dfc9337b30", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 116, "deletions": 117, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/3d2490ca97a038e97678f55a008627b4a395a8f7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2490ca97a038e97678f55a008627b4a395a8f7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=3d2490ca97a038e97678f55a008627b4a395a8f7", "patch": "@@ -10,7 +10,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, TextRange};\n \n // Assist: merge_match_arms\n //\n-// Merges identical match arms.\n+// Merges the current match arm with the following if their bodies are identical.\n //\n // ```\n // enum Action { Move { distance: u32 }, Stop }\n@@ -44,14 +44,11 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     // We check if the following match arms match this one. We could, but don't,\n     // compare to the previous match arm as well.\n     let arms_to_merge = successors(Some(current_arm), |it| neighbor(it, Direction::Next))\n-        .take_while(|arm| {\n-            if arm.guard().is_some() {\n-                return false;\n-            }\n-            match arm.expr() {\n-                Some(expr) => expr.syntax().text() == current_expr.syntax().text(),\n-                None => false,\n+        .take_while(|arm| match arm.expr() {\n+            Some(expr) if arm.guard().is_none() => {\n+                expr.syntax().text() == current_expr.syntax().text()\n             }\n+            _ => false,\n         })\n         .collect::<Vec<_>>();\n \n@@ -77,10 +74,12 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n \n-            let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n-            let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n+            if let [first, .., last] = &*arms_to_merge {\n+                let start = first.syntax().text_range().start();\n+                let end = last.syntax().text_range().end();\n \n-            edit.replace(TextRange::new(start, end), arm);\n+                edit.replace(TextRange::new(start, end), arm);\n+            }\n         },\n     )\n }\n@@ -100,30 +99,30 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A => { 1i32$0 }\n-                    X::B => { 1i32 }\n-                    X::C => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A => { 1i32$0 }\n+        X::B => { 1i32 }\n+        X::C => { 2i32 }\n+    }\n+}\n+\"#,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A | X::B => { 1i32 }\n-                    X::C => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A | X::B => { 1i32 }\n+        X::C => { 2i32 }\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -132,30 +131,30 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A | X::B => {$0 1i32 },\n-                    X::C | X::D => { 1i32 },\n-                    X::E => { 2i32 },\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A | X::B => {$0 1i32 },\n+        X::C | X::D => { 1i32 },\n+        X::E => { 2i32 },\n+    }\n+}\n+\"#,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A | X::B | X::C | X::D => { 1i32 },\n-                    X::E => { 2i32 },\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A | X::B | X::C | X::D => { 1i32 },\n+        X::E => { 2i32 },\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -164,30 +163,30 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A => { 1i32 },\n-                    X::B => { 2i$032 },\n-                    _ => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A => { 1i32 },\n+        X::B => { 2i$032 },\n+        _ => { 2i32 }\n+    }\n+}\n+\"#,\n             r#\"\n-            #[derive(Debug)]\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A => { 1i32 },\n-                    _ => { 2i32 }\n-                }\n-            }\n-            \"#,\n+#[derive(Debug)]\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A => { 1i32 },\n+        _ => { 2i32 }\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -196,29 +195,29 @@ mod tests {\n         check_assist(\n             merge_match_arms,\n             r#\"\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                match X::A {\n-                    X::A$0 => 92,\n-                    X::B => 92,\n-                    X::C => 92,\n-                    X::D => 62,\n-                    _ => panic!(),\n-                }\n-            }\n-            \"#,\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    match X::A {\n+        X::A$0 => 92,\n+        X::B => 92,\n+        X::C => 92,\n+        X::D => 62,\n+        _ => panic!(),\n+    }\n+}\n+\"#,\n             r#\"\n-            enum X { A, B, C, D, E }\n-\n-            fn main() {\n-                match X::A {\n-                    X::A | X::B | X::C => 92,\n-                    X::D => 62,\n-                    _ => panic!(),\n-                }\n-            }\n-            \"#,\n+enum X { A, B, C, D, E }\n+\n+fn main() {\n+    match X::A {\n+        X::A | X::B | X::C => 92,\n+        X::D => 62,\n+        _ => panic!(),\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -227,22 +226,22 @@ mod tests {\n         check_assist_not_applicable(\n             merge_match_arms,\n             r#\"\n-            #[derive(Debug)]\n-            enum X {\n-                A(i32),\n-                B,\n-                C\n-            }\n+#[derive(Debug)]\n+enum X {\n+    A(i32),\n+    B,\n+    C\n+}\n \n-            fn main() {\n-                let x = X::A;\n-                let y = match x {\n-                    X::A(a) if a > 5 => { $01i32 },\n-                    X::B => { 1i32 },\n-                    X::C => { 2i32 }\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    let x = X::A;\n+    let y = match x {\n+        X::A(a) if a > 5 => { $01i32 },\n+        X::B => { 1i32 },\n+        X::C => { 2i32 }\n+    }\n+}\n+\"#,\n         );\n     }\n }"}]}