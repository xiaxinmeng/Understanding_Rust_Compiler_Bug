{"sha": "be18e7af90f48ee1518f32f3e1aefe1955e1d403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMThlN2FmOTBmNDhlZTE1MThmMzJmM2UxYWVmZTE5NTVlMWQ0MDM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-18T03:57:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-18T03:57:34Z"}, "message": "Merge pull request #1717 from topecongiro/type-and-generics\n\nRefactor format against types and generics", "tree": {"sha": "3a00c01402c1d25fda3d6ce8cb6010a6a1421aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a00c01402c1d25fda3d6ce8cb6010a6a1421aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be18e7af90f48ee1518f32f3e1aefe1955e1d403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be18e7af90f48ee1518f32f3e1aefe1955e1d403", "html_url": "https://github.com/rust-lang/rust/commit/be18e7af90f48ee1518f32f3e1aefe1955e1d403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be18e7af90f48ee1518f32f3e1aefe1955e1d403/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2061f101c78b42ef9df27c5064d52263c0f352bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2061f101c78b42ef9df27c5064d52263c0f352bd", "html_url": "https://github.com/rust-lang/rust/commit/2061f101c78b42ef9df27c5064d52263c0f352bd"}, {"sha": "4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "html_url": "https://github.com/rust-lang/rust/commit/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1"}], "stats": {"total": 298, "additions": 190, "deletions": 108}, "files": [{"sha": "09d866ccf8da86843fe3facb455a942026b45dda", "filename": "src/items.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -705,16 +705,17 @@ fn format_impl_ref_and_type(\n             Some(ref tr) => tr.path.span.lo,\n             None => self_ty.span.lo,\n         };\n-        let shape = generics_shape_from_config(\n+        let shape = try_opt!(generics_shape_from_config(\n             context.config,\n             Shape::indented(offset + last_line_width(&result), context.config),\n             0,\n-        );\n+        ));\n+        let one_line_budget = try_opt!(shape.width.checked_sub(last_line_width(&result) + 2));\n         let generics_str = try_opt!(rewrite_generics_inner(\n             context,\n             generics,\n             shape,\n-            shape.width,\n+            one_line_budget,\n             mk_sp(lo, hi),\n         ));\n \n@@ -927,7 +928,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let trait_bound_str = try_opt!(rewrite_trait_bounds(\n             context,\n             type_param_bounds,\n-            Shape::legacy(context.config.max_width(), offset),\n+            Shape::indented(offset, context.config),\n         ));\n         // If the trait, generics, and trait bound cannot fit on the same line,\n         // put the trait bounds on an indented new line\n@@ -1591,7 +1592,7 @@ pub fn rewrite_associated_type(\n     let prefix = format!(\"type {}\", ident);\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n-        let shape = Shape::legacy(context.config.max_width(), indent);\n+        let shape = Shape::indented(indent, context.config);\n         let bounds: &[_] = ty_param_bounds;\n         let bound_str = try_opt!(\n             bounds\n@@ -1900,7 +1901,8 @@ fn rewrite_fn_base(\n \n     if context.config.fn_args_layout() == IndentStyle::Block {\n         arg_indent = indent.block_indent(context.config);\n-        multi_line_budget = context.config.max_width() - arg_indent.width();\n+        // 1 = \",\"\n+        multi_line_budget = context.config.max_width() - (arg_indent.width() + 1);\n     }\n \n     debug!(\n@@ -2386,9 +2388,11 @@ fn rewrite_generics(\n     shape: Shape,\n     span: Span,\n ) -> Option<String> {\n-    let shape = generics_shape_from_config(context.config, shape, 0);\n-    rewrite_generics_inner(context, generics, shape, shape.width, span)\n-        .or_else(|| rewrite_generics_inner(context, generics, shape, 0, span))\n+    let g_shape = try_opt!(generics_shape_from_config(context.config, shape, 0));\n+    let one_line_width = try_opt!(shape.width.checked_sub(2));\n+    rewrite_generics_inner(context, generics, g_shape, one_line_width, span).or_else(|| {\n+        rewrite_generics_inner(context, generics, g_shape, 0, span)\n+    })\n }\n \n fn rewrite_generics_inner(\n@@ -2435,14 +2439,17 @@ fn rewrite_generics_inner(\n     format_generics_item_list(context, items, shape, one_line_width)\n }\n \n-pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Shape {\n-    Shape {\n-        // 2 = `<>`\n-        width: shape.width.checked_sub(offset + 2).unwrap_or(0),\n-        ..match config.generics_indent() {\n-              IndentStyle::Visual => shape.visual_indent(1 + offset),\n-              IndentStyle::Block => shape.block().block_indent(config.tab_spaces()),\n-          }\n+pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Option<Shape> {\n+    match config.generics_indent() {\n+        IndentStyle::Visual => shape.visual_indent(1 + offset).sub_width(offset + 2),\n+        IndentStyle::Block => {\n+            // 1 = \",\"\n+            shape\n+                .block()\n+                .block_indent(config.tab_spaces())\n+                .with_max_width(config)\n+                .sub_width(1)\n+        }\n     }\n }\n \n@@ -2531,7 +2538,7 @@ fn rewrite_where_clause_rfc_style(\n     snuggle: bool,\n     span_end: Option<BytePos>,\n ) -> Option<String> {\n-    let block_shape = shape.block();\n+    let block_shape = shape.block().with_max_width(context.config);\n \n     let starting_newline = if snuggle {\n         \" \".to_owned()\n@@ -2553,7 +2560,7 @@ fn rewrite_where_clause_rfc_style(\n         terminator,\n         |pred| span_for_where_pred(pred).lo,\n         |pred| span_for_where_pred(pred).hi,\n-        |pred| pred.rewrite(context, shape),\n+        |pred| pred.rewrite(context, block_shape),\n         span_start,\n         span_end,\n     );"}, {"sha": "1d3be8045e23bc679b1aefb46d93e0a653d22644", "filename": "src/lists.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -68,18 +68,6 @@ pub struct ListFormatting<'a> {\n     pub config: &'a Config,\n }\n \n-pub fn format_fn_args<I>(items: I, shape: Shape, config: &Config) -> Option<String>\n-where\n-    I: Iterator<Item = ListItem>,\n-{\n-    list_helper(\n-        items,\n-        shape,\n-        config,\n-        ListTactic::LimitedHorizontalVertical(config.fn_call_width()),\n-    )\n-}\n-\n pub fn format_item_list<I>(items: I, shape: Shape, config: &Config) -> Option<String>\n where\n     I: Iterator<Item = ListItem>,"}, {"sha": "8ba0d64de9e3c9d77e0a3407f9134ce81fbb5856", "filename": "src/types.rs", "status": "modified", "additions": 68, "deletions": 28, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -20,11 +20,12 @@ use syntax::symbol::keywords;\n use {Shape, Spanned};\n use codemap::SpanUtils;\n use items::{format_generics_item_list, generics_shape_from_config};\n-use lists::{itemize_list, format_fn_args};\n+use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n+            definitive_tactic};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n-use config::{Style, TypeDensity};\n+use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple, wrap_args_with_parens};\n+use config::{IndentStyle, Style, TypeDensity};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -225,8 +226,12 @@ fn rewrite_segment(\n                     \"\"\n                 };\n \n-                let generics_shape =\n-                    generics_shape_from_config(context.config, shape, separator.len());\n+                let generics_shape = try_opt!(generics_shape_from_config(\n+                    context.config,\n+                    shape,\n+                    separator.len(),\n+                ));\n+                let one_line_width = try_opt!(shape.width.checked_sub(separator.len() + 2));\n                 let items = itemize_list(\n                     context.codemap,\n                     param_list.into_iter(),\n@@ -241,7 +246,7 @@ fn rewrite_segment(\n                     context,\n                     items,\n                     generics_shape,\n-                    generics_shape.width,\n+                    one_line_width,\n                 ));\n \n                 // Update position of last bracket.\n@@ -306,7 +311,16 @@ where\n     // 2 for ()\n     let budget = try_opt!(shape.width.checked_sub(2));\n     // 1 for (\n-    let offset = shape.indent + 1;\n+    let offset = match context.config.fn_args_layout() {\n+        IndentStyle::Block => {\n+            shape\n+                .block()\n+                .block_indent(context.config.tab_spaces())\n+                .indent\n+        }\n+        IndentStyle::Visual => shape.indent + 1,\n+    };\n+    let list_shape = Shape::legacy(budget, offset);\n     let list_lo = context.codemap.span_after(span, \"(\");\n     let items = itemize_list(\n         context.codemap,\n@@ -325,39 +339,64 @@ where\n             ArgumentKind::Variadic(start) => start + BytePos(3),\n         },\n         |arg| match *arg {\n-            ArgumentKind::Regular(ref ty) => ty.rewrite(context, Shape::legacy(budget, offset)),\n+            ArgumentKind::Regular(ref ty) => ty.rewrite(context, list_shape),\n             ArgumentKind::Variadic(_) => Some(\"...\".to_owned()),\n         },\n         list_lo,\n         span.hi,\n     );\n \n-    let list_str = try_opt!(format_fn_args(\n-        items,\n-        Shape::legacy(budget, offset),\n-        context.config,\n-    ));\n+    let item_vec: Vec<_> = items.collect();\n+\n+    let tactic = definitive_tactic(&*item_vec, ListTactic::HorizontalVertical, budget);\n+\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \",\",\n+        trailing_separator: if !context.use_block_indent() || variadic {\n+            SeparatorTactic::Never\n+        } else {\n+            context.config.trailing_comma()\n+        },\n+        shape: list_shape,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n \n+    let list_str = try_opt!(write_list(&item_vec, &fmt));\n+\n+    let ty_shape = match context.config.fn_args_layout() {\n+        IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces()),\n+        IndentStyle::Visual => try_opt!(shape.block_left(4)),\n+    };\n     let output = match *output {\n         FunctionRetTy::Ty(ref ty) => {\n-            let budget = try_opt!(shape.width.checked_sub(4));\n-            let type_str = try_opt!(ty.rewrite(context, Shape::legacy(budget, offset + 4)));\n+            let type_str = try_opt!(ty.rewrite(context, ty_shape));\n             format!(\" -> {}\", type_str)\n         }\n         FunctionRetTy::Default(..) => String::new(),\n     };\n \n-    let infix = if !output.is_empty() && output.len() + list_str.len() > shape.width {\n-        format!(\"\\n{}\", (offset - 1).to_string(context.config))\n+    let shape = try_opt!(shape.sub_width(output.len()));\n+    let extendable = !list_str.contains('\\n') || list_str.is_empty();\n+    let args = wrap_args_with_parens(\n+        context,\n+        &list_str,\n+        extendable,\n+        shape,\n+        Shape::indented(offset, context.config),\n+    );\n+    if last_line_width(&args) + output.len() > shape.width {\n+        Some(format!(\n+            \"{}\\n{}{}\",\n+            args,\n+            offset.to_string(context.config),\n+            output.trim_left()\n+        ))\n     } else {\n-        String::new()\n-    };\n+        Some(format!(\"{}{}\", args, output))\n+    }\n \n-    Some(if context.config.spaces_within_parens() {\n-        format!(\"( {} ){}{}\", list_str, infix, output)\n-    } else {\n-        format!(\"({}){}{}\", list_str, infix, output)\n-    })\n }\n \n fn type_bound_colon(context: &RewriteContext) -> &'static str {\n@@ -423,7 +462,9 @@ impl Rewrite for ast::WherePredicate {\n                             .map(|ty_bound| ty_bound.rewrite(context, ty_shape))\n                             .collect()\n                     );\n-                    let bounds_str = join_bounds(context, ty_shape, &bounds);\n+                    let overhead = type_str.len() + colon.len();\n+                    let bounds_str =\n+                        join_bounds(context, try_opt!(ty_shape.sub_width(overhead)), &bounds);\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }\n@@ -762,16 +803,15 @@ fn rewrite_bare_fn(\n \n     result.push_str(\"fn\");\n \n-    let budget = try_opt!(shape.width.checked_sub(result.len()));\n-    let indent = shape.indent + result.len();\n+    let func_ty_shape = try_opt!(shape.offset_left(result.len()));\n \n     let rewrite = try_opt!(format_function_type(\n         bare_fn.decl.inputs.iter(),\n         &bare_fn.decl.output,\n         bare_fn.decl.variadic,\n         span,\n         context,\n-        Shape::legacy(budget, indent),\n+        func_ty_shape,\n     ));\n \n     result.push_str(&rewrite);"}, {"sha": "2f04ee1ef92df70b9e62ba2bc3a3b48259d33d14", "filename": "tests/source/big-impl-rfc.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Fsource%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Fsource%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbig-impl-rfc.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -112,3 +112,17 @@ impl<\n > {\n     fn foo() {}\n }\n+\n+// #1689\n+impl<M, S, F, X> SubSelectDirect<M, S, F, X>\n+    where\n+    M: select::Selector,\n+    S: event::Stream,\n+    F: for<'t> FnMut(transform::Api<\n+            't,\n+        Stream<ContentStream<S>>,\n+        >)\n+                     -> transform::Api<'t, X>,\n+    X: event::Stream,\n+{\n+}"}, {"sha": "58c807f4029e2f6c72152d395a6bb929e9123a1d", "filename": "tests/source/type_alias.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype_alias.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -28,3 +28,7 @@ pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where T: Clone + Ord + E\n pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE> where T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n \n type RegisterPlugin = unsafe fn(pt: *const c_char, plugin: *mut c_void, data: *mut CallbackData);\n+\n+// #1683\n+pub type Between<Lhs, Rhs> = super::operators::Between<Lhs, super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>>;\n+pub type NotBetween<Lhs, Rhs> = super::operators::NotBetween<Lhs, super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>>;"}, {"sha": "da5ab03fd5ebfa5e68f699b45117ec38e7b18ddb", "filename": "tests/target/big-impl-rfc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbig-impl-rfc.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -75,3 +75,14 @@ impl<\n     > {\n     fn foo() {}\n }\n+\n+// #1689\n+impl<M, S, F, X> SubSelectDirect<M, S, F, X>\n+where\n+    M: select::Selector,\n+    S: event::Stream,\n+    F: for<'t> FnMut(transform::Api<'t, Stream<ContentStream<S>>>)\n+        -> transform::Api<'t, X>,\n+    X: event::Stream,\n+{\n+}"}, {"sha": "b55b64d05b34eae2c99cc1cb5ad71c34ab190eed", "filename": "tests/target/extern_not_explicit.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Fextern_not_explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Fextern_not_explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern_not_explicit.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -6,10 +6,13 @@ extern {\n \n extern fn sup() {}\n \n-type funky_func = extern fn(unsafe extern \"rust-call\" fn(*const JSJitInfo,\n-                                                         *mut JSContext,\n-                                                         HandleObject,\n-                                                         *mut libc::c_void,\n-                                                         u32,\n-                                                         *mut JSVal)\n-                                                         -> u8);\n+type funky_func = extern fn(\n+    unsafe extern \"rust-call\" fn(\n+        *const JSJitInfo,\n+        *mut JSContext,\n+        HandleObject,\n+        *mut libc::c_void,\n+        u32,\n+        *mut JSVal,\n+    ) -> u8,\n+);"}, {"sha": "76776672ca8cc7c63e0e0caf502f4178f823f7ae", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -10,7 +10,7 @@ fn simple(\n         key: &[u8],\n         upd: Box<\n             Fn(Option<&memcache::Item>)\n-               -> (memcache::Status, Result<memcache::Item, Option<String>>),\n+                -> (memcache::Status, Result<memcache::Item, Option<String>>),\n         >,\n     ) -> MapResult {\n     }\n@@ -34,15 +34,16 @@ fn weird_comment(\n \n fn generic<T>(arg: T) -> &SomeType\n where\n-    T: Fn(// First arg\n-       A,\n-       // Second argument\n-       B,\n-       C,\n-       D,\n-       // pre comment\n-       E /* last comment */)\n-       -> &SomeType,\n+    T: Fn(\n+        // First arg\n+        A,\n+        // Second argument\n+        B,\n+        C,\n+        D,\n+        // pre comment\n+        E, /* last comment */\n+    ) -> &SomeType,\n {\n     arg(a, b, c, d, e)\n }\n@@ -68,13 +69,14 @@ unsafe fn generic_call(\n     argc: libc::c_uint,\n     vp: *mut JSVal,\n     is_lenient: bool,\n-    call: unsafe extern \"C\" fn(*const JSJitInfo,\n-                               *mut JSContext,\n-                               HandleObject,\n-                               *mut libc::c_void,\n-                               u32,\n-                               *mut JSVal)\n-                               -> u8,\n+    call: unsafe extern \"C\" fn(\n+        *const JSJitInfo,\n+        *mut JSContext,\n+        HandleObject,\n+        *mut libc::c_void,\n+        u32,\n+        *mut JSVal,\n+    ) -> u8,\n ) {\n     let f: fn(_, _) -> _ = panic!();\n }"}, {"sha": "8b581e835394e0fa167332deb0bf5fd25b344e77", "filename": "tests/target/fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -102,8 +102,7 @@ fn foo(a: i32) -> i32 {\n fn ______________________baz(\n     a: i32,\n ) -> *mut ::std::option::Option<\n-    extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32)\n-                  -> (),\n+    extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32) -> (),\n > {\n }\n "}, {"sha": "c2f8d2522370f19faa86ee1b9a26c44906125543", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -59,15 +59,16 @@ fn main() {\n \n \tfn generic<T>(arg: T) -> &SomeType\n \twhere\n-\t\tT: Fn(// First arg\n-\t\t   A,\n-\t\t   // Second argument\n-\t\t   B,\n-\t\t   C,\n-\t\t   D,\n-\t\t   // pre comment\n-\t\t   E /* last comment */)\n-\t\t   -> &SomeType,\n+\t\tT: Fn(\n+\t\t\t// First arg\n+\t\t\tA,\n+\t\t\t// Second argument\n+\t\t\tB,\n+\t\t\tC,\n+\t\t\tD,\n+\t\t\t// pre comment\n+\t\t\tE, /* last comment */\n+\t\t) -> &SomeType,\n \t{\n \t\targ(a, b, c, d, e)\n \t}"}, {"sha": "80855ee5732a5bce778ca7e265a348349528773c", "filename": "tests/target/type.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -13,16 +13,20 @@ fn types() {\n \n struct F {\n     f: extern \"C\" fn(x: u8, ... /* comment */),\n-    g: extern \"C\" fn(x: u8,\n-                     // comment\n-                     ...),\n+    g: extern \"C\" fn(\n+        x: u8,\n+        // comment\n+        ...\n+    ),\n     h: extern \"C\" fn(x: u8, ...),\n-    i: extern \"C\" fn(x: u8,\n-                     // comment 4\n-                     y: String, // comment 3\n-                     z: Foo,\n-                     // comment\n-                     ... /* comment 2 */),\n+    i: extern \"C\" fn(\n+        x: u8,\n+        // comment 4\n+        y: String, // comment 3\n+        z: Foo,\n+        // comment\n+        ... /* comment 2 */\n+    ),\n }\n \n fn issue_1006(def_id_to_string: for<'a, 'b> unsafe fn(TyCtxt<'b, 'tcx, 'tcx>, DefId) -> String) {}"}, {"sha": "cac1ac466cd5f7ffb51e467b603d6dc8935fa9b7", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18e7af90f48ee1518f32f3e1aefe1955e1d403/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=be18e7af90f48ee1518f32f3e1aefe1955e1d403", "patch": "@@ -26,8 +26,9 @@ pub type LongGenericListTest<\n \n pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n \n-pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n-    Vec<Test>;\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<\n+    Test,\n+>;\n \n pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> =\n     Vec<i32>;\n@@ -61,6 +62,14 @@ pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where\n pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE> where\n     T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n \n-type RegisterPlugin = unsafe fn(pt: *const c_char,\n-                                plugin: *mut c_void,\n-                                data: *mut CallbackData);\n+type RegisterPlugin = unsafe fn(pt: *const c_char, plugin: *mut c_void, data: *mut CallbackData);\n+\n+// #1683\n+pub type Between<Lhs, Rhs> = super::operators::Between<\n+    Lhs,\n+    super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>,\n+>;\n+pub type NotBetween<Lhs, Rhs> = super::operators::NotBetween<\n+    Lhs,\n+    super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>,\n+>;"}]}