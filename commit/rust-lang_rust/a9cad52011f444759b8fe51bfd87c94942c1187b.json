{"sha": "a9cad52011f444759b8fe51bfd87c94942c1187b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2FkNTIwMTFmNDQ0NzU5YjhmZTUxYmZkODdjOTQ5NDJjMTE4N2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-01-20T05:35:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-01-20T05:35:56Z"}, "message": "Merge pull request #1574 from Wensleydale/tut-spelling\n\ntutorial.md: spelling corrections for sections 1-5", "tree": {"sha": "57b5b44843722c78fbf503891527361fe3b1159f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57b5b44843722c78fbf503891527361fe3b1159f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cad52011f444759b8fe51bfd87c94942c1187b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cad52011f444759b8fe51bfd87c94942c1187b", "html_url": "https://github.com/rust-lang/rust/commit/a9cad52011f444759b8fe51bfd87c94942c1187b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cad52011f444759b8fe51bfd87c94942c1187b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f435805e9c09d1ccd8fb7ac764d58fb1746ebead", "url": "https://api.github.com/repos/rust-lang/rust/commits/f435805e9c09d1ccd8fb7ac764d58fb1746ebead", "html_url": "https://github.com/rust-lang/rust/commit/f435805e9c09d1ccd8fb7ac764d58fb1746ebead"}, {"sha": "1a295096b1789338cba88c5fa13e38a5e1d9a353", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a295096b1789338cba88c5fa13e38a5e1d9a353", "html_url": "https://github.com/rust-lang/rust/commit/1a295096b1789338cba88c5fa13e38a5e1d9a353"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b01f33141fd04705f8a7d13b5a24d3ba8ee2e734", "filename": "doc/tutorial.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9cad52011f444759b8fe51bfd87c94942c1187b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9cad52011f444759b8fe51bfd87c94942c1187b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a9cad52011f444759b8fe51bfd87c94942c1187b", "patch": "@@ -38,7 +38,7 @@ fn fac(n: int) -> int {\n Several differences from C stand out. Types do not come before, but\n after variable names (preceded by a colon). In local variables\n (introduced with `let`), they are optional, and will be inferred when\n-left off. Constructs like `while` and `if` do not require parenthesis\n+left off. Constructs like `while` and `if` do not require parentheses\n around the condition (though they allow them). Also, there's a\n tendency towards aggressive abbreviation in the keywords\u2014`fn` for\n function, `ret` for return.\n@@ -52,7 +52,7 @@ quite a different direction.\n Throughout the tutorial, words that indicate language keywords or\n identifiers defined in the example code are displayed in `code font`.\n \n-Code snippets are indented, and also shown in a monospace font. Not\n+Code snippets are indented, and also shown in a monospaced font. Not\n all snippets constitute whole programs. For brevity, we'll often show\n fragments of programs that don't compile on their own. To try them\n out, you might have to wrap them in `fn main() { ... }`, and make sure\n@@ -176,7 +176,7 @@ detail [later on](#modules-and-crates).\n \n ## Editing Rust code\n \n-There are Vim highlighting and indentation scrips in the Rust source\n+There are Vim highlighting and indentation scripts in the Rust source\n distribution under `src/etc/vim/`, and an emacs mode under\n `src/etc/emacs/`.\n \n@@ -260,7 +260,7 @@ fn is_four(x: int) -> bool { x == 4 }\n ~~~~\n \n In short, everything that's not a declaration (`let` for variables,\n-`fn` for functions, etcetera) is an expression.\n+`fn` for functions, et cetera) is an expression.\n \n If all those things are expressions, you might conclude that you have\n to add a terminating semicolon after *every* statement, even ones that\n@@ -285,7 +285,7 @@ The double-colon (`::`) is used as a module separator, so\n `std::io::println` means 'the thing named `println` in the module\n named `io` in the module named `std`'.\n \n-Rust will normally emit warning about unused variables. These can be\n+Rust will normally emit warnings about unused variables. These can be\n suppressed by using a variable name that starts with an underscore.\n \n ~~~~\n@@ -364,7 +364,7 @@ The basic types are written like this:\n   : A character is a 32-bit Unicode code point.\n \n `str`\n-  : String type. A string contains a utf-8 encoded sequence of characters.\n+  : String type. A string contains a UTF-8 encoded sequence of characters.\n \n These can be combined in composite types, which will be described in\n more detail later on (the `T`s here stand for any other type):\n@@ -403,7 +403,7 @@ synonym.\n ## Literals\n \n Integers can be written in decimal (`144`), hexadecimal (`0x90`), and\n-binary (`0b10010000`) base. Without suffix, an integer literal is\n+binary (`0b10010000`) base. Without a suffix, an integer literal is\n considered to be of type `int`. Add a `u` (`144u`) to make it a `uint`\n instead. Literals of the fixed-size integer types can be created by\n the literal with the type name (`255u8`, `50i64`, etc).\n@@ -413,7 +413,7 @@ happens. If you are adding one to a variable of type `uint`, you must\n type `v += 1u`\u2014saying `+= 1` will give you a type error.\n \n Floating point numbers are written `0.0`, `1e6`, or `2.1e-4`. Without\n-suffix, the literal is assumed to be of type `float`. Suffixes `f32`\n+a suffix, the literal is assumed to be of type `float`. Suffixes `f32`\n and `f64` can be used to create literals of a specific type. The\n suffix `f` can be used to write `float` literals without a dot or\n exponent: `3f`.\n@@ -423,11 +423,11 @@ The nil literal is written just like the type: `()`. The keywords\n \n Character literals are written between single quotes, as in `'x'`. You\n may put non-ascii characters between single quotes (your source files\n-should be encoded as utf-8). Rust understands a number of\n+should be encoded as UTF-8). Rust understands a number of\n character escapes, using the backslash character:\n \n `\\n`\n-  : A newline (unicode character 32).\n+  : A newline (Unicode character 32).\n \n `\\r`\n   : A carriage return (13).\n@@ -912,7 +912,7 @@ compiler can look at the argument type to find out what the parameter\n types are.\n \n As a further simplification, if the final parameter to a function is a\n-closure, the closure need not be placed within parenthesis. You could,\n+closure, the closure need not be placed within parentheses. You could,\n for example, write...\n \n ~~~~"}, {"sha": "4fb132c803512f06f7cbc38baa6e86280912f800", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=a9cad52011f444759b8fe51bfd87c94942c1187b", "patch": "@@ -1 +1 @@\n-Subproject commit d578b905de8f9dece45aab2496a88ac548c67348\n+Subproject commit 4fb132c803512f06f7cbc38baa6e86280912f800"}]}