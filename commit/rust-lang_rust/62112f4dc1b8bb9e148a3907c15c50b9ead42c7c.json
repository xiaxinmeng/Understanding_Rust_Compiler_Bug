{"sha": "62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "node_id": "C_kwDOAAsO6NoAKDYyMTEyZjRkYzFiOGJiOWUxNDhhMzkwN2MxNWM1MGI5ZWFkNDJjN2M", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2022-04-10T06:05:31Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-09-11T06:04:17Z"}, "message": "minor fixups as per PR feedback", "tree": {"sha": "5257e7d6ed93933cc830d34042bb6e01fb7cda60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5257e7d6ed93933cc830d34042bb6e01fb7cda60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "html_url": "https://github.com/rust-lang/rust/commit/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543023c249c89477a5cd9fd39d942b49c2d9d30e", "url": "https://api.github.com/repos/rust-lang/rust/commits/543023c249c89477a5cd9fd39d942b49c2d9d30e", "html_url": "https://github.com/rust-lang/rust/commit/543023c249c89477a5cd9fd39d942b49c2d9d30e"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "8821362002943d6e196e1cff8e87a5f94c113ef6", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "patch": "@@ -537,17 +537,16 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             let variant_index = VariantIdx::new(index);\n             let dest = self.tcx.mk_place_downcast_unnamed(dest, variant_index);\n             let src = self.tcx.mk_place_downcast_unnamed(src, variant_index);\n-            let start_block = self.block_index_offset(0);\n             let clone_block = self.block_index_offset(1);\n-            cases.push((index as u128, start_block));\n-            self.block(\n+            let start_block = self.block(\n                 vec![self.make_statement(StatementKind::SetDiscriminant {\n                     place: Box::new(Place::return_place()),\n                     variant_index,\n                 })],\n                 TerminatorKind::Goto { target: clone_block },\n                 false,\n             );\n+            cases.push((index as u128, start_block));\n             let _final_cleanup_block = self.clone_fields(dest, src, target, unwind, state_tys);\n         }\n         let discr_ty = substs.discr_ty(self.tcx);"}, {"sha": "3ab9b7f4083b8ffe6a132d5f474d00ab27bb456a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "patch": "@@ -1943,15 +1943,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n                     let resolved_witness =\n                         self.infcx.shallow_resolve(substs.as_generator().witness());\n-                    if {\n-                        matches!(resolved_upvars.kind(), ty::Infer(ty::TyVar(_)))\n-                            || matches!(resolved_witness.kind(), ty::Infer(ty::TyVar(_)))\n-                    } {\n+                    if resolved_upvars.is_ty_var() || resolved_witness.is_ty_var() {\n                         // Not yet resolved.\n                         Ambiguous\n                     } else {\n-                        let mut all = substs.as_generator().upvar_tys().collect::<Vec<_>>();\n-                        all.push(substs.as_generator().witness());\n+                        let all = substs\n+                            .as_generator()\n+                            .upvar_tys()\n+                            .chain(iter::once(substs.as_generator().witness()))\n+                            .collect::<Vec<_>>();\n                         Where(obligation.predicate.rebind(all))\n                     }\n                 } else {\n@@ -1961,31 +1961,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ty::GeneratorWitness(binder) => {\n                 let witness_tys = binder.skip_binder();\n-                let mut iter = witness_tys.iter();\n-                loop {\n-                    match iter.next() {\n-                        Some(witness_ty) => {\n-                            let resolved = self.infcx.shallow_resolve(witness_ty);\n-                            if matches!(resolved.kind(), ty::Infer(ty::TyVar(_))) {\n-                                break Ambiguous;\n-                            }\n-                        }\n-                        Option::None => {\n-                            // (*) binder moved here\n-                            let all_vars = self.tcx().mk_bound_variable_kinds(\n-                                obligation\n-                                    .predicate\n-                                    .bound_vars()\n-                                    .iter()\n-                                    .chain(binder.bound_vars().iter()),\n-                            );\n-                            break Where(ty::Binder::bind_with_vars(\n-                                witness_tys.to_vec(),\n-                                all_vars,\n-                            ));\n-                        }\n+                for witness_ty in witness_tys.iter() {\n+                    let resolved = self.infcx.shallow_resolve(witness_ty);\n+                    if resolved.is_ty_var() {\n+                        return Ambiguous;\n                     }\n                 }\n+                // (*) binder moved here\n+                let all_vars = self.tcx().mk_bound_variable_kinds(\n+                    obligation.predicate.bound_vars().iter().chain(binder.bound_vars().iter()),\n+                );\n+                Where(ty::Binder::bind_with_vars(witness_tys.to_vec(), all_vars))\n             }\n \n             ty::Closure(_, substs) => {"}]}