{"sha": "69dbfc775447df596ac8ed17e83ecd50dbf494d6", "node_id": "C_kwDOAAsO6NoAKDY5ZGJmYzc3NTQ0N2RmNTk2YWM4ZWQxN2U4M2VjZDUwZGJmNDk0ZDY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T11:37:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-07T11:38:18Z"}, "message": "Generate `AnyHasDocComments` node", "tree": {"sha": "2304c4ab9bfe0bae874bb9d1bd5f52f4cb9f06f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2304c4ab9bfe0bae874bb9d1bd5f52f4cb9f06f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69dbfc775447df596ac8ed17e83ecd50dbf494d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69dbfc775447df596ac8ed17e83ecd50dbf494d6", "html_url": "https://github.com/rust-lang/rust/commit/69dbfc775447df596ac8ed17e83ecd50dbf494d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69dbfc775447df596ac8ed17e83ecd50dbf494d6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9", "html_url": "https://github.com/rust-lang/rust/commit/2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9"}], "stats": {"total": 116, "additions": 95, "deletions": 21}, "files": [{"sha": "51eeea30d2e78017aa1feabcec615a784ddcf51d", "filename": "crates/profile/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=69dbfc775447df596ac8ed17e83ecd50dbf494d6", "patch": "@@ -21,7 +21,7 @@ jemalloc-ctl = { version = \"0.4.1\", package = \"tikv-jemalloc-ctl\", optional = tr\n perf-event = \"0.4\"\n \n [target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3.8\", features = [\"psapi\"] }\n+winapi = { version = \"0.3.8\", features = [\"processthreadsapi\", \"psapi\"] }\n \n [features]\n cpu_profiler = []"}, {"sha": "bfce91b1d352ecbbb006b005591d2d1c6ff51c25", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=69dbfc775447df596ac8ed17e83ecd50dbf494d6", "patch": "@@ -17,7 +17,7 @@ always-assert = { version = \"0.1.2\", features = [\"log\"] }\n \n [target.'cfg(windows)'.dependencies]\n miow = \"0.4.0\"\n-winapi = \"0.3.9\"\n+winapi = { version = \"0.3.9\", features = [\"winerror\"] }\n \n [features]\n # Uncomment to enable for the whole crate graph"}, {"sha": "8e55afb949eb29f15ca87687677620b71f810c1c", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=69dbfc775447df596ac8ed17e83ecd50dbf494d6", "patch": "@@ -216,6 +216,7 @@ pub struct SourceFile {\n }\n impl ast::HasAttrs for SourceFile {}\n impl ast::HasModuleItem for SourceFile {}\n+impl ast::HasDocComments for SourceFile {}\n impl SourceFile {\n     pub fn shebang_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![shebang]) }\n }\n@@ -227,6 +228,7 @@ pub struct Const {\n impl ast::HasAttrs for Const {}\n impl ast::HasName for Const {}\n impl ast::HasVisibility for Const {}\n+impl ast::HasDocComments for Const {}\n impl Const {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n@@ -246,6 +248,7 @@ impl ast::HasAttrs for Enum {}\n impl ast::HasName for Enum {}\n impl ast::HasVisibility for Enum {}\n impl ast::HasGenericParams for Enum {}\n+impl ast::HasDocComments for Enum {}\n impl Enum {\n     pub fn enum_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![enum]) }\n     pub fn variant_list(&self) -> Option<VariantList> { support::child(&self.syntax) }\n@@ -283,6 +286,7 @@ impl ast::HasAttrs for Fn {}\n impl ast::HasName for Fn {}\n impl ast::HasVisibility for Fn {}\n impl ast::HasGenericParams for Fn {}\n+impl ast::HasDocComments for Fn {}\n impl Fn {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n@@ -303,6 +307,7 @@ pub struct Impl {\n impl ast::HasAttrs for Impl {}\n impl ast::HasVisibility for Impl {}\n impl ast::HasGenericParams for Impl {}\n+impl ast::HasDocComments for Impl {}\n impl Impl {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n@@ -320,6 +325,7 @@ pub struct MacroRules {\n impl ast::HasAttrs for MacroRules {}\n impl ast::HasName for MacroRules {}\n impl ast::HasVisibility for MacroRules {}\n+impl ast::HasDocComments for MacroRules {}\n impl MacroRules {\n     pub fn macro_rules_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![macro_rules])\n@@ -335,6 +341,7 @@ pub struct MacroDef {\n impl ast::HasAttrs for MacroDef {}\n impl ast::HasName for MacroDef {}\n impl ast::HasVisibility for MacroDef {}\n+impl ast::HasDocComments for MacroDef {}\n impl MacroDef {\n     pub fn macro_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![macro]) }\n     pub fn args(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n@@ -348,6 +355,7 @@ pub struct Module {\n impl ast::HasAttrs for Module {}\n impl ast::HasName for Module {}\n impl ast::HasVisibility for Module {}\n+impl ast::HasDocComments for Module {}\n impl Module {\n     pub fn mod_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mod]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n@@ -361,6 +369,7 @@ pub struct Static {\n impl ast::HasAttrs for Static {}\n impl ast::HasName for Static {}\n impl ast::HasVisibility for Static {}\n+impl ast::HasDocComments for Static {}\n impl Static {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n@@ -379,6 +388,7 @@ impl ast::HasAttrs for Struct {}\n impl ast::HasName for Struct {}\n impl ast::HasVisibility for Struct {}\n impl ast::HasGenericParams for Struct {}\n+impl ast::HasDocComments for Struct {}\n impl Struct {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![struct]) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -394,6 +404,7 @@ impl ast::HasName for Trait {}\n impl ast::HasVisibility for Trait {}\n impl ast::HasGenericParams for Trait {}\n impl ast::HasTypeBounds for Trait {}\n+impl ast::HasDocComments for Trait {}\n impl Trait {\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n@@ -410,6 +421,7 @@ impl ast::HasName for TypeAlias {}\n impl ast::HasVisibility for TypeAlias {}\n impl ast::HasGenericParams for TypeAlias {}\n impl ast::HasTypeBounds for TypeAlias {}\n+impl ast::HasDocComments for TypeAlias {}\n impl TypeAlias {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![type]) }\n@@ -426,6 +438,7 @@ impl ast::HasAttrs for Union {}\n impl ast::HasName for Union {}\n impl ast::HasVisibility for Union {}\n impl ast::HasGenericParams for Union {}\n+impl ast::HasDocComments for Union {}\n impl Union {\n     pub fn union_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![union]) }\n     pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n@@ -437,6 +450,7 @@ pub struct Use {\n }\n impl ast::HasAttrs for Use {}\n impl ast::HasVisibility for Use {}\n+impl ast::HasDocComments for Use {}\n impl Use {\n     pub fn use_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![use]) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n@@ -582,6 +596,7 @@ pub struct RecordField {\n impl ast::HasAttrs for RecordField {}\n impl ast::HasName for RecordField {}\n impl ast::HasVisibility for RecordField {}\n+impl ast::HasDocComments for RecordField {}\n impl RecordField {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n@@ -593,6 +608,7 @@ pub struct TupleField {\n }\n impl ast::HasAttrs for TupleField {}\n impl ast::HasVisibility for TupleField {}\n+impl ast::HasDocComments for TupleField {}\n impl TupleField {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n@@ -614,6 +630,7 @@ pub struct Variant {\n impl ast::HasAttrs for Variant {}\n impl ast::HasName for Variant {}\n impl ast::HasVisibility for Variant {}\n+impl ast::HasDocComments for Variant {}\n impl Variant {\n     pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n@@ -1567,6 +1584,7 @@ pub enum Adt {\n     Union(Union),\n }\n impl ast::HasAttrs for Adt {}\n+impl ast::HasDocComments for Adt {}\n impl ast::HasGenericParams for Adt {}\n impl ast::HasName for Adt {}\n impl ast::HasVisibility for Adt {}\n@@ -1609,6 +1627,12 @@ pub struct AnyHasAttrs {\n }\n impl ast::HasAttrs for AnyHasAttrs {}\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AnyHasDocComments {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasDocComments for AnyHasDocComments {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AnyHasGenericParams {\n     pub(crate) syntax: SyntaxNode,\n@@ -3869,6 +3893,27 @@ impl AstNode for AnyHasAttrs {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AnyHasDocComments {\n+    #[inline]\n+    pub fn new<T: ast::HasDocComments>(node: T) -> AnyHasDocComments {\n+        AnyHasDocComments { syntax: node.syntax().clone() }\n+    }\n+}\n+impl AstNode for AnyHasDocComments {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            SOURCE_FILE | CONST | ENUM | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n+            | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => {\n+                true\n+            }\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        Self::can_cast(syntax.kind()).then(|| AnyHasDocComments { syntax })\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AnyHasGenericParams {\n     #[inline]\n     pub fn new<T: ast::HasGenericParams>(node: T) -> AnyHasGenericParams {"}, {"sha": "dbde2a5351eaa2ffd9eb0708efaa55ee0c12f60b", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=69dbfc775447df596ac8ed17e83ecd50dbf494d6", "patch": "@@ -771,21 +771,4 @@ impl ast::HasLoopBody for ast::ForExpr {\n     }\n }\n \n-impl ast::HasDocComments for ast::SourceFile {}\n-impl ast::HasDocComments for ast::Fn {}\n-impl ast::HasDocComments for ast::Struct {}\n-impl ast::HasDocComments for ast::Union {}\n-impl ast::HasDocComments for ast::RecordField {}\n-impl ast::HasDocComments for ast::TupleField {}\n-impl ast::HasDocComments for ast::Enum {}\n-impl ast::HasDocComments for ast::Variant {}\n-impl ast::HasDocComments for ast::Trait {}\n-impl ast::HasDocComments for ast::Module {}\n-impl ast::HasDocComments for ast::Static {}\n-impl ast::HasDocComments for ast::Const {}\n-impl ast::HasDocComments for ast::TypeAlias {}\n-impl ast::HasDocComments for ast::Impl {}\n-impl ast::HasDocComments for ast::MacroRules {}\n-impl ast::HasDocComments for ast::MacroDef {}\n-impl ast::HasDocComments for ast::Macro {}\n-impl ast::HasDocComments for ast::Use {}\n+impl ast::HasAttrs for ast::AnyHasDocComments {}"}, {"sha": "2817f75d075716d2f22febf2c3b5cd5df95771c6", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=69dbfc775447df596ac8ed17e83ecd50dbf494d6", "patch": "@@ -1,10 +1,12 @@\n //! Various traits that are implemented by ast nodes.\n //!\n //! The implementations are usually trivial, and live in generated.rs\n+use itertools::Either;\n+\n use crate::{\n     ast::{self, support, AstChildren, AstNode, AstToken},\n     syntax_node::SyntaxElementChildren,\n-    SyntaxToken, T,\n+    SyntaxElement, SyntaxToken, T,\n };\n \n pub trait HasName: AstNode {\n@@ -74,6 +76,9 @@ pub trait HasDocComments: HasAttrs {\n     fn doc_comments(&self) -> CommentIter {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }\n+    fn doc_comments_and_attrs(&self) -> AttrCommentIter {\n+        AttrCommentIter { iter: self.syntax().children_with_tokens() }\n+    }\n }\n \n impl CommentIter {\n@@ -105,3 +110,17 @@ impl Iterator for CommentIter {\n         self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n     }\n }\n+\n+pub struct AttrCommentIter {\n+    iter: SyntaxElementChildren,\n+}\n+\n+impl Iterator for AttrCommentIter {\n+    type Item = Either<ast::Comment, ast::Attr>;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.iter.by_ref().find_map(|el| match el {\n+            SyntaxElement::Node(node) => ast::Attr::cast(node).map(Either::Right),\n+            SyntaxElement::Token(tok) => ast::Comment::cast(tok).map(Either::Left),\n+        })\n+    }\n+}"}, {"sha": "ac928402f30820be5ada5fbdf971388cc190c2f3", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dbfc775447df596ac8ed17e83ecd50dbf494d6/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=69dbfc775447df596ac8ed17e83ecd50dbf494d6", "patch": "@@ -777,6 +777,33 @@ fn extract_struct_traits(ast: &mut AstSrc) {\n             extract_struct_trait(node, name, methods);\n         }\n     }\n+\n+    let nodes_with_doc_comments = [\n+        \"SourceFile\",\n+        \"Fn\",\n+        \"Struct\",\n+        \"Union\",\n+        \"RecordField\",\n+        \"TupleField\",\n+        \"Enum\",\n+        \"Variant\",\n+        \"Trait\",\n+        \"Module\",\n+        \"Static\",\n+        \"Const\",\n+        \"TypeAlias\",\n+        \"Impl\",\n+        \"MacroRules\",\n+        \"MacroDef\",\n+        \"Macro\",\n+        \"Use\",\n+    ];\n+\n+    for node in &mut ast.nodes {\n+        if nodes_with_doc_comments.contains(&&*node.name) {\n+            node.traits.push(\"HasDocComments\".into());\n+        }\n+    }\n }\n \n fn extract_struct_trait(node: &mut AstNodeSrc, trait_name: &str, methods: &[&str]) {"}]}