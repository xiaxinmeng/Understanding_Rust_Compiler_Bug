{"sha": "bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "node_id": "C_kwDOAAsO6NoAKGJkYjMyYmQ0YmJjYWJiMGQzMmEwNGEwYjQ1ZTZhOGNlYWE1ZTU0ZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T07:25:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T07:25:01Z"}, "message": "Auto merge of #110440 - matthiaskrgr:rollup-eit19vi, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #110038 (Erase regions when confirming transmutability candidate)\n - #110341 (rustdoc: stop passing a title to `replaceState` second argument)\n - #110388 (Add a message for if an overflow occurs in `core::intrinsics::is_nonoverlapping`.)\n - #110404 (fix clippy::toplevel_ref_arg and ::manual_map)\n - #110421 (Spelling librustdoc)\n - #110423 (Spelling srcdoc)\n - #110433 (Windows: map a few more error codes to ErrorKind)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6fb7bfe07cb65a11a5b9ab3334847b2e511fb982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb7bfe07cb65a11a5b9ab3334847b2e511fb982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "html_url": "https://github.com/rust-lang/rust/commit/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ac4f8e2fc15e49ef3a04f98622a9b9db755fd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ac4f8e2fc15e49ef3a04f98622a9b9db755fd4", "html_url": "https://github.com/rust-lang/rust/commit/53ac4f8e2fc15e49ef3a04f98622a9b9db755fd4"}, {"sha": "35e63890bdd1b25298862cff59bce2a01728279b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e63890bdd1b25298862cff59bce2a01728279b", "html_url": "https://github.com/rust-lang/rust/commit/35e63890bdd1b25298862cff59bce2a01728279b"}], "stats": {"total": 339, "additions": 179, "deletions": 160}, "files": [{"sha": "f17df5b0a83c72eeea38e41cdb6faec20def193b", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -141,13 +141,7 @@ fn parse_args<'a>(ecx: &mut ExtCtxt<'a>, sp: Span, tts: TokenStream) -> PResult<\n                         args: args\n                             .named_args()\n                             .iter()\n-                            .filter_map(|a| {\n-                                if let Some(ident) = a.kind.ident() {\n-                                    Some((a, ident))\n-                                } else {\n-                                    None\n-                                }\n-                            })\n+                            .filter_map(|a| a.kind.ident().map(|ident| (a, ident)))\n                             .map(|(arg, n)| n.span.to(arg.expr.span))\n                             .collect(),\n                     });"}, {"sha": "99581ed2375903f3f096fdea42e5b58d11d7bedf", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -256,12 +256,9 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn remove(&mut self, key: &K) -> Option<V> {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if let Some(index) = array.iter().position(|(k, _v)| k == key) {\n-                    Some(array.swap_remove(index).1)\n-                } else {\n-                    None\n-                }\n+                array.iter().position(|(k, _v)| k == key).map(|index| array.swap_remove(index).1)\n             }\n+\n             SsoHashMap::Map(map) => map.remove(key),\n         }\n     }"}, {"sha": "80a64e59c0f0e161f56071f8faa29b9e39e1f54b", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -636,20 +636,14 @@ trait UnusedDelimLint {\n             return;\n         }\n         let spans = match value.kind {\n-            ast::ExprKind::Block(ref block, None) if block.stmts.len() == 1 => {\n-                if let Some(span) = block.stmts[0].span.find_ancestor_inside(value.span) {\n-                    Some((value.span.with_hi(span.lo()), value.span.with_lo(span.hi())))\n-                } else {\n-                    None\n-                }\n-            }\n+            ast::ExprKind::Block(ref block, None) if block.stmts.len() == 1 => block.stmts[0]\n+                .span\n+                .find_ancestor_inside(value.span)\n+                .map(|span| (value.span.with_hi(span.lo()), value.span.with_lo(span.hi()))),\n             ast::ExprKind::Paren(ref expr) => {\n-                let expr_span = expr.span.find_ancestor_inside(value.span);\n-                if let Some(expr_span) = expr_span {\n-                    Some((value.span.with_hi(expr_span.lo()), value.span.with_lo(expr_span.hi())))\n-                } else {\n-                    None\n-                }\n+                expr.span.find_ancestor_inside(value.span).map(|expr_span| {\n+                    (value.span.with_hi(expr_span.lo()), value.span.with_lo(expr_span.hi()))\n+                })\n             }\n             _ => return,\n         };\n@@ -928,11 +922,10 @@ impl UnusedParens {\n                 // Otherwise proceed with linting.\n                 _ => {}\n             }\n-            let spans = if let Some(inner) = inner.span.find_ancestor_inside(value.span) {\n-                Some((value.span.with_hi(inner.lo()), value.span.with_lo(inner.hi())))\n-            } else {\n-                None\n-            };\n+            let spans = inner\n+                .span\n+                .find_ancestor_inside(value.span)\n+                .map(|inner| (value.span.with_hi(inner.lo()), value.span.with_lo(inner.hi())));\n             self.emit_unused_delims(cx, value.span, spans, \"pattern\", keep_space);\n         }\n     }\n@@ -1043,11 +1036,11 @@ impl EarlyLintPass for UnusedParens {\n                         if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n                     ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n                     _ => {\n-                        let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n-                            Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n-                        } else {\n-                            None\n-                        };\n+                        let spans = r\n+                            .span\n+                            .find_ancestor_inside(ty.span)\n+                            .map(|r| (ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())));\n+\n                         self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n                     }\n                 }"}, {"sha": "3a105a2abaeb990e6ac94b1fa12eb3e2765c046e", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -493,7 +493,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         cond: &Operand<'tcx>,\n         location: Location,\n     ) -> Option<!> {\n-        let ref value = self.eval_operand(&cond, location)?;\n+        let value = &self.eval_operand(&cond, location)?;\n         trace!(\"assertion on {:?} should be {:?}\", value, expected);\n \n         let expected = Scalar::from_bool(expected);"}, {"sha": "e1db19557cfe26cd81fd8eff9a9ae77123bb9125", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -45,10 +45,10 @@ impl<'a> Parser<'a> {\n                     Some(InnerAttrForbiddenReason::AfterOuterDocComment {\n                         prev_doc_comment_span: prev_outer_attr_sp.unwrap(),\n                     })\n-                } else if let Some(prev_outer_attr_sp) = prev_outer_attr_sp {\n-                    Some(InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp })\n                 } else {\n-                    None\n+                    prev_outer_attr_sp.map(|prev_outer_attr_sp| {\n+                        InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp }\n+                    })\n                 };\n                 let inner_parse_policy = InnerAttrPolicy::Forbidden(inner_error_reason);\n                 just_parsed_doc_comment = false;"}, {"sha": "4b7048eac04833f671ef25a2051a3fbe5eef0684", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -1869,15 +1869,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 Some(LexicalScopeBinding::Item(name_binding)) => Some(name_binding.span),\n                 _ => None,\n             };\n-            let suggestion = if let Some(span) = match_span {\n-                Some((\n+            let suggestion = match_span.map(|span| {\n+                (\n                     vec![(span, String::from(\"\"))],\n                     format!(\"`{}` is defined here, but is not a type\", ident),\n                     Applicability::MaybeIncorrect,\n-                ))\n-            } else {\n-                None\n-            };\n+                )\n+            });\n \n             (format!(\"use of undeclared type `{}`\", ident), suggestion)\n         } else {"}, {"sha": "1e9653d0c5bb8ec3a92b0c06786f0e9bef010fb4", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -1663,10 +1663,11 @@ impl SourceFile {\n \n         if let Some(ref src) = self.src {\n             Some(Cow::from(get_until_newline(src, begin)))\n-        } else if let Some(src) = self.external_src.borrow().get_source() {\n-            Some(Cow::Owned(String::from(get_until_newline(src, begin))))\n         } else {\n-            None\n+            self.external_src\n+                .borrow()\n+                .get_source()\n+                .map(|src| Cow::Owned(String::from(get_until_newline(src, begin))))\n         }\n     }\n "}, {"sha": "29a7e74a81660bd060888185732bea6a85cd0bee", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -906,10 +906,8 @@ impl SourceMap {\n \n             let snippet = if let Some(ref src) = local_begin.sf.src {\n                 Some(&src[start_index..])\n-            } else if let Some(src) = src.get_source() {\n-                Some(&src[start_index..])\n             } else {\n-                None\n+                src.get_source().map(|src| &src[start_index..])\n             };\n \n             match snippet {"}, {"sha": "bb574954587ea935c9a735747eaa6333d35f9781", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -649,7 +649,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         // FIXME(transmutability): This really should be returning nested goals for `Answer::If*`\n         match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n             ObligationCause::dummy(),\n-            ty::Binder::dummy(src_and_dst),\n+            src_and_dst,\n             scope,\n             assume,\n         ) {"}, {"sha": "0352f0f380db1550b7fec563086a9a89cee394b7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -742,7 +742,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         {\n                             // Recompute the safe transmute reason and use that for the error reporting\n                             self.get_safe_transmute_error_and_reason(\n-                                trait_predicate,\n                                 obligation.clone(),\n                                 trait_ref,\n                                 span,\n@@ -1629,7 +1628,6 @@ trait InferCtxtPrivExt<'tcx> {\n \n     fn get_safe_transmute_error_and_reason(\n         &self,\n-        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n         obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         span: Span,\n@@ -2921,18 +2919,20 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn get_safe_transmute_error_and_reason(\n         &self,\n-        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n         obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         span: Span,\n     ) -> (String, Option<String>) {\n-        let src_and_dst = trait_predicate.map_bound(|p| rustc_transmute::Types {\n-            dst: p.trait_ref.substs.type_at(0),\n-            src: p.trait_ref.substs.type_at(1),\n-        });\n-        let scope = trait_ref.skip_binder().substs.type_at(2);\n+        // Erase regions because layout code doesn't particularly care about regions.\n+        let trait_ref = self.tcx.erase_regions(self.tcx.erase_late_bound_regions(trait_ref));\n+\n+        let src_and_dst = rustc_transmute::Types {\n+            dst: trait_ref.substs.type_at(0),\n+            src: trait_ref.substs.type_at(1),\n+        };\n+        let scope = trait_ref.substs.type_at(2);\n         let Some(assume) =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.skip_binder().substs.const_at(3)) else {\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.substs.const_at(3)) else {\n                 span_bug!(span, \"Unable to construct rustc_transmute::Assume where it was previously possible\");\n             };\n         match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n@@ -2942,8 +2942,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             assume,\n         ) {\n             rustc_transmute::Answer::No(reason) => {\n-                let dst = trait_ref.skip_binder().substs.type_at(0);\n-                let src = trait_ref.skip_binder().substs.type_at(1);\n+                let dst = trait_ref.substs.type_at(0);\n+                let src = trait_ref.substs.type_at(1);\n                 let custom_err_msg = format!(\n                     \"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\"\n                 );"}, {"sha": "3bba11262f5b8d07255a5a83e366caa6e197bf5a", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -275,33 +275,35 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<ImplSourceBuiltinData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         debug!(?obligation, \"confirm_transmutability_candidate\");\n \n-        let predicate = obligation.predicate;\n-\n-        let type_at = |i| predicate.map_bound(|p| p.trait_ref.substs.type_at(i));\n-        let const_at = |i| predicate.skip_binder().trait_ref.substs.const_at(i);\n-\n-        let src_and_dst = predicate.map_bound(|p| rustc_transmute::Types {\n-            dst: p.trait_ref.substs.type_at(0),\n-            src: p.trait_ref.substs.type_at(1),\n-        });\n-\n-        let scope = type_at(2).skip_binder();\n-\n-        let Some(assume) =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3)) else {\n-                return Err(Unimplemented);\n-            };\n-\n-        let cause = obligation.cause.clone();\n+        // We erase regions here because transmutability calls layout queries,\n+        // which does not handle inference regions and doesn't particularly\n+        // care about other regions. Erasing late-bound regions is equivalent\n+        // to instantiating the binder with placeholders then erasing those\n+        // placeholder regions.\n+        let predicate =\n+            self.tcx().erase_regions(self.tcx().erase_late_bound_regions(obligation.predicate));\n+\n+        let Some(assume) = rustc_transmute::Assume::from_const(\n+            self.infcx.tcx,\n+            obligation.param_env,\n+            predicate.trait_ref.substs.const_at(3)\n+        ) else {\n+            return Err(Unimplemented);\n+        };\n \n         let mut transmute_env = rustc_transmute::TransmuteTypeEnv::new(self.infcx);\n-\n-        let maybe_transmutable = transmute_env.is_transmutable(cause, src_and_dst, scope, assume);\n-\n-        use rustc_transmute::Answer;\n+        let maybe_transmutable = transmute_env.is_transmutable(\n+            obligation.cause.clone(),\n+            rustc_transmute::Types {\n+                dst: predicate.trait_ref.substs.type_at(0),\n+                src: predicate.trait_ref.substs.type_at(1),\n+            },\n+            predicate.trait_ref.substs.type_at(2),\n+            assume,\n+        );\n \n         match maybe_transmutable {\n-            Answer::Yes => Ok(ImplSourceBuiltinData { nested: vec![] }),\n+            rustc_transmute::Answer::Yes => Ok(ImplSourceBuiltinData { nested: vec![] }),\n             _ => Err(Unimplemented),\n         }\n     }"}, {"sha": "7792ceabe7e40ae00246067efb1db961883a4f73", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -243,16 +243,11 @@ pub fn get_vtable_index_of_object_method<'tcx, N>(\n ) -> Option<usize> {\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n-    if let Some(index) = tcx\n-        .own_existential_vtable_entries(object.upcast_trait_ref.def_id())\n+    tcx.own_existential_vtable_entries(object.upcast_trait_ref.def_id())\n         .iter()\n         .copied()\n         .position(|def_id| def_id == method_def_id)\n-    {\n-        Some(object.vtable_base + index)\n-    } else {\n-        None\n-    }\n+        .map(|index| object.vtable_base + index)\n }\n \n pub fn closure_trait_ref_and_return_type<'tcx>("}, {"sha": "8be02c1d9888a46ac6c78ba9c83238888bf7e1d4", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -64,7 +64,6 @@ mod rustc {\n     use rustc_infer::infer::InferCtxt;\n     use rustc_macros::{TypeFoldable, TypeVisitable};\n     use rustc_middle::traits::ObligationCause;\n-    use rustc_middle::ty::Binder;\n     use rustc_middle::ty::Const;\n     use rustc_middle::ty::ParamEnv;\n     use rustc_middle::ty::Ty;\n@@ -92,15 +91,13 @@ mod rustc {\n         pub fn is_transmutable(\n             &mut self,\n             cause: ObligationCause<'tcx>,\n-            src_and_dst: Binder<'tcx, Types<'tcx>>,\n+            types: Types<'tcx>,\n             scope: Ty<'tcx>,\n             assume: crate::Assume,\n         ) -> crate::Answer<crate::layout::rustc::Ref<'tcx>> {\n-            let src = src_and_dst.map_bound(|types| types.src).skip_binder();\n-            let dst = src_and_dst.map_bound(|types| types.dst).skip_binder();\n             crate::maybe_transmutable::MaybeTransmutableQuery::new(\n-                src,\n-                dst,\n+                types.src,\n+                types.dst,\n                 scope,\n                 assume,\n                 self.infcx.tcx,"}, {"sha": "47cd7af221d26d06d43c335395e246e37daf401b", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -234,15 +234,12 @@ fn resolve_associated_item<'tcx>(\n             _ => None,\n         },\n         traits::ImplSource::Object(ref data) => {\n-            if let Some(index) = traits::get_vtable_index_of_object_method(tcx, data, trait_item_id)\n-            {\n-                Some(Instance {\n+            traits::get_vtable_index_of_object_method(tcx, data, trait_item_id).map(|index| {\n+                Instance {\n                     def: ty::InstanceDef::Virtual(trait_item_id, index),\n                     substs: rcvr_substs,\n-                })\n-            } else {\n-                None\n-            }\n+                }\n+            })\n         }\n         traits::ImplSource::Builtin(..) => {\n             let lang_items = tcx.lang_items();"}, {"sha": "9cb0fc105943ca1552e08a9e67b60072cc7176fa", "filename": "compiler/rustc_ty_utils/src/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -13,7 +13,7 @@ use rustc_trait_selection::traits::{ObligationCause, ObligationCtxt};\n /// Note that this does *not* recursively check if the substructure of `adt_ty`\n /// implements the traits.\n fn has_structural_eq_impls<'tcx>(tcx: TyCtxt<'tcx>, adt_ty: Ty<'tcx>) -> bool {\n-    let ref infcx = tcx.infer_ctxt().build();\n+    let infcx = &tcx.infer_ctxt().build();\n     let cause = ObligationCause::dummy();\n \n     let ocx = ObligationCtxt::new(infcx);"}, {"sha": "ba03da411e34ee492bac2a73fcf4b8be7d74d0bb", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -2519,7 +2519,9 @@ pub(crate) fn is_valid_allocation_size<T>(len: usize) -> bool {\n pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {\n     let src_usize = src.addr();\n     let dst_usize = dst.addr();\n-    let size = mem::size_of::<T>().checked_mul(count).unwrap();\n+    let size = mem::size_of::<T>()\n+        .checked_mul(count)\n+        .expect(\"is_nonoverlapping: `size_of::<T>() * count` overflows a usize\");\n     let diff = if src_usize > dst_usize { src_usize - dst_usize } else { dst_usize - src_usize };\n     // If the absolute distance between the ptrs is at least as big as the size of the buffer,\n     // they do not overlap."}, {"sha": "bcc172b0fae36a08101efb86ad00a1ed9ee56839", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -68,10 +68,13 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::ERROR_ALREADY_EXISTS => return AlreadyExists,\n         c::ERROR_FILE_EXISTS => return AlreadyExists,\n         c::ERROR_BROKEN_PIPE => return BrokenPipe,\n-        c::ERROR_FILE_NOT_FOUND => return NotFound,\n-        c::ERROR_PATH_NOT_FOUND => return NotFound,\n+        c::ERROR_FILE_NOT_FOUND\n+        | c::ERROR_PATH_NOT_FOUND\n+        | c::ERROR_INVALID_DRIVE\n+        | c::ERROR_BAD_NETPATH\n+        | c::ERROR_BAD_NET_NAME => return NotFound,\n         c::ERROR_NO_DATA => return BrokenPipe,\n-        c::ERROR_INVALID_NAME => return InvalidFilename,\n+        c::ERROR_INVALID_NAME | c::ERROR_BAD_PATHNAME => return InvalidFilename,\n         c::ERROR_INVALID_PARAMETER => return InvalidInput,\n         c::ERROR_NOT_ENOUGH_MEMORY | c::ERROR_OUTOFMEMORY => return OutOfMemory,\n         c::ERROR_SEM_TIMEOUT"}, {"sha": "2535cd4f12cec15fed9266dbaca2d9a0f33ae72d", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -117,7 +117,7 @@ $ ls formatjson5.profraw\n formatjson5.profraw\n ```\n \n-If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing directory structure will be created. Additionally, the following special pattern strings are rewritten:\n+If `LLVM_PROFILE_FILE` contains a path to a nonexistent directory, the missing directory structure will be created. Additionally, the following special pattern strings are rewritten:\n \n -   `%p` - The process ID.\n -   `%h` - The hostname of the machine running the program."}, {"sha": "11d7b5b59381bb7dda4a39ccaa62b270d644880f", "filename": "src/doc/rustc/src/json.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -61,7 +61,7 @@ Diagnostics have the following format:\n             /* The file where the span is located.\n                Note that this path may not exist. For example, if the path\n                points to the standard library, and the rust src is not\n-               available in the sysroot, then it may point to a non-existent\n+               available in the sysroot, then it may point to a nonexistent\n                file. Beware that this may also point to the source of an\n                external crate.\n             */"}, {"sha": "e351ea0013003b3d0e1c2e9a87dba0ef3d4c2964", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -66,7 +66,7 @@ After completing these steps you can use rust normally in a native environment.\n \n To cross compile, you'll need to:\n \n-* Build the rust cross toochain using  [rust-bootstrap-armv7-unknown-linux-uclibceabi](https://github.com/lancethepants/rust-bootstrap-armv7-unknown-linux-uclibceabi) or your own built toolchain.\n+* Build the rust cross toolchain using  [rust-bootstrap-armv7-unknown-linux-uclibceabi](https://github.com/lancethepants/rust-bootstrap-armv7-unknown-linux-uclibceabi) or your own built toolchain.\n * Link your built toolchain with\n \n     ```text"}, {"sha": "03fa284620e4c521996c818f543a7a62b787c21a", "filename": "src/doc/rustc/src/platform-support/unknown-uefi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -123,7 +123,7 @@ There are 3 common ways to compile native C code for UEFI targets:\n   targets. Be wary of any includes that are not specifically suitable for UEFI\n   targets (especially the C standard library includes are not always\n   compatible). Freestanding compilations are recommended to avoid\n-  incompatibilites.\n+  incompatibilities.\n \n ## Ecosystem\n "}, {"sha": "2d203f264e623c37a718fdc7df7c53ff36c1ac22", "filename": "src/doc/style-guide/src/principles.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fprinciples.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fprinciples.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fprinciples.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -6,7 +6,7 @@ following principles (in rough priority order):\n * readability\n     - scan-ability\n     - avoiding misleading formatting\n-    - accessibility - readable and editable by users using the the widest\n+    - accessibility - readable and editable by users using the widest\n       variety of hardware, including non-visual accessibility interfaces\n     - readability of code in contexts without syntax highlighting or IDE\n       assistance, such as rustc error messages, diffs, grep, and other"}, {"sha": "ae456ef21c8d4ad2b8cb2bcedaf44ec08e138a02", "filename": "src/doc/style-guide/src/types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Fstyle-guide%2Fsrc%2Ftypes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Fstyle-guide%2Fsrc%2Ftypes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Ftypes.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -6,7 +6,7 @@\n * `[T; expr]`, e.g., `[u32; 42]`, `[Vec<Foo>; 10 * 2 + foo()]` (space after colon, no spaces around square brackets)\n * `*const T`, `*mut T` (no space after `*`, space before type)\n * `&'a T`, `&T`, `&'a mut T`, `&mut T` (no space after `&`, single spaces separating other words)\n-* `unsafe extern \"C\" fn<'a, 'b, 'c>(T, U, V) -> W` or `fn()` (single spaces around keyowrds and sigils, and after commas, no trailing commas, no spaces around brackets)\n+* `unsafe extern \"C\" fn<'a, 'b, 'c>(T, U, V) -> W` or `fn()` (single spaces around keywords and sigils, and after commas, no trailing commas, no spaces around brackets)\n * `!` should be treated like any other type name, `Name`\n * `(A, B, C, D)` (spaces after commas, no spaces around parens, no trailing comma unless it is a one-tuple)\n * `<Baz<T> as SomeTrait>::Foo::Bar` or `Foo::Bar` or `::Foo::Bar` (no spaces around `::` or angle brackets, single spaces around `as`)"}, {"sha": "10f0fbc50626171dcf748391b3b112b7f236b7b0", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -202,5 +202,5 @@ fn shoot_lasers() {}\n \n #[cfg(feature = \"monkeys\")] // This is UNEXPECTED, because \"monkeys\" is not in\n                             // the values(feature) list\n-fn write_shakespear() {}\n+fn write_shakespeare() {}\n ```"}, {"sha": "aea054ba911fe923e527651a69718b749b7e7f11", "filename": "src/doc/unstable-book/src/compiler-flags/move-size-limit.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fmove-size-limit.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -6,5 +6,5 @@ The `-Zmove-size-limit=N` compiler flag enables `large_assignments` lints which\n will warn when moving objects whose size exceeds `N` bytes.\n \n Lint warns only about moves in functions that participate in code generation.\n-Consequently it will be ineffective for compiler invocatation that emit\n+Consequently it will be ineffective for compiler invocation that emit\n metadata only, i.e., `cargo check` like workflows."}, {"sha": "bab88b148b266851f0ee1ca9cf9232b36c8114f4", "filename": "src/doc/unstable-book/src/language-features/transparent-unions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -65,7 +65,7 @@ pub union GenericUnion<T: Copy> { // Unions with non-`Copy` fields are unstable.\n pub const THIS_IS_OKAY: GenericUnion<()> = GenericUnion { field: () };\n ```\n \n-Like transarent `struct`s, a transparent `union` of type `U` has the same\n+Like transparent `struct`s, a transparent `union` of type `U` has the same\n layout, size, and ABI as its single non-ZST field. If it is generic over a type\n `T`, and all its fields are ZSTs except for exactly one field of type `T`, then\n it has the same layout and ABI as `T` (even if `T` is a ZST when monomorphized)."}, {"sha": "3f6a5d6d9017a6d348710de6e5017157b1ad98eb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -528,7 +528,7 @@ pub(crate) fn build_impl(\n             items: trait_items,\n             polarity,\n             kind: if utils::has_doc_flag(tcx, did, sym::fake_variadic) {\n-                ImplKind::FakeVaradic\n+                ImplKind::FakeVariadic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "04379c2bca97dddd17e4c4b752b89d42951773ba", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -2356,7 +2356,7 @@ fn clean_impl<'tcx>(\n             items,\n             polarity: tcx.impl_polarity(def_id),\n             kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::fake_variadic) {\n-                ImplKind::FakeVaradic\n+                ImplKind::FakeVariadic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "03129b972f2ec25d2eb3befbd724bfc2a49fc6b2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -156,7 +156,7 @@ impl ExternalCrate {\n     }\n \n     /// Attempts to find where an external crate is located, given that we're\n-    /// rendering in to the specified source destination.\n+    /// rendering into the specified source destination.\n     pub(crate) fn location(\n         &self,\n         extern_url: Option<&str>,\n@@ -751,7 +751,7 @@ pub(crate) enum ItemKind {\n     PrimitiveItem(PrimitiveType),\n     /// A required associated constant in a trait declaration.\n     TyAssocConstItem(Type),\n-    /// An associated associated constant in a trait impl or a provided one in a trait declaration.\n+    /// An associated constant in a trait impl or a provided one in a trait declaration.\n     AssocConstItem(Type, ConstantKind),\n     /// A required associated type in a trait declaration.\n     ///\n@@ -2305,7 +2305,7 @@ impl Impl {\n pub(crate) enum ImplKind {\n     Normal,\n     Auto,\n-    FakeVaradic,\n+    FakeVariadic,\n     Blanket(Box<Type>),\n }\n \n@@ -2319,7 +2319,7 @@ impl ImplKind {\n     }\n \n     pub(crate) fn is_fake_variadic(&self) -> bool {\n-        matches!(self, ImplKind::FakeVaradic)\n+        matches!(self, ImplKind::FakeVariadic)\n     }\n \n     pub(crate) fn as_blanket_ty(&self) -> Option<&Type> {"}, {"sha": "b579e7f5ae9caa394f243f36b17ab97fd4d3b183", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -491,7 +491,7 @@ impl Options {\n                 //   https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\n                 //\n                 // The original key values we have are the same as the DOM storage API keys and the\n-                // command line options, so contain `-`.  Our Javascript needs to be able to look\n+                // command line options, so contain `-`.  Our JavaScript needs to be able to look\n                 // these values up both in `dataset` and in the storage API, so it needs to be able\n                 // to convert the names back and forth.  Despite doing this kebab-case to\n                 // StudlyCaps transformation automatically, the JS DOM API does not provide a"}, {"sha": "841abfab666bf51002d36f42f4e3d22adc072104", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -300,14 +300,13 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             ParentStackItem::Impl { for_, .. } => for_.def_id(&self.cache),\n                             ParentStackItem::Type(item_id) => item_id.as_def_id(),\n                         };\n-                        let path = match did.and_then(|did| self.cache.paths.get(&did)) {\n+                        let path = did\n+                            .and_then(|did| self.cache.paths.get(&did))\n                             // The current stack not necessarily has correlation\n                             // for where the type was defined. On the other\n                             // hand, `paths` always has the right\n                             // information if present.\n-                            Some((fqp, _)) => Some(&fqp[..fqp.len() - 1]),\n-                            None => None,\n-                        };\n+                            .map(|(fqp, _)| &fqp[..fqp.len() - 1]);\n                         ((did, path), true)\n                     }\n                 }"}, {"sha": "946c85a205f5a9104bcf3a5043fde37e6a65a3cd", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -514,7 +514,7 @@ struct Classifier<'src> {\n \n impl<'src> Classifier<'src> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n-    /// file span which will be used later on by the `span_correspondance_map`.\n+    /// file span which will be used later on by the `span_correspondence_map`.\n     fn new(src: &str, file_span: Span, decoration_info: Option<DecorationInfo>) -> Classifier<'_> {\n         let tokens = PeekIter::new(TokenIter { src, cursor: Cursor::new(src) });\n         let decorations = decoration_info.map(Decorations::new);\n@@ -649,7 +649,7 @@ impl<'src> Classifier<'src> {\n     ///\n     /// `before` is the position of the given token in the `source` string and is used as \"lo\" byte\n     /// in case we want to try to generate a link for this token using the\n-    /// `span_correspondance_map`.\n+    /// `span_correspondence_map`.\n     fn advance(\n         &mut self,\n         token: TokenKind,\n@@ -895,7 +895,7 @@ fn exit_span(out: &mut impl Write, closing_tag: &str) {\n /// flexible.\n ///\n /// Note that if `context` is not `None` and that the given `klass` contains a `Span`, the function\n-/// will then try to find this `span` in the `span_correspondance_map`. If found, it'll then\n+/// will then try to find this `span` in the `span_correspondence_map`. If found, it'll then\n /// generate a link for this element (which corresponds to where its definition is located).\n fn string<T: Display>(\n     out: &mut impl Write,\n@@ -916,7 +916,7 @@ fn string<T: Display>(\n /// * If `klass` is `Some` but `klass.get_span()` is `None`, it writes the text wrapped in a\n ///   `<span>` with the provided `klass`.\n /// * If `klass` is `Some` and has a [`rustc_span::Span`], it then tries to generate a link (`<a>`\n-///   element) by retrieving the link information from the `span_correspondance_map` that was filled\n+///   element) by retrieving the link information from the `span_correspondence_map` that was filled\n ///   in `span_map.rs::collect_spans_and_sources`. If it cannot retrieve the information, then it's\n ///   the same as the second point (`klass` is `Some` but doesn't have a [`rustc_span::Span`]).\n fn string_without_closing_tag<T: Display>(\n@@ -963,7 +963,7 @@ fn string_without_closing_tag<T: Display>(\n \n     if let Some(href_context) = href_context {\n         if let Some(href) =\n-            href_context.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n+            href_context.context.shared.span_correspondence_map.get(&def_span).and_then(|href| {\n                 let context = href_context.context;\n                 // FIXME: later on, it'd be nice to provide two links (if possible) for all items:\n                 // one to the documentation page and one to the source definition."}, {"sha": "4b0aee9c3add90f08a7629d050b500e7ad99a5b9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -1392,7 +1392,7 @@ static DEFAULT_ID_MAP: Lazy<FxHashMap<Cow<'static, str>, usize>> = Lazy::new(||\n \n fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     let mut map = FxHashMap::default();\n-    // This is the list of IDs used in Javascript.\n+    // This is the list of IDs used in JavaScript.\n     map.insert(\"help\".into(), 1);\n     map.insert(\"settings\".into(), 1);\n     map.insert(\"not-displayed\".into(), 1);"}, {"sha": "a063c8c9f02ddf402147330eb72bf23843e2e066", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -122,9 +122,9 @@ pub(crate) struct SharedContext<'tcx> {\n     /// the crate.\n     redirections: Option<RefCell<FxHashMap<String, String>>>,\n \n-    /// Correspondance map used to link types used in the source code pages to allow to click on\n+    /// Correspondence map used to link types used in the source code pages to allow to click on\n     /// links to jump to the type's definition.\n-    pub(crate) span_correspondance_map: FxHashMap<rustc_span::Span, LinkFromSrc>,\n+    pub(crate) span_correspondence_map: FxHashMap<rustc_span::Span, LinkFromSrc>,\n     /// The [`Cache`] used during rendering.\n     pub(crate) cache: Cache,\n \n@@ -531,7 +531,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             errors: receiver,\n             redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n             show_type_layout,\n-            span_correspondance_map: matches,\n+            span_correspondence_map: matches,\n             cache,\n             call_locations,\n         };\n@@ -647,7 +647,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                      </div>\\\n                      <noscript>\\\n                         <section>\\\n-                            You need to enable Javascript be able to update your settings.\\\n+                            You need to enable JavaScript be able to update your settings.\\\n                         </section>\\\n                      </noscript>\\\n                      <link rel=\\\"stylesheet\\\" \\\n@@ -709,7 +709,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                      </div>\\\n                      <noscript>\\\n                         <section>\\\n-                            <p>You need to enable Javascript to use keyboard commands or search.</p>\\\n+                            <p>You need to enable JavaScript to use keyboard commands or search.</p>\\\n                             <p>For more information, browse the <a href=\\\"https://doc.rust-lang.org/rustdoc/\\\">rustdoc handbook</a>.</p>\\\n                         </section>\\\n                      </noscript>\","}, {"sha": "93d657fd605093847aedd091514a52742a721b61", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -275,8 +275,7 @@ function preLoadCss(cssUrl) {\n             document.title = searchState.titleBeforeSearch;\n             // We also remove the query parameter from the URL.\n             if (browserSupportsHistoryApi()) {\n-                history.replaceState(null, window.currentCrate + \" - Rust\",\n-                    getNakedUrl() + window.location.hash);\n+                history.replaceState(null, \"\", getNakedUrl() + window.location.hash);\n             }\n         },\n         getQueryStringParams: () => {\n@@ -378,8 +377,7 @@ function preLoadCss(cssUrl) {\n         searchState.clearInputTimeout();\n         switchDisplayedElement(null);\n         if (browserSupportsHistoryApi()) {\n-            history.replaceState(null, window.currentCrate + \" - Rust\",\n-                getNakedUrl() + window.location.hash);\n+            history.replaceState(null, \"\", getNakedUrl() + window.location.hash);\n         }\n         ev.preventDefault();\n         searchState.defocus();"}, {"sha": "edd046ab7723361963cb74d1132a15756646920d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -665,7 +665,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n-            clean::ImplKind::Normal | clean::ImplKind::FakeVaradic => (false, None),\n+            clean::ImplKind::Normal | clean::ImplKind::FakeVariadic => (false, None),\n             clean::ImplKind::Auto => (true, None),\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };\n@@ -740,7 +740,7 @@ impl FromWithTcx<clean::Variant> for Variant {\n impl FromWithTcx<clean::Discriminant> for Discriminant {\n     fn from_tcx(disr: clean::Discriminant, tcx: TyCtxt<'_>) -> Self {\n         Discriminant {\n-            // expr is only none if going through the inlineing path, which gets\n+            // expr is only none if going through the inlining path, which gets\n             // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n             // the expr is always some.\n             expr: disr.expr(tcx).unwrap(),"}, {"sha": "dfa99ffcb7c7d49b7d5f82b40d2cc0c8272c5bb3", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -286,7 +286,7 @@ pub(crate) fn run(\n         let (cx, _) = Context::init(krate, renderopts, cache, tcx).map_err(|e| e.to_string())?;\n \n         // Collect CrateIds corresponding to provided target crates\n-        // If two different versions of the crate in the dependency tree, then examples will be collcted from both.\n+        // If two different versions of the crate in the dependency tree, then examples will be collected from both.\n         let all_crates = tcx\n             .crates(())\n             .iter()"}, {"sha": "2a28c19c3fe75c9bbbf7f6a8ea4c45d46bc02eec", "filename": "src/librustdoc/theme/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Ftheme%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Flibrustdoc%2Ftheme%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme%2Ftests.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -13,11 +13,11 @@ rule d\n // another line comment\n e {}\n \n-rule f/* a multine\n+rule f/* a multiline\n \n comment*/{}\n \n-rule g/* another multine\n+rule g/* another multiline\n \n comment*/h\n "}, {"sha": "692d5e3fcef90a61793afa703c0844a2071223e4", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -42,7 +42,7 @@ function parseOptions(args) {\n         \"executable_path\": null,\n         \"no_sandbox\": false,\n     };\n-    const correspondances = {\n+    const correspondences = {\n         \"--doc-folder\": \"doc_folder\",\n         \"--tests-folder\": \"tests_folder\",\n         \"--debug\": \"debug\",\n@@ -73,7 +73,7 @@ function parseOptions(args) {\n                 }\n                 opts[\"jobs\"] = parseInt(arg_value);\n             } else if (arg !== \"--file\") {\n-                opts[correspondances[arg]] = arg_value;\n+                opts[correspondences[arg]] = arg_value;\n             } else {\n                 opts[\"files\"].push(arg_value);\n             }\n@@ -82,9 +82,9 @@ function parseOptions(args) {\n             process.exit(0);\n         } else if (arg === \"--no-sandbox\") {\n             console.log(\"`--no-sandbox` is being used. Be very careful!\");\n-            opts[correspondances[arg]] = true;\n-        } else if (correspondances[arg]) {\n-            opts[correspondances[arg]] = true;\n+            opts[correspondences[arg]] = true;\n+        } else if (correspondences[arg]) {\n+            opts[correspondences[arg]] = true;\n         } else {\n             console.log(\"Unknown option `\" + arg + \"`.\");\n             console.log(\"Use `--help` to see the list of options\");"}, {"sha": "819c9b92bc81aecfc1b368b9f7a9ebccf1e78bfc", "filename": "tests/ui/transmutability/references.current.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.current.stderr?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n+error[E0277]: `&Unit` cannot be safely transmuted into `&Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n+   |                                                    ^^^^^^^^^^^^^ `&Unit` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14"}, {"sha": "819c9b92bc81aecfc1b368b9f7a9ebccf1e78bfc", "filename": "tests/ui/transmutability/references.next.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.next.stderr?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n+error[E0277]: `&Unit` cannot be safely transmuted into `&Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n+   |                                                    ^^^^^^^^^^^^^ `&Unit` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14"}, {"sha": "09f60277688c8f5c89c9f65c094e26a600ccd93f", "filename": "tests/ui/transmutability/region-infer.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Fregion-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Fregion-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fregion-infer.rs?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -0,0 +1,22 @@\n+#![feature(transmutability)]\n+\n+use std::mem::{Assume, BikeshedIntrinsicFrom};\n+pub struct Context;\n+\n+#[repr(C)]\n+struct W<'a>(&'a ());\n+\n+fn test<'a>()\n+where\n+    W<'a>: BikeshedIntrinsicFrom<\n+            (),\n+            Context,\n+            { Assume { alignment: true, lifetimes: true, safety: true, validity: true } },\n+        >,\n+{\n+}\n+\n+fn main() {\n+    test();\n+    //~^ ERROR `()` cannot be safely transmuted into `W<'_>`\n+}"}, {"sha": "d6b65e9e4a08b80a96819e5bb0a7b54598d28c5c", "filename": "tests/ui/transmutability/region-infer.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Fregion-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6/tests%2Fui%2Ftransmutability%2Fregion-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fregion-infer.stderr?ref=bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: `()` cannot be safely transmuted into `W<'_>` in the defining scope of `Context`\n+  --> $DIR/region-infer.rs:20:5\n+   |\n+LL |     test();\n+   |     ^^^^ `W<'_>` does not have a well-specified layout\n+   |\n+note: required by a bound in `test`\n+  --> $DIR/region-infer.rs:11:12\n+   |\n+LL |   fn test<'a>()\n+   |      ---- required by a bound in this function\n+LL |   where\n+LL |       W<'a>: BikeshedIntrinsicFrom<\n+   |  ____________^\n+LL | |             (),\n+LL | |             Context,\n+LL | |             { Assume { alignment: true, lifetimes: true, safety: true, validity: true } },\n+LL | |         >,\n+   | |_________^ required by this bound in `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}