{"sha": "b4d9835f6c1ea0af804d11f79e329f76efd05df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDk4MzVmNmMxZWEwYWY4MDRkMTFmNzllMzI5Zjc2ZWZkMDVkZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-06T10:44:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-06T10:44:11Z"}, "message": "Auto merge of #54766 - alexcrichton:wasm-all-symbols, r=michaelwoerister\n\nwasm: Explicitly export all symbols with LLD\n\nThis commit fixes an oddity on the wasm target where LTO can produce\nworking executables but plain old optimizations doesn't. The compiler\nalready knows what set of symbols it would like to export, but LLD only\ndiscovers this list transitively through symbol visibilities. LLD may\nnot, however, always find all the symbols that we'd like to export.\n\nFor example if you depend on an rlib with a `#[no_mangle]` symbol, then\nif you don't actually use anything from the rlib then the symbol won't\nappear in the final artifact! It will appear, however, with LTO. This\ncommit attempts to rectify this situation by ensuring that all symbols\nrustc would otherwise preserve through LTO are also preserved through\nthe linking process with LLD by default.", "tree": {"sha": "8560c238e7d4613a389c61c2844f69989ae5ae59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8560c238e7d4613a389c61c2844f69989ae5ae59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d9835f6c1ea0af804d11f79e329f76efd05df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d9835f6c1ea0af804d11f79e329f76efd05df6", "html_url": "https://github.com/rust-lang/rust/commit/b4d9835f6c1ea0af804d11f79e329f76efd05df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d9835f6c1ea0af804d11f79e329f76efd05df6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac841e74502183cde08e462d98cc55752abd000a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac841e74502183cde08e462d98cc55752abd000a", "html_url": "https://github.com/rust-lang/rust/commit/ac841e74502183cde08e462d98cc55752abd000a"}, {"sha": "c7f4f3ad75997c495de1ec91b6d714d1653412dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f4f3ad75997c495de1ec91b6d714d1653412dd", "html_url": "https://github.com/rust-lang/rust/commit/c7f4f3ad75997c495de1ec91b6d714d1653412dd"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "b86928534cb244f79ccc09202963576208bf17fc", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=b4d9835f6c1ea0af804d11f79e329f76efd05df6", "patch": "@@ -96,9 +96,14 @@ pub unsafe extern fn __rust_start_panic(_payload: usize) -> u32 {\n // runtime at all.\n pub mod personalities {\n     #[no_mangle]\n-    #[cfg(not(all(target_os = \"windows\",\n-                  target_env = \"gnu\",\n-                  target_arch = \"x86_64\")))]\n+    #[cfg(not(any(\n+        target_arch = \"wasm32\",\n+        all(\n+            target_os = \"windows\",\n+            target_env = \"gnu\",\n+            target_arch = \"x86_64\",\n+        ),\n+    )))]\n     pub extern fn rust_eh_personality() {}\n \n     // On x86_64-pc-windows-gnu we use our own personality function that needs"}, {"sha": "e18c8b9dec463d770dd1b19f0db6595730ab3fd9", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=b4d9835f6c1ea0af804d11f79e329f76efd05df6", "patch": "@@ -89,6 +89,7 @@ impl LinkerInfo {\n                 Box::new(WasmLd {\n                     cmd,\n                     sess,\n+                    info: self\n                 }) as Box<dyn Linker>\n             }\n         }\n@@ -926,6 +927,7 @@ fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n pub struct WasmLd<'a> {\n     cmd: Command,\n     sess: &'a Session,\n+    info: &'a LinkerInfo,\n }\n \n impl<'a> Linker for WasmLd<'a> {\n@@ -1021,7 +1023,10 @@ impl<'a> Linker for WasmLd<'a> {\n     fn build_dylib(&mut self, _out_filename: &Path) {\n     }\n \n-    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType) {\n+    fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n+        for sym in self.info.exports[&crate_type].iter() {\n+            self.cmd.arg(\"--export\").arg(&sym);\n+        }\n     }\n \n     fn subsystem(&mut self, _subsystem: &str) {"}, {"sha": "07379b76244130b9d08f8167d96823c2f585475b", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=b4d9835f6c1ea0af804d11f79e329f76efd05df6", "patch": "@@ -0,0 +1,16 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(TARGET),wasm32-unknown-unknown)\n+all:\n+\t$(RUSTC) bar.rs --target wasm32-unknown-unknown\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) bar.rs --target wasm32-unknown-unknown -O\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O\n+\t$(NODE) verify.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -C lto\n+\t$(NODE) verify.js $(TMPDIR)/foo.wasm\n+else\n+all:\n+endif\n+"}, {"sha": "5d4ce06a978fc20effdfab9132b11cc6fad2ef11", "filename": "src/test/run-make/wasm-export-all-symbols/bar.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fbar.rs?ref=b4d9835f6c1ea0af804d11f79e329f76efd05df6", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+#[no_mangle]\n+pub extern fn foo() {}"}, {"sha": "fc1ed31771a0461f3d71c7d4856637e7dc21ab16", "filename": "src/test/run-make/wasm-export-all-symbols/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Ffoo.rs?ref=b4d9835f6c1ea0af804d11f79e329f76efd05df6", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"cdylib\"]\n+\n+extern crate bar;"}, {"sha": "5a505ea30c87d3b2732b23b27762fa52e5bdf1b8", "filename": "src/test/run-make/wasm-export-all-symbols/verify.js", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js", "raw_url": "https://github.com/rust-lang/rust/raw/b4d9835f6c1ea0af804d11f79e329f76efd05df6/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js?ref=b4d9835f6c1ea0af804d11f79e329f76efd05df6", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const fs = require('fs');\n+const process = require('process');\n+const assert = require('assert');\n+const buffer = fs.readFileSync(process.argv[2]);\n+\n+let m = new WebAssembly.Module(buffer);\n+let list = WebAssembly.Module.exports(m);\n+console.log('exports', list);\n+\n+const my_exports = {};\n+let nexports = 0;\n+for (const entry of list) {\n+  if (entry.kind !== 'function')\n+    continue;\n+  my_exports[entry.name] = true;\n+  nexports += 1;\n+}\n+\n+if (nexports != 1)\n+  throw new Error(\"should only have one function export\");\n+if (my_exports.foo === undefined)\n+  throw new Error(\"`foo` wasn't defined\");"}]}