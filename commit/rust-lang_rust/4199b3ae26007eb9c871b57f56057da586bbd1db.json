{"sha": "4199b3ae26007eb9c871b57f56057da586bbd1db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTliM2FlMjYwMDdlYjljODcxYjU3ZjU2MDU3ZGE1ODZiYmQxZGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-18T21:43:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T14:05:00Z"}, "message": "Revert \"modify leak-check to track only outgoing edges from placeholders\"\n\nThis reverts commit 2e01db4b396a1e161f7a73933fff34bc9421dba0.", "tree": {"sha": "29efa7435788242f2238bcec7ab534b0831697f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29efa7435788242f2238bcec7ab534b0831697f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4199b3ae26007eb9c871b57f56057da586bbd1db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4199b3ae26007eb9c871b57f56057da586bbd1db", "html_url": "https://github.com/rust-lang/rust/commit/4199b3ae26007eb9c871b57f56057da586bbd1db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4199b3ae26007eb9c871b57f56057da586bbd1db/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "html_url": "https://github.com/rust-lang/rust/commit/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948"}], "stats": {"total": 420, "additions": 201, "deletions": 219}, "files": [{"sha": "91c39a0e78ffb732ef8340a2cc8b4512b6983013", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -42,23 +42,10 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n                 _ => bug!(\"leak_check: expected placeholder found {:?}\", placeholder_region,),\n             };\n \n-            // Find all regions that this placeholder `!p` must outlive -- i.e.,\n-            // any region `r` where `!p: r` must hold. It is an error if any\n-            // such region `r` is another placeholder or in a universe that\n-            // can't see the placeholder. (This is actually incorrect, because\n-            // we don't take into account the possibility of bounds in\n-            // environment that tell us that the placeholder may be related to\n-            // other regions).\n-            //\n-            // Note that we *don't* look for cases like `r: !p`. This is\n-            // because:\n-            //\n-            // * If `r` is some other placeholder `!p1`, then we'll find the\n-            //   error when we search the regions that `!p1` must outlive.\n-            // * If `r` is a variable in some outer universe, then it can\n-            //   potentially be assigned to `'static`, so this relation could\n-            //   hold.\n-            let mut taint_set = TaintSet::new(TaintDirections::outgoing(), placeholder_region);\n+            // Find all regions that are related to this placeholder\n+            // in some way. This means any region that either outlives\n+            // or is outlived by a placeholder.\n+            let mut taint_set = TaintSet::new(TaintDirections::both(), placeholder_region);\n             taint_set.fixed_point(\n                 tcx,\n                 self.undo_log.region_constraints(),"}, {"sha": "a4e43da91baf8d805275a5913d807202a9014c40", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -28,14 +28,14 @@ fn expect_free_supply_bound() {\n     // Here, we are given a function whose region is bound at closure level,\n     // but we expect one bound in the argument. Error results.\n     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-    //~^ ERROR mismatched types\n+    //~^ ERROR type mismatch\n }\n \n fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, we are given a `fn(&u32)` but we expect a `fn(&'x\n     // u32)`. In principle, this could be ok, but we demand equality.\n     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR mismatched types\n+    //~^ ERROR type mismatch\n }\n \n fn expect_bound_supply_free_from_closure() {\n@@ -44,7 +44,7 @@ fn expect_bound_supply_free_from_closure() {\n     // the argument level.\n     type Foo<'a> = fn(&'a u32);\n     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-    //~^ ERROR mismatched types\n+    //~^ ERROR type mismatch\n     });\n }\n "}, {"sha": "fae41c4114abc49621895e30b76b73d935008ea4", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -36,33 +36,46 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the b\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:30:52\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n+LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+   |    ------------------------------------------ required by a bound in this\n+LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n+...\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |                                                    ^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:37:53\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    ------------------------------------------- required by a bound in this\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n+...\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |                                                     ^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n-              found fn pointer `fn(&'x u32)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:46:53\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    ------------------------------------------- required by a bound in this\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n+...\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |                                                     ^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n-              found fn pointer `fn(&u32)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "45f53d4fe99db100ec221ad503ca80717c510b44", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,14 +1,17 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n+LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n+   | |__________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n+              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "c3e4f6d2ed0c1c91e348822f324bcacb0e28f386", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }"}, {"sha": "4d7b86027f56463d68b380b4bd73d51b354d1f93", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,14 +1,17 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n+LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n+   | |______________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n+              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7f0a4197dd7fe412d5602ba145b5a0c8970e48bc", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,14 +1,17 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n+LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n+   | |______________________________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n+              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "c12e543a44e79e29a8cd21449e220cbfd0a96864", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,14 +1,17 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:39:26\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+...\n+LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n+LL | |                                             for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n+   | |______________________________________________________________________________________________- in this macro invocation\n+   |\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n+              found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:96:1\n+  --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "b31f198bd97bf8cee87182f5f2efae6780ce8870", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -42,6 +42,10 @@ macro_rules! check {\n             //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n             //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR\n             //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR\n+            //[bound_a_b_vs_bound_a]~^^^^^^ ERROR mismatched types\n+            //[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR\n+            //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^ ERROR\n+            //[bound_co_a_b_vs_bound_co_a]~^^^^^^^^^ ERROR\n         }\n     }\n }\n@@ -99,8 +103,4 @@ fn main() {\n //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR fatal error triggered by #[rustc_error]\n //[bound_co_a_vs_bound_co_b]~^^^^ ERROR fatal error triggered by #[rustc_error]\n //[free_x_vs_free_x]~^^^^^ ERROR fatal error triggered by #[rustc_error]\n-//[bound_a_b_vs_bound_a]~^^^^^^ ERROR fatal error triggered by #[rustc_error]\n-//[bound_co_a_b_vs_bound_co_a]~^^^^^^^ ERROR fatal error triggered by #[rustc_error]\n-//[bound_co_a_co_b_ret_contra_a]~^^^^^^^^ ERROR fatal error triggered by #[rustc_error]\n-//[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR fatal error triggered by #[rustc_error]\n }"}, {"sha": "328e98657effb179aa1f90cc61ec76274c533b00", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-exists-forall-fn.rs:17:34\n    |\n LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |                                  ^^^^^ one type is more general than the other\n+   |            -------------------   ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n               found fn pointer `fn(&u32)`"}, {"sha": "4c1d4d28a09b01eace9d5efbd5a2596ea8632f14", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -32,5 +32,5 @@ fn main() {\n     // NB. *However*, the reinstated leak-check gives an error here.\n \n     foo::<()>();\n-    //~^ ERROR implementation of `Trait` is not general enough\n+    //~^ ERROR not satisfied\n }"}, {"sha": "7a7285d3d76e051dbc23c8ee082448a4be4fe33e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,14 +1,18 @@\n-error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n    |\n-LL | trait Trait<T> {}\n-   | ----------------- trait `Trait` defined here\n+LL | fn foo<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: Trait<for<'b> fn(&'b u32)>,\n+   |        -------------------------- required by this bound in `foo`\n ...\n LL |     foo::<()>();\n-   |     ^^^^^^^^^ implementation of `Trait` is not general enough\n+   |           ^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n    |\n-   = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n-   = note: ...but `()` actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n+   = help: the following implementations were found:\n+             <() as Trait<fn(&'a u32)>>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "87a13889298dfc81f40b9d9cc3923b50942cabc0", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,12 +1,19 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n+error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n+  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n+LL | fn want_bar_for_any_ccx<B>(b: &B)\n+   |    -------------------- required by a bound in this\n+LL |     where B : for<'ccx> Bar<'ccx>\n+   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n+...\n LL |     want_bar_for_any_ccx(b);\n-   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n-   = note: expected type `for<'ccx> Bar<'ccx>`\n-              found type `Bar<'static>`\n+help: consider further restricting this bound\n+   |\n+LL |     where B : Qux + for<'ccx> Bar<'ccx>\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4fa404624775b731bba309d7034687fefba4fd1d", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,16 +1,16 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n+  --> $DIR/hrtb-just-for-static.rs:24:17\n    |\n-LL | / trait Foo<X> {\n-LL | |     fn foo(&self, x: X) { }\n-LL | | }\n-   | |_- trait `Foo` defined here\n+LL | fn want_hrtb<T>()\n+   |    --------- required by a bound in this\n+LL |     where T : for<'a> Foo<&'a isize>\n+   |               ---------------------- required by this bound in `want_hrtb`\n ...\n-LL |       want_hrtb::<StaticInt>()\n-   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     want_hrtb::<StaticInt>()\n+   |                 ^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n    |\n-   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n+   = help: the following implementations were found:\n+             <StaticInt as Foo<&'static isize>>\n \n error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:30:17"}, {"sha": "2c8590554580719201b873c12e6a9afdbeb89d39", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -38,5 +38,5 @@ fn assert_foo<T: Foo>() {}\n \n fn main() {\n     assert_foo::<fn(&i32)>();\n-    //~^ ERROR implementation of `Foo` is not general enough\n+    //~^ ERROR the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n }"}, {"sha": "0a7382c4dd818305ed5794882f83123b7d8ccbe6", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,16 +1,15 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:40:5\n+error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n+  --> $DIR/issue-46989.rs:40:18\n    |\n-LL | / trait Foo {\n-LL | |\n-LL | | }\n-   | |_- trait `Foo` defined here\n+LL | fn assert_foo<T: Foo>() {}\n+   |                  --- required by this bound in `assert_foo`\n ...\n-LL |       assert_foo::<fn(&i32)>();\n-   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+LL |     assert_foo::<fn(&i32)>();\n+   |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n    |\n-   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r i32)`\n-   = note: ...but `Foo` is actually implemented for the type `fn(&'0 i32)`, for some specific lifetime `'0`\n+   = help: the following implementations were found:\n+             <fn(A) as Foo>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1fa417fe98ab77b944604f5123b2e9e64049371a", "filename": "src/test/ui/issues/issue-57362-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -17,7 +17,7 @@ impl<T> Trait for fn(&T) {\n \n fn f() {\n     let a: fn(_) = |_: &u8| {};\n-    a.f(); //~ ERROR implementation of `Trait` is not general enough\n+    a.f(); //~ ERROR no method named `f`\n }\n \n fn main() {}"}, {"sha": "5c611cd43d3ccdf77c39e938c62ecceb778492e8", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,16 +1,17 @@\n-error: implementation of `Trait` is not general enough\n+error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current scope\n   --> $DIR/issue-57362-1.rs:20:7\n    |\n-LL | / trait Trait {\n-LL | |     fn f(self);\n-LL | | }\n-   | |_- trait `Trait` defined here\n-...\n-LL |       a.f();\n-   |         ^ implementation of `Trait` is not general enough\n+LL |     a.f();\n+   |       ^ method not found in `fn(&u8)`\n    |\n-   = note: `Trait` would have to be implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`...\n-   = note: ...but `Trait` is actually implemented for the type `for<'r> fn(&'r u8)`\n+   = note: `a` is a function, perhaps you wish to call it\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `Trait` defines an item `f`, perhaps you need to implement it\n+  --> $DIR/issue-57362-1.rs:8:1\n+   |\n+LL | trait Trait {\n+   | ^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "870d7f28ba95302e5d5deb9e248873935a1ad089", "filename": "src/test/ui/issues/issue-57362-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -19,9 +19,7 @@ impl<'a> X for fn(&'a ()) {\n }\n \n fn g() {\n-    let x = <fn (&())>::make_g();\n-    //~^ ERROR implementation of `X` is not general enough\n-    //~| ERROR implementation of `X` is not general enough\n+    let x = <fn (&())>::make_g(); //~ ERROR no function or associated item\n }\n \n fn main() {}"}, {"sha": "2edc00974645530ad741960f43c8b1d3f3a5e6ec", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,33 +1,16 @@\n-error: implementation of `X` is not general enough\n-  --> $DIR/issue-57362-2.rs:22:13\n+error[E0599]: no function or associated item named `make_g` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n+  --> $DIR/issue-57362-2.rs:22:25\n    |\n-LL | / trait X {\n-LL | |     type G;\n-LL | |     fn make_g() -> Self::G;\n-LL | | }\n-   | |_- trait `X` defined here\n-...\n-LL |       let x = <fn (&())>::make_g();\n-   |               ^^^^^^^^^^^^^^^^^^ implementation of `X` is not general enough\n+LL |     let x = <fn (&())>::make_g();\n+   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n    |\n-   = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`\n-   = note: ...but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n-\n-error: implementation of `X` is not general enough\n-  --> $DIR/issue-57362-2.rs:22:13\n-   |\n-LL | / trait X {\n-LL | |     type G;\n-LL | |     fn make_g() -> Self::G;\n-   | |     ----------------------- due to a where-clause on `X::make_g`...\n-LL | | }\n-   | |_- trait `X` defined here\n-...\n-LL |       let x = <fn (&())>::make_g();\n-   |               ^^^^^^^^^^^^^^^^^^ doesn't satisfy where-clause\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+note: `X` defines an item `make_g`, perhaps you need to implement it\n+  --> $DIR/issue-57362-2.rs:8:1\n    |\n-   = note: ...`X` would have to be implemented for the type `for<'r> fn(&'r ())`\n-   = note: ...but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n+LL | trait X {\n+   | ^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "bc7b787cd65ac3bff77e4b354bd08839731e2f3b", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -3,21 +3,21 @@\n // error. However, now that we handle subtyping correctly, we no\n // longer get an error, because we recognize these two types as\n // equivalent!\n+//\n+// Whoops -- now that we reinstituted the leak-check, we get an error\n+// again.\n \n fn foo(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n-    // The two types above are actually equivalent. With the older\n-    // leak check, though, we didn't consider them as equivalent, and\n-    // hence we gave errors. But now we've fixed that.\n     let z = match 22 {\n         0 => x,\n-        _ => y,\n+        _ => y, //~ ERROR `match` arms have incompatible types\n     };\n }\n \n-fn foo_cast(\n+fn bar(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n@@ -28,30 +28,5 @@ fn foo_cast(\n     };\n }\n \n-fn bar(\n-    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n-    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n-) {\n-    // The two types above are not equivalent. With the older LUB/GLB\n-    // algorithm, this may have worked (I don't remember), but now it\n-    // doesn't because we require equality.\n-    let z = match 22 {\n-        0 => x,\n-        _ => y, //~ ERROR `match` arms have incompatible types\n-    };\n-}\n-\n-fn bar_cast(\n-    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n-    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n-) {\n-    // But we can *upcast* explicitly the type of `x` and figure\n-    // things out:\n-    let z = match 22 {\n-        0 => x as for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n-        _ => y,\n-    };\n-}\n-\n fn main() {\n }"}, {"sha": "6d5d51174699fa17569e33b837610acf441487f0", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,17 +1,17 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr.rs:40:14\n+  --> $DIR/old-lub-glb-hr.rs:16:14\n    |\n LL |       let z = match 22 {\n    |  _____________-\n LL | |         0 => x,\n-   | |              - this is found to be of type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+   | |              - this is found to be of type `for<'r, 's> fn(&'r u8, &'s u8)`\n LL | |         _ => y,\n-   | |              ^ expected bound lifetime parameter 'a, found concrete lifetime\n+   | |              ^ expected bound lifetime parameter, found concrete lifetime\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note:    expected type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n-           found fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+   = note:    expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n+           found fn pointer `for<'a> fn(&'a u8, &'a u8)`\n \n error: aborting due to previous error\n "}, {"sha": "27704b3e0a8c7421414764b1fb62e28d74f11b33", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -11,10 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n LL |     want_G(baz);\n-   |            ^^^ one type is more general than the other\n+   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n-              found fn pointer `for<'r> fn(&'r S) -> &'r S`\n+                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "31174fd4cf16373b5201e1d91f785350d42bff34", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -18,5 +18,5 @@ fn foo<T>(x: &T)\n {}\n \n fn main() {\n-    foo(&X); //~ ERROR implementation of `Bar` is not general enough\n+    foo(&X); //~ ERROR trait bound\n }"}, {"sha": "9976243b200dc907562306b21bee2ef8995e799e", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4199b3ae26007eb9c871b57f56057da586bbd1db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=4199b3ae26007eb9c871b57f56057da586bbd1db", "patch": "@@ -1,16 +1,17 @@\n-error: implementation of `Bar` is not general enough\n+error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL | / trait Bar {\n-LL | |     fn bar(&self);\n-LL | | }\n-   | |_- trait `Bar` defined here\n+LL | fn foo<T>(x: &T)\n+   |    --- required by a bound in this\n+LL |     where for<'a> &'a T: Bar\n+   |                          --- required by this bound in `foo`\n ...\n-LL |       foo(&X);\n-   |       ^^^ implementation of `Bar` is not general enough\n+LL |     foo(&X);\n+   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n    |\n-   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n-   = note: ...but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n+   = help: the following implementations were found:\n+             <&'static u32 as Bar>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}]}