{"sha": "296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5Njk1NWE2ZTFhYzdiNWNiNTJmM2M4NGQ5M2NkNTdiMTlhN2E3MTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-23T16:27:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-23T17:09:21Z"}, "message": "expansion: Add some comments", "tree": {"sha": "94f2e925074f89b3eab57c448d96c7e030de2e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f2e925074f89b3eab57c448d96c7e030de2e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "html_url": "https://github.com/rust-lang/rust/commit/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399da7bc351714a0bc829bbbf2ab1f0b3e4f60f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/399da7bc351714a0bc829bbbf2ab1f0b3e4f60f8", "html_url": "https://github.com/rust-lang/rust/commit/399da7bc351714a0bc829bbbf2ab1f0b3e4f60f8"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "eb26bdc74b5e328d7602e708e43f514b4c570cc8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "patch": "@@ -301,11 +301,19 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let orig_expansion_data = self.cx.current_expansion.clone();\n         self.cx.current_expansion.depth = 0;\n \n+        // Collect all macro invocations and replace them with placeholders.\n         let (fragment_with_placeholders, mut invocations)\n             = self.collect_invocations(input_fragment, &[]);\n+\n+        // Optimization: if we resolve all imports now,\n+        // we'll be able to immediately resolve most of imported macros.\n         self.resolve_imports();\n-        invocations.reverse();\n \n+        // Resolve paths in all invocations and produce ouput expanded fragments for them, but\n+        // do not insert them into our input AST fragment yet, only store in `expanded_fragments`.\n+        // The output fragments also go through expansion recursively until no invocations are left.\n+        // Unresolved macros produce dummy outputs as a recovery measure.\n+        invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n         let mut derives = HashMap::new();\n         let mut undetermined_invocations = Vec::new();\n@@ -411,6 +419,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         self.cx.current_expansion = orig_expansion_data;\n \n+        // Finally incorporate all the expanded macros into the input AST fragment.\n         let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (mark, expanded_fragment) in expanded_fragments.into_iter().rev() {\n@@ -419,7 +428,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                          expanded_fragment, derives);\n             }\n         }\n-\n         fragment_with_placeholders.fold_with(&mut placeholder_expander)\n     }\n \n@@ -431,6 +439,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         }\n     }\n \n+    /// Collect all macro invocations reachable at this time in this AST fragment, and replace\n+    /// them with \"placeholders\" - dummy macro invocations with specially crafted `NodeId`s.\n+    /// Then call into resolver that builds a skeleton (\"reduced graph\") of the fragment and\n+    /// prepares data for resolving paths of macro invocations.\n     fn collect_invocations(&mut self, fragment: AstFragment, derives: &[Mark])\n                            -> (AstFragment, Vec<Invocation>) {\n         let (fragment_with_placeholders, invocations) = {"}]}