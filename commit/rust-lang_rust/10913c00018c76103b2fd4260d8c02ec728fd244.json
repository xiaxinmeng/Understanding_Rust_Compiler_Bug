{"sha": "10913c00018c76103b2fd4260d8c02ec728fd244", "node_id": "C_kwDOAAsO6NoAKDEwOTEzYzAwMDE4Yzc2MTAzYjJmZDQyNjBkOGMwMmVjNzI4ZmQyNDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-03T18:59:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-03T18:59:32Z"}, "message": "Auto merge of #87835 - xFrednet:rfc-2383-expect-attribute-with-ids, r=wesleywiser\n\nImplementation of the `expect` attribute (RFC 2383)\n\nThis is an implementation of the `expect` attribute as described in [RFC-2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html). The attribute allows the suppression of lint message by expecting them. Unfulfilled lint expectations (meaning no expected lint was caught) will emit the `unfulfilled_lint_expectations` lint at the `expect` attribute.\n\n### Example\n#### input\n```rs\n// required feature flag\n#![feature(lint_reasons)]\n\n#[expect(unused_mut)] // Will warn about an unfulfilled expectation\n#[expect(unused_variables)] // Will be fulfilled by x\nfn main() {\n    let x = 0;\n}\n```\n\n#### output\n\n```txt\nwarning: this lint expectation is unfulfilled\n  --> $DIR/trigger_lint.rs:3:1\n   |\nLL | #[expect(unused_mut)] // Will warn about an unfulfilled expectation\n   |          ^^^^^^^^^^\n   |\n   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n```\n\n### Implementation\n\nThis implementation introduces `Expect` as a new lint level for diagnostics, which have been expected. All lint expectations marked via the `expect` attribute are collected in the [`LintLevelsBuilder`] and assigned an ID that is stored in the new lint level. The `LintLevelsBuilder` stores all found expectations and the data needed to emit the `unfulfilled_lint_expectations` in the [`LintLevelsMap`] which is the result of the [`lint_levels()`] query.\n\nThe [`rustc_errors::HandlerInner`] is the central error handler in rustc and handles the emission of all diagnostics. Lint message with the level `Expect` are suppressed during this emission, while the expectation ID is stored in a set which marks them as fulfilled. The last step is then so simply check if all expectations collected by the [`LintLevelsBuilder`] in the [`LintLevelsMap`] have been marked as fulfilled in the [`rustc_errors::HandlerInner`]. Otherwise, a new lint message will be emitted.\n\nThe implementation of the `LintExpectationId` required some special handling to make it stable between sessions. Lints can be emitted during [`EarlyLintPass`]es. At this stage, it's not possible to create a stable identifier. The level instead stores an unstable identifier, which is later converted to a stable `LintExpectationId`.\n\n### Followup TO-DOs\nAll open TO-DOs have been marked with `FIXME` comments in the code. This is the combined list of them:\n\n* [ ] The current implementation doesn't cover cases where the `unfulfilled_lint_expectations` lint is actually expected by another `expect` attribute.\n   * This should be easily possible, but I wanted to get some feedback before putting more work into this.\n   * This could also be done in a new PR to not add to much more code to this one\n* [ ] Update unstable documentation to reflect this change.\n* [ ] Update unstable expectation ids in [`HandlerInner::stashed_diagnostics`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.HandlerInner.html#structfield.stashed_diagnostics)\n\n### Open questions\nI also have a few open questions where I would like to get feedback on:\n1. The RFC discussion included a suggestion to change the `expect` attribute to something else. (Initiated by `@Ixrec` [here](https://github.com/rust-lang/rfcs/pull/2383#issuecomment-378424091), suggestion from `@scottmcm` to use `#[should_lint(...)]` [here](https://github.com/rust-lang/rfcs/pull/2383#issuecomment-378648877)). No real conclusion was drawn on that point from my understanding. Is this still open for discussion, or was this discarded with the merge of the RFC?\n2. How should the expect attribute deal with the new `force-warn` lint level?\n\n---\n\nThis approach was inspired by a discussion with `@LeSeulArtichaut.`\n\nRFC tracking issue: #54503\n\nMentoring/Implementation issue: #85549\n\n[`LintLevelsBuilder`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/levels/struct.LintLevelsBuilder.html\n[`LintLevelsMap`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/struct.LintLevelMap.html\n[`lint_levels()`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.lint_levels\n[`rustc_errors::HandlerInner`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.HandlerInner.html\n[`EarlyLintPass`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html", "tree": {"sha": "4b971e6a383b3449a6806a8d414211cbec2b2109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b971e6a383b3449a6806a8d414211cbec2b2109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10913c00018c76103b2fd4260d8c02ec728fd244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10913c00018c76103b2fd4260d8c02ec728fd244", "html_url": "https://github.com/rust-lang/rust/commit/10913c00018c76103b2fd4260d8c02ec728fd244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10913c00018c76103b2fd4260d8c02ec728fd244/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cbc7630b2d6b7141e2588f91380c1a58cf0016", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cbc7630b2d6b7141e2588f91380c1a58cf0016", "html_url": "https://github.com/rust-lang/rust/commit/32cbc7630b2d6b7141e2588f91380c1a58cf0016"}, {"sha": "5275d02433c95c577febf76271c35f7d5f86ed4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5275d02433c95c577febf76271c35f7d5f86ed4a", "html_url": "https://github.com/rust-lang/rust/commit/5275d02433c95c577febf76271c35f7d5f86ed4a"}], "stats": {"total": 1066, "additions": 1040, "deletions": 26}, "files": [{"sha": "8ca6f26e326d10b06ca6a6cb19379860fa91aa53", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -3882,6 +3882,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_hir\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\","}, {"sha": "c380455012d0d430929aa6ab2671c58498d198c3", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -75,6 +75,7 @@ fn annotation_type_for_level(level: Level) -> AnnotationType {\n         // FIXME(#59346): Not sure how to map this level\n         Level::FailureNote => AnnotationType::Error,\n         Level::Allow => panic!(\"Should not call with Allow\"),\n+        Level::Expect(_) => panic!(\"Should not call with Expect\"),\n     }\n }\n "}, {"sha": "a59d91ea789001db3feabf73598a1cd4a234770f", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -133,7 +133,7 @@ impl Diagnostic {\n             | Level::Error { .. }\n             | Level::FailureNote => true,\n \n-            Level::Warning | Level::Note | Level::Help | Level::Allow => false,\n+            Level::Warning | Level::Note | Level::Help | Level::Allow | Level::Expect(_) => false,\n         }\n     }\n "}, {"sha": "217d3ec2c247ae6edbd6dcaf26677eb6d991bde5", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 90, "deletions": 3, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -20,11 +20,12 @@ extern crate tracing;\n \n pub use emitter::ColorConfig;\n \n+use rustc_lint_defs::LintExpectationId;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};\n use registry::Registry;\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n@@ -450,6 +451,22 @@ struct HandlerInner {\n     deduplicated_warn_count: usize,\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n+\n+    /// Expected [`Diagnostic`]s store a [`LintExpectationId`] as part of\n+    /// the lint level. [`LintExpectationId`]s created early during the compilation\n+    /// (before `HirId`s have been defined) are not stable and can therefore not be\n+    /// stored on disk. This buffer stores these diagnostics until the ID has been\n+    /// replaced by a stable [`LintExpectationId`]. The [`Diagnostic`]s are the\n+    /// submitted for storage and added to the list of fulfilled expectations.\n+    unstable_expect_diagnostics: Vec<Diagnostic>,\n+\n+    /// expected diagnostic will have the level `Expect` which additionally\n+    /// carries the [`LintExpectationId`] of the expectation that can be\n+    /// marked as fulfilled. This is a collection of all [`LintExpectationId`]s\n+    /// that have been marked as fulfilled this way.\n+    ///\n+    /// [RFC-2383]: https://rust-lang.github.io/rfcs/2383-lint-reasons.html\n+    fulfilled_expectations: FxHashSet<LintExpectationId>,\n }\n \n /// A key denoting where from a diagnostic was stashed.\n@@ -570,6 +587,8 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n+                unstable_expect_diagnostics: Vec::new(),\n+                fulfilled_expectations: Default::default(),\n             }),\n         }\n     }\n@@ -677,6 +696,11 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n+    /// Construct a builder at the `Expect` level with the `msg`.\n+    pub fn struct_expect(&self, msg: &str, id: LintExpectationId) -> DiagnosticBuilder<'_, ()> {\n+        DiagnosticBuilder::new(self, Level::Expect(id), msg)\n+    }\n+\n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n     pub fn struct_span_err(\n         &self,\n@@ -906,6 +930,48 @@ impl Handler {\n     pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n         self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n     }\n+\n+    pub fn update_unstable_expectation_id(\n+        &self,\n+        unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n+    ) {\n+        let diags = std::mem::take(&mut self.inner.borrow_mut().unstable_expect_diagnostics);\n+        if diags.is_empty() {\n+            return;\n+        }\n+\n+        let mut inner = self.inner.borrow_mut();\n+        for mut diag in diags.into_iter() {\n+            let mut unstable_id = diag\n+                .level\n+                .get_expectation_id()\n+                .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n+\n+            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n+            // The lint index inside the attribute is manually transferred here.\n+            let lint_index = unstable_id.get_lint_index();\n+            unstable_id.set_lint_index(None);\n+            let mut stable_id = *unstable_to_stable\n+                .get(&unstable_id)\n+                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n+\n+            stable_id.set_lint_index(lint_index);\n+            diag.level = Level::Expect(stable_id);\n+            inner.fulfilled_expectations.insert(stable_id);\n+\n+            (*TRACK_DIAGNOSTICS)(&diag);\n+        }\n+    }\n+\n+    /// This methods steals all [`LintExpectationId`]s that are stored inside\n+    /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n+    pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n+        assert!(\n+            self.inner.borrow().unstable_expect_diagnostics.is_empty(),\n+            \"`HandlerInner::unstable_expect_diagnostics` should be empty at this point\",\n+        );\n+        std::mem::take(&mut self.inner.borrow_mut().fulfilled_expectations)\n+    }\n }\n \n impl HandlerInner {\n@@ -951,9 +1017,21 @@ impl HandlerInner {\n             return;\n         }\n \n+        // The `LintExpectationId` can be stable or unstable depending on when it was created.\n+        // Diagnostics created before the definition of `HirId`s are unstable and can not yet\n+        // be stored. Instead, they are buffered until the `LintExpectationId` is replaced by\n+        // a stable one by the `LintLevelsBuilder`.\n+        if let Level::Expect(LintExpectationId::Unstable { .. }) = diagnostic.level {\n+            self.unstable_expect_diagnostics.push(diagnostic.clone());\n+            return;\n+        }\n+\n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n-        if diagnostic.level == Allow {\n+        if let Level::Expect(expectation_id) = diagnostic.level {\n+            self.fulfilled_expectations.insert(expectation_id);\n+            return;\n+        } else if diagnostic.level == Allow {\n             return;\n         }\n \n@@ -1250,6 +1328,7 @@ pub enum Level {\n     Help,\n     FailureNote,\n     Allow,\n+    Expect(LintExpectationId),\n }\n \n impl fmt::Display for Level {\n@@ -1275,7 +1354,7 @@ impl Level {\n                 spec.set_fg(Some(Color::Cyan)).set_intense(true);\n             }\n             FailureNote => {}\n-            Allow => unreachable!(),\n+            Allow | Expect(_) => unreachable!(),\n         }\n         spec\n     }\n@@ -1289,12 +1368,20 @@ impl Level {\n             Help => \"help\",\n             FailureNote => \"failure-note\",\n             Allow => panic!(\"Shouldn't call on allowed error\"),\n+            Expect(_) => panic!(\"Shouldn't call on expected error\"),\n         }\n     }\n \n     pub fn is_failure_note(&self) -> bool {\n         matches!(*self, FailureNote)\n     }\n+\n+    pub fn get_expectation_id(&self) -> Option<LintExpectationId> {\n+        match self {\n+            Level::Expect(id) => Some(*id),\n+            _ => None,\n+        }\n+    }\n }\n \n // FIXME(eddyb) this doesn't belong here AFAICT, should be moved to callsite."}, {"sha": "4b9cf784495fec49cb068149b15aa3c1843bf1d3", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -282,6 +282,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(\n         allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n     ),\n+    gated!(\n+        expect, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk,\n+        lint_reasons, experimental!(expect)\n+    ),\n     ungated!(\n         forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n     ),"}, {"sha": "c34e9f1ba78318fe5a93ea6d2a433ac5f80d4c07", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -109,6 +109,7 @@ struct LintGroup {\n     depr: Option<LintAlias>,\n }\n \n+#[derive(Debug)]\n pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n@@ -377,6 +378,9 @@ impl LintStore {\n                     Level::ForceWarn => \"--force-warn\",\n                     Level::Deny => \"-D\",\n                     Level::Forbid => \"-F\",\n+                    Level::Expect(_) => {\n+                        unreachable!(\"lints with the level of `expect` should not run this code\");\n+                    }\n                 },\n                 lint_name\n             );"}, {"sha": "e9b7620bf1d7f50744eb66a3c026874629519887", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -59,7 +59,8 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_node = id == ast::CRATE_NODE_ID;\n-        let push = self.context.builder.push(attrs, is_crate_node);\n+        let push = self.context.builder.push(attrs, is_crate_node, None);\n+\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);"}, {"sha": "e6c9d0b0ab000790cbd7bab015df5e5e0febe80e", "filename": "compiler/rustc_lint/src/expect.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,49 @@\n+use crate::builtin;\n+use rustc_hir::HirId;\n+use rustc_middle::{lint::LintExpectation, ty::TyCtxt};\n+use rustc_session::lint::LintExpectationId;\n+use rustc_span::symbol::sym;\n+\n+pub fn check_expectations(tcx: TyCtxt<'_>) {\n+    if !tcx.sess.features_untracked().enabled(sym::lint_reasons) {\n+        return;\n+    }\n+\n+    let fulfilled_expectations = tcx.sess.diagnostic().steal_fulfilled_expectation_ids();\n+    let lint_expectations = &tcx.lint_levels(()).lint_expectations;\n+\n+    for (id, expectation) in lint_expectations {\n+        if !fulfilled_expectations.contains(id) {\n+            // This check will always be true, since `lint_expectations` only\n+            // holds stable ids\n+            if let LintExpectationId::Stable { hir_id, .. } = id {\n+                emit_unfulfilled_expectation_lint(tcx, *hir_id, expectation);\n+            } else {\n+                unreachable!(\"at this stage all `LintExpectationId`s are stable\");\n+            }\n+        }\n+    }\n+}\n+\n+fn emit_unfulfilled_expectation_lint(\n+    tcx: TyCtxt<'_>,\n+    hir_id: HirId,\n+    expectation: &LintExpectation,\n+) {\n+    // FIXME: The current implementation doesn't cover cases where the\n+    // `unfulfilled_lint_expectations` is actually expected by another lint\n+    // expectation. This can be added here by checking the lint level and\n+    // retrieving the `LintExpectationId` if it was expected.\n+    tcx.struct_span_lint_hir(\n+        builtin::UNFULFILLED_LINT_EXPECTATIONS,\n+        hir_id,\n+        expectation.emission_span,\n+        |diag| {\n+            let mut diag = diag.build(\"this lint expectation is unfulfilled\");\n+            if let Some(rationale) = expectation.reason {\n+                diag.note(&rationale.as_str());\n+            }\n+            diag.emit();\n+        },\n+    );\n+}"}, {"sha": "0ac636b878e0d0bb1ad90568f4b11ae8e4cac54b", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -503,4 +503,7 @@ pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(\n             });\n         },\n     );\n+\n+    // This check has to be run after all lints are done processing for this crate\n+    tcx.sess.time(\"check_lint_expectations\", || crate::expect::check_expectations(tcx));\n }"}, {"sha": "f46f74fa45fb044c7775d7e0ae37dfc490c9f104", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 79, "deletions": 14, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -7,17 +7,15 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::lint::LevelAndSource;\n-use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n-    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet, LintStackIndex,\n-    COMMAND_LINE,\n+    struct_lint_level, LevelAndSource, LintDiagnosticBuilder, LintExpectation, LintLevelMap,\n+    LintLevelSets, LintLevelSource, LintSet, LintStackIndex, COMMAND_LINE,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    Level, Lint, LintId,\n+    Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -34,16 +32,23 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n     builder.levels.id_to_set.reserve(krate.owners.len() + 1);\n \n-    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);\n+    let push =\n+        builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true, Some(hir::CRATE_HIR_ID));\n+\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     tcx.hir().walk_toplevel_module(&mut builder);\n     builder.levels.pop(push);\n \n+    builder.levels.update_unstable_expectation_ids();\n     builder.levels.build_map()\n }\n \n pub struct LintLevelsBuilder<'s> {\n     sess: &'s Session,\n+    lint_expectations: Vec<(LintExpectationId, LintExpectation)>,\n+    /// Each expectation has a stable and an unstable identifier. This map\n+    /// is used to map from unstable to stable [`LintExpectationId`]s.\n+    expectation_id_map: FxHashMap<LintExpectationId, LintExpectationId>,\n     sets: LintLevelSets,\n     id_to_set: FxHashMap<HirId, LintStackIndex>,\n     cur: LintStackIndex,\n@@ -66,6 +71,8 @@ impl<'s> LintLevelsBuilder<'s> {\n     ) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n+            lint_expectations: Default::default(),\n+            expectation_id_map: Default::default(),\n             sets: LintLevelSets::new(),\n             cur: COMMAND_LINE,\n             id_to_set: Default::default(),\n@@ -226,13 +233,24 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {\n+    pub(crate) fn push(\n+        &mut self,\n+        attrs: &[ast::Attribute],\n+        is_crate_node: bool,\n+        source_hir_id: Option<HirId>,\n+    ) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n-        for attr in attrs {\n-            let Some(level) = Level::from_symbol(attr.name_or_empty()) else {\n-                continue\n+        for (attr_index, attr) in attrs.iter().enumerate() {\n+            let level = match Level::from_attr(attr) {\n+                None => continue,\n+                Some(Level::Expect(unstable_id)) if let Some(hir_id) = source_hir_id => {\n+                    let stable_id = self.create_stable_id(unstable_id, hir_id, attr_index);\n+\n+                    Level::Expect(stable_id)\n+                }\n+                Some(lvl) => lvl,\n             };\n \n             let Some(mut metas) = attr.meta_item_list() else {\n@@ -285,9 +303,17 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n \n-            for li in metas {\n+            for (lint_index, li) in metas.iter_mut().enumerate() {\n+                let level = match level {\n+                    Level::Expect(mut id) => {\n+                        id.set_lint_index(Some(lint_index as u16));\n+                        Level::Expect(id)\n+                    }\n+                    level => level,\n+                };\n+\n                 let sp = li.span();\n-                let mut meta_item = match li {\n+                let meta_item = match li {\n                     ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,\n                     _ => {\n                         let mut err = bad_attr(sp);\n@@ -327,6 +353,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n+                        if let Level::Expect(expect_id) = level {\n+                            self.lint_expectations\n+                                .push((expect_id, LintExpectation::new(reason, sp)));\n+                        }\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n@@ -342,6 +372,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 for id in ids {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n+                                if let Level::Expect(expect_id) = level {\n+                                    self.lint_expectations\n+                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n@@ -378,6 +412,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 for id in ids {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n+                                if let Level::Expect(expect_id) = level {\n+                                    self.lint_expectations\n+                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                }\n                             }\n                             Err((None, _)) => {\n                                 // If Tool(Err(None, _)) is returned, then either the lint does not\n@@ -471,6 +509,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n+                        if let Level::Expect(expect_id) = level {\n+                            self.lint_expectations\n+                                .push((expect_id, LintExpectation::new(reason, sp)));\n+                        }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);\n                     }\n@@ -519,6 +561,20 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n+    fn create_stable_id(\n+        &mut self,\n+        unstable_id: LintExpectationId,\n+        hir_id: HirId,\n+        attr_index: usize,\n+    ) -> LintExpectationId {\n+        let stable_id =\n+            LintExpectationId::Stable { hir_id, attr_index: attr_index as u16, lint_index: None };\n+\n+        self.expectation_id_map.insert(unstable_id, stable_id);\n+\n+        stable_id\n+    }\n+\n     /// Checks if the lint is gated on a feature that is not enabled.\n     fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n         if let Some(feature) = lint_id.lint.feature_gate {\n@@ -562,8 +618,16 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.id_to_set.insert(id, self.cur);\n     }\n \n+    fn update_unstable_expectation_ids(&self) {\n+        self.sess.diagnostic().update_unstable_expectation_id(&self.expectation_id_map);\n+    }\n+\n     pub fn build_map(self) -> LintLevelMap {\n-        LintLevelMap { sets: self.sets, id_to_set: self.id_to_set }\n+        LintLevelMap {\n+            sets: self.sets,\n+            id_to_set: self.id_to_set,\n+            lint_expectations: self.lint_expectations,\n+        }\n     }\n }\n \n@@ -579,7 +643,8 @@ impl LintLevelMapBuilder<'_> {\n     {\n         let is_crate_hir = id == hir::CRATE_HIR_ID;\n         let attrs = self.tcx.hir().attrs(id);\n-        let push = self.levels.push(attrs, is_crate_hir);\n+        let push = self.levels.push(attrs, is_crate_hir, Some(id));\n+\n         if push.changed {\n             self.levels.register_id(id);\n         }"}, {"sha": "18f229564c2a3818a8739f4a7c8637544054fd31", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -51,6 +51,7 @@ pub mod builtin;\n mod context;\n mod early;\n mod enum_intrinsics_non_enums;\n+mod expect;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;"}, {"sha": "8acf7943de9cf06b399124c0678ab76423734e58", "filename": "compiler/rustc_lint_defs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint_defs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint_defs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2FCargo.toml?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -10,3 +10,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_target = { path = \"../rustc_target\" }\n+rustc_hir = { path = \"../rustc_hir\" }"}, {"sha": "272913f3f0e0269ee4d9725b781044cd1c1f9506", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -495,6 +495,39 @@ declare_lint! {\n     \"unrecognized lint attribute\"\n }\n \n+declare_lint! {\n+    /// The `unfulfilled_lint_expectations` lint detects lint trigger expectations\n+    /// that have not been fulfilled.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(lint_reasons)]\n+    ///\n+    /// #[expect(unused_variables)]\n+    /// let x = 10;\n+    /// println!(\"{}\", x);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// It was expected that the marked code would emit a lint. This expectation\n+    /// has not been fulfilled.\n+    ///\n+    /// The `expect` attribute can be removed if this is intended behavior otherwise\n+    /// it should be investigated why the expected lint is no longer issued.\n+    ///\n+    /// Part of RFC 2383. The progress is being tracked in [#54503]\n+    ///\n+    /// [#54503]: https://github.com/rust-lang/rust/issues/54503\n+    pub UNFULFILLED_LINT_EXPECTATIONS,\n+    Warn,\n+    \"unfulfilled lint expectation\",\n+    @feature_gate = rustc_span::sym::lint_reasons;\n+}\n+\n declare_lint! {\n     /// The `unused_variables` lint detects variables which are not used in\n     /// any way.\n@@ -3007,6 +3040,7 @@ declare_lint_pass! {\n         UNUSED_CRATE_DEPENDENCIES,\n         UNUSED_QUALIFICATIONS,\n         UNKNOWN_LINTS,\n+        UNFULFILLED_LINT_EXPECTATIONS,\n         UNUSED_VARIABLES,\n         UNUSED_ASSIGNMENTS,\n         DEAD_CODE,"}, {"sha": "c78428765bb8984e7e7964f0aa41d6f1046702e5", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 120, "deletions": 4, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -1,9 +1,13 @@\n+#![feature(min_specialization)]\n+\n #[macro_use]\n extern crate rustc_macros;\n \n pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n+use rustc_ast::{AttrId, Attribute};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_hir::HirId;\n use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n@@ -46,13 +50,119 @@ pub enum Applicability {\n     Unspecified,\n }\n \n+/// Each lint expectation has a `LintExpectationId` assigned by the `LintLevelsBuilder`.\n+/// Expected `Diagnostic`s get the lint level `Expect` which stores the `LintExpectationId`\n+/// to match it with the actual expectation later on.\n+///\n+/// The `LintExpectationId` has to be has stable between compilations, as diagnostic\n+/// instances might be loaded from cache. Lint messages can be emitted during an\n+/// `EarlyLintPass` operating on the AST and during a `LateLintPass` traversing the\n+/// HIR tree. The AST doesn't have enough information to create a stable id. The\n+/// `LintExpectationId` will instead store the [`AttrId`] defining the expectation.\n+/// These `LintExpectationId` will be updated to use the stable [`HirId`] once the\n+/// AST has been lowered. The transformation is done by the `LintLevelsBuilder`\n+///\n+/// Each lint inside the `expect` attribute is tracked individually, the `lint_index`\n+/// identifies the lint inside the attribute and ensures that the IDs are unique.\n+///\n+/// The index values have a type of `u16` to reduce the size of the `LintExpectationId`.\n+/// It's reasonable to assume that no user will define 2^16 attributes on one node or\n+/// have that amount of lints listed. `u16` values should therefore suffice.\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n+pub enum LintExpectationId {\n+    /// Used for lints emitted during the `EarlyLintPass`. This id is not\n+    /// has stable and should not be cached.\n+    Unstable { attr_id: AttrId, lint_index: Option<u16> },\n+    /// The [`HirId`] that the lint expectation is attached to. This id is\n+    /// stable and can be cached. The additional index ensures that nodes with\n+    /// several expectations can correctly match diagnostics to the individual\n+    /// expectation.\n+    Stable { hir_id: HirId, attr_index: u16, lint_index: Option<u16> },\n+}\n+\n+impl LintExpectationId {\n+    pub fn is_stable(&self) -> bool {\n+        match self {\n+            LintExpectationId::Unstable { .. } => false,\n+            LintExpectationId::Stable { .. } => true,\n+        }\n+    }\n+\n+    pub fn get_lint_index(&self) -> Option<u16> {\n+        let (LintExpectationId::Unstable { lint_index, .. }\n+        | LintExpectationId::Stable { lint_index, .. }) = self;\n+\n+        *lint_index\n+    }\n+\n+    pub fn set_lint_index(&mut self, new_lint_index: Option<u16>) {\n+        let (LintExpectationId::Unstable { ref mut lint_index, .. }\n+        | LintExpectationId::Stable { ref mut lint_index, .. }) = self;\n+\n+        *lint_index = new_lint_index\n+    }\n+}\n+\n+impl<HCX: rustc_hir::HashStableContext> HashStable<HCX> for LintExpectationId {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n+        match self {\n+            LintExpectationId::Stable { hir_id, attr_index, lint_index: Some(lint_index) } => {\n+                hir_id.hash_stable(hcx, hasher);\n+                attr_index.hash_stable(hcx, hasher);\n+                lint_index.hash_stable(hcx, hasher);\n+            }\n+            _ => {\n+                unreachable!(\"HashStable should only be called for a filled `LintExpectationId`\")\n+            }\n+        }\n+    }\n+}\n+\n+impl<HCX: rustc_hir::HashStableContext> ToStableHashKey<HCX> for LintExpectationId {\n+    type KeyType = (HirId, u16, u16);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {\n+        match self {\n+            LintExpectationId::Stable { hir_id, attr_index, lint_index: Some(lint_index) } => {\n+                (*hir_id, *attr_index, *lint_index)\n+            }\n+            _ => {\n+                unreachable!(\"HashStable should only be called for a filled `LintExpectationId`\")\n+            }\n+        }\n+    }\n+}\n+\n /// Setting for how to handle a lint.\n+///\n+/// See: <https://doc.rust-lang.org/rustc/lints/levels.html>\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n pub enum Level {\n+    /// The `allow` level will not issue any message.\n     Allow,\n+    /// The `expect` level will suppress the lint message but in turn produce a message\n+    /// if the lint wasn't issued in the expected scope. `Expect` should not be used as\n+    /// an initial level for a lint.\n+    ///\n+    /// Note that this still means that the lint is enabled in this position and should\n+    /// be emitted, this will in turn fulfill the expectation and suppress the lint.\n+    ///\n+    /// See RFC 2383.\n+    ///\n+    /// The `LintExpectationId` is used to later link a lint emission to the actual\n+    /// expectation. It can be ignored in most cases.\n+    Expect(LintExpectationId),\n+    /// The `warn` level will produce a warning if the lint was violated, however the\n+    /// compiler will continue with its execution.\n     Warn,\n     ForceWarn,\n+    /// The `deny` level will produce an error and stop further execution after the lint\n+    /// pass is complete.\n     Deny,\n+    /// `Forbid` is equivalent to the `deny` level but can't be overwritten like the previous\n+    /// levels.\n     Forbid,\n }\n \n@@ -63,28 +173,34 @@ impl Level {\n     pub fn as_str(self) -> &'static str {\n         match self {\n             Level::Allow => \"allow\",\n+            Level::Expect(_) => \"expect\",\n             Level::Warn => \"warn\",\n             Level::ForceWarn => \"force-warn\",\n             Level::Deny => \"deny\",\n             Level::Forbid => \"forbid\",\n         }\n     }\n \n-    /// Converts a lower-case string to a level.\n+    /// Converts a lower-case string to a level. This will never construct the expect\n+    /// level as that would require a [`LintExpectationId`]\n     pub fn from_str(x: &str) -> Option<Level> {\n         match x {\n             \"allow\" => Some(Level::Allow),\n             \"warn\" => Some(Level::Warn),\n             \"deny\" => Some(Level::Deny),\n             \"forbid\" => Some(Level::Forbid),\n-            _ => None,\n+            \"expect\" | _ => None,\n         }\n     }\n \n     /// Converts a symbol to a level.\n-    pub fn from_symbol(x: Symbol) -> Option<Level> {\n-        match x {\n+    pub fn from_attr(attr: &Attribute) -> Option<Level> {\n+        match attr.name_or_empty() {\n             sym::allow => Some(Level::Allow),\n+            sym::expect => Some(Level::Expect(LintExpectationId::Unstable {\n+                attr_id: attr.id,\n+                lint_index: None,\n+            })),\n             sym::warn => Some(Level::Warn),\n             sym::deny => Some(Level::Deny),\n             sym::forbid => Some(Level::Forbid),"}, {"sha": "894947fa70d969506628d27370b25b6fbdcb0745", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -8,7 +8,7 @@ use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    FutureIncompatibilityReason, Level, Lint, LintId,\n+    FutureIncompatibilityReason, Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -153,6 +153,13 @@ impl LintLevelSets {\n \n #[derive(Debug)]\n pub struct LintLevelMap {\n+    /// This is a collection of lint expectations as described in RFC 2383, that\n+    /// can be fulfilled during this compilation session. This means that at least\n+    /// one expected lint is currently registered in the lint store.\n+    ///\n+    /// The [`LintExpectationId`] is stored as a part of the [`Expect`](Level::Expect)\n+    /// lint level.\n+    pub lint_expectations: Vec<(LintExpectationId, LintExpectation)>,\n     pub sets: LintLevelSets,\n     pub id_to_set: FxHashMap<HirId, LintStackIndex>,\n }\n@@ -178,14 +185,33 @@ impl LintLevelMap {\n impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let LintLevelMap { ref sets, ref id_to_set } = *self;\n+        let LintLevelMap { ref sets, ref id_to_set, ref lint_expectations } = *self;\n \n         id_to_set.hash_stable(hcx, hasher);\n+        lint_expectations.hash_stable(hcx, hasher);\n \n         hcx.while_hashing_spans(true, |hcx| sets.hash_stable(hcx, hasher))\n     }\n }\n \n+/// This struct represents a lint expectation and holds all required information\n+/// to emit the `unfulfilled_lint_expectations` lint if it is unfulfilled after\n+/// the `LateLintPass` has completed.\n+#[derive(Clone, Debug, HashStable)]\n+pub struct LintExpectation {\n+    /// The reason for this expectation that can optionally be added as part of\n+    /// the attribute. It will be displayed as part of the lint message.\n+    pub reason: Option<Symbol>,\n+    /// The [`Span`] of the attribute that this expectation originated from.\n+    pub emission_span: Span,\n+}\n+\n+impl LintExpectation {\n+    pub fn new(reason: Option<Symbol>, attr_span: Span) -> Self {\n+        Self { reason, emission_span: attr_span }\n+    }\n+}\n+\n pub struct LintDiagnosticBuilder<'a>(DiagnosticBuilder<'a, ()>);\n \n impl<'a> LintDiagnosticBuilder<'a> {\n@@ -225,6 +251,9 @@ pub fn explain_lint_level_source(\n                 Level::Forbid => \"-F\",\n                 Level::Allow => \"-A\",\n                 Level::ForceWarn => \"--force-warn\",\n+                Level::Expect(_) => {\n+                    unreachable!(\"the expect level does not have a commandline flag\")\n+                }\n             };\n             let hyphen_case_lint_name = name.replace('_', \"-\");\n             if lint_flag_val.as_str() == name {\n@@ -314,6 +343,16 @@ pub fn struct_lint_level<'s, 'd>(\n                     return;\n                 }\n             }\n+            (Level::Expect(expect_id), _) => {\n+                // This case is special as we actually allow the lint itself in this context, but\n+                // we can't return early like in the case for `Level::Allow` because we still\n+                // need the lint diagnostic to be emitted to `rustc_error::HanderInner`.\n+                //\n+                // We can also not mark the lint expectation as fulfilled here right away, as it\n+                // can still be cancelled in the decorate function. All of this means that we simply\n+                // create a `DiagnosticBuilder` and continue as we would for warnings.\n+                sess.struct_expect(\"\", expect_id)\n+            }\n             (Level::Warn | Level::ForceWarn, Some(span)) => sess.struct_span_warn(span, \"\"),\n             (Level::Warn | Level::ForceWarn, None) => sess.struct_warn(\"\"),\n             (Level::Deny | Level::Forbid, Some(span)) => {\n@@ -346,6 +385,17 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n         }\n \n+        // Lint diagnostics that are covered by the expect level will not be emitted outside\n+        // the compiler. It is therefore not necessary to add any information for the user.\n+        // This will therefore directly call the decorate function which will in turn emit\n+        // the `Diagnostic`.\n+        if let Level::Expect(_) = level {\n+            let name = lint.name_lower();\n+            err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn: false });\n+            decorate(LintDiagnosticBuilder::new(err));\n+            return;\n+        }\n+\n         explain_lint_level_source(sess, lint, level, src, &mut err);\n \n         let name = lint.name_lower();"}, {"sha": "8ce1b9d44257cc34291839f76f73b235527aaf65", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -2755,7 +2755,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 return bound;\n             }\n \n-            if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {\n+            if hir.attrs(id).iter().any(|attr| Level::from_attr(attr).is_some()) {\n                 return id;\n             }\n             let next = hir.get_parent_node(id);"}, {"sha": "eabebfcf3eae5145c17133b636d54596ab4f8a84", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -331,6 +331,13 @@ impl Session {\n     pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n+    pub fn struct_expect(\n+        &self,\n+        msg: &str,\n+        id: lint::LintExpectationId,\n+    ) -> DiagnosticBuilder<'_, ()> {\n+        self.diagnostic().struct_expect(msg, id)\n+    }\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "6b255b799b7ecfab17667c5fa8c47f89a17dc9ce", "filename": "src/test/ui/lint/rfc-2383-lint-reason/catch_multiple_lint_triggers.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcatch_multiple_lint_triggers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcatch_multiple_lint_triggers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcatch_multiple_lint_triggers.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,45 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+#![warn(unused)]\n+\n+// This expect attribute should catch all lint triggers\n+#[expect(unused_variables)]\n+fn check_multiple_lints_1() {\n+    let value_i = 0xff00ff;\n+    let value_ii = 0xff00ff;\n+    let value_iii = 0xff00ff;\n+    let value_iiii = 0xff00ff;\n+    let value_iiiii = 0xff00ff;\n+}\n+\n+// This expect attribute should catch all lint triggers\n+#[expect(unused_mut)]\n+fn check_multiple_lints_2() {\n+    let mut a = 0xa;\n+    let mut b = 0xb;\n+    let mut c = 0xc;\n+    println!(\"The ABC goes as: {:#x} {:#x} {:#x}\", a, b, c);\n+}\n+\n+// This expect attribute should catch all lint triggers\n+#[expect(while_true)]\n+fn check_multiple_lints_3() {\n+    // `while_true` is an early lint\n+    while true {}\n+\n+    while true {}\n+\n+    while true {}\n+\n+    while true {}\n+\n+    while true {}\n+}\n+\n+fn main() {\n+    check_multiple_lints_1();\n+    check_multiple_lints_2();\n+    check_multiple_lints_3();\n+}"}, {"sha": "9f591ba9852324b30f5a5702eb97345b576061c9", "filename": "src/test/ui/lint/rfc-2383-lint-reason/crate_level_expect.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+#![warn(unused)]\n+\n+#![expect(unused_mut)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+#![expect(unused_variables)]\n+\n+fn main() {\n+    let x = 0;\n+}"}, {"sha": "7237f6fb6bba0791601c5a3a6bb68db893846e20", "filename": "src/test/ui/lint/rfc-2383-lint-reason/crate_level_expect.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,10 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/crate_level_expect.rs:7:11\n+   |\n+LL | #![expect(unused_mut)]\n+   |           ^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b95815bc50b985abdfbca6d2c0d6c106e6687d09", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_inside_macro.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_inside_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_inside_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_inside_macro.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+#![warn(unused)]\n+\n+macro_rules! expect_inside_macro {\n+    () => {\n+        #[expect(unused_variables)]\n+        let x = 0;\n+    };\n+}\n+\n+fn main() {\n+    expect_inside_macro!();\n+}"}, {"sha": "07c60fa0c325b20a5d60e3ab8897bdb89ec60372", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_lint_from_macro.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_lint_from_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_lint_from_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_lint_from_macro.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,42 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+#![warn(unused_variables)]\n+\n+macro_rules! trigger_unused_variables_macro {\n+    () => {\n+        let x = 0;\n+        //~^ WARNING unused variable: `x` [unused_variables]\n+        //~| WARNING unused variable: `x` [unused_variables]\n+    };\n+}\n+\n+pub fn check_macro() {\n+    // This should trigger the `unused_variables` from inside the macro\n+    trigger_unused_variables_macro!();\n+}\n+\n+// This should be fulfilled by the macro\n+#[expect(unused_variables)]\n+pub fn check_expect_on_item() {\n+    trigger_unused_variables_macro!();\n+}\n+\n+pub fn check_expect_on_macro() {\n+    // This should be fulfilled by the macro\n+    #[expect(unused_variables)]\n+    trigger_unused_variables_macro!();\n+\n+    // FIXME: Lint attributes currently don't work directly on macros, and\n+    // therefore also doesn't work for the new `expect` attribute. This bug\n+    // is being tracked in rust#87391. The test will until then produce two\n+    // warnings about the unused variable x.\n+    //\n+    // The expectation is still marked as fulfilled. I'm not totally why but\n+    // my guess is that this will remain working when rust#87391 has been fixed.\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "817e16fdcaa063f320bc7bf3b4b7543f1232c7d0", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_lint_from_macro.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_lint_from_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_lint_from_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_lint_from_macro.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,29 @@\n+warning: unused variable: `x`\n+  --> $DIR/expect_lint_from_macro.rs:9:13\n+   |\n+LL |         let x = 0;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+...\n+LL |     trigger_unused_variables_macro!();\n+   |     --------------------------------- in this macro invocation\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expect_lint_from_macro.rs:5:9\n+   |\n+LL | #![warn(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this warning originates in the macro `trigger_unused_variables_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: unused variable: `x`\n+  --> $DIR/expect_lint_from_macro.rs:9:13\n+   |\n+LL |         let x = 0;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+...\n+LL |     trigger_unused_variables_macro!();\n+   |     --------------------------------- in this macro invocation\n+   |\n+   = note: this warning originates in the macro `trigger_unused_variables_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "928e1610614325a0e9863aa3197e562d36f767cb", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_missing_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_missing_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_missing_feature_gate.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,9 @@\n+// should error due to missing feature gate.\n+\n+#![warn(unused)]\n+\n+#[expect(unused)]\n+//~^ ERROR: the `#[expect]` attribute is an experimental feature [E0658]\n+fn main() {\n+    let x = 1;\n+}"}, {"sha": "b5601cf9e6594b1f3e544e279161af5ea0bce7c4", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_missing_feature_gate.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_missing_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_missing_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_missing_feature_gate.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[expect]` attribute is an experimental feature\n+  --> $DIR/expect_missing_feature_gate.rs:5:1\n+   |\n+LL | #[expect(unused)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #54503 <https://github.com/rust-lang/rust/issues/54503> for more information\n+   = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "dc9a719a3f7e79bb8cfd51c513591e7c73ec3f31", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_multiple_lints.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,58 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+#![warn(unused)]\n+\n+// The warnings are not double triggers, they identify different unfulfilled lint\n+// expectations one for each listed lint.\n+\n+#[expect(unused_variables, unused_mut, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+//~| WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_1() {\n+    // This only trigger `unused_variables`\n+    let who_am_i = 666;\n+}\n+\n+#[expect(unused_variables, unused_mut, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_2() {\n+    // This only triggers `unused_mut`\n+    let mut x = 0;\n+    println!(\"I use x: {}\", x);\n+}\n+\n+#[expect(unused_variables, unused_mut, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_3() {\n+    // This only triggers `while_true` which is also an early lint\n+    while true {}\n+}\n+\n+#[expect(unused, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_with_lint_group_1() {\n+    let who_am_i = 666;\n+\n+    let mut x = 0;\n+    println!(\"I use x: {}\", x);\n+}\n+\n+#[expect(unused, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_with_lint_group_2() {\n+    while true {}\n+}\n+\n+fn main() {\n+    check_multiple_lints_1();\n+    check_multiple_lints_2();\n+    check_multiple_lints_3();\n+\n+    check_multiple_lints_with_lint_group_1();\n+    check_multiple_lints_with_lint_group_2();\n+}"}, {"sha": "90ee744b26b01799416da2bfd8af3e8c10134220", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_multiple_lints.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,52 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:10:28\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                            ^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:10:40\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                                        ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:19:10\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:19:40\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                                        ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:28:10\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:28:28\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                            ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:36:18\n+   |\n+LL | #[expect(unused, while_true)]\n+   |                  ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:45:10\n+   |\n+LL | #[expect(unused, while_true)]\n+   |          ^^^^^^\n+\n+warning: 8 warnings emitted\n+"}, {"sha": "8f94bd6ec6cb81e6d1adda56e820150df9add2e1", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,53 @@\n+// ignore-tidy-linelength\n+\n+#![feature(lint_reasons)]\n+#![warn(unused_mut)]\n+\n+#[expect(\n+    unused_mut,\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+    //~| NOTE this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\n+    reason = \"this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\"\n+)]\n+mod foo {\n+    fn bar() {\n+        #[allow(\n+            unused_mut,\n+            reason = \"this overrides the previous `expect` lint level and allows the `unused_mut` lint here\"\n+        )]\n+        let mut v = 0;\n+    }\n+}\n+\n+#[expect(\n+    unused_mut,\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\n+    reason = \"this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\"\n+)]\n+mod oof {\n+    #[warn(\n+        unused_mut,\n+        //~^ NOTE the lint level is defined here\n+        reason = \"this overrides the previous `expect` lint level and warns about the `unused_mut` lint here\"\n+    )]\n+    fn bar() {\n+        let mut v = 0;\n+        //~^ WARNING variable does not need to be mutable [unused_mut]\n+        //~| NOTE this overrides the previous `expect` lint level and warns about the `unused_mut` lint here\n+        //~| HELP remove this `mut`\n+    }\n+}\n+\n+#[expect(unused_variables)]\n+//~^ WARNING this lint expectation is unfulfilled\n+#[forbid(unused_variables)]\n+//~^ NOTE the lint level is defined here\n+fn check_expect_then_forbid() {\n+    let this_is_my_function = 3;\n+    //~^ ERROR unused variable: `this_is_my_function` [unused_variables]\n+    //~| HELP if this is intentional, prefix it with an underscore\n+}\n+\n+fn main() {}"}, {"sha": "370e51bf70a7a203ddfc92cea79dbcd5e27d2539", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,52 @@\n+error: unused variable: `this_is_my_function`\n+  --> $DIR/expect_nested_lint_levels.rs:48:9\n+   |\n+LL |     let this_is_my_function = 3;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_is_my_function`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expect_nested_lint_levels.rs:45:10\n+   |\n+LL | #[forbid(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n+warning: variable does not need to be mutable\n+  --> $DIR/expect_nested_lint_levels.rs:36:13\n+   |\n+LL |         let mut v = 0;\n+   |             ----^\n+   |             |\n+   |             help: remove this `mut`\n+   |\n+   = note: this overrides the previous `expect` lint level and warns about the `unused_mut` lint here\n+note: the lint level is defined here\n+  --> $DIR/expect_nested_lint_levels.rs:31:9\n+   |\n+LL |         unused_mut,\n+   |         ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_nested_lint_levels.rs:7:5\n+   |\n+LL |     unused_mut,\n+   |     ^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+   = note: this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_nested_lint_levels.rs:24:5\n+   |\n+LL |     unused_mut,\n+   |     ^^^^^^^^^^\n+   |\n+   = note: this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_nested_lint_levels.rs:43:10\n+   |\n+LL | #[expect(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 4 warnings emitted\n+"}, {"sha": "479ee198e1743f7e8eaf3a580c7ca2960d938bb3", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_with_forbid.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_forbid.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,34 @@\n+#![feature(lint_reasons)]\n+\n+#[forbid(unused_variables)]\n+//~^ NOTE `forbid` level set here\n+//~| NOTE `forbid` level set here\n+#[expect(unused_variables)]\n+//~^ ERROR incompatible with previous forbid [E0453]\n+//~| NOTE overruled by previous forbid\n+//~| ERROR incompatible with previous forbid [E0453]\n+//~| NOTE overruled by previous forbid\n+fn expect_forbidden_lint_1() {}\n+\n+#[forbid(while_true)]\n+//~^ NOTE `forbid` level set here\n+//~| NOTE `forbid` level set here\n+//~| NOTE the lint level is defined here\n+#[expect(while_true)]\n+//~^ ERROR incompatible with previous forbid [E0453]\n+//~| NOTE overruled by previous forbid\n+//~| ERROR incompatible with previous forbid [E0453]\n+//~| NOTE overruled by previous forbid\n+fn expect_forbidden_lint_2() {\n+    // This while loop will produce a `while_true` lint as the lint level\n+    // at this node is still `forbid` and the `while_true` check happens\n+    // before the compilation terminates due to `E0453`\n+    while true {}\n+    //~^ ERROR denote infinite loops with `loop { ... }`\n+    //~| HELP use `loop`\n+}\n+\n+fn main() {\n+    expect_forbidden_lint_1();\n+    expect_forbidden_lint_2();\n+}"}, {"sha": "a8116e93404f29396a25ffcc4be1c968433abff9", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_with_forbid.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_forbid.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,51 @@\n+error[E0453]: expect(unused_variables) incompatible with previous forbid\n+  --> $DIR/expect_with_forbid.rs:6:10\n+   |\n+LL | #[forbid(unused_variables)]\n+   |          ---------------- `forbid` level set here\n+...\n+LL | #[expect(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: expect(while_true) incompatible with previous forbid\n+  --> $DIR/expect_with_forbid.rs:17:10\n+   |\n+LL | #[forbid(while_true)]\n+   |          ---------- `forbid` level set here\n+...\n+LL | #[expect(while_true)]\n+   |          ^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: expect(unused_variables) incompatible with previous forbid\n+  --> $DIR/expect_with_forbid.rs:6:10\n+   |\n+LL | #[forbid(unused_variables)]\n+   |          ---------------- `forbid` level set here\n+...\n+LL | #[expect(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: expect(while_true) incompatible with previous forbid\n+  --> $DIR/expect_with_forbid.rs:17:10\n+   |\n+LL | #[forbid(while_true)]\n+   |          ---------- `forbid` level set here\n+...\n+LL | #[expect(while_true)]\n+   |          ^^^^^^^^^^ overruled by previous forbid\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/expect_with_forbid.rs:26:5\n+   |\n+LL |     while true {}\n+   |     ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expect_with_forbid.rs:13:10\n+   |\n+LL | #[forbid(while_true)]\n+   |          ^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "b4183d982118e54ee876d7f6c559e90a187ecdf7", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_with_reason.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+#![warn(unused)]\n+\n+#![expect(unused_variables, reason = \"<This should fail and display this reason>\")]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+//~| NOTE <This should fail and display this reason>\n+\n+fn main() {}"}, {"sha": "82c1a4c08bb39284e89c419d7a56ea4f418b8ee0", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_with_reason.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,11 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_with_reason.rs:6:11\n+   |\n+LL | #![expect(unused_variables, reason = \"<This should fail and display this reason>\")]\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+   = note: <This should fail and display this reason>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6624b930e5e70ce314922e048ecc9c77c19a4985", "filename": "src/test/ui/lint/rfc-2383-lint-reason/fulfilled_expectation_early_lints.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_early_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_early_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_early_lints.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+fn expect_early_pass_lints() {\n+    #[expect(while_true)]\n+    while true {\n+        println!(\"I never stop\")\n+    }\n+\n+    #[expect(unused_doc_comments)]\n+    /// This comment triggers the `unused_doc_comments` lint\n+    let _sheep = \"wolf\";\n+\n+    let x = 123;\n+    #[expect(ellipsis_inclusive_range_patterns)]\n+    match x {\n+        0...100 => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5d928b3cab3fe5712d3c727a64bf8bbeda501c7a", "filename": "src/test/ui/lint/rfc-2383-lint-reason/fulfilled_expectation_late_lints.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_late_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_late_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_late_lints.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+#![warn(unused)]\n+\n+#[expect(unused_variables)]\n+fn check_specific_lint() {\n+    let x = 2;\n+}\n+\n+#[expect(unused)]\n+fn check_lint_group() {\n+    let x = 15;\n+}\n+\n+#[expect(unused_variables)]\n+fn check_multiple_lint_emissions() {\n+    let r = 1;\n+    let u = 8;\n+    let s = 2;\n+    let t = 9;\n+}\n+\n+mod check_fulfilled_expect_in_macro {\n+    macro_rules! expect_inside_macro {\n+        () => {\n+            #[expect(unused_variables)]\n+            let x = 0;\n+        };\n+    }\n+\n+    pub fn check_macro() {\n+        expect_inside_macro!();\n+    }\n+}\n+\n+fn main() {\n+    check_specific_lint();\n+    check_lint_group();\n+    check_multiple_lint_emissions();\n+\n+    check_fulfilled_expect_in_macro::check_macro();\n+}"}, {"sha": "98080b4e8224f99ff5a9f6db9400f8c771836ff5", "filename": "src/test/ui/lint/rfc-2383-lint-reason/multiple_expect_attrs.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.rs?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+#![warn(unused)]\n+\n+#[warn(unused_variables)]\n+#[expect(unused_variables)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+#[allow(unused_variables)]\n+#[expect(unused_variables)] // Only this expectation will be fulfilled\n+fn main() {\n+    let x = 2;\n+}"}, {"sha": "df7d6584f99dd5263af85b7c114423c533299176", "filename": "src/test/ui/lint/rfc-2383-lint-reason/multiple_expect_attrs.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10913c00018c76103b2fd4260d8c02ec728fd244/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.stderr?ref=10913c00018c76103b2fd4260d8c02ec728fd244", "patch": "@@ -0,0 +1,10 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/multiple_expect_attrs.rs:7:10\n+   |\n+LL | #[expect(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}