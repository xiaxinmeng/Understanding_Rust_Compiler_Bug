{"sha": "a3f9aa9ef8657304006fcbe4759a263720b8592c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjlhYTllZjg2NTczMDQwMDZmY2JlNDc1OWEyNjM3MjBiODU5MmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-03T05:11:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-07T05:19:41Z"}, "message": "rtio: Remove usage of `Path`\n\nThe rtio interface is a thin low-level interface over the I/O subsystems, and\nthe `Path` type is a little too high-level for this interface.", "tree": {"sha": "25003ae61b9ce3227589e87dbd3b1b077ef4d399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25003ae61b9ce3227589e87dbd3b1b077ef4d399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f9aa9ef8657304006fcbe4759a263720b8592c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f9aa9ef8657304006fcbe4759a263720b8592c", "html_url": "https://github.com/rust-lang/rust/commit/a3f9aa9ef8657304006fcbe4759a263720b8592c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f9aa9ef8657304006fcbe4759a263720b8592c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b830b4b86b39173843a2d660727b9e1854fe8bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b830b4b86b39173843a2d660727b9e1854fe8bfb", "html_url": "https://github.com/rust-lang/rust/commit/b830b4b86b39173843a2d660727b9e1854fe8bfb"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "3182b061e5238fb8e1ded31d7b9b97c3836fd973", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -361,17 +361,17 @@ pub fn mkdir(p: &CString, mode: io::FilePermission) -> IoResult<()> {\n     }))\n }\n \n-pub fn readdir(p: &CString) -> IoResult<Vec<Path>> {\n+pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n     use libc::{dirent_t};\n     use libc::{opendir, readdir_r, closedir};\n \n-    fn prune(root: &CString, dirs: Vec<Path>) -> Vec<Path> {\n+    fn prune(root: &CString, dirs: Vec<Path>) -> Vec<CString> {\n         let root = unsafe { CString::new(root.with_ref(|p| p), false) };\n         let root = Path::new(root);\n \n         dirs.move_iter().filter(|path| {\n             path.as_vec() != bytes!(\".\") && path.as_vec() != bytes!(\"..\")\n-        }).map(|path| root.join(path)).collect()\n+        }).map(|path| root.join(path).to_c_str()).collect()\n     }\n \n     extern {\n@@ -431,7 +431,7 @@ pub fn chown(p: &CString, uid: int, gid: int) -> IoResult<()> {\n     }))\n }\n \n-pub fn readlink(p: &CString) -> IoResult<Path> {\n+pub fn readlink(p: &CString) -> IoResult<CString> {\n     let p = p.with_ref(|p| p);\n     let mut len = unsafe { libc::pathconf(p, libc::_PC_NAME_MAX) };\n     if len == -1 {\n@@ -446,7 +446,7 @@ pub fn readlink(p: &CString) -> IoResult<Path> {\n         n => {\n             assert!(n > 0);\n             unsafe { buf.set_len(n as uint); }\n-            Ok(Path::new(buf))\n+            Ok(buf.as_slice().to_c_str())\n         }\n     }\n }"}, {"sha": "2cf54ab4007c6a24e4170ffbf2329e6829e074b7", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -347,16 +347,16 @@ pub fn mkdir(p: &CString, _mode: io::FilePermission) -> IoResult<()> {\n     })\n }\n \n-pub fn readdir(p: &CString) -> IoResult<Vec<Path>> {\n+pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n     use std::rt::libc_heap::malloc_raw;\n \n-    fn prune(root: &CString, dirs: Vec<Path>) -> Vec<Path> {\n+    fn prune(root: &CString, dirs: Vec<Path>) -> Vec<CString> {\n         let root = unsafe { CString::new(root.with_ref(|p| p), false) };\n         let root = Path::new(root);\n \n         dirs.move_iter().filter(|path| {\n             path.as_vec() != bytes!(\".\") && path.as_vec() != bytes!(\"..\")\n-        }).map(|path| root.join(path)).collect()\n+        }).map(|path| root.join(path).to_c_str()).collect()\n     }\n \n     extern {"}, {"sha": "a17a683646a810942f042445bd7dacc5ba5c4ac0", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -232,7 +232,7 @@ impl rtio::IoFactory for IoFactory {\n     fn fs_rename(&mut self, path: &CString, to: &CString) -> IoResult<()> {\n         file::rename(path, to)\n     }\n-    fn fs_readdir(&mut self, path: &CString, _flags: c_int) -> IoResult<Vec<Path>> {\n+    fn fs_readdir(&mut self, path: &CString, _flags: c_int) -> IoResult<Vec<CString>> {\n         file::readdir(path)\n     }\n     fn fs_lstat(&mut self, path: &CString) -> IoResult<io::FileStat> {\n@@ -241,7 +241,7 @@ impl rtio::IoFactory for IoFactory {\n     fn fs_chown(&mut self, path: &CString, uid: int, gid: int) -> IoResult<()> {\n         file::chown(path, uid, gid)\n     }\n-    fn fs_readlink(&mut self, path: &CString) -> IoResult<Path> {\n+    fn fs_readlink(&mut self, path: &CString) -> IoResult<CString> {\n         file::readlink(path)\n     }\n     fn fs_symlink(&mut self, src: &CString, dst: &CString) -> IoResult<()> {"}, {"sha": "acf3cbdc1aea02aea24a8799fb02fbc8b461c50b", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -157,7 +157,7 @@ impl FsRequest {\n     }\n \n     pub fn readdir(loop_: &Loop, path: &CString, flags: c_int)\n-        -> Result<Vec<Path>, UvError>\n+        -> Result<Vec<CString>, UvError>\n     {\n         execute(|req, cb| unsafe {\n             uvll::uv_fs_readdir(loop_.handle,\n@@ -170,20 +170,22 @@ impl FsRequest {\n                                               Some(req.get_result() as uint),\n                                               |rel| {\n                 let p = rel.as_bytes();\n-                paths.push(parent.join(p.slice_to(rel.len())));\n+                paths.push(parent.join(p.slice_to(rel.len())).to_c_str());\n             });\n             paths\n         })\n     }\n \n-    pub fn readlink(loop_: &Loop, path: &CString) -> Result<Path, UvError> {\n+    pub fn readlink(loop_: &Loop, path: &CString) -> Result<CString, UvError> {\n         execute(|req, cb| unsafe {\n             uvll::uv_fs_readlink(loop_.handle, req,\n                                  path.with_ref(|p| p), cb)\n         }).map(|req| {\n-            Path::new(unsafe {\n-                CString::new(req.get_ptr() as *libc::c_char, false)\n-            })\n+            // Be sure to clone the cstring so we get an independently owned\n+            // allocation to work with and return.\n+            unsafe {\n+                CString::new(req.get_ptr() as *libc::c_char, false).clone()\n+            }\n         })\n     }\n "}, {"sha": "c55b5f64f9dc8b0e749af631dc69aea12cdb29cd", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -22,7 +22,6 @@ use libc::c_int;\n use libc::{O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY, S_IRUSR,\n                 S_IWUSR};\n use libc;\n-use std::path::Path;\n use std::rt::rtio;\n use std::rt::rtio::{ProcessConfig, IoFactory, EventLoop};\n use ai = std::io::net::addrinfo;\n@@ -241,7 +240,7 @@ impl IoFactory for UvIoFactory {\n         r.map_err(uv_error_to_io_error)\n     }\n     fn fs_readdir(&mut self, path: &CString, flags: c_int)\n-        -> Result<Vec<Path>, IoError>\n+        -> Result<Vec<CString>, IoError>\n     {\n         let r = FsRequest::readdir(&self.loop_, path, flags);\n         r.map_err(uv_error_to_io_error)\n@@ -258,7 +257,7 @@ impl IoFactory for UvIoFactory {\n         let r = FsRequest::chown(&self.loop_, path, uid, gid);\n         r.map_err(uv_error_to_io_error)\n     }\n-    fn fs_readlink(&mut self, path: &CString) -> Result<Path, IoError> {\n+    fn fs_readlink(&mut self, path: &CString) -> Result<CString, IoError> {\n         let r = FsRequest::readlink(&self.loop_, path);\n         r.map_err(uv_error_to_io_error)\n     }"}, {"sha": "96ab8989a2152c31bbe06cc5884f6317240d5cdc", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -410,7 +410,9 @@ pub fn symlink(src: &Path, dst: &Path) -> IoResult<()> {\n /// This function will return an error on failure. Failure conditions include\n /// reading a file that does not exist or reading a file which is not a symlink.\n pub fn readlink(path: &Path) -> IoResult<Path> {\n-    LocalIo::maybe_raise(|io| io.fs_readlink(&path.to_c_str()))\n+    LocalIo::maybe_raise(|io| {\n+        Ok(Path::new(try!(io.fs_readlink(&path.to_c_str()))))\n+    })\n }\n \n /// Create a new, empty directory at the provided path\n@@ -487,7 +489,9 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// file\n pub fn readdir(path: &Path) -> IoResult<Vec<Path>> {\n     LocalIo::maybe_raise(|io| {\n-        io.fs_readdir(&path.to_c_str(), 0)\n+        Ok(try!(io.fs_readdir(&path.to_c_str(), 0)).move_iter().map(|a| {\n+            Path::new(a)\n+        }).collect())\n     })\n }\n "}, {"sha": "4b5ca6178a756c09985f50908b93f543fcba4212", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f9aa9ef8657304006fcbe4759a263720b8592c/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=a3f9aa9ef8657304006fcbe4759a263720b8592c", "patch": "@@ -19,7 +19,6 @@ use mem;\n use ops::Drop;\n use option::{Option, Some, None};\n use owned::Box;\n-use path::Path;\n use result::Err;\n use rt::local::Local;\n use rt::task::Task;\n@@ -223,11 +222,11 @@ pub trait IoFactory {\n     fn fs_rmdir(&mut self, path: &CString) -> IoResult<()>;\n     fn fs_rename(&mut self, path: &CString, to: &CString) -> IoResult<()>;\n     fn fs_readdir(&mut self, path: &CString, flags: c_int) ->\n-        IoResult<Vec<Path>>;\n+        IoResult<Vec<CString>>;\n     fn fs_lstat(&mut self, path: &CString) -> IoResult<FileStat>;\n     fn fs_chown(&mut self, path: &CString, uid: int, gid: int) ->\n         IoResult<()>;\n-    fn fs_readlink(&mut self, path: &CString) -> IoResult<Path>;\n+    fn fs_readlink(&mut self, path: &CString) -> IoResult<CString>;\n     fn fs_symlink(&mut self, src: &CString, dst: &CString) -> IoResult<()>;\n     fn fs_link(&mut self, src: &CString, dst: &CString) -> IoResult<()>;\n     fn fs_utime(&mut self, src: &CString, atime: u64, mtime: u64) ->"}]}