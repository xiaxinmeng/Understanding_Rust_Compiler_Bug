{"sha": "8d06efb8ea0857844f856ab5fd87aed89d4bf718", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMDZlZmI4ZWEwODU3ODQ0Zjg1NmFiNWZkODdhZWQ4OWQ0YmY3MTg=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-10T01:49:32Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-11T13:54:34Z"}, "message": "dlist: Collect a common pattern into link_with_prev()", "tree": {"sha": "49c1435f9e2c6bc974f6fea0b5fbd18b9b109301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c1435f9e2c6bc974f6fea0b5fbd18b9b109301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d06efb8ea0857844f856ab5fd87aed89d4bf718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d06efb8ea0857844f856ab5fd87aed89d4bf718", "html_url": "https://github.com/rust-lang/rust/commit/8d06efb8ea0857844f856ab5fd87aed89d4bf718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d06efb8ea0857844f856ab5fd87aed89d4bf718/comments", "author": null, "committer": null, "parents": [{"sha": "7b1c57713d331266d632c4fa11d4cdfaaa895ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1c57713d331266d632c4fa11d4cdfaaa895ac7", "html_url": "https://github.com/rust-lang/rust/commit/7b1c57713d331266d632c4fa11d4cdfaaa895ac7"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "46a3a7d6e157729de134425a456342e55207a7a9", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8d06efb8ea0857844f856ab5fd87aed89d4bf718/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d06efb8ea0857844f856ab5fd87aed89d4bf718/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=8d06efb8ea0857844f856ab5fd87aed89d4bf718", "patch": "@@ -98,6 +98,12 @@ impl<T> Rawlink<T> {\n     }\n }\n \n+/// Set the .prev field on `next`, then return `Some(next)`\n+fn link_with_prev<T>(mut next: ~Node<T>, prev: Rawlink<Node<T>>) -> Link<T> {\n+    next.prev = prev;\n+    Some(next)\n+}\n+\n impl<T> Container for List<T> {\n     /// O(1)\n     fn is_empty(&self) -> bool {\n@@ -216,20 +222,17 @@ impl<T> List<T> {\n     ///\n     /// O(1)\n     pub fn pop_front(&mut self) -> Option<T> {\n-        match self.list_head {\n+        match util::replace(&mut self.list_head, None) {\n             None => None,\n-            ref mut head @ Some(*) => {\n+            Some(old_head) => {\n                 self.length -= 1;\n-                match *head.swap_unwrap() {\n+                match *old_head {\n                     Node{value: value, next: Some(next), prev: _} => {\n-                        let mut mnext = next;\n-                        mnext.prev = Rawlink::none();\n-                        *head = Some(mnext);\n+                        self.list_head = link_with_prev(next, Rawlink::none());\n                         Some(value)\n                     }\n                     Node{value: value, next: None, prev: _} => {\n                         self.list_tail = Rawlink::none();\n-                        *head = None;\n                         Some(value)\n                     }\n                 }\n@@ -247,9 +250,7 @@ impl<T> List<T> {\n                 match other {\n                     List{list_head: None, list_tail: _, length: _} => return,\n                     List{list_head: Some(node), list_tail: o_tail, length: o_length} => {\n-                        let mut lnk_node = node;\n-                        lnk_node.prev = self.list_tail;\n-                        tail.next = Some(lnk_node);\n+                        tail.next = link_with_prev(node, self.list_tail);\n                         self.list_tail = o_tail;\n                         self.length += o_length;\n                     }\n@@ -447,13 +448,10 @@ impl<'self, A> ListInsertCursor<A> for MutForwardIterator<'self, A> {\n                     None => return self.list.push_front(elt),  // at head\n                     Some(prev) => prev,\n                 };\n-                let mut node_own = prev_node.next.swap_unwrap();\n-                let mut ins_node = ~Node{value: elt,\n-                                         next: None,\n-                                         prev: Rawlink::some(prev_node)};\n-                node_own.prev = Rawlink::some(ins_node);\n-                ins_node.next = Some(node_own);\n-                prev_node.next = Some(ins_node);\n+                let mut ins_node = ~Node{value: elt, next: None, prev: Rawlink::none()};\n+                let node_own = prev_node.next.swap_unwrap();\n+                ins_node.next = link_with_prev(node_own, Rawlink::some(ins_node));\n+                prev_node.next = link_with_prev(ins_node, Rawlink::some(prev_node));\n                 self.list.length += 1;\n             }\n         }"}]}