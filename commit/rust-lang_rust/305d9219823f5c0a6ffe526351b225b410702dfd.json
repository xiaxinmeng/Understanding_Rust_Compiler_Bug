{"sha": "305d9219823f5c0a6ffe526351b225b410702dfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNWQ5MjE5ODIzZjVjMGE2ZmZlNTI2MzUxYjIyNWI0MTA3MDJkZmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-11T15:46:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-11T15:46:05Z"}, "message": "Merge #3064\n\n3064: Handle macro token cases for rename r=matklad a=edwin0cheng\n\nFixes #2957\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "160c211d7286da1aa6ed1b8ee4b1e099ffb4e3c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/160c211d7286da1aa6ed1b8ee4b1e099ffb4e3c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/305d9219823f5c0a6ffe526351b225b410702dfd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQsw9CRBK7hj4Ov3rIwAAdHIIADYPwkRHbmddmek9W5qQUvPe\no9JzhoY7nznpfIVUzsv8ycM9u44kT11EWRef0qU+p/e2676S7OVlRFSCPdDTWk/U\nMeTU81poIFv3BJU9rycXZNNMJ7BGuNWJ3QkzTrS2igT53+qb7nyZDe7G0WevwUFR\ntEYFKnoAfD0a6/LRKMz+LxtWNotgEb3jcGJ8kTEvPa66p8Md9rZdVKQtRpg+4nhf\nIp9Y6aLNexDID2DaulSYlmBtpRCPr9VphbwqkvT5DVbaDeITRbWvAHGJZFNpDhS0\nW/68GHGvkstio5+01/5eU5N3y5OTrH4RVojcRO+IEEQDgt2XhLVZMZOV6edZl/I=\n=RgCf\n-----END PGP SIGNATURE-----\n", "payload": "tree 160c211d7286da1aa6ed1b8ee4b1e099ffb4e3c3\nparent 3c98681d4efeabe91dc91ff3ef0e1ce11c35d067\nparent 3038470c68e21e0d2aac079523955295ee54cb1a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581435965 +0000\ncommitter GitHub <noreply@github.com> 1581435965 +0000\n\nMerge #3064\n\n3064: Handle macro token cases for rename r=matklad a=edwin0cheng\n\nFixes #2957\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/305d9219823f5c0a6ffe526351b225b410702dfd", "html_url": "https://github.com/rust-lang/rust/commit/305d9219823f5c0a6ffe526351b225b410702dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/305d9219823f5c0a6ffe526351b225b410702dfd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c98681d4efeabe91dc91ff3ef0e1ce11c35d067", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067", "html_url": "https://github.com/rust-lang/rust/commit/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067"}, {"sha": "3038470c68e21e0d2aac079523955295ee54cb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3038470c68e21e0d2aac079523955295ee54cb1a", "html_url": "https://github.com/rust-lang/rust/commit/3038470c68e21e0d2aac079523955295ee54cb1a"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "de924fad27cfb0d970bf4460f829ed43df7d5736", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/305d9219823f5c0a6ffe526351b225b410702dfd/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305d9219823f5c0a6ffe526351b225b410702dfd/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=305d9219823f5c0a6ffe526351b225b410702dfd", "patch": "@@ -13,6 +13,7 @@ mod classify;\n mod rename;\n mod search_scope;\n \n+use crate::expand::descend_into_macros_with_analyzer;\n use hir::{InFile, SourceBinder};\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n@@ -192,39 +193,62 @@ fn process_definition(\n \n         let parse = Lazy::new(|| SourceFile::parse(&text));\n         let mut sb = Lazy::new(|| SourceBinder::new(db));\n+        let mut analyzer = None;\n \n         for (idx, _) in text.match_indices(pat) {\n             let offset = TextUnit::from_usize(idx);\n \n-            if let Some(name_ref) =\n+            let (name_ref, range) = if let Some(name_ref) =\n                 find_node_at_offset::<ast::NameRef>(parse.tree().syntax(), offset)\n             {\n                 let range = name_ref.syntax().text_range();\n-                if let Some(search_range) = search_range {\n-                    if !range.is_subrange(&search_range) {\n-                        continue;\n-                    }\n+                (InFile::new(file_id.into(), name_ref), range)\n+            } else {\n+                // Handle macro token cases\n+                let t = match parse.tree().syntax().token_at_offset(offset) {\n+                    TokenAtOffset::None => continue,\n+                    TokenAtOffset::Single(t) => t,\n+                    TokenAtOffset::Between(_, t) => t,\n+                };\n+                let range = t.text_range();\n+                let analyzer = analyzer.get_or_insert_with(|| {\n+                    sb.analyze(InFile::new(file_id.into(), parse.tree().syntax()), None)\n+                });\n+                let expanded = descend_into_macros_with_analyzer(\n+                    db,\n+                    &analyzer,\n+                    InFile::new(file_id.into(), t),\n+                );\n+                if let Some(token) = ast::NameRef::cast(expanded.value.parent()) {\n+                    (expanded.with_value(token), range)\n+                } else {\n+                    continue;\n                 }\n-                // FIXME: reuse sb\n-                // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n-\n-                if let Some(d) = classify_name_ref(&mut sb, InFile::new(file_id.into(), &name_ref))\n-                {\n-                    if d == def {\n-                        let kind = if is_record_lit_name_ref(&name_ref)\n-                            || is_call_expr_name_ref(&name_ref)\n-                        {\n-                            ReferenceKind::StructLiteral\n-                        } else {\n-                            ReferenceKind::Other\n-                        };\n-\n-                        refs.push(Reference {\n-                            file_range: FileRange { file_id, range },\n-                            kind,\n-                            access: reference_access(&d.kind, &name_ref),\n-                        });\n-                    }\n+            };\n+\n+            if let Some(search_range) = search_range {\n+                if !range.is_subrange(&search_range) {\n+                    continue;\n+                }\n+            }\n+            // FIXME: reuse sb\n+            // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n+\n+            if let Some(d) = classify_name_ref(&mut sb, name_ref.as_ref()) {\n+                if d == def {\n+                    let kind = if is_record_lit_name_ref(&name_ref.value)\n+                        || is_call_expr_name_ref(&name_ref.value)\n+                    {\n+                        ReferenceKind::StructLiteral\n+                    } else {\n+                        ReferenceKind::Other\n+                    };\n+\n+                    refs.push(Reference {\n+                        file_range: FileRange { file_id, range },\n+                        kind,\n+                        access: reference_access(&d.kind, &name_ref.value),\n+                    });\n                 }\n             }\n         }"}, {"sha": "c46b78cb6f686815a92239c8fc8b69600b1b36cb", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/305d9219823f5c0a6ffe526351b225b410702dfd/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305d9219823f5c0a6ffe526351b225b410702dfd/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=305d9219823f5c0a6ffe526351b225b410702dfd", "patch": "@@ -210,6 +210,25 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_rename_for_macro_args() {\n+        test_rename(\n+            r#\"\n+    macro_rules! foo {($i:ident) => {$i} }\n+    fn main() {\n+        let a<|> = \"test\";\n+        foo!(a);\n+    }\"#,\n+            \"b\",\n+            r#\"\n+    macro_rules! foo {($i:ident) => {$i} }\n+    fn main() {\n+        let b = \"test\";\n+        foo!(b);\n+    }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_for_param_inside() {\n         test_rename("}]}