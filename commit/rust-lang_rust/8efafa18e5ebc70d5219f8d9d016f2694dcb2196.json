{"sha": "8efafa18e5ebc70d5219f8d9d016f2694dcb2196", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZmFmYTE4ZTVlYmM3MGQ1MjE5ZjhkOWQwMTZmMjY5NGRjYjIxOTY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-09-21T01:44:07Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-09-21T01:47:05Z"}, "message": "Extend MIR inlining to all operand variants", "tree": {"sha": "949dd86d33290d7bef2a2959f43053c2e65f9798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949dd86d33290d7bef2a2959f43053c2e65f9798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8efafa18e5ebc70d5219f8d9d016f2694dcb2196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8efafa18e5ebc70d5219f8d9d016f2694dcb2196", "html_url": "https://github.com/rust-lang/rust/commit/8efafa18e5ebc70d5219f8d9d016f2694dcb2196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8efafa18e5ebc70d5219f8d9d016f2694dcb2196/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc2ca7e4f8507f82a4c357ee19300166bcd8099", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc2ca7e4f8507f82a4c357ee19300166bcd8099", "html_url": "https://github.com/rust-lang/rust/commit/3bc2ca7e4f8507f82a4c357ee19300166bcd8099"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "04f61235ca195cfb45c850933cd583306751cbc1", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8efafa18e5ebc70d5219f8d9d016f2694dcb2196/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efafa18e5ebc70d5219f8d9d016f2694dcb2196/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=8efafa18e5ebc70d5219f8d9d016f2694dcb2196", "patch": "@@ -94,8 +94,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 // Only consider direct calls to functions\n                 let terminator = bb_data.terminator();\n                 if let TerminatorKind::Call {\n-                    func: Operand::Constant(ref f), .. } = terminator.kind {\n-                        if let ty::FnDef(callee_def_id, substs) = f.ty.sty {\n+                    func: ref op, .. } = terminator.kind {\n+                        if let ty::FnDef(callee_def_id, substs) = op.ty(caller_mir, self.tcx).sty {\n                             if let Some(instance) = Instance::resolve(self.tcx,\n                                                                       param_env,\n                                                                       callee_def_id,"}]}