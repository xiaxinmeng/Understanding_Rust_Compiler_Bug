{"sha": "5b3d52414e0d7786b8c79479938b2543521719be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViM2Q1MjQxNGUwZDc3ODZiOGM3OTQ3OTkzOGIyNTQzNTIxNzE5YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T00:31:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T00:31:09Z"}, "message": "Auto merge of #80425 - camelid:resolve-moduledata-docs, r=petrochenkov\n\nDocument `ModuleData` and improve names\n\n- Document `ModuleData`\n- Rename `ModuleData.normal_ancestor_id` to `nearest_parent_mod`\n- Rename `Resolver::nearest_mod_parent` to `nearest_parent_mod`\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/mentoring/near/221029702\n\nr? `@petrochenkov`", "tree": {"sha": "65bf6b8d9b232a201196dd95702eb94bb7bc5dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65bf6b8d9b232a201196dd95702eb94bb7bc5dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3d52414e0d7786b8c79479938b2543521719be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3d52414e0d7786b8c79479938b2543521719be", "html_url": "https://github.com/rust-lang/rust/commit/5b3d52414e0d7786b8c79479938b2543521719be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3d52414e0d7786b8c79479938b2543521719be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7769b9beacc1cd10d98590838975cbbfa1d76a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7769b9beacc1cd10d98590838975cbbfa1d76a7", "html_url": "https://github.com/rust-lang/rust/commit/d7769b9beacc1cd10d98590838975cbbfa1d76a7"}, {"sha": "ff75da89b1fd04532251e1c60fca9cfe306ae26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff75da89b1fd04532251e1c60fca9cfe306ae26e", "html_url": "https://github.com/rust-lang/rust/commit/ff75da89b1fd04532251e1c60fca9cfe306ae26e"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "de3430d1cd758f01a48b603073543eafed6366cc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=5b3d52414e0d7786b8c79479938b2543521719be", "patch": "@@ -96,7 +96,7 @@ impl<'a> Resolver<'a> {\n \n     /// Walks up the tree of definitions starting at `def_id`,\n     /// stopping at the first `DefKind::Mod` encountered\n-    fn nearest_mod_parent(&mut self, def_id: DefId) -> Module<'a> {\n+    fn nearest_parent_mod(&mut self, def_id: DefId) -> Module<'a> {\n         let def_key = self.cstore().def_key(def_id);\n \n         let mut parent_id = DefId {\n@@ -137,7 +137,7 @@ impl<'a> Resolver<'a> {\n                 .get_opt_name()\n                 .expect(\"given a DefId that wasn't a module\");\n \n-            let parent = Some(self.nearest_mod_parent(def_id));\n+            let parent = Some(self.nearest_parent_mod(def_id));\n             (name, parent)\n         };\n \n@@ -179,7 +179,7 @@ impl<'a> Resolver<'a> {\n             // so this hopefully won't be a problem.\n             //\n             // See https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508\n-            self.nearest_mod_parent(def_id)\n+            self.nearest_parent_mod(def_id)\n         }\n     }\n \n@@ -266,7 +266,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 } else {\n                     // If it's not in an enum, its visibility is restricted to the `mod` item\n                     // that it's defined in.\n-                    Ok(ty::Visibility::Restricted(self.parent_scope.module.normal_ancestor_id))\n+                    Ok(ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod))\n                 }\n             }\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n@@ -803,7 +803,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let module = self.r.new_module(\n                     parent,\n                     module_kind,\n-                    parent.normal_ancestor_id,\n+                    parent.nearest_parent_mod,\n                     expansion,\n                     item.span,\n                 );\n@@ -878,7 +878,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let module = self.r.new_module(\n                     parent,\n                     module_kind,\n-                    parent.normal_ancestor_id,\n+                    parent.nearest_parent_mod,\n                     expansion,\n                     item.span,\n                 );\n@@ -921,7 +921,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let module = self.r.new_module(\n                 parent,\n                 ModuleKind::Block(block.id),\n-                parent.normal_ancestor_id,\n+                parent.nearest_parent_mod,\n                 expansion,\n                 block.span,\n             );"}, {"sha": "2e738ce8daccddff49db07e377275b302c710f7f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5b3d52414e0d7786b8c79479938b2543521719be", "patch": "@@ -1775,7 +1775,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if this.should_report_errs() {\n                 let (err, candidates) = this.smart_resolve_report_errors(path, span, source, res);\n \n-                let def_id = this.parent_scope.module.normal_ancestor_id;\n+                let def_id = this.parent_scope.module.nearest_parent_mod;\n                 let instead = res.is_some();\n                 let suggestion =\n                     if res.is_none() { this.report_missing_type_error(path) } else { None };\n@@ -1843,7 +1843,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             drop(parent_err);\n \n-            let def_id = this.parent_scope.module.normal_ancestor_id;\n+            let def_id = this.parent_scope.module.nearest_parent_mod;\n \n             if this.should_report_errs() {\n                 this.r.use_injections.push(UseError {"}, {"sha": "dba30f66640071bcec7315f4122c6e29f3aa5302", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5b3d52414e0d7786b8c79479938b2543521719be", "patch": "@@ -422,7 +422,9 @@ enum ModuleKind {\n     ///\n     /// This could be:\n     ///\n-    /// * A normal module \u2012 either `mod from_file;` or `mod from_block { }`.\n+    /// * A normal module \u2013 either `mod from_file;` or `mod from_block { }` \u2013\n+    ///   or the crate root (which is conceptually a top-level module).\n+    ///   Note that the crate root's [name][Self::name] will be [`kw::Empty`].\n     /// * A trait or an enum (it implicitly contains associated types, methods and variant\n     ///   constructors).\n     Def(DefKind, DefId, Symbol),\n@@ -456,28 +458,42 @@ struct BindingKey {\n type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;\n \n /// One node in the tree of modules.\n+///\n+/// Note that a \"module\" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:\n+///\n+/// * `mod`\n+/// * crate root (aka, top-level anonymous module)\n+/// * `enum`\n+/// * `trait`\n+/// * curly-braced block with statements\n+///\n+/// You can use [`ModuleData::kind`] to determine the kind of module this is.\n pub struct ModuleData<'a> {\n+    /// The direct parent module (it may not be a `mod`, however).\n     parent: Option<Module<'a>>,\n+    /// What kind of module this is, because this may not be a `mod`.\n     kind: ModuleKind,\n \n-    // The def id of the closest normal module (`mod`) ancestor (including this module).\n-    normal_ancestor_id: DefId,\n+    /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).\n+    /// This may be the crate root.\n+    nearest_parent_mod: DefId,\n \n-    // Mapping between names and their (possibly in-progress) resolutions in this module.\n-    // Resolutions in modules from other crates are not populated until accessed.\n+    /// Mapping between names and their (possibly in-progress) resolutions in this module.\n+    /// Resolutions in modules from other crates are not populated until accessed.\n     lazy_resolutions: Resolutions<'a>,\n-    // True if this is a module from other crate that needs to be populated on access.\n+    /// True if this is a module from other crate that needs to be populated on access.\n     populate_on_access: Cell<bool>,\n \n-    // Macro invocations that can expand into items in this module.\n+    /// Macro invocations that can expand into items in this module.\n     unexpanded_invocations: RefCell<FxHashSet<ExpnId>>,\n \n+    /// Whether `#[no_implicit_prelude]` is active.\n     no_implicit_prelude: bool,\n \n     glob_importers: RefCell<Vec<&'a Import<'a>>>,\n     globs: RefCell<Vec<&'a Import<'a>>>,\n \n-    // Used to memoize the traits in this module for faster searches through all traits in scope.\n+    /// Used to memoize the traits in this module for faster searches through all traits in scope.\n     traits: RefCell<Option<Box<[(Ident, &'a NameBinding<'a>)]>>>,\n \n     /// Span of the module itself. Used for error reporting.\n@@ -492,16 +508,16 @@ impl<'a> ModuleData<'a> {\n     fn new(\n         parent: Option<Module<'a>>,\n         kind: ModuleKind,\n-        normal_ancestor_id: DefId,\n+        nearest_parent_mod: DefId,\n         expansion: ExpnId,\n         span: Span,\n     ) -> Self {\n         ModuleData {\n             parent,\n             kind,\n-            normal_ancestor_id,\n+            nearest_parent_mod,\n             lazy_resolutions: Default::default(),\n-            populate_on_access: Cell::new(!normal_ancestor_id.is_local()),\n+            populate_on_access: Cell::new(!nearest_parent_mod.is_local()),\n             unexpanded_invocations: Default::default(),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n@@ -1519,11 +1535,11 @@ impl<'a> Resolver<'a> {\n         &self,\n         parent: Module<'a>,\n         kind: ModuleKind,\n-        normal_ancestor_id: DefId,\n+        nearest_parent_mod: DefId,\n         expn_id: ExpnId,\n         span: Span,\n     ) -> Module<'a> {\n-        let module = ModuleData::new(Some(parent), kind, normal_ancestor_id, expn_id, span);\n+        let module = ModuleData::new(Some(parent), kind, nearest_parent_mod, expn_id, span);\n         self.arenas.alloc_module(module)\n     }\n \n@@ -2116,7 +2132,7 @@ impl<'a> Resolver<'a> {\n                 return self.graph_root;\n             }\n         };\n-        let module = self.get_module(DefId { index: CRATE_DEF_INDEX, ..module.normal_ancestor_id });\n+        let module = self.get_module(DefId { index: CRATE_DEF_INDEX, ..module.nearest_parent_mod });\n         debug!(\n             \"resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})\",\n             ident,\n@@ -2128,10 +2144,10 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {\n-        let mut module = self.get_module(module.normal_ancestor_id);\n+        let mut module = self.get_module(module.nearest_parent_mod);\n         while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {\n             let parent = module.parent.unwrap_or_else(|| self.macro_def_scope(ctxt.remove_mark()));\n-            module = self.get_module(parent.normal_ancestor_id);\n+            module = self.get_module(parent.nearest_parent_mod);\n         }\n         module\n     }\n@@ -2793,7 +2809,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n-        vis.is_accessible_from(module.normal_ancestor_id, self)\n+        vis.is_accessible_from(module.nearest_parent_mod, self)\n     }\n \n     fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {\n@@ -2817,7 +2833,7 @@ impl<'a> Resolver<'a> {\n             self.binding_parent_modules.get(&PtrKey(modularized)),\n         ) {\n             (Some(macro_rules), Some(modularized)) => {\n-                macro_rules.normal_ancestor_id == modularized.normal_ancestor_id\n+                macro_rules.nearest_parent_mod == modularized.nearest_parent_mod\n                     && modularized.is_ancestor_of(macro_rules)\n             }\n             _ => false,"}, {"sha": "e6360cccf3b96d9dfb35276b3fa78b1ac7092680", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3d52414e0d7786b8c79479938b2543521719be/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=5b3d52414e0d7786b8c79479938b2543521719be", "patch": "@@ -328,7 +328,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             if after_derive {\n                 self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n             }\n-            let normal_module_def_id = self.macro_def_scope(invoc_id).normal_ancestor_id;\n+            let normal_module_def_id = self.macro_def_scope(invoc_id).nearest_parent_mod;\n             self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }\n "}]}