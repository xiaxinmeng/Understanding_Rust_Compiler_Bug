{"sha": "675943712ce92e0ce04e85e6952f50bcbf1ee611", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTk0MzcxMmNlOTJlMGNlMDRlODVlNjk1MmY1MGJjYmYxZWU2MTE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-25T07:13:16Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-25T07:13:16Z"}, "message": "Merge #630\n\n630: Fill in DocumentSymbol::detail r=matklad a=hban\n\nCloses: #516\r\n\r\nI just pulled type text from the syntax node and \"formatted\" is bit. VS Code can't really handle multi-line symbol detail (it's will crop it when rendering), so that formatting will just collapse all white-space to singe space. It isn't pretty, but maybe there's a better way.\r\n\r\nIssue also mentions \"need to be done for `NavigationTarget` to `SymbolInformation`\", but `SymbolInformation` doesn't have detail field on it?\n\nCo-authored-by: Hrvoje Ban <hban@users.noreply.github.com>", "tree": {"sha": "20e611b63e26157457855db38d4fd866e6d3e7cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e611b63e26157457855db38d4fd866e6d3e7cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675943712ce92e0ce04e85e6952f50bcbf1ee611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675943712ce92e0ce04e85e6952f50bcbf1ee611", "html_url": "https://github.com/rust-lang/rust/commit/675943712ce92e0ce04e85e6952f50bcbf1ee611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675943712ce92e0ce04e85e6952f50bcbf1ee611/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "1d4b421aad0bbcd26d88e65b28dbbb4efb51d155", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4b421aad0bbcd26d88e65b28dbbb4efb51d155", "html_url": "https://github.com/rust-lang/rust/commit/1d4b421aad0bbcd26d88e65b28dbbb4efb51d155"}, {"sha": "4eff8ddb8b8352d432d87198d43c674696ca9344", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff8ddb8b8352d432d87198d43c674696ca9344", "html_url": "https://github.com/rust-lang/rust/commit/4eff8ddb8b8352d432d87198d43c674696ca9344"}], "stats": {"total": 238, "additions": 179, "deletions": 59}, "files": [{"sha": "b96398950ef19e5ade431ba499eee614ecbcc6ae", "filename": "crates/ra_ide_api_light/src/snapshots/tests__file_structure.snap", "status": "modified", "additions": 71, "deletions": 27, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_ide_api_light%2Fsrc%2Fsnapshots%2Ftests__file_structure.snap", "raw_url": "https://github.com/rust-lang/rust/raw/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_ide_api_light%2Fsrc%2Fsnapshots%2Ftests__file_structure.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fsnapshots%2Ftests__file_structure.snap?ref=675943712ce92e0ce04e85e6952f50bcbf1ee611", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-22T14:45:01.959724300+00:00\"\n+created: \"2019-01-24T18:04:00.090162+00:00\"\n creator: insta@0.4.0\n expression: structure\n source: \"crates\\\\ra_ide_api_light\\\\src\\\\structure.rs\"\n@@ -10,7 +10,8 @@ source: \"crates\\\\ra_ide_api_light\\\\src\\\\structure.rs\"\n         label: \"Foo\",\n         navigation_range: [8; 11),\n         node_range: [1; 26),\n-        kind: STRUCT_DEF\n+        kind: STRUCT_DEF,\n+        detail: None\n     },\n     StructureNode {\n         parent: Some(\n@@ -19,64 +20,107 @@ source: \"crates\\\\ra_ide_api_light\\\\src\\\\structure.rs\"\n         label: \"x\",\n         navigation_range: [18; 19),\n         node_range: [18; 24),\n-        kind: NAMED_FIELD_DEF\n+        kind: NAMED_FIELD_DEF,\n+        detail: Some(\n+            \"i32\"\n+        )\n     },\n     StructureNode {\n         parent: None,\n         label: \"m\",\n         navigation_range: [32; 33),\n-        node_range: [28; 53),\n-        kind: MODULE\n+        node_range: [28; 158),\n+        kind: MODULE,\n+        detail: None\n     },\n     StructureNode {\n         parent: Some(\n             2\n         ),\n-        label: \"bar\",\n-        navigation_range: [43; 46),\n-        node_range: [40; 51),\n-        kind: FN_DEF\n+        label: \"bar1\",\n+        navigation_range: [43; 47),\n+        node_range: [40; 52),\n+        kind: FN_DEF,\n+        detail: Some(\n+            \"fn()\"\n+        )\n+    },\n+    StructureNode {\n+        parent: Some(\n+            2\n+        ),\n+        label: \"bar2\",\n+        navigation_range: [60; 64),\n+        node_range: [57; 81),\n+        kind: FN_DEF,\n+        detail: Some(\n+            \"fn<T>(t: T) -> T\"\n+        )\n+    },\n+    StructureNode {\n+        parent: Some(\n+            2\n+        ),\n+        label: \"bar3\",\n+        navigation_range: [89; 93),\n+        node_range: [86; 156),\n+        kind: FN_DEF,\n+        detail: Some(\n+            \"fn<A, B>(a: A, b: B) -> Vec< u32 >\"\n+        )\n     },\n     StructureNode {\n         parent: None,\n         label: \"E\",\n-        navigation_range: [60; 61),\n-        node_range: [55; 75),\n-        kind: ENUM_DEF\n+        navigation_range: [165; 166),\n+        node_range: [160; 180),\n+        kind: ENUM_DEF,\n+        detail: None\n     },\n     StructureNode {\n         parent: None,\n         label: \"T\",\n-        navigation_range: [81; 82),\n-        node_range: [76; 88),\n-        kind: TYPE_DEF\n+        navigation_range: [186; 187),\n+        node_range: [181; 193),\n+        kind: TYPE_DEF,\n+        detail: Some(\n+            \"()\"\n+        )\n     },\n     StructureNode {\n         parent: None,\n         label: \"S\",\n-        navigation_range: [96; 97),\n-        node_range: [89; 108),\n-        kind: STATIC_DEF\n+        navigation_range: [201; 202),\n+        node_range: [194; 213),\n+        kind: STATIC_DEF,\n+        detail: Some(\n+            \"i32\"\n+        )\n     },\n     StructureNode {\n         parent: None,\n         label: \"C\",\n-        navigation_range: [115; 116),\n-        node_range: [109; 127),\n-        kind: CONST_DEF\n+        navigation_range: [220; 221),\n+        node_range: [214; 232),\n+        kind: CONST_DEF,\n+        detail: Some(\n+            \"i32\"\n+        )\n     },\n     StructureNode {\n         parent: None,\n         label: \"impl E\",\n-        navigation_range: [134; 135),\n-        node_range: [129; 138),\n-        kind: IMPL_BLOCK\n+        navigation_range: [239; 240),\n+        node_range: [234; 243),\n+        kind: IMPL_BLOCK,\n+        detail: None\n     },\n     StructureNode {\n         parent: None,\n         label: \"impl fmt::Debug for E\",\n-        navigation_range: [160; 161),\n-        node_range: [140; 164),\n-        kind: IMPL_BLOCK\n+        navigation_range: [265; 266),\n+        node_range: [245; 269),\n+        kind: IMPL_BLOCK,\n+        detail: None\n     }\n ]"}, {"sha": "e3713c2171ee37dbe87a053963ef789a9a6cf472", "filename": "crates/ra_ide_api_light/src/structure.rs", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fstructure.rs?ref=675943712ce92e0ce04e85e6952f50bcbf1ee611", "patch": "@@ -2,7 +2,7 @@ use crate::TextRange;\n \n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    ast::{self, NameOwner},\n+    ast::{self, NameOwner, TypeParamsOwner},\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n };\n \n@@ -13,6 +13,7 @@ pub struct StructureNode {\n     pub navigation_range: TextRange,\n     pub node_range: TextRange,\n     pub kind: SyntaxKind,\n+    pub detail: Option<String>,\n }\n \n pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n@@ -40,26 +41,73 @@ pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     fn decl<N: NameOwner>(node: &N) -> Option<StructureNode> {\n+        decl_with_detail(node, None)\n+    }\n+\n+    fn decl_with_type_ref<N: NameOwner>(\n+        node: &N,\n+        type_ref: Option<&ast::TypeRef>,\n+    ) -> Option<StructureNode> {\n+        let detail = type_ref.map(|type_ref| {\n+            let mut detail = String::new();\n+            collapse_ws(type_ref.syntax(), &mut detail);\n+            detail\n+        });\n+        decl_with_detail(node, detail)\n+    }\n+\n+    fn decl_with_detail<N: NameOwner>(node: &N, detail: Option<String>) -> Option<StructureNode> {\n         let name = node.name()?;\n         Some(StructureNode {\n             parent: None,\n             label: name.text().to_string(),\n             navigation_range: name.syntax().range(),\n             node_range: node.syntax().range(),\n             kind: node.syntax().kind(),\n+            detail,\n         })\n     }\n \n+    fn collapse_ws(node: &SyntaxNode, output: &mut String) {\n+        let mut can_insert_ws = false;\n+        for line in node.text().chunks().flat_map(|chunk| chunk.lines()) {\n+            let line = line.trim();\n+            if line.is_empty() {\n+                if can_insert_ws {\n+                    output.push_str(\" \");\n+                    can_insert_ws = false;\n+                }\n+            } else {\n+                output.push_str(line);\n+                can_insert_ws = true;\n+            }\n+        }\n+    }\n+\n     visitor()\n-        .visit(decl::<ast::FnDef>)\n+        .visit(|fn_def: &ast::FnDef| {\n+            let mut detail = String::from(\"fn\");\n+            if let Some(type_param_list) = fn_def.type_param_list() {\n+                collapse_ws(type_param_list.syntax(), &mut detail);\n+            }\n+            if let Some(param_list) = fn_def.param_list() {\n+                collapse_ws(param_list.syntax(), &mut detail);\n+            }\n+            if let Some(ret_type) = fn_def.ret_type() {\n+                detail.push_str(\" \");\n+                collapse_ws(ret_type.syntax(), &mut detail);\n+            }\n+\n+            decl_with_detail(fn_def, Some(detail))\n+        })\n         .visit(decl::<ast::StructDef>)\n-        .visit(decl::<ast::NamedFieldDef>)\n+        .visit(|nfd: &ast::NamedFieldDef| decl_with_type_ref(nfd, nfd.type_ref()))\n         .visit(decl::<ast::EnumDef>)\n         .visit(decl::<ast::TraitDef>)\n         .visit(decl::<ast::Module>)\n-        .visit(decl::<ast::TypeDef>)\n-        .visit(decl::<ast::ConstDef>)\n-        .visit(decl::<ast::StaticDef>)\n+        .visit(|td: &ast::TypeDef| decl_with_type_ref(td, td.type_ref()))\n+        .visit(|cd: &ast::ConstDef| decl_with_type_ref(cd, cd.type_ref()))\n+        .visit(|sd: &ast::StaticDef| decl_with_type_ref(sd, sd.type_ref()))\n         .visit(|im: &ast::ImplBlock| {\n             let target_type = im.target_type()?;\n             let target_trait = im.target_trait();\n@@ -78,6 +126,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 navigation_range: target_type.syntax().range(),\n                 node_range: im.syntax().range(),\n                 kind: im.syntax().kind(),\n+                detail: None,\n             };\n             Some(node)\n         })\n@@ -98,7 +147,13 @@ struct Foo {\n }\n \n mod m {\n-    fn bar() {}\n+    fn bar1() {}\n+    fn bar2<T>(t: T) -> T {}\n+    fn bar3<A,\n+        B>(a: A,\n+        b: B) -> Vec<\n+        u32\n+    > {}\n }\n \n enum E { X, Y(i32) }"}, {"sha": "c0fe0216d06dac1e503a9221255fa1344cf829b3", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=675943712ce92e0ce04e85e6952f50bcbf1ee611", "patch": "@@ -136,7 +136,7 @@ pub fn handle_document_symbol(\n     for symbol in world.analysis().file_structure(file_id) {\n         let doc_symbol = DocumentSymbol {\n             name: symbol.label,\n-            detail: Some(\"\".to_string()),\n+            detail: symbol.detail,\n             kind: symbol.kind.conv(),\n             deprecated: None,\n             range: symbol.node_range.conv_with(&line_index),"}, {"sha": "7da19d7822908e3eab7ff14140d8fab7e0ab7d2c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=675943712ce92e0ce04e85e6952f50bcbf1ee611", "patch": "@@ -598,7 +598,11 @@ impl ast::NameOwner for ConstDef {}\n impl ast::TypeParamsOwner for ConstDef {}\n impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n-impl ConstDef {}\n+impl ConstDef {\n+    pub fn type_ref(&self) -> Option<&TypeRef> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ContinueExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -3407,7 +3411,11 @@ impl ast::NameOwner for StaticDef {}\n impl ast::TypeParamsOwner for StaticDef {}\n impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n-impl StaticDef {}\n+impl StaticDef {\n+    pub fn type_ref(&self) -> Option<&TypeRef> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Stmt\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -3948,7 +3956,11 @@ impl ast::NameOwner for TypeDef {}\n impl ast::TypeParamsOwner for TypeDef {}\n impl ast::AttrsOwner for TypeDef {}\n impl ast::DocCommentsOwner for TypeDef {}\n-impl TypeDef {}\n+impl TypeDef {\n+    pub fn type_ref(&self) -> Option<&TypeRef> {\n+        super::child_opt(self)\n+    }\n+}\n \n // TypeParam\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "cb5d6cde80eafa3e2caeca2875d8ad396b908467", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/675943712ce92e0ce04e85e6952f50bcbf1ee611/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=675943712ce92e0ce04e85e6952f50bcbf1ee611", "patch": "@@ -289,27 +289,36 @@ Grammar(\n             collections: [[\"impl_items\", \"ImplItem\"]],\n             traits: [ \"FnDefOwner\", \"ModuleItemOwner\" ],\n         ),\n-        \"ConstDef\": ( traits: [\n-            \"VisibilityOwner\",\n-            \"NameOwner\",\n-            \"TypeParamsOwner\",\n-            \"AttrsOwner\",\n-            \"DocCommentsOwner\"\n-        ] ),\n-        \"StaticDef\": ( traits: [\n-            \"VisibilityOwner\",\n-            \"NameOwner\",\n-            \"TypeParamsOwner\",\n-            \"AttrsOwner\",\n-            \"DocCommentsOwner\"\n-        ] ),\n-        \"TypeDef\": ( traits: [\n-            \"VisibilityOwner\",\n-            \"NameOwner\",\n-            \"TypeParamsOwner\",\n-            \"AttrsOwner\",\n-            \"DocCommentsOwner\"\n-        ] ),\n+        \"ConstDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"TypeParamsOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\"\n+            ],\n+            options: [\"TypeRef\"]\n+        ),\n+        \"StaticDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"TypeParamsOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\"\n+            ],\n+            options: [\"TypeRef\"]\n+        ),\n+        \"TypeDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"TypeParamsOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\"\n+            ],\n+            options: [\"TypeRef\"]\n+        ),\n         \"ImplBlock\": (options: [\"ItemList\"]),\n \n         \"ParenType\": (options: [\"TypeRef\"]),"}]}