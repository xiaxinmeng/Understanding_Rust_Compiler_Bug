{"sha": "25e8f8eddfb872e863e19d044656777b116b9d46", "node_id": "C_kwDOAAsO6NoAKDI1ZThmOGVkZGZiODcyZTg2M2UxOWQwNDQ2NTY3NzdiMTE2YjlkNDY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-24T18:20:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T13:32:10Z"}, "message": "Expand VisitMachineValues to cover more pointers in the interpreter", "tree": {"sha": "2b3e28bdcc773c483bb153af17f645c9cc07a4d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3e28bdcc773c483bb153af17f645c9cc07a4d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e8f8eddfb872e863e19d044656777b116b9d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e8f8eddfb872e863e19d044656777b116b9d46", "html_url": "https://github.com/rust-lang/rust/commit/25e8f8eddfb872e863e19d044656777b116b9d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e8f8eddfb872e863e19d044656777b116b9d46/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cb715b0405202132df7143e02328be1eb0c597", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cb715b0405202132df7143e02328be1eb0c597", "html_url": "https://github.com/rust-lang/rust/commit/17cb715b0405202132df7143e02328be1eb0c597"}], "stats": {"total": 189, "additions": 156, "deletions": 33}, "files": [{"sha": "dfe2e9f05dafd6d2bee87bb2b3506b7ad58f6b80", "filename": "src/tools/miri/src/concurrency/range_object_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Frange_object_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Frange_object_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Frange_object_map.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -132,6 +132,10 @@ impl<T> RangeObjectMap<T> {\n     pub fn remove_from_pos(&mut self, pos: Position) {\n         self.v.remove(pos);\n     }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n+        self.v.iter().map(|e| &e.data)\n+    }\n }\n \n impl<T> Index<Position> for RangeObjectMap<T> {"}, {"sha": "7b91f8c223ab6ca2aabb97733a37c25f6aa8a64b", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -181,6 +181,41 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n     }\n }\n \n+impl VisitMachineValues for Thread<'_, '_> {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        let Thread { panic_payload, last_error, stack, .. } = self;\n+\n+        if let Some(payload) = panic_payload {\n+            visit(&Operand::Immediate(Immediate::Scalar(*payload)))\n+        }\n+        if let Some(error) = last_error {\n+            visit(&Operand::Indirect(**error))\n+        }\n+        for frame in stack {\n+            frame.visit_machine_values(visit)\n+        }\n+    }\n+}\n+\n+impl VisitMachineValues for Frame<'_, '_, Provenance, FrameData<'_>> {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        let Frame { return_place, locals, extra, .. } = self;\n+\n+        // Return place.\n+        if let Place::Ptr(mplace) = **return_place {\n+            visit(&Operand::Indirect(mplace));\n+        }\n+        // Locals.\n+        for local in locals.iter() {\n+            if let LocalValue::Live(value) = &local.value {\n+                visit(value);\n+            }\n+        }\n+\n+        extra.visit_machine_values(visit);\n+    }\n+}\n+\n /// A specific moment in time.\n #[derive(Debug)]\n pub enum Time {\n@@ -253,6 +288,22 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n     }\n }\n \n+impl VisitMachineValues for ThreadManager<'_, '_> {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        let ThreadManager { threads, thread_local_alloc_ids, .. } = self;\n+\n+        for thread in threads {\n+            thread.visit_machine_values(visit);\n+        }\n+        for ptr in thread_local_alloc_ids.borrow().values().copied() {\n+            let ptr: Pointer<Option<Provenance>> = ptr.into();\n+            visit(&Operand::Indirect(MemPlace::from_ptr(ptr)));\n+        }\n+        // FIXME: Do we need to do something for TimeoutCallback? That's a Box<dyn>, not sure what\n+        // to do.\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     pub(crate) fn init(ecx: &mut MiriInterpCx<'mir, 'tcx>) {\n         if ecx.tcx.sess.target.os.as_ref() != \"windows\" {\n@@ -625,33 +676,6 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     }\n }\n \n-impl VisitMachineValues for ThreadManager<'_, '_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        // FIXME some other fields also contain machine values\n-        let ThreadManager { threads, .. } = self;\n-\n-        for thread in threads {\n-            // FIXME: implement VisitMachineValues for `Thread` and `Frame` instead.\n-            // In particular we need to visit the `last_error` and `catch_unwind` fields.\n-            if let Some(payload) = thread.panic_payload {\n-                visit(&Operand::Immediate(Immediate::Scalar(payload)))\n-            }\n-            for frame in &thread.stack {\n-                // Return place.\n-                if let Place::Ptr(mplace) = *frame.return_place {\n-                    visit(&Operand::Indirect(mplace));\n-                }\n-                // Locals.\n-                for local in frame.locals.iter() {\n-                    if let LocalValue::Live(value) = &local.value {\n-                        visit(value);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n // Public interface to thread management.\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {"}, {"sha": "aa4e5add5031c63148834ed0fc9a9ececd51ec56", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -108,6 +108,19 @@ pub struct StoreBufferAlloc {\n     store_buffers: RefCell<RangeObjectMap<StoreBuffer>>,\n }\n \n+impl StoreBufferAlloc {\n+    pub fn iter(&self, mut visitor: impl FnMut(&Scalar<Provenance>)) {\n+        for val in self\n+            .store_buffers\n+            .borrow()\n+            .iter()\n+            .flat_map(|buf| buf.buffer.iter().map(|element| &element.val))\n+        {\n+            visitor(val)\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub(super) struct StoreBuffer {\n     // Stores to this location in modification order"}, {"sha": "6a06df2a16b342ff24471ede30f91b88d1b135ee", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -63,6 +63,16 @@ impl<'tcx> std::fmt::Debug for FrameData<'tcx> {\n     }\n }\n \n+impl VisitMachineValues for FrameData<'_> {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        let FrameData { catch_unwind, .. } = self;\n+\n+        if let Some(catch_unwind) = catch_unwind {\n+            catch_unwind.visit_machine_values(visit);\n+        }\n+    }\n+}\n+\n /// Extra memory kinds\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum MiriMemoryKind {\n@@ -593,12 +603,36 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n \n impl VisitMachineValues for MiriMachine<'_, '_> {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n-        // FIXME: visit the missing fields: env vars, weak mem, the MemPlace fields in the machine,\n-        // DirHandler, extern_statics, the Stacked Borrows base pointers; maybe more.\n-        let MiriMachine { threads, tls, .. } = self;\n+        let MiriMachine {\n+            threads,\n+            tls,\n+            env_vars,\n+            argc,\n+            argv,\n+            cmd_line,\n+            extern_statics,\n+            dir_handler,\n+            ..\n+        } = self;\n \n         threads.visit_machine_values(visit);\n         tls.visit_machine_values(visit);\n+        env_vars.visit_machine_values(visit);\n+        dir_handler.visit_machine_values(visit);\n+\n+        if let Some(argc) = argc {\n+            visit(&Operand::Indirect(*argc));\n+        }\n+        if let Some(argv) = argv {\n+            visit(&Operand::Indirect(*argv));\n+        }\n+        if let Some(cmd_line) = cmd_line {\n+            visit(&Operand::Indirect(*cmd_line));\n+        }\n+        for ptr in extern_statics.values().copied() {\n+            let ptr: Pointer<Option<Provenance>> = ptr.into();\n+            visit(&Operand::Indirect(MemPlace::from_ptr(ptr)));\n+        }\n     }\n }\n "}, {"sha": "ad2d2eaab34f58d3303537f698c268ca515e47b4", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -36,6 +36,20 @@ pub struct EnvVars<'tcx> {\n     pub(crate) environ: Option<MPlaceTy<'tcx, Provenance>>,\n }\n \n+impl VisitMachineValues for EnvVars<'_> {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        let EnvVars { map, environ } = self;\n+\n+        for ptr in map.values() {\n+            visit(&Operand::Indirect(MemPlace::from_ptr(*ptr)));\n+        }\n+\n+        if let Some(env) = environ {\n+            visit(&Operand::Indirect(**env));\n+        }\n+    }\n+}\n+\n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,"}, {"sha": "dd6e2d53b4e8c2fe57fc23cbaac0514959aba699", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -35,6 +35,13 @@ pub struct CatchUnwindData<'tcx> {\n     ret: mir::BasicBlock,\n }\n \n+impl VisitMachineValues for CatchUnwindData<'_> {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        visit(&Operand::Indirect(MemPlace::from_ptr(self.catch_fn)));\n+        visit(&Operand::Immediate(Immediate::Scalar(self.data)));\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Handles the special `miri_start_panic` intrinsic, which is called"}, {"sha": "576e12d34757f1852b0ddac6dd3cdf0ccebfe57b", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -462,6 +462,14 @@ impl Default for DirHandler {\n     }\n }\n \n+impl VisitMachineValues for DirHandler {\n+    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+        for dir in self.streams.values() {\n+            visit(&Operand::Indirect(MemPlace::from_ptr(dir.entry)));\n+        }\n+    }\n+}\n+\n fn maybe_sync_file(\n     file: &File,\n     writable: bool,"}, {"sha": "956f936dbcad8b6c99c2b7ea3b597065cce19b3e", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -79,7 +79,7 @@ pub struct Stacks {\n     /// Stores past operations on this allocation\n     history: AllocHistory,\n     /// The set of tags that have been exposed inside this allocation.\n-    exposed_tags: FxHashSet<SbTag>,\n+    pub exposed_tags: FxHashSet<SbTag>,\n     /// Whether this memory has been modified since the last time the tag GC ran\n     modified_since_last_gc: bool,\n }"}, {"sha": "eb30f023935b9dbaff4c3d871f4a1aee529a8f00", "filename": "src/tools/miri/src/stacked_borrows/stack.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -43,8 +43,11 @@ impl Stack {\n     pub fn retain(&mut self, tags: &FxHashSet<SbTag>) {\n         let mut first_removed = None;\n \n-        let mut read_idx = 1;\n-        let mut write_idx = 1;\n+        // For stacks with a known bottom, we never consider removing the bottom-most tag, because\n+        // that is the base tag which exists whether or not there are any pointers to the\n+        // allocation.\n+        let mut read_idx = usize::from(self.unknown_bottom.is_none());\n+        let mut write_idx = read_idx;\n         while read_idx < self.borrows.len() {\n             let left = self.borrows[read_idx - 1];\n             let this = self.borrows[read_idx];"}, {"sha": "9378cc1e9207dd03d612af92b8a65c4d3e186468", "filename": "src/tools/miri/src/tag_gc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e8f8eddfb872e863e19d044656777b116b9d46/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs?ref=25e8f8eddfb872e863e19d044656777b116b9d46", "patch": "@@ -71,6 +71,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                         tags.insert(*sb);\n                     }\n                 }\n+                let stacks = alloc\n+                    .extra\n+                    .stacked_borrows\n+                    .as_ref()\n+                    .expect(\"we should not even enter the GC if Stacked Borrows is disabled\");\n+                tags.extend(&stacks.borrow().exposed_tags);\n+\n+                if let Some(store_buffers) = alloc.extra.weak_memory.as_ref() {\n+                    store_buffers.iter(|val| {\n+                        if let Scalar::Ptr(ptr, _) = val {\n+                            if let Provenance::Concrete { sb, .. } = ptr.provenance {\n+                                tags.insert(sb);\n+                            }\n+                        }\n+                    });\n+                }\n             },\n         );\n "}]}