{"sha": "fc838ad0fd75fa294d3067e281105afd1a956f65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjODM4YWQwZmQ3NWZhMjk0ZDMwNjdlMjgxMTA1YWZkMWE5NTZmNjU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-10-31T17:07:13Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-02T14:43:12Z"}, "message": "syntax: Use UFCS instead of `secret_*` fns in expansion of `format_args!`", "tree": {"sha": "5c8cd332a5cef8df0438a99ee3a6448aa8fdaeb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8cd332a5cef8df0438a99ee3a6448aa8fdaeb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc838ad0fd75fa294d3067e281105afd1a956f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc838ad0fd75fa294d3067e281105afd1a956f65", "html_url": "https://github.com/rust-lang/rust/commit/fc838ad0fd75fa294d3067e281105afd1a956f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc838ad0fd75fa294d3067e281105afd1a956f65/comments", "author": null, "committer": null, "parents": [{"sha": "3327ecca422046699315122345c6c050ab73804b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3327ecca422046699315122345c6c050ab73804b", "html_url": "https://github.com/rust-lang/rust/commit/3327ecca422046699315122345c6c050ab73804b"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "486ce910e2b6f9e6d40dd66af4888666573d60b1", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fc838ad0fd75fa294d3067e281105afd1a956f65/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc838ad0fd75fa294d3067e281105afd1a956f65/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=fc838ad0fd75fa294d3067e281105afd1a956f65", "patch": "@@ -663,28 +663,28 @@ impl<'a, 'b> Context<'a, 'b> {\n     fn format_arg(ecx: &ExtCtxt, sp: Span,\n                   ty: &ArgumentType, arg: P<ast::Expr>)\n                   -> P<ast::Expr> {\n-        let (krate, fmt_fn) = match *ty {\n+        let trait_ = match *ty {\n             Known(ref tyname) => {\n                 match tyname.as_slice() {\n-                    \"\"  => (\"std\", \"secret_show\"),\n-                    \"b\" => (\"std\", \"secret_bool\"),\n-                    \"c\" => (\"std\", \"secret_char\"),\n-                    \"d\" | \"i\" => (\"std\", \"secret_signed\"),\n-                    \"e\" => (\"std\", \"secret_lower_exp\"),\n-                    \"E\" => (\"std\", \"secret_upper_exp\"),\n-                    \"f\" => (\"std\", \"secret_float\"),\n-                    \"o\" => (\"std\", \"secret_octal\"),\n-                    \"p\" => (\"std\", \"secret_pointer\"),\n-                    \"s\" => (\"std\", \"secret_string\"),\n-                    \"t\" => (\"std\", \"secret_binary\"),\n-                    \"u\" => (\"std\", \"secret_unsigned\"),\n-                    \"x\" => (\"std\", \"secret_lower_hex\"),\n-                    \"X\" => (\"std\", \"secret_upper_hex\"),\n+                    \"\"  => \"Show\",\n+                    \"b\" => \"Bool\",\n+                    \"c\" => \"Char\",\n+                    \"d\" | \"i\" => \"Signed\",\n+                    \"e\" => \"LowerExp\",\n+                    \"E\" => \"UpperExp\",\n+                    \"f\" => \"Float\",\n+                    \"o\" => \"Octal\",\n+                    \"p\" => \"Pointer\",\n+                    \"s\" => \"String\",\n+                    \"t\" => \"Binary\",\n+                    \"u\" => \"Unsigned\",\n+                    \"x\" => \"LowerHex\",\n+                    \"X\" => \"UpperHex\",\n                     _ => {\n                         ecx.span_err(sp,\n                                      format!(\"unknown format trait `{}`\",\n                                              *tyname).as_slice());\n-                        (\"std\", \"dummy\")\n+                        \"Dummy\"\n                     }\n                 }\n             }\n@@ -697,9 +697,10 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n \n         let format_fn = ecx.path_global(sp, vec![\n-                ecx.ident_of(krate),\n+                ecx.ident_of(\"std\"),\n                 ecx.ident_of(\"fmt\"),\n-                ecx.ident_of(fmt_fn)]);\n+                ecx.ident_of(trait_),\n+                ecx.ident_of(\"fmt\")]);\n         ecx.expr_call_global(sp, vec![\n                 ecx.ident_of(\"std\"),\n                 ecx.ident_of(\"fmt\"),"}]}