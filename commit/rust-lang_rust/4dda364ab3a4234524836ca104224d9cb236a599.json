{"sha": "4dda364ab3a4234524836ca104224d9cb236a599", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZGEzNjRhYjNhNDIzNDUyNDgzNmNhMTA0MjI0ZDljYjIzNmE1OTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-01T13:19:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-01T13:19:41Z"}, "message": "Auto merge of #30135 - michaelwoerister:interning-checks, r=sanxiyn\n\nThis PR adds some safety checks to interning things in `ty::ctxt`. Accidentally re-interning an `AdtDef` has bitten me in the behind just last week (it messes up things in very subtle way only showing up later as an LLVM assertion).\n\nInitially I had also added a check to `ty::ctxt::node_type_insert()` -- but there it seems to be expected that the same table slot is written to multiple times.\n\nRoll-up candidate.", "tree": {"sha": "72ce8cd21d333d6bff34b897ead535b11f4a13e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ce8cd21d333d6bff34b897ead535b11f4a13e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dda364ab3a4234524836ca104224d9cb236a599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dda364ab3a4234524836ca104224d9cb236a599", "html_url": "https://github.com/rust-lang/rust/commit/4dda364ab3a4234524836ca104224d9cb236a599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dda364ab3a4234524836ca104224d9cb236a599/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bfdedb0103e4fa6d89d7bc192dade6e8b26164a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bfdedb0103e4fa6d89d7bc192dade6e8b26164a", "html_url": "https://github.com/rust-lang/rust/commit/0bfdedb0103e4fa6d89d7bc192dade6e8b26164a"}, {"sha": "f6a1db6199aec28952e0f43b201605fdc45f4a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a1db6199aec28952e0f43b201605fdc45f4a69", "html_url": "https://github.com/rust-lang/rust/commit/f6a1db6199aec28952e0f43b201605fdc45f4a69"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "cee651743ca866d08cb3120cc8b560f1a761da6a", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4dda364ab3a4234524836ca104224d9cb236a599/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dda364ab3a4234524836ca104224d9cb236a599/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=4dda364ab3a4234524836ca104224d9cb236a599", "patch": "@@ -408,7 +408,10 @@ impl<'tcx> ctxt<'tcx> {\n                             -> &'tcx ty::TraitDef<'tcx> {\n         let did = def.trait_ref.def_id;\n         let interned = self.arenas.trait_defs.alloc(def);\n-        self.trait_defs.borrow_mut().insert(did, interned);\n+        if let Some(prev) = self.trait_defs.borrow_mut().insert(did, interned) {\n+            self.sess.bug(&format!(\"Tried to overwrite interned TraitDef: {:?}\",\n+                                   prev))\n+        }\n         interned\n     }\n \n@@ -425,7 +428,10 @@ impl<'tcx> ctxt<'tcx> {\n         let def = ty::AdtDefData::new(self, did, kind, variants);\n         let interned = self.arenas.adt_defs.alloc(def);\n         // this will need a transmute when reverse-variance is removed\n-        self.adt_defs.borrow_mut().insert(did, interned);\n+        if let Some(prev) = self.adt_defs.borrow_mut().insert(did, interned) {\n+            self.sess.bug(&format!(\"Tried to overwrite interned AdtDef: {:?}\",\n+                                   prev))\n+        }\n         interned\n     }\n \n@@ -435,13 +441,20 @@ impl<'tcx> ctxt<'tcx> {\n         }\n \n         let interned = self.arenas.stability.alloc(stab);\n-        self.stability_interner.borrow_mut().insert(interned, interned);\n+        if let Some(prev) = self.stability_interner\n+                                .borrow_mut()\n+                                .insert(interned, interned) {\n+            self.sess.bug(&format!(\"Tried to overwrite interned Stability: {:?}\",\n+                                   prev))\n+        }\n         interned\n     }\n \n     pub fn store_free_region_map(&self, id: NodeId, map: FreeRegionMap) {\n-        self.free_region_maps.borrow_mut()\n-                             .insert(id, map);\n+        if self.free_region_maps.borrow_mut().insert(id, map).is_some() {\n+            self.sess.bug(&format!(\"Tried to overwrite interned FreeRegionMap for NodeId {:?}\",\n+                                   id))\n+        }\n     }\n \n     pub fn free_region_map(&self, id: NodeId) -> FreeRegionMap {"}]}