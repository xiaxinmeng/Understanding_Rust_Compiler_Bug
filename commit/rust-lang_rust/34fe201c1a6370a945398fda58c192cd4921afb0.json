{"sha": "34fe201c1a6370a945398fda58c192cd4921afb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZmUyMDFjMWE2MzcwYTk0NTM5OGZkYTU4YzE5MmNkNDkyMWFmYjA=", "commit": {"author": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-11-01T04:32:52Z"}, "committer": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-12-08T03:29:25Z"}, "message": "Fix some str docs to refer to patterns", "tree": {"sha": "7a96f95c7c5e2db99f5e3a7e0ceaee5eab0e03e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a96f95c7c5e2db99f5e3a7e0ceaee5eab0e03e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34fe201c1a6370a945398fda58c192cd4921afb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34fe201c1a6370a945398fda58c192cd4921afb0", "html_url": "https://github.com/rust-lang/rust/commit/34fe201c1a6370a945398fda58c192cd4921afb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34fe201c1a6370a945398fda58c192cd4921afb0/comments", "author": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd", "html_url": "https://github.com/rust-lang/rust/commit/e7f3d6eddd28a917c9a0f7cd73a489048ca7f4cd"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "be2542dbdca6bda39e2307d1a402359de09ce1ce", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34fe201c1a6370a945398fda58c192cd4921afb0/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fe201c1a6370a945398fda58c192cd4921afb0/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=34fe201c1a6370a945398fda58c192cd4921afb0", "patch": "@@ -857,9 +857,10 @@ impl str {\n         Utf16Units { encoder: Utf16Encoder::new(self[..].chars()) }\n     }\n \n-    /// Returns `true` if the given `&str` is a sub-slice of this string slice.\n+    /// Returns `true` if the given pattern matches a sub-slice of\n+    /// this string slice.\n     ///\n-    /// Returns `false` if it's not.\n+    /// Returns `false` if it does not.\n     ///\n     /// # Examples\n     ///\n@@ -876,9 +877,10 @@ impl str {\n         core_str::StrExt::contains(self, pat)\n     }\n \n-    /// Returns `true` if the given `&str` is a prefix of this string slice.\n+    /// Returns `true` if the given pattern matches a prefix of this\n+    /// string slice.\n     ///\n-    /// Returns `false` if it's not.\n+    /// Returns `false` if it does not.\n     ///\n     /// # Examples\n     ///\n@@ -895,9 +897,10 @@ impl str {\n         core_str::StrExt::starts_with(self, pat)\n     }\n \n-    /// Returns `true` if the given `&str` is a suffix of this string slice.\n+    /// Returns `true` if the given pattern matches a suffix of this\n+    /// string slice.\n     ///\n-    /// Returns `false` if not.\n+    /// Returns `false` if it does not.\n     ///\n     /// # Examples\n     ///\n@@ -1681,11 +1684,11 @@ impl str {\n         core_str::StrExt::parse(self)\n     }\n \n-    /// Replaces all occurrences of one string with another.\n+    /// Replaces all matches of a pattern with another string.\n     ///\n     /// `replace` creates a new [`String`], and copies the data from this string slice into it.\n-    /// While doing so, it attempts to find a sub-`&str`. If it finds it, it replaces it with\n-    /// the replacement string slice.\n+    /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n+    /// replaces them with the replacement string slice.\n     ///\n     /// [`String`]: string/struct.String.html\n     ///\n@@ -1699,7 +1702,7 @@ impl str {\n     /// assert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n     /// ```\n     ///\n-    /// When a `&str` isn't found:\n+    /// When the pattern doesn't match:\n     ///\n     /// ```\n     /// let s = \"this is old\";"}]}