{"sha": "91d5d56c00d8e2926ccf856f14a4e52ef480d039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZDVkNTZjMDBkOGUyOTI2Y2NmODU2ZjE0YTRlNTJlZjQ4MGQwMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-04T03:34:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-04T03:34:32Z"}, "message": "Auto merge of #55682 - GuillaumeGomez:primitive-sidebar-link-gen, r=QuietMisdreavus\n\nFixes primitive sidebar link generation\n\nFixes #50746.\nFixes #55656.\n\nr? @QuietMisdreavus", "tree": {"sha": "f5fe12bee0c3d758ed4c3dcc190057c1f7574d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5fe12bee0c3d758ed4c3dcc190057c1f7574d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d5d56c00d8e2926ccf856f14a4e52ef480d039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5d56c00d8e2926ccf856f14a4e52ef480d039", "html_url": "https://github.com/rust-lang/rust/commit/91d5d56c00d8e2926ccf856f14a4e52ef480d039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d5d56c00d8e2926ccf856f14a4e52ef480d039/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5912a690e015e349b8948ad90dfc16a49b69ec8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5912a690e015e349b8948ad90dfc16a49b69ec8b", "html_url": "https://github.com/rust-lang/rust/commit/5912a690e015e349b8948ad90dfc16a49b69ec8b"}, {"sha": "c746ecfa0190548f78afe62d4d8e4140ac4e4621", "url": "https://api.github.com/repos/rust-lang/rust/commits/c746ecfa0190548f78afe62d4d8e4140ac4e4621", "html_url": "https://github.com/rust-lang/rust/commit/c746ecfa0190548f78afe62d4d8e4140ac4e4621"}], "stats": {"total": 110, "additions": 80, "deletions": 30}, "files": [{"sha": "bfd846797abe8047b59625e744f67ae65afe7eeb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/91d5d56c00d8e2926ccf856f14a4e52ef480d039/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5d56c00d8e2926ccf856f14a4e52ef480d039/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=91d5d56c00d8e2926ccf856f14a4e52ef480d039", "patch": "@@ -4249,13 +4249,30 @@ impl<'a> fmt::Display for Sidebar<'a> {\n     }\n }\n \n-fn get_methods(i: &clean::Impl, for_deref: bool) -> Vec<String> {\n+fn get_next_url(used_links: &mut FxHashSet<String>, url: String) -> String {\n+    if used_links.insert(url.clone()) {\n+        return url;\n+    }\n+    let mut add = 1;\n+    while used_links.insert(format!(\"{}-{}\", url, add)) == false {\n+        add += 1;\n+    }\n+    format!(\"{}-{}\", url, add)\n+}\n+\n+fn get_methods(\n+    i: &clean::Impl,\n+    for_deref: bool,\n+    used_links: &mut FxHashSet<String>,\n+) -> Vec<String> {\n     i.items.iter().filter_map(|item| {\n         match item.name {\n             // Maybe check with clean::Visibility::Public as well?\n             Some(ref name) if !name.is_empty() && item.visibility.is_some() && item.is_method() => {\n                 if !for_deref || should_render_item(item, false) {\n-                    Some(format!(\"<a href=\\\"#method.{name}\\\">{name}</a>\", name = name))\n+                    Some(format!(\"<a href=\\\"#{}\\\">{}</a>\",\n+                                 get_next_url(used_links, format!(\"method.{}\", name)),\n+                                 name))\n                 } else {\n                     None\n                 }\n@@ -4285,13 +4302,20 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n     let mut out = String::new();\n     let c = cache();\n     if let Some(v) = c.impls.get(&it.def_id) {\n-        let ret = v.iter()\n-                   .filter(|i| i.inner_impl().trait_.is_none())\n-                   .flat_map(|i| get_methods(i.inner_impl(), false))\n-                   .collect::<String>();\n-        if !ret.is_empty() {\n-            out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#methods\\\">Methods\\\n-                                   </a><div class=\\\"sidebar-links\\\">{}</div>\", ret));\n+        let mut used_links = FxHashSet::default();\n+\n+        {\n+            let used_links_bor = Rc::new(RefCell::new(&mut used_links));\n+            let ret = v.iter()\n+                       .filter(|i| i.inner_impl().trait_.is_none())\n+                       .flat_map(move |i| get_methods(i.inner_impl(),\n+                                                      false,\n+                                                      &mut used_links_bor.borrow_mut()))\n+                       .collect::<String>();\n+            if !ret.is_empty() {\n+                out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#methods\\\">Methods\\\n+                                       </a><div class=\\\"sidebar-links\\\">{}</div>\", ret));\n+            }\n         }\n \n         if v.iter().any(|i| i.inner_impl().trait_.is_some()) {\n@@ -4316,35 +4340,38 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         out.push_str(\"</a>\");\n                         let ret = impls.iter()\n                                        .filter(|i| i.inner_impl().trait_.is_none())\n-                                       .flat_map(|i| get_methods(i.inner_impl(), true))\n+                                       .flat_map(|i| get_methods(i.inner_impl(),\n+                                                                 true,\n+                                                                 &mut used_links))\n                                        .collect::<String>();\n                         out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", ret));\n                     }\n                 }\n             }\n             let format_impls = |impls: Vec<&Impl>| {\n                 let mut links = FxHashSet::default();\n+\n                 impls.iter()\n-                           .filter_map(|i| {\n-                               let is_negative_impl = is_negative_impl(i.inner_impl());\n-                               if let Some(ref i) = i.inner_impl().trait_ {\n-                                   let i_display = format!(\"{:#}\", i);\n-                                   let out = Escape(&i_display);\n-                                   let encoded = small_url_encode(&format!(\"{:#}\", i));\n-                                   let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n-                                                           encoded,\n-                                                           if is_negative_impl { \"!\" } else { \"\" },\n-                                                           out);\n-                                   if links.insert(generated.clone()) {\n-                                       Some(generated)\n-                                   } else {\n-                                       None\n-                                   }\n-                               } else {\n-                                   None\n-                               }\n-                           })\n-                           .collect::<String>()\n+                     .filter_map(|i| {\n+                         let is_negative_impl = is_negative_impl(i.inner_impl());\n+                         if let Some(ref i) = i.inner_impl().trait_ {\n+                             let i_display = format!(\"{:#}\", i);\n+                             let out = Escape(&i_display);\n+                             let encoded = small_url_encode(&format!(\"{:#}\", i));\n+                             let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n+                                                     encoded,\n+                                                     if is_negative_impl { \"!\" } else { \"\" },\n+                                                     out);\n+                             if links.insert(generated.clone()) {\n+                                 Some(generated)\n+                             } else {\n+                                 None\n+                             }\n+                         } else {\n+                             None\n+                         }\n+                     })\n+                     .collect::<String>()\n             };\n \n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) = v"}, {"sha": "2482a7e82b9d701bf2ced2abdf27fae9a1793522", "filename": "src/test/rustdoc/sidebar-link-generation.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/91d5d56c00d8e2926ccf856f14a4e52ef480d039/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5d56c00d8e2926ccf856f14a4e52ef480d039/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs?ref=91d5d56c00d8e2926ccf856f14a4e52ef480d039", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.SomeStruct.html '//*[@class=\"sidebar-links\"]/a[@href=\"#method.some_fn-1\"]' \\\n+//          \"some_fn\"\n+pub struct SomeStruct<T> { _inner: T }\n+\n+impl SomeStruct<()> {\n+    pub fn some_fn(&self) {}\n+}\n+\n+impl SomeStruct<usize> {\n+    pub fn some_fn(&self) {}\n+}"}]}