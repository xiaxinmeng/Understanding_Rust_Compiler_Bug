{"sha": "b20d969516f2ade620ac0420ce3425e167684179", "node_id": "C_kwDOAAsO6NoAKGIyMGQ5Njk1MTZmMmFkZTYyMGFjMDQyMGNlMzQyNWUxNjc2ODQxNzk", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-01T15:24:01Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-01T15:24:01Z"}, "message": "Print valid `--print` requests if request is invalid\n\nWhen someone makes a typo, it can be useful to see the valid options.\nThis is also useful if someone wants to find out about all the options.", "tree": {"sha": "19a5ec54abb01365d72b4f483eec3e2e13264469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a5ec54abb01365d72b4f483eec3e2e13264469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20d969516f2ade620ac0420ce3425e167684179", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgWnoWpkMvJlSFxMiZfPmQ9OBZ0B\nzicY1KArCIU18CM8IAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQDHkfQmYwWW1lfCRpuR3xoSKgD7mYgKqyyzsJkG/oyBZOOp7x+VrmN0LtjAJpU8Uq+\nzpryXMBHfbpw/kOhTP6ww=\n-----END SSH SIGNATURE-----", "payload": "tree 19a5ec54abb01365d72b4f483eec3e2e13264469\nparent c493bae0d8efd75723460ce5c371f726efa93f15\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1667316241 +0100\ncommitter nils <48135649+Nilstrieb@users.noreply.github.com> 1667316241 +0100\n\nPrint valid `--print` requests if request is invalid\n\nWhen someone makes a typo, it can be useful to see the valid options.\nThis is also useful if someone wants to find out about all the options.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20d969516f2ade620ac0420ce3425e167684179", "html_url": "https://github.com/rust-lang/rust/commit/b20d969516f2ade620ac0420ce3425e167684179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20d969516f2ade620ac0420ce3425e167684179/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c493bae0d8efd75723460ce5c371f726efa93f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c493bae0d8efd75723460ce5c371f726efa93f15", "html_url": "https://github.com/rust-lang/rust/commit/c493bae0d8efd75723460ce5c371f726efa93f15"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "c0839d7e0921ab5894c51d1ce7d5447b05dd3939", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b20d969516f2ade620ac0420ce3425e167684179/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20d969516f2ade620ac0420ce3425e167684179/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b20d969516f2ade620ac0420ce3425e167684179", "patch": "@@ -1788,34 +1788,49 @@ fn collect_print_requests(\n         cg.target_feature = String::new();\n     }\n \n-    prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n-        \"crate-name\" => PrintRequest::CrateName,\n-        \"file-names\" => PrintRequest::FileNames,\n-        \"sysroot\" => PrintRequest::Sysroot,\n-        \"target-libdir\" => PrintRequest::TargetLibdir,\n-        \"cfg\" => PrintRequest::Cfg,\n-        \"calling-conventions\" => PrintRequest::CallingConventions,\n-        \"target-list\" => PrintRequest::TargetList,\n-        \"target-cpus\" => PrintRequest::TargetCPUs,\n-        \"target-features\" => PrintRequest::TargetFeatures,\n-        \"relocation-models\" => PrintRequest::RelocationModels,\n-        \"code-models\" => PrintRequest::CodeModels,\n-        \"tls-models\" => PrintRequest::TlsModels,\n-        \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n-        \"stack-protector-strategies\" => PrintRequest::StackProtectorStrategies,\n-        \"target-spec-json\" => {\n-            if unstable_opts.unstable_options {\n-                PrintRequest::TargetSpec\n-            } else {\n+    const PRINT_REQUESTS: &[(&str, PrintRequest)] = &[\n+        (\"crate-name\", PrintRequest::CrateName),\n+        (\"file-names\", PrintRequest::FileNames),\n+        (\"sysroot\", PrintRequest::Sysroot),\n+        (\"target-libdir\", PrintRequest::TargetLibdir),\n+        (\"cfg\", PrintRequest::Cfg),\n+        (\"calling-conventions\", PrintRequest::CallingConventions),\n+        (\"target-list\", PrintRequest::TargetList),\n+        (\"target-cpus\", PrintRequest::TargetCPUs),\n+        (\"target-features\", PrintRequest::TargetFeatures),\n+        (\"relocation-models\", PrintRequest::RelocationModels),\n+        (\"code-models\", PrintRequest::CodeModels),\n+        (\"tls-models\", PrintRequest::TlsModels),\n+        (\"native-static-libs\", PrintRequest::NativeStaticLibs),\n+        (\"stack-protector-strategies\", PrintRequest::StackProtectorStrategies),\n+        (\"target-spec-json\", PrintRequest::TargetSpec),\n+        (\"link-args\", PrintRequest::LinkArgs),\n+    ];\n+\n+    prints.extend(matches.opt_strs(\"print\").into_iter().map(|req| {\n+        match PRINT_REQUESTS.iter().find(|&&(name, _)| name == req) {\n+            Some((_, PrintRequest::TargetSpec)) => {\n+                if unstable_opts.unstable_options {\n+                    PrintRequest::TargetSpec\n+                } else {\n+                    early_error(\n+                        error_format,\n+                        \"the `-Z unstable-options` flag must also be passed to \\\n+                     enable the target-spec-json print option\",\n+                    );\n+                }\n+            }\n+            Some(&(_, print_request)) => print_request,\n+            None => {\n+                let prints =\n+                    PRINT_REQUESTS.iter().map(|(name, _)| format!(\"`{name}`\")).collect::<Vec<_>>();\n+                let prints = prints.join(\", \");\n                 early_error(\n                     error_format,\n-                    \"the `-Z unstable-options` flag must also be passed to \\\n-                     enable the target-spec-json print option\",\n+                    &format!(\"unknown print request `{req}`. Valid print requests are: {prints}\"),\n                 );\n             }\n         }\n-        \"link-args\" => PrintRequest::LinkArgs,\n-        req => early_error(error_format, &format!(\"unknown print request `{req}`\")),\n     }));\n \n     prints"}, {"sha": "c325e536e7c5ddae75a10df485cf4e151fe73868", "filename": "src/test/run-make/valid-print-requests/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b20d969516f2ade620ac0420ce3425e167684179/src%2Ftest%2Frun-make%2Fvalid-print-requests%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b20d969516f2ade620ac0420ce3425e167684179/src%2Ftest%2Frun-make%2Fvalid-print-requests%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvalid-print-requests%2FMakefile?ref=b20d969516f2ade620ac0420ce3425e167684179", "patch": "@@ -0,0 +1,4 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --print uwu 2>&1 | diff - valid-print-requests.stderr"}, {"sha": "85782866d125a2e25bc21952e2f107225075dd75", "filename": "src/test/run-make/valid-print-requests/valid-print-requests.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b20d969516f2ade620ac0420ce3425e167684179/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b20d969516f2ade620ac0420ce3425e167684179/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr?ref=b20d969516f2ade620ac0420ce3425e167684179", "patch": "@@ -0,0 +1,2 @@\n+error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `link-args`\n+"}]}