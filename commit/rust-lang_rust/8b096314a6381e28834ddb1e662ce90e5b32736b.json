{"sha": "8b096314a6381e28834ddb1e662ce90e5b32736b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDk2MzE0YTYzODFlMjg4MzRkZGIxZTY2MmNlOTBlNWIzMjczNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-02T18:28:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-02T18:28:51Z"}, "message": "Auto merge of #55087 - levex:e0669-improve-span, r=nagisa\n\nrustc: improve E0669 span\n\nE0669 refers to an operand that cannot be coerced into a single LLVM\nvalue, unfortunately right now this uses the Span for the entire inline\nassembly statement, which is less than ideal.\n\nThis commit preserves the Span from HIR, which lets us emit the error\nusing the Span for the operand itself in MIR.\n\nr? @nagisa\ncc/ @parched", "tree": {"sha": "b360f7f6b38c3ab0316fbf260dea4309a9619585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b360f7f6b38c3ab0316fbf260dea4309a9619585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b096314a6381e28834ddb1e662ce90e5b32736b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b096314a6381e28834ddb1e662ce90e5b32736b", "html_url": "https://github.com/rust-lang/rust/commit/8b096314a6381e28834ddb1e662ce90e5b32736b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b096314a6381e28834ddb1e662ce90e5b32736b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "html_url": "https://github.com/rust-lang/rust/commit/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c"}, {"sha": "46b9461c4b77bf51528c81207e190d74be63ca10", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b9461c4b77bf51528c81207e190d74be63ca10", "html_url": "https://github.com/rust-lang/rust/commit/46b9461c4b77bf51528c81207e190d74be63ca10"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "c662ed6a6bf06f23553c4686250fe7ded28c3cc7", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -1751,7 +1751,7 @@ pub enum StatementKind<'tcx> {\n     InlineAsm {\n         asm: Box<InlineAsm>,\n         outputs: Box<[Place<'tcx>]>,\n-        inputs: Box<[Operand<'tcx>]>,\n+        inputs: Box<[(Span, Operand<'tcx>)]>,\n     },\n \n     /// Retag references in the given place, ensuring they got fresh tags.  This is"}, {"sha": "c130e047e47d11e19ca1ae3b0cf3a6f89b8bf13e", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -409,7 +409,8 @@ macro_rules! make_mir_visitor {\n                                 location\n                             );\n                         }\n-                        for input in & $($mutability)* inputs[..] {\n+                        for (span, input) in & $($mutability)* inputs[..] {\n+                            self.visit_span(span);\n                             self.visit_operand(input, location);\n                         }\n                     }"}, {"sha": "c8c8e02bf05f731134d9819de833404becd339dc", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -84,21 +84,18 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 }).collect();\n \n                 let input_vals = inputs.iter()\n-                    .try_fold(Vec::with_capacity(inputs.len()), |mut acc, input| {\n+                    .fold(Vec::with_capacity(inputs.len()), |mut acc, (span, input)| {\n                         let op = self.codegen_operand(&bx, input);\n                         if let OperandValue::Immediate(_) = op.val {\n                             acc.push(op.immediate());\n-                            Ok(acc)\n                         } else {\n-                            Err(op)\n+                            span_err!(bx.sess(), span.to_owned(), E0669,\n+                                     \"invalid value for constraint in inline assembly\");\n                         }\n+                        acc\n                 });\n \n-                if input_vals.is_err() {\n-                   span_err!(bx.sess(), statement.source_info.span, E0669,\n-                             \"invalid value for constraint in inline assembly\");\n-                } else {\n-                    let input_vals = input_vals.unwrap();\n+                if input_vals.len() == inputs.len() {\n                     let res = asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n                     if !res {\n                         span_err!(bx.sess(), statement.source_info.span, E0668,"}, {"sha": "d4f00ab3bb91a217bfdf7f8738f01455ae8f6409", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -590,7 +590,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         );\n                     }\n                 }\n-                for input in inputs.iter() {\n+                for (_, input) in inputs.iter() {\n                     self.consume_operand(context, (input, span), flow_state);\n                 }\n             }"}, {"sha": "cfe03c2d1c71e593a00c2021d368ca2e89de5cf0", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -128,7 +128,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         );\n                     }\n                 }\n-                for input in inputs.iter() {\n+                for (_, input) in inputs.iter() {\n                     self.consume_operand(context, input);\n                 }\n             }"}, {"sha": "8f52499124ab7580cb60f7c4fc71c3139fc96840", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -167,8 +167,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     .into_boxed_slice();\n                 let inputs = inputs\n                     .into_iter()\n-                    .map(|input| unpack!(block = this.as_local_operand(block, input)))\n-                    .collect::<Vec<_>>()\n+                    .map(|input| {\n+                        (\n+                            input.span(),\n+                            unpack!(block = this.as_local_operand(block, input)),\n+                        )\n+                    }).collect::<Vec<_>>()\n                     .into_boxed_slice();\n                 this.cfg.push(\n                     block,"}, {"sha": "874e862de238b7e1e8e253e0af83caac4eb71189", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -289,7 +289,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                         self.gather_init(output, InitKind::Deep);\n                     }\n                 }\n-                for input in inputs.iter() {\n+                for (_, input) in inputs.iter() {\n                     self.gather_operand(input);\n                 }\n             }"}, {"sha": "bbfb14b8d9d22d5e4ed00523bf0351610f394cba", "filename": "src/test/ui/inline-asm-bad-operand.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -21,6 +21,7 @@ fn main() {\n     issue_37437();\n     issue_40187();\n     issue_54067();\n+    multiple_errors();\n }\n \n fn issue_37433() {\n@@ -55,3 +56,11 @@ fn issue_54067() {\n         asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n     }\n }\n+\n+fn multiple_errors() {\n+    let addr: (u32, u32) = (1, 2);\n+    unsafe {\n+        asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n+                           \"r\"(\"hello e0669\")); //~ ERROR E0669\n+    }\n+}"}, {"sha": "2f650bfcab7b52ac1ef27f4f8fe196da1909a2ca", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b096314a6381e28834ddb1e662ce90e5b32736b/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=8b096314a6381e28834ddb1e662ce90e5b32736b", "patch": "@@ -1,33 +1,45 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:28:9\n+  --> $DIR/inline-asm-bad-operand.rs:29:24\n    |\n LL |         asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:33:9\n+  --> $DIR/inline-asm-bad-operand.rs:34:32\n    |\n LL |         asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:40:14\n+  --> $DIR/inline-asm-bad-operand.rs:41:29\n    |\n LL |     unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:48:9\n+  --> $DIR/inline-asm-bad-operand.rs:49:38\n    |\n LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                      ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:55:9\n+  --> $DIR/inline-asm-bad-operand.rs:56:32\n    |\n LL |         asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^\n \n-error: aborting due to 5 previous errors\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:63:32\n+   |\n+LL |         asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n+   |                                ^^^^\n+\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:64:32\n+   |\n+LL |                            \"r\"(\"hello e0669\")); //~ ERROR E0669\n+   |                                ^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0669`."}]}