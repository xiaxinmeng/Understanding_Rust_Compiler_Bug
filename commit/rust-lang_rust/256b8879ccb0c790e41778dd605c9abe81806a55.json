{"sha": "256b8879ccb0c790e41778dd605c9abe81806a55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NmI4ODc5Y2NiMGM3OTBlNDE3NzhkZDYwNWM5YWJlODE4MDZhNTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-16T14:16:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T00:09:37Z"}, "message": "Rollup merge of #44395 - jcdyer:ip-constructors, r=alexcrichton\n\nIpv4Addr and Ipv6Addr convenience constructors.\n\nIntroduce convenience constructors for common types.\n\nThis introduces the following constructors:\n\n* Ipv6Addr::localhost()\n* Ipv6Addr::unspecified()\n* Ipv4Addr::localhost()\n* Ipv4Addr::unspecified()\n\nThe recently added `From` implementations were nice for avoiding the fallibility of conversions from strings like `\"127.0.0.1\".parse().unwrap()`, and `\"::1\".parse().unwrap()`, but while the Ipv4 version is roughly comparable in verbosity, the Ipv6 version lacks zero-segment elision, which makes it significantly more awkward: `[0, 0, 0, 0, 0, 0, 0, 0].into()`.  While there isn't a clear way to introduce zero elision to type that can infallibly be converted into Ipv6 addresses, this PR resolves the problem for the two most commonly used addresses, which, incidentally, are the ones that suffer the most from the lack of zero-segment elision.\n\nThis change is dead simple, and introduces no backwards incompatibility.\n\nSee also, [this topic on the inernals board](https://internals.rust-lang.org/t/pre-rfc-convenience-ip-address-constructors/5878)", "tree": {"sha": "70ea02574068f9f5fe4d0ec03f009e0921f636ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ea02574068f9f5fe4d0ec03f009e0921f636ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256b8879ccb0c790e41778dd605c9abe81806a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256b8879ccb0c790e41778dd605c9abe81806a55", "html_url": "https://github.com/rust-lang/rust/commit/256b8879ccb0c790e41778dd605c9abe81806a55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256b8879ccb0c790e41778dd605c9abe81806a55/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48193c2fe00e630bed3c989e479e7be437c4c133", "url": "https://api.github.com/repos/rust-lang/rust/commits/48193c2fe00e630bed3c989e479e7be437c4c133", "html_url": "https://github.com/rust-lang/rust/commit/48193c2fe00e630bed3c989e479e7be437c4c133"}, {"sha": "9d5b0e1ff54198543233f418fbc43921b5f7201b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5b0e1ff54198543233f418fbc43921b5f7201b", "html_url": "https://github.com/rust-lang/rust/commit/9d5b0e1ff54198543233f418fbc43921b5f7201b"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "eea604943af8bd8f2f7177de7c80781fc7432053", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/256b8879ccb0c790e41778dd605c9abe81806a55/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256b8879ccb0c790e41778dd605c9abe81806a55/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=256b8879ccb0c790e41778dd605c9abe81806a55", "patch": "@@ -10,7 +10,7 @@\n \n #![unstable(feature = \"ip\", reason = \"extra functionality has not been \\\n                                       scrutinized to the level that it should \\\n-                                      be stable\",\n+                                      be to be stable\",\n             issue = \"27709\")]\n \n use cmp::Ordering;\n@@ -342,6 +342,42 @@ impl Ipv4Addr {\n         }\n     }\n \n+    /// Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::localhost();\n+    /// assert_eq!(addr, Ipv4Addr::new(127, 0, 0, 1));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn localhost() -> Ipv4Addr {\n+        Ipv4Addr::new(127, 0, 0, 1)\n+    }\n+\n+    /// Creates a new IPv4 address representing an unspecified address: 0.0.0.0\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::unspecified();\n+    /// assert_eq!(addr, Ipv4Addr::new(0, 0, 0, 0));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn unspecified() -> Ipv4Addr {\n+        Ipv4Addr::new(0, 0, 0, 0)\n+    }\n+\n     /// Returns the four eight-bit integers that make up this address.\n     ///\n     /// # Examples\n@@ -788,6 +824,42 @@ impl Ipv6Addr {\n         Ipv6Addr { inner: addr }\n     }\n \n+    /// Creates a new IPv6 address representing localhost: `::1`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::localhost();\n+    /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn localhost() -> Ipv6Addr {\n+        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)\n+    }\n+\n+    /// Creates a new IPv6 address representing the unspecified address: `::`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::unspecified();\n+    /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn unspecified() -> Ipv6Addr {\n+        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)\n+    }\n+\n     /// Returns the eight 16-bit segments that make up this address.\n     ///\n     /// # Examples\n@@ -1681,6 +1753,22 @@ mod tests {\n         assert_eq!(Ipv6Addr::from(0x112233445566778899aabbccddeeff11u128), a);\n     }\n \n+    #[test]\n+    fn ipv4_from_constructors() {\n+        assert_eq!(Ipv4Addr::localhost(), Ipv4Addr::new(127, 0, 0, 1));\n+        assert!(Ipv4Addr::localhost().is_loopback());\n+        assert_eq!(Ipv4Addr::unspecified(), Ipv4Addr::new(0, 0, 0, 0));\n+        assert!(Ipv4Addr::unspecified().is_unspecified());\n+    }\n+\n+    #[test]\n+    fn ipv6_from_contructors() {\n+        assert_eq!(Ipv6Addr::localhost(), Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+        assert!(Ipv6Addr::localhost().is_loopback());\n+        assert_eq!(Ipv6Addr::unspecified(), Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n+        assert!(Ipv6Addr::unspecified().is_unspecified());\n+    }\n+\n     #[test]\n     fn ipv4_from_octets() {\n         assert_eq!(Ipv4Addr::from([127, 0, 0, 1]), Ipv4Addr::new(127, 0, 0, 1))"}]}