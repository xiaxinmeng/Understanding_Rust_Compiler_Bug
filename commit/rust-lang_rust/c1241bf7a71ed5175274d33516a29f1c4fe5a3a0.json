{"sha": "c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjQxYmY3YTcxZWQ1MTc1Mjc0ZDMzNTE2YTI5ZjFjNGZlNWEzYTA=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-16T16:57:18Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-12-18T10:30:22Z"}, "message": "add debuginfo in generator_interior", "tree": {"sha": "123628666fb7032e0105f62abb05223a34f014e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123628666fb7032e0105f62abb05223a34f014e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "html_url": "https://github.com/rust-lang/rust/commit/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed3b8bb7b100afecf7d5f52eafbb70fec27f537", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed3b8bb7b100afecf7d5f52eafbb70fec27f537", "html_url": "https://github.com/rust-lang/rust/commit/3ed3b8bb7b100afecf7d5f52eafbb70fec27f537"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "474b5e33c2a0af078b7b338ef9bf39da53c2bb15", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "patch": "@@ -1857,6 +1857,22 @@ impl fmt::Display for YieldSource {\n     }\n }\n \n+impl core::convert::From<GeneratorKind> for YieldSource {\n+    fn from(gen_kind: GeneratorKind) -> Self {\n+        match gen_kind {\n+            // Guess based on the kind of the current generator.\n+            GeneratorKind::Gen => Self::Yield,\n+            GeneratorKind::Async(_) => Self::Await,\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub enum CaptureClause {\n+    CaptureByValue,\n+    CaptureByRef,\n+}\n+\n // N.B., if you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "35d73d569643146478cce7c190b174176ca4a9ce", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1241bf7a71ed5175274d33516a29f1c4fe5a3a0/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=c1241bf7a71ed5175274d33516a29f1c4fe5a3a0", "patch": "@@ -32,7 +32,6 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         debug!(\"generator_interior: attempting to record type {:?} {:?} {:?} {:?}\",\n                ty, scope, expr, source_span);\n \n-\n         let live_across_yield = scope.map(|s| {\n             self.region_scope_tree.yield_in_scope(s).and_then(|yield_data| {\n                 // If we are recording an expression that is the last yield\n@@ -54,15 +53,11 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         }).unwrap_or_else(|| Some(YieldData {\n             span: DUMMY_SP,\n             expr_and_pat_count: 0,\n-            source: match self.kind { // Guess based on the kind of the current generator.\n-                hir::GeneratorKind::Gen => hir::YieldSource::Yield,\n-                hir::GeneratorKind::Async(_) => hir::YieldSource::Await,\n-            },\n+            source: self.kind.into(),\n         }));\n \n         if let Some(yield_data) = live_across_yield {\n             let ty = self.fcx.resolve_vars_if_possible(&ty);\n-\n             debug!(\"type in expr = {:?}, scope = {:?}, type = {:?}, count = {}, yield_span = {:?}\",\n                    expr, scope, ty, self.expr_count, yield_data.span);\n \n@@ -94,6 +89,11 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         } else {\n             debug!(\"no type in expr = {:?}, count = {:?}, span = {:?}\",\n                    expr, self.expr_count, expr.map(|e| e.span));\n+            let ty = self.fcx.resolve_vars_if_possible(&ty);\n+            if let Some((unresolved_type, unresolved_type_span)) = self.fcx.unresolved_type_vars(&ty) {\n+                debug!(\"remained unresolved_type = {:?}, unresolved_type_span: {:?}\",\n+                    unresolved_type, unresolved_type_span);\n+            }\n         }\n     }\n }"}]}