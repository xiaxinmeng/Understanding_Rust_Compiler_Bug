{"sha": "cbc577fc719e00f60004c8b22db0256f4c9da4b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzU3N2ZjNzE5ZTAwZjYwMDA0YzhiMjJkYjAyNTZmNGM5ZGE0YjI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-07T05:03:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-07T05:03:45Z"}, "message": "Reduce `TypedArena` creations in `check_match`.\n\n`check_match` creates a new `TypedArena` for every call to\n`create_and_enter`. DHAT tells me that each `TypedArena` typically is\nbarely used, with typically a single allocation per arena.\n\nThis commit moves the `TypedArena` creation outwards a bit, into\n`check_match`, and then passes it into `create_and_enter`. This reduces\nthe number of arenas created by about 4-5x, for a very small perf win.\n(Moving the arena creation further outwards is hard because\n`check_match` is a query.)", "tree": {"sha": "993d6f72f086416bec155b180a5c3e602eaf7ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/993d6f72f086416bec155b180a5c3e602eaf7ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc577fc719e00f60004c8b22db0256f4c9da4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc577fc719e00f60004c8b22db0256f4c9da4b2", "html_url": "https://github.com/rust-lang/rust/commit/cbc577fc719e00f60004c8b22db0256f4c9da4b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc577fc719e00f60004c8b22db0256f4c9da4b2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c61a904482129989f5c1e5cb9f1008efb76f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "html_url": "https://github.com/rust-lang/rust/commit/a0c61a904482129989f5c1e5cb9f1008efb76f7f"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "4e8ec6152e358e50270285265506a4cbd0657d69", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbc577fc719e00f60004c8b22db0256f4c9da4b2/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc577fc719e00f60004c8b22db0256f4c9da4b2/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=cbc577fc719e00f60004c8b22db0256f4c9da4b2", "patch": "@@ -588,12 +588,11 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     crate fn create_and_enter<R>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n+        pattern_arena: &'a TypedArena<Pat<'tcx>>,\n         module: DefId,\n-        f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>) -> R,\n+        f: impl FnOnce(MatchCheckCtxt<'a, 'tcx>) -> R,\n     ) -> R {\n-        let pattern_arena = TypedArena::default();\n-\n-        f(MatchCheckCtxt { tcx, param_env, module, pattern_arena: &pattern_arena })\n+        f(MatchCheckCtxt { tcx, param_env, module, pattern_arena })\n     }\n \n     fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "eda694ee2cba5aa1a6d78af63f9212cf68c48bdd", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cbc577fc719e00f60004c8b22db0256f4c9da4b2/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc577fc719e00f60004c8b22db0256f4c9da4b2/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=cbc577fc719e00f60004c8b22db0256f4c9da4b2", "patch": "@@ -1,9 +1,9 @@\n use super::_match::Usefulness::*;\n use super::_match::WitnessPreference::*;\n use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack};\n-\n use super::{PatCtxt, PatKind, PatternError};\n \n+use arena::TypedArena;\n use rustc_ast::ast::Mutability;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -17,7 +17,6 @@ use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERN\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::{sym, Span};\n-\n use std::slice;\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -26,8 +25,12 @@ crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n         Some(id) => tcx.hir().body_owned_by(tcx.hir().as_local_hir_id(id)),\n     };\n \n-    let mut visitor =\n-        MatchVisitor { tcx, tables: tcx.body_tables(body_id), param_env: tcx.param_env(def_id) };\n+    let mut visitor = MatchVisitor {\n+        tcx,\n+        tables: tcx.body_tables(body_id),\n+        param_env: tcx.param_env(def_id),\n+        pattern_arena: TypedArena::default(),\n+    };\n     visitor.visit_body(tcx.hir().body(body_id));\n }\n \n@@ -39,6 +42,7 @@ struct MatchVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n+    pattern_arena: TypedArena<super::Pat<'tcx>>,\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n@@ -145,7 +149,13 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n \n     fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n         let module = self.tcx.parent_module(hir_id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module.to_def_id(), |cx| f(cx));\n+        MatchCheckCtxt::create_and_enter(\n+            self.tcx,\n+            self.param_env,\n+            &self.pattern_arena,\n+            module.to_def_id(),\n+            f,\n+        );\n     }\n \n     fn check_match("}]}