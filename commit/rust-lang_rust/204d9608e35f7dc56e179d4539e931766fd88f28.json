{"sha": "204d9608e35f7dc56e179d4539e931766fd88f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNGQ5NjA4ZTM1ZjdkYzU2ZTE3OWQ0NTM5ZTkzMTc2NmZkODhmMjg=", "commit": {"author": {"name": "James Duley", "email": "james.duley@arm.com", "date": "2018-09-11T17:04:33Z"}, "committer": {"name": "James Duley", "email": "james.duley@arm.com", "date": "2018-09-12T17:55:44Z"}, "message": "Fix `thread` `park`/`unpark` synchronization\n\nPreviously the code below would not be guaranteed to exit when the first\nspawned thread took the `return, // already unparked` path because there\nwas no write to synchronize with a read in `park`.\n\n```\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::thread::{current, spawn, park};\n\nstatic FLAG: AtomicBool = AtomicBool::new(false);\n\nfn main() {\n    let thread_0 = current();\n    spawn(move || {\n        FLAG.store(true, Ordering::Relaxed);\n        thread_0.unpark();\n    });\n\n    let thread_0 = current();\n    spawn(move || {\n        thread_0.unpark();\n    });\n\n    while !FLAG.load(Ordering::Relaxed) {\n        park();\n    }\n}\n```", "tree": {"sha": "ec8b05190dd4caa304adbb892b19d623fceeacdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8b05190dd4caa304adbb892b19d623fceeacdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204d9608e35f7dc56e179d4539e931766fd88f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204d9608e35f7dc56e179d4539e931766fd88f28", "html_url": "https://github.com/rust-lang/rust/commit/204d9608e35f7dc56e179d4539e931766fd88f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204d9608e35f7dc56e179d4539e931766fd88f28/comments", "author": null, "committer": null, "parents": [{"sha": "7ee72070bdb789f58f272fab50d49bd48dd9c11f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee72070bdb789f58f272fab50d49bd48dd9c11f", "html_url": "https://github.com/rust-lang/rust/commit/7ee72070bdb789f58f272fab50d49bd48dd9c11f"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "020ea09db2a2a329f9d390c9ae6f335fb1831b7c", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/204d9608e35f7dc56e179d4539e931766fd88f28/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204d9608e35f7dc56e179d4539e931766fd88f28/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=204d9608e35f7dc56e179d4539e931766fd88f28", "patch": "@@ -800,7 +800,7 @@ pub fn park() {\n     match thread.inner.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n         Ok(_) => {}\n         Err(NOTIFIED) => {\n-            thread.inner.state.store(EMPTY, SeqCst);\n+            thread.inner.state.swap(EMPTY, SeqCst);\n             return;\n         } // should consume this notification, so prohibit spurious wakeups in next park.\n         Err(_) => panic!(\"inconsistent park state\"),\n@@ -889,7 +889,7 @@ pub fn park_timeout(dur: Duration) {\n     match thread.inner.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n         Ok(_) => {}\n         Err(NOTIFIED) => {\n-            thread.inner.state.store(EMPTY, SeqCst);\n+            thread.inner.state.swap(EMPTY, SeqCst);\n             return;\n         } // should consume this notification, so prohibit spurious wakeups in next park.\n         Err(_) => panic!(\"inconsistent park_timeout state\"),\n@@ -1058,23 +1058,16 @@ impl Thread {\n     /// [park]: fn.park.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unpark(&self) {\n-        loop {\n-            match self.inner.state.compare_exchange(EMPTY, NOTIFIED, SeqCst, SeqCst) {\n-                Ok(_) => return, // no one was waiting\n-                Err(NOTIFIED) => return, // already unparked\n-                Err(PARKED) => {} // gotta go wake someone up\n-                _ => panic!(\"inconsistent state in unpark\"),\n-            }\n-\n-            // Coordinate wakeup through the mutex and a condvar notification\n-            let _lock = self.inner.lock.lock().unwrap();\n-            match self.inner.state.compare_exchange(PARKED, NOTIFIED, SeqCst, SeqCst) {\n-                Ok(_) => return self.inner.cvar.notify_one(),\n-                Err(NOTIFIED) => return, // a different thread unparked\n-                Err(EMPTY) => {} // parked thread went away, try again\n-                _ => panic!(\"inconsistent state in unpark\"),\n-            }\n+        match self.inner.state.swap(NOTIFIED, SeqCst) {\n+            EMPTY => return, // no one was waiting\n+            NOTIFIED => return, // already unparked\n+            PARKED => {} // gotta go wake someone up\n+            _ => panic!(\"inconsistent state in unpark\"),\n         }\n+\n+        // Coordinate wakeup through the mutex and a condvar notification\n+        let _lock = self.inner.lock.lock().unwrap();\n+        self.inner.cvar.notify_one()\n     }\n \n     /// Gets the thread's unique identifier."}]}