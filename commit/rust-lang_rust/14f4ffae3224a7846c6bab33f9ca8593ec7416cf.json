{"sha": "14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "node_id": "C_kwDOAAsO6NoAKDE0ZjRmZmFlMzIyNGE3ODQ2YzZiYWIzM2Y5Y2E4NTkzZWM3NDE2Y2Y", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-08T22:55:50Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-08T22:58:57Z"}, "message": "Use spare_capacity_mut instead of invalid unchecked indexing", "tree": {"sha": "fa9bc740a0c27f8c7cd21f755db5b2fa28f3c687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa9bc740a0c27f8c7cd21f755db5b2fa28f3c687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "html_url": "https://github.com/rust-lang/rust/commit/14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f4ffae3224a7846c6bab33f9ca8593ec7416cf/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "html_url": "https://github.com/rust-lang/rust/commit/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "69495f31c32ca4d59e80037f74204b806a74b3cc", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14f4ffae3224a7846c6bab33f9ca8593ec7416cf/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f4ffae3224a7846c6bab33f9ca8593ec7416cf/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=14f4ffae3224a7846c6bab33f9ca8593ec7416cf", "patch": "@@ -178,12 +178,20 @@ where\n \n     unsafe {\n         let pos = result.len();\n-        let target = result.get_unchecked_mut(pos..reserved_len);\n+        let target = result.spare_capacity_mut().get_unchecked_mut(..reserved_len - pos);\n+\n+        // Convert the separator and slices to slices of MaybeUninit\n+        // to simplify implementation in specialize_for_lengths\n+        let sep_uninit = core::slice::from_raw_parts(sep.as_ptr().cast(), sep.len());\n+        let iter_uninit = iter.map(|it| {\n+            let it = it.borrow().as_ref();\n+            core::slice::from_raw_parts(it.as_ptr().cast(), it.len())\n+        });\n \n         // copy separator and slices over without bounds checks\n         // generate loops with hardcoded offsets for small separators\n         // massive improvements possible (~ x2)\n-        let remain = specialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n+        let remain = specialize_for_lengths!(sep_uninit, target, iter_uninit; 0, 1, 2, 3, 4);\n \n         // A weird borrow implementation may return different\n         // slices for the length calculation and the actual copy."}]}