{"sha": "1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "node_id": "C_kwDOAAsO6NoAKDE5NDgyODg2MTViYjc1YmE5MTYxNjllM2VhZjVlMmFkMzNjNWU3ZDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-17T10:32:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-17T10:32:51Z"}, "message": "Rollup merge of #100389 - compiler-errors:return-type-suggestion-cycle, r=cjgillot\n\nDo not report cycle error when inferring return type for suggestion\n\nThe UI test is a good example of a case where this happens. The cycle is due to needing the value of the return type `-> _` to compute the variances of items in the crate, but then needing the variances of the items in the crate to do typechecking to infer what `-> _`'s real type is.\n\nSince we're already gonna emit an error in astconv, just delay the cycle bug as an error.", "tree": {"sha": "f07247cc7fa22c9cf8ee47f353c69b13ed4ad309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07247cc7fa22c9cf8ee47f353c69b13ed4ad309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/MPTCRBK7hj4Ov3rIwAAnE4IAIXxbvJPtXc98oBqkBtwWsxJ\nYsHGp5F42h2Vktxai8fmiv7M4PjU/srsiEqW68pR880Z0vl5TmNKg64EBdUiK2w9\ns9zL+VNMzbK8FxwGw4ZiIZ3KmQC1Bzg6jVYIuxrF/THfn7B2k0jhU0Iad0foRKAe\n58l/NXSfi0LVbx0xBDylvnIDGLfpEoh/TRYd+JeUWyoBKC5WI2Q7rjj9A1wo6b4K\ne4ze1/uYbieXgFzBChMD+zcD/9XvWfE6AeXL7n5DRH3NmHyGzs1VXA1JmM7OlH0d\nUmhlZy2/xCusCRS8yc9I0pITteOOYTxtulwKhCMLmeMD2cDZ8O7hkXZlk8tq8HQ=\n=yH1G\n-----END PGP SIGNATURE-----\n", "payload": "tree f07247cc7fa22c9cf8ee47f353c69b13ed4ad309\nparent 989e4ffc7c45db3905926c6650e8b2cf6daa43db\nparent 5309375d2c8d51dafedb5404f0fb49f402350394\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660732371 +0200\ncommitter GitHub <noreply@github.com> 1660732371 +0200\n\nRollup merge of #100389 - compiler-errors:return-type-suggestion-cycle, r=cjgillot\n\nDo not report cycle error when inferring return type for suggestion\n\nThe UI test is a good example of a case where this happens. The cycle is due to needing the value of the return type `-> _` to compute the variances of items in the crate, but then needing the variances of the items in the crate to do typechecking to infer what `-> _`'s real type is.\n\nSince we're already gonna emit an error in astconv, just delay the cycle bug as an error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "html_url": "https://github.com/rust-lang/rust/commit/1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989e4ffc7c45db3905926c6650e8b2cf6daa43db", "url": "https://api.github.com/repos/rust-lang/rust/commits/989e4ffc7c45db3905926c6650e8b2cf6daa43db", "html_url": "https://github.com/rust-lang/rust/commit/989e4ffc7c45db3905926c6650e8b2cf6daa43db"}, {"sha": "5309375d2c8d51dafedb5404f0fb49f402350394", "url": "https://api.github.com/repos/rust-lang/rust/commits/5309375d2c8d51dafedb5404f0fb49f402350394", "html_url": "https://github.com/rust-lang/rust/commit/5309375d2c8d51dafedb5404f0fb49f402350394"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "ba81fc62141555bd0d62cbe32443720168fd464f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -4359,6 +4359,7 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_target\",\n  \"tracing\",\n ]\n "}, {"sha": "8a727d9a1825ad7f724f04b2ab095d96c116c57e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -770,6 +770,7 @@ rustc_queries! {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        cycle_delay_bug\n     }\n \n     /// Performs lint checking for the module."}, {"sha": "c37ae4f32536bd3bc8a41d0f8dadac8b21b01522", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -20,6 +20,7 @@ rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n tracing = \"0.1\"\n \n [features]"}, {"sha": "0ed48f8d4a051a7f29f770c9d0eb60709d280766", "filename": "compiler/rustc_query_impl/src/values.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -43,3 +43,23 @@ impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n         }\n     }\n }\n+\n+impl<'tcx> Value<'tcx> for ty::Binder<'_, ty::FnSig<'_>> {\n+    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n+        let err = tcx.ty_error();\n+        // FIXME(compiler-errors): It would be nice if we could get the\n+        // query key, so we could at least generate a fn signature that\n+        // has the right arity.\n+        let fn_sig = ty::Binder::dummy(tcx.mk_fn_sig(\n+            [].into_iter(),\n+            err,\n+            false,\n+            rustc_hir::Unsafety::Normal,\n+            rustc_target::spec::abi::Abi::Rust,\n+        ));\n+\n+        // SAFETY: This is never called when `Self` is not `ty::Binder<'tcx, ty::FnSig<'tcx>>`.\n+        // FIXME: Represent the above fact in the trait system somehow.\n+        unsafe { std::mem::transmute::<ty::PolyFnSig<'tcx>, ty::Binder<'_, ty::FnSig<'_>>>(fn_sig) }\n+    }\n+}"}, {"sha": "d6d24be1b8dc43361d9fd15187c8b9de8a71be74", "filename": "src/test/ui/suggestions/return-cycle-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.rs?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -0,0 +1,14 @@\n+use std::marker::PhantomData;\n+\n+struct Token<T>(PhantomData<T>);\n+\n+impl<T> Token<T> {\n+    fn as_ref(_: i32, _: i32) -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        //~| NOTE not allowed in type signatures\n+        //~| HELP replace with the correct return type\n+        Token(PhantomData::<&T>)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3a1a0f7f4f543c686b43c632c885e987f90366fc", "filename": "src/test/ui/suggestions/return-cycle-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.stderr?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/return-cycle-2.rs:6:34\n+   |\n+LL |     fn as_ref(_: i32, _: i32) -> _ {\n+   |                                  ^\n+   |                                  |\n+   |                                  not allowed in type signatures\n+   |                                  help: replace with the correct return type: `Token<&'static T>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "60b80e35a20b892eee29a85ae05d9b067b3f0bb9", "filename": "src/test/ui/suggestions/return-cycle.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.rs?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -0,0 +1,14 @@\n+use std::marker::PhantomData;\n+\n+struct Token<T>(PhantomData<T>);\n+\n+impl<T> Token<T> {\n+    fn new() -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        //~| NOTE not allowed in type signatures\n+        //~| HELP replace with the correct return type\n+        Token(PhantomData::<()>)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "63fa9e040874de8c5e0df73f90046876961877d1", "filename": "src/test/ui/suggestions/return-cycle.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1948288615bb75ba916169e3eaf5e2ad33c5e7d7/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.stderr?ref=1948288615bb75ba916169e3eaf5e2ad33c5e7d7", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/return-cycle.rs:6:17\n+   |\n+LL |     fn new() -> _ {\n+   |                 ^\n+   |                 |\n+   |                 not allowed in type signatures\n+   |                 help: replace with the correct return type: `Token<()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}]}