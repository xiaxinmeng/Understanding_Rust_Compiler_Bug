{"sha": "40d5f00e16230ce67c018bb05b8772f02634146c", "node_id": "C_kwDOAAsO6NoAKDQwZDVmMDBlMTYyMzBjZTY3YzAxOGJiMDViODc3MmYwMjYzNDE0NmM", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-09-23T18:23:18Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "migrate layout_test.rs to translateable diagnostics", "tree": {"sha": "2c02139c6b5be501c8dc0c24ded6905941ad3c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c02139c6b5be501c8dc0c24ded6905941ad3c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d5f00e16230ce67c018bb05b8772f02634146c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d5f00e16230ce67c018bb05b8772f02634146c", "html_url": "https://github.com/rust-lang/rust/commit/40d5f00e16230ce67c018bb05b8772f02634146c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d5f00e16230ce67c018bb05b8772f02634146c/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "html_url": "https://github.com/rust-lang/rust/commit/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf"}], "stats": {"total": 148, "additions": 115, "deletions": 33}, "files": [{"sha": "9493d95be5dc0b293b50130deba7a96e82a5038f", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/40d5f00e16230ce67c018bb05b8772f02634146c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/40d5f00e16230ce67c018bb05b8772f02634146c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=40d5f00e16230ce67c018bb05b8772f02634146c", "patch": "@@ -399,3 +399,24 @@ passes_duplicate_diagnostic_item_in_crate =\n passes_diagnostic_item_first_defined =\n     the diagnostic item is first defined here\n     .note = the diagnostic item is first defined in crate `{$orig_crate_name}`.\n+\n+passes_abi =\n+    abi: {$abi}\n+\n+passes_align =\n+    align: {$align}\n+\n+passes_size =\n+    size: {$size}\n+\n+passes_homogeneous_aggregate =\n+    homogeneous_aggregate: {$homogeneous_aggregate}\n+\n+passes_layout_of =\n+    layout_of({$normalized_ty}) = {$ty_layout}\n+\n+passes_unrecognized_field =\n+    unrecognized field name `{$name}`\n+\n+passes_layout =\n+    layout error: {$layout_error}"}, {"sha": "e7a592d5a47483c9f67705453c68c493d6695dff", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/40d5f00e16230ce67c018bb05b8772f02634146c/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5f00e16230ce67c018bb05b8772f02634146c/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=40d5f00e16230ce67c018bb05b8772f02634146c", "patch": "@@ -775,3 +775,60 @@ pub struct DuplicateDiagnosticItemInCrate {\n     pub crate_name: Symbol,\n     pub name: Symbol,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::abi)]\n+pub struct Abi {\n+    #[primary_span]\n+    pub span: Span,\n+    pub abi: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::align)]\n+pub struct Align {\n+    #[primary_span]\n+    pub span: Span,\n+    pub align: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::size)]\n+pub struct Size {\n+    #[primary_span]\n+    pub span: Span,\n+    pub size: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::homogeneous_aggregate)]\n+pub struct HomogeneousAggregate {\n+    #[primary_span]\n+    pub span: Span,\n+    pub homogeneous_aggregate: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::layout_of)]\n+pub struct LayoutOf {\n+    #[primary_span]\n+    pub span: Span,\n+    pub normalized_ty: String,\n+    pub ty_layout: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::unrecognized_field)]\n+pub struct UnrecognizedField {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::layout)]\n+pub struct Layout {\n+    #[primary_span]\n+    pub span: Span,\n+    pub layout_error: String,\n+}"}, {"sha": "7af1dda1ecbdbb7567dd62eeac24c175ce5ffe39", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/40d5f00e16230ce67c018bb05b8772f02634146c/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5f00e16230ce67c018bb05b8772f02634146c/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=40d5f00e16230ce67c018bb05b8772f02634146c", "patch": "@@ -7,6 +7,8 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, TargetDataLayout};\n \n+use crate::errors::{Abi, Align, HomogeneousAggregate, Layout, LayoutOf, Size, UnrecognizedField};\n+\n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n@@ -35,62 +37,64 @@ fn dump_layout_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: LocalDefId, attr: &Attri\n             for meta_item in meta_items {\n                 match meta_item.name_or_empty() {\n                     sym::abi => {\n-                        tcx.sess.span_err(\n-                            tcx.def_span(item_def_id.to_def_id()),\n-                            &format!(\"abi: {:?}\", ty_layout.abi),\n-                        );\n+                        tcx.sess.emit_err(Abi {\n+                            span: tcx.def_span(item_def_id.to_def_id()),\n+                            abi: format!(\"{:?}\", ty_layout.abi),\n+                        });\n                     }\n \n                     sym::align => {\n-                        tcx.sess.span_err(\n-                            tcx.def_span(item_def_id.to_def_id()),\n-                            &format!(\"align: {:?}\", ty_layout.align),\n-                        );\n+                        tcx.sess.emit_err(Align {\n+                            span: tcx.def_span(item_def_id.to_def_id()),\n+                            align: format!(\"{:?}\", ty_layout.align),\n+                        });\n                     }\n \n                     sym::size => {\n-                        tcx.sess.span_err(\n-                            tcx.def_span(item_def_id.to_def_id()),\n-                            &format!(\"size: {:?}\", ty_layout.size),\n-                        );\n+                        tcx.sess.emit_err(Size {\n+                            span: tcx.def_span(item_def_id.to_def_id()),\n+                            size: format!(\"{:?}\", ty_layout.size),\n+                        });\n                     }\n \n                     sym::homogeneous_aggregate => {\n-                        tcx.sess.span_err(\n-                            tcx.def_span(item_def_id.to_def_id()),\n-                            &format!(\n-                                \"homogeneous_aggregate: {:?}\",\n-                                ty_layout.homogeneous_aggregate(&UnwrapLayoutCx { tcx, param_env }),\n+                        tcx.sess.emit_err(HomogeneousAggregate {\n+                            span: tcx.def_span(item_def_id.to_def_id()),\n+                            homogeneous_aggregate: format!(\n+                                \"{:?}\",\n+                                ty_layout.homogeneous_aggregate(&UnwrapLayoutCx { tcx, param_env })\n                             ),\n-                        );\n+                        });\n                     }\n \n                     sym::debug => {\n-                        let normalized_ty = tcx.normalize_erasing_regions(\n-                            param_env.with_reveal_all_normalized(tcx),\n-                            ty,\n-                        );\n-                        tcx.sess.span_err(\n-                            tcx.def_span(item_def_id.to_def_id()),\n-                            &format!(\"layout_of({:?}) = {:#?}\", normalized_ty, *ty_layout),\n+                        let normalized_ty = format!(\n+                            \"{:?}\",\n+                            tcx.normalize_erasing_regions(\n+                                param_env.with_reveal_all_normalized(tcx),\n+                                ty,\n+                            )\n                         );\n+                        let ty_layout = format!(\"{:#?}\", *ty_layout);\n+                        tcx.sess.emit_err(LayoutOf {\n+                            span: tcx.def_span(item_def_id.to_def_id()),\n+                            normalized_ty,\n+                            ty_layout,\n+                        });\n                     }\n \n                     name => {\n-                        tcx.sess.span_err(\n-                            meta_item.span(),\n-                            &format!(\"unrecognized field name `{}`\", name),\n-                        );\n+                        tcx.sess.emit_err(UnrecognizedField { span: meta_item.span(), name });\n                     }\n                 }\n             }\n         }\n \n         Err(layout_error) => {\n-            tcx.sess.span_err(\n-                tcx.def_span(item_def_id.to_def_id()),\n-                &format!(\"layout error: {:?}\", layout_error),\n-            );\n+            tcx.sess.emit_err(Layout {\n+                span: tcx.def_span(item_def_id.to_def_id()),\n+                layout_error: format!(\"{:?}\", layout_error),\n+            });\n         }\n     }\n }"}]}