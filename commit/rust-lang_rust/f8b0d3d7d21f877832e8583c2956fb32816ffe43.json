{"sha": "f8b0d3d7d21f877832e8583c2956fb32816ffe43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjBkM2Q3ZDIxZjg3NzgzMmU4NTgzYzI5NTZmYjMyODE2ZmZlNDM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T23:08:38Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-02T23:26:00Z"}, "message": "Use GEPi a bunch.", "tree": {"sha": "d8ff0598302a624366b07943c50a7476697deb64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8ff0598302a624366b07943c50a7476697deb64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b0d3d7d21f877832e8583c2956fb32816ffe43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b0d3d7d21f877832e8583c2956fb32816ffe43", "html_url": "https://github.com/rust-lang/rust/commit/f8b0d3d7d21f877832e8583c2956fb32816ffe43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b0d3d7d21f877832e8583c2956fb32816ffe43/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc11cd5ca5690d97e5750a86ad50cc345d1893b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc11cd5ca5690d97e5750a86ad50cc345d1893b4", "html_url": "https://github.com/rust-lang/rust/commit/bc11cd5ca5690d97e5750a86ad50cc345d1893b4"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "d2009909f30335dc13ba3d1c961c03c92b02056f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8b0d3d7d21f877832e8583c2956fb32816ffe43/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b0d3d7d21f877832e8583c2956fb32816ffe43/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f8b0d3d7d21f877832e8583c2956fb32816ffe43", "patch": "@@ -3687,8 +3687,7 @@ fn build_environment_heap(bcx: @block_ctxt, lltydescs: ValueRef[],\n     let closure = r.body;\n \n     // Store bindings tydesc.\n-    let bound_tydesc =\n-        bcx.build.GEP(closure, ~[C_int(0), C_int(abi::closure_elt_tydesc)]);\n+    let bound_tydesc = GEPi(bcx, closure, ~[0, abi::closure_elt_tydesc]);\n     let ti = none;\n     let bindings_tydesc = get_tydesc(bcx, bindings_ty, true, ti);\n     lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n@@ -3718,8 +3717,7 @@ fn build_environment_heap(bcx: @block_ctxt, lltydescs: ValueRef[],\n     bcx = ty_params_slot.bcx;\n     i = 0u;\n     for td: ValueRef  in lltydescs {\n-        let ty_param_slot =\n-            bcx.build.GEP(ty_params_slot.val, ~[C_int(0), C_int(i as int)]);\n+        let ty_param_slot = GEPi(bcx, ty_params_slot.val, ~[0, i as int]);\n         bcx.build.Store(td, ty_param_slot);\n         i += 1u;\n     }\n@@ -3767,8 +3765,7 @@ fn build_environment(cx: &@block_ctxt, upvars: &@ast::node_id[]) ->\n         let upvar_count = std::ivec::len(llbindings);\n         let i = 0u;\n         while i < upvar_count {\n-            let llbindingptr =\n-                cx.build.GEP(llbindingsptr, ~[C_int(0), C_int(i as int)]);\n+            let llbindingptr = GEPi(cx, llbindingsptr, ~[0, i as int]);\n             cx.build.Store(llbindings.(i), llbindingptr);\n             i += 1u;\n         }\n@@ -3783,21 +3780,18 @@ fn build_environment(cx: &@block_ctxt, upvars: &@ast::node_id[]) ->\n         T_closure_ptr(*bcx_ccx(cx), val_ty(llbindingsptr), tydesc_count);\n     let llenvptr = alloca(cx, llvm::LLVMGetElementType(llenvptrty));\n     let llbindingsptrptr =\n-        cx.build.GEP(llenvptr,\n-                     ~[C_int(0), C_int(abi::box_rc_field_body),\n-                       C_int(abi::closure_elt_bindings)]);\n+        GEPi(cx, llenvptr,\n+             ~[0, abi::box_rc_field_body, abi::closure_elt_bindings]);\n     cx.build.Store(llbindingsptr, llbindingsptrptr);\n \n     // Copy in our type descriptors, in case the iterator body needs to refer\n     // to them.\n     let lltydescsptr =\n-        cx.build.GEP(llenvptr,\n-                     ~[C_int(0), C_int(abi::box_rc_field_body),\n-                       C_int(abi::closure_elt_ty_params)]);\n+        GEPi(cx, llenvptr,\n+             ~[0, abi::box_rc_field_body, abi::closure_elt_ty_params]);\n     let i = 0u;\n     while i < tydesc_count {\n-        let lltydescptr =\n-            cx.build.GEP(lltydescsptr, ~[C_int(0), C_int(i as int)]);\n+        let lltydescptr = GEPi(cx, lltydescsptr, ~[0, i as int]);\n         cx.build.Store(cx.fcx.lltydescs.(i), lltydescptr);\n         i += 1u;\n     }\n@@ -3878,42 +3872,34 @@ fn load_environment(enclosing_cx: &@block_ctxt, fcx: &@fn_ctxt,\n \n     // Populate the upvars from the environment.\n     let llenvptr = bcx.build.PointerCast(fcx.llenv, llenvptrty);\n-    llenvptr =\n-        bcx.build.GEP(llenvptr, ~[C_int(0), C_int(abi::box_rc_field_body)]);\n+    llenvptr = GEPi(bcx, llenvptr, ~[0, abi::box_rc_field_body]);\n     let llbindingsptrptr =\n-        bcx.build.GEP(llenvptr,\n-                      ~[C_int(0), C_int(abi::closure_elt_bindings)]);\n+        GEPi(bcx, llenvptr, ~[0, abi::closure_elt_bindings]);\n     let llbindingsptr = bcx.build.Load(llbindingsptrptr);\n \n     let i = 0u;\n     if !option::is_none(enclosing_cx.fcx.lliterbody) {\n         i += 1u;\n-        let lliterbodyptr =\n-            bcx.build.GEP(llbindingsptr, ~[C_int(0), C_int(0)]);\n+        let lliterbodyptr = GEPi(bcx, llbindingsptr, ~[0, 0]);\n         fcx.lliterbody = some(bcx.build.Load(lliterbodyptr));\n     }\n     for upvar_id: ast::node_id  in *upvars {\n-        let llupvarptrptr =\n-            bcx.build.GEP(llbindingsptr, ~[C_int(0), C_int(i as int)]);\n+        let llupvarptrptr = GEPi(bcx, llbindingsptr, ~[0, i as int]);\n         let llupvarptr = bcx.build.Load(llupvarptrptr);\n         let def_id = ast::def_id_of_def(bcx_tcx(bcx).def_map.get(upvar_id));\n         fcx.llupvars.insert(def_id.node, llupvarptr);\n         i += 1u;\n     }\n \n     // Populate the type parameters from the environment.\n-    let lltydescsptr =\n-        bcx.build.GEP(llenvptr,\n-                      ~[C_int(0), C_int(abi::closure_elt_ty_params)]);\n+    let lltydescsptr = GEPi(bcx, llenvptr, ~[0, abi::closure_elt_ty_params]);\n     let tydesc_count = std::ivec::len(enclosing_cx.fcx.lltydescs);\n     i = 0u;\n     while i < tydesc_count {\n-        let lltydescptr =\n-            bcx.build.GEP(lltydescsptr, ~[C_int(0), C_int(i as int)]);\n+        let lltydescptr = GEPi(bcx, lltydescsptr, ~[0, i as int]);\n         fcx.lltydescs += ~[bcx.build.Load(lltydescptr)];\n         i += 1u;\n     }\n-\n }\n \n fn trans_for_each(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,"}]}