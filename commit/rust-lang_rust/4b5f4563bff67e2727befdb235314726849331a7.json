{"sha": "4b5f4563bff67e2727befdb235314726849331a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNWY0NTYzYmZmNjdlMjcyN2JlZmRiMjM1MzE0NzI2ODQ5MzMxYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-22T22:05:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-22T22:05:33Z"}, "message": "auto merge of #17408 : bkoropoff/rust/bot-ice, r=alexcrichton\n\n- Don't attempt to autoderef `!`.  The `Deref`/`DerefMut` trait lookup would generate a bunch of unhelpful error spew.\r\n- Don't allow explicit deref of `!`, since later passes just ICE.  This closes issue #17373 \r\n- Don't allow explicit index of `!`, since later passes just ICE.  There does not seem to be an issue associated with this", "tree": {"sha": "cf259eb9f3510e6affd21e6a4d914af4a8d1c550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf259eb9f3510e6affd21e6a4d914af4a8d1c550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5f4563bff67e2727befdb235314726849331a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f4563bff67e2727befdb235314726849331a7", "html_url": "https://github.com/rust-lang/rust/commit/4b5f4563bff67e2727befdb235314726849331a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f4563bff67e2727befdb235314726849331a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437179ed8bf7f7672f84b19265df1ce569e70490", "url": "https://api.github.com/repos/rust-lang/rust/commits/437179ed8bf7f7672f84b19265df1ce569e70490", "html_url": "https://github.com/rust-lang/rust/commit/437179ed8bf7f7672f84b19265df1ce569e70490"}, {"sha": "6035222d21480c30614048538556d6a615810304", "url": "https://api.github.com/repos/rust-lang/rust/commits/6035222d21480c30614048538556d6a615810304", "html_url": "https://github.com/rust-lang/rust/commit/6035222d21480c30614048538556d6a615810304"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "5f1ff1d640630b4df140f68ee7401c376afcfacc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f4563bff67e2727befdb235314726849331a7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f4563bff67e2727befdb235314726849331a7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4b5f4563bff67e2727befdb235314726849331a7", "patch": "@@ -2154,6 +2154,10 @@ pub fn autoderef<T>(fcx: &FnCtxt, sp: Span, base_ty: ty::t,\n     for autoderefs in range(0, fcx.tcx().sess.recursion_limit.get()) {\n         let resolved_t = structurally_resolved_type(fcx, sp, t);\n \n+        if ty::type_is_bot(resolved_t) {\n+            return (resolved_t, autoderefs, None);\n+        }\n+\n         match should_stop(resolved_t, autoderefs) {\n             Some(x) => return (resolved_t, autoderefs, Some(x)),\n             None => {}\n@@ -3951,13 +3955,18 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         check_expr_with_expectation_and_lvalue_pref(\n             fcx, &**oprnd, expected_inner, lvalue_pref);\n         let mut oprnd_t = fcx.expr_ty(&**oprnd);\n-        if !ty::type_is_error(oprnd_t) && !ty::type_is_bot(oprnd_t) {\n+\n+        if !ty::type_is_error(oprnd_t) {\n             match unop {\n                 ast::UnBox => {\n-                    oprnd_t = ty::mk_box(tcx, oprnd_t)\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = ty::mk_box(tcx, oprnd_t)\n+                    }\n                 }\n                 ast::UnUniq => {\n-                    oprnd_t = ty::mk_uniq(tcx, oprnd_t);\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = ty::mk_uniq(tcx, oprnd_t);\n+                    }\n                 }\n                 ast::UnDeref => {\n                     oprnd_t = structurally_resolved_type(fcx, expr.span, oprnd_t);\n@@ -3994,23 +4003,27 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     };\n                 }\n                 ast::UnNot => {\n-                    oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n-                                                         oprnd_t);\n-                    if !(ty::type_is_integral(oprnd_t) ||\n-                         ty::get(oprnd_t).sty == ty::ty_bool) {\n-                        oprnd_t = check_user_unop(fcx, \"!\", \"not\",\n-                                                  tcx.lang_items.not_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n+                                                             oprnd_t);\n+                        if !(ty::type_is_integral(oprnd_t) ||\n+                             ty::get(oprnd_t).sty == ty::ty_bool) {\n+                            oprnd_t = check_user_unop(fcx, \"!\", \"not\",\n+                                                      tcx.lang_items.not_trait(),\n+                                                      expr, &**oprnd, oprnd_t);\n+                        }\n                     }\n                 }\n                 ast::UnNeg => {\n-                    oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n-                                                         oprnd_t);\n-                    if !(ty::type_is_integral(oprnd_t) ||\n-                         ty::type_is_fp(oprnd_t)) {\n-                        oprnd_t = check_user_unop(fcx, \"-\", \"neg\",\n-                                                  tcx.lang_items.neg_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                    if !ty::type_is_bot(oprnd_t) {\n+                        oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n+                                                             oprnd_t);\n+                        if !(ty::type_is_integral(oprnd_t) ||\n+                             ty::type_is_fp(oprnd_t)) {\n+                            oprnd_t = check_user_unop(fcx, \"-\", \"neg\",\n+                                                      tcx.lang_items.neg_trait(),\n+                                                      expr, &**oprnd, oprnd_t);\n+                        }\n                     }\n                 }\n             }\n@@ -4468,21 +4481,21 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n           check_expr(fcx, &**idx);\n           let raw_base_t = fcx.expr_ty(&**base);\n           let idx_t = fcx.expr_ty(&**idx);\n-          if ty::type_is_error(raw_base_t) || ty::type_is_bot(raw_base_t) {\n+          if ty::type_is_error(raw_base_t) {\n               fcx.write_ty(id, raw_base_t);\n-          } else if ty::type_is_error(idx_t) || ty::type_is_bot(idx_t) {\n+          } else if ty::type_is_error(idx_t) {\n               fcx.write_ty(id, idx_t);\n           } else {\n               let (_, autoderefs, field_ty) =\n                 autoderef(fcx, expr.span, raw_base_t, Some(base.id),\n                           lvalue_pref, |base_t, _| ty::index(base_t));\n               match field_ty {\n-                  Some(ty) => {\n+                  Some(ty) if !ty::type_is_bot(ty) => {\n                       check_expr_has_type(fcx, &**idx, ty::mk_uint());\n                       fcx.write_ty(id, ty);\n                       fcx.write_autoderef_adjustment(base.id, base.span, autoderefs);\n                   }\n-                  None => {\n+                  _ => {\n                       // This is an overloaded method.\n                       let base_t = structurally_resolved_type(fcx,\n                                                               expr.span,"}, {"sha": "cf05cf51640e9246b616a34b83bb43df7b46faca", "filename": "src/test/compile-fail/index-bot.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f4563bff67e2727befdb235314726849331a7/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f4563bff67e2727befdb235314726849331a7/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=4b5f4563bff67e2727befdb235314726849331a7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    (return)[0u]; //~ ERROR cannot index a value of type `!`\n+}"}, {"sha": "9cfae2662ac00da602c7dd6a6c83bbbb9c2fb781", "filename": "src/test/compile-fail/issue-17373.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f4563bff67e2727befdb235314726849331a7/src%2Ftest%2Fcompile-fail%2Fissue-17373.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f4563bff67e2727befdb235314726849331a7/src%2Ftest%2Fcompile-fail%2Fissue-17373.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17373.rs?ref=4b5f4563bff67e2727befdb235314726849331a7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    *return; //~ ERROR type `!` cannot be dereferenced\n+}"}]}