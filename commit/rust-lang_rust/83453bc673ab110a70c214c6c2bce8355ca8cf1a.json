{"sha": "83453bc673ab110a70c214c6c2bce8355ca8cf1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDUzYmM2NzNhYjExMGE3MGMyMTRjNmMyYmNlODM1NWNhOGNmMWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-16T23:02:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-12-19T16:46:38Z"}, "message": "add and document `--incremental` flag along with misc other changes\n\nFor example:\n\n- we now support `-vv` to get very verbose output.\n- RUSTFLAGS is respected by `x.py`\n- better error messages for some cases", "tree": {"sha": "f0c9c4673e5c94dbef52e998b1a2e1b3399eee1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0c9c4673e5c94dbef52e998b1a2e1b3399eee1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83453bc673ab110a70c214c6c2bce8355ca8cf1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83453bc673ab110a70c214c6c2bce8355ca8cf1a", "html_url": "https://github.com/rust-lang/rust/commit/83453bc673ab110a70c214c6c2bce8355ca8cf1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83453bc673ab110a70c214c6c2bce8355ca8cf1a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8921add611999a624018a30af4c243d7f48ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8921add611999a624018a30af4c243d7f48ed1", "html_url": "https://github.com/rust-lang/rust/commit/ef8921add611999a624018a30af4c243d7f48ed1"}], "stats": {"total": 128, "additions": 121, "deletions": 7}, "files": [{"sha": "ade5bde07d2da50a7012747f120d2acbb37c826c", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -116,6 +116,42 @@ compiler. What actually happens when you invoke rustbuild is:\n The goal of each stage is to (a) leverage Cargo as much as possible and failing\n that (b) leverage Rust as much as possible!\n \n+## Incremental builds\n+\n+You can configure rustbuild to use incremental compilation. Because\n+incremental is new and evolving rapidly, if you want to use it, it is\n+recommended that you replace the snapshot with a locally installed\n+nightly build of rustc. You will want to keep this up to date.\n+\n+To follow this course of action, first thing you will want to do is to\n+install a nightly, presumably using `rustup`. You will then want to\n+configure your directory to use this build, like so:\n+\n+```\n+# configure to use local rust instead of downloding a beta.\n+# `--local-rust-root` is optional here. If elided, we will\n+# use whatever rustc we find on your PATH.\n+> configure --enable-rustbuild --local-rust-root=~/.cargo/ --enable-local-rebuild\n+```\n+\n+After that, you can use the `--incremental` flag to actually do\n+incremental builds:\n+\n+```\n+> ../x.py build --incremental\n+```\n+\n+The `--incremental` flag will store incremental compilation artifacts\n+in `build/stage0-incremental`. Note that we only use incremental\n+compilation for the stage0 -> stage1 compilation -- this is because\n+the stage1 compiler is changing, and we don't try to cache and reuse\n+incremental artifacts across different versions of the compiler. For\n+this reason, `--incremental` defaults to `--stage 1` (though you can\n+manually select a higher stage, if you prefer).\n+\n+You can always drop the `--incremental` to build as normal (but you\n+will still be using the local nightly as your bootstrap).\n+\n ## Directory Layout\n \n This build system houses all output under the `build` directory, which looks"}, {"sha": "a17b0c53d0ae4c43f69649822eea73308bf8fdfc", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -29,6 +29,9 @@ extern crate bootstrap;\n \n use std::env;\n use std::ffi::OsString;\n+use std::io;\n+use std::io::prelude::*;\n+use std::str::FromStr;\n use std::path::PathBuf;\n use std::process::Command;\n \n@@ -41,6 +44,11 @@ fn main() {\n         .and_then(|w| w[1].to_str());\n     let version = args.iter().find(|w| &**w == \"-vV\");\n \n+    let verbose = match env::var(\"RUSTC_VERBOSE\") {\n+        Ok(s) => usize::from_str(&s).expect(\"RUSTC_VERBOSE should be an integer\"),\n+        Err(_) => 0,\n+    };\n+\n     // Build scripts always use the snapshot compiler which is guaranteed to be\n     // able to produce an executable, whereas intermediate compilers may not\n     // have the standard library built yet and may not be able to produce an\n@@ -95,6 +103,15 @@ fn main() {\n             cmd.args(&s.split(\" \").filter(|s| !s.is_empty()).collect::<Vec<_>>());\n         }\n \n+        // Pass down incremental directory, if any.\n+        if let Ok(dir) = env::var(\"RUSTC_INCREMENTAL\") {\n+            cmd.arg(format!(\"-Zincremental={}\", dir));\n+\n+            if verbose > 0 {\n+                cmd.arg(\"-Zincremental-info\");\n+            }\n+        }\n+\n         // If we're compiling specifically the `panic_abort` crate then we pass\n         // the `-C panic=abort` option. Note that we do not do this for any\n         // other crate intentionally as this is the only crate for now that we\n@@ -176,9 +193,19 @@ fn main() {\n             if let Some(rpath) = rpath {\n                 cmd.arg(\"-C\").arg(format!(\"link-args={}\", rpath));\n             }\n+\n+            if let Ok(s) = env::var(\"RUSTFLAGS\") {\n+                for flag in s.split_whitespace() {\n+                    cmd.arg(flag);\n+                }\n+            }\n         }\n     }\n \n+    if verbose > 1 {\n+        writeln!(&mut io::stderr(), \"rustc command: {:?}\", cmd).unwrap();\n+    }\n+\n     // Actually run the compiler!\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),"}, {"sha": "5f16542ed2f2b6ec0d3d088989b80cc584272aaf", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -294,6 +294,8 @@ def build_bootstrap(self):\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\")\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n                       os.pathsep + env[\"PATH\"]\n+        if not os.path.isfile(self.cargo()):\n+            raise Exception(\"no cargo executable found at `%s`\" % self.cargo())\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n         if self.use_vendored_sources:"}, {"sha": "881da7b682ba8998324f1fc971a8aaf1e8526d8b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -190,7 +190,7 @@ pub fn compiletest(build: &Build,\n \n     cmd.args(&build.flags.cmd.test_args());\n \n-    if build.config.verbose || build.flags.verbose {\n+    if build.config.verbose() || build.flags.verbose() {\n         cmd.arg(\"--verbose\");\n     }\n "}, {"sha": "f267f60d81407772e955e9f563742354fd142f9f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -40,7 +40,7 @@ use util::push_exe_path;\n pub struct Config {\n     pub ccache: Option<String>,\n     pub ninja: bool,\n-    pub verbose: bool,\n+    pub verbose: usize,\n     pub submodules: bool,\n     pub compiler_docs: bool,\n     pub docs: bool,\n@@ -504,6 +504,14 @@ impl Config {\n             }\n         }\n     }\n+\n+    pub fn verbose(&self) -> bool {\n+        self.verbose > 0\n+    }\n+\n+    pub fn very_verbose(&self) -> bool {\n+        self.verbose > 1\n+    }\n }\n \n #[cfg(not(windows))]"}, {"sha": "e5ace62406a2b521b2186d576624e6b5155532cd", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -27,7 +27,7 @@ use step;\n \n /// Deserialized version of all flags for this compile.\n pub struct Flags {\n-    pub verbose: bool,\n+    pub verbose: usize, // verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n     pub stage: Option<u32>,\n     pub keep_stage: Option<u32>,\n     pub build: String,\n@@ -37,6 +37,17 @@ pub struct Flags {\n     pub src: Option<PathBuf>,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n+    pub incremental: bool,\n+}\n+\n+impl Flags {\n+    pub fn verbose(&self) -> bool {\n+        self.verbose > 0\n+    }\n+\n+    pub fn very_verbose(&self) -> bool {\n+        self.verbose > 1\n+    }\n }\n \n pub enum Subcommand {\n@@ -63,7 +74,8 @@ pub enum Subcommand {\n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n         let mut opts = Options::new();\n-        opts.optflag(\"v\", \"verbose\", \"use verbose output\");\n+        opts.optflagmulti(\"v\", \"verbose\", \"use verbose output (-vv for very verbose)\");\n+        opts.optflag(\"i\", \"incremental\", \"use incremental compilation\");\n         opts.optopt(\"\", \"config\", \"TOML configuration file for build\", \"FILE\");\n         opts.optopt(\"\", \"build\", \"build target of the stage0 compiler\", \"BUILD\");\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n@@ -256,8 +268,18 @@ To learn more about a subcommand, run `./x.py <command> -h`\n             }\n         });\n \n+        let mut stage = m.opt_str(\"stage\").map(|j| j.parse().unwrap());\n+\n+        let incremental = m.opt_present(\"i\");\n+\n+        if incremental {\n+            if stage.is_none() {\n+                stage = Some(1);\n+            }\n+        }\n+\n         Flags {\n-            verbose: m.opt_present(\"v\"),\n+            verbose: m.opt_count(\"v\"),\n             stage: m.opt_str(\"stage\").map(|j| j.parse().unwrap()),\n             keep_stage: m.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n             build: m.opt_str(\"build\").unwrap_or_else(|| {\n@@ -269,6 +291,7 @@ To learn more about a subcommand, run `./x.py <command> -h`\n             src: m.opt_str(\"src\").map(PathBuf::from),\n             jobs: m.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd: cmd,\n+            incremental: incremental,\n         }\n     }\n }"}, {"sha": "f6db6e786db812d1b90d691883dbece315d11077", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83453bc673ab110a70c214c6c2bce8355ca8cf1a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=83453bc673ab110a70c214c6c2bce8355ca8cf1a", "patch": "@@ -74,6 +74,7 @@ extern crate rustc_serialize;\n extern crate toml;\n \n use std::collections::HashMap;\n+use std::cmp;\n use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n@@ -497,6 +498,17 @@ impl Build {\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n \n+        // Ignore incremental modes except for stage0, since we're\n+        // not guaranteeing correctness acros builds if the compiler\n+        // is changing under your feet.`\n+        if self.flags.incremental && compiler.stage == 0 {\n+            let incr_dir = self.incremental_dir(compiler);\n+            cargo.env(\"RUSTC_INCREMENTAL\", incr_dir);\n+        }\n+\n+        let verbose = cmp::max(self.config.verbose, self.flags.verbose);\n+        cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", verbose));\n+\n         // Specify some various options for build scripts used throughout\n         // the build.\n         //\n@@ -516,7 +528,7 @@ impl Build {\n         // FIXME: should update code to not require this env var\n         cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n \n-        if self.config.verbose || self.flags.verbose {\n+        if self.config.verbose() || self.flags.verbose() {\n             cargo.arg(\"-v\");\n         }\n         // FIXME: cargo bench does not accept `--release`\n@@ -630,6 +642,12 @@ impl Build {\n         }\n     }\n \n+    /// Get the directory for incremental by-products when using the\n+    /// given compiler.\n+    fn incremental_dir(&self, compiler: &Compiler) -> PathBuf {\n+        self.out.join(compiler.host).join(format!(\"stage{}-incremental\", compiler.stage))\n+    }\n+\n     /// Returns the libdir where the standard library and other artifacts are\n     /// found for a compiler's sysroot.\n     fn sysroot_libdir(&self, compiler: &Compiler, target: &str) -> PathBuf {\n@@ -768,7 +786,7 @@ impl Build {\n \n     /// Prints a message if this build is configured in verbose mode.\n     fn verbose(&self, msg: &str) {\n-        if self.flags.verbose || self.config.verbose {\n+        if self.flags.verbose() || self.config.verbose() {\n             println!(\"{}\", msg);\n         }\n     }"}]}