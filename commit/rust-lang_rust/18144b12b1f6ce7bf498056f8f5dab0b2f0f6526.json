{"sha": "18144b12b1f6ce7bf498056f8f5dab0b2f0f6526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTQ0YjEyYjFmNmNlN2JmNDk4MDU2ZjhmNWRhYjBiMmYwZjY1MjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-21T19:51:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-21T19:51:40Z"}, "message": "auto merge of #8546 : jld/rust/discrim-symbol-rm, r=pcwalton\n\nGiven that bootstrapping and running the testsuite works without\r\nexporting discriminant values as global constants, I conclude that\r\nthey're unused and can be removed.", "tree": {"sha": "446d8691bec275514c7dc47ac41265c6a337d817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/446d8691bec275514c7dc47ac41265c6a337d817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526", "html_url": "https://github.com/rust-lang/rust/commit/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6cc11e05de145641a610c342b75c2f9f01ce6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6cc11e05de145641a610c342b75c2f9f01ce6d", "html_url": "https://github.com/rust-lang/rust/commit/0c6cc11e05de145641a610c342b75c2f9f01ce6d"}, {"sha": "46672d2b066ccc4503dcd3bf2f84657b3fed4d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/46672d2b066ccc4503dcd3bf2f84657b3fed4d40", "html_url": "https://github.com/rust-lang/rust/commit/46672d2b066ccc4503dcd3bf2f84657b3fed4d40"}], "stats": {"total": 66, "additions": 0, "deletions": 66}, "files": [{"sha": "1e9214e666bf1d580eca072cae4afd4bae202aeb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=18144b12b1f6ce7bf498056f8f5dab0b2f0f6526", "patch": "@@ -290,14 +290,6 @@ fn encode_symbol(ecx: &EncodeContext,\n     ebml_w.end_tag();\n }\n \n-fn encode_discriminant(ecx: &EncodeContext,\n-                       ebml_w: &mut writer::Encoder,\n-                       id: NodeId) {\n-    ebml_w.start_tag(tag_items_data_item_symbol);\n-    ebml_w.writer.write(ecx.discrim_symbols.get_copy(&id).as_bytes());\n-    ebml_w.end_tag();\n-}\n-\n fn encode_disr_val(_: &EncodeContext,\n                    ebml_w: &mut writer::Encoder,\n                    disr_val: uint) {\n@@ -344,7 +336,6 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n             }\n             ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) => {}\n         }\n-        encode_discriminant(ecx, ebml_w, variant.node.id);\n         if vi[i].disr_val != disr_val {\n             encode_disr_val(ecx, ebml_w, vi[i].disr_val);\n             disr_val = vi[i].disr_val;"}, {"sha": "f19decaa38cde1b9f7e37d6eb9a4860c5ec3c150", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18144b12b1f6ce7bf498056f8f5dab0b2f0f6526/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=18144b12b1f6ce7bf498056f8f5dab0b2f0f6526", "patch": "@@ -84,7 +84,6 @@ use syntax::codemap::span;\n use syntax::parse::token;\n use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n-use syntax::visit;\n use syntax::{ast, ast_util, codemap, ast_map};\n use syntax::abi::{X86, X86_64, Arm, Mips};\n \n@@ -2621,57 +2620,6 @@ pub fn register_method(ccx: @mut CrateContext,\n     llfn\n }\n \n-// The constant translation pass.\n-pub fn trans_constant(ccx: &mut CrateContext, it: @ast::item) {\n-    let _icx = push_ctxt(\"trans_constant\");\n-    match it.node {\n-      ast::item_enum(ref enum_definition, _) => {\n-        let vi = ty::enum_variants(ccx.tcx,\n-                                   ast::def_id { crate: ast::LOCAL_CRATE,\n-                                                 node: it.id });\n-        let mut i = 0;\n-        let path = item_path(ccx, &it.id);\n-        for variant in (*enum_definition).variants.iter() {\n-            let p = vec::append(path.clone(), [\n-                path_name(variant.node.name),\n-                path_name(special_idents::descrim)\n-            ]);\n-            let s = mangle_exported_name(ccx, p, ty::mk_int()).to_managed();\n-            let disr_val = vi[i].disr_val;\n-            note_unique_llvm_symbol(ccx, s);\n-            let discrim_gvar = do s.with_c_str |buf| {\n-                unsafe {\n-                    llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n-                }\n-            };\n-            unsafe {\n-                llvm::LLVMSetInitializer(discrim_gvar, C_uint(ccx, disr_val));\n-                llvm::LLVMSetGlobalConstant(discrim_gvar, True);\n-            }\n-            ccx.discrims.insert(\n-                local_def(variant.node.id), discrim_gvar);\n-            ccx.discrim_symbols.insert(variant.node.id, s);\n-            i += 1;\n-        }\n-      }\n-      _ => ()\n-    }\n-}\n-\n-struct TransConstantsVisitor { ccx: @mut CrateContext }\n-\n-impl visit::Visitor<()> for TransConstantsVisitor {\n-    fn visit_item(&mut self, i:@ast::item, _:()) {\n-        trans_constant(self.ccx, i);\n-        visit::walk_item(self, i, ());\n-    }\n-}\n-\n-pub fn trans_constants(ccx: @mut CrateContext, crate: &ast::Crate) {\n-    let mut v = TransConstantsVisitor { ccx: ccx };\n-    visit::walk_crate(&mut v, crate, ());\n-}\n-\n pub fn vp2i(cx: @mut Block, v: ValueRef) -> ValueRef {\n     let ccx = cx.ccx();\n     return PtrToInt(cx, v, ccx.int_type);\n@@ -3050,11 +2998,6 @@ pub fn trans_crate(sess: session::Session,\n                                      link_meta,\n                                      analysis.reachable);\n \n-    {\n-        let _icx = push_ctxt(\"data\");\n-        trans_constants(ccx, crate);\n-    }\n-\n     {\n         let _icx = push_ctxt(\"text\");\n         trans_mod(ccx, &crate.module);"}]}