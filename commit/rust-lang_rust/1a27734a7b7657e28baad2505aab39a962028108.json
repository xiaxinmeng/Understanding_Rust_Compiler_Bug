{"sha": "1a27734a7b7657e28baad2505aab39a962028108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjc3MzRhN2I3NjU3ZTI4YmFhZDI1MDVhYWIzOWE5NjIwMjgxMDg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T23:19:42Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T23:19:42Z"}, "message": "Reimplement cross-crate function calls.", "tree": {"sha": "637946de9be955a11e63c25c658580b502465a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637946de9be955a11e63c25c658580b502465a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a27734a7b7657e28baad2505aab39a962028108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a27734a7b7657e28baad2505aab39a962028108", "html_url": "https://github.com/rust-lang/rust/commit/1a27734a7b7657e28baad2505aab39a962028108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a27734a7b7657e28baad2505aab39a962028108/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "url": "https://api.github.com/repos/rust-lang/rust/commits/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "html_url": "https://github.com/rust-lang/rust/commit/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "e51e6fd5d17beafdba3fd752ce9fbaf5884fbe41", "filename": "src/interpreter.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1a27734a7b7657e28baad2505aab39a962028108/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a27734a7b7657e28baad2505aab39a962028108/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=1a27734a7b7657e28baad2505aab39a962028108", "patch": "@@ -1,10 +1,15 @@\n use rustc::middle::const_eval;\n+use rustc::middle::def_id::DefId;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc::middle::subst::Substs;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n+use rustc::util::nodemap::DefIdMap;\n+use std::cell::RefCell;\n use std::error::Error;\n use std::fmt;\n+use std::ops::Deref;\n+use std::rc::Rc;\n \n use memory::{FieldRepr, Memory, Pointer, Repr};\n use primval::{self, PrimVal};\n@@ -41,10 +46,26 @@ impl fmt::Display for EvalError {\n     }\n }\n \n+#[derive(Clone)]\n+pub enum CachedMir<'mir, 'tcx: 'mir> {\n+    Ref(&'mir mir::Mir<'tcx>),\n+    Owned(Rc<mir::Mir<'tcx>>)\n+}\n+\n+impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {\n+    type Target = mir::Mir<'tcx>;\n+    fn deref(&self) -> &mir::Mir<'tcx> {\n+        match *self {\n+            CachedMir::Ref(r) => r,\n+            CachedMir::Owned(ref rc) => &rc,\n+        }\n+    }\n+}\n+\n /// A stack frame.\n struct Frame<'a, 'tcx: 'a> {\n     /// The MIR for the function called on this frame.\n-    mir: &'a mir::Mir<'tcx>,\n+    mir: CachedMir<'a, 'tcx>,\n \n     /// A pointer for writing the return value of the current call, if it's not a diverging call.\n     return_ptr: Option<Pointer>,\n@@ -78,6 +99,7 @@ impl<'a, 'tcx: 'a> Frame<'a, 'tcx> {\n struct Interpreter<'a, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n     mir_map: &'a MirMap<'tcx>,\n+    mir_cache: RefCell<DefIdMap<Rc<mir::Mir<'tcx>>>>,\n     memory: Memory,\n     stack: Vec<Frame<'a, 'tcx>>,\n }\n@@ -87,12 +109,13 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         Interpreter {\n             tcx: tcx,\n             mir_map: mir_map,\n+            mir_cache: RefCell::new(DefIdMap()),\n             memory: Memory::new(),\n             stack: Vec::new(),\n         }\n     }\n \n-    fn push_stack_frame(&mut self, mir: &'a mir::Mir<'tcx>, args: &[mir::Operand<'tcx>],\n+    fn push_stack_frame(&mut self, mir: CachedMir<'a, 'tcx>, args: &[mir::Operand<'tcx>],\n                         return_ptr: Option<Pointer>) -> EvalResult<()> {\n         let num_args = mir.arg_decls.len();\n         let num_vars = mir.var_decls.len();\n@@ -117,7 +140,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         }));\n \n         self.stack.push(Frame {\n-            mir: mir,\n+            mir: mir.clone(),\n             return_ptr: return_ptr,\n             locals: locals,\n             var_offset: num_args,\n@@ -132,9 +155,28 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         // TODO(tsion): Deallocate local variables.\n     }\n \n-    fn call(&mut self, mir: &'a mir::Mir<'tcx>, args: &[mir::Operand<'tcx>],\n+    fn load_mir(&self, def_id: DefId) -> CachedMir<'a, 'tcx> {\n+        match self.tcx.map.as_local_node_id(def_id) {\n+            Some(node_id) => CachedMir::Ref(self.mir_map.map.get(&node_id).unwrap()),\n+            None => {\n+                let mut mir_cache = self.mir_cache.borrow_mut();\n+                if let Some(mir) = mir_cache.get(&def_id) {\n+                    return CachedMir::Owned(mir.clone());\n+                }\n+\n+                use rustc::middle::cstore::CrateStore;\n+                let cs = &self.tcx.sess.cstore;\n+                let mir = cs.maybe_get_item_mir(self.tcx, def_id).unwrap();\n+                let cached = Rc::new(mir);\n+                mir_cache.insert(def_id, cached.clone());\n+                CachedMir::Owned(cached)\n+            }\n+        }\n+    }\n+\n+    fn call(&mut self, mir: CachedMir<'a, 'tcx>, args: &[mir::Operand<'tcx>],\n             return_ptr: Option<Pointer>) -> EvalResult<()> {\n-        try!(self.push_stack_frame(mir, args, return_ptr));\n+        try!(self.push_stack_frame(mir.clone(), args, return_ptr));\n         let mut current_block = mir::START_BLOCK;\n \n         loop {\n@@ -197,18 +239,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n \n                     match func_ty.sty {\n                         ty::TyFnDef(def_id, _, _) => {\n-                            // let mir_data;\n-                            let mir = match self.tcx.map.as_local_node_id(def_id) {\n-                                Some(node_id) => self.mir_map.map.get(&node_id).unwrap(),\n-                                None => {\n-                                    unimplemented!()\n-                                    // use rustc::middle::cstore::CrateStore;\n-                                    // let cs = &self.tcx.sess.cstore;\n-                                    // mir_data = cs.maybe_get_item_mir(self.tcx, def_id).unwrap();\n-                                    // &mir_data\n-                                }\n-                            };\n-\n+                            let mir = self.load_mir(def_id);\n                             try!(self.call(mir, args, ptr));\n                         }\n \n@@ -491,7 +522,7 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                     }\n                     ty::FnDiverging => None,\n                 };\n-                miri.call(mir, &[], return_ptr).unwrap();\n+                miri.call(CachedMir::Ref(mir), &[], return_ptr).unwrap();\n \n                 if let Some(ret) = return_ptr {\n                     println!(\"Returned: {:?}\\n\", miri.memory.get(ret.alloc_id).unwrap());"}, {"sha": "1b562b1b729acc861b509c8bfc55bff3f9c6691d", "filename": "test/calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a27734a7b7657e28baad2505aab39a962028108/test%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a27734a7b7657e28baad2505aab39a962028108/test%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fcalls.rs?ref=1a27734a7b7657e28baad2505aab39a962028108", "patch": "@@ -22,7 +22,7 @@ fn factorial_recursive() -> i64 {\n }\n \n // Test calling a very simple function from the standard library.\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn cross_crate_fn_call() -> i64 {\n-//     if 1i64.is_positive() { 1 } else { 0 }\n-// }\n+#[miri_run]\n+fn cross_crate_fn_call() -> i64 {\n+    if 1i32.is_positive() { 1 } else { 0 }\n+}"}]}