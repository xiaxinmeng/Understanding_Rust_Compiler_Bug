{"sha": "9e83df0f69d0509c411808766c3472f11476bd9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODNkZjBmNjlkMDUwOWM0MTE4MDg3NjZjMzQ3MmYxMTQ3NmJkOWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T19:18:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T19:18:43Z"}, "message": "Rollup merge of #68054 - tspiteri:null-unchecked-as_mut, r=cramertj\n\ndoc: add Null-unchecked version section to mut pointer as_mut method\n\nThe [`as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref-1) method already has a *Null-unchecked version* section, its example is a modification of the example in the main `as_ref` section. Similarly the example in this PR is a modification of the example in main [`as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut) section.\n\nFixes #68032.", "tree": {"sha": "0fcb109e9d947be2ccacd73bfb6ae722385d8626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fcb109e9d947be2ccacd73bfb6ae722385d8626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e83df0f69d0509c411808766c3472f11476bd9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF3yTCRBK7hj4Ov3rIwAAdHIIADR2VpZYmI339gBUOh1s1c0n\nrbaiXzlyodItVAjSWwKPsX13s4v/LK+q6Yi6QnXE4RgzbiG8iOrIg64YkOMQbuK3\nVZNKX+GKCFWmx7IMyIq4NBh0WMyTy6Sb2vYGshbHSWHwWYZnCV3/lqiYS/gHHbdo\nus8S6Gm0SrexK2xWfKqSvn4T3jHhXJTCdiS+6Xh5j7l/zA2Q/aCsfugk/FrXEiJS\nOEOvERYG/33YRNVwcfKs3uLomB18bQCC8ziXKFlEc23CU6EL2BqT3Bkbebt5b3aC\nND3+SY3YGtFxsrgvHUmP1nfEG2O/R1dlYpTneexVwgMWldBJfrfB19mbhpWZXJQ=\n=AhV+\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fcb109e9d947be2ccacd73bfb6ae722385d8626\nparent a366aa6249c0a8da29fbf2a8e36717bd5af1e56e\nparent f8428cf8d8193c1a6268a046afea9bea85d4d9fe\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578597523 +0900\ncommitter GitHub <noreply@github.com> 1578597523 +0900\n\nRollup merge of #68054 - tspiteri:null-unchecked-as_mut, r=cramertj\n\ndoc: add Null-unchecked version section to mut pointer as_mut method\n\nThe [`as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref-1) method already has a *Null-unchecked version* section, its example is a modification of the example in the main `as_ref` section. Similarly the example in this PR is a modification of the example in main [`as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut) section.\n\nFixes #68032.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e83df0f69d0509c411808766c3472f11476bd9e", "html_url": "https://github.com/rust-lang/rust/commit/9e83df0f69d0509c411808766c3472f11476bd9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e83df0f69d0509c411808766c3472f11476bd9e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a366aa6249c0a8da29fbf2a8e36717bd5af1e56e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a366aa6249c0a8da29fbf2a8e36717bd5af1e56e", "html_url": "https://github.com/rust-lang/rust/commit/a366aa6249c0a8da29fbf2a8e36717bd5af1e56e"}, {"sha": "f8428cf8d8193c1a6268a046afea9bea85d4d9fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8428cf8d8193c1a6268a046afea9bea85d4d9fe", "html_url": "https://github.com/rust-lang/rust/commit/f8428cf8d8193c1a6268a046afea9bea85d4d9fe"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "4bc0a3e9faa607dd93efe45742f92a040a3a5ecb", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e83df0f69d0509c411808766c3472f11476bd9e/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e83df0f69d0509c411808766c3472f11476bd9e/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=9e83df0f69d0509c411808766c3472f11476bd9e", "patch": "@@ -250,6 +250,20 @@ impl<T: ?Sized> *mut T {\n     /// *first_value = 4;\n     /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n     /// ```\n+    ///\n+    /// # Null-unchecked version\n+    ///\n+    /// If you are sure the pointer can never be null and are looking for some kind of\n+    /// `as_mut_unchecked` that returns the `&mut T` instead of `Option<&mut T>`, know that\n+    /// you can dereference the pointer directly.\n+    ///\n+    /// ```\n+    /// let mut s = [1, 2, 3];\n+    /// let ptr: *mut u32 = s.as_mut_ptr();\n+    /// let first_value = unsafe { &mut *ptr };\n+    /// *first_value = 4;\n+    /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n+    /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {"}]}