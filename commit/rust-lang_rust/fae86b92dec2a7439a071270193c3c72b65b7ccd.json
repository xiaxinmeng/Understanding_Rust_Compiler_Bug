{"sha": "fae86b92dec2a7439a071270193c3c72b65b7ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTg2YjkyZGVjMmE3NDM5YTA3MTI3MDE5M2MzYzcyYjY1YjdjY2Q=", "commit": {"author": {"name": "Theodore DeRego", "email": "tedsta@google.com", "date": "2016-11-23T00:08:48Z"}, "committer": {"name": "Theodore DeRego", "email": "tedsta@google.com", "date": "2016-11-23T00:08:48Z"}, "message": "Cleaned up and appeased the linter", "tree": {"sha": "f36f240a6c33089ff39edadd28330838fd4640d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36f240a6c33089ff39edadd28330838fd4640d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae86b92dec2a7439a071270193c3c72b65b7ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae86b92dec2a7439a071270193c3c72b65b7ccd", "html_url": "https://github.com/rust-lang/rust/commit/fae86b92dec2a7439a071270193c3c72b65b7ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae86b92dec2a7439a071270193c3c72b65b7ccd/comments", "author": {"login": "tedsta", "id": 1218723, "node_id": "MDQ6VXNlcjEyMTg3MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1218723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedsta", "html_url": "https://github.com/tedsta", "followers_url": "https://api.github.com/users/tedsta/followers", "following_url": "https://api.github.com/users/tedsta/following{/other_user}", "gists_url": "https://api.github.com/users/tedsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedsta/subscriptions", "organizations_url": "https://api.github.com/users/tedsta/orgs", "repos_url": "https://api.github.com/users/tedsta/repos", "events_url": "https://api.github.com/users/tedsta/events{/privacy}", "received_events_url": "https://api.github.com/users/tedsta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tedsta", "id": 1218723, "node_id": "MDQ6VXNlcjEyMTg3MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1218723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedsta", "html_url": "https://github.com/tedsta", "followers_url": "https://api.github.com/users/tedsta/followers", "following_url": "https://api.github.com/users/tedsta/following{/other_user}", "gists_url": "https://api.github.com/users/tedsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedsta/subscriptions", "organizations_url": "https://api.github.com/users/tedsta/orgs", "repos_url": "https://api.github.com/users/tedsta/repos", "events_url": "https://api.github.com/users/tedsta/events{/privacy}", "received_events_url": "https://api.github.com/users/tedsta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c23f2e3c88275cee37acbd36c12baba57c4de2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c23f2e3c88275cee37acbd36c12baba57c4de2b", "html_url": "https://github.com/rust-lang/rust/commit/5c23f2e3c88275cee37acbd36c12baba57c4de2b"}], "stats": {"total": 107, "additions": 30, "deletions": 77}, "files": [{"sha": "0b59de55cc68e729cb096be93ca787efeb2644bd", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fae86b92dec2a7439a071270193c3c72b65b7ccd/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae86b92dec2a7439a071270193c3c72b65b7ccd/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=fae86b92dec2a7439a071270193c3c72b65b7ccd", "patch": "@@ -780,8 +780,6 @@ impl Child {\n     ///\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn wait_with_output(mut self) -> io::Result<Output> {\n-        //use io::ErrorKind;\n-\n         drop(self.stdin.take());\n \n         let (mut stdout, mut stderr) = (Vec::new(), Vec::new());\n@@ -796,15 +794,8 @@ impl Child {\n                 res.unwrap();\n             }\n             (Some(out), Some(err)) => {\n-                match read2(out.inner, &mut stdout, err.inner, &mut stderr) {\n-                    Ok(()) => { },\n-                    #[cfg(not(target_os = \"fuchsia\"))]\n-                    Err(ref e) => { panic!(\"Failed to read child's stdout and stderr: {:?}\", e); },\n-                    #[cfg(target_os = \"fuchsia\")]\n-                    Err(_) => {\n-                        // FIXME: Right now there's a bug in magenta's pipes implementation\n-                    },\n-                }\n+                let res = read2(out.inner, &mut stdout, err.inner, &mut stderr);\n+                res.update();\n             }\n         }\n "}, {"sha": "9da827c7d31a52b12c3b080bdce1d3f33586bbd0", "filename": "src/libstd/sys/unix/magenta.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae86b92dec2a7439a071270193c3c72b65b7ccd/src%2Flibstd%2Fsys%2Funix%2Fmagenta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae86b92dec2a7439a071270193c3c72b65b7ccd/src%2Flibstd%2Fsys%2Funix%2Fmagenta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmagenta.rs?ref=fae86b92dec2a7439a071270193c3c72b65b7ccd", "patch": "@@ -28,8 +28,6 @@ pub const MX_HANDLE_INVALID: mx_handle_t = 0;\n pub type mx_time_t = u64;\n pub const MX_TIME_INFINITE : mx_time_t = u64::MAX;\n \n-pub const NO_ERROR              : mx_status_t = 0;\n-\n pub type mx_signals_t = u32;\n \n pub const MX_OBJECT_SIGNAL_3         : mx_signals_t = 1 << 3;"}, {"sha": "d660514a9830e5e04484972f7ba7d507b476f7f8", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 28, "deletions": 64, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fae86b92dec2a7439a071270193c3c72b65b7ccd/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae86b92dec2a7439a071270193c3c72b65b7ccd/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=fae86b92dec2a7439a071270193c3c72b65b7ccd", "patch": "@@ -309,18 +309,9 @@ impl Command {\n \n         let (ours, theirs) = self.setup_io(default, needs_stdin)?;\n \n-        let (maybe_process, err) = unsafe { self.do_exec(&theirs) };\n-        // We don't want FileDesc::drop to be called on any stdio. It would close their handles.\n-        let ChildPipes { stdin: their_stdin, stdout: their_stdout, stderr: their_stderr } = theirs;\n-        their_stdin.fd();\n-        their_stdout.fd();\n-        their_stderr.fd();\n-\n-        if let Some((launchpad, process_handle)) = maybe_process {\n-            Ok((Process { launchpad: launchpad, handle: process_handle, status: None }, ours))\n-        } else {\n-            Err(err)\n-        }\n+        let (launchpad, process_handle) = unsafe { self.do_exec(theirs)? };\n+\n+        Ok((Process { launchpad: launchpad, handle: process_handle, status: None }, ours))\n     }\n \n     #[cfg(not(target_os = \"fuchsia\"))]\n@@ -453,23 +444,16 @@ impl Command {\n     }\n \n     #[cfg(target_os = \"fuchsia\")]\n-    unsafe fn do_exec(&mut self, stdio: &ChildPipes)\n-                      -> (Option<(*mut launchpad_t, mx_handle_t)>, io::Error) {\n+    unsafe fn do_exec(&mut self, stdio: ChildPipes)\n+                      -> io::Result<(*mut launchpad_t, mx_handle_t)> {\n         use sys::magenta::*;\n \n-        macro_rules! t {\n-            ($e:expr) => (match $e {\n-                Ok(e) => e,\n-                Err(e) => return (None, e),\n-            })\n-        }\n-\n         macro_rules! tlp {\n             ($lp:expr, $e:expr) => (match $e {\n                 Ok(e) => e,\n                 Err(e) => {\n                     launchpad_destroy($lp);\n-                    return (None, e);\n+                    return Err(e);\n                 },\n             })\n         }\n@@ -484,46 +468,23 @@ impl Command {\n         let mut job_copy: mx_handle_t = MX_HANDLE_INVALID;\n \n         // Duplicate the job handle\n-        t!(mx_cvt(mx_handle_duplicate(job_handle, MX_RIGHT_SAME_RIGHTS,\n-                                   &mut job_copy as *mut mx_handle_t)));\n+        mx_cvt(mx_handle_duplicate(job_handle, MX_RIGHT_SAME_RIGHTS,\n+                                   &mut job_copy as *mut mx_handle_t))?;\n         // Create a launchpad\n-        t!(mx_cvt(launchpad_create(job_copy, self.argv[0],\n-                                &mut launchpad as *mut *mut launchpad_t)));\n+        mx_cvt(launchpad_create(job_copy, self.argv[0],\n+                                &mut launchpad as *mut *mut launchpad_t))?;\n         // Set the process argv\n         tlp!(launchpad, mx_cvt(launchpad_arguments(launchpad, self.argv.len() as i32 - 1,\n-                                                self.argv.as_ptr())));\n+                                                   self.argv.as_ptr())));\n         // Setup the environment vars\n-        let status = launchpad_environ(launchpad, envp);\n-        if status != NO_ERROR {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n-        let status = launchpad_add_vdso_vmo(launchpad);\n-        if status != NO_ERROR {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n-        let status = launchpad_clone_mxio_root(launchpad);\n-        if status != NO_ERROR {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n+        tlp!(launchpad, mx_cvt(launchpad_environ(launchpad, envp)));\n+        tlp!(launchpad, mx_cvt(launchpad_add_vdso_vmo(launchpad)));\n+        tlp!(launchpad, mx_cvt(launchpad_clone_mxio_root(launchpad)));\n         // Load the executable\n-        let status = launchpad_elf_load(launchpad, launchpad_vmo_from_file(self.argv[0]));\n-        if status != NO_ERROR {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n-        let status = launchpad_load_vdso(launchpad, MX_HANDLE_INVALID);\n-        if status != NO_ERROR {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n-        let status = launchpad_clone_mxio_cwd(launchpad);\n-        if status != NO_ERROR {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n+        tlp!(launchpad,\n+             mx_cvt(launchpad_elf_load(launchpad, launchpad_vmo_from_file(self.argv[0]))));\n+        tlp!(launchpad, mx_cvt(launchpad_load_vdso(launchpad, MX_HANDLE_INVALID)));\n+        tlp!(launchpad, mx_cvt(launchpad_clone_mxio_cwd(launchpad)));\n \n         // Clone stdin, stdout, and stderr\n         if let Some(fd) = stdio.stdin.fd() {\n@@ -542,17 +503,20 @@ impl Command {\n             launchpad_clone_fd(launchpad, 2, 2);\n         }\n \n+        // We don't want FileDesc::drop to be called on any stdio. It would close their fds. The\n+        // fds will be closed once the child process finishes.\n+        let ChildPipes { stdin: child_stdin, stdout: child_stdout, stderr: child_stderr } = stdio;\n+        if let ChildStdio::Owned(fd) = child_stdin { fd.into_raw(); }\n+        if let ChildStdio::Owned(fd) = child_stdout { fd.into_raw(); }\n+        if let ChildStdio::Owned(fd) = child_stderr { fd.into_raw(); }\n+\n         for callback in self.closures.iter_mut() {\n-            t!(callback());\n+            callback()?;\n         }\n \n-        let process_handle = launchpad_start(launchpad);\n-        if process_handle < 0 {\n-            launchpad_destroy(launchpad);\n-            return (None, io::Error::last_os_error());\n-        }\n+        let process_handle = tlp!(launchpad, mx_cvt(launchpad_start(launchpad)));\n \n-        (Some((launchpad, process_handle)), io::Error::last_os_error())\n+        Ok((launchpad, process_handle))\n     }\n \n     fn setup_io(&self, default: Stdio, needs_stdin: bool)"}]}