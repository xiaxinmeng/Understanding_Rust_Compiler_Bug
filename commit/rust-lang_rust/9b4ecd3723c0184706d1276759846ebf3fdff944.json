{"sha": "9b4ecd3723c0184706d1276759846ebf3fdff944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNGVjZDM3MjNjMDE4NDcwNmQxMjc2NzU5ODQ2ZWJmM2ZkZmY5NDQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T18:41:52Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T18:41:52Z"}, "message": "Fix return type of `self_type_parameter`", "tree": {"sha": "e32e0458498407d8a914b468deabab667b7caeed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e32e0458498407d8a914b468deabab667b7caeed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b4ecd3723c0184706d1276759846ebf3fdff944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4ecd3723c0184706d1276759846ebf3fdff944", "html_url": "https://github.com/rust-lang/rust/commit/9b4ecd3723c0184706d1276759846ebf3fdff944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b4ecd3723c0184706d1276759846ebf3fdff944/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6777a4975d6a88928fda3e3b3f0bb05d98c61060", "url": "https://api.github.com/repos/rust-lang/rust/commits/6777a4975d6a88928fda3e3b3f0bb05d98c61060", "html_url": "https://github.com/rust-lang/rust/commit/6777a4975d6a88928fda3e3b3f0bb05d98c61060"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "4ea91787e59174558650fb882c9732931ea984af", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=9b4ecd3723c0184706d1276759846ebf3fdff944", "patch": "@@ -199,12 +199,12 @@ impl TyExt for Ty {\n                             .map(|pred| pred.clone().substitute(&Interner, &substs))\n                             .filter(|wc| match &wc.skip_binders() {\n                                 WhereClause::Implemented(tr) => {\n-                                    tr.self_type_parameter(&Interner) == self\n+                                    &tr.self_type_parameter(&Interner) == self\n                                 }\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,\n-                                }) => proj.self_type_parameter(&Interner) == self,\n+                                }) => &proj.self_type_parameter(&Interner) == self,\n                                 _ => false,\n                             })\n                             .collect::<Vec<_>>();"}, {"sha": "90801ef2daaaba863de349530598f98b23c95889", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=9b4ecd3723c0184706d1276759846ebf3fdff944", "patch": "@@ -616,12 +616,12 @@ impl HirDisplay for Ty {\n                                 .map(|pred| pred.clone().substitute(&Interner, &substs))\n                                 .filter(|wc| match &wc.skip_binders() {\n                                     WhereClause::Implemented(tr) => {\n-                                        tr.self_type_parameter(&Interner) == self\n+                                        &tr.self_type_parameter(&Interner) == self\n                                     }\n                                     WhereClause::AliasEq(AliasEq {\n                                         alias: AliasTy::Projection(proj),\n                                         ty: _,\n-                                    }) => proj.self_type_parameter(&Interner) == self,\n+                                    }) => &proj.self_type_parameter(&Interner) == self,\n                                     _ => false,\n                                 })\n                                 .collect::<Vec<_>>();"}, {"sha": "701359e6f50003a03ce27e4882ecf4ba77f4ebc3", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=9b4ecd3723c0184706d1276759846ebf3fdff944", "patch": "@@ -509,7 +509,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n     let (pred, binders) = pred.as_ref().into_value_and_skipped_binders();\n     match pred {\n         WhereClause::Implemented(trait_ref) => {\n-            if trait_ref.self_type_parameter(&Interner) != &self_ty_shifted_in {\n+            if trait_ref.self_type_parameter(&Interner) != self_ty_shifted_in {\n                 // we can only convert predicates back to type bounds if they\n                 // have the expected self type\n                 return None;\n@@ -522,7 +522,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             Some(chalk_ir::Binders::new(binders, rust_ir::InlineBound::TraitBound(trait_bound)))\n         }\n         WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n-            if projection_ty.self_type_parameter(&Interner) != &self_ty_shifted_in {\n+            if projection_ty.self_type_parameter(&Interner) != self_ty_shifted_in {\n                 return None;\n             }\n             let trait_ = projection_ty.trait_(db);"}, {"sha": "72be7e04f46dce79217d9560947fbe504323675d", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4ecd3723c0184706d1276759846ebf3fdff944/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=9b4ecd3723c0184706d1276759846ebf3fdff944", "patch": "@@ -30,8 +30,8 @@ pub struct ProjectionTy {\n }\n \n impl ProjectionTy {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.interned()[0].assert_ty_ref(interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> Ty {\n+        self.substitution.interned()[0].assert_ty_ref(interner).clone()\n     }\n }\n \n@@ -413,8 +413,8 @@ pub struct TraitRef {\n }\n \n impl TraitRef {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> Ty {\n+        self.substitution.at(interner, 0).assert_ty_ref(interner).clone()\n     }\n }\n "}]}