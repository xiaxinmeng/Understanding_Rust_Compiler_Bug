{"sha": "f4efc5de8a91c8322f83fe07ced5ab119a457ade", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWZjNWRlOGE5MWM4MzIyZjgzZmUwN2NlZDVhYjExOWE0NTdhZGU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-23T14:22:30Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-24T18:06:13Z"}, "message": "Add tests for raw_ref_op", "tree": {"sha": "524014760e9f85a12d9b8077359bad47383c93ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524014760e9f85a12d9b8077359bad47383c93ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4efc5de8a91c8322f83fe07ced5ab119a457ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4efc5de8a91c8322f83fe07ced5ab119a457ade", "html_url": "https://github.com/rust-lang/rust/commit/f4efc5de8a91c8322f83fe07ced5ab119a457ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4efc5de8a91c8322f83fe07ced5ab119a457ade/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064bed0f31ab9c8dd201bd763141693d92858d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/064bed0f31ab9c8dd201bd763141693d92858d76", "html_url": "https://github.com/rust-lang/rust/commit/064bed0f31ab9c8dd201bd763141693d92858d76"}], "stats": {"total": 384, "additions": 373, "deletions": 11}, "files": [{"sha": "f19d13ff5c5c309ea02771b31c66b36cec2b0b8c", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -139,7 +139,10 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                             Some(make_x()), Some(e), RangeLimits::HalfOpen)));\n             },\n             15 => {\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::AddrOf(Mutability::Immutable, e)));\n+                iter_exprs(\n+                    depth - 1,\n+                    &mut |e| g(ExprKind::AddrOf(BorrowKind::Ref, Mutability::Immutable, e)),\n+                );\n             },\n             16 => {\n                 g(ExprKind::Ret(None));"}, {"sha": "0a44b1cde40b745a2c617587f9f3770ad9ffe7c0", "filename": "src/test/ui/raw-ref-op/feature-raw-ref-op.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.rs?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,21 @@\n+// gate-test-raw_ref_op\n+\n+macro_rules! is_expr {\n+    ($e:expr) => {}\n+}\n+\n+is_expr!(&raw const a);         //~ ERROR raw address of syntax is experimental\n+is_expr!(&raw mut a);           //~ ERROR raw address of syntax is experimental\n+\n+#[cfg(FALSE)]\n+fn cfgd_out() {\n+    let mut a = 0;\n+    &raw const a;               //~ ERROR raw address of syntax is experimental\n+    &raw mut a;                 //~ ERROR raw address of syntax is experimental\n+}\n+\n+fn main() {\n+    let mut y = 123;\n+    let x = &raw const y;       //~ ERROR raw address of syntax is experimental\n+    let x = &raw mut y;         //~ ERROR raw address of syntax is experimental\n+}"}, {"sha": "cbd413aec7bd0c0b98925cca7de6531848a94b1a", "filename": "src/test/ui/raw-ref-op/feature-raw-ref-op.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.stderr?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: raw address of syntax is experimental\n+  --> $DIR/feature-raw-ref-op.rs:13:5\n+   |\n+LL |     &raw const a;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n+\n+error[E0658]: raw address of syntax is experimental\n+  --> $DIR/feature-raw-ref-op.rs:14:5\n+   |\n+LL |     &raw mut a;\n+   |     ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n+\n+error[E0658]: raw address of syntax is experimental\n+  --> $DIR/feature-raw-ref-op.rs:19:13\n+   |\n+LL |     let x = &raw const y;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n+\n+error[E0658]: raw address of syntax is experimental\n+  --> $DIR/feature-raw-ref-op.rs:20:13\n+   |\n+LL |     let x = &raw mut y;\n+   |             ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n+\n+error[E0658]: raw address of syntax is experimental\n+  --> $DIR/feature-raw-ref-op.rs:7:10\n+   |\n+LL | is_expr!(&raw const a);\n+   |          ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n+\n+error[E0658]: raw address of syntax is experimental\n+  --> $DIR/feature-raw-ref-op.rs:8:10\n+   |\n+LL | is_expr!(&raw mut a);\n+   |          ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "de847909eb3712a1a6164d346aafe1c02b96c631", "filename": "src/test/ui/raw-ref-op/raw-ref-op.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.rs?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,13 @@\n+// FIXME(#64490): make this run-pass\n+\n+#![feature(raw_ref_op)]\n+\n+fn main() {\n+    let mut x = 123;\n+    let c_p = &raw const x;                     //~ ERROR not yet implemented\n+    let m_p = &raw mut x;                       //~ ERROR not yet implemented\n+    let i_r = &x;\n+    assert!(c_p == i_r);\n+    assert!(c_p == m_p);\n+    unsafe { assert!(*c_p == *i_r ); }\n+}"}, {"sha": "04c59c95fca1eba606186ec23aa508809da44e9c", "filename": "src/test/ui/raw-ref-op/raw-ref-op.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.stderr?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,18 @@\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-op.rs:7:15\n+   |\n+LL |     let c_p = &raw const x;\n+   |               ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-op.rs:8:15\n+   |\n+LL |     let m_p = &raw mut x;\n+   |               ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d251586de5595d199cf43d716019d55373754183", "filename": "src/test/ui/raw-ref-op/raw-ref-temp-deref.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -1,19 +1,24 @@\n-// Ensure that we don't allow taking the address of temporary values\n-#![feature(raw_ref_op)]\n+// FIXME(#64490) This should be check-pass\n+// Check that taking the address of a place that contains a dereference is\n+// allowed.\n+#![feature(raw_ref_op, type_ascription)]\n \n-const PAIR: (i32, i64) = (1, 2);\n const PAIR_REF: &(i32, i64) = &(1, 2);\n \n-const ARRAY: [i32; 2] = [1, 2];\n const ARRAY_REF: &[i32; 2] = &[3, 4];\n const SLICE_REF: &[i32] = &[5, 6];\n \n fn main() {\n     // These are all OK, we're not taking the address of the temporary\n-    let deref_ref = &raw const *PAIR_REF;               //~ ERROR not yet implemented\n-    let field_deref_ref = &raw const PAIR_REF.0;        //~ ERROR not yet implemented\n-    let deref_ref = &raw const *ARRAY_REF;              //~ ERROR not yet implemented\n-    let field_deref_ref = &raw const ARRAY_REF[0];      //~ ERROR not yet implemented\n-    let deref_ref = &raw const *SLICE_REF;              //~ ERROR not yet implemented\n-    let field_deref_ref = &raw const SLICE_REF[1];      //~ ERROR not yet implemented\n+    let deref_ref = &raw const *PAIR_REF;                       //~ ERROR not yet implemented\n+    let field_deref_ref = &raw const PAIR_REF.0;                //~ ERROR not yet implemented\n+    let deref_ref = &raw const *ARRAY_REF;                      //~ ERROR not yet implemented\n+    let index_deref_ref = &raw const ARRAY_REF[0];              //~ ERROR not yet implemented\n+    let deref_ref = &raw const *SLICE_REF;                      //~ ERROR not yet implemented\n+    let index_deref_ref = &raw const SLICE_REF[1];              //~ ERROR not yet implemented\n+\n+    let x = 0;\n+    let ascribe_ref = &raw const (x: i32);                      //~ ERROR not yet implemented\n+    let ascribe_deref = &raw const (*ARRAY_REF: [i32; 2]);      //~ ERROR not yet implemented\n+    let ascribe_index_deref = &raw const (ARRAY_REF[0]: i32);   //~ ERROR not yet implemented\n }"}, {"sha": "b0bfc74903b0ce68f97c35a5ab79121a96b41285", "filename": "src/test/ui/raw-ref-op/raw-ref-temp-deref.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.stderr?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,74 @@\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:13:21\n+   |\n+LL |     let deref_ref = &raw const *PAIR_REF;\n+   |                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:14:27\n+   |\n+LL |     let field_deref_ref = &raw const PAIR_REF.0;\n+   |                           ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:15:21\n+   |\n+LL |     let deref_ref = &raw const *ARRAY_REF;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:16:27\n+   |\n+LL |     let index_deref_ref = &raw const ARRAY_REF[0];\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:17:21\n+   |\n+LL |     let deref_ref = &raw const *SLICE_REF;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:18:27\n+   |\n+LL |     let index_deref_ref = &raw const SLICE_REF[1];\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:21:23\n+   |\n+LL |     let ascribe_ref = &raw const (x: i32);\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:22:25\n+   |\n+LL |     let ascribe_deref = &raw const (*ARRAY_REF: [i32; 2]);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/raw-ref-temp-deref.rs:23:31\n+   |\n+LL |     let ascribe_index_deref = &raw const (ARRAY_REF[0]: i32);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "ac2445f049c66df83e0941b840d9ec2d1756a68e", "filename": "src/test/ui/raw-ref-op/raw-ref-temp.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,29 @@\n+// Ensure that we don't allow taking the address of temporary values\n+#![feature(raw_ref_op, type_ascription)]\n+\n+const PAIR: (i32, i64) = (1, 2);\n+\n+const ARRAY: [i32; 2] = [1, 2];\n+\n+fn main() {\n+    let ref_expr = &raw const 2;                        //~ ERROR cannot take address\n+    let mut_ref_expr = &raw mut 3;                      //~ ERROR cannot take address\n+    let ref_const = &raw const 4;                       //~ ERROR cannot take address\n+    let mut_ref_const = &raw mut 5;                     //~ ERROR cannot take address\n+\n+    let field_ref_expr = &raw const (1, 2).0;           //~ ERROR cannot take address\n+    let mut_field_ref_expr = &raw mut (1, 2).0;         //~ ERROR cannot take address\n+    let field_ref = &raw const PAIR.0;                  //~ ERROR cannot take address\n+    let mut_field_ref = &raw mut PAIR.0;                //~ ERROR cannot take address\n+\n+    let index_ref_expr = &raw const [1, 2][0];          //~ ERROR cannot take address\n+    let mut_index_ref_expr = &raw mut [1, 2][0];        //~ ERROR cannot take address\n+    let index_ref = &raw const ARRAY[0];                //~ ERROR cannot take address\n+    let mut_index_ref = &raw mut ARRAY[1];              //~ ERROR cannot take address\n+\n+    let ref_ascribe = &raw const (2: i32);              //~ ERROR cannot take address\n+    let mut_ref_ascribe = &raw mut (3: i32);            //~ ERROR cannot take address\n+\n+    let ascribe_field_ref = &raw const (PAIR.0: i32);   //~ ERROR cannot take address\n+    let ascribe_index_ref = &raw mut (ARRAY[0]: i32);   //~ ERROR cannot take address\n+}"}, {"sha": "de07073373506a572053f619db642ce4cf2e2a4d", "filename": "src/test/ui/raw-ref-op/raw-ref-temp.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,99 @@\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:9:31\n+   |\n+LL |     let ref_expr = &raw const 2;\n+   |                               ^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:10:33\n+   |\n+LL |     let mut_ref_expr = &raw mut 3;\n+   |                                 ^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:11:32\n+   |\n+LL |     let ref_const = &raw const 4;\n+   |                                ^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:12:34\n+   |\n+LL |     let mut_ref_const = &raw mut 5;\n+   |                                  ^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:14:37\n+   |\n+LL |     let field_ref_expr = &raw const (1, 2).0;\n+   |                                     ^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:15:39\n+   |\n+LL |     let mut_field_ref_expr = &raw mut (1, 2).0;\n+   |                                       ^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:16:32\n+   |\n+LL |     let field_ref = &raw const PAIR.0;\n+   |                                ^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:17:34\n+   |\n+LL |     let mut_field_ref = &raw mut PAIR.0;\n+   |                                  ^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:19:37\n+   |\n+LL |     let index_ref_expr = &raw const [1, 2][0];\n+   |                                     ^^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:20:39\n+   |\n+LL |     let mut_index_ref_expr = &raw mut [1, 2][0];\n+   |                                       ^^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:21:32\n+   |\n+LL |     let index_ref = &raw const ARRAY[0];\n+   |                                ^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:22:34\n+   |\n+LL |     let mut_index_ref = &raw mut ARRAY[1];\n+   |                                  ^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:24:34\n+   |\n+LL |     let ref_ascribe = &raw const (2: i32);\n+   |                                  ^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:25:36\n+   |\n+LL |     let mut_ref_ascribe = &raw mut (3: i32);\n+   |                                    ^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:27:40\n+   |\n+LL |     let ascribe_field_ref = &raw const (PAIR.0: i32);\n+   |                                        ^^^^^^^^^^^^^ temporary value\n+\n+error[E0745]: cannot take address of a temporary\n+  --> $DIR/raw-ref-temp.rs:28:38\n+   |\n+LL |     let ascribe_index_ref = &raw mut (ARRAY[0]: i32);\n+   |                                      ^^^^^^^^^^^^^^^ temporary value\n+\n+error: aborting due to 16 previous errors\n+\n+For more information about this error, try `rustc --explain E0745`."}, {"sha": "f0a6bcce2ac8a109a5c628eec4d698d1acc81462", "filename": "src/test/ui/raw-ref-op/unusual_locations.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.rs?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,25 @@\n+// FIXME(#64490): make this check-pass\n+\n+#![feature(raw_ref_op)]\n+\n+const USES_PTR: () = { let u = (); &raw const u; };         //~ ERROR not yet implemented\n+static ALSO_USES_PTR: () = { let u = (); &raw const u; };   //~ ERROR not yet implemented\n+\n+fn main() {\n+    #[cfg(FALSE)]\n+    {\n+        let x: [i32; { let u = 2; let x = &raw const u; 4 }]\n+            = [2; { let v = 3; let y = &raw const v; 4 }];\n+        let mut one = 1;\n+        let two = 2;\n+        if &raw const one == &raw mut one {\n+            match &raw const two {\n+                _ => {}\n+            }\n+        }\n+        let three = 3;\n+        let mut four = 4;\n+        println!(\"{:p}\", &raw const three);\n+        unsafe { &raw mut four; }\n+    }\n+}"}, {"sha": "3fae5db3d51a16080644f88af22895e9059d27cb", "filename": "src/test/ui/raw-ref-op/unusual_locations.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4efc5de8a91c8322f83fe07ced5ab119a457ade/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.stderr?ref=f4efc5de8a91c8322f83fe07ced5ab119a457ade", "patch": "@@ -0,0 +1,18 @@\n+error: raw borrows are not yet implemented\n+  --> $DIR/unusual_locations.rs:5:36\n+   |\n+LL | const USES_PTR: () = { let u = (); &raw const u; };\n+   |                                    ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: raw borrows are not yet implemented\n+  --> $DIR/unusual_locations.rs:6:42\n+   |\n+LL | static ALSO_USES_PTR: () = { let u = (); &raw const u; };\n+   |                                          ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+\n+error: aborting due to 2 previous errors\n+"}]}