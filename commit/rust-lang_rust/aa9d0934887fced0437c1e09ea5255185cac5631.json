{"sha": "aa9d0934887fced0437c1e09ea5255185cac5631", "node_id": "C_kwDOAAsO6NoAKGFhOWQwOTM0ODg3ZmNlZDA0MzdjMWUwOWVhNTI1NTE4NWNhYzU2MzE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-19T11:40:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-19T11:42:36Z"}, "message": "Resolve derive attributes even when shadowed", "tree": {"sha": "fcf982997ef6cfe365d5ef34c0a7b54ad55a7954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf982997ef6cfe365d5ef34c0a7b54ad55a7954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9d0934887fced0437c1e09ea5255185cac5631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9d0934887fced0437c1e09ea5255185cac5631", "html_url": "https://github.com/rust-lang/rust/commit/aa9d0934887fced0437c1e09ea5255185cac5631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9d0934887fced0437c1e09ea5255185cac5631/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "401daa5f77fd9cfb79d16fe3a54bc576d60b4c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/401daa5f77fd9cfb79d16fe3a54bc576d60b4c82", "html_url": "https://github.com/rust-lang/rust/commit/401daa5f77fd9cfb79d16fe3a54bc576d60b4c82"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "ca23d85cb24f60450f73d53c9e7569f5328dbfb7", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d0934887fced0437c1e09ea5255185cac5631/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d0934887fced0437c1e09ea5255185cac5631/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=aa9d0934887fced0437c1e09ea5255185cac5631", "patch": "@@ -24,7 +24,7 @@ use syntax::{\n use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n-    source_analyzer::{resolve_hir_path, SourceAnalyzer},\n+    source_analyzer::{resolve_hir_path, resolve_hir_path_as_macro, SourceAnalyzer},\n     Access, AssocItem, Callable, ConstParam, Crate, Field, Function, HasSource, HirFileId, Impl,\n     InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait,\n     Type, TypeAlias, TypeParam, VariantDef,\n@@ -1134,4 +1134,14 @@ impl<'a> SemanticsScope<'a> {\n         let path = Path::from_src(path.clone(), &ctx)?;\n         resolve_hir_path(self.db, &self.resolver, &path)\n     }\n+\n+    /// Resolve a path as-if it was written at the given scope. This is\n+    /// necessary a heuristic, as it doesn't take hygiene into account.\n+    // FIXME: This special casing solely exists for attributes for now\n+    // ideally we should have a path resolution infra that properly knows about overlapping namespaces\n+    pub fn speculative_resolve_as_mac(&self, path: &ast::Path) -> Option<MacroDef> {\n+        let ctx = body::LowerCtx::new(self.db.upcast(), self.file_id);\n+        let path = Path::from_src(path.clone(), &ctx)?;\n+        resolve_hir_path_as_macro(self.db, &self.resolver, &path)\n+    }\n }"}, {"sha": "08d0a02d796e69b5d82809ffda24138fcda03db1", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d0934887fced0437c1e09ea5255185cac5631/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d0934887fced0437c1e09ea5255185cac5631/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=aa9d0934887fced0437c1e09ea5255185cac5631", "patch": "@@ -502,6 +502,15 @@ pub(crate) fn resolve_hir_path(\n     resolve_hir_path_(db, resolver, path, false)\n }\n \n+#[inline]\n+pub(crate) fn resolve_hir_path_as_macro(\n+    db: &dyn HirDatabase,\n+    resolver: &Resolver,\n+    path: &Path,\n+) -> Option<MacroDef> {\n+    resolver.resolve_path_as_macro(db.upcast(), path.mod_path()).map(Into::into)\n+}\n+\n fn resolve_hir_path_(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,"}, {"sha": "173e55b33f6ac7b6579b96d4a0065639be65740e", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa9d0934887fced0437c1e09ea5255185cac5631/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9d0934887fced0437c1e09ea5255185cac5631/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=aa9d0934887fced0437c1e09ea5255185cac5631", "patch": "@@ -53,12 +53,9 @@ pub fn try_resolve_derive_input_at(\n         .take_while(|tok| tok.kind() != T!['('] && tok.kind() != T![,])\n         .collect();\n     let path = ast::Path::parse(&tokens.into_iter().rev().join(\"\")).ok()?;\n-    match sema.scope(tt.syntax()).speculative_resolve(&path) {\n-        Some(hir::PathResolution::Macro(makro)) if makro.kind() == hir::MacroKind::Derive => {\n-            Some(makro)\n-        }\n-        _ => None,\n-    }\n+    sema.scope(tt.syntax())\n+        .speculative_resolve_as_mac(&path)\n+        .filter(|mac| mac.kind() == hir::MacroKind::Derive)\n }\n \n /// Picks the token with the highest rank returned by the passed in function."}]}