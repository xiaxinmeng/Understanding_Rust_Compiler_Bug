{"sha": "e62a6cad1e601e24614fee2cdee0d61dcf984374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MmE2Y2FkMWU2MDFlMjQ2MTRmZWUyY2RlZTBkNjFkY2Y5ODQzNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T08:02:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T08:02:44Z"}, "message": "Auto merge of #7516 - lf-:unwrap-or-default, r=xFrednet\n\nAdd `unwrap_or_else_default` lint\n\n---\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: Add a new [`unwrap_or_else_default`] style lint. This will catch `unwrap_or_else(Default::default)` on Result and Option and suggest `unwrap_or_default()` instead.", "tree": {"sha": "a7369a7518617b18bdc0fb9a090a0aeac0030736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7369a7518617b18bdc0fb9a090a0aeac0030736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e62a6cad1e601e24614fee2cdee0d61dcf984374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e62a6cad1e601e24614fee2cdee0d61dcf984374", "html_url": "https://github.com/rust-lang/rust/commit/e62a6cad1e601e24614fee2cdee0d61dcf984374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e62a6cad1e601e24614fee2cdee0d61dcf984374/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9fe5ceab040e77452a046f54dfb77f92527dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9fe5ceab040e77452a046f54dfb77f92527dc6", "html_url": "https://github.com/rust-lang/rust/commit/dd9fe5ceab040e77452a046f54dfb77f92527dc6"}, {"sha": "295df88986408c504eaa9982208dca0b505f1de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/295df88986408c504eaa9982208dca0b505f1de1", "html_url": "https://github.com/rust-lang/rust/commit/295df88986408c504eaa9982208dca0b505f1de1"}], "stats": {"total": 400, "additions": 361, "deletions": 39}, "files": [{"sha": "2b89170073be513bca6869b916212e05d9fb2935", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -2999,6 +2999,7 @@ Released 2018-09-13\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n [`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings\n [`unwrap_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result\n+[`unwrap_or_else_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_else_default\n [`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n [`upper_case_acronyms`]: https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug"}, {"sha": "dbdb4251b3bec2358c98cae5878f611b3f6401c9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -797,6 +797,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::UNNECESSARY_FILTER_MAP,\n         methods::UNNECESSARY_FOLD,\n         methods::UNNECESSARY_LAZY_EVALUATIONS,\n+        methods::UNWRAP_OR_ELSE_DEFAULT,\n         methods::UNWRAP_USED,\n         methods::USELESS_ASREF,\n         methods::WRONG_SELF_CONVENTION,\n@@ -1341,6 +1342,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(methods::UNNECESSARY_FOLD),\n         LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n         LintId::of(methods::USELESS_ASREF),\n         LintId::of(methods::WRONG_SELF_CONVENTION),\n         LintId::of(methods::ZST_OFFSET),\n@@ -1535,6 +1537,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::STRING_EXTEND_CHARS),\n         LintId::of(methods::UNNECESSARY_FOLD),\n         LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n         LintId::of(methods::WRONG_SELF_CONVENTION),\n         LintId::of(misc::TOPLEVEL_REF_ARG),\n         LintId::of(misc::ZERO_PTR),"}, {"sha": "bf74cad039e109b9389eb421f57fa5dd3d3aaeed", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -56,6 +56,7 @@ mod uninit_assumed_init;\n mod unnecessary_filter_map;\n mod unnecessary_fold;\n mod unnecessary_lazy_eval;\n+mod unwrap_or_else_default;\n mod unwrap_used;\n mod useless_asref;\n mod utils;\n@@ -310,6 +311,31 @@ declare_clippy_lint! {\n     \"using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of `_.unwrap_or_else(Default::default)` on `Option` and\n+    /// `Result` values.\n+    ///\n+    /// ### Why is this bad?\n+    /// Readability, these can be written as `_.unwrap_or_default`, which is\n+    /// simpler and more concise.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    /// # let x = Some(1);\n+    ///\n+    /// // Bad\n+    /// x.unwrap_or_else(Default::default);\n+    /// x.unwrap_or_else(u32::default);\n+    ///\n+    /// // Good\n+    /// x.unwrap_or_default();\n+    /// ```\n+    pub UNWRAP_OR_ELSE_DEFAULT,\n+    style,\n+    \"using `.unwrap_or_else(Default::default)`, which is more succinctly expressed as `.unwrap_or_default()`\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n@@ -1766,6 +1792,7 @@ impl_lint_pass!(Methods => [\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n     OK_EXPECT,\n+    UNWRAP_OR_ELSE_DEFAULT,\n     MAP_UNWRAP_OR,\n     RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n@@ -2172,7 +2199,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             },\n             (\"unwrap_or_else\", [u_arg]) => match method_call!(recv) {\n                 Some((\"map\", [recv, map_arg], _)) if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, msrv) => {},\n-                _ => unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\"),\n+                _ => {\n+                    unwrap_or_else_default::check(cx, expr, recv, u_arg);\n+                    unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n+                },\n             },\n             _ => {},\n         }"}, {"sha": "c1d22e5d72c138d3a9c216eb571686d3a672e4f0", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::is_lazyness_candidate;\n+use clippy_utils::is_trait_item;\n use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use clippy_utils::{contains_return, last_path_segment, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -34,15 +36,23 @@ pub(super) fn check<'tcx>(\n         or_has_args: bool,\n         span: Span,\n     ) -> bool {\n+        let is_default_default = || is_trait_item(cx, fun, sym::Default);\n+\n+        let implements_default = |arg, default_trait_id| {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            implements_trait(cx, arg_ty, default_trait_id, &[])\n+        };\n+\n         if_chain! {\n             if !or_has_args;\n             if name == \"unwrap_or\";\n             if let hir::ExprKind::Path(ref qpath) = fun.kind;\n-            let path = last_path_segment(qpath).ident.name;\n-            if matches!(path, kw::Default | sym::new);\n-            let arg_ty = cx.typeck_results().expr_ty(arg);\n             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n-            if implements_trait(cx, arg_ty, default_trait_id, &[]);\n+            let path = last_path_segment(qpath).ident.name;\n+            // needs to target Default::default in particular or be *::new and have a Default impl\n+            // available\n+            if (matches!(path, kw::Default) && is_default_default())\n+                || (matches!(path, sym::new) && implements_default(arg, default_trait_id));\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "677aa80e1b76ec4eb7a0d1d051af7e047060069b", "filename": "clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -0,0 +1,45 @@\n+//! Lint for `some_result_or_option.unwrap_or_else(Default::default)`\n+\n+use super::UNWRAP_OR_ELSE_DEFAULT;\n+use clippy_utils::{\n+    diagnostics::span_lint_and_sugg, is_trait_item, source::snippet_with_applicability, ty::is_type_diagnostic_item,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    recv: &'tcx hir::Expr<'_>,\n+    u_arg: &'tcx hir::Expr<'_>,\n+) {\n+    // something.unwrap_or_else(Default::default)\n+    // ^^^^^^^^^- recv          ^^^^^^^^^^^^^^^^- u_arg\n+    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- expr\n+    let recv_ty = cx.typeck_results().expr_ty(recv);\n+    let is_option = is_type_diagnostic_item(cx, recv_ty, sym::option_type);\n+    let is_result = is_type_diagnostic_item(cx, recv_ty, sym::result_type);\n+\n+    if_chain! {\n+        if is_option || is_result;\n+        if is_trait_item(cx, u_arg, sym::Default);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+\n+            span_lint_and_sugg(\n+                cx,\n+                UNWRAP_OR_ELSE_DEFAULT,\n+                expr.span,\n+                \"use of `.unwrap_or_else(..)` to construct default value\",\n+                \"try\",\n+                format!(\n+                    \"{}.unwrap_or_default()\",\n+                    snippet_with_applicability(cx, recv.span, \"..\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "5a50cc48d61bfce7e62f03719cdbc2028adb8a57", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -422,7 +422,7 @@ fn check_and_warn<'a>(cx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n ///\n /// is transformed to\n ///\n-/// ```ignore\n+/// ```text\n ///     {\n ///         let x = 5;\n /// ```"}, {"sha": "9a6ddc72ce56a04ca17199e8b1baa700763dafcf", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -122,7 +122,7 @@ impl LateLintPass<'_> for NeedlessForEach {\n /// 2. Detect use of `return` in `Loop` in the closure body.\n ///\n /// NOTE: The functionality of this type is similar to\n-/// [`crate::utilts::visitors::find_all_ret_expressions`], but we can't use\n+/// [`clippy_utils::visitors::find_all_ret_expressions`], but we can't use\n /// `find_all_ret_expressions` instead of this type. The reasons are:\n /// 1. `find_all_ret_expressions` passes the argument of `ExprKind::Ret` to a callback, but what we\n ///    need here is `ExprKind::Ret` itself."}, {"sha": "71cfa196fc335f93d7b62e5d0234e08a08f33780", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -65,7 +65,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///\n /// # Example\n ///\n-/// ```ignore\n+/// ```text\n /// error: constant division of 0.0 with 0.0 will always result in NaN\n ///   --> $DIR/zero_div_zero.rs:6:25\n ///    |\n@@ -103,7 +103,7 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n ///\n /// # Example\n ///\n-/// ```ignore\n+/// ```text\n /// error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n ///   --> $DIR/drop_forget_ref.rs:10:5\n ///    |\n@@ -189,7 +189,7 @@ pub fn span_lint_hir_and_then(\n ///\n /// # Example\n ///\n-/// ```ignore\n+/// ```text\n /// error: This `.fold` can be more succinctly expressed as `.any`\n /// --> $DIR/methods.rs:390:13\n ///     |"}, {"sha": "884180f0586e38a237d4f7e8561115e6a8f6ea67", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -195,8 +195,8 @@ pub fn vec_macro<'e>(cx: &LateContext<'_>, expr: &'e hir::Expr<'_>) -> Option<Ve\n /// - `assert!`, `assert_eq!` and `assert_ne!`\n /// - `debug_assert!`, `debug_assert_eq!` and `debug_assert_ne!`\n /// For example:\n-/// `assert!(expr)` will return Some([expr])\n-/// `debug_assert_eq!(a, b)` will return Some([a, b])\n+/// `assert!(expr)` will return `Some([expr])`\n+/// `debug_assert_eq!(a, b)` will return `Some([a, b])`\n pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx Expr<'tcx>>> {\n     /// Try to match the AST for a pattern that contains a match, for example when two args are\n     /// compared\n@@ -283,7 +283,7 @@ pub struct FormatArgsExpn<'tcx> {\n \n     /// String literal expressions which represent the format string split by \"{}\"\n     pub format_string_parts: &'tcx [Expr<'tcx>],\n-    /// Symbols corresponding to [`format_string_parts`]\n+    /// Symbols corresponding to [`Self::format_string_parts`]\n     pub format_string_symbols: Vec<Symbol>,\n     /// Expressions like `ArgumentV1::new(arg0, Debug::fmt)`\n     pub args: &'tcx [Expr<'tcx>],"}, {"sha": "1d59d6bfea1b9792b314de615677809119efa94b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -326,6 +326,25 @@ pub fn is_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol)\n         .map_or(false, |did| is_diag_trait_item(cx, did, diag_item))\n }\n \n+/// Checks if the given expression is a path referring an item on the trait\n+/// that is marked with the given diagnostic item.\n+///\n+/// For checking method call expressions instead of path expressions, use\n+/// [`is_trait_method`].\n+///\n+/// For example, this can be used to find if an expression like `u64::default`\n+/// refers to an item of the trait `Default`, which is associated with the\n+/// `diag_item` of `sym::Default`.\n+pub fn is_trait_item(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n+    if let hir::ExprKind::Path(ref qpath) = expr.kind {\n+        cx.qpath_res(qpath, expr.hir_id)\n+            .opt_def_id()\n+            .map_or(false, |def_id| is_diag_trait_item(cx, def_id, diag_item))\n+    } else {\n+        false\n+    }\n+}\n+\n pub fn last_path_segment<'tcx>(path: &QPath<'tcx>) -> &'tcx PathSegment<'tcx> {\n     match *path {\n         QPath::Resolved(_, path) => path.segments.last().expect(\"A path must have at least one segment\"),"}, {"sha": "789079510c5e80fa7251536eeda79336d99e7777", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -168,7 +168,7 @@ pub fn snippet<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<\n     snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n }\n \n-/// Same as `snippet`, but it adapts the applicability level by following rules:\n+/// Same as [`snippet`], but it adapts the applicability level by following rules:\n ///\n /// - Applicability level `Unspecified` will never be changed.\n /// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`."}, {"sha": "4f9aaf396b806dbe0b7d56c8eab2298e9af18922", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -114,7 +114,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n \n /// Checks whether a type implements a trait.\n /// The function returns false in case the type contains an inference variable.\n-/// See also `get_trait_def_id`.\n+/// See also [`get_trait_def_id`](super::get_trait_def_id).\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,"}, {"sha": "c2f94d0e8575650272656acba755013a0de37ddb", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -18,6 +18,19 @@ fn or_fun_call() {\n         }\n     }\n \n+    struct FakeDefault;\n+    impl FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n+    impl Default for FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n     enum Enum {\n         A(i32),\n     }\n@@ -53,6 +66,12 @@ fn or_fun_call() {\n     let with_default_type = Some(1);\n     with_default_type.unwrap_or_default();\n \n+    let self_default = None::<FakeDefault>;\n+    self_default.unwrap_or_else(<FakeDefault>::default);\n+\n+    let real_default = None::<FakeDefault>;\n+    real_default.unwrap_or_default();\n+\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or_default();\n "}, {"sha": "afaf92961b0274f75d9e5ffbbd2f40b606fb876a", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -18,6 +18,19 @@ fn or_fun_call() {\n         }\n     }\n \n+    struct FakeDefault;\n+    impl FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n+    impl Default for FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n     enum Enum {\n         A(i32),\n     }\n@@ -53,6 +66,12 @@ fn or_fun_call() {\n     let with_default_type = Some(1);\n     with_default_type.unwrap_or(u64::default());\n \n+    let self_default = None::<FakeDefault>;\n+    self_default.unwrap_or(<FakeDefault>::default());\n+\n+    let real_default = None::<FakeDefault>;\n+    real_default.unwrap_or(<FakeDefault as Default>::default());\n+\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n "}, {"sha": "b2bcbd38c2df36061eefebf4f788821471955d6f", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -1,136 +1,148 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:33:19\n+  --> $DIR/or_fun_call.rs:46:19\n    |\n LL |     with_const_fn.unwrap_or(Duration::from_secs(5));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Duration::from_secs(5))`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:36:22\n+  --> $DIR/or_fun_call.rs:49:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:39:5\n+  --> $DIR/or_fun_call.rs:52:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:42:21\n+  --> $DIR/or_fun_call.rs:55:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:45:14\n+  --> $DIR/or_fun_call.rs:58:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:48:19\n+  --> $DIR/or_fun_call.rs:61:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:51:5\n+  --> $DIR/or_fun_call.rs:64:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:54:5\n+  --> $DIR/or_fun_call.rs:67:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:70:18\n+   |\n+LL |     self_default.unwrap_or(<FakeDefault>::default());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(<FakeDefault>::default)`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+  --> $DIR/or_fun_call.rs:73:5\n+   |\n+LL |     real_default.unwrap_or(<FakeDefault as Default>::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `real_default.unwrap_or_default()`\n+\n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:57:5\n+  --> $DIR/or_fun_call.rs:76:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:60:21\n+  --> $DIR/or_fun_call.rs:79:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:63:19\n+  --> $DIR/or_fun_call.rs:82:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:66:23\n+  --> $DIR/or_fun_call.rs:85:23\n    |\n LL |     map_vec.entry(42).or_insert(vec![]);\n    |                       ^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:69:21\n+  --> $DIR/or_fun_call.rs:88:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:72:25\n+  --> $DIR/or_fun_call.rs:91:25\n    |\n LL |     btree_vec.entry(42).or_insert(vec![]);\n    |                         ^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:75:21\n+  --> $DIR/or_fun_call.rs:94:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:83:21\n+  --> $DIR/or_fun_call.rs:102:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:85:21\n+  --> $DIR/or_fun_call.rs:104:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:109:35\n+  --> $DIR/or_fun_call.rs:128:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:113:10\n+  --> $DIR/or_fun_call.rs:132:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:141:14\n+  --> $DIR/or_fun_call.rs:160:14\n    |\n LL |         None.unwrap_or(s.as_mut_vec());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| s.as_mut_vec())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:146:14\n+  --> $DIR/or_fun_call.rs:165:14\n    |\n LL |         None.unwrap_or(unsafe { s.as_mut_vec() });\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { s.as_mut_vec() })`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:148:14\n+  --> $DIR/or_fun_call.rs:167:14\n    |\n LL |         None.unwrap_or( unsafe { s.as_mut_vec() }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { s.as_mut_vec() })`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "7ac3f426c9775c5062aa3260f00a2e0247e6757e", "filename": "tests/ui/unwrap_or_else_default.fixed", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2Funwrap_or_else_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2Funwrap_or_else_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.fixed?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -0,0 +1,71 @@\n+// run-rustfix\n+\n+#![warn(clippy::unwrap_or_else_default)]\n+#![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+/// Checks implementation of the `UNWRAP_OR_ELSE_DEFAULT` lint.\n+fn unwrap_or_else_default() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+\n+        // fake default, we should not trigger on this\n+        fn default() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    struct HasDefaultAndDuplicate;\n+\n+    impl HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    impl Default for HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    enum Enum {\n+        A(),\n+    }\n+\n+    fn make<T, V>(_: V) -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A());\n+    with_enum.unwrap_or_else(Enum::A);\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or_else(Vec::new);\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or_else(make);\n+\n+    // should not be changed\n+    let with_fake_default = None::<Foo>;\n+    with_fake_default.unwrap_or_else(Foo::default);\n+\n+    // should not be changed\n+    let with_fake_default2 = None::<HasDefaultAndDuplicate>;\n+    with_fake_default2.unwrap_or_else(<HasDefaultAndDuplicate>::default);\n+\n+    let with_real_default = None::<HasDefaultAndDuplicate>;\n+    with_real_default.unwrap_or_default();\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or_default();\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or_default();\n+}\n+\n+fn main() {}"}, {"sha": "82b727a039ed44fd18d5738c24a5cc2e3ec30c73", "filename": "tests/ui/unwrap_or_else_default.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.rs?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -0,0 +1,71 @@\n+// run-rustfix\n+\n+#![warn(clippy::unwrap_or_else_default)]\n+#![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+/// Checks implementation of the `UNWRAP_OR_ELSE_DEFAULT` lint.\n+fn unwrap_or_else_default() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+\n+        // fake default, we should not trigger on this\n+        fn default() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    struct HasDefaultAndDuplicate;\n+\n+    impl HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    impl Default for HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    enum Enum {\n+        A(),\n+    }\n+\n+    fn make<T, V>(_: V) -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A());\n+    with_enum.unwrap_or_else(Enum::A);\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or_else(Vec::new);\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or_else(make);\n+\n+    // should not be changed\n+    let with_fake_default = None::<Foo>;\n+    with_fake_default.unwrap_or_else(Foo::default);\n+\n+    // should not be changed\n+    let with_fake_default2 = None::<HasDefaultAndDuplicate>;\n+    with_fake_default2.unwrap_or_else(<HasDefaultAndDuplicate>::default);\n+\n+    let with_real_default = None::<HasDefaultAndDuplicate>;\n+    with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or_else(Default::default);\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or_else(u64::default);\n+}\n+\n+fn main() {}"}, {"sha": "feb215b09f662ef4e05dc536a7f6b1b25020fb07", "filename": "tests/ui/unwrap_or_else_default.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2Funwrap_or_else_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e62a6cad1e601e24614fee2cdee0d61dcf984374/tests%2Fui%2Funwrap_or_else_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.stderr?ref=e62a6cad1e601e24614fee2cdee0d61dcf984374", "patch": "@@ -0,0 +1,22 @@\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:62:5\n+   |\n+LL |     with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_real_default.unwrap_or_default()`\n+   |\n+   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n+\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:65:5\n+   |\n+LL |     with_default_trait.unwrap_or_else(Default::default);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_trait.unwrap_or_default()`\n+\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:68:5\n+   |\n+LL |     with_default_type.unwrap_or_else(u64::default);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_type.unwrap_or_default()`\n+\n+error: aborting due to 3 previous errors\n+"}]}