{"sha": "675bdf6d6d7b6441598961052df6466efbb4bee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NWJkZjZkNmQ3YjY0NDE1OTg5NjEwNTJkZjY0NjZlZmJiNGJlZTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T03:26:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T03:26:07Z"}, "message": "Rollup merge of #70207 - hatoo:macos-getentropy, r=dtolnay\n\nUse getentropy(2) on macos\n\nresolves #70179", "tree": {"sha": "bd706d607298ed2db8f647d8a896e9b8cea7a27b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd706d607298ed2db8f647d8a896e9b8cea7a27b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675bdf6d6d7b6441598961052df6466efbb4bee4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeCxPCRBK7hj4Ov3rIwAAdHIIABumMe9EZo8DPQo2TK0uspWb\nFglY4/sqwPXW3WcCx7JgyikoyRrA88nYwI9X8LkugX4uKjHw7Bq3F6BwXYswqUxQ\nyaQu0aKPpqGerp9Sosk9uO5Z53GFuUb0QIspPXBMprtJDjMvBaamJgFHqxFGNb8Z\n1IkVtHNM2W6dzp5JjX7hcDS9LaLRQKMPETtWetkDy8A7FwDHl+pXTqfG0k84/LGn\nmvs+tjSbN5xQX9Mjp6sPG5qJhj6ijOOYaizjxAqlIBB036CS5gLTx/Tk1VJYN1ik\nwv5jugjUJ7amVPU41rkpbgEy+dtbDN9/LKsYmHrs8oEoFxC6v068HopJL5tin1Y=\n=JGVb\n-----END PGP SIGNATURE-----\n", "payload": "tree bd706d607298ed2db8f647d8a896e9b8cea7a27b\nparent a2b469c4ccf3777294422c350c10012ca2e22e25\nparent 61ef72fe4951148e3987af21ee76ace6745c8a62\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584933967 +0100\ncommitter GitHub <noreply@github.com> 1584933967 +0100\n\nRollup merge of #70207 - hatoo:macos-getentropy, r=dtolnay\n\nUse getentropy(2) on macos\n\nresolves #70179\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675bdf6d6d7b6441598961052df6466efbb4bee4", "html_url": "https://github.com/rust-lang/rust/commit/675bdf6d6d7b6441598961052df6466efbb4bee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675bdf6d6d7b6441598961052df6466efbb4bee4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b469c4ccf3777294422c350c10012ca2e22e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b469c4ccf3777294422c350c10012ca2e22e25", "html_url": "https://github.com/rust-lang/rust/commit/a2b469c4ccf3777294422c350c10012ca2e22e25"}, {"sha": "61ef72fe4951148e3987af21ee76ace6745c8a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ef72fe4951148e3987af21ee76ace6745c8a62", "html_url": "https://github.com/rust-lang/rust/commit/61ef72fe4951148e3987af21ee76ace6745c8a62"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "eed6fbf13b7d2f416c9548a9d833c5c57eac50fb", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/675bdf6d6d7b6441598961052df6466efbb4bee4/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675bdf6d6d7b6441598961052df6466efbb4bee4/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=675bdf6d6d7b6441598961052df6466efbb4bee4", "patch": "@@ -12,6 +12,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n \n #[cfg(all(\n     unix,\n+    not(target_os = \"macos\"),\n     not(target_os = \"ios\"),\n     not(target_os = \"openbsd\"),\n     not(target_os = \"freebsd\"),\n@@ -92,6 +93,42 @@ mod imp {\n     }\n }\n \n+#[cfg(target_os = \"macos\")]\n+mod imp {\n+    use crate::fs::File;\n+    use crate::io::Read;\n+    use crate::sys::os::errno;\n+    use libc::{c_int, c_void, size_t};\n+\n+    fn getentropy_fill_bytes(v: &mut [u8]) -> bool {\n+        weak!(fn getentropy(*mut c_void, size_t) -> c_int);\n+\n+        getentropy\n+            .get()\n+            .map(|f| {\n+                // getentropy(2) permits a maximum buffer size of 256 bytes\n+                for s in v.chunks_mut(256) {\n+                    let ret = unsafe { f(s.as_mut_ptr() as *mut c_void, s.len()) };\n+                    if ret == -1 {\n+                        panic!(\"unexpected getentropy error: {}\", errno());\n+                    }\n+                }\n+                true\n+            })\n+            .unwrap_or(false)\n+    }\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        if getentropy_fill_bytes(v) {\n+            return;\n+        }\n+\n+        // for older macos which doesn't support getentropy\n+        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n+        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n+    }\n+}\n+\n #[cfg(target_os = \"openbsd\")]\n mod imp {\n     use crate::sys::os::errno;"}]}