{"sha": "796e4b8a885b44342cad8363661069783d3b7fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NmU0YjhhODg1YjQ0MzQyY2FkODM2MzY2MTA2OTc4M2QzYjdmZWQ=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-12-06T01:14:28Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-12-06T01:14:28Z"}, "message": "Typo", "tree": {"sha": "8aebbf272bfbc9cddc8262328b30409003ffd955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aebbf272bfbc9cddc8262328b30409003ffd955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796e4b8a885b44342cad8363661069783d3b7fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796e4b8a885b44342cad8363661069783d3b7fed", "html_url": "https://github.com/rust-lang/rust/commit/796e4b8a885b44342cad8363661069783d3b7fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796e4b8a885b44342cad8363661069783d3b7fed/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4c11be3b9706d1ba0e1b74b89de1478410a56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4c11be3b9706d1ba0e1b74b89de1478410a56f", "html_url": "https://github.com/rust-lang/rust/commit/6f4c11be3b9706d1ba0e1b74b89de1478410a56f"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "1030802030fbe3b42c121669e0b86979f2f96671", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/796e4b8a885b44342cad8363661069783d3b7fed/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/796e4b8a885b44342cad8363661069783d3b7fed/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=796e4b8a885b44342cad8363661069783d3b7fed", "patch": "@@ -93,7 +93,7 @@ must have a deallocation for each allocation. Rust handles this for you. It\n knows that our handle, `x`, is the owning reference to our box. Rust knows that\n `x` will go out of scope at the end of the block, and so it inserts a call to\n deallocate the memory at the end of the scope. Because the compiler does this\n-for us, it's impossible to forget. We always exaclty one deallocations paired\n+for us, it's impossible to forget. We always have exactly one deallocation paired\n with each of our allocations.\n \n This is pretty straightforward, but what happens when we want to pass our box\n@@ -186,11 +186,11 @@ This function takes ownership, because it takes a `Box`, which owns its\n contents. But then we give ownership right back.\n \n In the physical world, you can give one of your possessions to someone for a\n-short period of time. You still own your posession, you're just letting someone\n+short period of time. You still own your possession, you're just letting someone\n else use it for a while. We call that 'lending' something to someone, and that\n person is said to be 'borrowing' that something from you.\n \n-Rust's ownershp system also allows an owner to lend out a handle for a limited\n+Rust's ownership system also allows an owner to lend out a handle for a limited\n period. This is also called 'borrowing.' Here's a version of `add_one` which\n borrows its argument rather than taking ownership:\n \n@@ -231,7 +231,7 @@ fn add_one(num: &int) -> int {\n \n Rust has a feature called 'lifetime elision,' which allows you to not write\n lifetime annotations in certain circumstances. This is one of them. Without\n-eliding the liftimes, `add_one` looks like this:\n+eliding the lifetimes, `add_one` looks like this:\n \n ```rust\n fn add_one<'a>(num: &'a int) -> int {\n@@ -254,7 +254,7 @@ This part _declares_ our lifetimes. This says that `add_one` has one lifetime,\n fn add_two<'a, 'b>(...)\n ```\n \n-Then in our parameter list, we use the liftimes we've named:\n+Then in our parameter list, we use the lifetimes we've named:\n \n ```{rust,ignore}\n ...(num: &'a int) -> ...\n@@ -279,7 +279,7 @@ fn main() {\n }\n ```\n \n-As you can see, `struct`s can also have liftimes. In a similar way to functions,\n+As you can see, `struct`s can also have lifetimes. In a similar way to functions,\n \n ```{rust}\n struct Foo<'a> {\n@@ -295,7 +295,7 @@ x: &'a int,\n # }\n ```\n \n-uses it. So why do we need a liftime here? We need to ensure that any reference\n+uses it. So why do we need a lifetime here? We need to ensure that any reference\n to a `Foo` cannot outlive the reference to an `int` it contains.\n \n ## Thinking in scopes"}]}