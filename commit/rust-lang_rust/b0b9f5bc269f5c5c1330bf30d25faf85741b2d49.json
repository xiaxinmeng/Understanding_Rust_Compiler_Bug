{"sha": "b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "node_id": "C_kwDOAAsO6NoAKGIwYjlmNWJjMjY5ZjVjNWMxMzMwYmYzMGQyNWZhZjg1NzQxYjJkNDk", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-09-28T14:54:00Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-09-28T14:54:00Z"}, "message": "std: never panic in `thread::park` and `thread::park_timeout`", "tree": {"sha": "f3d94aafc2439fc914c076a4e28b39940b932977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d94aafc2439fc914c076a4e28b39940b932977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmM0YAgACgkQcE4BSbAZ\nSzwjww/9H09KZ6sGVVNet1KN5rb/wfmwaCoq0jfEZh7gFdda5c8nES+k4h539bFV\nUq9Uyu3PTbSDfdP5gnljDe64UpIBHR/lepPrNYQnvzGU+bHA3wuserB/clazMIR8\n5kuvzJgjTYstCE54VZYyAA0tOQzdMDTeF/+fw5P88iYR2heTGV56u3cUKD5ZHSJr\n1AAZaKwm18Q9s3kdy2KvPbdSHYoWCmVRTb9fQlvNQK58gBw+rq6saPxjGQwdy7lk\nQOVkNNOtYtbLJTvfO05QwM1H/Xo2G3C10xqAtcS4YePF2fAunHMBy55ZWL4WSw5S\nLnxY7uBoObfycSaOclukwURKaR5lyYthR+plrQ4uad9GsLdfQta+3pVPav2GiROB\njp2fZmk7QzZKBjWbSJUZc607DvNz0yElNECqZS6bW8Z5sm7KP88PhXHFbwOKtWhg\nzmAY4ey8iHufHqOGnh6dpQsjo7iKax8e2JguvRq08WoiHj4QuPg5YEksnawyRcz+\n0t7qNf6+bQVpAukCgf/f8qQo8Y2wyaYCvoEKoEqPXkTxp+Def+Gw8Y7r2qt6P6Uj\nHE/Bc9tKVtjKf/azcrnw7xcypHDwYYN5mk6RYMlf7zH3nrduCbkBCS0H2bF7Tm6s\nCvDIbfyWXIx7T9Uzy7QrMaRTkgWl6j0O3l6oXuuzQGw3aUJpImg=\n=3I5R\n-----END PGP SIGNATURE-----", "payload": "tree f3d94aafc2439fc914c076a4e28b39940b932977\nparent cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d\nauthor joboet <jonasboettiger@icloud.com> 1664376840 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1664376840 +0200\n\nstd: never panic in `thread::park` and `thread::park_timeout`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "html_url": "https://github.com/rust-lang/rust/commit/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d", "html_url": "https://github.com/rust-lang/rust/commit/cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "54d611182e803cd422f62f744d4dce9597916f84", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "patch": "@@ -160,7 +160,7 @@ use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n-use crate::mem;\n+use crate::mem::{self, forget};\n use crate::num::NonZeroU64;\n use crate::num::NonZeroUsize;\n use crate::panic;\n@@ -849,10 +849,22 @@ pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)\n }\n \n+/// Used to ensure that `park` and `park_timeout` do not unwind, as that can\n+/// cause undefined behaviour if not handled correctly (see #102398 for context).\n+struct PanicGuard;\n+\n+impl Drop for PanicGuard {\n+    fn drop(&mut self) {\n+        rtabort!(\"an irrecoverable error occurred while synchronizing threads\")\n+    }\n+}\n+\n /// Blocks unless or until the current thread's token is made available.\n ///\n /// A call to `park` does not guarantee that the thread will remain parked\n-/// forever, and callers should be prepared for this possibility.\n+/// forever, and callers should be prepared for this possibility. However,\n+/// it is guaranteed that this function will not panic (it may abort the\n+/// process if the implementation encounters some rare errors).\n ///\n /// # park and unpark\n ///\n@@ -937,10 +949,13 @@ pub fn sleep(dur: Duration) {\n /// [`thread::park_timeout`]: park_timeout\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn park() {\n+    let guard = PanicGuard;\n     // SAFETY: park_timeout is called on the parker owned by this thread.\n     unsafe {\n         current().inner.as_ref().parker().park();\n     }\n+    // No panic occurred, do not abort.\n+    forget(guard);\n }\n \n /// Use [`park_timeout`].\n@@ -1001,10 +1016,13 @@ pub fn park_timeout_ms(ms: u32) {\n /// ```\n #[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n+    let guard = PanicGuard;\n     // SAFETY: park_timeout is called on the parker owned by this thread.\n     unsafe {\n         current().inner.as_ref().parker().park_timeout(dur);\n     }\n+    // No panic occurred, do not abort.\n+    forget(guard);\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}