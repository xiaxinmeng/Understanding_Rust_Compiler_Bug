{"sha": "d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OWJiOWQzMWM5ZmIxNzBjMWY4MGMyMDUxMWQxOGU0MzNjYzVlOWM=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-09-20T16:46:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T16:46:40Z"}, "message": "liballoc bench use imported path Bencher\n\ntest is already in scope, no need to use the full path", "tree": {"sha": "901d29602b5e2a78518a110c7052ce5098e89e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901d29602b5e2a78518a110c7052ce5098e89e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ4dwCRBK7hj4Ov3rIwAAdHIIAGSvW7Fw3/81QNPtZlC2tT0A\npTMctpSpX/qgTzX3oB4CKn+cjbsNhzeAqGVmGzYubBisbNjqw4yCf9LdNO8TQ7z4\nvlz+2O/i00r1H58W0dGwupLLE2pBLGav6uIKyjgZOBoSuLA/GOvZqnyv2b8bmwqB\ndb2dhmCU24W+v9E+ZdBIORkaUYGFun3x0dp85YOIjotaAs32lHCeZEtJr1WMxUsx\nZ1uDmZUOj9LEtL3UTgd4TgQcqQ6mEYRsXDX51mVWDLGfi6jbxg7T1jy0H527lkXF\nV9o5Tt4ZiIv84OTlkvL1PukKibZ53No/WIyE8gf/EOdl3XY+koyC0Qex0bLMWwc=\n=Veyd\n-----END PGP SIGNATURE-----\n", "payload": "tree 901d29602b5e2a78518a110c7052ce5098e89e29\nparent b873fa6d42cf305131d2583d03b84686e5e40f2e\nauthor Ivan Tham <pickfire@riseup.net> 1600620400 +0800\ncommitter GitHub <noreply@github.com> 1600620400 +0800\n\nliballoc bench use imported path Bencher\n\ntest is already in scope, no need to use the full path"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "html_url": "https://github.com/rust-lang/rust/commit/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b873fa6d42cf305131d2583d03b84686e5e40f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b873fa6d42cf305131d2583d03b84686e5e40f2e", "html_url": "https://github.com/rust-lang/rust/commit/b873fa6d42cf305131d2583d03b84686e5e40f2e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b295342f3610ee609cbb73c72ae785fe600967a5", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "patch": "@@ -496,7 +496,7 @@ bench_in_place![\n ];\n \n #[bench]\n-fn bench_in_place_recycle(b: &mut test::Bencher) {\n+fn bench_in_place_recycle(b: &mut Bencher) {\n     let mut data = vec![0; 1000];\n \n     b.iter(|| {\n@@ -513,7 +513,7 @@ fn bench_in_place_recycle(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_in_place_zip_recycle(b: &mut test::Bencher) {\n+fn bench_in_place_zip_recycle(b: &mut Bencher) {\n     let mut data = vec![0u8; 1000];\n     let mut rng = rand::thread_rng();\n     let mut subst = vec![0u8; 1000];\n@@ -533,7 +533,7 @@ fn bench_in_place_zip_recycle(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_in_place_zip_iter_mut(b: &mut test::Bencher) {\n+fn bench_in_place_zip_iter_mut(b: &mut Bencher) {\n     let mut data = vec![0u8; 256];\n     let mut rng = rand::thread_rng();\n     let mut subst = vec![0u8; 1000];\n@@ -558,7 +558,7 @@ impl Drop for Droppable {\n }\n \n #[bench]\n-fn bench_in_place_collect_droppable(b: &mut test::Bencher) {\n+fn bench_in_place_collect_droppable(b: &mut Bencher) {\n     let v: Vec<Droppable> = std::iter::repeat_with(|| Droppable(0)).take(1000).collect();\n     b.iter(|| {\n         v.clone()\n@@ -571,13 +571,13 @@ fn bench_in_place_collect_droppable(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_chain_collect(b: &mut test::Bencher) {\n+fn bench_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| data.iter().cloned().chain([1].iter().cloned()).collect::<Vec<_>>());\n }\n \n #[bench]\n-fn bench_chain_chain_collect(b: &mut test::Bencher) {\n+fn bench_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         data.iter()\n@@ -589,7 +589,7 @@ fn bench_chain_chain_collect(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_nest_chain_chain_collect(b: &mut test::Bencher) {\n+fn bench_nest_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         data.iter().cloned().chain([1].iter().chain([2].iter()).cloned()).collect::<Vec<_>>()\n@@ -616,12 +616,12 @@ pub fn map_fast(l: &[(u32, u32)]) -> Vec<u32> {\n const LEN: usize = 16384;\n \n #[bench]\n-fn bench_range_map_collect(b: &mut test::Bencher) {\n+fn bench_range_map_collect(b: &mut Bencher) {\n     b.iter(|| (0..LEN).map(|_| u32::default()).collect::<Vec<_>>());\n }\n \n #[bench]\n-fn bench_chain_extend_ref(b: &mut test::Bencher) {\n+fn bench_chain_extend_ref(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::with_capacity(data.len() + 1);\n@@ -631,7 +631,7 @@ fn bench_chain_extend_ref(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_chain_extend_value(b: &mut test::Bencher) {\n+fn bench_chain_extend_value(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::with_capacity(data.len() + 1);\n@@ -641,7 +641,7 @@ fn bench_chain_extend_value(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_rev_1(b: &mut test::Bencher) {\n+fn bench_rev_1(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::new();\n@@ -651,13 +651,13 @@ fn bench_rev_1(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_rev_2(b: &mut test::Bencher) {\n+fn bench_rev_2(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| example_plain_slow(&data));\n }\n \n #[bench]\n-fn bench_map_regular(b: &mut test::Bencher) {\n+fn bench_map_regular(b: &mut Bencher) {\n     let data = black_box([(0, 0); LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::new();\n@@ -667,7 +667,7 @@ fn bench_map_regular(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_map_fast(b: &mut test::Bencher) {\n+fn bench_map_fast(b: &mut Bencher) {\n     let data = black_box([(0, 0); LEN]);\n     b.iter(|| map_fast(&data));\n }"}]}