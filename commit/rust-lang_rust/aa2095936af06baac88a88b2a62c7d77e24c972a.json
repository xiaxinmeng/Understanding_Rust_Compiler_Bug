{"sha": "aa2095936af06baac88a88b2a62c7d77e24c972a", "node_id": "C_kwDOAAsO6NoAKGFhMjA5NTkzNmFmMDZiYWFjODhhODhiMmE2MmM3ZDc3ZTI0Yzk3MmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-10T11:10:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-10T11:10:00Z"}, "message": "Rollup merge of #93824 - Amanieu:stable_cfg_target_has_atomic, r=davidtwco\n\nStabilize cfg_target_has_atomic\n\n`target_has_atomic_equal_alignment` is now tracked separately in #93822.\n\nCloses #32976", "tree": {"sha": "5c77b982fc21224daa57f6e01dd91b7d07669c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c77b982fc21224daa57f6e01dd91b7d07669c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2095936af06baac88a88b2a62c7d77e24c972a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBPKICRBK7hj4Ov3rIwAAPHYIAKLh1+veQb9gSIj0pl01/Cp9\nw4YjkmK3o1gtF9PwiERfUo3e+5US2HbrF1hvJCY82aPMWitb286GGRUuVMuAVZUt\n1R100h+2xWWYuzRJE4QPM2T+xk87h30lOknZJdHybepw/FST9VJuWu+7SITfrbOB\ntNzyLyubT3q3ZuCU+3oEDeC00hve00ymOTgR2snReBqNREAP0+BxGOWKH9zGQ92h\nssKue9KCPXzcuUcDmJ16ASUdM/ueFQ5p39E/OXpH73wiKAdUt3A1S06pX8LAMzrP\n/hrTMuRiSTzH1u89YgcnCz5rImEoLsmVv4/6zvH+6jayr7N1UEUrn8TfmzuhPtY=\n=UL3+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c77b982fc21224daa57f6e01dd91b7d07669c2c\nparent 2997ea3ceffaadd1061153e3e17959190bbde24a\nparent 49d48231126c3e83614f399bea653f45c2d8daf9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644491400 +0100\ncommitter GitHub <noreply@github.com> 1644491400 +0100\n\nRollup merge of #93824 - Amanieu:stable_cfg_target_has_atomic, r=davidtwco\n\nStabilize cfg_target_has_atomic\n\n`target_has_atomic_equal_alignment` is now tracked separately in #93822.\n\nCloses #32976\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2095936af06baac88a88b2a62c7d77e24c972a", "html_url": "https://github.com/rust-lang/rust/commit/aa2095936af06baac88a88b2a62c7d77e24c972a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2095936af06baac88a88b2a62c7d77e24c972a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2997ea3ceffaadd1061153e3e17959190bbde24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2997ea3ceffaadd1061153e3e17959190bbde24a", "html_url": "https://github.com/rust-lang/rust/commit/2997ea3ceffaadd1061153e3e17959190bbde24a"}, {"sha": "49d48231126c3e83614f399bea653f45c2d8daf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d48231126c3e83614f399bea653f45c2d8daf9", "html_url": "https://github.com/rust-lang/rust/commit/49d48231126c3e83614f399bea653f45c2d8daf9"}], "stats": {"total": 486, "additions": 84, "deletions": 402}, "files": [{"sha": "88edaec916972f70b564b8b6c53b393fa8770fb3", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -72,6 +72,8 @@ declare_features! (\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n     /// Allows `cfg(target_feature = \"...\")`.\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n+    /// Allows `cfg(target_has_atomic = \"...\")`.\n+    (accepted, cfg_target_has_atomic, \"1.60.0\", Some(32976), None),\n     /// Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n     /// Allows implementing `Clone` for closures where possible (RFC 2132)."}, {"sha": "fab22e4e6cf32aaf5bd216aeb139fe284eeec6b3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -309,8 +309,8 @@ declare_features! (\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`.\n     (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n-    /// Allows `cfg(target_has_atomic = \"...\")`.\n-    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n+    /// Allows `cfg(target_has_atomic_equal_alignment = \"...\")`.\n+    (active, cfg_target_has_atomic_equal_alignment, \"1.60.0\", Some(93822), None),\n     /// Allows `cfg(target_thread_local)`.\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n     /// Allow conditional compilation depending on rust version"}, {"sha": "69ce21d231f27803b9d4b774d9acad74a7f46de5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -26,12 +26,10 @@ const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n     (sym::target_abi, sym::cfg_target_abi, cfg_fn!(cfg_target_abi)),\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n-    (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n-    (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (\n         sym::target_has_atomic_equal_alignment,\n-        sym::cfg_target_has_atomic,\n-        cfg_fn!(cfg_target_has_atomic),\n+        sym::cfg_target_has_atomic_equal_alignment,\n+        cfg_fn!(cfg_target_has_atomic_equal_alignment),\n     ),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n     (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),"}, {"sha": "cab1d4e21c9b5a45de34135907ac102989e22782", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -421,6 +421,7 @@ symbols! {\n         cfg_target_abi,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n+        cfg_target_has_atomic_equal_alignment,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n         cfg_version,"}, {"sha": "ab9f0b9d7378fbceca09ab6adb372f35698e07b0", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -140,7 +140,7 @@\n #![feature(associated_type_bounds)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(const_deref)]\n #![feature(const_fn_trait_bound)]\n #![feature(const_mut_refs)]"}, {"sha": "72d8e1b39030a13e41105b44cc6e5f96362f6aa4", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -155,7 +155,8 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n+#![cfg_attr(not(bootstrap), feature(cfg_target_has_atomic_equal_alignment))]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n #![feature(const_fn_trait_bound)]"}, {"sha": "1c512471c95cbff0d5878ec797437d230100cc00", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -7,7 +7,7 @@\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(cfg_panic)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(const_assume)]\n #![feature(const_black_box)]\n #![feature(const_bool_to_option)]"}, {"sha": "2aae29f21544da6be1979cb452149ca1313ab232", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -242,7 +242,7 @@\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n #![feature(cfg_eval)]\n-#![feature(cfg_target_has_atomic)]\n+#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]"}, {"sha": "e9b28504a907a4c5fa02769f49ab0d15180b89e9", "filename": "src/test/run-make-fulldeps/atomic-lock-free/atomic_lock_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(cfg_target_has_atomic, no_core, intrinsics, lang_items)]\n+#![feature(no_core, intrinsics, lang_items)]\n #![crate_type=\"rlib\"]\n #![no_core]\n "}, {"sha": "3d692a070019747004ffd8597a99d11d198815bd", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.rs?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    cfg!(target_has_atomic_equal_alignment = \"8\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"16\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"32\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"64\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"128\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+    cfg!(target_has_atomic_equal_alignment = \"ptr\");\n+    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+}"}, {"sha": "8ad3b034aa51ffbef802c515cecfcce98c6e5de1", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic-equal-alignment.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/aa2095936af06baac88a88b2a62c7d77e24c972a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa2095936af06baac88a88b2a62c7d77e24c972a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic-equal-alignment.stderr?ref=aa2095936af06baac88a88b2a62c7d77e24c972a", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:2:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"8\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:4:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"16\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:6:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"32\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:8:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"64\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:10:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"128\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-has-atomic-equal-alignment.rs:12:10\n+   |\n+LL |     cfg!(target_has_atomic_equal_alignment = \"ptr\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93822 <https://github.com/rust-lang/rust/issues/93822> for more information\n+   = help: add `#![feature(cfg_target_has_atomic_equal_alignment)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "049fdd84d8c22e71a8dae4a329b97cfbe60f74fe", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2997ea3ceffaadd1061153e3e17959190bbde24a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2997ea3ceffaadd1061153e3e17959190bbde24a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=2997ea3ceffaadd1061153e3e17959190bbde24a", "patch": "@@ -1,118 +0,0 @@\n-#![feature(intrinsics, lang_items, no_core, rustc_attrs)]\n-\n-#![crate_type=\"rlib\"]\n-#![no_core]\n-\n-extern \"rust-intrinsic\" {\n-    fn atomic_xadd<T>(dst: *mut T, src: T) -> T;\n-}\n-\n-#[lang = \"sized\"]\n-trait Sized {}\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n-#[cfg(target_has_atomic = \"8\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u8(x: *mut u8) {\n-    atomic_xadd(x, 1);\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"8\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i8(x: *mut i8) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"16\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u16(x: *mut u16) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"16\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i16(x: *mut i16) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"32\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u32(x: *mut u32) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"32\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i32(x: *mut i32) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"64\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u64(x: *mut u64) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"64\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i64(x: *mut i64) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"128\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_u128(x: *mut u128) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"128\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_i128(x: *mut i128) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"ptr\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_usize(x: *mut usize) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"ptr\")]\n-//~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-pub unsafe fn atomic_isize(x: *mut isize) {\n-    atomic_xadd(x, 1);\n-}\n-\n-fn main() {\n-    cfg!(target_has_atomic = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_load_store = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"8\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"16\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"32\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"64\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"128\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-    cfg!(target_has_atomic_equal_alignment = \"ptr\");\n-    //~^ ERROR `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-}\n-\n-#[macro_export]\n-#[rustc_builtin_macro]\n-macro_rules! cfg { () => () }"}, {"sha": "16e1dc644008433ca55be33c2449b5fed9309028", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "removed", "additions": 0, "deletions": 273, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/2997ea3ceffaadd1061153e3e17959190bbde24a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2997ea3ceffaadd1061153e3e17959190bbde24a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=2997ea3ceffaadd1061153e3e17959190bbde24a", "patch": "@@ -1,273 +0,0 @@\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:15:7\n-   |\n-LL | #[cfg(target_has_atomic = \"8\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:21:7\n-   |\n-LL | #[cfg(target_has_atomic = \"8\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:26:7\n-   |\n-LL | #[cfg(target_has_atomic = \"16\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:31:7\n-   |\n-LL | #[cfg(target_has_atomic = \"16\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:36:7\n-   |\n-LL | #[cfg(target_has_atomic = \"32\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:41:7\n-   |\n-LL | #[cfg(target_has_atomic = \"32\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:46:7\n-   |\n-LL | #[cfg(target_has_atomic = \"64\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:51:7\n-   |\n-LL | #[cfg(target_has_atomic = \"64\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:56:7\n-   |\n-LL | #[cfg(target_has_atomic = \"128\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:61:7\n-   |\n-LL | #[cfg(target_has_atomic = \"128\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:66:7\n-   |\n-LL | #[cfg(target_has_atomic = \"ptr\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:71:7\n-   |\n-LL | #[cfg(target_has_atomic = \"ptr\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n-   |\n-LL |     cfg!(target_has_atomic = \"8\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n-   |\n-LL |     cfg!(target_has_atomic = \"16\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n-   |\n-LL |     cfg!(target_has_atomic = \"32\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n-   |\n-LL |     cfg!(target_has_atomic = \"64\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:86:10\n-   |\n-LL |     cfg!(target_has_atomic = \"128\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:88:10\n-   |\n-LL |     cfg!(target_has_atomic = \"ptr\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:90:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"8\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:92:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"16\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:94:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"32\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:96:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"64\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:98:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"128\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_load_store)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:100:10\n-   |\n-LL |     cfg!(target_has_atomic_load_store = \"ptr\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:102:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"8\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:104:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"16\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:106:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"32\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:108:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"64\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:110:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"128\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_has_atomic_equal_alignment)` is experimental and subject to change\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:112:10\n-   |\n-LL |     cfg!(target_has_atomic_equal_alignment = \"ptr\");\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n-   = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n-\n-error: aborting due to 30 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}]}