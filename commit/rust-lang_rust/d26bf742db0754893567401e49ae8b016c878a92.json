{"sha": "d26bf742db0754893567401e49ae8b016c878a92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNmJmNzQyZGIwNzU0ODkzNTY3NDAxZTQ5YWU4YjAxNmM4NzhhOTI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-14T21:31:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-17T22:38:34Z"}, "message": "Change `Token::interpolated_to_tokenstream()`.\n\nIt is currently a method of `Token`, but it only is valid to call if\n`self` is a `Token::Interpolated`. This commit eliminates the\npossibility of misuse by changing it to an associated function that\ntakes a `Nonterminal`, which also simplifies the call sites.\n\nThis requires splitting out a new function, `nonterminal_to_string`.", "tree": {"sha": "891c27d6805a649ded71e355b64abaa1783f391d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891c27d6805a649ded71e355b64abaa1783f391d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26bf742db0754893567401e49ae8b016c878a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26bf742db0754893567401e49ae8b016c878a92", "html_url": "https://github.com/rust-lang/rust/commit/d26bf742db0754893567401e49ae8b016c878a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26bf742db0754893567401e49ae8b016c878a92/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f47ec2ad5b6887b3d400aee49e2294bd27733d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47ec2ad5b6887b3d400aee49e2294bd27733d18", "html_url": "https://github.com/rust-lang/rust/commit/f47ec2ad5b6887b3d400aee49e2294bd27733d18"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "bbbd38cfed7e480ff6ca76ada73c0f2f50436433", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d26bf742db0754893567401e49ae8b016c878a92", "patch": "@@ -1131,12 +1131,12 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_token(&mut self, token: Token, span: Span) -> TokenStream {\n         match token {\n-            Token::Interpolated(_) => {}\n-            other => return TokenTree::Token(span, other).into(),\n+            Token::Interpolated(nt) => {\n+                let tts = Token::interpolated_to_tokenstream(&self.sess.parse_sess, nt, span);\n+                self.lower_token_stream(tts)\n+            }\n+            other => TokenTree::Token(span, other).into(),\n         }\n-\n-        let tts = token.interpolated_to_tokenstream(&self.sess.parse_sess, span);\n-        self.lower_token_stream(tts)\n     }\n \n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {"}, {"sha": "976eea2bb54b216601e306ba8a7a2c1f74249a38", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d26bf742db0754893567401e49ae8b016c878a92", "patch": "@@ -508,14 +508,8 @@ impl Token {\n         }\n     }\n \n-    pub fn interpolated_to_tokenstream(&self, sess: &ParseSess, span: Span)\n-        -> TokenStream\n-    {\n-        let nt = match *self {\n-            Token::Interpolated(ref nt) => nt,\n-            _ => panic!(\"only works on interpolated tokens\"),\n-        };\n-\n+    pub fn interpolated_to_tokenstream(sess: &ParseSess, nt: Lrc<(Nonterminal, LazyTokenStream)>,\n+                                       span: Span) -> TokenStream {\n         // An `Interpolated` token means that we have a `Nonterminal`\n         // which is often a parsed AST item. At this point we now need\n         // to convert the parsed AST to an actual token stream, e.g.\n@@ -558,7 +552,7 @@ impl Token {\n \n         let tokens_for_real = nt.1.force(|| {\n             // FIXME(#43081): Avoid this pretty-print + reparse hack\n-            let source = pprust::token_to_string(self);\n+            let source = pprust::nonterminal_to_string(&nt.0);\n             let filename = FileName::macro_expansion_source_code(&source);\n             let (tokens, errors) = parse_stream_from_source_str(\n                 filename, source, sess, Some(span));"}, {"sha": "0e48e3a5dff2b78df6329ac74e09bcd76e78582c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d26bf742db0754893567401e49ae8b016c878a92", "patch": "@@ -4,7 +4,7 @@ use crate::ast::{Attribute, MacDelimiter, GenericArg};\n use crate::util::parser::{self, AssocOp, Fixity};\n use crate::attr;\n use crate::source_map::{self, SourceMap, Spanned};\n-use crate::parse::token::{self, BinOpToken, Token};\n+use crate::parse::token::{self, BinOpToken, Nonterminal, Token};\n use crate::parse::lexer::comments;\n use crate::parse::{self, ParseSess};\n use crate::print::pp::{self, Breaks};\n@@ -257,29 +257,33 @@ pub fn token_to_string(tok: &Token) -> String {\n         token::Comment              => \"/* */\".to_string(),\n         token::Shebang(s)           => format!(\"/* shebang: {}*/\", s),\n \n-        token::Interpolated(ref nt) => match nt.0 {\n-            token::NtExpr(ref e)        => expr_to_string(e),\n-            token::NtMeta(ref e)        => meta_item_to_string(e),\n-            token::NtTy(ref e)          => ty_to_string(e),\n-            token::NtPath(ref e)        => path_to_string(e),\n-            token::NtItem(ref e)        => item_to_string(e),\n-            token::NtBlock(ref e)       => block_to_string(e),\n-            token::NtStmt(ref e)        => stmt_to_string(e),\n-            token::NtPat(ref e)         => pat_to_string(e),\n-            token::NtIdent(e, false)    => ident_to_string(e),\n-            token::NtIdent(e, true)     => format!(\"r#{}\", ident_to_string(e)),\n-            token::NtLifetime(e)        => ident_to_string(e),\n-            token::NtLiteral(ref e)     => expr_to_string(e),\n-            token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n-            token::NtArm(ref e)         => arm_to_string(e),\n-            token::NtImplItem(ref e)    => impl_item_to_string(e),\n-            token::NtTraitItem(ref e)   => trait_item_to_string(e),\n-            token::NtGenerics(ref e)    => generic_params_to_string(&e.params),\n-            token::NtWhereClause(ref e) => where_clause_to_string(e),\n-            token::NtArg(ref e)         => arg_to_string(e),\n-            token::NtVis(ref e)         => vis_to_string(e),\n-            token::NtForeignItem(ref e) => foreign_item_to_string(e),\n-        }\n+        token::Interpolated(ref nt) => nonterminal_to_string(&nt.0),\n+    }\n+}\n+\n+pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n+    match *nt {\n+        token::NtExpr(ref e)        => expr_to_string(e),\n+        token::NtMeta(ref e)        => meta_item_to_string(e),\n+        token::NtTy(ref e)          => ty_to_string(e),\n+        token::NtPath(ref e)        => path_to_string(e),\n+        token::NtItem(ref e)        => item_to_string(e),\n+        token::NtBlock(ref e)       => block_to_string(e),\n+        token::NtStmt(ref e)        => stmt_to_string(e),\n+        token::NtPat(ref e)         => pat_to_string(e),\n+        token::NtIdent(e, false)    => ident_to_string(e),\n+        token::NtIdent(e, true)     => format!(\"r#{}\", ident_to_string(e)),\n+        token::NtLifetime(e)        => ident_to_string(e),\n+        token::NtLiteral(ref e)     => expr_to_string(e),\n+        token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n+        token::NtArm(ref e)         => arm_to_string(e),\n+        token::NtImplItem(ref e)    => impl_item_to_string(e),\n+        token::NtTraitItem(ref e)   => trait_item_to_string(e),\n+        token::NtGenerics(ref e)    => generic_params_to_string(&e.params),\n+        token::NtWhereClause(ref e) => where_clause_to_string(e),\n+        token::NtArg(ref e)         => arg_to_string(e),\n+        token::NtVis(ref e)         => vis_to_string(e),\n+        token::NtForeignItem(ref e) => foreign_item_to_string(e),\n     }\n }\n "}, {"sha": "60ce65baa48a308b8b3eba16269a549a8fdef37c", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26bf742db0754893567401e49ae8b016c878a92/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=d26bf742db0754893567401e49ae8b016c878a92", "patch": "@@ -178,8 +178,8 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                 tt!(Punct::new('#', false))\n             }\n \n-            Interpolated(_) => {\n-                let stream = token.interpolated_to_tokenstream(sess, span);\n+            Interpolated(nt) => {\n+                let stream = Token::interpolated_to_tokenstream(sess, nt, span);\n                 TokenTree::Group(Group {\n                     delimiter: Delimiter::None,\n                     stream,"}]}