{"sha": "0cca08a21a33b60f9a27a4bab119b5ec8261be56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjY2EwOGEyMWEzM2I2MGY5YTI3YTRiYWIxMTliNWVjODI2MWJlNTY=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-23T02:41:45Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-25T04:11:33Z"}, "message": "Add support for #[no_drop_flag] attribute", "tree": {"sha": "5776ad6072844b7028d112bbf6e110e08799d262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5776ad6072844b7028d112bbf6e110e08799d262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cca08a21a33b60f9a27a4bab119b5ec8261be56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cca08a21a33b60f9a27a4bab119b5ec8261be56", "html_url": "https://github.com/rust-lang/rust/commit/0cca08a21a33b60f9a27a4bab119b5ec8261be56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cca08a21a33b60f9a27a4bab119b5ec8261be56/comments", "author": null, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6515ee6a7f424679e2b53336974a991dd3b71c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6515ee6a7f424679e2b53336974a991dd3b71c8", "html_url": "https://github.com/rust-lang/rust/commit/c6515ee6a7f424679e2b53336974a991dd3b71c8"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "9b7c7037f42a2d17e18f793cc401715ed955afde", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cca08a21a33b60f9a27a4bab119b5ec8261be56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cca08a21a33b60f9a27a4bab119b5ec8261be56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=0cca08a21a33b60f9a27a4bab119b5ec8261be56", "patch": "@@ -135,7 +135,7 @@ fn represent_type_uncached(cx: &mut CrateContext, t: ty::t) -> Repr {\n                 ty::lookup_field_type(cx.tcx, def_id, field.id, substs)\n             };\n             let packed = ty::lookup_packed(cx.tcx, def_id);\n-            let dtor = ty::ty_dtor(cx.tcx, def_id).is_present();\n+            let dtor = ty::ty_dtor(cx.tcx, def_id).has_drop_flag();\n             let ftys =\n                 if dtor { ftys + [ty::mk_bool()] } else { ftys };\n             return Univariant(mk_struct(cx, ftys, packed), dtor)"}, {"sha": "056e5b8cdf792060ceee519392c7eb9d7e33c693", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0cca08a21a33b60f9a27a4bab119b5ec8261be56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cca08a21a33b60f9a27a4bab119b5ec8261be56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=0cca08a21a33b60f9a27a4bab119b5ec8261be56", "patch": "@@ -406,13 +406,8 @@ pub fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n     build_return(bcx);\n }\n \n-pub fn trans_struct_drop(bcx: block,\n-                         t: ty::t,\n-                         v0: ValueRef,\n-                         dtor_did: ast::def_id,\n-                         class_did: ast::def_id,\n-                         substs: &ty::substs)\n-                      -> block {\n+pub fn trans_struct_drop_flag(bcx: block, t: ty::t, v0: ValueRef, dtor_did: ast::def_id,\n+                              class_did: ast::def_id, substs: &ty::substs) -> block {\n     let repr = adt::represent_type(bcx.ccx(), t);\n     let drop_flag = adt::trans_drop_flag_ptr(bcx, repr, v0);\n     do with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) |cx| {\n@@ -454,6 +449,49 @@ pub fn trans_struct_drop(bcx: block,\n     }\n }\n \n+pub fn trans_struct_drop(mut bcx: block, t: ty::t, v0: ValueRef, dtor_did: ast::def_id,\n+                         class_did: ast::def_id, substs: &ty::substs) -> block {\n+    let repr = adt::represent_type(bcx.ccx(), t);\n+\n+    // Find and call the actual destructor\n+    let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did,\n+                                 class_did, /*bad*/copy substs.tps);\n+\n+    // The second argument is the \"self\" argument for drop\n+    let params = unsafe {\n+        let ty = Type::from_ref(llvm::LLVMTypeOf(dtor_addr));\n+        ty.element_type().func_params()\n+    };\n+\n+    // Class dtors have no explicit args, so the params should\n+    // just consist of the environment (self)\n+    assert_eq!(params.len(), 1);\n+\n+    // Take a reference to the class (because it's using the Drop trait),\n+    // do so now.\n+    let llval = alloca(bcx, val_ty(v0));\n+    Store(bcx, v0, llval);\n+\n+    let self_arg = PointerCast(bcx, llval, params[0]);\n+    let args = ~[self_arg];\n+\n+    Call(bcx, dtor_addr, args);\n+\n+    // Drop the fields\n+    let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n+    for field_tys.iter().enumerate().advance |(i, fld)| {\n+        let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n+        bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n+    }\n+\n+    // Zero out the struct\n+    unsafe {\n+        let ty = Type::from_ref(llvm::LLVMTypeOf(v0));\n+        memzero(bcx, v0, ty);\n+    }\n+\n+    bcx\n+}\n \n pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n@@ -474,7 +512,10 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_struct(did, ref substs) => {\n         let tcx = bcx.tcx();\n         match ty::ty_dtor(tcx, did) {\n-          ty::TraitDtor(dtor) => {\n+          ty::TraitDtor(dtor, true) => {\n+            trans_struct_drop_flag(bcx, t, v0, dtor, did, substs)\n+          }\n+          ty::TraitDtor(dtor, false) => {\n             trans_struct_drop(bcx, t, v0, dtor, did, substs)\n           }\n           ty::NoDtor => {"}, {"sha": "424307502f21869bee0a99d295150222befcc375", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0cca08a21a33b60f9a27a4bab119b5ec8261be56/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cca08a21a33b60f9a27a4bab119b5ec8261be56/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0cca08a21a33b60f9a27a4bab119b5ec8261be56", "patch": "@@ -3855,7 +3855,7 @@ pub fn item_path_str(cx: ctxt, id: ast::def_id) -> ~str {\n \n pub enum DtorKind {\n     NoDtor,\n-    TraitDtor(def_id)\n+    TraitDtor(def_id, bool)\n }\n \n impl DtorKind {\n@@ -3869,13 +3869,24 @@ impl DtorKind {\n     pub fn is_present(&const self) -> bool {\n         !self.is_not_present()\n     }\n+\n+    pub fn has_drop_flag(&self) -> bool {\n+        match self {\n+            &NoDtor => false,\n+            &TraitDtor(_, flag) => flag\n+        }\n+    }\n }\n \n /* If struct_id names a struct with a dtor, return Some(the dtor's id).\n    Otherwise return none. */\n pub fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n     match cx.destructor_for_type.find(&struct_id) {\n-        Some(&method_def_id) => TraitDtor(method_def_id),\n+        Some(&method_def_id) => {\n+            let flag = has_attr(cx, struct_id, \"no_drop_flag\");\n+\n+            TraitDtor(method_def_id, flag)\n+        }\n         None => NoDtor,\n     }\n }"}]}