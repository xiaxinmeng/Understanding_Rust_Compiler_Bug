{"sha": "c023856b38c847731720fa8e26f3e1b9062bc946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjM4NTZiMzhjODQ3NzMxNzIwZmE4ZTI2ZjNlMWI5MDYyYmM5NDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-06-24T07:57:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-06-24T08:09:27Z"}, "message": "Detect missing `;` on methods with return type `()`\n\n- Point out the origin of a type requirement when it is the return type\n  of a method\n- Point out possibly missing semicolon when the return type is () and\n  the implicit return makes sense as a statement\n- Suggest changing the return type of methods with default return type\n- Don't suggest changing the return type on fn main()\n- Don't suggest changing the return type on impl fn", "tree": {"sha": "bf12164ccd47b9f5a1441de065187bb54bc9442d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf12164ccd47b9f5a1441de065187bb54bc9442d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c023856b38c847731720fa8e26f3e1b9062bc946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c023856b38c847731720fa8e26f3e1b9062bc946", "html_url": "https://github.com/rust-lang/rust/commit/c023856b38c847731720fa8e26f3e1b9062bc946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c023856b38c847731720fa8e26f3e1b9062bc946/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e11189cbb129b5df33e27d21c077da6cfc5926f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e11189cbb129b5df33e27d21c077da6cfc5926f", "html_url": "https://github.com/rust-lang/rust/commit/8e11189cbb129b5df33e27d21c077da6cfc5926f"}], "stats": {"total": 386, "additions": 321, "deletions": 65}, "files": [{"sha": "ddcc2c08850859be8f7b5c7a4e07f7780a6f61af", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -594,8 +594,12 @@ impl<'hir> Map<'hir> {\n     /// last good node id we found. Note that reaching the crate root (id == 0),\n     /// is not an error, since items in the crate module have the crate root as\n     /// parent.\n-    fn walk_parent_nodes<F>(&self, start_id: NodeId, found: F) -> Result<NodeId, NodeId>\n-        where F: Fn(&Node<'hir>) -> bool\n+    fn walk_parent_nodes<F, F2>(&self,\n+                                start_id: NodeId,\n+                                found: F,\n+                                bail_early: F2)\n+        -> Result<NodeId, NodeId>\n+        where F: Fn(&Node<'hir>) -> bool, F2: Fn(&Node<'hir>) -> bool\n     {\n         let mut id = start_id;\n         loop {\n@@ -616,6 +620,8 @@ impl<'hir> Map<'hir> {\n                 Some(ref node) => {\n                     if found(node) {\n                         return Ok(parent_node);\n+                    } else if bail_early(node) {\n+                        return Err(parent_node);\n                     }\n                 }\n                 None => {\n@@ -626,6 +632,34 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn get_return_block(&self, id: NodeId) -> Option<NodeId> {\n+        let match_fn = |node: &Node| {\n+            match *node {\n+                NodeItem(_) |\n+                NodeForeignItem(_) |\n+                NodeTraitItem(_) |\n+                NodeImplItem(_) => true,\n+                _ => false,\n+            }\n+        };\n+        let match_non_returning_block = |node: &Node| {\n+            match *node {\n+                NodeExpr(ref expr) => {\n+                    match expr.node {\n+                        ExprWhile(..) | ExprLoop(..) => true,\n+                        _ => false,\n+                    }\n+                }\n+                _ => false,\n+            }\n+        };\n+\n+        match self.walk_parent_nodes(id, match_fn, match_non_returning_block) {\n+            Ok(id) => Some(id),\n+            Err(_) => None,\n+        }\n+    }\n+\n     /// Retrieve the NodeId for `id`'s parent item, or `id` itself if no\n     /// parent item is in this map. The \"parent item\" is the closest parent node\n     /// in the AST which is recorded by the map and is an item, either an item\n@@ -637,7 +671,7 @@ impl<'hir> Map<'hir> {\n             NodeTraitItem(_) |\n             NodeImplItem(_) => true,\n             _ => false,\n-        }) {\n+        }, |_| false) {\n             Ok(id) => id,\n             Err(id) => id,\n         }\n@@ -649,7 +683,7 @@ impl<'hir> Map<'hir> {\n         let id = match self.walk_parent_nodes(id, |node| match *node {\n             NodeItem(&Item { node: Item_::ItemMod(_), .. }) => true,\n             _ => false,\n-        }) {\n+        }, |_| false) {\n             Ok(id) => id,\n             Err(id) => id,\n         };\n@@ -668,7 +702,7 @@ impl<'hir> Map<'hir> {\n             NodeImplItem(_) |\n             NodeBlock(_) => true,\n             _ => false,\n-        }) {\n+        }, |_| false) {\n             Ok(id) => Some(id),\n             Err(_) => None,\n         }"}, {"sha": "2f260b0b9ee1fca233a32f6a4c52a6a1441d645e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1088,7 +1088,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::VariableType(_) => {\n                 err.note(\"all local variables must have a statically known size\");\n             }\n-            ObligationCauseCode::ReturnType => {\n+            ObligationCauseCode::SizedReturnType => {\n                 err.note(\"the return type of a function must have a \\\n                           statically known size\");\n             }\n@@ -1133,6 +1133,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                               but not on the corresponding trait method\",\n                              predicate));\n             }\n+            ObligationCauseCode::ReturnType(_) |\n+            ObligationCauseCode::BlockTailExpression(_) => (),\n         }\n     }\n "}, {"sha": "a98be90e3a0f11876b08199025ed00382c823d82", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -118,65 +118,76 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Obligation incurred due to an object cast.\n     ObjectCastObligation(/* Object type */ Ty<'tcx>),\n \n-    /// Various cases where expressions must be sized/copy/etc:\n-    AssignmentLhsSized,        // L = X implies that L is Sized\n-    StructInitializerSized,    // S { ... } must be Sized\n-    VariableType(ast::NodeId), // Type of each variable must be Sized\n-    ReturnType,                // Return type must be Sized\n-    RepeatVec,                 // [T,..n] --> T must be Copy\n-\n-    // Types of fields (other than the last) in a struct must be sized.\n+    // Various cases where expressions must be sized/copy/etc:\n+    /// L = X implies that L is Sized\n+    AssignmentLhsSized,\n+    /// S { ... } must be Sized\n+    StructInitializerSized,\n+    /// Type of each variable must be Sized\n+    VariableType(ast::NodeId),\n+    /// Return type must be Sized\n+    SizedReturnType,\n+    /// [T,..n] --> T must be Copy\n+    RepeatVec,\n+\n+    /// Types of fields (other than the last) in a struct must be sized.\n     FieldSized,\n \n-    // Constant expressions must be sized.\n+    /// Constant expressions must be sized.\n     ConstSized,\n \n-    // static items must have `Sync` type\n+    /// static items must have `Sync` type\n     SharedStatic,\n \n     BuiltinDerivedObligation(DerivedObligationCause<'tcx>),\n \n     ImplDerivedObligation(DerivedObligationCause<'tcx>),\n \n-    // error derived when matching traits/impls; see ObligationCause for more details\n+    /// error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n         lint_id: Option<ast::NodeId>,\n     },\n \n-    // Checking that this expression can be assigned where it needs to be\n+    /// Checking that this expression can be assigned where it needs to be\n     // FIXME(eddyb) #11161 is the original Expr required?\n     ExprAssignable,\n \n-    // Computing common supertype in the arms of a match expression\n+    /// Computing common supertype in the arms of a match expression\n     MatchExpressionArm { arm_span: Span,\n                          source: hir::MatchSource },\n \n-    // Computing common supertype in an if expression\n+    /// Computing common supertype in an if expression\n     IfExpression,\n \n-    // Computing common supertype of an if expression with no else counter-part\n+    /// Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse,\n \n-    // `where a == b`\n+    /// `where a == b`\n     EquatePredicate,\n \n-    // `main` has wrong type\n+    /// `main` has wrong type\n     MainFunctionType,\n \n-    // `start` has wrong type\n+    /// `start` has wrong type\n     StartFunctionType,\n \n-    // intrinsic has wrong type\n+    /// intrinsic has wrong type\n     IntrinsicType,\n \n-    // method receiver\n+    /// method receiver\n     MethodReceiver,\n \n-    // `return` with no expression\n+    /// `return` with no expression\n     ReturnNoExpression,\n+\n+    /// `return` with an expression\n+    ReturnType(ast::NodeId),\n+\n+    /// Block implicit return\n+    BlockTailExpression(ast::NodeId),\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "0d6df78c2ac5b88a0b4dd62a74b5768226a157b7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -191,7 +191,8 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::AssignmentLhsSized => Some(super::AssignmentLhsSized),\n             super::StructInitializerSized => Some(super::StructInitializerSized),\n             super::VariableType(id) => Some(super::VariableType(id)),\n-            super::ReturnType => Some(super::ReturnType),\n+            super::ReturnType(id) => Some(super::ReturnType(id)),\n+            super::SizedReturnType => Some(super::SizedReturnType),\n             super::RepeatVec => Some(super::RepeatVec),\n             super::FieldSized => Some(super::FieldSized),\n             super::ConstSized => Some(super::ConstSized),\n@@ -213,34 +214,19 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                     lint_id: lint_id,\n                 })\n             }\n-            super::ExprAssignable => {\n-                Some(super::ExprAssignable)\n-            }\n+            super::ExprAssignable => Some(super::ExprAssignable),\n             super::MatchExpressionArm { arm_span, source } => {\n                 Some(super::MatchExpressionArm { arm_span: arm_span,\n                                                  source: source })\n             }\n-            super::IfExpression => {\n-                Some(super::IfExpression)\n-            }\n-            super::IfExpressionWithNoElse => {\n-                Some(super::IfExpressionWithNoElse)\n-            }\n-            super::EquatePredicate => {\n-                Some(super::EquatePredicate)\n-            }\n-            super::MainFunctionType => {\n-                Some(super::MainFunctionType)\n-            }\n-            super::StartFunctionType => {\n-                Some(super::StartFunctionType)\n-            }\n-            super::IntrinsicType => {\n-                Some(super::IntrinsicType)\n-            }\n-            super::MethodReceiver => {\n-                Some(super::MethodReceiver)\n-            }\n+            super::IfExpression => Some(super::IfExpression),\n+            super::IfExpressionWithNoElse => Some(super::IfExpressionWithNoElse),\n+            super::EquatePredicate => Some(super::EquatePredicate),\n+            super::MainFunctionType => Some(super::MainFunctionType),\n+            super::StartFunctionType => Some(super::StartFunctionType),\n+            super::IntrinsicType => Some(super::IntrinsicType),\n+            super::MethodReceiver => Some(super::MethodReceiver),\n+            super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n         }\n     }\n }\n@@ -492,12 +478,14 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::AssignmentLhsSized |\n             super::StructInitializerSized |\n             super::VariableType(_) |\n-            super::ReturnType |\n+            super::ReturnType(_) |\n+            super::SizedReturnType |\n             super::ReturnNoExpression |\n             super::RepeatVec |\n             super::FieldSized |\n             super::ConstSized |\n             super::SharedStatic |\n+            super::BlockTailExpression(_) |\n             super::CompareImplMethodObligation { .. } => self.clone(),\n \n             super::ProjectionWf(proj) => super::ProjectionWf(proj.fold_with(folder)),\n@@ -537,12 +525,14 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::AssignmentLhsSized |\n             super::StructInitializerSized |\n             super::VariableType(_) |\n-            super::ReturnType |\n+            super::ReturnType(_) |\n+            super::SizedReturnType |\n             super::ReturnNoExpression |\n             super::RepeatVec |\n             super::FieldSized |\n             super::ConstSized |\n             super::SharedStatic |\n+            super::BlockTailExpression(_) |\n             super::CompareImplMethodObligation { .. } => false,\n \n             super::ProjectionWf(proj) => proj.visit_with(visitor),"}, {"sha": "660f6c5a093f33ff82648f735516c9da17e32a64", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1162,6 +1162,24 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                             \"`return;` in a function whose return type is not `()`\");\n                         db.span_label(cause.span, \"return type is not ()\");\n                     }\n+                    ObligationCauseCode::BlockTailExpression(blk_id) => {\n+                        db = fcx.report_mismatched_types(cause, expected, found, err);\n+\n+                        let expr = expression.unwrap_or_else(|| {\n+                            span_bug!(cause.span,\n+                                      \"supposed to be part of a block tail expression, but the \\\n+                                       expression is empty\");\n+                        });\n+                        fcx.suggest_mismatched_types_on_tail(&mut db, expr,\n+                                                             expected, found,\n+                                                             cause.span, blk_id);\n+                    }\n+                    ObligationCauseCode::ReturnType(ret_id) => {\n+                        db = fcx.report_mismatched_types(cause, expected, found, err);\n+                        if let Some((fn_decl, _)) = fcx.get_fn_decl(ret_id) {\n+                            fcx.point_to_type_requirement(&mut db, &fn_decl, expected);\n+                        }\n+                    }\n                     _ => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);\n                     }"}, {"sha": "1edb141c2afef50176179c3d264c09d04518fd3b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -73,15 +73,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn demand_coerce(&self, expr: &hir::Expr, checked_ty: Ty<'tcx>, expected: Ty<'tcx>) {\n+        if let Some(mut err) = self.demand_coerce_diag(expr, checked_ty, expected) {\n+            err.emit();\n+        }\n+    }\n+\n     // Checks that the type of `expr` can be coerced to `expected`.\n     //\n     // NB: This code relies on `self.diverges` to be accurate.  In\n     // particular, assignments to `!` will be permitted if the\n     // diverges flag is currently \"always\".\n-    pub fn demand_coerce(&self,\n-                         expr: &hir::Expr,\n-                         checked_ty: Ty<'tcx>,\n-                         expected: Ty<'tcx>) {\n+    pub fn demand_coerce_diag(&self,\n+                              expr: &hir::Expr,\n+                              checked_ty: Ty<'tcx>,\n+                              expected: Ty<'tcx>) -> Option<DiagnosticBuilder<'tcx>> {\n         let expected = self.resolve_type_vars_with_obligations(expected);\n \n         if let Err(e) = self.try_coerce(expr, checked_ty, self.diverges.get(), expected) {\n@@ -105,8 +111,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                       self.get_best_match(&suggestions).join(\"\\n\")));\n                 }\n             }\n-            err.emit();\n+            return Some(err);\n         }\n+        None\n     }\n \n     fn format_method_suggestion(&self, method: &AssociatedItem) -> String {"}, {"sha": "684e5a66fc51b546d77dc7532d494398cd273b6a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 151, "deletions": 5, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -124,6 +124,7 @@ use syntax_pos::{self, BytePos, Span};\n \n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::map::Node;\n use rustc::hir::{self, PatKind};\n use rustc::middle::lang_items;\n use rustc_back::slice;\n@@ -985,7 +986,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);\n \n     let ret_ty = fn_sig.output();\n-    fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::ReturnType);\n+    fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::SizedReturnType);\n     let ret_ty = fcx.instantiate_anon_types(&ret_ty);\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fn_sig = fcx.tcx.mk_fn_sig(\n@@ -1908,7 +1909,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                     // Require that the predicate holds for the concrete type.\n                     let cause = traits::ObligationCause::new(span, self.body_id,\n-                                                             traits::ReturnType);\n+                                                             traits::SizedReturnType);\n                     self.register_predicate(traits::Obligation::new(cause,\n                                                                     self.param_env,\n                                                                     predicate));\n@@ -2848,10 +2849,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                              \"check_return_expr called outside fn body\"));\n \n         let ret_ty = ret_coercion.borrow().expected_ty();\n-        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty);\n+        let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty.clone());\n         ret_coercion.borrow_mut()\n                     .coerce(self,\n-                            &self.misc(return_expr.span),\n+                            &self.cause(return_expr.span,\n+                                        ObligationCauseCode::ReturnType(return_expr.id)),\n                             return_expr,\n                             return_expr_ty,\n                             self.diverges.get());\n@@ -4170,8 +4172,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let mut coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n+                let cause = self.cause(tail_expr.span,\n+                                       ObligationCauseCode::BlockTailExpression(blk.id));\n                 coerce.coerce(self,\n-                              &self.misc(tail_expr.span),\n+                              &cause,\n                               tail_expr,\n                               tail_expr_ty,\n                               self.diverges.get());\n@@ -4210,6 +4214,148 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and wether it is\n+    /// `fn main` if it is a method, `None` otherwise.\n+    pub fn get_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, bool)> {\n+        // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n+        // `while` before reaching it, as block tail returns are not available in them.\n+        if let Some(fn_id) = self.tcx.hir.get_return_block(blk_id) {\n+            let parent = self.tcx.hir.get(fn_id);\n+\n+            if let Node::NodeItem(&hir::Item {\n+                name, node: hir::ItemFn(ref decl, ..), ..\n+            }) = parent {\n+                decl.clone().and_then(|decl| {\n+                    // This is less than ideal, it will not present the return type span on any\n+                    // method called `main`, regardless of wether it is actually the entry point.\n+                    Some((decl, name == Symbol::intern(\"main\")))\n+                })\n+            } else if let Node::NodeTraitItem(&hir::TraitItem {\n+                node: hir::TraitItemKind::Method(hir::MethodSig {\n+                    ref decl, ..\n+                }, ..), ..\n+            }) = parent {\n+                decl.clone().and_then(|decl| {\n+                    Some((decl, false))\n+                })\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// On implicit return expressions with mismatched types, provide the following suggestions:\n+    ///\n+    ///  - Point out the method's return type as the reason for the expected type\n+    ///  - Possible missing semicolon\n+    ///  - Possible missing return type if the return type is the default, and not `fn main()`\n+    pub fn suggest_mismatched_types_on_tail(&self,\n+                                            err: &mut DiagnosticBuilder<'tcx>,\n+                                            expression: &'gcx hir::Expr,\n+                                            expected: Ty<'tcx>,\n+                                            found: Ty<'tcx>,\n+                                            cause_span: Span,\n+                                            blk_id: ast::NodeId) {\n+        self.suggest_missing_semicolon(err, expression, expected, cause_span);\n+\n+        if let Some((fn_decl, is_main)) = self.get_fn_decl(blk_id) {\n+            self.point_to_type_requirement(err, &fn_decl, expected);\n+            // `fn main()` must return `()`, do not suggest changing return type\n+            if !is_main {\n+                self.suggest_missing_return_type(err, &fn_decl, found);\n+            }\n+        }\n+    }\n+\n+    pub fn point_to_type_requirement(&self,\n+                                 err: &mut DiagnosticBuilder<'tcx>,\n+                                 fn_decl: &hir::FnDecl,\n+                                 ty: Ty<'tcx>) {\n+        let msg = if let &hir::FnDecl {\n+            output: hir::FunctionRetTy::DefaultReturn(_), ..\n+        } = fn_decl {\n+            \"default \"\n+        } else {\n+            \"\"\n+        };\n+        let ty = self.resolve_type_vars_if_possible(&ty);\n+        if ty.to_string().len() < 10 {\n+            err.span_label(fn_decl.output.span(),\n+                           format!(\"expected `{}` because of this {}return type\", ty, msg));\n+        } else {\n+            err.span_label(fn_decl.output.span(),\n+                           format!(\"expected because of this {}return type\", msg));\n+        }\n+    }\n+\n+    /// A common error is to forget to add a semicolon at the end of a block:\n+    ///\n+    /// ```\n+    /// fn foo() {\n+    ///     bar_that_returns_u32()\n+    /// }\n+    /// ```\n+    ///\n+    /// This routine checks if the return expression in a block would make sense on its own as a\n+    /// statement and the return type has been left as defaultor has been specified as `()`. If so,\n+    /// it suggests adding a semicolon.\n+    fn suggest_missing_semicolon(&self,\n+                                     err: &mut DiagnosticBuilder<'tcx>,\n+                                     expression: &'gcx hir::Expr,\n+                                     expected: Ty<'tcx>,\n+                                     cause_span: Span) {\n+        if expected.is_nil() {\n+            // `BlockTailExpression` only relevant if the tail expr would be\n+            // useful on its own.\n+            match expression.node {\n+                hir::ExprCall(..) |\n+                hir::ExprMethodCall(..) |\n+                hir::ExprIf(..) |\n+                hir::ExprWhile(..) |\n+                hir::ExprLoop(..) |\n+                hir::ExprMatch(..) |\n+                hir::ExprBlock(..) => {\n+                    let sp = cause_span.next_point();\n+                    err.span_suggestion(sp,\n+                                        \"did you mean to add a semicolon here?\",\n+                                        \";\".to_string());\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+\n+\n+    /// A possible error is to forget to add a return type that is needed:\n+    ///\n+    /// ```\n+    /// fn foo() {\n+    ///     bar_that_returns_u32()\n+    /// }\n+    /// ```\n+    ///\n+    /// This routine checks if the return type is left as default, the method is not part of an\n+    /// `impl` block and that it isn't the `main` method. If so, it suggests setting the return\n+    /// type.\n+    fn suggest_missing_return_type(&self,\n+                                   err: &mut DiagnosticBuilder<'tcx>,\n+                                   fn_decl: &hir::FnDecl,\n+                                   ty: Ty<'tcx>) {\n+\n+        // Only recommend changing the return type for methods that\n+        // haven't set a return type at all (and aren't `fn main()` or an impl).\n+        if let &hir::FnDecl {\n+            output: hir::FunctionRetTy::DefaultReturn(span), ..\n+        } = fn_decl {\n+            err.span_suggestion(span,\n+                                \"possibly return type missing here?\",\n+                                format!(\"-> {} \", ty));\n+        }\n+    }\n+\n+\n     /// A common error is to add an extra semicolon:\n     ///\n     /// ```"}, {"sha": "69c6e647cfc24727e680216452b3da42ac4a1abb", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:17:5\n    |\n+16 |   pub fn get_enum_struct_variant() -> () {\n+   |                                       -- expected `()` because of this return type\n 17 |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |"}, {"sha": "0d88a44d6b9b2fc5cc2d026c5ea5d6dee4f0409a", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,6 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-20862.rs:12:5\n    |\n+11 | fn foo(x: i32) {\n+   |                -\n+   |                |\n+   |                help: possibly return type missing here? `-> [closure@$DIR/issue-20862.rs:12:5: 12:14 x:_] `\n+   |                expected `()` because of this default return type\n 12 |     |y| x + y\n    |     ^^^^^^^^^ expected (), found closure\n    |"}, {"sha": "93da3c6a4893289a2b20e13402625ddb6a9aed6c", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -11,6 +11,9 @@ error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:25:3\n    |\n+23 | fn main() {\n+   |           - expected `()` because of this default return type\n+24 |   let b = Bob + 3.5;\n 25 |   b + 3 //~ ERROR E0277\n    |   ^^^^^ expected (), found struct `Bob`\n    |"}, {"sha": "e9ace85c1d91df49e69e091ac3d0b59673da312d", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -7,6 +7,11 @@ error[E0599]: no method named `b` found for type `&Self` in the current scope\n error[E0308]: mismatched types\n   --> $DIR/issue-3563.rs:13:9\n    |\n+12 |     fn a(&self) {\n+   |                 -\n+   |                 |\n+   |                 help: possibly return type missing here? `-> [closure@$DIR/issue-3563.rs:13:9: 13:20 self:_] `\n+   |                 expected `()` because of this default return type\n 13 |         || self.b()\n    |         ^^^^^^^^^^^ expected (), found closure\n    |"}, {"sha": "6fda2aa00ffb33fa74d1543ff72f0175eacef2b8", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-5500.rs:12:5\n    |\n+11 | fn main() {\n+   |           - expected `()` because of this default return type\n 12 |     &panic!()\n    |     ^^^^^^^^^ expected (), found reference\n    |"}, {"sha": "e5481ffd31669167dfc1de170b4e1875b74a41dc", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,11 +1,17 @@\n error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:19:5\n    |\n+18 | fn bar() {\n+   |          - expected `()` because of this default return type\n 19 |     foo()\n    |     ^^^^^ expected (), found usize\n    |\n    = note: expected type `()`\n               found type `usize`\n+help: did you mean to add a semicolon here?\n+   |     foo();\n+help: possibly return type missing here?\n+   | fn bar() -> usize {\n \n error: aborting due to previous error(s)\n "}, {"sha": "ca37596f1b96302ceade02da4d013748477d2584", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:25:5\n    |\n+21 | fn two(x: bool) -> impl Foo {\n+   |                    -------- expected `i32` because of this return type\n+...\n 25 |     0_u32\n    |     ^^^^^ expected i32, found u32\n    |"}, {"sha": "6282541ba0e41870a0df667e46a7fb853987d40b", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:26:5\n    |\n+25 | fn a() -> Foo {\n+   |           --- expected `Foo` because of this return type\n 26 |     Some(Foo { bar: 1 })\n    |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::option::Option`\n    |\n@@ -10,6 +12,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:30:5\n    |\n+29 | fn a2() -> Foo {\n+   |            --- expected `Foo` because of this return type\n 30 |     Ok(Foo { bar: 1})\n    |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::result::Result`\n    |\n@@ -19,6 +23,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:34:5\n    |\n+33 | fn b() -> Option<Foo> {\n+   |           ----------- expected because of this return type\n 34 |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^ expected enum `std::option::Option`, found struct `Foo`\n    |\n@@ -28,6 +34,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:38:5\n    |\n+37 | fn c() -> Result<Foo, Bar> {\n+   |           ---------------- expected because of this return type\n 38 |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^ expected enum `std::result::Result`, found struct `Foo`\n    |\n@@ -37,6 +45,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:42:5\n    |\n+41 |   fn d() -> X<X<String, String>, String> {\n+   |             ---------------------------- expected because of this return type\n 42 | /     X {\n 43 | |         x: X {\n 44 | |             x: \"\".to_string(),\n@@ -52,6 +62,8 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:52:5\n    |\n+51 |   fn e() -> X<X<String, String>, String> {\n+   |             ---------------------------- expected because of this return type\n 52 | /     X {\n 53 | |         x: X {\n 54 | |             x: \"\".to_string(),"}, {"sha": "5efa3fa6a1d5b523a9320c157b8433323afa4c7c", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -1,6 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-19109.rs:14:5\n    |\n+13 | fn function(t: &mut Trait) {\n+   |                            -\n+   |                            |\n+   |                            help: possibly return type missing here? `-> *mut Trait `\n+   |                            expected `()` because of this default return type\n 14 |     t as *mut Trait\n    |     ^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |"}, {"sha": "2a50428dbb9f9b41bdd8f983f4061f80e448b0df", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c023856b38c847731720fa8e26f3e1b9062bc946/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=c023856b38c847731720fa8e26f3e1b9062bc946", "patch": "@@ -34,8 +34,13 @@ error[E0425]: cannot find function `is_directory` in this scope\n error[E0308]: mismatched types\n   --> $DIR/token-error-correct-3.rs:25:13\n    |\n+20 |                                                                -> io::Result<bool> {\n+   |                                                                   ---------------- expected `()` because of this return type\n+...\n 25 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: did you mean to add a semicolon here? `;`\n+   |             |\n+   |             expected (), found enum `std::result::Result`\n    |\n    = note: expected type `()`\n               found type `std::result::Result<bool, std::io::Error>`"}]}