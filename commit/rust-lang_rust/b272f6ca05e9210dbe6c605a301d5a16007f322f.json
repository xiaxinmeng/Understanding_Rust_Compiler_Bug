{"sha": "b272f6ca05e9210dbe6c605a301d5a16007f322f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNzJmNmNhMDVlOTIxMGRiZTZjNjA1YTMwMWQ1YTE2MDA3ZjMyMmY=", "commit": {"author": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-08-18T19:04:45Z"}, "committer": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-08-18T19:04:45Z"}, "message": "redox: Require scheme for path to be absolute\n\nRedox paths are problematic. It would make sense to add a `Scheme`\nvariant to the `std::path::Component` enum; but that would presumably be\na breaking change due to exhaustive matching. Alternately it could use\nthe existing `Prefix` variant, like Windows, but none of the existing\ntypes of prefix make sense, Redox only has one kind, and adding a new\nvariant to that enum has the same issue as `Component`.", "tree": {"sha": "4f9fa4906dae3911496a9000de02733e3426d4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f9fa4906dae3911496a9000de02733e3426d4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b272f6ca05e9210dbe6c605a301d5a16007f322f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEECYv1aaNg4jTOK4YaSSThDhmbWVkFAlmXO1QACgkQSSThDhmb\nWVnPfggAmTeDMiuquICfqiGN3DYy0HPKfNNj0K3pSePXfrXwgBgfaqLcfqGhVyPy\nXqXU+fHRzsoTRa8Uoc9wmVqVb5FrtyQRXybxoQFtZT/+maWPBbEj+kHFyfKJtuYq\nR5JOBLzI1lgHnR4B8ipNaV6c1ZSZJ++VdHRmUAA2dF7M1qrsjyNFRzO4JF7pPwDf\nqUMb0AjX0wDfeyOTjmURKMEDmcc9BMdLz6C7W7EXfvLRbWT7I5xPmLRirSVXjBCo\nUfSESsaUKmI1g2IIcrSrB9HeDCN9733eB6mf4N7FMsrcflzd3T6qNHHaBL7dsvJr\nC522lyg3wwiMVb6WgVeGuzfVVrt2Tg==\n=G0RS\n-----END PGP SIGNATURE-----", "payload": "tree 4f9fa4906dae3911496a9000de02733e3426d4a8\nparent 230a379a452e5a2bcdfd0a956b259e0a1d83b512\nauthor Ian Douglas Scott <ian@iandouglasscott.com> 1503083085 -0700\ncommitter Ian Douglas Scott <ian@iandouglasscott.com> 1503083085 -0700\n\nredox: Require scheme for path to be absolute\n\nRedox paths are problematic. It would make sense to add a `Scheme`\nvariant to the `std::path::Component` enum; but that would presumably be\na breaking change due to exhaustive matching. Alternately it could use\nthe existing `Prefix` variant, like Windows, but none of the existing\ntypes of prefix make sense, Redox only has one kind, and adding a new\nvariant to that enum has the same issue as `Component`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b272f6ca05e9210dbe6c605a301d5a16007f322f", "html_url": "https://github.com/rust-lang/rust/commit/b272f6ca05e9210dbe6c605a301d5a16007f322f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b272f6ca05e9210dbe6c605a301d5a16007f322f/comments", "author": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230a379a452e5a2bcdfd0a956b259e0a1d83b512", "url": "https://api.github.com/repos/rust-lang/rust/commits/230a379a452e5a2bcdfd0a956b259e0a1d83b512", "html_url": "https://github.com/rust-lang/rust/commit/230a379a452e5a2bcdfd0a956b259e0a1d83b512"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "866b65ac7e4c33226718a748f5c2299c4465d01c", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b272f6ca05e9210dbe6c605a301d5a16007f322f/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b272f6ca05e9210dbe6c605a301d5a16007f322f/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=b272f6ca05e9210dbe6c605a301d5a16007f322f", "patch": "@@ -1685,8 +1685,16 @@ impl Path {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n     pub fn is_absolute(&self) -> bool {\n-        // FIXME: Remove target_os = \"redox\" and allow Redox prefixes\n-        self.has_root() && (cfg!(unix) || cfg!(target_os = \"redox\") || self.prefix().is_some())\n+        #[cfg(not(target_os = \"redox\"))]\n+        {\n+            self.has_root() && (cfg!(unix) || self.prefix().is_some())\n+        }\n+        #[cfg(target_os = \"redox\")]\n+        {\n+            // FIXME: Allow Redox prefixes\n+            use os::unix::ffi::OsStrExt;\n+            self.as_os_str().as_bytes().split(|b| *b == b'/').next().unwrap_or(b\"\").contains(&b':')\n+        }\n     }\n \n     /// Returns `true` if the `Path` is relative, i.e. not absolute."}]}