{"sha": "1484196358dc8497262fa5db1308a4d4e13510a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODQxOTYzNThkYzg0OTcyNjJmYTVkYjEzMDhhNGQ0ZTEzNTEwYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T06:27:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T06:27:07Z"}, "message": "Auto merge of #69334 - Centril:nested-item-vis-def, r=petrochenkov\n\nprint vis & defaultness for nested items\n\nFixes https://github.com/rust-lang/rust/issues/69315 which was injected by https://github.com/rust-lang/rust/pull/69194.\n\nr? @petrochenkov\ncc @alexcrichton", "tree": {"sha": "70ee2bbc5f444c8dd801f88bb9fe44a2ca9d9c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ee2bbc5f444c8dd801f88bb9fe44a2ca9d9c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1484196358dc8497262fa5db1308a4d4e13510a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1484196358dc8497262fa5db1308a4d4e13510a7", "html_url": "https://github.com/rust-lang/rust/commit/1484196358dc8497262fa5db1308a4d4e13510a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1484196358dc8497262fa5db1308a4d4e13510a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "436494b8f8008b600d64b3951f63c2bb0ea81673", "url": "https://api.github.com/repos/rust-lang/rust/commits/436494b8f8008b600d64b3951f63c2bb0ea81673", "html_url": "https://github.com/rust-lang/rust/commit/436494b8f8008b600d64b3951f63c2bb0ea81673"}, {"sha": "14442e0ebbbd040f608316aee2f10c937ae5ac4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/14442e0ebbbd040f608316aee2f10c937ae5ac4f", "html_url": "https://github.com/rust-lang/rust/commit/14442e0ebbbd040f608316aee2f10c937ae5ac4f"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "27cef8502a1d1752b1860d1d05debc6c1143e703", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=1484196358dc8497262fa5db1308a4d4e13510a7", "patch": "@@ -2,7 +2,7 @@ use crate::pp::Breaks::{Consistent, Inconsistent};\n use crate::pp::{self, Breaks};\n \n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{dummy_spanned, SourceMap, Spanned};\n+use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, FileName, Span};\n use syntax::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n@@ -1026,27 +1026,26 @@ impl<'a> State<'a> {\n         span: Span,\n         ident: ast::Ident,\n         attrs: &[Attribute],\n-        defaultness: ast::Defaultness,\n+        def: ast::Defaultness,\n         kind: &ast::AssocItemKind,\n         vis: &ast::Visibility,\n     ) {\n         self.ann.pre(self, AnnNode::SubItem(id));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n-        self.print_defaultness(defaultness);\n         match kind {\n             ast::ForeignItemKind::Fn(sig, gen, body) => {\n-                self.print_fn_full(sig, ident, gen, vis, body.as_deref(), attrs);\n+                self.print_fn_full(sig, ident, gen, vis, def, body.as_deref(), attrs);\n             }\n             ast::ForeignItemKind::Const(ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis);\n+                self.print_item_const(ident, None, ty, body.as_deref(), vis, def);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n-                self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis);\n+                self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n             }\n             ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n-                self.print_associated_type(ident, generics, bounds, ty.as_deref());\n+                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, def);\n             }\n             ast::ForeignItemKind::Macro(m) => {\n                 self.print_mac(m);\n@@ -1065,13 +1064,17 @@ impl<'a> State<'a> {\n         ty: &ast::Ty,\n         body: Option<&ast::Expr>,\n         vis: &ast::Visibility,\n+        defaultness: ast::Defaultness,\n     ) {\n+        self.head(\"\");\n+        self.print_visibility(vis);\n+        self.print_defaultness(defaultness);\n         let leading = match mutbl {\n             None => \"const\",\n             Some(ast::Mutability::Not) => \"static\",\n             Some(ast::Mutability::Mut) => \"static mut\",\n         };\n-        self.head(visibility_qualified(vis, leading));\n+        self.word_space(leading);\n         self.print_ident(ident);\n         self.word_space(\":\");\n         self.print_type(ty);\n@@ -1091,7 +1094,12 @@ impl<'a> State<'a> {\n         generics: &ast::Generics,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n+        vis: &ast::Visibility,\n+        defaultness: ast::Defaultness,\n     ) {\n+        self.head(\"\");\n+        self.print_visibility(vis);\n+        self.print_defaultness(defaultness);\n         self.word_space(\"type\");\n         self.print_ident(ident);\n         self.print_generic_params(&generics.params);\n@@ -1102,7 +1110,9 @@ impl<'a> State<'a> {\n             self.word_space(\"=\");\n             self.print_type(ty);\n         }\n-        self.s.word(\";\")\n+        self.s.word(\";\");\n+        self.end(); // end inner head-block\n+        self.end(); // end outer head-block\n     }\n \n     /// Pretty-prints an item.\n@@ -1133,13 +1143,17 @@ impl<'a> State<'a> {\n                 self.end(); // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, mutbl, ref body) => {\n-                self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis);\n+                let def = ast::Defaultness::Final;\n+                self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis, def);\n             }\n             ast::ItemKind::Const(ref ty, ref body) => {\n-                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis);\n+                let def = ast::Defaultness::Final;\n+                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, def);\n             }\n             ast::ItemKind::Fn(ref sig, ref gen, ref body) => {\n-                self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n+                let def = ast::Defaultness::Final;\n+                let body = body.as_deref();\n+                self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n             }\n             ast::ItemKind::Mod(ref _mod) => {\n                 self.head(visibility_qualified(&item.vis, \"mod\"));\n@@ -2370,13 +2384,16 @@ impl<'a> State<'a> {\n         name: ast::Ident,\n         generics: &ast::Generics,\n         vis: &ast::Visibility,\n+        defaultness: ast::Defaultness,\n         body: Option<&ast::Block>,\n         attrs: &[ast::Attribute],\n     ) {\n         if body.is_some() {\n             self.head(\"\");\n         }\n-        self.print_fn(&sig.decl, sig.header, Some(name), generics, vis);\n+        self.print_visibility(vis);\n+        self.print_defaultness(defaultness);\n+        self.print_fn(&sig.decl, sig.header, Some(name), generics);\n         if let Some(body) = body {\n             self.nbsp();\n             self.print_block_with_attrs(body, attrs);\n@@ -2391,10 +2408,8 @@ impl<'a> State<'a> {\n         header: ast::FnHeader,\n         name: Option<ast::Ident>,\n         generics: &ast::Generics,\n-        vis: &ast::Visibility,\n     ) {\n-        self.print_fn_header_info(header, vis);\n-\n+        self.print_fn_header_info(header);\n         if let Some(name) = name {\n             self.nbsp();\n             self.print_ident(name);\n@@ -2672,8 +2687,7 @@ impl<'a> State<'a> {\n             span: rustc_span::DUMMY_SP,\n         };\n         let header = ast::FnHeader { unsafety, ext, ..ast::FnHeader::default() };\n-        let vis = dummy_spanned(ast::VisibilityKind::Inherited);\n-        self.print_fn(decl, header, name, &generics, &vis);\n+        self.print_fn(decl, header, name, &generics);\n         self.end();\n     }\n \n@@ -2700,9 +2714,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_fn_header_info(&mut self, header: ast::FnHeader, vis: &ast::Visibility) {\n-        self.s.word(visibility_qualified(vis, \"\"));\n-\n+    crate fn print_fn_header_info(&mut self, header: ast::FnHeader) {\n         self.print_constness(header.constness);\n         self.print_asyncness(header.asyncness);\n         self.print_unsafety(header.unsafety);"}, {"sha": "4531c7392a9d5e6c30794818ca287b7013bb9622", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=1484196358dc8497262fa5db1308a4d4e13510a7", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n use rustc_span;\n-use rustc_span::source_map::{dummy_spanned, respan};\n+use rustc_span::source_map::respan;\n use syntax::ast;\n use syntax::with_default_globals;\n \n@@ -13,13 +13,7 @@ fn fun_to_string(\n ) -> String {\n     to_string(|s| {\n         s.head(\"\");\n-        s.print_fn(\n-            decl,\n-            header,\n-            Some(name),\n-            generics,\n-            &dummy_spanned(ast::VisibilityKind::Inherited),\n-        );\n+        s.print_fn(decl, header, Some(name), generics);\n         s.end(); // Close the head box.\n         s.end(); // Close the outer box.\n     })"}, {"sha": "0c95add490110babd0de86c8bd6d85714cf1ca0d", "filename": "src/test/pretty/gat-bounds.pp", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/436494b8f8008b600d64b3951f63c2bb0ea81673/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "raw_url": "https://github.com/rust-lang/rust/raw/436494b8f8008b600d64b3951f63c2bb0ea81673/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.pp?ref=436494b8f8008b600d64b3951f63c2bb0ea81673", "patch": "@@ -1,25 +0,0 @@\n-// Check that associated types print generic parameters and where clauses.\n-// See issue #67509.\n-\n-// pretty-compare-only\n-// pp-exact:gat-bounds.pp\n-\n-#![feature(generic_associated_types)]\n-\n-trait X {\n-    type\n-    Y<T>: Trait\n-    where\n-    Self: Sized;\n-}\n-\n-impl X for () {\n-    type\n-    Y<T>\n-    where\n-    Self: Sized\n-    =\n-    u32;\n-}\n-\n-fn main() { }"}, {"sha": "789e4bc80ace90d079cc1c59e5a4a37e420eb017", "filename": "src/test/pretty/gat-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.rs?ref=1484196358dc8497262fa5db1308a4d4e13510a7", "patch": "@@ -2,7 +2,6 @@\n // See issue #67509.\n \n // pretty-compare-only\n-// pp-exact:gat-bounds.pp\n \n #![feature(generic_associated_types)]\n "}, {"sha": "0a3f2a10c8549ab24fa354baaad7361acc9865d0", "filename": "src/test/pretty/nested-item-vis-defaultness.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1484196358dc8497262fa5db1308a4d4e13510a7/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs?ref=1484196358dc8497262fa5db1308a4d4e13510a7", "patch": "@@ -0,0 +1,47 @@\n+// Check that nested items have their visibility and `default`nesses in the right order.\n+\n+// pp-exact\n+\n+fn main() { }\n+\n+#[cfg(FALSE)]\n+extern \"C\" {\n+    static X: u8 ;\n+    type X;\n+    fn foo();\n+    pub static X: u8 ;\n+    pub type X;\n+    pub fn foo();\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    const X: u8 ;\n+    type X;\n+    fn foo();\n+    default const X: u8 ;\n+    default type X;\n+    default fn foo();\n+    pub const X: u8 ;\n+    pub type X;\n+    pub fn foo();\n+    pub default const X: u8 ;\n+    pub default type X;\n+    pub default fn foo();\n+}\n+\n+#[cfg(FALSE)]\n+impl T for S {\n+    const X: u8 ;\n+    type X;\n+    fn foo();\n+    default const X: u8 ;\n+    default type X;\n+    default fn foo();\n+    pub const X: u8 ;\n+    pub type X;\n+    pub fn foo();\n+    pub default const X: u8 ;\n+    pub default type X;\n+    pub default fn foo();\n+}"}]}