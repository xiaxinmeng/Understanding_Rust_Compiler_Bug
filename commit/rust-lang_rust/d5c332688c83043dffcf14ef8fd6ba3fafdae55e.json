{"sha": "d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YzMzMjY4OGM4MzA0M2RmZmNmMTRlZjhmZDZiYTNmYWZkYWU1NWU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T21:54:09Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcollections: use unboxed closures in `Vec` methods", "tree": {"sha": "a9ed13d325434098cdff55dd7264ff1673425429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9ed13d325434098cdff55dd7264ff1673425429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "html_url": "https://github.com/rust-lang/rust/commit/d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5c332688c83043dffcf14ef8fd6ba3fafdae55e/comments", "author": null, "committer": null, "parents": [{"sha": "0055678f7a5f49fc5df93a38cc27fea4eb6ae416", "url": "https://api.github.com/repos/rust-lang/rust/commits/0055678f7a5f49fc5df93a38cc27fea4eb6ae416", "html_url": "https://github.com/rust-lang/rust/commit/0055678f7a5f49fc5df93a38cc27fea4eb6ae416"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "2ed8686394c01d4aeebe65edb10d2a8b328ae007", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5c332688c83043dffcf14ef8fd6ba3fafdae55e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c332688c83043dffcf14ef8fd6ba3fafdae55e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d5c332688c83043dffcf14ef8fd6ba3fafdae55e", "patch": "@@ -206,7 +206,7 @@ impl<T> Vec<T> {\n     #[inline]\n     #[unstable = \"the naming is uncertain as well as this migrating to unboxed \\\n                   closures in the future\"]\n-    pub fn from_fn(length: uint, op: |uint| -> T) -> Vec<T> {\n+    pub fn from_fn<F>(length: uint, mut op: F) -> Vec<T> where F: FnMut(uint) -> T {\n         unsafe {\n             let mut xs = Vec::with_capacity(length);\n             while xs.len < length {\n@@ -289,7 +289,7 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[experimental]\n-    pub fn partition(self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n+    pub fn partition<F>(self, mut f: F) -> (Vec<T>, Vec<T>) where F: FnMut(&T) -> bool {\n         let mut lefts  = Vec::new();\n         let mut rights = Vec::new();\n \n@@ -400,7 +400,7 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(odd, vec![1i, 3]);\n     /// ```\n     #[experimental]\n-    pub fn partitioned(&self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n+    pub fn partitioned<F>(&self, mut f: F) -> (Vec<T>, Vec<T>) where F: FnMut(&T) -> bool {\n         let mut lefts = Vec::new();\n         let mut rights = Vec::new();\n \n@@ -991,7 +991,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, vec![2, 4]);\n     /// ```\n     #[unstable = \"the closure argument may become an unboxed closure\"]\n-    pub fn retain(&mut self, f: |&T| -> bool) {\n+    pub fn retain<F>(&mut self, mut f: F) where F: FnMut(&T) -> bool {\n         let len = self.len();\n         let mut del = 0u;\n         {\n@@ -1023,7 +1023,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, vec![0, 1, 0, 1, 2]);\n     /// ```\n     #[unstable = \"this function may be renamed or change to unboxed closures\"]\n-    pub fn grow_fn(&mut self, n: uint, f: |uint| -> T) {\n+    pub fn grow_fn<F>(&mut self, n: uint, mut f: F) where F: FnMut(uint) -> T {\n         self.reserve(n);\n         for i in range(0u, n) {\n             self.push(f(i));\n@@ -1570,7 +1570,7 @@ impl<T> Vec<T> {\n     /// let newtyped_bytes = bytes.map_in_place(|x| Newtype(x));\n     /// assert_eq!(newtyped_bytes.as_slice(), [Newtype(0x11), Newtype(0x22)].as_slice());\n     /// ```\n-    pub fn map_in_place<U>(self, f: |T| -> U) -> Vec<U> {\n+    pub fn map_in_place<U, F>(self, mut f: F) -> Vec<U> where F: FnMut(T) -> U {\n         // FIXME: Assert statically that the types `T` and `U` have the same\n         // size.\n         assert!(mem::size_of::<T>() == mem::size_of::<U>());"}]}