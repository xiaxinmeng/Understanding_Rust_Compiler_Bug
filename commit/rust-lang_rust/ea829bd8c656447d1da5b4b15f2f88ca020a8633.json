{"sha": "ea829bd8c656447d1da5b4b15f2f88ca020a8633", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhODI5YmQ4YzY1NjQ0N2QxZGE1YjRiMTVmMmY4OGNhMDIwYTg2MzM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-01-01T05:09:09Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-01-01T05:09:09Z"}, "message": "Fix bad `explicit_into_iter_loop` suggestion\n\nFixes #4958", "tree": {"sha": "d47879f0c7ffc44a569255a9d78c16d43489090d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47879f0c7ffc44a569255a9d78c16d43489090d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea829bd8c656447d1da5b4b15f2f88ca020a8633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea829bd8c656447d1da5b4b15f2f88ca020a8633", "html_url": "https://github.com/rust-lang/rust/commit/ea829bd8c656447d1da5b4b15f2f88ca020a8633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea829bd8c656447d1da5b4b15f2f88ca020a8633/comments", "author": null, "committer": null, "parents": [{"sha": "99dd0bb653f5ec3767b899c939468512abef0f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99dd0bb653f5ec3767b899c939468512abef0f9c", "html_url": "https://github.com/rust-lang/rust/commit/99dd0bb653f5ec3767b899c939468512abef0f9c"}], "stats": {"total": 125, "additions": 108, "deletions": 17}, "files": [{"sha": "5ce35fe89e77d82962a5fb87d6f2dab6a2ac2805", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ea829bd8c656447d1da5b4b15f2f88ca020a8633/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea829bd8c656447d1da5b4b15f2f88ca020a8633/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=ea829bd8c656447d1da5b4b15f2f88ca020a8633", "patch": "@@ -12,8 +12,7 @@ use rustc_session::declare_tool_lint;\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{is_type_diagnostic_item, qpath_res, sext, sugg};\n-use rustc::ty::subst::Subst;\n+use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -1344,20 +1343,9 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                     lint_iter_method(cx, args, arg, method_name);\n                 }\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n-                let def_id = cx.tables.type_dependent_def_id(arg.hir_id).unwrap();\n-                let substs = cx.tables.node_substs(arg.hir_id);\n-                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-\n-                let fn_arg_tys = method_type.fn_sig(cx.tcx).inputs();\n-                assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n-                if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n-                    match cx.tables.expr_ty(&args[0]).kind {\n-                        // If the length is greater than 32 no traits are implemented for array and\n-                        // therefore we cannot use `&`.\n-                        ty::Array(_, size) if size.eval_usize(cx.tcx, cx.param_env) > 32 => {},\n-                        _ => lint_iter_method(cx, args, arg, method_name),\n-                    };\n-                } else {\n+                let receiver_ty = cx.tables.expr_ty(&args[0]);\n+                let receiver_ty_adjusted = cx.tables.expr_ty_adjusted(&args[0]);\n+                if same_tys(cx, receiver_ty, receiver_ty_adjusted) {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n                     span_lint_and_sugg(\n@@ -1370,6 +1358,17 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                         object.to_string(),\n                         applicability,\n                     );\n+                } else {\n+                    let ref_receiver_ty = cx.tcx.mk_ref(\n+                        cx.tcx.lifetimes.re_erased,\n+                        ty::TypeAndMut {\n+                            ty: receiver_ty,\n+                            mutbl: Mutability::Not,\n+                        },\n+                    );\n+                    if same_tys(cx, receiver_ty_adjusted, ref_receiver_ty) {\n+                        lint_iter_method(cx, args, arg, method_name)\n+                    }\n                 }\n             } else if method_name == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n                 span_lint("}, {"sha": "6717899ed090ca3c8c75eac2def6dcfec5ee60f2", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea829bd8c656447d1da5b4b15f2f88ca020a8633/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ea829bd8c656447d1da5b4b15f2f88ca020a8633/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=ea829bd8c656447d1da5b4b15f2f88ca020a8633", "patch": "@@ -299,3 +299,40 @@ mod issue_2496 {\n         unimplemented!()\n     }\n }\n+\n+// explicit_into_iter_loop bad suggestions\n+#[warn(clippy::explicit_into_iter_loop, clippy::explicit_iter_loop)]\n+mod issue_4958 {\n+    fn takes_iterator<T>(iterator: &T)\n+    where\n+        for<'a> &'a T: IntoIterator<Item = &'a String>,\n+    {\n+        for i in iterator {\n+            println!(\"{}\", i);\n+        }\n+    }\n+\n+    struct T;\n+    impl IntoIterator for &T {\n+        type Item = ();\n+        type IntoIter = std::vec::IntoIter<Self::Item>;\n+        fn into_iter(self) -> Self::IntoIter {\n+            vec![].into_iter()\n+        }\n+    }\n+\n+    fn more_tests() {\n+        let t = T;\n+        let r = &t;\n+        let rr = &&t;\n+\n+        // This case is handled by `explicit_iter_loop`. No idea why.\n+        for _ in &t {}\n+\n+        for _ in r {}\n+\n+        // No suggestion for this.\n+        // We'd have to suggest `for _ in *rr {}` which is less clear.\n+        for _ in rr.into_iter() {}\n+    }\n+}"}, {"sha": "7c08d383420b4a96dc6651143c0a15c957cfc8ae", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea829bd8c656447d1da5b4b15f2f88ca020a8633/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea829bd8c656447d1da5b4b15f2f88ca020a8633/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=ea829bd8c656447d1da5b4b15f2f88ca020a8633", "patch": "@@ -299,3 +299,40 @@ mod issue_2496 {\n         unimplemented!()\n     }\n }\n+\n+// explicit_into_iter_loop bad suggestions\n+#[warn(clippy::explicit_into_iter_loop, clippy::explicit_iter_loop)]\n+mod issue_4958 {\n+    fn takes_iterator<T>(iterator: &T)\n+    where\n+        for<'a> &'a T: IntoIterator<Item = &'a String>,\n+    {\n+        for i in iterator.into_iter() {\n+            println!(\"{}\", i);\n+        }\n+    }\n+\n+    struct T;\n+    impl IntoIterator for &T {\n+        type Item = ();\n+        type IntoIter = std::vec::IntoIter<Self::Item>;\n+        fn into_iter(self) -> Self::IntoIter {\n+            vec![].into_iter()\n+        }\n+    }\n+\n+    fn more_tests() {\n+        let t = T;\n+        let r = &t;\n+        let rr = &&t;\n+\n+        // This case is handled by `explicit_iter_loop`. No idea why.\n+        for _ in t.into_iter() {}\n+\n+        for _ in r.into_iter() {}\n+\n+        // No suggestion for this.\n+        // We'd have to suggest `for _ in *rr {}` which is less clear.\n+        for _ in rr.into_iter() {}\n+    }\n+}"}, {"sha": "71a2334170e8e19f17d2134bca1fd1a8ebf0fa93", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea829bd8c656447d1da5b4b15f2f88ca020a8633/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea829bd8c656447d1da5b4b15f2f88ca020a8633/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=ea829bd8c656447d1da5b4b15f2f88ca020a8633", "patch": "@@ -130,5 +130,23 @@ error: it is more concise to loop over references to containers instead of using\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: aborting due to 17 previous errors\n+error: it is more concise to loop over containers instead of using explicit iteration methods`\n+  --> $DIR/for_loop_fixable.rs:310:18\n+   |\n+LL |         for i in iterator.into_iter() {\n+   |                  ^^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `iterator`\n+\n+error: it is more concise to loop over references to containers instead of using explicit iteration methods\n+  --> $DIR/for_loop_fixable.rs:330:18\n+   |\n+LL |         for _ in t.into_iter() {}\n+   |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `&t`\n+\n+error: it is more concise to loop over containers instead of using explicit iteration methods`\n+  --> $DIR/for_loop_fixable.rs:332:18\n+   |\n+LL |         for _ in r.into_iter() {}\n+   |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `r`\n+\n+error: aborting due to 20 previous errors\n "}]}