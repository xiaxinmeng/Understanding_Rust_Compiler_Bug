{"sha": "2c15b3c08cbd5d0932b47b1a2361470562113384", "node_id": "C_kwDOAAsO6NoAKDJjMTViM2MwOGNiZDVkMDkzMmI0N2IxYTIzNjE0NzA1NjIxMTMzODQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-07T18:12:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-07T22:54:49Z"}, "message": "less unsupported errors in Miri, and clarifying comments", "tree": {"sha": "89aec67e5e86883d13e16f5d7813482c14973d32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89aec67e5e86883d13e16f5d7813482c14973d32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c15b3c08cbd5d0932b47b1a2361470562113384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c15b3c08cbd5d0932b47b1a2361470562113384", "html_url": "https://github.com/rust-lang/rust/commit/2c15b3c08cbd5d0932b47b1a2361470562113384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c15b3c08cbd5d0932b47b1a2361470562113384/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec", "html_url": "https://github.com/rust-lang/rust/commit/ccc6ffb03dcfeba1d3a91aa24a2cb094350605ec"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5a1498e90312a1e25a2a7cccd019582e40b7678f", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/provenance_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c15b3c08cbd5d0932b47b1a2361470562113384/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15b3c08cbd5d0932b47b1a2361470562113384/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs?ref=2c15b3c08cbd5d0932b47b1a2361470562113384", "patch": "@@ -16,7 +16,8 @@ pub struct ProvenanceMap<Prov = AllocId> {\n     /// bytes. Two entires in this map are always at least a pointer size apart.\n     ptrs: SortedMap<Size, Prov>,\n     /// Provenance in this map only applies to the given single byte.\n-    /// This map is disjoint from the previous.\n+    /// This map is disjoint from the previous. It will always be empty when\n+    /// `Prov::OFFSET_IS_ADDR` is false.\n     bytes: SortedMap<Size, Prov>,\n }\n \n@@ -39,7 +40,7 @@ impl ProvenanceMap {\n     /// Only exposed with `AllocId` provenance, since it panics if there is bytewise provenance.\n     #[inline]\n     pub fn ptrs(&self) -> &SortedMap<Size, AllocId> {\n-        debug_assert!(self.bytes.is_empty());\n+        debug_assert!(self.bytes.is_empty()); // `AllocId::OFFSET_IS_ADDR` is false so this cannot fail\n         &self.ptrs\n     }\n }"}, {"sha": "1ea8baa3cae3c95319309b2d31437b3bb4242a2f", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c15b3c08cbd5d0932b47b1a2361470562113384/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15b3c08cbd5d0932b47b1a2361470562113384/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=2c15b3c08cbd5d0932b47b1a2361470562113384", "patch": "@@ -401,16 +401,15 @@ impl fmt::Display for UndefinedBehaviorInfo {\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-    /// Overwriting parts of a pointer; the resulting state cannot be represented in our\n-    /// `Allocation` data structure. See <https://github.com/rust-lang/miri/issues/2181>.\n-    PartialPointerOverwrite(Pointer<AllocId>),\n-    /// Attempting to `copy` parts of a pointer to somewhere else; the resulting state cannot be\n-    /// represented in our `Allocation` data structure. See\n-    /// <https://github.com/rust-lang/miri/issues/2181>.\n-    PartialPointerCopy(Pointer<AllocId>),\n     //\n     // The variants below are only reachable from CTFE/const prop, miri will never emit them.\n     //\n+    /// Overwriting parts of a pointer; without knowing absolute addresses, the resulting state\n+    /// cannot be represented by the CTFE interpreter.\n+    PartialPointerOverwrite(Pointer<AllocId>),\n+    /// Attempting to `copy` parts of a pointer to somewhere else; without knowing absolute\n+    /// addresses, the resulting state cannot be represented by the CTFE interpreter.\n+    PartialPointerCopy(Pointer<AllocId>),\n     /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n     /// Accessing thread local statics"}, {"sha": "0cfa3812e400de351e96b8d07d1fb8c9e3f39bce", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c15b3c08cbd5d0932b47b1a2361470562113384/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15b3c08cbd5d0932b47b1a2361470562113384/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=2c15b3c08cbd5d0932b47b1a2361470562113384", "patch": "@@ -229,13 +229,13 @@ pub fn report_error<'tcx, 'mir>(\n                 Unsupported(\n                     UnsupportedOpInfo::ThreadLocalStatic(_) |\n                     UnsupportedOpInfo::ReadExternStatic(_) |\n-                    UnsupportedOpInfo::PartialPointerOverwrite(_) | // we make memory uninit instead\n+                    UnsupportedOpInfo::PartialPointerOverwrite(_) |\n+                    UnsupportedOpInfo::PartialPointerCopy(_) |\n                     UnsupportedOpInfo::ReadPointerAsBytes\n                 ) =>\n                     panic!(\"Error should never be raised by Miri: {kind:?}\", kind = e.kind()),\n                 Unsupported(\n-                    UnsupportedOpInfo::Unsupported(_) |\n-                    UnsupportedOpInfo::PartialPointerCopy(_)\n+                    UnsupportedOpInfo::Unsupported(_)\n                 ) =>\n                     vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n                 UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })"}]}