{"sha": "91576afc7e64f11dde2bed14b578e4914d253a6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTc2YWZjN2U2NGYxMWRkZTJiZWQxNGI1NzhlNDkxNGQyNTNhNmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T21:52:27Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T21:52:27Z"}, "message": "Merge #995\n\n995: Install and run `cargo watch` if user agrees r=matklad a=Xanewok\n\nThis isn't a glorious patch but hopefully is useful :+1: This introduces a default background `cargo watch` task and (separately from that) asks the user on every startup if they want to run `cargo watch` (installs it if it's not available).\r\n\r\nr? @matklad does it fit the what you've been thinking about?\n\nCo-authored-by: Igor Matuszewski <xanewok@gmail.com>", "tree": {"sha": "1a3b26b40881e2b1d1e87992090a79c0b40b09d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3b26b40881e2b1d1e87992090a79c0b40b09d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91576afc7e64f11dde2bed14b578e4914d253a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91576afc7e64f11dde2bed14b578e4914d253a6a", "html_url": "https://github.com/rust-lang/rust/commit/91576afc7e64f11dde2bed14b578e4914d253a6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91576afc7e64f11dde2bed14b578e4914d253a6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7fc35d391c76aed4defc8600e75215845afa66b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc35d391c76aed4defc8600e75215845afa66b7", "html_url": "https://github.com/rust-lang/rust/commit/7fc35d391c76aed4defc8600e75215845afa66b7"}, {"sha": "34b428cc5e4b37ecd44063547f73fd1b05bf2b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b428cc5e4b37ecd44063547f73fd1b05bf2b9e", "html_url": "https://github.com/rust-lang/rust/commit/34b428cc5e4b37ecd44063547f73fd1b05bf2b9e"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "3e8cde3880864b86dc2d0446a3a57a1d153b8e88", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=91576afc7e64f11dde2bed14b578e4914d253a6a", "patch": "@@ -168,6 +168,11 @@\n                     \"default\": \"ra_lsp_server\",\n                     \"description\": \"Path to ra_lsp_server executable\"\n                 },\n+                \"rust-analyzer.enableCargoWatchOnStartup\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": \"true\",\n+                    \"description\": \"When enabled, ask the user whether to run `cargo watch` on startup\"\n+                },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n                     \"scope\": \"window\","}, {"sha": "ea2883ad4c4002961a71370f5e95b8f4d5c701ce", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=91576afc7e64f11dde2bed14b578e4914d253a6a", "patch": "@@ -1,5 +1,8 @@\n+import * as child_process from 'child_process';\n+import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+\n import { Server } from '../server';\n \n interface RunnablesParams {\n@@ -8,7 +11,6 @@ interface RunnablesParams {\n }\n \n interface Runnable {\n-    range: lc.Range;\n     label: string;\n     bin: string;\n     args: string[];\n@@ -38,7 +40,7 @@ function createTask(spec: Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',\n-        label: 'cargo',\n+        label: spec.label,\n         command: spec.bin,\n         args: spec.args,\n         env: spec.env\n@@ -124,3 +126,88 @@ export async function handleSingle(runnable: Runnable) {\n \n     return vscode.tasks.executeTask(task);\n }\n+\n+export const autoCargoWatchTask: vscode.Task = {\n+    name: 'cargo watch',\n+    source: 'rust-analyzer',\n+    definition: {\n+        type: 'watch'\n+    },\n+    execution: new vscode.ShellExecution('cargo', ['watch'], { cwd: '.' }),\n+\n+    isBackground: true,\n+    problemMatchers: ['$rustc-watch'],\n+    presentationOptions: {\n+        clear: true\n+    },\n+    // Not yet exposed in the vscode.d.ts\n+    // https://github.com/Microsoft/vscode/blob/ea7c31d770e04b51d586b0d3944f3a7feb03afb9/src/vs/workbench/contrib/tasks/common/tasks.ts#L444-L456\n+    runOptions: ({\n+        runOn: 2 // RunOnOptions.folderOpen\n+    } as unknown) as vscode.RunOptions\n+};\n+\n+/**\n+ * Interactively asks the user whether we should run `cargo check` in order to\n+ * provide inline diagnostics; the user is met with a series of dialog boxes\n+ * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n+ */\n+export async function interactivelyStartCargoWatch() {\n+    if (!Server.config.enableCargoWatchOnStartup) {\n+        return;\n+    }\n+\n+    const execPromise = util.promisify(child_process.exec);\n+\n+    const watch = await vscode.window.showInformationMessage(\n+        'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n+        'yes',\n+        'no'\n+    );\n+    if (watch === 'no') {\n+        return;\n+    }\n+\n+    const { stderr } = await execPromise('cargo watch --version').catch(e => e);\n+    if (stderr.includes('no such subcommand: `watch`')) {\n+        const msg =\n+            'The `cargo-watch` subcommand is not installed. Install? (takes ~1-2 minutes)';\n+        const install = await vscode.window.showInformationMessage(\n+            msg,\n+            'yes',\n+            'no'\n+        );\n+        if (install === 'no') {\n+            return;\n+        }\n+\n+        const label = 'install-cargo-watch';\n+        const taskFinished = new Promise((resolve, reject) => {\n+            const disposable = vscode.tasks.onDidEndTask(({ execution }) => {\n+                if (execution.task.name === label) {\n+                    disposable.dispose();\n+                    resolve();\n+                }\n+            });\n+        });\n+\n+        vscode.tasks.executeTask(\n+            createTask({\n+                label,\n+                bin: 'cargo',\n+                args: ['install', 'cargo-watch'],\n+                env: {}\n+            })\n+        );\n+        await taskFinished;\n+        const output = await execPromise('cargo watch --version').catch(e => e);\n+        if (output.stderr !== '') {\n+            vscode.window.showErrorMessage(\n+                `Couldn't install \\`cargo-\\`watch: ${output.stderr}`\n+            );\n+            return;\n+        }\n+    }\n+\n+    vscode.tasks.executeTask(autoCargoWatchTask);\n+}"}, {"sha": "d8795f3b0f857a1fb471b9152a1c6c69530c3816", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=91576afc7e64f11dde2bed14b578e4914d253a6a", "patch": "@@ -9,6 +9,7 @@ export class Config {\n     public enableEnhancedTyping = true;\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     public showWorkspaceLoadedNotification = true;\n+    public enableCargoWatchOnStartup = true;\n \n     private prevEnhancedTyping: null | boolean = null;\n \n@@ -68,5 +69,12 @@ export class Config {\n             this.raLspServerPath =\n                 RA_LSP_DEBUG || (config.get('raLspServerPath') as string);\n         }\n+\n+        if (config.has('enableCargoWatchOnStartup')) {\n+            this.enableCargoWatchOnStartup = config.get<boolean>(\n+                'enableCargoWatchOnStartup',\n+                true\n+            );\n+        }\n     }\n }"}, {"sha": "2e13c87de16d079625b579a75f146585a7564958", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91576afc7e64f11dde2bed14b578e4914d253a6a/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=91576afc7e64f11dde2bed14b578e4914d253a6a", "patch": "@@ -2,6 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n+import { interactivelyStartCargoWatch } from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -119,6 +120,9 @@ export function activate(context: vscode.ExtensionContext) {\n         context.subscriptions\n     );\n \n+    // Executing `cargo watch` provides us with inline diagnostics on save\n+    interactivelyStartCargoWatch();\n+\n     // Start the language server, finally!\n     Server.start(allNotifications);\n }"}]}