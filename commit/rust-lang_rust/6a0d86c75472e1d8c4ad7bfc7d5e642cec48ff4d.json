{"sha": "6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMGQ4NmM3NTQ3MmUxZDhjNGFkN2JmYzdkNWU2NDJjZWM0OGZmNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T22:45:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:13:22Z"}, "message": "copy over x86-specific code", "tree": {"sha": "51e53ad770e685e4816de05ec0107dfd98861b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e53ad770e685e4816de05ec0107dfd98861b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "html_url": "https://github.com/rust-lang/rust/commit/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3bddcd8753d14a3f299c4f28f932570f2276b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3bddcd8753d14a3f299c4f28f932570f2276b1", "html_url": "https://github.com/rust-lang/rust/commit/5b3bddcd8753d14a3f299c4f28f932570f2276b1"}], "stats": {"total": 233, "additions": 233, "deletions": 0}, "files": [{"sha": "561a250cedb4df9b98ce88c05f87abf583fffd46", "filename": "src/rt/arch/x64/_context.S", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2F_context.S?ref=6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "patch": "@@ -0,0 +1,76 @@\n+\t.text\n+\n+/*\n+Callee save registers:\n+\tebp, ebx, esi, edi\n+\n+Caller save registers:\n+\teax, ecx, edx\n+*/\n+\t\n+/*\n+        Stores current registers into arg0/RCX and restores\n+        registers found in arg1/RDX. This is used by our\n+\t    implementation of getcontext.\n+*/\t\n+\n+// swap_registers(registers_t *oregs, registers_t *regs)\n+.globl swap_registers\n+swap_registers:\n+    // save the old context\n+    movl 4(%esp), %eax\n+\t//movl %eax, 0(%eax)\n+\tmovl %ebx, 4(%eax)\n+\tmovl %ecx, 8(%eax)\n+\tmovl %edx, 12(%eax)\n+\tmovl %ebp, 16(%eax)\n+\tmovl %esi, 20(%eax)\n+\tmovl %edi, 24(%eax)\n+\t//movl %cs, 32(%eax)\n+\t//movl %ds, 34(%eax)\n+\t//movl %ss, 36(%eax)\n+\t//movl %es, 38(%eax)\n+\t//movl %fs, 40(%eax)\n+\t//movl %gs, 42(%eax)\n+\n+\t// save the flags\n+\tpushf\n+\tpopl %ecx\n+\tmovl %ecx, 44(%eax)\n+\n+\t// save the return address as the instruction pointer\n+    // and save the stack pointer of the caller\n+    popl %ecx\n+    movl %esp, 28(%eax)\n+\tmovl %ecx, 48(%eax)\n+\n+    // restore the new context\n+    movl 4(%esp), %eax\n+\n+\tmovl 4(%eax), %ebx\n+\t// save ecx for later...\n+\tmovl 12(%eax), %edx\n+\tmovl 16(%eax), %ebp\n+\tmovl 20(%eax), %esi\n+\tmovl 24(%eax), %edi\n+\tmovl 28(%eax), %esp\n+\t// We can't actually change this...\n+\t//movl 32(%eax), %cs\n+\t//movl 34(%eax), %ds\n+\t//movl 36(%eax), %ss\n+\t//movl 38(%eax), %es\n+\t//movl 40(%eax), %fs\n+\t//movl 42(%eax), %gs\n+\n+\t// restore the flags\n+\tmovl 44(%eax), %ecx\n+\tpush %ecx\n+\tpopf\n+\n+    // ok, now we can restore ecx\n+    movl 8(%eax), %ecx\n+\t\n+    // Return!\n+    jmp *48(%eax)\n+\n+"}, {"sha": "44d0c2177360623863afdf82325e40536d820da8", "filename": "src/rt/arch/x64/ccall.S", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2Fccall.S?ref=6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "patch": "@@ -0,0 +1,22 @@\n+    .text\n+\n+// upcall_call_c_stack(void (*fn)(), void *new_esp)\n+//\n+// Note that we could use |enter| and |leave| but the manuals tell me they're\n+// slower.\n+#if defined(__APPLE__) || defined(_WIN32)\n+.globl _upcall_call_c_stack\n+_upcall_call_c_stack:\n+#else\n+.globl upcall_call_c_stack\n+upcall_call_c_stack:\n+#endif\n+    pushl %ebp\n+    movl %esp,%ebp          // save esp\n+    movl 8(%esp),%eax       // eax = callee\n+    movl 12(%esp),%esp      // switch stack\n+    calll *%eax\n+    movl %ebp,%esp          // would like to use \"leave\" but it's slower\n+    popl %ebp\n+    ret\n+"}, {"sha": "f5fa3777eec390c9f093106dbc9401858bf374ed", "filename": "src/rt/arch/x64/context.cpp", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2Fcontext.cpp?ref=6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "patch": "@@ -0,0 +1,73 @@\n+#include \"context.h\"\n+\n+#include \"../../rust.h\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+extern \"C\" uint32_t CDECL swap_registers(registers_t *oregs,\n+                                         registers_t *regs)\n+  asm (\"swap_registers\");\n+\n+context::context()\n+{\n+    assert((void*)&regs == (void*)this);\n+}\n+\n+void context::swap(context &out)\n+{\n+  swap_registers(&out.regs, &regs);\n+}\n+\n+void context::call(void *f, void *arg, void *stack) {\n+  // Get the current context, which we will then modify to call the\n+  // given function.\n+  swap(*this);\n+\n+  // set up the trampoline frame\n+  uint32_t *sp = (uint32_t *)stack;\n+\n+  // Shift the stack pointer so the alignment works out right.\n+  sp = align_down(sp) - 3;\n+  *--sp = (uint32_t)arg;\n+  *--sp = 0xdeadbeef;\n+\n+  regs.esp = (uint32_t)sp;\n+  regs.eip = (uint32_t)f;\n+}\n+\n+#if 0\n+// This is some useful code to check how the registers struct got\n+// layed out in memory.\n+int main() {\n+  registers_t regs;\n+\n+  printf(\"Register offsets\\n\");\n+\n+#define REG(r) \\\n+  printf(\"  %6s: +%ld\\n\", #r, (intptr_t)&regs.r - (intptr_t)&regs);\n+\n+  REG(eax);\n+  REG(ebx);\n+  REG(ecx);\n+  REG(edx);\n+  REG(ebp);\n+  REG(esi);\n+  REG(edi);\n+  REG(esp);\n+\n+  REG(cs);\n+  REG(ds);\n+  REG(ss);\n+  REG(es);\n+  REG(fs);\n+  REG(gs);\n+\n+  REG(eflags);\n+\n+  REG(eip);\n+\n+  return 0;\n+}\n+#endif"}, {"sha": "131a994ba451b9f418de15300cee13d3197c63fd", "filename": "src/rt/arch/x64/context.h", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d/src%2Frt%2Farch%2Fx64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2Fcontext.h?ref=6a0d86c75472e1d8c4ad7bfc7d5e642cec48ff4d", "patch": "@@ -0,0 +1,62 @@\n+// -*- mode: c++ -*-\n+\n+#ifndef CONTEXT_H\n+#define CONTEXT_H\n+\n+#include <cstdlib>\n+#include <inttypes.h>\n+#include <stdint.h>\n+\n+#ifdef HAVE_VALGRIND\n+#include <valgrind/memcheck.h>\n+#endif\n+\n+template<typename T>\n+T align_down(T sp)\n+{\n+    // There is no platform we care about that needs more than a\n+    // 16-byte alignment.\n+    return (T)((uint32_t)sp & ~(16 - 1));\n+}\n+\n+struct registers_t {\n+  // general purpose registers\n+  uint32_t eax, ebx, ecx, edx, ebp, esi, edi, esp;\n+\n+  // segment registers\n+  uint16_t cs, ds, ss, es, fs, gs;\n+\n+  uint32_t eflags;\n+\n+  uint32_t eip;\n+};\n+\n+class context {\n+public:\n+  registers_t regs;\n+\n+  context();\n+\n+  context *next;\n+\n+  void swap(context &out);\n+  void call(void *f, void *arg, void *sp);\n+  void call(void *f, void *sp);\n+\n+  // Note that this doesn't actually adjust esp. Instead, we adjust esp when\n+  // we actually do the call. This is needed for exception safety -- if the\n+  // function being called causes the task to fail, then we have to avoid\n+  // leaking space on the C stack.\n+  inline void *alloc_stack(size_t nbytes) {\n+    uint32_t bot = regs.esp;\n+    uint32_t top = align_down(bot - nbytes);\n+\n+#ifdef HAVE_VALGRIND\n+    (void)VALGRIND_MAKE_MEM_UNDEFINED(top - 4, bot - top + 4);\n+#endif\n+\n+    return reinterpret_cast<void *>(top);\n+  }\n+};\n+\n+#endif"}]}