{"sha": "46bf6ad416cf922c410fed11e9f73c03c0015bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YmY2YWQ0MTZjZjkyMmM0MTBmZWQxMWU5ZjczYzAzYzAwMTViY2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T07:55:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-01T07:55:39Z"}, "message": "Rollup merge of #64937 - estebank:dedup-closure-err, r=Centril\n\nDeduplicate closure type errors\n\nClosure typing obligations flow in both direcitons to properly infer\ntypes. Because of this, we will get 2 type errors whenever there's\nan unfulfilled obligation. To avoid this, we deduplicate them in the\n`InferCtxt`.", "tree": {"sha": "6dbfa88da0422f72926f0352a968d79bf84e8464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbfa88da0422f72926f0352a968d79bf84e8464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46bf6ad416cf922c410fed11e9f73c03c0015bcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkwZ8CRBK7hj4Ov3rIwAAdHIIAF8CdTFRZOlleb4Rx2GUt38Z\nzcUwOBJyv+0P2QGcFf8Enj2qrpaRkSylPpKS4nPYTRc6x8n7onga4OCUG1sliju+\nNw+p+5IS9GzyqJ4520V7RseocIQxBZP/+CKQykUJeP9f4isDUxvIRztVYxB/hfKO\n9lRc4yp0bJ8cNvqc9BCOLWieFA77jAgbmNWvZw2E2v6n6SpO6ZmSzSnxtW7SYW8B\nSH6DWaIRzeKTN1B3JJQDgKU/fu3sSKHpyyDqiqyrQtwsnTPH/dyNoUKmmcSvsLjl\nt0ZuURsLCcFPx4vIm1E992iEKltyDIfZDfjBFf72kvGmV47HisPi5yFWJQP9Vg4=\n=6+aD\n-----END PGP SIGNATURE-----\n", "payload": "tree 6dbfa88da0422f72926f0352a968d79bf84e8464\nparent 5c6a8ee9ddb48b6f997dff12f625e72b9421ec40\nparent 13e9b3deb43b228264c6ae6ccf8fb3126790ee80\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569916539 +0200\ncommitter GitHub <noreply@github.com> 1569916539 +0200\n\nRollup merge of #64937 - estebank:dedup-closure-err, r=Centril\n\nDeduplicate closure type errors\n\nClosure typing obligations flow in both direcitons to properly infer\ntypes. Because of this, we will get 2 type errors whenever there's\nan unfulfilled obligation. To avoid this, we deduplicate them in the\n`InferCtxt`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46bf6ad416cf922c410fed11e9f73c03c0015bcd", "html_url": "https://github.com/rust-lang/rust/commit/46bf6ad416cf922c410fed11e9f73c03c0015bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46bf6ad416cf922c410fed11e9f73c03c0015bcd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c6a8ee9ddb48b6f997dff12f625e72b9421ec40", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6a8ee9ddb48b6f997dff12f625e72b9421ec40", "html_url": "https://github.com/rust-lang/rust/commit/5c6a8ee9ddb48b6f997dff12f625e72b9421ec40"}, {"sha": "13e9b3deb43b228264c6ae6ccf8fb3126790ee80", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e9b3deb43b228264c6ae6ccf8fb3126790ee80", "html_url": "https://github.com/rust-lang/rust/commit/13e9b3deb43b228264c6ae6ccf8fb3126790ee80"}], "stats": {"total": 176, "additions": 23, "deletions": 153}, "files": [{"sha": "b06b63455ba4bc7aa295a41654fda4cb1258ff0a", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=46bf6ad416cf922c410fed11e9f73c03c0015bcd", "patch": "@@ -23,7 +23,7 @@ use crate::ty::relate::RelateResult;\n use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, InferConst};\n use crate::ty::{FloatVid, IntVid, TyVid, ConstVid};\n-use crate::util::nodemap::FxHashMap;\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use errors::DiagnosticBuilder;\n use rustc_data_structures::sync::Lrc;\n@@ -155,6 +155,8 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// avoid reporting the same error twice.\n     pub reported_trait_errors: RefCell<FxHashMap<Span, Vec<ty::Predicate<'tcx>>>>,\n \n+    pub reported_closure_mismatch: RefCell<FxHashSet<(Span, Option<Span>)>>,\n+\n     /// When an error occurs, we want to avoid reporting \"derived\"\n     /// errors that are due to this original failure. Normally, we\n     /// handle this with the `err_count_on_creation` count, which\n@@ -538,6 +540,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n                 selection_cache: Default::default(),\n                 evaluation_cache: Default::default(),\n                 reported_trait_errors: Default::default(),\n+                reported_closure_mismatch: Default::default(),\n                 tainted_by_errors_flag: Cell::new(false),\n                 err_count_on_creation: tcx.sess.err_count(),\n                 in_snapshot: Cell::new(false),"}, {"sha": "a1c97d6c68790017ed11e70740364f402f52d42a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=46bf6ad416cf922c410fed11e9f73c03c0015bcd", "patch": "@@ -886,6 +886,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.tcx.hir().span_if_local(did)\n                 ).map(|sp| self.tcx.sess.source_map().def_span(sp)); // the sp could be an fn def\n \n+                if self.reported_closure_mismatch.borrow().contains(&(span, found_span)) {\n+                    // We check closures twice, with obligations flowing in different directions,\n+                    // but we want to complain about them only once.\n+                    return;\n+                }\n+\n+                self.reported_closure_mismatch.borrow_mut().insert((span, found_span));\n+\n                 let found = match found_trait_ref.skip_binder().substs.type_at(1).kind {\n                     ty::Tuple(ref tys) => vec![ArgKind::empty(); tys.len()],\n                     _ => vec![ArgKind::empty()],"}, {"sha": "898fe22fa234fc806b5aae7a73801bba9e56a62e", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs?ref=46bf6ad416cf922c410fed11e9f73c03c0015bcd", "patch": "@@ -1,26 +1,15 @@\n fn main() {\n     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n }\n \n // Basic"}, {"sha": "9be44c7f44807a8203b2affbe9c9ab1045e0afe2", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 131, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=46bf6ad416cf922c410fed11e9f73c03c0015bcd", "patch": "@@ -10,18 +10,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    |    --                   ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n-   |\n-LL |     f1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), &()) -> _`\n-...\n-LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   |    --                   ------------ required by this bound in `f1`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n    |\n LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -34,17 +23,6 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n-LL |     f2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&'a (), &()) -> _`\n-...\n-LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   |    --                           --------------- required by this bound in `f2`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n-   |\n LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n@@ -54,18 +32,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    |    --                       --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n-   |\n-LL |     f3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), &()) -> _`\n-...\n-LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   |    --                       --------------- required by this bound in `f3`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n    |\n LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -76,18 +43,7 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |    --                   ----------------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n-   |\n-LL |     f4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), &'r ()) -> _`\n-...\n-LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   |    --                           --------------- required by this bound in `f4`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -98,18 +54,7 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |    --                   -------------------------- required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n-   |\n-LL |     f5(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&'r (), &'r ()) -> _`\n-...\n-LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   |    --                           ------------------ required by this bound in `f5`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -120,18 +65,7 @@ LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |    --                   ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n-   |\n-LL |     g1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n-...\n-LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   |    --                   ------------------------- required by this bound in `g1`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -142,18 +76,7 @@ LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    |    --                   ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n-   |\n-LL |     g2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n-...\n-LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   |    --                   ---------------- required by this bound in `g2`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -164,18 +87,7 @@ LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |    --                   ------------------------------------ required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n-   |\n-LL |     g3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n-...\n-LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   |    --                           ---------------------------- required by this bound in `g3`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n@@ -186,18 +98,7 @@ LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    |    --                   --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n-   |\n-LL |     g4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n-...\n-LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   |    --                   --------------------------- required by this bound in `g4`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n    |\n LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n@@ -208,18 +109,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n    |    --                   -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n-   |\n-LL |     h1(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n-...\n-LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   |    --                   -------------------------------------------- required by this bound in `h1`\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n@@ -229,16 +119,5 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n    |    --                   --------------------------------------------------------- required by this bound in `h2`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n-   |\n-LL |     h2(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n-   |     |\n-   |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n-...\n-LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   |    --                            ------------------------------------------------ required by this bound in `h2`\n-\n-error: aborting due to 22 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "9035e3380b0c519e0e895474e9f1ba551189318d", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=46bf6ad416cf922c410fed11e9f73c03c0015bcd", "patch": "@@ -7,5 +7,4 @@ fn main() {\n     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n     //~^ ERROR no method named `count`\n     //~| ERROR type mismatch in closure arguments\n-    //~| ERROR type mismatch in closure arguments\n }"}, {"sha": "72f3220cc1abaaf4ca3ef1fc7a5d0dee75d29bf2", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46bf6ad416cf922c410fed11e9f73c03c0015bcd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=46bf6ad416cf922c410fed11e9f73c03c0015bcd", "patch": "@@ -16,14 +16,6 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                |\n    |                                expected signature of `for<'r> fn(&'r &str) -> _`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-36053-2.rs:7:32\n-   |\n-LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`\n-   |                                |\n-   |                                expected signature of `fn(&&str) -> _`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}