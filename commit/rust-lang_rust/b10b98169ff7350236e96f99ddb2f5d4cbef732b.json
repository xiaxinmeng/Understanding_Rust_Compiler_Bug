{"sha": "b10b98169ff7350236e96f99ddb2f5d4cbef732b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMGI5ODE2OWZmNzM1MDIzNmU5NmY5OWRkYjJmNWQ0Y2JlZjczMmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-14T16:00:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-17T18:44:22Z"}, "message": "hash the contents of impl-item-ref by adding them to visitor\n\nAlso simplify some of the `ty::AssociatedItem` representation,\nin particular by folding `has_value` into `hir::Defaultness`", "tree": {"sha": "3c8595d45c5552932e03c0b9c9b6bc02dd77d723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c8595d45c5552932e03c0b9c9b6bc02dd77d723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b10b98169ff7350236e96f99ddb2f5d4cbef732b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b10b98169ff7350236e96f99ddb2f5d4cbef732b", "html_url": "https://github.com/rust-lang/rust/commit/b10b98169ff7350236e96f99ddb2f5d4cbef732b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b10b98169ff7350236e96f99ddb2f5d4cbef732b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17be9ea110a1158e6a1ad131941ec6965ce6ac9", "html_url": "https://github.com/rust-lang/rust/commit/c17be9ea110a1158e6a1ad131941ec6965ce6ac9"}], "stats": {"total": 289, "additions": 234, "deletions": 55}, "files": [{"sha": "4cfa889ec561676f7e1156bd7c55cb4afd51827a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -267,6 +267,12 @@ pub trait Visitor<'v> : Sized {\n     fn visit_vis(&mut self, vis: &'v Visibility) {\n         walk_vis(self, vis)\n     }\n+    fn visit_associated_item_kind(&mut self, kind: &'v AssociatedItemKind) {\n+        walk_associated_item_kind(self, kind);\n+    }\n+    fn visit_defaultness(&mut self, defaultness: &'v Defaultness) {\n+        walk_defaultness(self, defaultness);\n+    }\n }\n \n pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) {\n@@ -740,10 +746,14 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n }\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n-    visitor.visit_vis(&impl_item.vis);\n-    visitor.visit_name(impl_item.span, impl_item.name);\n-    walk_list!(visitor, visit_attribute, &impl_item.attrs);\n-    match impl_item.node {\n+    // NB: Deliberately force a compilation error if/when new fields are added.\n+    let ImplItem { id: _, name, ref vis, ref defaultness, ref attrs, ref node, span } = *impl_item;\n+\n+    visitor.visit_name(span, name);\n+    visitor.visit_vis(vis);\n+    visitor.visit_defaultness(defaultness);\n+    walk_list!(visitor, visit_attribute, attrs);\n+    match *node {\n         ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_id(impl_item.id);\n             visitor.visit_ty(ty);\n@@ -767,8 +777,13 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n }\n \n pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef) {\n-    visitor.visit_nested_impl_item(impl_item_ref.id);\n-    visitor.visit_name(impl_item_ref.span, impl_item_ref.name);\n+    // NB: Deliberately force a compilation error if/when new fields are added.\n+    let ImplItemRef { id, name, ref kind, span, ref vis, ref defaultness } = *impl_item_ref;\n+    visitor.visit_nested_impl_item(id);\n+    visitor.visit_name(span, name);\n+    visitor.visit_associated_item_kind(kind);\n+    visitor.visit_vis(vis);\n+    visitor.visit_defaultness(defaultness);\n }\n \n \n@@ -941,6 +956,18 @@ pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n     }\n }\n \n+pub fn walk_associated_item_kind<'v, V: Visitor<'v>>(_: &mut V, _: &'v AssociatedItemKind) {\n+    // No visitable content here: this fn exists so you can call it if\n+    // the right thing to do, should content be added in the future,\n+    // would be to walk it.\n+}\n+\n+pub fn walk_defaultness<'v, V: Visitor<'v>>(_: &mut V, _: &'v Defaultness) {\n+    // No visitable content here: this fn exists so you can call it if\n+    // the right thing to do, should content be added in the future,\n+    // would be to walk it.\n+}\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq)]\n pub struct IdRange {\n     pub min: NodeId,"}, {"sha": "05c4ae521803aa36f1425fff099ed21c2ce8193f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -699,7 +699,7 @@ impl<'a> LoweringContext<'a> {\n                 name: i.ident.name,\n                 attrs: this.lower_attrs(&i.attrs),\n                 vis: this.lower_visibility(&i.vis),\n-                defaultness: this.lower_defaultness(i.defaultness),\n+                defaultness: this.lower_defaultness(i.defaultness, true /* [1] */),\n                 node: match i.node {\n                     ImplItemKind::Const(ref ty, ref expr) => {\n                         hir::ImplItemKind::Const(this.lower_ty(ty), this.lower_expr(expr))\n@@ -715,6 +715,8 @@ impl<'a> LoweringContext<'a> {\n                 span: i.span,\n             }\n         })\n+\n+        // [1] since `default impl` is not yet implemented, this is always true in impls\n     }\n \n     fn lower_impl_item_ref(&mut self, i: &ImplItem) -> hir::ImplItemRef {\n@@ -723,7 +725,7 @@ impl<'a> LoweringContext<'a> {\n             name: i.ident.name,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis),\n-            defaultness: self.lower_defaultness(i.defaultness),\n+            defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match i.node {\n                 ImplItemKind::Const(..) => hir::AssociatedItemKind::Const,\n                 ImplItemKind::Type(..) => hir::AssociatedItemKind::Type,\n@@ -732,9 +734,9 @@ impl<'a> LoweringContext<'a> {\n                 },\n                 ImplItemKind::Macro(..) => unimplemented!(),\n             },\n-            // since `default impl` is not yet implemented, this is always true in impls\n-            has_value: true,\n         }\n+\n+        // [1] since `default impl` is not yet implemented, this is always true in impls\n     }\n \n     fn lower_mod(&mut self, m: &Mod) -> hir::Mod {\n@@ -1650,10 +1652,13 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_defaultness(&mut self, d: Defaultness) -> hir::Defaultness {\n+    fn lower_defaultness(&mut self, d: Defaultness, has_value: bool) -> hir::Defaultness {\n         match d {\n-            Defaultness::Default => hir::Defaultness::Default,\n-            Defaultness::Final => hir::Defaultness::Final,\n+            Defaultness::Default => hir::Defaultness::Default { has_value: has_value },\n+            Defaultness::Final => {\n+                assert!(has_value);\n+                hir::Defaultness::Final\n+            }\n         }\n     }\n "}, {"sha": "9f5ff6914b0cc0b2b29b5064db5943bd4ca5588a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -1259,17 +1259,27 @@ pub enum Constness {\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Defaultness {\n-    Default,\n+    Default { has_value: bool },\n     Final,\n }\n \n impl Defaultness {\n+    pub fn has_value(&self) -> bool {\n+        match *self {\n+            Defaultness::Default { has_value, .. } => has_value,\n+            Defaultness::Final => true,\n+        }\n+    }\n+\n     pub fn is_final(&self) -> bool {\n         *self == Defaultness::Final\n     }\n \n     pub fn is_default(&self) -> bool {\n-        *self == Defaultness::Default\n+        match *self {\n+            Defaultness::Default { .. } => true,\n+            _ => false,\n+        }\n     }\n }\n \n@@ -1584,7 +1594,6 @@ pub struct ImplItemRef {\n     pub span: Span,\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n-    pub has_value: bool,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "807bbec3b58888e36f0037d8df436ded6db16063", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -1036,8 +1036,9 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(ii.span.lo)?;\n         self.print_outer_attributes(&ii.attrs)?;\n \n-        if let hir::Defaultness::Default = ii.defaultness {\n-            self.word_nbsp(\"default\")?;\n+        match ii.defaultness {\n+            hir::Defaultness::Default { .. } => self.word_nbsp(\"default\")?,\n+            hir::Defaultness::Final => (),\n         }\n \n         match ii.node {"}, {"sha": "ca7d2ac3c69ab392d4adf3ab815052f555b78ed5", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -943,7 +943,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                         // an error when we confirm the candidate\n                         // (which will ultimately lead to `normalize_to_error`\n                         // being invoked).\n-                        node_item.item.has_value\n+                        node_item.item.defaultness.has_value()\n                     } else {\n                         node_item.item.defaultness.is_default()\n                     };\n@@ -1304,7 +1304,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n \n     match assoc_ty {\n         Some(node_item) => {\n-            let ty = if !node_item.item.has_value {\n+            let ty = if !node_item.item.defaultness.has_value() {\n                 // This means that the impl is missing a definition for the\n                 // associated type. This error will be reported by the type\n                 // checker method `check_impl_items_against_trait`, so here we"}, {"sha": "f5c23401a4e679785a31547ba91d9f9c3f4ffcba", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -189,7 +189,6 @@ pub struct AssociatedItem {\n     pub kind: AssociatedKind,\n     pub vis: Visibility,\n     pub defaultness: hir::Defaultness,\n-    pub has_value: bool,\n     pub container: AssociatedItemContainer,\n \n     /// Whether this is a method with an explicit self\n@@ -2072,7 +2071,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn provided_trait_methods(self, id: DefId) -> Vec<AssociatedItem> {\n         self.associated_items(id)\n-            .filter(|item| item.kind == AssociatedKind::Method && item.has_value)\n+            .filter(|item| item.kind == AssociatedKind::Method && item.defaultness.has_value())\n             .collect()\n     }\n \n@@ -2180,8 +2179,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             name: trait_item.name,\n             kind: kind,\n             vis: Visibility::from_hir(&hir::Inherited, trait_item.id, self),\n-            defaultness: hir::Defaultness::Default,\n-            has_value: has_value,\n+            defaultness: hir::Defaultness::Default { has_value: has_value },\n             def_id: def_id,\n             container: TraitContainer(parent_def_id),\n             method_has_self_argument: has_self\n@@ -2211,7 +2209,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             kind: kind,\n             vis: ty::Visibility::from_hir(vis, impl_item_ref.id.node_id, self),\n             defaultness: impl_item_ref.defaultness,\n-            has_value: true,\n             def_id: def_id,\n             container: ImplContainer(parent_def_id),\n             method_has_self_argument: has_self"}, {"sha": "fa2eff817eaa8e33685cfe282d7cd255c4a6af55", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -199,6 +199,8 @@ enum SawAbiComponent<'a> {\n     SawExpr(SawExprComponent<'a>),\n     SawStmt,\n     SawVis,\n+    SawAssociatedItemKind(hir::AssociatedItemKind),\n+    SawDefaultness(hir::Defaultness),\n     SawWherePredicate,\n     SawTyParamBound,\n     SawPolyTraitRef,\n@@ -693,6 +695,18 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n         visit::walk_vis(self, v)\n     }\n \n+    fn visit_associated_item_kind(&mut self, kind: &'tcx AssociatedItemKind) {\n+        debug!(\"visit_associated_item_kind: st={:?}\", self.st);\n+        SawAssociatedItemKind(*kind).hash(self.st);\n+        visit::walk_associated_item_kind(self, kind);\n+    }\n+\n+    fn visit_defaultness(&mut self, defaultness: &'tcx Defaultness) {\n+        debug!(\"visit_associated_item_kind: st={:?}\", self.st);\n+        SawDefaultness(*defaultness).hash(self.st);\n+        visit::walk_defaultness(self, defaultness);\n+    }\n+\n     fn visit_where_predicate(&mut self, predicate: &'tcx WherePredicate) {\n         debug!(\"visit_where_predicate: st={:?}\", self.st);\n         SawWherePredicate.hash(self.st);"}, {"sha": "6dbcfc8523dc737a2df46119eb8c358be9d02c1d", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -834,7 +834,6 @@ impl<'a, 'tcx> CrateMetadata {\n                     kind: ty::AssociatedKind::Const,\n                     vis: item.visibility,\n                     defaultness: container.defaultness(),\n-                    has_value: container.has_value(),\n                     def_id: self.local_def_id(id),\n                     container: container.with_def_id(parent),\n                     method_has_self_argument: false\n@@ -848,7 +847,6 @@ impl<'a, 'tcx> CrateMetadata {\n                     kind: ty::AssociatedKind::Method,\n                     vis: item.visibility,\n                     defaultness: data.container.defaultness(),\n-                    has_value: data.container.has_value(),\n                     def_id: self.local_def_id(id),\n                     container: data.container.with_def_id(parent),\n                     method_has_self_argument: data.has_self\n@@ -861,7 +859,6 @@ impl<'a, 'tcx> CrateMetadata {\n                     kind: ty::AssociatedKind::Type,\n                     vis: item.visibility,\n                     defaultness: container.defaultness(),\n-                    has_value: container.has_value(),\n                     def_id: self.local_def_id(id),\n                     container: container.with_def_id(parent),\n                     method_has_self_argument: false"}, {"sha": "d1508d7e9b3988c08d47d63c841426ffd20bb205", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -460,10 +460,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let ast_item = tcx.map.expect_trait_item(node_id);\n         let trait_item = tcx.associated_item(def_id);\n \n-        let container = if trait_item.has_value {\n-            AssociatedContainer::TraitWithDefault\n-        } else {\n-            AssociatedContainer::TraitRequired\n+        let container = match trait_item.defaultness {\n+            hir::Defaultness::Default { has_value: true } =>\n+                AssociatedContainer::TraitWithDefault,\n+            hir::Defaultness::Default { has_value: false } =>\n+                AssociatedContainer::TraitRequired,\n+            hir::Defaultness::Final =>\n+                span_bug!(ast_item.span, \"traits cannot have final items\"),\n         };\n \n         let kind = match trait_item.kind {\n@@ -501,7 +504,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     Some(self.encode_item_type(def_id))\n                 }\n                 ty::AssociatedKind::Type => {\n-                    if trait_item.has_value {\n+                    if trait_item.defaultness.has_value() {\n                         Some(self.encode_item_type(def_id))\n                     } else {\n                         None\n@@ -530,8 +533,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let impl_def_id = impl_item.container.id();\n \n         let container = match impl_item.defaultness {\n-            hir::Defaultness::Default => AssociatedContainer::ImplDefault,\n+            hir::Defaultness::Default { has_value: true } => AssociatedContainer::ImplDefault,\n             hir::Defaultness::Final => AssociatedContainer::ImplFinal,\n+            hir::Defaultness::Default { has_value: false } =>\n+                span_bug!(ast_item.span, \"impl items always have values (currently)\"),\n         };\n \n         let kind = match impl_item.kind {"}, {"sha": "7553b2e05a73ed7d84b50ad8ccbb7c33c7dd7fc5", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -310,21 +310,16 @@ impl AssociatedContainer {\n         }\n     }\n \n-    pub fn has_value(&self) -> bool {\n-        match *self {\n-            AssociatedContainer::TraitRequired => false,\n-\n-            AssociatedContainer::TraitWithDefault |\n-            AssociatedContainer::ImplDefault |\n-            AssociatedContainer::ImplFinal => true,\n-        }\n-    }\n-\n     pub fn defaultness(&self) -> hir::Defaultness {\n         match *self {\n-            AssociatedContainer::TraitRequired |\n+            AssociatedContainer::TraitRequired => hir::Defaultness::Default {\n+                has_value: false,\n+            },\n+\n             AssociatedContainer::TraitWithDefault |\n-            AssociatedContainer::ImplDefault => hir::Defaultness::Default,\n+            AssociatedContainer::ImplDefault => hir::Defaultness::Default {\n+                has_value: true,\n+            },\n \n             AssociatedContainer::ImplFinal => hir::Defaultness::Final,\n         }"}, {"sha": "778f0184141651061552c44dbe7e0d655d84962f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -536,7 +536,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.associated_item(decl_id);\n                     self.tcx.associated_items(ti.container.id())\n-                        .find(|item| item.name == ti.name && item.has_value)\n+                        .find(|item| item.name == ti.name && item.defaultness.has_value())\n                         .map(|item| item.def_id)\n                 } else {\n                     None"}, {"sha": "d2939316219e675c5f5f651dd978bf64a52332aa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -1110,7 +1110,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 }\n                 hir::ImplItemKind::Type(_) => {\n                     if ty_trait_item.kind == ty::AssociatedKind::Type {\n-                        if ty_trait_item.has_value {\n+                        if ty_trait_item.defaultness.has_value() {\n                             overridden_associated_type = Some(impl_item);\n                         }\n                     } else {\n@@ -1144,7 +1144,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             .unwrap_or(false);\n \n         if !is_implemented {\n-            if !trait_item.has_value {\n+            if !trait_item.defaultness.has_value() {\n                 missing_items.push(trait_item);\n             } else if associated_type_overridden {\n                 invalidated_items.push(trait_item.name);"}, {"sha": "2c55e8fbfd2284d88e2bfd292877d07dbcf96610", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -204,7 +204,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                                                free_id_outlive, self_ty);\n                 }\n                 ty::AssociatedKind::Type => {\n-                    if item.has_value {\n+                    if item.defaultness.has_value() {\n                         let ty = fcx.tcx.item_type(item.def_id);\n                         let ty = fcx.instantiate_type_scheme(span, free_substs, &ty);\n                         fcx.register_wf_obligation(ty, span, code.clone());"}, {"sha": "9f5b73d9b30752ed45f31aead3cda46a24e9958b", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -118,7 +118,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         .map(|item_ref|  ccx.tcx.map.local_def_id(item_ref.id.node_id))\n         .filter(|&def_id| {\n             let item = ccx.tcx.associated_item(def_id);\n-            item.kind == ty::AssociatedKind::Type && item.has_value\n+            item.kind == ty::AssociatedKind::Type && item.defaultness.has_value()\n         })\n         .flat_map(|def_id| {\n             ctp::parameters_for(&ccx.tcx.item_type(def_id), true)"}, {"sha": "185f897c1baa1cfb82226cb4d59e3abe8204e382", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -364,7 +364,7 @@ pub fn build_impl<'a, 'tcx>(cx: &DocContext,\n     let trait_items = tcx.associated_items(did).filter_map(|item| {\n         match item.kind {\n             ty::AssociatedKind::Const => {\n-                let default = if item.has_value {\n+                let default = if item.defaultness.has_value() {\n                     Some(pprust::expr_to_string(\n                         lookup_const_by_id(tcx, item.def_id, None).unwrap().0))\n                 } else {\n@@ -407,7 +407,7 @@ pub fn build_impl<'a, 'tcx>(cx: &DocContext,\n                             abi: abi\n                         })\n                     }\n-                    _ => panic!(\"not a tymethod\"),\n+                    ref r => panic!(\"not a tymethod: {:?}\", r),\n                 };\n                 Some(cleaned)\n             }"}, {"sha": "a141d0e4788dd845509131780a6d83a9c268ff38", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -1373,9 +1373,10 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                         }\n                     }\n                 }\n+\n                 let provided = match self.container {\n                     ty::ImplContainer(_) => false,\n-                    ty::TraitContainer(_) => self.has_value\n+                    ty::TraitContainer(_) => self.defaultness.has_value()\n                 };\n                 if provided {\n                     MethodItem(Method {\n@@ -1440,7 +1441,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     None => bounds.push(TyParamBound::maybe_sized(cx)),\n                 }\n \n-                let ty = if self.has_value {\n+                let ty = if self.defaultness.has_value() {\n                     Some(cx.tcx().item_type(self.def_id))\n                 } else {\n                     None"}, {"sha": "f7a390e874509312e6c01c0c5817e32f2651270b", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b98169ff7350236e96f99ddb2f5d4cbef732b/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=b10b98169ff7350236e96f99ddb2f5d4cbef732b", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for let expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+struct Foo;\n+\n+// Change Method Name -----------------------------------------------------------\n+#[cfg(cfail1)]\n+impl Foo {\n+    pub fn method_name() { }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub fn method_name2() { }\n+}\n+\n+// Change Method Body -----------------------------------------------------------\n+//\n+// This should affect the method itself, but not the impl.\n+#[cfg(cfail1)]\n+impl Foo {\n+    pub fn method_body() { }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub fn method_body() {\n+        println!(\"Hello, world!\");\n+    }\n+}\n+\n+// Change Method Privacy -----------------------------------------------------------\n+#[cfg(cfail1)]\n+impl Foo {\n+    pub fn method_privacy() { }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn method_privacy() { }\n+}\n+\n+// Change Method Selfness -----------------------------------------------------------\n+#[cfg(cfail1)]\n+impl Foo {\n+    pub fn method_selfness() { }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub fn method_selfness(&self) { }\n+}\n+\n+// Change Method Selfmutness -----------------------------------------------------------\n+#[cfg(cfail1)]\n+impl Foo {\n+    pub fn method_selfmutness(&self) { }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub fn method_selfmutness(&mut self) { }\n+}\n+"}]}