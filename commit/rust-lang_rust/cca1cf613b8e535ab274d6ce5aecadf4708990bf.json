{"sha": "cca1cf613b8e535ab274d6ce5aecadf4708990bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYTFjZjYxM2I4ZTUzNWFiMjc0ZDZjZTVhZWNhZGY0NzA4OTkwYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-12T14:58:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-12T14:58:13Z"}, "message": "Auto merge of #21895 - alfie:libcoretest, r=pnkfelix", "tree": {"sha": "d2292700e1ba6abf8c29b1032c9cae4f299eb9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2292700e1ba6abf8c29b1032c9cae4f299eb9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca1cf613b8e535ab274d6ce5aecadf4708990bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca1cf613b8e535ab274d6ce5aecadf4708990bf", "html_url": "https://github.com/rust-lang/rust/commit/cca1cf613b8e535ab274d6ce5aecadf4708990bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca1cf613b8e535ab274d6ce5aecadf4708990bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34421e49024e9277da29c1f88e57ff5f96398b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34421e49024e9277da29c1f88e57ff5f96398b6", "html_url": "https://github.com/rust-lang/rust/commit/c34421e49024e9277da29c1f88e57ff5f96398b6"}, {"sha": "bffbcb5729a2b4cb2ab924e5f0d9ddebe470eebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bffbcb5729a2b4cb2ab924e5f0d9ddebe470eebc", "html_url": "https://github.com/rust-lang/rust/commit/bffbcb5729a2b4cb2ab924e5f0d9ddebe470eebc"}], "stats": {"total": 224, "additions": 112, "deletions": 112}, "files": [{"sha": "2156a99c332908cc962906cb80b929f8e5f71c69", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -18,11 +18,11 @@ static TEST: &'static str = \"Test\";\n \n #[test]\n fn any_referenced() {\n-    let (a, b, c) = (&5u as &Any, &TEST as &Any, &Test as &Any);\n+    let (a, b, c) = (&5 as &Any, &TEST as &Any, &Test as &Any);\n \n-    assert!(a.is::<uint>());\n-    assert!(!b.is::<uint>());\n-    assert!(!c.is::<uint>());\n+    assert!(a.is::<i32>());\n+    assert!(!b.is::<i32>());\n+    assert!(!c.is::<i32>());\n \n     assert!(!a.is::<&'static str>());\n     assert!(b.is::<&'static str>());\n@@ -35,7 +35,7 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) = (box 5u as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n+    let (a, b, c) = (box 5us as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n \n     assert!(a.is::<uint>());\n     assert!(!b.is::<uint>());\n@@ -52,7 +52,7 @@ fn any_owning() {\n \n #[test]\n fn any_downcast_ref() {\n-    let a = &5u as &Any;\n+    let a = &5us as &Any;\n \n     match a.downcast_ref::<uint>() {\n         Some(&5) => {}\n@@ -67,24 +67,24 @@ fn any_downcast_ref() {\n \n #[test]\n fn any_downcast_mut() {\n-    let mut a = 5u;\n-    let mut b = box 7u;\n+    let mut a = 5us;\n+    let mut b = box 7us;\n \n     let a_r = &mut a as &mut Any;\n     let tmp: &mut uint = &mut *b;\n     let b_r = tmp as &mut Any;\n \n     match a_r.downcast_mut::<uint>() {\n         Some(x) => {\n-            assert_eq!(*x, 5u);\n+            assert_eq!(*x, 5);\n             *x = 612;\n         }\n         x => panic!(\"Unexpected value {:?}\", x)\n     }\n \n     match b_r.downcast_mut::<uint>() {\n         Some(x) => {\n-            assert_eq!(*x, 7u);\n+            assert_eq!(*x, 7);\n             *x = 413;\n         }\n         x => panic!(\"Unexpected value {:?}\", x)\n@@ -113,7 +113,7 @@ fn any_downcast_mut() {\n \n #[test]\n fn any_fixed_vec() {\n-    let test = [0u; 8];\n+    let test = [0us; 8];\n     let test = &test as &Any;\n     assert!(test.is::<[uint; 8]>());\n     assert!(!test.is::<[uint; 10]>());"}, {"sha": "317ef3a570143e9611f73d3e00047ccbf71c8045", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -134,21 +134,21 @@ fn clone_ref_updates_flag() {\n \n #[test]\n fn as_unsafe_cell() {\n-    let c1: Cell<uint> = Cell::new(0u);\n-    c1.set(1u);\n-    assert_eq!(1u, unsafe { *c1.as_unsafe_cell().get() });\n+    let c1: Cell<uint> = Cell::new(0);\n+    c1.set(1);\n+    assert_eq!(1, unsafe { *c1.as_unsafe_cell().get() });\n \n-    let c2: Cell<uint> = Cell::new(0u);\n-    unsafe { *c2.as_unsafe_cell().get() = 1u; }\n-    assert_eq!(1u, c2.get());\n+    let c2: Cell<uint> = Cell::new(0);\n+    unsafe { *c2.as_unsafe_cell().get() = 1; }\n+    assert_eq!(1, c2.get());\n \n-    let r1: RefCell<uint> = RefCell::new(0u);\n-    *r1.borrow_mut() = 1u;\n-    assert_eq!(1u, unsafe { *r1.as_unsafe_cell().get() });\n+    let r1: RefCell<uint> = RefCell::new(0);\n+    *r1.borrow_mut() = 1;\n+    assert_eq!(1, unsafe { *r1.as_unsafe_cell().get() });\n \n-    let r2: RefCell<uint> = RefCell::new(0u);\n-    unsafe { *r2.as_unsafe_cell().get() = 1u; }\n-    assert_eq!(1u, *r2.borrow());\n+    let r2: RefCell<uint> = RefCell::new(0);\n+    unsafe { *r2.as_unsafe_cell().get() = 1; }\n+    assert_eq!(1, *r2.borrow());\n }\n \n #[test]"}, {"sha": "32dc6440b1326e546c8110da9fbf6ce7b3f7e98c", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -41,18 +41,18 @@ fn test_is_whitespace() {\n \n #[test]\n fn test_to_digit() {\n-    assert_eq!('0'.to_digit(10u), Some(0u));\n-    assert_eq!('1'.to_digit(2u), Some(1u));\n-    assert_eq!('2'.to_digit(3u), Some(2u));\n-    assert_eq!('9'.to_digit(10u), Some(9u));\n-    assert_eq!('a'.to_digit(16u), Some(10u));\n-    assert_eq!('A'.to_digit(16u), Some(10u));\n-    assert_eq!('b'.to_digit(16u), Some(11u));\n-    assert_eq!('B'.to_digit(16u), Some(11u));\n-    assert_eq!('z'.to_digit(36u), Some(35u));\n-    assert_eq!('Z'.to_digit(36u), Some(35u));\n-    assert_eq!(' '.to_digit(10u), None);\n-    assert_eq!('$'.to_digit(36u), None);\n+    assert_eq!('0'.to_digit(10), Some(0));\n+    assert_eq!('1'.to_digit(2), Some(1));\n+    assert_eq!('2'.to_digit(3), Some(2));\n+    assert_eq!('9'.to_digit(10), Some(9));\n+    assert_eq!('a'.to_digit(16), Some(10));\n+    assert_eq!('A'.to_digit(16), Some(10));\n+    assert_eq!('b'.to_digit(16), Some(11));\n+    assert_eq!('B'.to_digit(16), Some(11));\n+    assert_eq!('z'.to_digit(36), Some(35));\n+    assert_eq!('Z'.to_digit(36), Some(35));\n+    assert_eq!(' '.to_digit(10), None);\n+    assert_eq!('$'.to_digit(36), None);\n }\n \n #[test]"}, {"sha": "7eb0fb97bed2a54f48efce97d6b65f759c55da5c", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -79,8 +79,8 @@ fn test_counter_from_iter() {\n \n #[test]\n fn test_iterator_chain() {\n-    let xs = [0u, 1, 2, 3, 4, 5];\n-    let ys = [30u, 40, 50, 60];\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let ys = [30, 40, 50, 60];\n     let expected = [0, 1, 2, 3, 4, 5, 30, 40, 50, 60];\n     let mut it = xs.iter().chain(ys.iter());\n     let mut i = 0;\n@@ -90,7 +90,7 @@ fn test_iterator_chain() {\n     }\n     assert_eq!(i, expected.len());\n \n-    let ys = count(30u, 10).take(4);\n+    let ys = count(30, 10).take(4);\n     let mut it = xs.iter().map(|&x| x).chain(ys);\n     let mut i = 0;\n     for x in it {\n@@ -102,14 +102,14 @@ fn test_iterator_chain() {\n \n #[test]\n fn test_filter_map() {\n-    let it = count(0u, 1u).take(10)\n+    let it = count(0, 1).take(10)\n         .filter_map(|x| if x % 2 == 0 { Some(x*x) } else { None });\n     assert!(it.collect::<Vec<uint>>() == vec![0*0, 2*2, 4*4, 6*6, 8*8]);\n }\n \n #[test]\n fn test_iterator_enumerate() {\n-    let xs = [0u, 1, 2, 3, 4, 5];\n+    let xs = [0, 1, 2, 3, 4, 5];\n     let mut it = xs.iter().enumerate();\n     for (i, &x) in it {\n         assert_eq!(i, x);\n@@ -118,7 +118,7 @@ fn test_iterator_enumerate() {\n \n #[test]\n fn test_iterator_peekable() {\n-    let xs = vec![0u, 1, 2, 3, 4, 5];\n+    let xs = vec![0, 1, 2, 3, 4, 5];\n     let mut it = xs.iter().map(|&x|x).peekable();\n \n     assert_eq!(it.len(), 6);\n@@ -150,9 +150,9 @@ fn test_iterator_peekable() {\n \n #[test]\n fn test_iterator_take_while() {\n-    let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n-    let ys = [0u, 1, 2, 3, 5, 13];\n-    let mut it = xs.iter().take_while(|&x| *x < 15u);\n+    let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+    let ys = [0, 1, 2, 3, 5, 13];\n+    let mut it = xs.iter().take_while(|&x| *x < 15);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(*x, ys[i]);\n@@ -163,9 +163,9 @@ fn test_iterator_take_while() {\n \n #[test]\n fn test_iterator_skip_while() {\n-    let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+    let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n     let ys = [15, 16, 17, 19];\n-    let mut it = xs.iter().skip_while(|&x| *x < 15u);\n+    let mut it = xs.iter().skip_while(|&x| *x < 15);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(*x, ys[i]);\n@@ -176,7 +176,7 @@ fn test_iterator_skip_while() {\n \n #[test]\n fn test_iterator_skip() {\n-    let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n+    let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n     let ys = [13, 15, 16, 17, 19, 20, 30];\n     let mut it = xs.iter().skip(5);\n     let mut i = 0;\n@@ -191,8 +191,8 @@ fn test_iterator_skip() {\n \n #[test]\n fn test_iterator_take() {\n-    let xs = [0us, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n-    let ys = [0us, 1, 2, 3, 5];\n+    let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+    let ys = [0, 1, 2, 3, 5];\n     let mut it = xs.iter().take(5);\n     let mut i = 0;\n     assert_eq!(it.len(), 5);\n@@ -207,8 +207,8 @@ fn test_iterator_take() {\n \n #[test]\n fn test_iterator_take_short() {\n-    let xs = [0us, 1, 2, 3];\n-    let ys = [0us, 1, 2, 3];\n+    let xs = [0, 1, 2, 3];\n+    let ys = [0, 1, 2, 3];\n     let mut it = xs.iter().take(5);\n     let mut i = 0;\n     assert_eq!(it.len(), 4);\n@@ -228,7 +228,7 @@ fn test_iterator_scan() {\n         *old += *new as int;\n         Some(*old as f64)\n     }\n-    let xs = [0u, 1, 2, 3, 4];\n+    let xs = [0, 1, 2, 3, 4];\n     let ys = [0f64, 1.0, 3.0, 6.0, 10.0];\n \n     let mut it = xs.iter().scan(0, add);\n@@ -242,8 +242,8 @@ fn test_iterator_scan() {\n \n #[test]\n fn test_iterator_flat_map() {\n-    let xs = [0u, 3, 6];\n-    let ys = [0u, 1, 2, 3, 4, 5, 6, 7, 8];\n+    let xs = [0, 3, 6];\n+    let ys = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n     let mut it = xs.iter().flat_map(|&x| count(x, 1).take(3));\n     let mut i = 0;\n     for x in it {\n@@ -255,8 +255,8 @@ fn test_iterator_flat_map() {\n \n #[test]\n fn test_inspect() {\n-    let xs = [1u, 2, 3, 4];\n-    let mut n = 0u;\n+    let xs = [1, 2, 3, 4];\n+    let mut n = 0;\n \n     let ys = xs.iter()\n                .map(|&x| x)\n@@ -291,21 +291,21 @@ fn test_unfoldr() {\n #[test]\n fn test_cycle() {\n     let cycle_len = 3;\n-    let it = count(0u, 1).take(cycle_len).cycle();\n+    let it = count(0, 1).take(cycle_len).cycle();\n     assert_eq!(it.size_hint(), (uint::MAX, None));\n     for (i, x) in it.take(100).enumerate() {\n         assert_eq!(i % cycle_len, x);\n     }\n \n-    let mut it = count(0u, 1).take(0).cycle();\n+    let mut it = count(0, 1).take(0).cycle();\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n }\n \n #[test]\n fn test_iterator_nth() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n-    for i in 0u..v.len() {\n+    for i in 0..v.len() {\n         assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n     }\n     assert_eq!(v.iter().nth(v.len()), None);\n@@ -574,7 +574,7 @@ fn test_rposition() {\n     fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n     let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-    assert_eq!(v.iter().rposition(f), Some(3u));\n+    assert_eq!(v.iter().rposition(f), Some(3));\n     assert!(v.iter().rposition(g).is_none());\n }\n \n@@ -601,7 +601,7 @@ fn check_randacc_iter<A, T>(a: T, len: uint) where\n {\n     let mut b = a.clone();\n     assert_eq!(len, b.indexable());\n-    let mut n = 0u;\n+    let mut n = 0;\n     for (i, elt) in a.enumerate() {\n         assert!(Some(elt) == b.idx(i));\n         n += 1;\n@@ -618,8 +618,8 @@ fn check_randacc_iter<A, T>(a: T, len: uint) where\n \n #[test]\n fn test_double_ended_flat_map() {\n-    let u = [0u,1];\n-    let v = [5u,6,7,8];\n+    let u = [0,1];\n+    let v = [5,6,7,8];\n     let mut it = u.iter().flat_map(|x| v[*x..v.len()].iter());\n     assert_eq!(it.next_back().unwrap(), &8);\n     assert_eq!(it.next().unwrap(),      &5);\n@@ -849,30 +849,30 @@ fn test_min_max_result() {\n \n #[test]\n fn test_iterate() {\n-    let mut it = iterate(1u, |x| x * 2);\n-    assert_eq!(it.next(), Some(1u));\n-    assert_eq!(it.next(), Some(2u));\n-    assert_eq!(it.next(), Some(4u));\n-    assert_eq!(it.next(), Some(8u));\n+    let mut it = iterate(1, |x| x * 2);\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), Some(4));\n+    assert_eq!(it.next(), Some(8));\n }\n \n #[test]\n fn test_repeat() {\n-    let mut it = repeat(42u);\n-    assert_eq!(it.next(), Some(42u));\n-    assert_eq!(it.next(), Some(42u));\n-    assert_eq!(it.next(), Some(42u));\n+    let mut it = repeat(42);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n }\n \n #[test]\n fn test_fuse() {\n-    let mut it = 0us..3;\n+    let mut it = 0..3;\n     assert_eq!(it.len(), 3);\n-    assert_eq!(it.next(), Some(0us));\n+    assert_eq!(it.next(), Some(0));\n     assert_eq!(it.len(), 2);\n-    assert_eq!(it.next(), Some(1us));\n+    assert_eq!(it.next(), Some(1));\n     assert_eq!(it.len(), 1);\n-    assert_eq!(it.next(), Some(2us));\n+    assert_eq!(it.next(), Some(2));\n     assert_eq!(it.len(), 0);\n     assert_eq!(it.next(), None);\n     assert_eq!(it.len(), 0);\n@@ -884,7 +884,7 @@ fn test_fuse() {\n \n #[bench]\n fn bench_rposition(b: &mut Bencher) {\n-    let it: Vec<uint> = (0u..300).collect();\n+    let it: Vec<uint> = (0..300).collect();\n     b.iter(|| {\n         it.iter().rposition(|&x| x <= 150);\n     });\n@@ -893,18 +893,18 @@ fn bench_rposition(b: &mut Bencher) {\n #[bench]\n fn bench_skip_while(b: &mut Bencher) {\n     b.iter(|| {\n-        let it = 0u..100;\n+        let it = 0..100;\n         let mut sum = 0;\n         it.skip_while(|&x| { sum += x; sum < 4000 }).all(|_| true);\n     });\n }\n \n #[bench]\n fn bench_multiple_take(b: &mut Bencher) {\n-    let mut it = (0u..42).cycle();\n+    let mut it = (0..42).cycle();\n     b.iter(|| {\n         let n = it.next().unwrap();\n-        for _ in 0u..n {\n+        for _ in 0..n {\n             it.clone().take(it.next().unwrap()).all(|_| true);\n         }\n     });"}, {"sha": "421ce76caaf46e5ae9a1851555b867ddd093eafa", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -12,24 +12,24 @@ use test::Bencher;\n \n #[test]\n fn size_of_basic() {\n-    assert_eq!(size_of::<u8>(), 1u);\n-    assert_eq!(size_of::<u16>(), 2u);\n-    assert_eq!(size_of::<u32>(), 4u);\n-    assert_eq!(size_of::<u64>(), 8u);\n+    assert_eq!(size_of::<u8>(), 1);\n+    assert_eq!(size_of::<u16>(), 2);\n+    assert_eq!(size_of::<u32>(), 4);\n+    assert_eq!(size_of::<u64>(), 8);\n }\n \n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn size_of_32() {\n-    assert_eq!(size_of::<uint>(), 4u);\n-    assert_eq!(size_of::<*const uint>(), 4u);\n+    assert_eq!(size_of::<uint>(), 4);\n+    assert_eq!(size_of::<*const uint>(), 4);\n }\n \n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn size_of_64() {\n-    assert_eq!(size_of::<uint>(), 8u);\n-    assert_eq!(size_of::<*const uint>(), 8u);\n+    assert_eq!(size_of::<uint>(), 8);\n+    assert_eq!(size_of::<*const uint>(), 8);\n }\n \n #[test]\n@@ -42,30 +42,30 @@ fn size_of_val_basic() {\n \n #[test]\n fn align_of_basic() {\n-    assert_eq!(align_of::<u8>(), 1u);\n-    assert_eq!(align_of::<u16>(), 2u);\n-    assert_eq!(align_of::<u32>(), 4u);\n+    assert_eq!(align_of::<u8>(), 1);\n+    assert_eq!(align_of::<u16>(), 2);\n+    assert_eq!(align_of::<u32>(), 4);\n }\n \n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn align_of_32() {\n-    assert_eq!(align_of::<uint>(), 4u);\n-    assert_eq!(align_of::<*const uint>(), 4u);\n+    assert_eq!(align_of::<uint>(), 4);\n+    assert_eq!(align_of::<*const uint>(), 4);\n }\n \n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn align_of_64() {\n-    assert_eq!(align_of::<uint>(), 8u);\n-    assert_eq!(align_of::<*const uint>(), 8u);\n+    assert_eq!(align_of::<uint>(), 8);\n+    assert_eq!(align_of::<*const uint>(), 8);\n }\n \n #[test]\n fn align_of_val_basic() {\n-    assert_eq!(align_of_val(&1u8), 1u);\n-    assert_eq!(align_of_val(&1u16), 2u);\n-    assert_eq!(align_of_val(&1u32), 4u);\n+    assert_eq!(align_of_val(&1u8), 1);\n+    assert_eq!(align_of_val(&1u16), 2);\n+    assert_eq!(align_of_val(&1u32), 4);\n }\n \n #[test]\n@@ -87,7 +87,7 @@ fn test_replace() {\n \n #[test]\n fn test_transmute_copy() {\n-    assert_eq!(1u, unsafe { transmute_copy(&1) });\n+    assert_eq!(1, unsafe { transmute_copy(&1) });\n }\n \n #[test]"}, {"sha": "5c6efc857f1f98fb5d6433543bc0f54124b90994", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -33,8 +33,8 @@ mod tests {\n         assert!(0b1110 as $T == (0b1100 as $T).bitor(0b1010 as $T));\n         assert!(0b1000 as $T == (0b1100 as $T).bitand(0b1010 as $T));\n         assert!(0b0110 as $T == (0b1100 as $T).bitxor(0b1010 as $T));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(1u));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(1u));\n+        assert!(0b1110 as $T == (0b0111 as $T).shl(1));\n+        assert!(0b0111 as $T == (0b1110 as $T).shr(1));\n         assert!(MAX - (0b1011 as $T) == (0b1011 as $T).not());\n     }\n \n@@ -119,8 +119,8 @@ mod tests {\n \n     #[test]\n     fn test_unsigned_checked_div() {\n-        assert!(10u.checked_div(2) == Some(5));\n-        assert!(5u.checked_div(0) == None);\n+        assert!(10.checked_div(2) == Some(5));\n+        assert!(5.checked_div(0) == None);\n     }\n }\n "}, {"sha": "0183e6a93cfd07272aab962f2458719f77279b0b", "filename": "src/libcoretest/ops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fops.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -33,23 +33,23 @@ fn alloc_obj_with_dtor(b: &mut Bencher) {\n \n #[test]\n fn test_range() {\n-    let r = Range { start: 2u, end: 10 };\n-    let mut count = 0u;\n+    let r = Range { start: 2, end: 10 };\n+    let mut count = 0;\n     for (i, ri) in r.enumerate() {\n         assert!(ri == i + 2);\n-        assert!(ri >= 2u && ri < 10u);\n+        assert!(ri >= 2 && ri < 10);\n         count += 1;\n     }\n     assert!(count == 8);\n }\n \n #[test]\n fn test_range_from() {\n-    let r = RangeFrom { start: 2u };\n-    let mut count = 0u;\n+    let r = RangeFrom { start: 2 };\n+    let mut count = 0;\n     for (i, ri) in r.take(10).enumerate() {\n         assert!(ri == i + 2);\n-        assert!(ri >= 2u && ri < 12u);\n+        assert!(ri >= 2 && ri < 12);\n         count += 1;\n     }\n     assert!(count == 10);\n@@ -58,7 +58,7 @@ fn test_range_from() {\n #[test]\n fn test_range_to() {\n     // Not much to test.\n-    let _ = RangeTo { end: 42u };\n+    let _ = RangeTo { end: 42 };\n }\n \n #[test]"}, {"sha": "9c2e242c105096ab4717e60fe993a68f38018c60", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -46,7 +46,7 @@ fn test() {\n                  v1[1] == 32001u16 &&\n                  v1[2] == 0u16));\n         copy_memory(v1.as_mut_ptr().offset(2),\n-                    v0.as_ptr(), 1u);\n+                    v0.as_ptr(), 1);\n         assert!((v1[0] == 32002u16 &&\n                  v1[1] == 32001u16 &&\n                  v1[2] == 32000u16));"}, {"sha": "4fe5e0a740bf7007c37f08c1da63f4ffc11e5702", "filename": "src/libcoretest/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca1cf613b8e535ab274d6ce5aecadf4708990bf/src%2Flibcoretest%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ftuple.rs?ref=cca1cf613b8e535ab274d6ce5aecadf4708990bf", "patch": "@@ -19,7 +19,7 @@ fn test_clone() {\n \n #[test]\n fn test_tuple_cmp() {\n-    let (small, big) = ((1u, 2u, 3u), (3u, 2u, 1u));\n+    let (small, big) = ((1, 2, 3), (3, 2, 1));\n \n     let nan = 0.0f64/0.0;\n "}]}