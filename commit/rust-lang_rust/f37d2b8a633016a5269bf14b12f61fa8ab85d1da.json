{"sha": "f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzN2QyYjhhNjMzMDE2YTUyNjliZjE0YjEyZjYxZmE4YWI4NWQxZGE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T17:08:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T20:37:24Z"}, "message": "Use Place directly in librustc_mir_build, it's Copy", "tree": {"sha": "e7ed815ff70f427feb9d6821274d1097b2e07f0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ed815ff70f427feb9d6821274d1097b2e07f0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6DqggACgkQgTGiTgx5\n768LsBAAteJKuNkwMOW0vDrpk6yLGvESh+TBqnMZ94sTZxF/4jVVjS6ZfD0bQc83\nOZ3xMpZjVJ9DHipOwrhi8SKwSq2Rp7KaFf8GQFyB3OyWXsp++Xdr6WIhnYxgvF61\nPwG2AzDsyZ7ac8Om1GQKS4M90Ovu9Wp/je03zgKl10vP/a65nB/YjI9rKrKt/HOJ\ndokmhdp/PFyYGknBPMPUn+2NlRh1QO2n2nnFStiyzZyOHpuBKHhiis80kX05Jpyi\nKYZMSDKmD900ZABECpRTmyCHaQL1gPaIxCtaesRPD+pquy1LQ6DBIhl8TfxxV7MP\ng67TMq4RgQxBUIJmMcPh1uhq+1AG0DQo67NdIkAi/5hZONmDdmuGoSHQKJ62fHDL\n8CZWjtFOsSavoavejPqDNJ2W5UL/ZykWDP+lW6sk5q33JGIRhZwp4NiK6w927+IJ\nA9iKsFR6fO4tg7uWH+BQvg0L0AB+rRCFmGsyBSLpoTesW+p/13U8pZaOdzBkb1B2\nBH5jBFY2Nn9lxWjmtJO0HnqRsRaUu/noZ4+/K+KMGXevSGYIAr+xUyNJC67aPLCO\n3vQWDLkfnvXa+M6HWeARnrP+cm/CvoWPIqB+rkDVkaca4TdxfTqToev1UtuRgpJI\n8JSuKfrfTVVjcs9+tc5cHG6HX9SVe5/9G1HwgPHZr/PVIp8G6wE=\n=kfBa\n-----END PGP SIGNATURE-----", "payload": "tree e7ed815ff70f427feb9d6821274d1097b2e07f0d\nparent 6a95bf884fc1daf13355f0872add172e2459d52d\nauthor Santiago Pastorino <spastorino@gmail.com> 1585674528 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1585687044 -0300\n\nUse Place directly in librustc_mir_build, it's Copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "html_url": "https://github.com/rust-lang/rust/commit/f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a95bf884fc1daf13355f0872add172e2459d52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a95bf884fc1daf13355f0872add172e2459d52d", "html_url": "https://github.com/rust-lang/rust/commit/6a95bf884fc1daf13355f0872add172e2459d52d"}], "stats": {"total": 118, "additions": 55, "deletions": 63}, "files": [{"sha": "8c41554bc85f97444ae2e245529faa9d3c57b14a", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -9,7 +9,7 @@ use rustc_span::Span;\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     crate fn ast_block(\n         &mut self,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         block: BasicBlock,\n         ast_block: &'tcx hir::Block<'tcx>,\n         source_info: SourceInfo,\n@@ -43,7 +43,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn ast_block_stmts(\n         &mut self,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         mut block: BasicBlock,\n         span: Span,\n         stmts: Vec<StmtRef<'tcx>>,"}, {"sha": "f5828c4ac1fa12b800fc6c3a63cafdf18cc2ba2e", "filename": "src/librustc_mir_build/build/cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -34,20 +34,20 @@ impl<'tcx> CFG<'tcx> {\n         &mut self,\n         block: BasicBlock,\n         source_info: SourceInfo,\n-        place: &Place<'tcx>,\n+        place: Place<'tcx>,\n         rvalue: Rvalue<'tcx>,\n     ) {\n         self.push(\n             block,\n-            Statement { source_info, kind: StatementKind::Assign(box (*place, rvalue)) },\n+            Statement { source_info, kind: StatementKind::Assign(box (place, rvalue)) },\n         );\n     }\n \n     crate fn push_assign_constant(\n         &mut self,\n         block: BasicBlock,\n         source_info: SourceInfo,\n-        temp: &Place<'tcx>,\n+        temp: Place<'tcx>,\n         constant: Constant<'tcx>,\n     ) {\n         self.push_assign(block, source_info, temp, Rvalue::Use(Operand::Constant(box constant)));\n@@ -57,7 +57,7 @@ impl<'tcx> CFG<'tcx> {\n         &mut self,\n         block: BasicBlock,\n         source_info: SourceInfo,\n-        place: &Place<'tcx>,\n+        place: Place<'tcx>,\n     ) {\n         self.push_assign(\n             block,"}, {"sha": "9f74385b3368b1c13577c2c13e881200377d7cfa", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -341,12 +341,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let lt = self.temp(bool_ty, expr_span);\n \n         // len = len(slice)\n-        self.cfg.push_assign(block, source_info, &len, Rvalue::Len(slice));\n+        self.cfg.push_assign(block, source_info, len, Rvalue::Len(slice));\n         // lt = idx < len\n         self.cfg.push_assign(\n             block,\n             source_info,\n-            &lt,\n+            lt,\n             Rvalue::BinaryOp(BinOp::Lt, Operand::Copy(Place::from(index)), Operand::Copy(len)),\n         );\n         let msg = BoundsCheck { len: Operand::Move(len), index: Operand::Copy(Place::from(index)) };\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.cfg.push_assign(\n                             block,\n                             source_info,\n-                            &fake_borrow_temp.into(),\n+                            fake_borrow_temp.into(),\n                             Rvalue::Ref(\n                                 tcx.lifetimes.re_erased,\n                                 BorrowKind::Shallow,"}, {"sha": "20ef763e90cb4847f2e4f73c1a3f64b643cfaee9", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.cfg.push_assign(\n                         block,\n                         source_info,\n-                        &is_min,\n+                        is_min,\n                         Rvalue::BinaryOp(BinOp::Eq, arg.to_copy(), minval),\n                     );\n \n@@ -109,15 +109,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // malloc some memory of suitable type (thus far, uninitialized):\n                 let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n-                this.cfg.push_assign(block, source_info, &Place::from(result), box_);\n+                this.cfg.push_assign(block, source_info, Place::from(result), box_);\n \n                 // initialize the box contents:\n                 unpack!(\n-                    block = this.into(\n-                        &this.hir.tcx().mk_place_deref(Place::from(result)),\n-                        block,\n-                        value\n-                    )\n+                    block =\n+                        this.into(this.hir.tcx().mk_place_deref(Place::from(result)), block, value)\n                 );\n                 block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n             }\n@@ -284,7 +281,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.cfg.push_assign(\n                 block,\n                 source_info,\n-                &result_value,\n+                result_value,\n                 Rvalue::CheckedBinaryOp(op, lhs, rhs),\n             );\n             let val_fld = Field::new(0);\n@@ -317,7 +314,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(\n                     block,\n                     source_info,\n-                    &is_zero,\n+                    is_zero,\n                     Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), zero),\n                 );\n \n@@ -338,13 +335,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n-                        &is_neg_1,\n+                        is_neg_1,\n                         Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), neg_1),\n                     );\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n-                        &is_min,\n+                        is_min,\n                         Rvalue::BinaryOp(BinOp::Eq, lhs.to_copy(), min),\n                     );\n \n@@ -353,7 +350,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n-                        &of,\n+                        of,\n                         Rvalue::BinaryOp(BinOp::BitAnd, is_neg_1, is_min),\n                     );\n \n@@ -428,7 +425,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         this.cfg.push_assign(\n             block,\n             source_info,\n-            &Place::from(temp),\n+            Place::from(temp),\n             Rvalue::Ref(this.hir.tcx().lifetimes.re_erased, borrow_kind, arg_place),\n         );\n "}, {"sha": "73d95575e39d598a9558d1a13179ef2921103765", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             this.local_decls.push(local_decl)\n         };\n-        let temp_place = &Place::from(temp);\n+        let temp_place = Place::from(temp);\n \n         match expr.kind {\n             // Don't bother with StorageLive and Dead for these temporaries,"}, {"sha": "6b93755e9da7cec4c24ea4aa6d7ec2555dcd945d", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -16,7 +16,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// is assumed to be uninitialized.\n     crate fn into_expr(\n         &mut self,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         mut block: BasicBlock,\n         expr: Expr<'tcx>,\n     ) -> BlockAnd<()> {\n@@ -160,7 +160,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // introduce a unit temporary as the destination for the loop body.\n                         let tmp = this.get_unit_temp();\n                         // Execute the body, branching back to the test.\n-                        let body_block_end = unpack!(this.into(&tmp, body_block, body));\n+                        let body_block_end = unpack!(this.into(tmp, body_block, body));\n                         this.cfg.goto(body_block_end, source_info, loop_block);\n                     },\n                 );\n@@ -202,8 +202,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         is_block_tail: None,\n                     });\n                     let ptr_temp = Place::from(ptr_temp);\n-                    let block = unpack!(this.into(&ptr_temp, block, ptr));\n-                    this.into(&this.hir.tcx().mk_place_deref(ptr_temp), block, val)\n+                    let block = unpack!(this.into(ptr_temp, block, ptr));\n+                    this.into(this.hir.tcx().mk_place_deref(ptr_temp), block, val)\n                 } else {\n                     let args: Vec<_> = args\n                         .into_iter()\n@@ -228,7 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             destination: if expr.ty.is_never() {\n                                 None\n                             } else {\n-                                Some((*destination, success))\n+                                Some((destination, success))\n                             },\n                             from_hir_call,\n                         },\n@@ -373,12 +373,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Yield {\n-                        value,\n-                        resume,\n-                        resume_arg: *destination,\n-                        drop: cleanup,\n-                    },\n+                    TerminatorKind::Yield { value, resume, resume_arg: destination, drop: cleanup },\n                 );\n                 resume.unit()\n             }"}, {"sha": "92e1e10518506afff50a89c32cbaf91d2dd20d17", "filename": "src/librustc_mir_build/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } else {\n                     let rhs = unpack!(block = this.as_local_rvalue(block, rhs));\n                     let lhs = unpack!(block = this.as_place(block, lhs));\n-                    this.cfg.push_assign(block, source_info, &lhs, rhs);\n+                    this.cfg.push_assign(block, source_info, lhs, rhs);\n                 }\n \n                 this.block_context.pop();\n@@ -82,7 +82,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block =\n                         this.build_binary_op(block, op, expr_span, lhs_ty, Operand::Copy(lhs), rhs)\n                 );\n-                this.cfg.push_assign(block, source_info, &lhs, result);\n+                this.cfg.push_assign(block, source_info, lhs, result);\n \n                 this.block_context.pop();\n                 block.unit()"}, {"sha": "0baa0c833a514f8f2d8999ac637a1ee507b95e0e", "filename": "src/librustc_mir_build/build/into.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Finto.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -12,15 +12,15 @@ pub(in crate::build) trait EvalInto<'tcx> {\n     fn eval_into(\n         self,\n         builder: &mut Builder<'_, 'tcx>,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         block: BasicBlock,\n     ) -> BlockAnd<()>;\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     crate fn into<E>(\n         &mut self,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         block: BasicBlock,\n         expr: E,\n     ) -> BlockAnd<()>\n@@ -35,7 +35,7 @@ impl<'tcx> EvalInto<'tcx> for ExprRef<'tcx> {\n     fn eval_into(\n         self,\n         builder: &mut Builder<'_, 'tcx>,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         block: BasicBlock,\n     ) -> BlockAnd<()> {\n         let expr = builder.hir.mirror(self);\n@@ -47,7 +47,7 @@ impl<'tcx> EvalInto<'tcx> for Expr<'tcx> {\n     fn eval_into(\n         self,\n         builder: &mut Builder<'_, 'tcx>,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         block: BasicBlock,\n     ) -> BlockAnd<()> {\n         builder.into_expr(destination, block, self)"}, {"sha": "a98b18c0cf1d800bc52d78c465cdc8d75aa9de1f", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -10,16 +10,16 @@ use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use crate::hair::{self, *};\n+use rustc_ast::ast::Name;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::HirId;\n+use rustc_index::bit_set::BitSet;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::HirId;\n-use rustc_index::bit_set::BitSet;\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n-use rustc_ast::ast::Name;\n \n // helper functions, broken out by category:\n mod simplify;\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// * From each otherwise block to the next prebinding block.\n     crate fn match_expr(\n         &mut self,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         span: Span,\n         mut block: BasicBlock,\n         scrutinee: ExprRef<'tcx>,\n@@ -218,7 +218,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// `outer_source_info` is the SourceInfo for the whole match.\n     fn lower_match_arms(\n         &mut self,\n-        destination: &Place<'tcx>,\n+        destination: Place<'tcx>,\n         scrutinee_place: Place<'tcx>,\n         scrutinee_span: Span,\n         arm_candidates: Vec<(&'_ Arm<'tcx>, Candidate<'_, 'tcx>)>,\n@@ -364,7 +364,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatKind::Binding { mode: BindingMode::ByValue, var, subpattern: None, .. } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard, true);\n-                unpack!(block = self.into(&place, block, initializer));\n+                unpack!(block = self.into(place, block, initializer));\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard, true);\n-                unpack!(block = self.into(&place, block, initializer));\n+                unpack!(block = self.into(place, block, initializer));\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let pattern_source_info = self.source_info(irrefutable_pat.span);\n@@ -1691,7 +1691,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let scrutinee_source_info = self.source_info(scrutinee_span);\n             for &(place, temp) in fake_borrows {\n                 let borrow = Rvalue::Ref(re_erased, BorrowKind::Shallow, place);\n-                self.cfg.push_assign(block, scrutinee_source_info, &Place::from(temp), borrow);\n+                self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n             // the block to branch to if the guard fails; if there is no\n@@ -1858,7 +1858,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             match binding.binding_mode {\n                 BindingMode::ByValue => {\n                     let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, binding.source);\n-                    self.cfg.push_assign(block, source_info, &ref_for_guard, rvalue);\n+                    self.cfg.push_assign(block, source_info, ref_for_guard, rvalue);\n                 }\n                 BindingMode::ByRef(borrow_kind) => {\n                     let value_for_arm = self.storage_live_binding(\n@@ -1870,9 +1870,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n \n                     let rvalue = Rvalue::Ref(re_erased, borrow_kind, binding.source);\n-                    self.cfg.push_assign(block, source_info, &value_for_arm, rvalue);\n+                    self.cfg.push_assign(block, source_info, value_for_arm, rvalue);\n                     let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, value_for_arm);\n-                    self.cfg.push_assign(block, source_info, &ref_for_guard, rvalue);\n+                    self.cfg.push_assign(block, source_info, ref_for_guard, rvalue);\n                 }\n             }\n         }\n@@ -1910,7 +1910,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Rvalue::Ref(re_erased, borrow_kind, binding.source)\n                 }\n             };\n-            self.cfg.push_assign(block, source_info, &local, rvalue);\n+            self.cfg.push_assign(block, source_info, local, rvalue);\n         }\n     }\n "}, {"sha": "450bb0a861d74a1ca9fea80bf85f3379f04e5afd", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 let discr_ty = adt_def.repr.discr_type().to_ty(tcx);\n                 let discr = self.temp(discr_ty, test.span);\n-                self.cfg.push_assign(block, source_info, &discr, Rvalue::Discriminant(place));\n+                self.cfg.push_assign(block, source_info, discr, Rvalue::Discriminant(place));\n                 assert_eq!(values.len() + 1, targets.len());\n                 self.cfg.terminate(\n                     block,\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let actual = self.temp(usize_ty, test.span);\n \n                 // actual = len(place)\n-                self.cfg.push_assign(block, source_info, &actual, Rvalue::Len(place));\n+                self.cfg.push_assign(block, source_info, actual, Rvalue::Len(place));\n \n                 // expected = <N>\n                 let expected = self.push_usize(block, source_info, len);\n@@ -342,7 +342,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let result = self.temp(bool_ty, source_info.span);\n \n         // result = op(left, right)\n-        self.cfg.push_assign(block, source_info, &result, Rvalue::BinaryOp(op, left, right));\n+        self.cfg.push_assign(block, source_info, result, Rvalue::BinaryOp(op, left, right));\n \n         // branch based on result\n         self.cfg.terminate(\n@@ -394,7 +394,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n-                        &temp,\n+                        temp,\n                         Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), val, ty),\n                     );\n                     val = Operand::Move(temp);\n@@ -404,7 +404,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n-                        &slice,\n+                        slice,\n                         Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), expect, ty),\n                     );\n                     expect = Operand::Move(slice);"}, {"sha": "8f98dd9b70e806c876a5b7d8f6132cd502e6bcf9", "filename": "src/librustc_mir_build/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.push_assign_constant(\n             block,\n             source_info,\n-            &temp,\n+            temp,\n             Constant {\n                 span: source_info.span,\n                 user_ty: None,"}, {"sha": "cec7e5bc199666bce9467c0ee68b8820cdc088a0", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -663,7 +663,7 @@ fn construct_const<'a, 'tcx>(\n     let mut block = START_BLOCK;\n     let ast_expr = &tcx.hir().body(body_id).value;\n     let expr = builder.hir.mirror(ast_expr);\n-    unpack!(block = builder.into_expr(&Place::return_place(), block, expr));\n+    unpack!(block = builder.into_expr(Place::return_place(), block, expr));\n \n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(block, source_info, TerminatorKind::Return);\n@@ -969,7 +969,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         let body = self.hir.mirror(ast_body);\n-        self.into(&Place::return_place(), block, body)\n+        self.into(Place::return_place(), block, body)\n     }\n \n     fn set_correct_source_scope_for_arg("}, {"sha": "3689e5cb9d8a2d1912ecc1970ebb1f36bac5ffcf", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37d2b8a633016a5269bf14b12f61fa8ab85d1da/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=f37d2b8a633016a5269bf14b12f61fa8ab85d1da", "patch": "@@ -520,10 +520,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             if let Some(value) = value {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n-                unpack!(block = self.into(&destination, block, value));\n+                unpack!(block = self.into(destination, block, value));\n                 self.block_context.pop();\n             } else {\n-                self.cfg.push_assign_unit(block, source_info, &destination)\n+                self.cfg.push_assign_unit(block, source_info, destination)\n             }\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");"}]}