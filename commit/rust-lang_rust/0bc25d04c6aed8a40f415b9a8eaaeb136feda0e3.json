{"sha": "0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3", "node_id": "C_kwDOAAsO6NoAKDBiYzI1ZDA0YzZhZWQ4YTQwZjQxNWI5YThlYWFlYjEzNmZlZGEwZTM", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2021-11-22T17:18:16Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2021-11-22T20:00:19Z"}, "message": "octal_escapes: emit only one lint for all cases found each literal", "tree": {"sha": "2f21f2bb205702faf45ce3d5c22762b53ed8be35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f21f2bb205702faf45ce3d5c22762b53ed8be35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3", "html_url": "https://github.com/rust-lang/rust/commit/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "850e7f533e8dc8ed37957550e88be0b0e34d7170", "url": "https://api.github.com/repos/rust-lang/rust/commits/850e7f533e8dc8ed37957550e88be0b0e34d7170", "html_url": "https://github.com/rust-lang/rust/commit/850e7f533e8dc8ed37957550e88be0b0e34d7170"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "0e27be259856688439b7c38a44dbb0a8290979aa", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3", "patch": "@@ -6,16 +6,22 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n+use std::fmt::Write;\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for `\\0` escapes in string and byte literals that look like octal\n     /// character escapes in C.\n     ///\n     /// ### Why is this bad?\n-    /// Rust does not support octal notation for character escapes. `\\0` is always a\n-    /// null byte/character, and any following digits do not form part of the escape\n-    /// sequence.\n+    ///\n+    /// C and other languages support octal character escapes in strings, where\n+    /// a backslash is followed by up to three octal digits. For example, `\\033`\n+    /// stands for the ASCII character 27 (ESC). Rust does not support this\n+    /// notation, but has the escape code `\\0` which stands for a null\n+    /// byte/character, and any following digits do not form part of the escape\n+    /// sequence. Therefore, `\\033` is not a compiler error but the result may\n+    /// be surprising.\n     ///\n     /// ### Known problems\n     /// The actual meaning can be the intended one. `\\x00` can be used in these\n@@ -58,8 +64,9 @@ impl EarlyLintPass for OctalEscapes {\n fn check_lit(cx: &EarlyContext<'tcx>, lit: &Lit, span: Span, is_string: bool) {\n     let contents = lit.symbol.as_str();\n     let mut iter = contents.char_indices().peekable();\n+    let mut found = vec![];\n \n-    // go through the string, looking for \\0[0-7]\n+    // go through the string, looking for \\0[0-7][0-7]?\n     while let Some((from, ch)) = iter.next() {\n         if ch == '\\\\' {\n             if let Some((_, '0')) = iter.next() {\n@@ -68,19 +75,41 @@ fn check_lit(cx: &EarlyContext<'tcx>, lit: &Lit, span: Span, is_string: bool) {\n                     if let Some((_, '0'..='7')) = iter.peek() {\n                         to += 1;\n                     }\n-                    emit(cx, &contents, from, to + 1, span, is_string);\n+                    found.push((from, to + 1));\n                 }\n             }\n         }\n     }\n-}\n \n-fn emit(cx: &EarlyContext<'tcx>, contents: &str, from: usize, to: usize, span: Span, is_string: bool) {\n-    // construct a replacement escape for that case that octal was intended\n-    let escape = &contents[from + 1..to];\n-    // the maximum value is \\077, or \\x3f\n-    let literal_suggestion = u8::from_str_radix(escape, 8).ok().map(|n| format!(\"\\\\x{:02x}\", n));\n-    let prefix = if is_string { \"\" } else { \"b\" };\n+    if found.is_empty() {\n+        return;\n+    }\n+\n+    // construct two suggestion strings, one with \\x escapes with octal meaning\n+    // as in C, and one with \\x00 for null bytes.\n+    let mut suggest_1 = if is_string { \"\\\"\" } else { \"b\\\"\" }.to_string();\n+    let mut suggest_2 = suggest_1.clone();\n+    let mut index = 0;\n+    for (from, to) in found {\n+        suggest_1.push_str(&contents[index..from]);\n+        suggest_2.push_str(&contents[index..from]);\n+\n+        // construct a replacement escape\n+        // the maximum value is \\077, or \\x3f, so u8 is sufficient here\n+        if let Ok(n) = u8::from_str_radix(&contents[from + 1..to], 8) {\n+            write!(&mut suggest_1, \"\\\\x{:02x}\", n).unwrap();\n+        }\n+\n+        // append the null byte as \\x00 and the following digits literally\n+        suggest_2.push_str(\"\\\\x00\");\n+        suggest_2.push_str(&contents[from + 2..to]);\n+\n+        index = to;\n+    }\n+    suggest_1.push_str(&contents[index..]);\n+    suggest_1.push('\"');\n+    suggest_2.push_str(&contents[index..]);\n+    suggest_2.push('\"');\n \n     span_lint_and_then(\n         cx,\n@@ -96,22 +125,20 @@ fn emit(cx: &EarlyContext<'tcx>, contents: &str, from: usize, to: usize, span: S\n                 if is_string { \"character\" } else { \"byte\" }\n             ));\n             // suggestion 1: equivalent hex escape\n-            if let Some(sugg) = literal_suggestion {\n-                diag.span_suggestion(\n-                    span,\n-                    \"if an octal escape was intended, use the hexadecimal representation instead\",\n-                    format!(\"{}\\\"{}{}{}\\\"\", prefix, &contents[..from], sugg, &contents[to..]),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n+            diag.span_suggestion(\n+                span,\n+                \"if an octal escape was intended, use the hexadecimal representation instead\",\n+                suggest_1,\n+                Applicability::MaybeIncorrect,\n+            );\n             // suggestion 2: unambiguous null byte\n             diag.span_suggestion(\n                 span,\n                 &format!(\n                     \"if the null {} is intended, disambiguate using\",\n                     if is_string { \"character\" } else { \"byte\" }\n                 ),\n-                format!(\"{}\\\"{}\\\\x00{}\\\"\", prefix, &contents[..from], &contents[from + 2..]),\n+                suggest_2,\n                 Applicability::MaybeIncorrect,\n             );\n         },"}, {"sha": "54f5bbb0fc43abe0c32c79f1f240a72db21e6ed5", "filename": "tests/ui/octal_escapes.stderr", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3/tests%2Fui%2Foctal_escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3/tests%2Fui%2Foctal_escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.stderr?ref=0bc25d04c6aed8a40f415b9a8eaaeb136feda0e3", "patch": "@@ -72,28 +72,12 @@ LL |     let _bad6 = \"Text-/055/077-MoreText\";\n    = help: octal escapes are not supported, `/0` is always a null character\n help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n-LL |     let _bad6 = \"Text-/x2d/077-MoreText\";\n+LL |     let _bad6 = \"Text-/x2d/x3f-MoreText\";\n    |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n help: if the null character is intended, disambiguate using\n    |\n-LL |     let _bad6 = \"Text-/x0055/077-MoreText\";\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: octal-looking escape in string literal\n-  --> $DIR/octal_escapes.rs:10:17\n-   |\n-LL |     let _bad6 = \"Text-/055/077-MoreText\";\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: octal escapes are not supported, `/0` is always a null character\n-help: if an octal escape was intended, use the hexadecimal representation instead\n-   |\n-LL |     let _bad6 = \"Text-/055/x3f-MoreText\";\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~\n-help: if the null character is intended, disambiguate using\n-   |\n-LL |     let _bad6 = \"Text-/055/x0077-MoreText\";\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let _bad6 = \"Text-/x0055/x0077-MoreText\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: octal-looking escape in string literal\n   --> $DIR/octal_escapes.rs:11:17\n@@ -104,28 +88,12 @@ LL |     let _bad7 = \"EvenMoreText-/01/02-ShortEscapes\";\n    = help: octal escapes are not supported, `/0` is always a null character\n help: if an octal escape was intended, use the hexadecimal representation instead\n    |\n-LL |     let _bad7 = \"EvenMoreText-/x01/02-ShortEscapes\";\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: if the null character is intended, disambiguate using\n-   |\n-LL |     let _bad7 = \"EvenMoreText-/x001/02-ShortEscapes\";\n+LL |     let _bad7 = \"EvenMoreText-/x01/x02-ShortEscapes\";\n    |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: octal-looking escape in string literal\n-  --> $DIR/octal_escapes.rs:11:17\n-   |\n-LL |     let _bad7 = \"EvenMoreText-/01/02-ShortEscapes\";\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: octal escapes are not supported, `/0` is always a null character\n-help: if an octal escape was intended, use the hexadecimal representation instead\n-   |\n-LL |     let _bad7 = \"EvenMoreText-/01/x02-ShortEscapes\";\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: if the null character is intended, disambiguate using\n    |\n-LL |     let _bad7 = \"EvenMoreText-/01/x002-ShortEscapes\";\n-   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let _bad7 = \"EvenMoreText-/x001/x002-ShortEscapes\";\n+   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: octal-looking escape in string literal\n   --> $DIR/octal_escapes.rs:12:17\n@@ -159,5 +127,5 @@ help: if the null character is intended, disambiguate using\n LL |     let _bad9 = \"\u9508/x0011\u9508\";\n    |                 ~~~~~~~~~~~~\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n "}]}