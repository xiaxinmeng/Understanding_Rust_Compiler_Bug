{"sha": "6d35c67b6e39fae1efc48405b49d408b86666534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzVjNjdiNmUzOWZhZTFlZmM0ODQwNWI0OWQ0MDhiODY2NjY1MzQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-12T14:41:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-12T14:42:53Z"}, "message": "Fix convert_iter_for_each_to_for doctest", "tree": {"sha": "2ae7bb8f1c4073ccc03cd5d863c730e30385cd9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae7bb8f1c4073ccc03cd5d863c730e30385cd9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d35c67b6e39fae1efc48405b49d408b86666534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d35c67b6e39fae1efc48405b49d408b86666534", "html_url": "https://github.com/rust-lang/rust/commit/6d35c67b6e39fae1efc48405b49d408b86666534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d35c67b6e39fae1efc48405b49d408b86666534/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e505752442f849c7d37465f0e0b6aa042644787b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e505752442f849c7d37465f0e0b6aa042644787b", "html_url": "https://github.com/rust-lang/rust/commit/e505752442f849c7d37465f0e0b6aa042644787b"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "4e75a7b1407ef12f0f43e1a4bfb5d3accec8cca5", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6d35c67b6e39fae1efc48405b49d408b86666534/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d35c67b6e39fae1efc48405b49d408b86666534/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=6d35c67b6e39fae1efc48405b49d408b86666534", "patch": "@@ -11,37 +11,45 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Converts an Iterator::for_each function into a for loop.\n //\n // ```\n+// # //- /lib.rs crate:core\n+// # pub mod iter { pub mod traits { pub mod iterator { pub trait Iterator {} } } }\n+// # pub struct SomeIter;\n+// # impl self::iter::traits::iterator::Iterator for SomeIter {}\n+// # //- /lib.rs crate:main deps:core\n+// # use core::SomeIter;\n // fn main() {\n-//     let vec = vec![(1, 2), (2, 3), (3, 4)];\n-//     x.iter().for_each(|(x, y)| {\n+//     let iter = SomeIter;\n+//     iter.for_each$0(|(x, y)| {\n //         println!(\"x: {}, y: {}\", x, y);\n //     });\n // }\n // ```\n // ->\n // ```\n+// # use core::SomeIter;\n // fn main() {\n-//     let vec = vec![(1, 2), (2, 3), (3, 4)];\n-//     for (x, y) in x.iter() {\n+//     let iter = SomeIter;\n+//     for (x, y) in iter {\n //         println!(\"x: {}, y: {}\", x, y);\n //     }\n // }\n // ```\n+\n pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let method = ctx.find_node_at_offset::<ast::MethodCallExpr>()?;\n-    let stmt = method.syntax().parent().and_then(ast::ExprStmt::cast);\n \n     let closure = match method.arg_list()?.args().next()? {\n         ast::Expr::ClosureExpr(expr) => expr,\n         _ => return None,\n     };\n \n-    let (method, receiver) = validate_method_call_expr(&ctx.sema, method)?;\n+    let (method, receiver) = validate_method_call_expr(ctx, method)?;\n \n     let param_list = closure.param_list()?;\n     let param = param_list.params().next()?.pat()?;\n     let body = closure.body()?;\n \n+    let stmt = method.syntax().parent().and_then(ast::ExprStmt::cast);\n     let syntax = stmt.as_ref().map_or(method.syntax(), |stmt| stmt.syntax());\n \n     acc.add(\n@@ -65,13 +73,18 @@ pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContex\n }\n \n fn validate_method_call_expr(\n-    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    ctx: &AssistContext,\n     expr: ast::MethodCallExpr,\n ) -> Option<(ast::Expr, ast::Expr)> {\n-    if expr.name_ref()?.text() != \"for_each\" {\n+    let name_ref = expr.name_ref()?;\n+    if name_ref.syntax().text_range().intersect(ctx.frange.range).is_none()\n+        || name_ref.text() != \"for_each\"\n+    {\n         return None;\n     }\n \n+    let sema = &ctx.sema;\n+\n     let receiver = expr.receiver()?;\n     let expr = ast::Expr::MethodCallExpr(expr);\n \n@@ -85,7 +98,7 @@ fn validate_method_call_expr(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{self, check_assist};\n \n     use super::*;\n \n@@ -112,6 +125,16 @@ impl Empty {\n         check_assist(convert_iter_for_each_to_for, before, after);\n     }\n \n+    fn check_assist_not_applicable(before: &str) {\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n+            before,\n+            EMPTY_ITER_FIXTURE,\n+            FamousDefs::FIXTURE,\n+        );\n+        tests::check_assist_not_applicable(convert_iter_for_each_to_for, before);\n+    }\n+\n     #[test]\n     fn test_for_each_in_method_stmt() {\n         check_assist_with_fixtures(\n@@ -201,13 +224,24 @@ fn main() {\n \"#,\n         )\n     }\n+\n     #[test]\n     fn test_for_each_not_applicable() {\n         check_assist_not_applicable(\n-            convert_iter_for_each_to_for,\n             r#\"\n fn main() {\n-    value.$0for_each(|x| println!(\"{}\", x));\n+    ().$0for_each(|x| println!(\"{}\", x));\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_not_applicable_invalid_cursor_pos() {\n+        check_assist_not_applicable(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    Empty.iter().for_each(|(x, y)| $0println!(\"x: {}, y: {}\", x, y));\n }\"#,\n         )\n     }"}, {"sha": "3f77edd8d6e5c693a08e5357b247a21418c27c12", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d35c67b6e39fae1efc48405b49d408b86666534/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d35c67b6e39fae1efc48405b49d408b86666534/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=6d35c67b6e39fae1efc48405b49d408b86666534", "patch": "@@ -210,17 +210,24 @@ fn doctest_convert_iter_for_each_to_for() {\n     check_doc_test(\n         \"convert_iter_for_each_to_for\",\n         r#####\"\n+//- /lib.rs crate:core\n+pub mod iter { pub mod traits { pub mod iterator { pub trait Iterator {} } } }\n+pub struct SomeIter;\n+impl self::iter::traits::iterator::Iterator for SomeIter {}\n+//- /lib.rs crate:main deps:core\n+use core::SomeIter;\n fn main() {\n-    let vec = vec![(1, 2), (2, 3), (3, 4)];\n-    x.iter().for_each(|(x, y)| {\n+    let iter = SomeIter;\n+    iter.for_each$0(|(x, y)| {\n         println!(\"x: {}, y: {}\", x, y);\n     });\n }\n \"#####,\n         r#####\"\n+use core::SomeIter;\n fn main() {\n-    let vec = vec![(1, 2), (2, 3), (3, 4)];\n-    for (x, y) in x.iter() {\n+    let iter = SomeIter;\n+    for (x, y) in iter {\n         println!(\"x: {}, y: {}\", x, y);\n     }\n }"}]}