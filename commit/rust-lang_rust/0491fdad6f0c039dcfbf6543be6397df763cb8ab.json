{"sha": "0491fdad6f0c039dcfbf6543be6397df763cb8ab", "node_id": "C_kwDOAAsO6NoAKDA0OTFmZGFkNmYwYzAzOWRjZmJmNjU0M2JlNjM5N2RmNzYzY2I4YWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-17T10:32:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-17T10:32:47Z"}, "message": "Rollup merge of #99474 - aDotInTheVoid:rustdoc-json-noinline-test-cleanup, r=CraftSpider\n\nRustdoc json tests: New @hasexact test command\n\nAlot of the time, we wanted to assert that a module had an exact set of items. Most of the time this was done by asserting that the ```@count``` of the module was `n`, and then doing `n` ```@has``` checks on the module.\n\nThis was tedious, so often shortcuts were done.\n\nThis PR adds a new command to jsondocck to allow consistently expressing this behavior, and then uses it to clean up the tests.\n\n``@rustbot`` modify labels: +A-rustdoc-json +A-testsuite", "tree": {"sha": "3bfb0dd29931d0fe4ae08337616e57f208e39b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bfb0dd29931d0fe4ae08337616e57f208e39b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0491fdad6f0c039dcfbf6543be6397df763cb8ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/MPPCRBK7hj4Ov3rIwAAXYEIABE9Rnvh0jd8pDHFMgv5zWHD\n/DcEhUSnTiSKgigu+gd4fzH8J6QdDwRGhhvl42tEXiMa4y5yz8gm5DHjk/8NOdcX\nlt/vDw4cZSYiBnZWaUxnRIN/pf5eXRTVyXyVPz5qopyCUHqd12VyWSS8uxvg9Tcu\nk+vNUJS//wmgh3Wd+mgB59c8Q/n+2LIyntY+h4eOB7LNhySKEJUCX/Xpm/WvIcGe\n8eR1ygc+A73CLaRP0VC9Q8ZUgnzOItY6YM6WKgkQ9o79w/JLSYbJDt7gLHDTjsjO\nuWIvZSQodjJMJPWJjNXt0X66K71bxFVxxilTyN8eB///bDwyFvkobaRwPMYpCHY=\n=XJqj\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bfb0dd29931d0fe4ae08337616e57f208e39b4a\nparent 86c6ebee8fa0a5ad1e18e375113b06bd2849b634\nparent 760b9726722a5cb5277f4330b6d9c5db008937e8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660732367 +0200\ncommitter GitHub <noreply@github.com> 1660732367 +0200\n\nRollup merge of #99474 - aDotInTheVoid:rustdoc-json-noinline-test-cleanup, r=CraftSpider\n\nRustdoc json tests: New @hasexact test command\n\nAlot of the time, we wanted to assert that a module had an exact set of items. Most of the time this was done by asserting that the ```@count``` of the module was `n`, and then doing `n` ```@has``` checks on the module.\n\nThis was tedious, so often shortcuts were done.\n\nThis PR adds a new command to jsondocck to allow consistently expressing this behavior, and then uses it to clean up the tests.\n\n``@rustbot`` modify labels: +A-rustdoc-json +A-testsuite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0491fdad6f0c039dcfbf6543be6397df763cb8ab", "html_url": "https://github.com/rust-lang/rust/commit/0491fdad6f0c039dcfbf6543be6397df763cb8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0491fdad6f0c039dcfbf6543be6397df763cb8ab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c6ebee8fa0a5ad1e18e375113b06bd2849b634", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c6ebee8fa0a5ad1e18e375113b06bd2849b634", "html_url": "https://github.com/rust-lang/rust/commit/86c6ebee8fa0a5ad1e18e375113b06bd2849b634"}, {"sha": "760b9726722a5cb5277f4330b6d9c5db008937e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/760b9726722a5cb5277f4330b6d9c5db008937e8", "html_url": "https://github.com/rust-lang/rust/commit/760b9726722a5cb5277f4330b6d9c5db008937e8"}], "stats": {"total": 150, "additions": 111, "deletions": 39}, "files": [{"sha": "9ff1f60c0d5c7d96df05ac1e0aab365b1b7a1689", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -4,27 +4,28 @@\n // @is nested.json \"$.crate_version\" \\\"1.0.0\\\"\n // @is - \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n-// @count - \"$.index[*][?(@.name=='nested')].inner.items[*]\" 1\n+\n+// @set l1_id = - \"$.index[*][?(@.name=='l1')].id\"\n+// @ismany - \"$.index[*][?(@.name=='nested')].inner.items[*]\" $l1_id\n \n // @is nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n-// @count - \"$.index[*][?(@.name=='l1')].inner.items[*]\" 2\n pub mod l1 {\n-\n     // @is nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n     // @is - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n-    // @count - \"$.index[*][?(@.name=='l3')].inner.items[*]\" 1\n     // @set l3_id = - \"$.index[*][?(@.name=='l3')].id\"\n-    // @has - \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id\n     pub mod l3 {\n \n         // @is nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n         // @is - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n         // @set l4_id = - \"$.index[*][?(@.name=='L4')].id\"\n-        // @has - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n+        // @ismany - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;\n     }\n     // @is nested.json \"$.index[*][?(@.inner.source=='l3::L4')].kind\" \\\"import\\\"\n     // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.glob\" false\n+    // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.id\" $l4_id\n+    // @set l4_use_id = - \"$.index[*][?(@.inner.source=='l3::L4')].id\"\n     pub use l3::L4;\n }\n+// @ismany - \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id $l4_use_id"}, {"sha": "4fe25904423ed2023480ac84ace93aecf2fe99e0", "filename": "src/test/rustdoc-json/reexport/glob_extern.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -4,15 +4,20 @@\n #![feature(no_core)]\n \n // @is glob_extern.json \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n-// @is glob_extern.json \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n+// @is - \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n mod mod1 {\n     extern \"C\" {\n-        // @has - \"$.index[*][?(@.name=='public_fn')].id\"\n+        // @set public_fn_id = - \"$.index[*][?(@.name=='public_fn')].id\"\n         pub fn public_fn();\n         // @!has - \"$.index[*][?(@.name=='private_fn')]\"\n         fn private_fn();\n     }\n+    // @ismany - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $public_fn_id\n+    // @set mod1_id = - \"$.index[*][?(@.name=='mod1')].id\"\n }\n \n // @is - \"$.index[*][?(@.kind=='import')].inner.glob\" true\n+// @is - \"$.index[*][?(@.kind=='import')].inner.id\" $mod1_id\n+// @set use_id = - \"$.index[*][?(@.kind=='import')].id\"\n+// @ismany - \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $use_id\n pub use mod1::*;"}, {"sha": "04460a817f1308d91cca16d7dde8688550e08337", "filename": "src/test/rustdoc-json/reexport/glob_private.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -16,7 +16,7 @@ mod mod1 {\n         struct Mod2Private;\n     }\n \n-    // @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')]\"\n+    // @set mod2_use_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')].id\"\n     pub use self::mod2::*;\n \n     // @set m1pub_id = - \"$.index[*][?(@.name=='Mod1Public')].id\"\n@@ -25,8 +25,9 @@ mod mod1 {\n     struct Mod1Private;\n }\n \n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')]\"\n+// @set mod1_use_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')].id\"\n pub use mod1::*;\n \n-// @has - \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n-// @has - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id\n+// @ismany - \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n+// @ismany - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id $mod2_use_id\n+// @ismany - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $mod1_use_id"}, {"sha": "09302ee3acb2daaa82807dfd18db4b8482f3b46a", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -3,7 +3,7 @@\n \n pub mod foo {\n     // @set bar_id = in_root_and_mod_pub.json \"$.index[*][?(@.name=='Bar')].id\"\n-    // @has - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    // @ismany - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n     pub struct Bar;\n }\n \n@@ -15,6 +15,6 @@ pub use foo::Bar;\n pub mod baz {\n     // @set baz_import_id = - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n     // @is - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n-    // @has - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    // @ismany - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n     pub use crate::foo::Bar;\n }"}, {"sha": "0959736f309887f5b0c8da8817fd9ce1e52d057e", "filename": "src/test/rustdoc-json/reexport/macro.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -3,15 +3,13 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @count macro.json \"$.index[*][?(@.name=='macro')].inner.items[*]\" 2\n-\n // @set repro_id = macro.json \"$.index[*][?(@.name=='repro')].id\"\n-// @has - \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id\n #[macro_export]\n macro_rules! repro {\n     () => {};\n }\n \n // @set repro2_id = macro.json \"$.index[*][?(@.inner.name=='repro2')].id\"\n-// @has - \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro2_id\n pub use crate::repro as repro2;\n+\n+// @ismany macro.json \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id $repro2_id"}, {"sha": "a76d352b28ba4a855191858575b6b2b09ec42668", "filename": "src/test/rustdoc-json/reexport/private_twice_one_inline.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -1,18 +1,28 @@\n // aux-build:pub-struct.rs\n+// ignore-tidy-linelength\n \n-// Test for the ICE in rust/83057\n-// Am external type re-exported with different attributes shouldn't cause an error\n+// Test for the ICE in https://github.com/rust-lang/rust/issues/83057\n+// An external type re-exported with different attributes shouldn't cause an error\n \n #![no_core]\n #![feature(no_core)]\n \n extern crate pub_struct as foo;\n-\n #[doc(inline)]\n+\n+// @set crate_use_id = private_twice_one_inline.json \"$.index[*][?(@.docs=='Hack A')].id\"\n+// @set foo_id = - \"$.index[*][?(@.docs=='Hack A')].inner.id\"\n+/// Hack A\n pub use foo::Foo;\n \n+// @set bar_id = - \"$.index[*][?(@.name=='bar')].id\"\n pub mod bar {\n+    // @is - \"$.index[*][?(@.docs=='Hack B')].inner.id\" $foo_id\n+    // @set bar_use_id = - \"$.index[*][?(@.docs=='Hack B')].id\"\n+    // @ismany - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $bar_use_id\n+    /// Hack B\n     pub use foo::Foo;\n }\n \n-// @count private_twice_one_inline.json \"$.index[*][?(@.kind=='import')]\" 2\n+// @ismany - \"$.index[*][?(@.kind=='import')].id\" $crate_use_id $bar_use_id\n+// @ismany - \"$.index[*][?(@.name=='private_twice_one_inline')].inner.items[*]\" $bar_id $crate_use_id"}, {"sha": "cd8212cf34419d5bf4ec47081ff4ea7b6403f62b", "filename": "src/test/rustdoc-json/reexport/private_two_names.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -1,4 +1,6 @@\n-// Test for the ICE in rust/83720\n+// ignore-tidy-linelength\n+\n+// Test for the ICE in https://github.com/rust-lang/rust/issues/83720\n // A pub-in-private type re-exported under two different names shouldn't cause an error\n \n #![no_core]\n@@ -7,11 +9,15 @@\n // @is private_two_names.json \"$.index[*][?(@.name=='style')].kind\" \\\"module\\\"\n // @is private_two_names.json \"$.index[*][?(@.name=='style')].inner.is_stripped\" \"true\"\n mod style {\n-    // @has - \"$.index[*](?(@.name=='Color'))\"\n+    // @set color_struct_id = - \"$.index[*][?(@.kind=='struct' && @.name=='Color')].id\"\n     pub struct Color;\n }\n \n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')]\"\n+// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].inner.id\" $color_struct_id\n+// @set color_export_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].id\"\n pub use style::Color;\n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')]\"\n+// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].inner.id\" $color_struct_id\n+// @set colour_export_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].id\"\n pub use style::Color as Colour;\n+\n+// @ismany - \"$.index[*][?(@.name=='private_two_names')].inner.items[*]\" $color_export_id $colour_export_id"}, {"sha": "d41556974b43b5886003c133f7be5c3198802748", "filename": "src/test/rustdoc-json/reexport/rename_public.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -4,14 +4,14 @@\n #![feature(no_core)]\n \n // @set inner_id = rename_public.json \"$.index[*][?(@.name=='inner')].id\"\n-// @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id\n pub mod inner {\n     // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n-    // @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n     pub struct Public;\n }\n // @set import_id = - \"$.index[*][?(@.inner.name=='NewName')].id\"\n // @!has - \"$.index[*][?(@.inner.name=='Public')]\"\n-// @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $import_id\n // @is - \"$.index[*][?(@.inner.name=='NewName')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public as NewName;\n+\n+// @ismany - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id $import_id"}, {"sha": "1d76c7e139bdb8814b1b1f20c5fcee85c5e919ab", "filename": "src/test/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -1,15 +1,23 @@\n+// ignore-tidy-linelength\n+\n // Regression test for <https://github.com/rust-lang/rust/issues/97432>.\n \n #![feature(no_core)]\n #![no_std]\n #![no_core]\n \n // @has same_type_reexported_more_than_once.json\n-// @has - \"$.index[*][?(@.name=='Trait')]\"\n-pub use inner::Trait;\n-// @has - \"$.index[*].inner[?(@.name=='Reexport')].id\"\n-pub use inner::Trait as Reexport;\n \n mod inner {\n+    // @set trait_id = - \"$.index[*][?(@.name=='Trait')].id\"\n     pub trait Trait {}\n }\n+\n+// @set export_id = - \"$.index[*][?(@.inner.name=='Trait')].id\"\n+// @is - \"$.index[*][?(@.inner.name=='Trait')].inner.id\" $trait_id\n+pub use inner::Trait;\n+// @set reexport_id = - \"$.index[*][?(@.inner.name=='Reexport')].id\"\n+// @is - \"$.index[*][?(@.inner.name=='Reexport')].inner.id\" $trait_id\n+pub use inner::Trait as Reexport;\n+\n+// @ismany - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id $export_id"}, {"sha": "55523bcd1deef48754a76831190d00c37925bafa", "filename": "src/test/rustdoc-json/reexport/simple_private.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -10,6 +10,8 @@ mod inner {\n }\n \n // @is - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"Public\\\"\n+// @set use_id = - \"$.index[*][?(@.kind=='import')].id\"\n pub use inner::Public;\n \n-// @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id\n+// @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id\n+// @ismany - \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $use_id"}, {"sha": "a3156a2b33a8e02f8834501a178dcd74c8812ac4", "filename": "src/test/rustdoc-json/reexport/simple_public.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -4,15 +4,15 @@\n #![feature(no_core)]\n \n // @set inner_id = simple_public.json \"$.index[*][?(@.name=='inner')].id\"\n-// @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $inner_id\n pub mod inner {\n \n     // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n-    // @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n     pub struct Public;\n }\n \n // @set import_id = - \"$.index[*][?(@.inner.name=='Public')].id\"\n-// @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id\n // @is - \"$.index[*][?(@.inner.name=='Public')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public;\n+\n+// @ismany - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id $inner_id"}, {"sha": "fd49a0890c0df7d6090a1f7f16588fe9000635e0", "filename": "src/test/rustdoc-json/type/fn_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -2,8 +2,7 @@\n \n // @is fn_lifetime.json \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n \n-// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+// @ismany    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n // @has   - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n // @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n // @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0"}, {"sha": "022f7eb8e02d0da25ba1426bfdc6d9a581f18a49", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0491fdad6f0c039dcfbf6543be6397df763cb8ab/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=0491fdad6f0c039dcfbf6543be6397df763cb8ab", "patch": "@@ -50,13 +50,15 @@ pub enum CommandKind {\n     Has,\n     Count,\n     Is,\n+    IsMany,\n     Set,\n }\n \n impl CommandKind {\n     fn validate(&self, args: &[String], command_num: usize, lineno: usize) -> bool {\n         let count = match self {\n             CommandKind::Has => (1..=3).contains(&args.len()),\n+            CommandKind::IsMany => args.len() >= 3,\n             CommandKind::Count | CommandKind::Is => 3 == args.len(),\n             CommandKind::Set => 4 == args.len(),\n         };\n@@ -89,6 +91,7 @@ impl fmt::Display for CommandKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let text = match self {\n             CommandKind::Has => \"has\",\n+            CommandKind::IsMany => \"ismany\",\n             CommandKind::Count => \"count\",\n             CommandKind::Is => \"is\",\n             CommandKind::Set => \"set\",\n@@ -137,6 +140,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n             \"has\" => CommandKind::Has,\n             \"count\" => CommandKind::Count,\n             \"is\" => CommandKind::Is,\n+            \"ismany\" => CommandKind::IsMany,\n             \"set\" => CommandKind::Set,\n             _ => {\n                 print_err(&format!(\"Unrecognized command name `@{}`\", cmd), lineno);\n@@ -227,6 +231,44 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 _ => unreachable!(),\n             }\n         }\n+        CommandKind::IsMany => {\n+            // @ismany <path> <jsonpath> <value>...\n+            let (path, query, values) = if let [path, query, values @ ..] = &command.args[..] {\n+                (path, query, values)\n+            } else {\n+                unreachable!(\"Checked in CommandKind::validate\")\n+            };\n+            let val = cache.get_value(path)?;\n+            let got_values = select(&val, &query).unwrap();\n+            assert!(!command.negated, \"`@!ismany` is not supported\");\n+\n+            // Serde json doesn't implement Ord or Hash for Value, so we must\n+            // use a Vec here. While in theory that makes setwize equality\n+            // O(n^2), in practice n will never be large enought to matter.\n+            let expected_values =\n+                values.iter().map(|v| string_to_value(v, cache)).collect::<Vec<_>>();\n+            if expected_values.len() != got_values.len() {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"Expected {} values, but `{}` matched to {} values ({:?})\",\n+                        expected_values.len(),\n+                        query,\n+                        got_values.len(),\n+                        got_values\n+                    ),\n+                    command,\n+                ));\n+            };\n+            for got_value in got_values {\n+                if !expected_values.iter().any(|exp| &**exp == got_value) {\n+                    return Err(CkError::FailedCheck(\n+                        format!(\"`{}` has match {:?}, which was not expected\", query, got_value),\n+                        command,\n+                    ));\n+                }\n+            }\n+            true\n+        }\n         CommandKind::Count => {\n             // @count <path> <jsonpath> <count> = Check that the jsonpath matches exactly [count] times\n             assert_eq!(command.args.len(), 3);"}]}