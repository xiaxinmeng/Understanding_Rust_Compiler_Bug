{"sha": "ae282d8da63a82077361bc142b2b9a272a2eac64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMjgyZDhkYTYzYTgyMDc3MzYxYmMxNDJiMmI5YTI3MmEyZWFjNjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T07:23:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T07:23:29Z"}, "message": "add ast::tokens", "tree": {"sha": "cdb7b23e4abf9623286fbf5ef34a0108c0b5f25e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb7b23e4abf9623286fbf5ef34a0108c0b5f25e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae282d8da63a82077361bc142b2b9a272a2eac64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae282d8da63a82077361bc142b2b9a272a2eac64", "html_url": "https://github.com/rust-lang/rust/commit/ae282d8da63a82077361bc142b2b9a272a2eac64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae282d8da63a82077361bc142b2b9a272a2eac64/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f874d372bb7f756dfa6ebc22ca838657c8ff1539", "url": "https://api.github.com/repos/rust-lang/rust/commits/f874d372bb7f756dfa6ebc22ca838657c8ff1539", "html_url": "https://github.com/rust-lang/rust/commit/f874d372bb7f756dfa6ebc22ca838657c8ff1539"}], "stats": {"total": 243, "additions": 124, "deletions": 119}, "files": [{"sha": "19a2d05bcbd347f1c8d24d9fc24f6a59865de7e7", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -5,7 +5,7 @@ use crate::{Assist, AssistId, AssistCtx};\n use hir::Resolver;\n use hir::db::HirDatabase;\n use ra_syntax::{SmolStr, SyntaxKind, TextRange, TextUnit, TreeArc};\n-use ra_syntax::ast::{self, AstNode, FnDef, ImplItem, ImplItemKind, NameOwner};\n+use ra_syntax::ast::{self, AstNode, AstToken, FnDef, ImplItem, ImplItemKind, NameOwner};\n use ra_db::FilePosition;\n use ra_fmt::{leading_indent, reindent};\n "}, {"sha": "950c2910b80f300ee3842f1e53af1fadb65c698d", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -1,14 +1,9 @@\n use hir::{\n     db::HirDatabase,\n-    source_binder::function_from_child_node\n+    source_binder::function_from_child_node,\n };\n use ra_syntax::{\n-    ast::{\n-        self,\n-        AstNode,\n-        PatKind,\n-        ExprKind\n-    },\n+    ast::{self, AstNode, AstToken, PatKind, ExprKind},\n     TextRange,\n };\n "}, {"sha": "85b7ce2503fa741dcf4e62aa5f302688c92532a2", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -2,9 +2,8 @@\n //!\n use itertools::Itertools;\n use ra_syntax::{\n-    AstNode,\n     SyntaxNode, SyntaxKind::*, SyntaxToken, SyntaxKind,\n-    ast,\n+    ast::{self, AstNode, AstToken},\n     algo::generate,\n };\n "}, {"sha": "7293ba3590c3f90ad41e8c6535f6df425f186a49", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -1,9 +1,9 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    Direction, SyntaxNode, TextRange, TextUnit, AstNode, SyntaxElement,\n+    Direction, SyntaxNode, TextRange, TextUnit, SyntaxElement,\n     algo::{find_covering_element, find_token_at_offset, TokenAtOffset},\n     SyntaxKind::*, SyntaxToken,\n-    ast::Comment,\n+    ast::{self, AstNode, AstToken},\n };\n \n use crate::{FileRange, db::RootDatabase};\n@@ -55,7 +55,7 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n             if token.range() != range {\n                 return Some(token.range());\n             }\n-            if let Some(comment) = Comment::cast(token) {\n+            if let Some(comment) = ast::Comment::cast(token) {\n                 if let Some(range) = extend_comments(comment) {\n                     return Some(range);\n                 }\n@@ -176,7 +176,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n     None\n }\n \n-fn extend_comments(comment: Comment) -> Option<TextRange> {\n+fn extend_comments(comment: ast::Comment) -> Option<TextRange> {\n     let prev = adj_comments(comment, Direction::Prev);\n     let next = adj_comments(comment, Direction::Next);\n     if prev != next {\n@@ -186,14 +186,14 @@ fn extend_comments(comment: Comment) -> Option<TextRange> {\n     }\n }\n \n-fn adj_comments(comment: Comment, dir: Direction) -> Comment {\n+fn adj_comments(comment: ast::Comment, dir: Direction) -> ast::Comment {\n     let mut res = comment;\n     for element in comment.syntax().siblings_with_tokens(dir) {\n         let token = match element.as_token() {\n             None => break,\n             Some(token) => token,\n         };\n-        if let Some(c) = Comment::cast(token) {\n+        if let Some(c) = ast::Comment::cast(token) {\n             res = c\n         } else if token.kind() != WHITESPACE || token.text().contains(\"\\n\\n\") {\n             break;"}, {"sha": "eada0b7ded5466434abb26f3e6bbd1ac344438c0", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -1,9 +1,9 @@\n use rustc_hash::FxHashSet;\n \n use ra_syntax::{\n-    AstNode, SourceFile, SyntaxNode, TextRange, Direction, SyntaxElement,\n+    SourceFile, SyntaxNode, TextRange, Direction, SyntaxElement,\n     SyntaxKind::{self, *},\n-    ast::{self, VisibilityOwner, Comment},\n+    ast::{self, AstNode, AstToken, VisibilityOwner},\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -139,8 +139,8 @@ fn contiguous_range_for_group_unless<'a>(\n }\n \n fn contiguous_range_for_comment<'a>(\n-    first: Comment<'a>,\n-    visited: &mut FxHashSet<Comment<'a>>,\n+    first: ast::Comment<'a>,\n+    visited: &mut FxHashSet<ast::Comment<'a>>,\n ) -> Option<TextRange> {\n     visited.insert(first);\n \n@@ -157,7 +157,7 @@ fn contiguous_range_for_comment<'a>(\n                         continue;\n                     }\n                 }\n-                if let Some(c) = Comment::cast(token) {\n+                if let Some(c) = ast::Comment::cast(token) {\n                     if c.flavor() == group_flavor {\n                         visited.insert(c);\n                         last = c;"}, {"sha": "59871731198a9977e90c0da9d717962246cf3d72", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -1,9 +1,9 @@\n use itertools::Itertools;\n use ra_syntax::{\n-    SourceFile, TextRange, TextUnit, AstNode, SyntaxNode, SyntaxElement, SyntaxToken,\n+    SourceFile, TextRange, TextUnit, SyntaxNode, SyntaxElement, SyntaxToken,\n     SyntaxKind::{self, WHITESPACE, COMMA, R_CURLY, R_PAREN, R_BRACK},\n     algo::{find_covering_element, non_trivia_sibling},\n-    ast,\n+    ast::{self, AstNode, AstToken},\n     Direction,\n };\n use ra_fmt::{"}, {"sha": "aeeeea082122dd9183af4dbe8c3c068df9a884bb", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -2,7 +2,7 @@ use ra_syntax::{\n     AstNode, SourceFile, SyntaxKind::*,\n     TextUnit, TextRange, SyntaxToken,\n     algo::{find_node_at_offset, find_token_at_offset, TokenAtOffset},\n-    ast::{self},\n+    ast::{self, AstToken},\n };\n use ra_fmt::leading_indent;\n use ra_text_edit::{TextEdit, TextEditBuilder};"}, {"sha": "beef2c6e2c2638b854e1c6a1a40d6c5ad7b0fe3f", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 12, "deletions": 94, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -1,6 +1,7 @@\n //! Abstract Syntax Tree, layered on top of untyped `SyntaxNode`s\n mod generated;\n mod traits;\n+mod tokens;\n \n use std::marker::PhantomData;\n \n@@ -15,6 +16,7 @@ use crate::{\n pub use self::{\n     generated::*,\n     traits::*,\n+    tokens::*,\n };\n \n /// The main trait to go from untyped `SyntaxNode`  to a typed ast. The\n@@ -49,6 +51,16 @@ impl<'a, N: AstNode + 'a> Iterator for AstChildren<'a, N> {\n     }\n }\n \n+pub trait AstToken<'a> {\n+    fn cast(token: SyntaxToken<'a>) -> Option<Self>\n+    where\n+        Self: Sized;\n+    fn syntax(&self) -> SyntaxToken<'a>;\n+    fn text(&self) -> &'a SmolStr {\n+        self.syntax().text()\n+    }\n+}\n+\n impl Attr {\n     pub fn is_inner(&self) -> bool {\n         let tt = match self.value() {\n@@ -96,100 +108,6 @@ impl Attr {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct Comment<'a>(SyntaxToken<'a>);\n-\n-impl<'a> Comment<'a> {\n-    pub fn cast(token: SyntaxToken<'a>) -> Option<Self> {\n-        if token.kind() == COMMENT {\n-            Some(Comment(token))\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn syntax(&self) -> SyntaxToken<'a> {\n-        self.0\n-    }\n-\n-    pub fn text(&self) -> &'a SmolStr {\n-        self.0.text()\n-    }\n-\n-    pub fn flavor(&self) -> CommentFlavor {\n-        let text = self.text();\n-        if text.starts_with(\"///\") {\n-            CommentFlavor::Doc\n-        } else if text.starts_with(\"//!\") {\n-            CommentFlavor::ModuleDoc\n-        } else if text.starts_with(\"//\") {\n-            CommentFlavor::Line\n-        } else {\n-            CommentFlavor::Multiline\n-        }\n-    }\n-\n-    pub fn is_doc_comment(&self) -> bool {\n-        self.flavor().is_doc_comment()\n-    }\n-\n-    pub fn prefix(&self) -> &'static str {\n-        self.flavor().prefix()\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq)]\n-pub enum CommentFlavor {\n-    Line,\n-    Doc,\n-    ModuleDoc,\n-    Multiline,\n-}\n-\n-impl CommentFlavor {\n-    pub fn prefix(&self) -> &'static str {\n-        use self::CommentFlavor::*;\n-        match *self {\n-            Line => \"//\",\n-            Doc => \"///\",\n-            ModuleDoc => \"//!\",\n-            Multiline => \"/*\",\n-        }\n-    }\n-\n-    pub fn is_doc_comment(&self) -> bool {\n-        match self {\n-            CommentFlavor::Doc | CommentFlavor::ModuleDoc => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n-pub struct Whitespace<'a>(SyntaxToken<'a>);\n-\n-impl<'a> Whitespace<'a> {\n-    pub fn cast(token: SyntaxToken<'a>) -> Option<Self> {\n-        if token.kind() == WHITESPACE {\n-            Some(Whitespace(token))\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn syntax(&self) -> SyntaxToken<'a> {\n-        self.0\n-    }\n-\n-    pub fn text(&self) -> &'a SmolStr {\n-        self.0.text()\n-    }\n-\n-    pub fn spans_multiple_lines(&self) -> bool {\n-        let text = self.text();\n-        text.find('\\n').map_or(false, |idx| text[idx + 1..].contains('\\n'))\n-    }\n-}\n-\n impl Name {\n     pub fn text(&self) -> &SmolStr {\n         let ident = self.syntax().first_child_or_token().unwrap().as_token().unwrap();"}, {"sha": "c830cdccf7e787c9999972d2801bf96d5eafc372", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -0,0 +1,93 @@\n+use crate::{\n+    SyntaxToken,\n+    SyntaxKind::{COMMENT, WHITESPACE},\n+    ast::AstToken,\n+};\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct Comment<'a>(SyntaxToken<'a>);\n+\n+impl<'a> AstToken<'a> for Comment<'a> {\n+    fn cast(token: SyntaxToken<'a>) -> Option<Self> {\n+        if token.kind() == COMMENT {\n+            Some(Comment(token))\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> SyntaxToken<'a> {\n+        self.0\n+    }\n+}\n+\n+impl<'a> Comment<'a> {\n+    pub fn flavor(&self) -> CommentFlavor {\n+        let text = self.text();\n+        if text.starts_with(\"///\") {\n+            CommentFlavor::Doc\n+        } else if text.starts_with(\"//!\") {\n+            CommentFlavor::ModuleDoc\n+        } else if text.starts_with(\"//\") {\n+            CommentFlavor::Line\n+        } else {\n+            CommentFlavor::Multiline\n+        }\n+    }\n+\n+    pub fn is_doc_comment(&self) -> bool {\n+        self.flavor().is_doc_comment()\n+    }\n+\n+    pub fn prefix(&self) -> &'static str {\n+        self.flavor().prefix()\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub enum CommentFlavor {\n+    Line,\n+    Doc,\n+    ModuleDoc,\n+    Multiline,\n+}\n+\n+impl CommentFlavor {\n+    pub fn prefix(&self) -> &'static str {\n+        use self::CommentFlavor::*;\n+        match *self {\n+            Line => \"//\",\n+            Doc => \"///\",\n+            ModuleDoc => \"//!\",\n+            Multiline => \"/*\",\n+        }\n+    }\n+\n+    pub fn is_doc_comment(&self) -> bool {\n+        match self {\n+            CommentFlavor::Doc | CommentFlavor::ModuleDoc => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+pub struct Whitespace<'a>(SyntaxToken<'a>);\n+\n+impl<'a> AstToken<'a> for Whitespace<'a> {\n+    fn cast(token: SyntaxToken<'a>) -> Option<Self> {\n+        if token.kind() == WHITESPACE {\n+            Some(Whitespace(token))\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> SyntaxToken<'a> {\n+        self.0\n+    }\n+}\n+\n+impl<'a> Whitespace<'a> {\n+    pub fn spans_multiple_lines(&self) -> bool {\n+        let text = self.text();\n+        text.find('\\n').map_or(false, |idx| text[idx + 1..].contains('\\n'))\n+    }\n+}"}, {"sha": "f9021d7bf722b492d3526b3e898dae1790d8774a", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae282d8da63a82077361bc142b2b9a272a2eac64/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=ae282d8da63a82077361bc142b2b9a272a2eac64", "patch": "@@ -2,7 +2,7 @@ use itertools::Itertools;\n \n use crate::{\n     syntax_node::{SyntaxNodeChildren, SyntaxElementChildren},\n-    ast::{self, child_opt, children, AstNode, AstChildren},\n+    ast::{self, child_opt, children, AstNode, AstToken, AstChildren},\n };\n \n pub trait TypeAscriptionOwner: AstNode {"}]}