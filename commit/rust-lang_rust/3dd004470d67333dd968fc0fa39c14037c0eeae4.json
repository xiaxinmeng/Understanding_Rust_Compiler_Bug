{"sha": "3dd004470d67333dd968fc0fa39c14037c0eeae4", "node_id": "C_kwDOAAsO6NoAKDNkZDAwNDQ3MGQ2NzMzM2RkOTY4ZmMwZmEzOWMxNDAzN2MwZWVhZTQ", "commit": {"author": {"name": "CastilloDel", "email": "delcastillodelarosadaniel@gmail.com", "date": "2023-02-05T17:59:31Z"}, "committer": {"name": "CastilloDel", "email": "delcastillodelarosadaniel@gmail.com", "date": "2023-02-05T18:01:28Z"}, "message": "Clean up and comment EmitterWriter.draw_code_line", "tree": {"sha": "a9fc894f3d909665fdb5f75407def65632a46a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9fc894f3d909665fdb5f75407def65632a46a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd004470d67333dd968fc0fa39c14037c0eeae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd004470d67333dd968fc0fa39c14037c0eeae4", "html_url": "https://github.com/rust-lang/rust/commit/3dd004470d67333dd968fc0fa39c14037c0eeae4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd004470d67333dd968fc0fa39c14037c0eeae4/comments", "author": {"login": "CastilloDel", "id": 52696601, "node_id": "MDQ6VXNlcjUyNjk2NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/52696601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CastilloDel", "html_url": "https://github.com/CastilloDel", "followers_url": "https://api.github.com/users/CastilloDel/followers", "following_url": "https://api.github.com/users/CastilloDel/following{/other_user}", "gists_url": "https://api.github.com/users/CastilloDel/gists{/gist_id}", "starred_url": "https://api.github.com/users/CastilloDel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CastilloDel/subscriptions", "organizations_url": "https://api.github.com/users/CastilloDel/orgs", "repos_url": "https://api.github.com/users/CastilloDel/repos", "events_url": "https://api.github.com/users/CastilloDel/events{/privacy}", "received_events_url": "https://api.github.com/users/CastilloDel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CastilloDel", "id": 52696601, "node_id": "MDQ6VXNlcjUyNjk2NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/52696601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CastilloDel", "html_url": "https://github.com/CastilloDel", "followers_url": "https://api.github.com/users/CastilloDel/followers", "following_url": "https://api.github.com/users/CastilloDel/following{/other_user}", "gists_url": "https://api.github.com/users/CastilloDel/gists{/gist_id}", "starred_url": "https://api.github.com/users/CastilloDel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CastilloDel/subscriptions", "organizations_url": "https://api.github.com/users/CastilloDel/orgs", "repos_url": "https://api.github.com/users/CastilloDel/repos", "events_url": "https://api.github.com/users/CastilloDel/events{/privacy}", "received_events_url": "https://api.github.com/users/CastilloDel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0279991d630d51f12a1d4b2933d05eecc4464f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0279991d630d51f12a1d4b2933d05eecc4464f", "html_url": "https://github.com/rust-lang/rust/commit/cf0279991d630d51f12a1d4b2933d05eecc4464f"}], "stats": {"total": 91, "additions": 32, "deletions": 59}, "files": [{"sha": "9768526a2f47d52088fc500e6643b7efad8eca8e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 32, "deletions": 59, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/3dd004470d67333dd968fc0fa39c14037c0eeae4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd004470d67333dd968fc0fa39c14037c0eeae4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=3dd004470d67333dd968fc0fa39c14037c0eeae4", "patch": "@@ -1882,9 +1882,8 @@ impl EmitterWriter {\n                             &mut buffer,\n                             &mut row_num,\n                             &Vec::new(),\n-                            p,\n+                            p + line_start,\n                             l,\n-                            line_start,\n                             show_code_change,\n                             max_line_num_len,\n                             &file_lines,\n@@ -1907,9 +1906,8 @@ impl EmitterWriter {\n                                 &mut buffer,\n                                 &mut row_num,\n                                 &Vec::new(),\n-                                p,\n+                                p + line_start,\n                                 l,\n-                                line_start,\n                                 show_code_change,\n                                 max_line_num_len,\n                                 &file_lines,\n@@ -1925,9 +1923,8 @@ impl EmitterWriter {\n                                 &mut buffer,\n                                 &mut row_num,\n                                 &Vec::new(),\n-                                p,\n+                                p + line_start,\n                                 l,\n-                                line_start,\n                                 show_code_change,\n                                 max_line_num_len,\n                                 &file_lines,\n@@ -1941,9 +1938,8 @@ impl EmitterWriter {\n                     &mut buffer,\n                     &mut row_num,\n                     highlight_parts,\n-                    line_pos,\n+                    line_pos + line_start,\n                     line,\n-                    line_start,\n                     show_code_change,\n                     max_line_num_len,\n                     &file_lines,\n@@ -2167,49 +2163,44 @@ impl EmitterWriter {\n         buffer: &mut StyledBuffer,\n         row_num: &mut usize,\n         highlight_parts: &Vec<SubstitutionHighlight>,\n-        line_pos: usize,\n-        line: &str,\n-        line_start: usize,\n+        line_num: usize,\n+        line_to_add: &str,\n         show_code_change: DisplaySuggestion,\n         max_line_num_len: usize,\n         file_lines: &FileLines,\n         is_multiline: bool,\n     ) {\n         if let DisplaySuggestion::Diff = show_code_change {\n-            // Add the line number for both addition and removal to drive the point home.\n-            //\n-            // N - fn foo<A: T>(bar: A) {\n-            // N + fn foo(bar: impl T) {\n-            let number_of_lines = file_lines.lines.len();\n-            for (index, line_to_remove) in\n-                file_lines.lines.iter().take(number_of_lines - 1).enumerate()\n-            {\n+            // We need to print more than one line if the span we need to remove is multiline.\n+            // For more info: https://github.com/rust-lang/rust/issues/92741\n+            let lines_to_remove = file_lines.lines.iter().take(file_lines.lines.len() - 1);\n+            for (index, line_to_remove) in lines_to_remove.enumerate() {\n                 buffer.puts(\n                     *row_num - 1,\n                     0,\n-                    &self.maybe_anonymized(line_start + line_pos + index),\n+                    &self.maybe_anonymized(line_num + index),\n                     Style::LineNumber,\n                 );\n                 buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n-                buffer.puts(\n-                    *row_num - 1,\n-                    max_line_num_len + 3,\n-                    &normalize_whitespace(\n-                        &file_lines.file.get_line(line_to_remove.line_index).unwrap(),\n-                    ),\n-                    Style::NoStyle,\n+                let line = normalize_whitespace(\n+                    &file_lines.file.get_line(line_to_remove.line_index).unwrap(),\n                 );\n+                buffer.puts(*row_num - 1, max_line_num_len + 3, &line, Style::NoStyle);\n                 *row_num += 1;\n             }\n-            let last_line = &file_lines\n-                .file\n-                .get_line(file_lines.lines[number_of_lines - 1].line_index)\n-                .unwrap();\n-            if last_line != line {\n+            // If the last line is exactly equal to the line we need to add, we can skip both of them.\n+            // This allows us to avoid output like the following:\n+            // 2 - &\n+            // 2 + if true { true } else { false }\n+            // 3 - if true { true } else { false }\n+            // If those lines aren't equal, we print their diff\n+            let last_line_index = file_lines.lines[file_lines.lines.len() - 1].line_index;\n+            let last_line = &file_lines.file.get_line(last_line_index).unwrap();\n+            if last_line != line_to_add {\n                 buffer.puts(\n                     *row_num - 1,\n                     0,\n-                    &self.maybe_anonymized(line_start + line_pos + number_of_lines - 1),\n+                    &self.maybe_anonymized(line_num + file_lines.lines.len() - 1),\n                     Style::LineNumber,\n                 );\n                 buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n@@ -2219,27 +2210,16 @@ impl EmitterWriter {\n                     &normalize_whitespace(last_line),\n                     Style::NoStyle,\n                 );\n-                buffer.puts(\n-                    *row_num,\n-                    0,\n-                    &self.maybe_anonymized(line_start + line_pos),\n-                    Style::LineNumber,\n-                );\n+                buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n                 buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n-                // print the suggestion\n-                buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n+                buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n             } else {\n                 *row_num -= 2;\n             }\n         } else if is_multiline {\n-            buffer.puts(\n-                *row_num,\n-                0,\n-                &self.maybe_anonymized(line_start + line_pos),\n-                Style::LineNumber,\n-            );\n+            buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n             match &highlight_parts[..] {\n-                [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n+                [SubstitutionHighlight { start: 0, end }] if *end == line_to_add.len() => {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                 }\n                 [] => {\n@@ -2249,24 +2229,17 @@ impl EmitterWriter {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"~ \", Style::Addition);\n                 }\n             }\n-            // print the suggestion\n-            buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n+            buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n         } else {\n-            buffer.puts(\n-                *row_num,\n-                0,\n-                &self.maybe_anonymized(line_start + line_pos),\n-                Style::LineNumber,\n-            );\n+            buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n             draw_col_separator(buffer, *row_num, max_line_num_len + 1);\n-            // print the suggestion\n-            buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n+            buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n         }\n \n         // Colorize addition/replacements with green.\n         for &SubstitutionHighlight { start, end } in highlight_parts {\n             // Account for tabs when highlighting (#87972).\n-            let tabs: usize = line\n+            let tabs: usize = line_to_add\n                 .chars()\n                 .take(start)\n                 .map(|ch| match ch {"}]}