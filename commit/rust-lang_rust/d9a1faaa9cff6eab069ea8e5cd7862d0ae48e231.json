{"sha": "d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "node_id": "C_kwDOAAsO6NoAKGQ5YTFmYWFhOWNmZjZlYWIwNjllYThlNWNkNzg2MmQwYWU0OGUyMzE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-06T18:36:13Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-08T16:34:55Z"}, "message": "Introduce lowering_arena to avoid creating AST nodes on the fly", "tree": {"sha": "fffd2a0a3ac2b4ab95a8065e4cb1c4bd9aee03e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fffd2a0a3ac2b4ab95a8065e4cb1c4bd9aee03e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMaGbAACgkQgTGiTgx5\n76+f0hAAtEgPfCv2EG5uq9anrURvEbG09GuiSij3HVdfoO0cl0n/PGL+buj9BOs3\n48lcvEe13ph19gJvNqxNJkQOMjBnnlVj7sP9jlhs8kvV8UEGM6zGpMqzCgGQMD9d\nDa1lvHy2tH8MseQRwDTxyH1y/CVsdH73+aStAqUVHn3PZxYEMYZmV1xN0eIk3D1c\nG/awUd5M3KW/dM8cLnB9lRV+wry9W+DfClmcyC2RPKIZ3PZGJTU37tbNerCZ7HTv\n3w/JVhwrf9v1yRSaUFr4SncQiozvBSVu74tPHZxDPoWx9z6KzccplWpbQX1nXKRY\nk5pDslVlu9eUVcMlLXtN3xIPBNKcp20VGs+C47V21bxSxguJPxXD0BtqYMEtGxhp\n+tpfvIy5y5U5yntF0ctORZutSL1ZBDklyStDGBlkzR3wiWQAOI1D8I7F5pTy14n7\nZQ0kcV4xhT0+SwxEkmu0VKoFo9W6fpljzXut9yxeTtk7YdnMXH7uExCRBEsyzdDm\naVbdCVxlkc8gTtlYut43sMAo1G3hsnvBpRHURDTml8WJeWFSZoUA/6W2RHcVO8vx\nSB2RBLD5Jseh7zl9jmv6spxmKkinmwnqASJZfXgLJP707Xgiwk2gLkb94Bc7WLY4\nb6O70XXYrb8aUYfvZUsHVx13uoDRD+gg4tWsLal2RY0hZJyleD0=\n=4FDO\n-----END PGP SIGNATURE-----", "payload": "tree fffd2a0a3ac2b4ab95a8065e4cb1c4bd9aee03e3\nparent 3c7278846102bb829c9a789e91bc43f0ed612943\nauthor Santiago Pastorino <spastorino@gmail.com> 1662489373 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1662654895 -0300\n\nIntroduce lowering_arena to avoid creating AST nodes on the fly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "html_url": "https://github.com/rust-lang/rust/commit/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7278846102bb829c9a789e91bc43f0ed612943", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7278846102bb829c9a789e91bc43f0ed612943", "html_url": "https://github.com/rust-lang/rust/commit/3c7278846102bb829c9a789e91bc43f0ed612943"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "b175333fee28f74db4d8ad03f98ebaa9d9228083", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{InvalidAbi, MisplacedRelaxTraitBound};\n use super::ResolverAstLoweringExt;\n-use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n+use super::{Arena, AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -25,6 +25,7 @@ use std::iter;\n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n+    pub(super) ast_arena: &'a Arena<'static>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n@@ -60,6 +61,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             tcx: self.tcx,\n             resolver: self.resolver,\n             arena: self.tcx.hir_arena,\n+            ast_arena: self.ast_arena,\n \n             // HirId handling.\n             bodies: Vec::new(),"}, {"sha": "cec91757e983fd43e35cb8ecd459c1daba3f0b7b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "patch": "@@ -44,6 +44,7 @@ extern crate tracing;\n \n use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait};\n \n+use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -95,6 +96,13 @@ struct LoweringContext<'a, 'hir> {\n     /// Used to allocate HIR nodes.\n     arena: &'hir hir::Arena<'hir>,\n \n+    /// Used to allocate temporary AST nodes for use during lowering.\n+    /// This allows us to create \"fake\" AST -- these nodes can sometimes\n+    /// be allocated on the stack, but other times we need them to live longer\n+    /// than the current stack frame, so they can be collected into vectors\n+    /// and things like that.\n+    ast_arena: &'a Arena<'static>,\n+\n     /// Bodies inside the owner being lowered.\n     bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n     /// Attributes inside the owner being lowered.\n@@ -140,6 +148,15 @@ struct LoweringContext<'a, 'hir> {\n     generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n }\n \n+declare_arena!([\n+    [] tys: rustc_ast::Ty,\n+    [] aba: rustc_ast::AngleBracketedArgs,\n+    [] ptr: rustc_ast::PolyTraitRef,\n+    // This _marker field is needed because `declare_arena` creates `Arena<'tcx>` and we need to\n+    // use `'tcx`. If we don't have this we get a compile error.\n+    [] _marker: std::marker::PhantomData<&'tcx ()>,\n+]);\n+\n trait ResolverAstLoweringExt {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n     fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n@@ -401,10 +418,13 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n         tcx.definitions_untracked().def_index_count(),\n     );\n \n+    let ast_arena = Arena::default();\n+\n     for def_id in ast_index.indices() {\n         item::ItemLowerer {\n             tcx,\n             resolver: &mut resolver,\n+            ast_arena: &ast_arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n@@ -964,12 +984,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n                     self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    self.lower_angle_bracketed_parameter_data(\n-                        &data.as_angle_bracketed_args(),\n-                        ParamMode::Explicit,\n-                        itctx,\n-                    )\n-                    .0\n+                    let aba = self.ast_arena.aba.alloc(data.as_angle_bracketed_args());\n+                    self.lower_angle_bracketed_parameter_data(aba, ParamMode::Explicit, itctx).0\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -1037,15 +1053,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n-                        let ty = this.lower_ty(\n-                            &Ty {\n-                                id: node_id,\n-                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: this.lower_span(constraint.span),\n-                                tokens: None,\n-                            },\n-                            itctx,\n-                        );\n+                        let ty = this.ast_arena.tys.alloc(Ty {\n+                            id: node_id,\n+                            kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                            span: this.lower_span(constraint.span),\n+                            tokens: None,\n+                        });\n+                        let ty = this.lower_ty(ty, itctx);\n \n                         hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n@@ -1181,12 +1195,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n         {\n             let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n+                let poly_trait_ref = this.ast_arena.ptr.alloc(PolyTraitRef {\n+                    bound_generic_params: vec![],\n+                    trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                    span: t.span\n+                });\n                 let bound = this.lower_poly_trait_ref(\n-                    &PolyTraitRef {\n-                        bound_generic_params: vec![],\n-                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n-                        span: t.span\n-                    },\n+                    poly_trait_ref,\n                     itctx,\n                 );\n                 let bounds = this.arena.alloc_from_iter([bound]);"}]}