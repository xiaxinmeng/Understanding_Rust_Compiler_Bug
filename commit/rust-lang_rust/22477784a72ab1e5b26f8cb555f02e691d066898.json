{"sha": "22477784a72ab1e5b26f8cb555f02e691d066898", "node_id": "C_kwDOAAsO6NoAKDIyNDc3Nzg0YTcyYWIxZTViMjZmOGNiNTU1ZjAyZTY5MWQwNjY4OTg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T14:27:38Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Fixup changes that aren't neccessary anymore", "tree": {"sha": "453e3e8a6de45436aa956c8e53d2b23c812151ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453e3e8a6de45436aa956c8e53d2b23c812151ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22477784a72ab1e5b26f8cb555f02e691d066898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22477784a72ab1e5b26f8cb555f02e691d066898", "html_url": "https://github.com/rust-lang/rust/commit/22477784a72ab1e5b26f8cb555f02e691d066898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22477784a72ab1e5b26f8cb555f02e691d066898/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d6a9acc91b9eab01e0815d0683cf2764a543ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d6a9acc91b9eab01e0815d0683cf2764a543ff", "html_url": "https://github.com/rust-lang/rust/commit/94d6a9acc91b9eab01e0815d0683cf2764a543ff"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "4647610b0033da4906f9b1686c66ab6ca58ddf70", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22477784a72ab1e5b26f8cb555f02e691d066898/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22477784a72ab1e5b26f8cb555f02e691d066898/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=22477784a72ab1e5b26f8cb555f02e691d066898", "patch": "@@ -1745,11 +1745,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {\n         let tcx = self.tcx();\n \n-        // This may contain opaque types, resolve them to the underlying\n-        // type if defined in the current function. Otherwise we can't\n-        // necessarily prove sizedness of the type.\n-        let ty = self.infcx.resolve_vars_if_possible(ty);\n-\n         // Erase the regions from `ty` to get a global type.  The\n         // `Sized` bound in no way depends on precise regions, so this\n         // shouldn't affect `is_sized`."}, {"sha": "49a9b911f3a4b3894923ce206c50a14d7124ec8b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22477784a72ab1e5b26f8cb555f02e691d066898/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22477784a72ab1e5b26f8cb555f02e691d066898/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=22477784a72ab1e5b26f8cb555f02e691d066898", "patch": "@@ -48,7 +48,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n         let ty = ccx.body.local_decls[local].ty;\n         // Peeking into opaque types causes cycles if the current function declares said opaque\n         // type. Thus we avoid short circuiting on the type and instead run the more expensive\n-        // analysis that looks at the actual usage withhin this function\n+        // analysis that looks at the actual usage within this function\n         if !ty.has_opaque_types() && !NeedsDrop::in_any_value_of_ty(ccx, ty) {\n             return false;\n         }\n@@ -105,7 +105,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n         let ty = ccx.body.local_decls[local].ty;\n         // Peeking into opaque types causes cycles if the current function declares said opaque\n         // type. Thus we avoid short circuiting on the type and instead run the more expensive\n-        // analysis that looks at the actual usage withhin this function\n+        // analysis that looks at the actual usage within this function\n         if !ty.has_opaque_types() && !HasMutInterior::in_any_value_of_ty(ccx, ty) {\n             return false;\n         }"}]}