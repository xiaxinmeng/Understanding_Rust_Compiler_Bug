{"sha": "2a68c0075a1cf769ebc6f28667cd29fd11b852c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjhjMDA3NWExY2Y3NjllYmM2ZjI4NjY3Y2QyOWZkMTFiODUyYzE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:57Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-19T14:06:37Z"}, "message": "Rollup merge of #56012 - RalfJung:unsafe-cell, r=nikomatsakis\n\navoid shared ref in UnsafeCell::get\n\nAvoid taking a shared reference in `UnsafeCell::get`. This *should* be taking a raw reference (see https://github.com/rust-lang/rfcs/pull/2582), but that operation is not currently available, so I propose we exploit `repr(transparent)` instead and cast the pointer around.\n\nThis is required to make `UnsafeCell::get` pass the [stacked borrows implementation](https://www.ralfj.de/blog/2018/11/16/stacked-borrows-implementation.html) in miri (currently, `UnsafeCell::get` is on a whitelist, but that is of course not very satisfying). It shouldn't affect normal execution/codegen. Would be great if we could get this landed and shrink miri's whitelist!\n\nCc @nikomatsakis", "tree": {"sha": "5382ed6816b837c335dd00318809ad28725ca15d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5382ed6816b837c335dd00318809ad28725ca15d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a68c0075a1cf769ebc6f28667cd29fd11b852c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvyw20ACgkQ/vbIBR0O\nATyfexAAghypsoYisHT9bLK/7Z5pccPc8pBWzvHBn/W8hgg3NlDNBCvvWCUat3m8\nPmGu70v7QtYikww/3kTm70P8vrkYzATSR4LFuuikbHqZiAfCMw37aU74JHNVXMdg\neBZQYqMl5p4NFK+wVQm0SUvS3bXOVSs7lE7jotDddld1kNe7pgRNvnERECAMG4vy\nwreOITa0ZICWkswqTC07V0oFNa6o5LzZW3cb1WMeAi89AL5RTWqMpt8XyBmKZIsK\nFl/KxRn+E2jbwsC0fqVwo+FHomHPsEe8tdScGvMWjzNhOcyuU/GodiEtute+3ULC\nbT2xw3lfjUj253afP2kAceep8OPBiHnZJsWF0zQ2qSAdb4aCHnqKnlYxAULx49K0\nePRA85yilY2iI9mgCT+PzRoq5RXUbZbW94UVQhf56sDm7jge4pcVBh2CfOEqm3Pp\nVrE47N3AOboOxbcbcaCE+zCjsjbmynRod4qGNnLqospdPuoKN/nmwDy06S8mTvfo\nfL4qxQNWA2QGES+JXa9WgGpDD/3TWLM7e8K1pCEkXKzxu+4sQwKlHX5Ah5kDxEOO\nwC3rgNK+srfgz6hI6oxbX4KLmuf5/LAAqRSLjDGYlbGZ1EJ0M5YKkDbTG/GDY5jg\nlgkCF8xqJ3l/LVEmGz+lPEinTBupzDpibXG1v+3ixbTUz6qPi14=\n=S6Sx\n-----END PGP SIGNATURE-----", "payload": "tree 5382ed6816b837c335dd00318809ad28725ca15d\nparent 05ae505a4c438b80268680747713c84ebad662f3\nparent 25d46f309130be1671d7e44d48e67b23f510bcdc\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579897 +0100\ncommitter kennytm <kennytm@gmail.com> 1542636397 +0800\n\nRollup merge of #56012 - RalfJung:unsafe-cell, r=nikomatsakis\n\navoid shared ref in UnsafeCell::get\n\nAvoid taking a shared reference in `UnsafeCell::get`. This *should* be taking a raw reference (see https://github.com/rust-lang/rfcs/pull/2582), but that operation is not currently available, so I propose we exploit `repr(transparent)` instead and cast the pointer around.\n\nThis is required to make `UnsafeCell::get` pass the [stacked borrows implementation](https://www.ralfj.de/blog/2018/11/16/stacked-borrows-implementation.html) in miri (currently, `UnsafeCell::get` is on a whitelist, but that is of course not very satisfying). It shouldn't affect normal execution/codegen. Would be great if we could get this landed and shrink miri's whitelist!\n\nCc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a68c0075a1cf769ebc6f28667cd29fd11b852c1", "html_url": "https://github.com/rust-lang/rust/commit/2a68c0075a1cf769ebc6f28667cd29fd11b852c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a68c0075a1cf769ebc6f28667cd29fd11b852c1/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05ae505a4c438b80268680747713c84ebad662f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ae505a4c438b80268680747713c84ebad662f3", "html_url": "https://github.com/rust-lang/rust/commit/05ae505a4c438b80268680747713c84ebad662f3"}, {"sha": "25d46f309130be1671d7e44d48e67b23f510bcdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d46f309130be1671d7e44d48e67b23f510bcdc", "html_url": "https://github.com/rust-lang/rust/commit/25d46f309130be1671d7e44d48e67b23f510bcdc"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "d8d51f53377f724e229f92f7b6ab546fcd16fa46", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c0075a1cf769ebc6f28667cd29fd11b852c1/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c0075a1cf769ebc6f28667cd29fd11b852c1/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=2a68c0075a1cf769ebc6f28667cd29fd11b852c1", "patch": "@@ -1509,7 +1509,9 @@ impl<T: ?Sized> UnsafeCell<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn get(&self) -> *mut T {\n-        &self.value as *const T as *mut T\n+        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n+        // #[repr(transparent)]\n+        self as *const UnsafeCell<T> as *const T as *mut T\n     }\n }\n "}]}