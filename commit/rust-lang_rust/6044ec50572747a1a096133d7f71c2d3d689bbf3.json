{"sha": "6044ec50572747a1a096133d7f71c2d3d689bbf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDRlYzUwNTcyNzQ3YTFhMDk2MTMzZDdmNzFjMmQzZDY4OWJiZjM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-31T16:06:27Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-31T16:06:27Z"}, "message": "Merge #395\n\n395: generalize r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "221c39c9ce30900c8d0c1ede30258343523d1942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/221c39c9ce30900c8d0c1ede30258343523d1942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6044ec50572747a1a096133d7f71c2d3d689bbf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6044ec50572747a1a096133d7f71c2d3d689bbf3", "html_url": "https://github.com/rust-lang/rust/commit/6044ec50572747a1a096133d7f71c2d3d689bbf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6044ec50572747a1a096133d7f71c2d3d689bbf3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "2a65020442142b68b32c0a97672faeeba5ff399e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a65020442142b68b32c0a97672faeeba5ff399e", "html_url": "https://github.com/rust-lang/rust/commit/2a65020442142b68b32c0a97672faeeba5ff399e"}, {"sha": "862c99d0d5ef7c791a9319fa76c436762d88460c", "url": "https://api.github.com/repos/rust-lang/rust/commits/862c99d0d5ef7c791a9319fa76c436762d88460c", "html_url": "https://github.com/rust-lang/rust/commit/862c99d0d5ef7c791a9319fa76c436762d88460c"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "805e9059efecf995d09cb4cafa6ba25d2b820b7f", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=6044ec50572747a1a096133d7f71c2d3d689bbf3", "patch": "@@ -1,6 +1,6 @@\n use ra_db::SyntaxDatabase;\n use ra_syntax::{\n-    SyntaxNodeRef, AstNode,\n+    SyntaxNodeRef, AstNode, SourceFileNode,\n     ast, algo::find_covering_node,\n };\n \n@@ -11,18 +11,23 @@ use crate::{\n \n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n     let source_file = db.source_file(frange.file_id);\n-    if let Some(macro_call) = find_macro_call(source_file.syntax(), frange.range) {\n-        if let Some(exp) = crate::macros::expand(db, frange.file_id, macro_call) {\n-            if let Some(dst_range) = exp.map_range_forward(frange.range) {\n-                if let Some(dst_range) = ra_editor::extend_selection(exp.source_file(), dst_range) {\n-                    if let Some(src_range) = exp.map_range_back(dst_range) {\n-                        return src_range;\n-                    }\n-                }\n-            }\n-        }\n+    if let Some(range) = extend_selection_in_macro(db, &source_file, frange) {\n+        return range;\n     }\n-    ra_editor::extend_selection(&source_file, frange.range).unwrap_or(frange.range)\n+    ra_editor::extend_selection(source_file.syntax(), frange.range).unwrap_or(frange.range)\n+}\n+\n+fn extend_selection_in_macro(\n+    db: &RootDatabase,\n+    source_file: &SourceFileNode,\n+    frange: FileRange,\n+) -> Option<TextRange> {\n+    let macro_call = find_macro_call(source_file.syntax(), frange.range)?;\n+    let exp = crate::macros::expand(db, frange.file_id, macro_call)?;\n+    let dst_range = exp.map_range_forward(frange.range)?;\n+    let dst_range = ra_editor::extend_selection(exp.source_file().syntax(), dst_range)?;\n+    let src_range = exp.map_range_back(dst_range)?;\n+    Some(src_range)\n }\n \n fn find_macro_call(node: SyntaxNodeRef, range: TextRange) -> Option<ast::MacroCall> {"}, {"sha": "7e9139a740699ba2d60b767d7ce8676af31ba811", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=6044ec50572747a1a096133d7f71c2d3d689bbf3", "patch": "@@ -9,14 +9,14 @@ use crate::{\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n     let source_file = db.source_file(file_id);\n-    let mut res = ra_editor::highlight(&source_file);\n+    let mut res = ra_editor::highlight(source_file.syntax());\n     for macro_call in source_file\n         .syntax()\n         .descendants()\n         .filter_map(ast::MacroCall::cast)\n     {\n         if let Some(exp) = crate::macros::expand(db, file_id, macro_call) {\n-            let mapped_ranges = ra_editor::highlight(exp.source_file())\n+            let mapped_ranges = ra_editor::highlight(exp.source_file().syntax())\n                 .into_iter()\n                 .filter_map(|r| {\n                     let mapped_range = exp.map_range_back(r.range)?;"}, {"sha": "a3b856aa946e79e5c4efbac42fdda3b64eb826fe", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=6044ec50572747a1a096133d7f71c2d3d689bbf3", "patch": "@@ -102,7 +102,7 @@ fn selections(file: &SourceFileNode, start: u32, end: u32) -> String {\n     let mut cur = Some(TextRange::from_to((start - 1).into(), (end - 1).into()));\n     while let Some(r) = cur {\n         ranges.push(r);\n-        cur = extend_selection(&file, r);\n+        cur = extend_selection(file.syntax(), r);\n     }\n     let ranges = ranges\n         .iter()"}, {"sha": "bf0727dde29271774940436e2040281cf6cd714d", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=6044ec50572747a1a096133d7f71c2d3d689bbf3", "patch": "@@ -1,16 +1,11 @@\n use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n-    Direction, SourceFileNode,\n+    Direction,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n \n-pub fn extend_selection(file: &SourceFileNode, range: TextRange) -> Option<TextRange> {\n-    let syntax = file.syntax();\n-    extend(syntax.borrowed(), range)\n-}\n-\n-pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n+pub fn extend_selection(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n     if range.is_empty() {\n         let offset = range.start();\n         let mut leaves = find_leaf_at_offset(root, offset);\n@@ -126,14 +121,15 @@ fn adj_comments(node: SyntaxNodeRef, dir: Direction) -> SyntaxNodeRef {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use ra_syntax::SourceFileNode;\n     use test_utils::extract_offset;\n \n     fn do_check(before: &str, afters: &[&str]) {\n         let (cursor, before) = extract_offset(before);\n         let file = SourceFileNode::parse(&before);\n         let mut range = TextRange::offset_len(cursor, 0.into());\n         for &after in afters {\n-            range = extend_selection(&file, range).unwrap();\n+            range = extend_selection(file.syntax(), range).unwrap();\n             let actual = &before[range];\n             assert_eq!(after, actual);\n         }"}, {"sha": "b03f9ea5415bd9937b107f6baa225630c272f606", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6044ec50572747a1a096133d7f71c2d3d689bbf3/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=6044ec50572747a1a096133d7f71c2d3d689bbf3", "patch": "@@ -67,11 +67,11 @@ pub fn matching_brace(file: &SourceFileNode, offset: TextUnit) -> Option<TextUni\n     Some(matching_node.range().start())\n }\n \n-pub fn highlight(file: &SourceFileNode) -> Vec<HighlightedRange> {\n+pub fn highlight(root: SyntaxNodeRef) -> Vec<HighlightedRange> {\n     // Visited nodes to handle highlighting priorities\n     let mut highlighted = FxHashSet::default();\n     let mut res = Vec::new();\n-    for node in file.syntax().descendants() {\n+    for node in root.descendants() {\n         if highlighted.contains(&node) {\n             continue;\n         }\n@@ -143,7 +143,7 @@ fn main() {}\n     println!(\"Hello, {}!\", 92);\n \"#,\n         );\n-        let hls = highlight(&file);\n+        let hls = highlight(file.syntax());\n         assert_eq_dbg(\n             r#\"[HighlightedRange { range: [1; 11), tag: \"comment\" },\n                 HighlightedRange { range: [12; 14), tag: \"keyword\" },"}]}