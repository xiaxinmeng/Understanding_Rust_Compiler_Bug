{"sha": "15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "node_id": "C_kwDOAAsO6NoAKDE1ZjRlZWM3YTk4NmU2YzkxMjVmZjNlMDExNWQ3MGFlZjZkNWM3MTE", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-06-24T08:48:07Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-07T09:37:55Z"}, "message": "Leave FIXME for wasm layout difference.\n\nThere is a distinction between running this on wasm and i686, even though they should be\nidentical. This technically is not _incorrect_, it's just an unexpected difference, which is\nworth investigating, but not for correctness.", "tree": {"sha": "67cd590dd765ce493ffe8f9d4620bc079298d429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67cd590dd765ce493ffe8f9d4620bc079298d429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "html_url": "https://github.com/rust-lang/rust/commit/15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610e1a1e05e7160d775f433855138f6063169c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/610e1a1e05e7160d775f433855138f6063169c56", "html_url": "https://github.com/rust-lang/rust/commit/610e1a1e05e7160d775f433855138f6063169c56"}], "stats": {"total": 612, "additions": 297, "deletions": 315}, "files": [{"sha": "3f8662ad6971fbcfdcc90320c04c4503fab95ee9", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -1,6 +1,6 @@\n use crate::rustc_middle::ty::util::IntTypeExt;\n use crate::MirPass;\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, AdtDef, Const, ParamEnv, Ty, TyCtxt};\n@@ -19,14 +19,21 @@ use rustc_target::abi::{HasDataLayout, Size, TagEncoding, Variants};\n /// Instead of emitting moves of the large variant,\n /// Perform a memcpy instead.\n /// Based off of [this HackMD](https://hackmd.io/@ft4bxUsFT5CEUBmRKYHr7w/rJM8BBPzD).\n+///\n+/// In summary, what this does is at runtime determine which enum variant is active,\n+/// and instead of copying all the bytes of the largest possible variant,\n+/// copy only the bytes for the currently active variant.\n pub struct EnumSizeOpt {\n     pub(crate) discrepancy: u64,\n }\n \n impl<'tcx> MirPass<'tcx> for EnumSizeOpt {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let sess = tcx.sess;\n-        if (!sess.opts.debugging_opts.unsound_mir_opts) || sess.mir_opt_level() < 3 {\n+        // FIXME(julianknodt): one thing noticed while testing this mir-opt is that there is a\n+        // different layout of large enums on wasm. It's not clear what is causing this layout\n+        // difference, as it should be identical to i686 (32 bit).\n+        if (!sess.opts.unstable_opts.unsound_mir_opts) || sess.mir_opt_level() < 3 {\n             return;\n         }\n         self.optim(tcx, body);\n@@ -56,8 +63,8 @@ impl EnumSizeOpt {\n             Variants::Multiple { variants, .. } if variants.len() <= 1 => return None,\n             Variants::Multiple { variants, .. } => variants,\n         };\n-        let min = variants.iter().map(|v| v.size()).min().unwrap();\n-        let max = variants.iter().map(|v| v.size()).max().unwrap();\n+        let min = variants.iter().map(|v| v.size).min().unwrap();\n+        let max = variants.iter().map(|v| v.size).max().unwrap();\n         if max.bytes() - min.bytes() < self.discrepancy {\n             return None;\n         }\n@@ -92,7 +99,7 @@ impl EnumSizeOpt {\n         for (var_idx, layout) in variants.iter_enumerated() {\n             let curr_idx =\n                 target_bytes * adt_def.discriminant_for_variant(tcx, var_idx).val as usize;\n-            let sz = layout.size();\n+            let sz = layout.size;\n             match ptr_sized_int {\n                 rustc_target::abi::Integer::I32 => {\n                     encode_store!(curr_idx, data_layout.endian, sz.bytes() as u32);\n@@ -115,8 +122,11 @@ impl EnumSizeOpt {\n         let mut alloc_cache = FxHashMap::default();\n         let body_did = body.source.def_id();\n         let param_env = tcx.param_env(body_did);\n-        let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n-        for bb in bbs {\n+\n+        let blocks = body.basic_blocks.as_mut();\n+        let local_decls = &mut body.local_decls;\n+\n+        for bb in blocks {\n             bb.expand_statements(|st| {\n                 if let StatementKind::Assign(box (\n                     lhs,\n@@ -175,7 +185,7 @@ impl EnumSizeOpt {\n                         kind: StatementKind::Assign(box (\n                             discr_cast_place,\n                             Rvalue::Cast(\n-                                CastKind::Misc,\n+                                CastKind::IntToInt,\n                                 Operand::Copy(discr_place),\n                                 tcx.types.usize,\n                             ),\n@@ -217,7 +227,7 @@ impl EnumSizeOpt {\n                         source_info,\n                         kind: StatementKind::Assign(box (\n                             dst_cast_place,\n-                            Rvalue::Cast(CastKind::Misc, Operand::Copy(dst), dst_cast_ty),\n+                            Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(dst), dst_cast_ty),\n                         )),\n                     };\n \n@@ -240,17 +250,19 @@ impl EnumSizeOpt {\n                         source_info,\n                         kind: StatementKind::Assign(box (\n                             src_cast_place,\n-                            Rvalue::Cast(CastKind::Misc, Operand::Copy(src), src_cast_ty),\n+                            Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(src), src_cast_ty),\n                         )),\n                     };\n \n                     let copy_bytes = Statement {\n                         source_info,\n-                        kind: StatementKind::CopyNonOverlapping(box CopyNonOverlapping {\n-                            src: Operand::Copy(src_cast_place),\n-                            dst: Operand::Copy(dst_cast_place),\n-                            count: Operand::Copy(size_place),\n-                        }),\n+                        kind: StatementKind::Intrinsic(\n+                            box NonDivergingIntrinsic::CopyNonOverlapping(CopyNonOverlapping {\n+                                src: Operand::Copy(src_cast_place),\n+                                dst: Operand::Copy(dst_cast_place),\n+                                count: Operand::Copy(size_place),\n+                            }),\n+                        ),\n                     };\n \n                     let store_dead = Statement {"}, {"sha": "be3652dd3e7bdc68fc561b4d1a61ef93096e1875", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -1,8 +1,8 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(box_syntax)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "e0ba46c15f4a9f83c8b9f294418657bb34664eb8", "filename": "tests/mir-opt/enum_opt.cand.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 40, "deletions": 44, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.32bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,54 +2,50 @@\n + // MIR for `cand` after EnumSizeOpt\n   \n   fn cand() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:50:15: 50:15\n-      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n-      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:52:7: 52:34\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:52:24: 52:33\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:51:7: 51:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n-          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _4 = const [2_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:50:15: 53:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:53:1: 53:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:53:2: 53:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:50:1: 53:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _4 = const [2_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "67439dba9c947edd3daf3066ccf20b5e03b68c38", "filename": "tests/mir-opt/enum_opt.cand.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 40, "deletions": 44, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.cand.EnumSizeOpt.64bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,54 +2,50 @@\n + // MIR for `cand` after EnumSizeOpt\n   \n   fn cand() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:50:15: 50:15\n-      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n-      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:52:7: 52:34\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:52:24: 52:33\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:52:3: 52:34\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+      let mut _1: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: Candidate;               // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _8: *mut Candidate;          // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _10: *const Candidate;       // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:34\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:51:7: 51:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:51:7: 51:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n-          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:51:15: 51:34\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:52:24: 52:33\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:52:7: 52:34\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _4 = const [2_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:52:3: 52:34\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:52:33: 52:34\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:50:15: 53:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:53:1: 53:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:53:2: 53:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:50:1: 53:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          ((_1 as Small).0: u8) = const 1_u8; // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:34\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _4 = const [2_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "db2efa195a369ff9ecd041469104204996d2460b", "filename": "tests/mir-opt/enum_opt.invalid.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.32bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,34 +2,30 @@\n + // MIR for `invalid` after EnumSizeOpt\n   \n   fn invalid() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:56:18: 56:18\n-      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n-      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:58:7: 58:36\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:58:26: 58:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:18\n+      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:36\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:26: +2:35\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:57:7: 57:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n-          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:58:3: 58:36\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:56:18: 59:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:59:1: 59:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:59:2: 59:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:56:1: 59:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n+          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:36\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:18: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "db2efa195a369ff9ecd041469104204996d2460b", "filename": "tests/mir-opt/enum_opt.invalid.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.invalid.EnumSizeOpt.64bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,34 +2,30 @@\n + // MIR for `invalid` after EnumSizeOpt\n   \n   fn invalid() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:56:18: 56:18\n-      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n-      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:58:7: 58:36\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:58:26: 58:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:18: +0:18\n+      let mut _1: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: InvalidIdxs;             // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:36\n+      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:+2:26: +2:35\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:57:7: 57:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:57:7: 57:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:57:15: 57:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n-          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:58:26: 58:35\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:58:7: 58:36\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:58:3: 58:36\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:58:35: 58:36\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:56:18: 59:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:59:1: 59:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:59:2: 59:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:56:1: 59:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:29\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n+          _3 = [const 0_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:+2:26: +2:35\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:36\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:36\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:35: +2:36\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:18: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "6876c56cfa4ed2ced275e889194f1c6800d91bd7", "filename": "tests/mir-opt/enum_opt.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.rs?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -1,12 +1,14 @@\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // compile-flags: -Zunsound-mir-opts -Zmir-opt-level=3\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-wasm32\n+\n #![feature(arbitrary_enum_discriminant, repr128)]\n \n // Tests that an enum with a variant with no data gets correctly transformed.\n+#[repr(C)]\n pub enum NoData {\n+  Large([u8; 8192]),\n   None,\n-  Large([u64; 1024]),\n }\n \n // Tests that an enum with a variant with data that is a valid candidate gets transformed.\n@@ -26,7 +28,7 @@ pub enum InvalidIdxs {\n // Tests that an enum with too high of a discriminant index (not in bounds of usize) does not\n // get tformed.\n #[repr(u128)]\n-pub enum Truncatable {\n+pub enum NotTrunctable {\n     A = 0,\n     B([u8; 1024]) = 1,\n     C([u8; 4096]) = 0x10000000000000001,\n@@ -43,7 +45,7 @@ pub enum RandOrderDiscr {\n // EMIT_MIR enum_opt.unin.EnumSizeOpt.diff\n pub fn unin() {\n   let mut a = NoData::None;\n-  a = NoData::Large([1; 1024]);\n+  a = NoData::Large([1; 8192]);\n }\n \n // EMIT_MIR enum_opt.cand.EnumSizeOpt.diff\n@@ -60,9 +62,9 @@ pub fn invalid() {\n \n // EMIT_MIR enum_opt.trunc.EnumSizeOpt.diff\n pub fn trunc() {\n-  let mut a = Truncatable::A;\n-  a = Truncatable::B([0; 1024]);\n-  a = Truncatable::C([0; 4096]);\n+  let mut a = NotTrunctable::A;\n+  a = NotTrunctable::B([0; 1024]);\n+  a = NotTrunctable::C([0; 4096]);\n }\n \n pub fn rand_order() {"}, {"sha": "b9d6765d8c1ca3b194d8ecdfd1c3caeed9f209bc", "filename": "tests/mir-opt/enum_opt.trunc.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.32bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,45 +2,41 @@\n + // MIR for `trunc` after EnumSizeOpt\n   \n   fn trunc() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:62:16: 62:16\n-      let mut _1: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n-      let mut _2: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:64:7: 64:32\n-      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:64:22: 64:31\n-      let mut _4: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:65:7: 65:32\n-      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:65:22: 65:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:16: +0:16\n+      let mut _1: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n+      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n+      let mut _4: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+3:7: +3:34\n+      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:+3:24: +3:33\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:63:7: 63:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:64:3: 64:32\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n-          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n-          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n-          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:65:3: 65:32\n-          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:62:16: 66:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:66:1: 66:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:66:2: 66:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:62:1: 66:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n+          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n+          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n+          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:34\n+          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:16: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "b9d6765d8c1ca3b194d8ecdfd1c3caeed9f209bc", "filename": "tests/mir-opt/enum_opt.trunc.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.trunc.EnumSizeOpt.64bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,45 +2,41 @@\n + // MIR for `trunc` after EnumSizeOpt\n   \n   fn trunc() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:62:16: 62:16\n-      let mut _1: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n-      let mut _2: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:64:7: 64:32\n-      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:64:22: 64:31\n-      let mut _4: Truncatable;             // in scope 0 at $DIR/enum_opt.rs:65:7: 65:32\n-      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:65:22: 65:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:16: +0:16\n+      let mut _1: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:34\n+      let mut _3: [u8; 1024];              // in scope 0 at $DIR/enum_opt.rs:+2:24: +2:33\n+      let mut _4: NotTrunctable;           // in scope 0 at $DIR/enum_opt.rs:+3:7: +3:34\n+      let mut _5: [u8; 4096];              // in scope 0 at $DIR/enum_opt.rs:+3:24: +3:33\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:63:7: 63:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:63:7: 63:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:63:15: 63:29\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:64:22: 64:31\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:64:7: 64:32\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:64:3: 64:32\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:64:31: 64:32\n-          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n-          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:65:22: 65:31\n-          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:65:7: 65:32\n-          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n-          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:65:3: 65:32\n-          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:65:31: 65:32\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:62:16: 66:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:66:1: 66:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:66:2: 66:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:62:1: 66:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:31\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          _3 = [const 0_u8; 1024];         // scope 1 at $DIR/enum_opt.rs:+2:24: +2:33\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          ((_2 as B).0: [u8; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:34\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+          _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:34\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:33: +2:34\n+          StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          StorageLive(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n+          _5 = [const 0_u8; 4096];         // scope 1 at $DIR/enum_opt.rs:+3:24: +3:33\n+          Deinit(_4);                      // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          ((_4 as C).0: [u8; 4096]) = move _5; // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          discriminant(_4) = 2;            // scope 1 at $DIR/enum_opt.rs:+3:7: +3:34\n+          StorageDead(_5);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n+          _1 = move _4;                    // scope 1 at $DIR/enum_opt.rs:+3:3: +3:34\n+          StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+3:33: +3:34\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:16: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "168677b173d53a6bd3633a65d5102dbf5e43d938", "filename": "tests/mir-opt/enum_opt.unin.EnumSizeOpt.32bit.diff", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.32bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,53 +2,49 @@\n + // MIR for `unin` after EnumSizeOpt\n   \n   fn unin() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:44:15: 44:15\n-      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n-      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:46:7: 46:31\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:46:21: 46:30\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:31\n+      let mut _3: [u8; 8192];              // in scope 0 at $DIR/enum_opt.rs:+2:21: +2:30\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:45:7: 45:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _4 = const [4_usize, 8196_usize]; // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:44:15: 47:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:47:1: 47:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:47:2: 47:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:44:1: 47:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n+          discriminant(_1) = 1;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n+          _3 = [const 1_u8; 8192];         // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          ((_2 as Large).0: [u8; 8192]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          discriminant(_2) = 0;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _4 = const [8196_usize, 4_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "168677b173d53a6bd3633a65d5102dbf5e43d938", "filename": "tests/mir-opt/enum_opt.unin.EnumSizeOpt.64bit.diff", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/15f4eec7a986e6c9125ff3e0115d70aef6d5c711/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fenum_opt.unin.EnumSizeOpt.64bit.diff?ref=15f4eec7a986e6c9125ff3e0115d70aef6d5c711", "patch": "@@ -2,53 +2,49 @@\n + // MIR for `unin` after EnumSizeOpt\n   \n   fn unin() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:44:15: 44:15\n-      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n-      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:46:7: 46:31\n-      let mut _3: [u64; 1024];             // in scope 0 at $DIR/enum_opt.rs:46:21: 46:30\n-+     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n-+     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:46:3: 46:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum_opt.rs:+0:15: +0:15\n+      let mut _1: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+      let mut _2: NoData;                  // in scope 0 at $DIR/enum_opt.rs:+2:7: +2:31\n+      let mut _3: [u8; 8192];              // in scope 0 at $DIR/enum_opt.rs:+2:21: +2:30\n++     let mut _4: [usize; 2];              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _5: isize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _6: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _7: usize;                   // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _8: *mut NoData;             // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _9: *mut u8;                 // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _10: *const NoData;          // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n++     let mut _11: *const u8;              // in scope 0 at $DIR/enum_opt.rs:+2:3: +2:31\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:45:7: 45:12\n+          debug a => _1;                   // in scope 1 at $DIR/enum_opt.rs:+1:7: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:45:7: 45:12\n-          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum_opt.rs:45:15: 45:27\n-          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n-          _3 = [const 1_u64; 1024];        // scope 1 at $DIR/enum_opt.rs:46:21: 46:30\n-          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          ((_2 as Large).0: [u64; 1024]) = move _3; // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          discriminant(_2) = 1;            // scope 1 at $DIR/enum_opt.rs:46:7: 46:31\n-          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n--         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _4 = const [8_usize, 8200_usize]; // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _6 = _5 as usize (Misc);         // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _9 = _8 as *mut u8 (Misc);       // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         _11 = _10 as *const u8 (Misc);   // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         copy_nonoverlapping(src=_11, dst=_9, count=_7); // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-+         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:46:3: 46:31\n-          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:46:30: 46:31\n-          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:44:15: 47:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:47:1: 47:2\n-          return;                          // scope 0 at $DIR/enum_opt.rs:47:2: 47:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/enum_opt.rs:44:1: 47:2\n+          StorageLive(_1);                 // scope 0 at $DIR/enum_opt.rs:+1:7: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n+          discriminant(_1) = 1;            // scope 0 at $DIR/enum_opt.rs:+1:15: +1:27\n+          StorageLive(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          StorageLive(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n+          _3 = [const 1_u8; 8192];         // scope 1 at $DIR/enum_opt.rs:+2:21: +2:30\n+          Deinit(_2);                      // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          ((_2 as Large).0: [u8; 8192]) = move _3; // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          discriminant(_2) = 0;            // scope 1 at $DIR/enum_opt.rs:+2:7: +2:31\n+          StorageDead(_3);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n+-         _1 = move _2;                    // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         StorageLive(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _4 = const [8196_usize, 4_usize]; // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _5 = discriminant(_2);           // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _6 = _5 as usize (IntToInt);     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _7 = _4[_6];                     // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _8 = &raw mut _1;                // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _9 = _8 as *mut u8 (PtrToPtr);   // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _10 = &raw const _2;             // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         _11 = _10 as *const u8 (PtrToPtr); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         copy_nonoverlapping(dst = _9, src = _11, count = _7); // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n++         StorageDead(_4);                 // scope 1 at $DIR/enum_opt.rs:+2:3: +2:31\n+          StorageDead(_2);                 // scope 1 at $DIR/enum_opt.rs:+2:30: +2:31\n+          _0 = const ();                   // scope 0 at $DIR/enum_opt.rs:+0:15: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum_opt.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum_opt.rs:+3:2: +3:2\n       }\n   }\n   "}]}