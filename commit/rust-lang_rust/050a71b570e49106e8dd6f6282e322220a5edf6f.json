{"sha": "050a71b570e49106e8dd6f6282e322220a5edf6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MGE3MWI1NzBlNDkxMDZlOGRkNmY2MjgyZTMyMjIyMGE1ZWRmNmY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-04T16:31:52Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-05T10:24:25Z"}, "message": "rustc_target: avoid negative register counts in the SysV x86_64 ABI.", "tree": {"sha": "61d2f42d3a03bdb42c054ad4508f46d777beca69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61d2f42d3a03bdb42c054ad4508f46d777beca69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050a71b570e49106e8dd6f6282e322220a5edf6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050a71b570e49106e8dd6f6282e322220a5edf6f", "html_url": "https://github.com/rust-lang/rust/commit/050a71b570e49106e8dd6f6282e322220a5edf6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050a71b570e49106e8dd6f6282e322220a5edf6f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43eb4235ac43c822d903ad26ed806f34cc1a14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43eb4235ac43c822d903ad26ed806f34cc1a14a", "html_url": "https://github.com/rust-lang/rust/commit/b43eb4235ac43c822d903ad26ed806f34cc1a14a"}], "stats": {"total": 138, "additions": 129, "deletions": 9}, "files": [{"sha": "cdec65e5d40dfd0abc0dcfb62c03f0eb72f849fe", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=050a71b570e49106e8dd6f6282e322220a5edf6f", "patch": "@@ -167,29 +167,44 @@ fn cast_target(cls: &[Option<Class>], size: Size) -> CastTarget {\n     target\n }\n \n+const MAX_INT_REGS: usize = 6; // RDI, RSI, RDX, RCX, R8, R9\n+const MAX_SSE_REGS: usize = 8; // XMM0-7\n+\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n           C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n {\n-    let mut int_regs = 6; // RDI, RSI, RDX, RCX, R8, R9\n-    let mut sse_regs = 8; // XMM0-7\n+    let mut int_regs = MAX_INT_REGS;\n+    let mut sse_regs = MAX_SSE_REGS;\n \n     let mut x86_64_ty = |arg: &mut ArgType<'a, Ty>, is_arg: bool| {\n         let mut cls_or_mem = classify_arg(cx, arg);\n \n-        let mut needed_int = 0;\n-        let mut needed_sse = 0;\n         if is_arg {\n             if let Ok(cls) = cls_or_mem {\n+                let mut needed_int = 0;\n+                let mut needed_sse = 0;\n                 for &c in &cls {\n                     match c {\n                         Some(Class::Int) => needed_int += 1,\n                         Some(Class::Sse) => needed_sse += 1,\n                         _ => {}\n                     }\n                 }\n-                if arg.layout.is_aggregate() && (int_regs < needed_int || sse_regs < needed_sse) {\n-                    cls_or_mem = Err(Memory);\n+                match (int_regs.checked_sub(needed_int), sse_regs.checked_sub(needed_sse)) {\n+                    (Some(left_int), Some(left_sse)) => {\n+                        int_regs = left_int;\n+                        sse_regs = left_sse;\n+                    }\n+                    _ => {\n+                        // Not enough registers for this argument, so it will be\n+                        // passed on the stack, but we only mark aggregates\n+                        // explicitly as indirect `byval` arguments, as LLVM will\n+                        // automatically put immediates on the stack itself.\n+                        if arg.layout.is_aggregate() {\n+                            cls_or_mem = Err(Memory);\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -201,14 +216,14 @@ pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n                 } else {\n                     // `sret` parameter thus one less integer register available\n                     arg.make_indirect();\n+                    // NOTE(eddyb) return is handled first, so no registers\n+                    // should've been used yet.\n+                    assert_eq!(int_regs, MAX_INT_REGS);\n                     int_regs -= 1;\n                 }\n             }\n             Ok(ref cls) => {\n                 // split into sized chunks passed individually\n-                int_regs -= needed_int;\n-                sse_regs -= needed_sse;\n-\n                 if arg.layout.is_aggregate() {\n                     let size = arg.layout.size;\n                     arg.cast_to(cast_target(cls, size))"}, {"sha": "b95b0ca1a89c00b103dd9200537be8bff3441ec3", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=050a71b570e49106e8dd6f6282e322220a5edf6f", "patch": "@@ -215,6 +215,29 @@ uint64_t get_c_many_params(void *a, void *b, void *c, void *d, struct quad f) {\n     return f.c;\n }\n \n+struct quad_floats {\n+    float a;\n+    float b;\n+    float c;\n+    float d;\n+};\n+\n+float get_c_exhaust_sysv64_ints(\n+    void *a,\n+    void *b,\n+    void *c,\n+    void *d,\n+    void *e,\n+    void *f,\n+    // `f` used the last integer register, so `g` goes on the stack.\n+    // It also used to bring the \"count of available integer registers\" down to\n+    // `-1` which broke the next SSE-only aggregate argument (`h`) - see #62350.\n+    void *g,\n+    struct quad_floats h\n+) {\n+    return h.c;\n+}\n+\n // Calculates the average of `(x + y) / n` where x: i64, y: f64. There must be exactly n pairs\n // passed as variadic arguments. There are two versions of this function: the\n // variadic one, and the one that takes a `va_list`."}, {"sha": "fdf0573b5e3ec829db9814d51d57fe647253c73f", "filename": "src/test/run-pass/abi-sysv64-arg-passing.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs?ref=050a71b570e49106e8dd6f6282e322220a5edf6f", "patch": "@@ -20,6 +20,7 @@\n // extern-return-TwoU64s\n // foreign-fn-with-byval\n // issue-28676\n+// issue-62350-sysv-neg-reg-counts\n // struct-return\n \n // ignore-android\n@@ -83,6 +84,9 @@ mod tests {\n     #[derive(Copy, Clone)]\n     pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n \n+    #[derive(Copy, Clone)]\n+    pub struct QuadFloats { a: f32, b: f32, c: f32, d: f32 }\n+\n     #[repr(C)]\n     #[derive(Copy, Clone)]\n     pub struct Floats { a: f64, b: u8, c: f64 }\n@@ -108,6 +112,16 @@ mod tests {\n         pub fn get_z(x: S) -> u64;\n         pub fn get_c_many_params(_: *const (), _: *const (),\n                                  _: *const (), _: *const (), f: Quad) -> u64;\n+        pub fn get_c_exhaust_sysv64_ints(\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            h: QuadFloats,\n+        ) -> f32;\n         pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n         pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n     }\n@@ -263,6 +277,27 @@ mod tests {\n         test();\n     }\n \n+    fn test_62350() {\n+        use std::ptr;\n+        unsafe {\n+            let null = ptr::null();\n+            let q = QuadFloats {\n+                a: 10.2,\n+                b: 20.3,\n+                c: 30.4,\n+                d: 40.5\n+            };\n+            assert_eq!(\n+                get_c_exhaust_sysv64_ints(null, null, null, null, null, null, null, q),\n+                q.c,\n+            );\n+        }\n+    }\n+\n+    pub fn issue_62350() {\n+        test_62350();\n+    }\n+\n     fn test1() {\n         unsafe {\n             let q = Quad { a: 0xaaaa_aaaa_aaaa_aaaa,\n@@ -321,6 +356,7 @@ fn main() {\n     extern_return_twou64s();\n     foreign_fn_with_byval();\n     issue_28676();\n+    issue_62350();\n     struct_return();\n }\n "}, {"sha": "df819306e4aa2708dfb50b6d3106e951079c96e1", "filename": "src/test/run-pass/abi/issues/issue-62350-sysv-neg-reg-counts.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-62350-sysv-neg-reg-counts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050a71b570e49106e8dd6f6282e322220a5edf6f/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-62350-sysv-neg-reg-counts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-62350-sysv-neg-reg-counts.rs?ref=050a71b570e49106e8dd6f6282e322220a5edf6f", "patch": "@@ -0,0 +1,46 @@\n+// run-pass\n+#![allow(dead_code)]\n+#![allow(improper_ctypes)]\n+\n+// ignore-wasm32-bare no libc to test ffi with\n+\n+#[derive(Copy, Clone)]\n+pub struct QuadFloats { a: f32, b: f32, c: f32, d: f32 }\n+\n+mod rustrt {\n+    use super::QuadFloats;\n+\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n+    extern {\n+        pub fn get_c_exhaust_sysv64_ints(\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            h: QuadFloats,\n+        ) -> f32;\n+    }\n+}\n+\n+fn test() {\n+    unsafe {\n+        let null = std::ptr::null();\n+        let q = QuadFloats {\n+            a: 10.2,\n+            b: 20.3,\n+            c: 30.4,\n+            d: 40.5\n+        };\n+        assert_eq!(\n+            rustrt::get_c_exhaust_sysv64_ints(null, null, null, null, null, null, null, q),\n+            q.c,\n+        );\n+    }\n+}\n+\n+pub fn main() {\n+    test();\n+}"}]}