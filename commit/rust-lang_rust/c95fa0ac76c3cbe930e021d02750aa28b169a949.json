{"sha": "c95fa0ac76c3cbe930e021d02750aa28b169a949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NWZhMGFjNzZjM2NiZTkzMGUwMjFkMDI3NTBhYTI4YjE2OWE5NDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-15T11:04:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-13T14:13:20Z"}, "message": "unions: test move behavior of non-Copy fields", "tree": {"sha": "6fd8756dbd60252575427fe8ca4aa00166a29515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd8756dbd60252575427fe8ca4aa00166a29515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c95fa0ac76c3cbe930e021d02750aa28b169a949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c95fa0ac76c3cbe930e021d02750aa28b169a949", "html_url": "https://github.com/rust-lang/rust/commit/c95fa0ac76c3cbe930e021d02750aa28b169a949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c95fa0ac76c3cbe930e021d02750aa28b169a949/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6c84553c4fa47174d2510541a90243000fb44d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c84553c4fa47174d2510541a90243000fb44d8", "html_url": "https://github.com/rust-lang/rust/commit/b6c84553c4fa47174d2510541a90243000fb44d8"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "d7d5610cd6a6f1f8a84c26b4b7ae33152e932b79", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c95fa0ac76c3cbe930e021d02750aa28b169a949/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95fa0ac76c3cbe930e021d02750aa28b169a949/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=c95fa0ac76c3cbe930e021d02750aa28b169a949", "patch": "@@ -49,5 +49,10 @@ fn main() {\n             let y = Y { a: S };\n         }\n         assert_eq!(CHECK, 2); // 2, dtor of Y is called\n+        {\n+            let y2 = Y { a: S };\n+            std::mem::forget(y2);\n+        }\n+        assert_eq!(CHECK, 2); // 2, dtor of Y *not* called for y2\n     }\n }"}, {"sha": "b19b61282f06a883d67dbae703c21399c71d16cd", "filename": "src/test/ui/union/union-move.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c95fa0ac76c3cbe930e021d02750aa28b169a949/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95fa0ac76c3cbe930e021d02750aa28b169a949/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.rs?ref=c95fa0ac76c3cbe930e021d02750aa28b169a949", "patch": "@@ -0,0 +1,53 @@\n+//! Test the behavior of moving out of non-`Copy` union fields.\n+//! Avoid types that `Drop`, we want to focus on moving.\n+#![feature(untagged_unions)]\n+\n+use std::cell::RefCell;\n+\n+fn move_out<T>(x: T) {}\n+\n+union U1 {\n+    f1_nocopy: RefCell<i32>,\n+    f2_nocopy: RefCell<i32>,\n+    f3_copy: i32,\n+}\n+\n+union U2 {\n+    f1_nocopy: RefCell<i32>,\n+}\n+impl Drop for U2 {\n+    fn drop(&mut self) {}\n+}\n+\n+fn test1(x: U1) {\n+    // Moving out of a nocopy field prevents accessing other nocopy field.\n+    unsafe {\n+        move_out(x.f1_nocopy);\n+        move_out(x.f2_nocopy); //~ ERROR use of moved value: `x`\n+    }\n+}\n+\n+fn test2(x: U1) {\n+    // \"Moving\" out of copy field doesn't prevent later field accesses.\n+    unsafe {\n+        move_out(x.f3_copy);\n+        move_out(x.f2_nocopy); // no error\n+    }\n+}\n+\n+fn test3(x: U1) {\n+    // Moving out of a nocopy field prevents accessing other copy field.\n+    unsafe {\n+        move_out(x.f2_nocopy);\n+        move_out(x.f3_copy); //~ ERROR use of moved value: `x`\n+    }\n+}\n+\n+fn test4(x: U2) {\n+    // Cannot move out of union that implements `Drop`.\n+    unsafe {\n+        move_out(x.f1_nocopy); //~ ERROR cannot move out of type `U2`, which implements the `Drop` trait\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a29f3a77f3c97a66d9f6a26d7fb593130cdf092", "filename": "src/test/ui/union/union-move.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c95fa0ac76c3cbe930e021d02750aa28b169a949/src%2Ftest%2Fui%2Funion%2Funion-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c95fa0ac76c3cbe930e021d02750aa28b169a949/src%2Ftest%2Fui%2Funion%2Funion-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.stderr?ref=c95fa0ac76c3cbe930e021d02750aa28b169a949", "patch": "@@ -0,0 +1,35 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/union-move.rs:26:18\n+   |\n+LL | fn test1(x: U1) {\n+   |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n+...\n+LL |         move_out(x.f1_nocopy);\n+   |                  ----------- value moved here\n+LL |         move_out(x.f2_nocopy);\n+   |                  ^^^^^^^^^^^ value used here after move\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/union-move.rs:42:18\n+   |\n+LL | fn test3(x: U1) {\n+   |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n+...\n+LL |         move_out(x.f2_nocopy);\n+   |                  ----------- value moved here\n+LL |         move_out(x.f3_copy);\n+   |                  ^^^^^^^^^ value used here after move\n+\n+error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n+  --> $DIR/union-move.rs:49:18\n+   |\n+LL |         move_out(x.f1_nocopy);\n+   |                  ^^^^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  move occurs because `x.f1_nocopy` has type `std::cell::RefCell<i32>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0382, E0509.\n+For more information about an error, try `rustc --explain E0382`."}]}