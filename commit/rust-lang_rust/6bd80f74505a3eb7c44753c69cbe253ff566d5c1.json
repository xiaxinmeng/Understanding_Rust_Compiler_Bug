{"sha": "6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZDgwZjc0NTA1YTNlYjdjNDQ3NTNjNjljYmUyNTNmZjU2NmQ1YzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-06T01:25:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:12Z"}, "message": "librustuv: Change `with_local_io` to use RAII.", "tree": {"sha": "acccb99cf7a8bae4571c1e866415c0731a6f0f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acccb99cf7a8bae4571c1e866415c0731a6f0f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "html_url": "https://github.com/rust-lang/rust/commit/6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2ebe1622681c2a93a2fcf2673a5671fd110ead", "html_url": "https://github.com/rust-lang/rust/commit/8c2ebe1622681c2a93a2fcf2673a5671fd110ead"}], "stats": {"total": 345, "additions": 187, "deletions": 158}, "files": [{"sha": "db1c375b0c651e0e69a353527579de1c58e90dc1", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::c_str::CString;\n+use std::cast;\n use std::comm::SharedChan;\n use std::libc::c_int;\n use std::libc;\n@@ -161,8 +162,11 @@ impl EventLoop for UvEventLoop {\n         ~AsyncWatcher::new(self.uvio.uv_loop(), f) as ~RemoteCallback\n     }\n \n-    fn io<'a>(&'a mut self, f: |&'a mut IoFactory|) {\n-        f(&mut self.uvio as &mut IoFactory)\n+    fn io(&mut self) -> &'static mut IoFactory:'static {\n+        unsafe {\n+            let factory = &mut self.uvio as &mut IoFactory;\n+            cast::transmute(factory)\n+        }\n     }\n }\n "}, {"sha": "5bfdf685bea7ab4ef110c83496c4274435956d98", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -51,7 +51,7 @@ use iter::Iterator;\n use super::{Reader, Writer, Seek};\n use super::{SeekStyle, Read, Write, Open, IoError, Truncate,\n             FileMode, FileAccess, FileStat, io_error, FilePermission};\n-use rt::rtio::{RtioFileStream, IoFactory, with_local_io};\n+use rt::rtio::{RtioFileStream, IoFactory, LocalIo};\n use io;\n use option::{Some, None, Option};\n use result::{Ok, Err, Result};\n@@ -76,15 +76,14 @@ pub struct File {\n }\n \n fn io_raise<T>(f: |io: &mut IoFactory| -> Result<T, IoError>) -> Option<T> {\n-    with_local_io(|io| {\n-        match f(io) {\n-            Ok(t) => Some(t),\n-            Err(ioerr) => {\n-                io_error::cond.raise(ioerr);\n-                None\n-            }\n+    let mut io = LocalIo::borrow();\n+    match f(io.get()) {\n+        Ok(t) => Some(t),\n+        Err(ioerr) => {\n+            io_error::cond.raise(ioerr);\n+            None\n         }\n-    })\n+    }\n }\n \n impl File {\n@@ -132,19 +131,18 @@ impl File {\n     pub fn open_mode(path: &Path,\n                      mode: FileMode,\n                      access: FileAccess) -> Option<File> {\n-        with_local_io(|io| {\n-            match io.fs_open(&path.to_c_str(), mode, access) {\n-                Ok(fd) => Some(File {\n-                    path: path.clone(),\n-                    fd: fd,\n-                    last_nread: -1\n-                }),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().fs_open(&path.to_c_str(), mode, access) {\n+            Ok(fd) => Some(File {\n+                path: path.clone(),\n+                fd: fd,\n+                last_nread: -1\n+            }),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n \n     /// Attempts to open a file in read-only mode. This function is equivalent to"}, {"sha": "d9dccc84f1c45de294c73b7f137e6c0047406500", "filename": "src/libstd/io/native/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnative%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnative%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fmod.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -223,3 +223,6 @@ impl rtio::IoFactory for IoFactory {\n         Err(unimpl())\n     }\n }\n+\n+pub static mut NATIVE_IO_FACTORY: IoFactory = IoFactory;\n+"}, {"sha": "7df4fdd22667647b671c7e141cfa4b7eba34dedc", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -21,7 +21,7 @@ use option::{Option, Some, None};\n use result::{Ok, Err};\n use io::{io_error};\n use io::net::ip::{SocketAddr, IpAddr};\n-use rt::rtio::{IoFactory, with_local_io};\n+use rt::rtio::{IoFactory, LocalIo};\n use vec::ImmutableVector;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n@@ -95,17 +95,16 @@ pub fn get_host_addresses(host: &str) -> Option<~[IpAddr]> {\n ///\n /// XXX: this is not public because the `Hint` structure is not ready for public\n ///      consumption just yet.\n-fn lookup(hostname: Option<&str>, servname: Option<&str>,\n-          hint: Option<Hint>) -> Option<~[Info]> {\n-    with_local_io(|io| {\n-        match io.get_host_addresses(hostname, servname, hint) {\n-            Ok(i) => Some(i),\n-            Err(ioerr) => {\n-                io_error::cond.raise(ioerr);\n-                None\n-            }\n+fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n+          -> Option<~[Info]> {\n+    let mut io = LocalIo::borrow();\n+    match io.get().get_host_addresses(hostname, servname, hint) {\n+        Ok(i) => Some(i),\n+        Err(ioerr) => {\n+            io_error::cond.raise(ioerr);\n+            None\n         }\n-    })\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "3c7582db7b85df03d3fd9a5e12479d6eb9bbb706", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -13,8 +13,8 @@ use result::{Ok, Err};\n use io::net::ip::SocketAddr;\n use io::{Reader, Writer, Listener, Acceptor};\n use io::{io_error, EndOfFile};\n-use rt::rtio::{IoFactory, with_local_io,\n-               RtioSocket, RtioTcpListener, RtioTcpAcceptor, RtioTcpStream};\n+use rt::rtio::{IoFactory, LocalIo, RtioSocket, RtioTcpListener};\n+use rt::rtio::{RtioTcpAcceptor, RtioTcpStream};\n \n pub struct TcpStream {\n     priv obj: ~RtioTcpStream\n@@ -26,15 +26,17 @@ impl TcpStream {\n     }\n \n     pub fn connect(addr: SocketAddr) -> Option<TcpStream> {\n-        with_local_io(|io| {\n-            match io.tcp_connect(addr) {\n-                Ok(s) => Some(TcpStream::new(s)),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let result = {\n+            let mut io = LocalIo::borrow();\n+            io.get().tcp_connect(addr)\n+        };\n+        match result {\n+            Ok(s) => Some(TcpStream::new(s)),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n \n     pub fn peer_name(&mut self) -> Option<SocketAddr> {\n@@ -92,15 +94,14 @@ pub struct TcpListener {\n \n impl TcpListener {\n     pub fn bind(addr: SocketAddr) -> Option<TcpListener> {\n-        with_local_io(|io| {\n-            match io.tcp_bind(addr) {\n-                Ok(l) => Some(TcpListener { obj: l }),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().tcp_bind(addr) {\n+            Ok(l) => Some(TcpListener { obj: l }),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n \n     pub fn socket_name(&mut self) -> Option<SocketAddr> {"}, {"sha": "87cf59aba3bf773036918c6e80be7dba12f7601c", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -13,23 +13,22 @@ use result::{Ok, Err};\n use io::net::ip::SocketAddr;\n use io::{Reader, Writer};\n use io::{io_error, EndOfFile};\n-use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, with_local_io};\n+use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n \n pub struct UdpSocket {\n     priv obj: ~RtioUdpSocket\n }\n \n impl UdpSocket {\n     pub fn bind(addr: SocketAddr) -> Option<UdpSocket> {\n-        with_local_io(|io| {\n-            match io.udp_bind(addr) {\n-                Ok(s) => Some(UdpSocket { obj: s }),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().udp_bind(addr) {\n+            Ok(s) => Some(UdpSocket { obj: s }),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n \n     pub fn recvfrom(&mut self, buf: &mut [u8]) -> Option<(uint, SocketAddr)> {"}, {"sha": "c1f75465d9ceb23f1e52312fb5ade0f14a98b320", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -25,7 +25,7 @@ instances as clients.\n use prelude::*;\n \n use c_str::ToCStr;\n-use rt::rtio::{IoFactory, RtioUnixListener, with_local_io};\n+use rt::rtio::{IoFactory, LocalIo, RtioUnixListener};\n use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n use io::pipe::PipeStream;\n use io::{io_error, Listener, Acceptor, Reader, Writer};\n@@ -59,15 +59,14 @@ impl UnixStream {\n     ///     stream.write([1, 2, 3]);\n     ///\n     pub fn connect<P: ToCStr>(path: &P) -> Option<UnixStream> {\n-        with_local_io(|io| {\n-            match io.unix_connect(&path.to_c_str()) {\n-                Ok(s) => Some(UnixStream::new(s)),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().unix_connect(&path.to_c_str()) {\n+            Ok(s) => Some(UnixStream::new(s)),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n }\n \n@@ -108,15 +107,14 @@ impl UnixListener {\n     ///     }\n     ///\n     pub fn bind<P: ToCStr>(path: &P) -> Option<UnixListener> {\n-        with_local_io(|io| {\n-            match io.unix_bind(&path.to_c_str()) {\n-                Ok(s) => Some(UnixListener{ obj: s }),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().unix_bind(&path.to_c_str()) {\n+            Ok(s) => Some(UnixListener{ obj: s }),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n }\n "}, {"sha": "252575ee4454f59e760e776c943994c5a5f0a2ab", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -17,7 +17,7 @@ use prelude::*;\n use super::{Reader, Writer};\n use io::{io_error, EndOfFile};\n use io::native::file;\n-use rt::rtio::{RtioPipe, with_local_io};\n+use rt::rtio::{LocalIo, RtioPipe};\n \n pub struct PipeStream {\n     priv obj: ~RtioPipe,\n@@ -44,15 +44,14 @@ impl PipeStream {\n     /// If the pipe cannot be created, an error will be raised on the\n     /// `io_error` condition.\n     pub fn open(fd: file::fd_t) -> Option<PipeStream> {\n-        with_local_io(|io| {\n-            match io.pipe_open(fd) {\n-                Ok(obj) => Some(PipeStream { obj: obj }),\n-                Err(e) => {\n-                    io_error::cond.raise(e);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().pipe_open(fd) {\n+            Ok(obj) => Some(PipeStream { obj: obj }),\n+            Err(e) => {\n+                io_error::cond.raise(e);\n+                None\n             }\n-        })\n+        }\n     }\n \n     pub fn new(inner: ~RtioPipe) -> PipeStream {"}, {"sha": "1c86ac84bbb0a2b56675bed21d5edf2a591288bc", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -11,12 +11,11 @@\n //! Bindings for executing child processes\n \n use prelude::*;\n-use cell::Cell;\n \n use libc;\n use io;\n use io::io_error;\n-use rt::rtio::{RtioProcess, IoFactory, with_local_io};\n+use rt::rtio::{RtioProcess, IoFactory, LocalIo};\n \n use fmt;\n \n@@ -120,21 +119,19 @@ impl Process {\n     /// Creates a new pipe initialized, but not bound to any particular\n     /// source/destination\n     pub fn new(config: ProcessConfig) -> Option<Process> {\n-        let config = Cell::new(config);\n-        with_local_io(|io| {\n-            match io.spawn(config.take()) {\n-                Ok((p, io)) => Some(Process{\n-                    handle: p,\n-                    io: io.move_iter().map(|p|\n-                        p.map(|p| io::PipeStream::new(p))\n-                    ).collect()\n-                }),\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().spawn(config) {\n+            Ok((p, io)) => Some(Process{\n+                handle: p,\n+                io: io.move_iter().map(|p|\n+                    p.map(|p| io::PipeStream::new(p))\n+                ).collect()\n+            }),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-        })\n+        }\n     }\n \n     /// Returns the process id of this child process"}, {"sha": "43659d24c35139f9fd383b72b3ae4f34dcd062ff", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -24,9 +24,8 @@ use comm::{Port, SharedChan, stream};\n use container::{Map, MutableMap};\n use hashmap;\n use io::io_error;\n-use option::{Some, None};\n use result::{Err, Ok};\n-use rt::rtio::{IoFactory, RtioSignal, with_local_io};\n+use rt::rtio::{IoFactory, LocalIo, RtioSignal};\n \n #[repr(int)]\n #[deriving(Eq, IterBytes)]\n@@ -123,18 +122,17 @@ impl Listener {\n         if self.handles.contains_key(&signum) {\n             return true; // self is already listening to signum, so succeed\n         }\n-        with_local_io(|io| {\n-            match io.signal(signum, self.chan.clone()) {\n-                Ok(w) => {\n-                    self.handles.insert(signum, w);\n-                    Some(())\n-                },\n-                Err(ioerr) => {\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().signal(signum, self.chan.clone()) {\n+            Ok(w) => {\n+                self.handles.insert(signum, w);\n+                true\n+            },\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                false\n             }\n-        }).is_some()\n+        }\n     }\n \n     /// Unregisters a signal. If this listener currently had a handler"}, {"sha": "509ef2a815765af714cdc8e492ef0f14c40aa2c7", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -31,7 +31,7 @@ use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n use io::buffered::LineBufferedWriter;\n-use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, with_local_io, DontClose};\n+use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, DontClose};\n use super::{Reader, Writer, io_error, IoError, OtherIoError,\n             standard_error, EndOfFile};\n \n@@ -69,12 +69,19 @@ enum StdSource {\n }\n \n fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n-    with_local_io(|io| {\n-        match io.tty_open(fd, readable) {\n-            Ok(tty) => Some(f(TTY(tty))),\n-            Err(_) => Some(f(File(io.fs_from_raw_fd(fd, DontClose)))),\n+    let mut io = LocalIo::borrow();\n+    match io.get().tty_open(fd, readable) {\n+        Ok(tty) => f(TTY(tty)),\n+        Err(_) => {\n+            // It's not really that desirable if these handles are closed\n+            // synchronously, and because they're squirreled away in a task\n+            // structure the destructors will be run when the task is\n+            // attempted to get destroyed. This means that if we run a\n+            // synchronous destructor we'll attempt to do some scheduling\n+            // operations which will just result in sadness.\n+            f(File(io.get().fs_from_raw_fd(fd, DontClose)))\n         }\n-    }).unwrap()\n+    }\n }\n \n /// Creates a new non-blocking handle to the stdin of the current process."}, {"sha": "202e02d55d0e689f7c3012dcfe1d830ccfab3dd9", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -42,7 +42,7 @@ use comm::{Port, PortOne};\n use option::{Option, Some, None};\n use result::{Ok, Err};\n use io::io_error;\n-use rt::rtio::{IoFactory, RtioTimer, with_local_io};\n+use rt::rtio::{IoFactory, LocalIo, RtioTimer};\n \n pub struct Timer {\n     priv obj: ~RtioTimer\n@@ -60,17 +60,15 @@ impl Timer {\n     /// for a number of milliseconds, or to possibly create channels which will\n     /// get notified after an amount of time has passed.\n     pub fn new() -> Option<Timer> {\n-        with_local_io(|io| {\n-            match io.timer_init() {\n-                Ok(t) => Some(Timer { obj: t }),\n-                Err(ioerr) => {\n-                    debug!(\"Timer::init: failed to init: {:?}\", ioerr);\n-                    io_error::cond.raise(ioerr);\n-                    None\n-                }\n+        let mut io = LocalIo::borrow();\n+        match io.get().timer_init() {\n+            Ok(t) => Some(Timer { obj: t }),\n+            Err(ioerr) => {\n+                debug!(\"Timer::init: failed to init: {:?}\", ioerr);\n+                io_error::cond.raise(ioerr);\n+                None\n             }\n-\n-        })\n+        }\n     }\n \n     /// Blocks the current task for `msecs` milliseconds."}, {"sha": "87b776d3c1e7941e3f388894d1e5a9bacbf8de20", "filename": "src/libstd/rt/basic.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Frt%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Frt%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbasic.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -159,8 +159,11 @@ impl EventLoop for BasicLoop {\n         ~BasicRemote::new(self.messages.clone(), id) as ~RemoteCallback\n     }\n \n-    fn io<'a>(&'a mut self, f: |&'a mut IoFactory|) {\n-        f(self.io)\n+    fn io(&mut self) -> &'static mut IoFactory:'static {\n+        unsafe {\n+            let factory: &mut IoFactory = self.io;\n+            cast::transmute(factory)\n+        }\n     }\n }\n "}, {"sha": "c6942ab8388f86f6935452918c2f544a91cccde9", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd80f74505a3eb7c44753c69cbe253ff566d5c1/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=6bd80f74505a3eb7c44753c69cbe253ff566d5c1", "patch": "@@ -9,15 +9,19 @@\n // except according to those terms.\n \n use c_str::CString;\n+use cast;\n use comm::{SharedChan, PortOne, Port};\n use libc::c_int;\n use libc;\n+use ops::Drop;\n use option::*;\n use path::Path;\n use result::*;\n \n use ai = io::net::addrinfo;\n use io::IoError;\n+use io::native::NATIVE_IO_FACTORY;\n+use io::native;\n use io::net::ip::{IpAddr, SocketAddr};\n use io::process::{ProcessConfig, ProcessExit};\n use io::signal::Signum;\n@@ -34,9 +38,8 @@ pub trait EventLoop {\n     fn pausible_idle_callback(&mut self, ~Callback) -> ~PausibleIdleCallback;\n     fn remote_callback(&mut self, ~Callback) -> ~RemoteCallback;\n \n-    /// The asynchronous I/O services. Not all event loops may provide one\n-    // FIXME(#9382) this is an awful interface\n-    fn io<'a>(&'a mut self, f: |&'a mut IoFactory|);\n+    /// The asynchronous I/O services. Not all event loops may provide one.\n+    fn io(&mut self) -> &'static mut IoFactory:'static;\n }\n \n pub trait RemoteCallback {\n@@ -75,31 +78,53 @@ pub enum CloseBehavior {\n     CloseAsynchronously,\n }\n \n-pub fn with_local_io<T>(f: |&mut IoFactory| -> Option<T>) -> Option<T> {\n-    use rt::sched::Scheduler;\n-    use rt::local::Local;\n-    use io::native;\n-\n-    unsafe {\n-        // First, attempt to use the local scheduler's I/O services\n-        let sched: Option<*mut Scheduler> = Local::try_unsafe_borrow();\n-        match sched {\n-            Some(sched) => {\n-                let mut io = None;\n-                (*sched).event_loop.io(|i| io = Some(i));\n-                match io {\n-                    Some(io) => return f(io),\n-                    None => {}\n+pub struct LocalIo {\n+    factory: &'static mut IoFactory:'static,\n+}\n+\n+#[unsafe_destructor]\n+impl Drop for LocalIo {\n+    fn drop(&mut self) {\n+        // XXX(pcwalton): Do nothing here for now, but eventually we may want\n+        // something. For now this serves to make `LocalIo` noncopyable.\n+    }\n+}\n+\n+impl LocalIo {\n+    /// Returns the local I/O: either the local scheduler's I/O services or\n+    /// the native I/O services.\n+    pub fn borrow() -> LocalIo {\n+        use rt::sched::Scheduler;\n+        use rt::local::Local;\n+\n+        unsafe {\n+            // First, attempt to use the local scheduler's I/O services\n+            let sched: Option<*mut Scheduler> = Local::try_unsafe_borrow();\n+            match sched {\n+                Some(sched) => {\n+                    return LocalIo {\n+                        factory: (*sched).event_loop.io(),\n+                    }\n                 }\n+                None => {}\n+            }\n+            // If we don't have a scheduler or the scheduler doesn't have I/O\n+            // services, then fall back to the native I/O services.\n+            let native_io: &'static mut native::IoFactory =\n+                &mut NATIVE_IO_FACTORY;\n+            LocalIo {\n+                factory: native_io as &mut IoFactory:'static\n             }\n-            None => {}\n         }\n     }\n \n-    // If we don't have a scheduler or the scheduler doesn't have I/O services,\n-    // then fall back to the native I/O services.\n-    let mut io = native::IoFactory;\n-    f(&mut io as &mut IoFactory)\n+    /// Returns the underlying I/O factory as a trait reference.\n+    #[inline]\n+    pub fn get(&mut self) -> &'static mut IoFactory {\n+        unsafe {\n+            cast::transmute_copy(&self.factory)\n+        }\n+    }\n }\n \n pub trait IoFactory {"}]}