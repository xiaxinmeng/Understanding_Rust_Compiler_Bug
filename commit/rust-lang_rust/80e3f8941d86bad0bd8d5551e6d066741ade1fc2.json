{"sha": "80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTNmODk0MWQ4NmJhZDBiZDhkNTU1MWU2ZDA2Njc0MWFkZTFmYzI=", "commit": {"author": {"name": "Jimmy Cuadra", "email": "jimmy@jimmycuadra.com", "date": "2017-08-30T05:13:21Z"}, "committer": {"name": "Jimmy Cuadra", "email": "jimmy@jimmycuadra.com", "date": "2017-08-30T05:13:21Z"}, "message": "Add blanket TryFrom impl when From is implemented.\n\nAdds `impl<T, U> TryFrom<T> for U where U: From<T>`.\n\nRemoves `impl<'a, T> TryFrom<&'a str> for T where T: FromStr` due to\noverlapping impls caused by the new blanket impl. This removal is to\nbe discussed further on the tracking issue for TryFrom.\n\nRefs #33417.", "tree": {"sha": "347b798b237260a0af8c657bc422e82d9926171c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347b798b237260a0af8c657bc422e82d9926171c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "html_url": "https://github.com/rust-lang/rust/commit/80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/comments", "author": {"login": "jimmycuadra", "id": 122457, "node_id": "MDQ6VXNlcjEyMjQ1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/122457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimmycuadra", "html_url": "https://github.com/jimmycuadra", "followers_url": "https://api.github.com/users/jimmycuadra/followers", "following_url": "https://api.github.com/users/jimmycuadra/following{/other_user}", "gists_url": "https://api.github.com/users/jimmycuadra/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimmycuadra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimmycuadra/subscriptions", "organizations_url": "https://api.github.com/users/jimmycuadra/orgs", "repos_url": "https://api.github.com/users/jimmycuadra/repos", "events_url": "https://api.github.com/users/jimmycuadra/events{/privacy}", "received_events_url": "https://api.github.com/users/jimmycuadra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jimmycuadra", "id": 122457, "node_id": "MDQ6VXNlcjEyMjQ1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/122457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimmycuadra", "html_url": "https://github.com/jimmycuadra", "followers_url": "https://api.github.com/users/jimmycuadra/followers", "following_url": "https://api.github.com/users/jimmycuadra/following{/other_user}", "gists_url": "https://api.github.com/users/jimmycuadra/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimmycuadra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimmycuadra/subscriptions", "organizations_url": "https://api.github.com/users/jimmycuadra/orgs", "repos_url": "https://api.github.com/users/jimmycuadra/repos", "events_url": "https://api.github.com/users/jimmycuadra/events{/privacy}", "received_events_url": "https://api.github.com/users/jimmycuadra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11f689d2475dd9ab956e881238d5d7b6b485efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11f689d2475dd9ab956e881238d5d7b6b485efb", "html_url": "https://github.com/rust-lang/rust/commit/c11f689d2475dd9ab956e881238d5d7b6b485efb"}], "stats": {"total": 86, "additions": 42, "deletions": 44}, "files": [{"sha": "37b5bfa265d5d3b8dbe273d8d4ce95d2aea205f6", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "patch": "@@ -48,7 +48,24 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use str::FromStr;\n+use fmt;\n+\n+/// An uninhabited type used as the error type for implementations of fallible\n+/// conversion traits in cases where they cannot actually fail.\n+///\n+/// Because `Infallible` has no constructors (variants), a value of this type\n+/// can never exist. It is used only to satisfy trait signatures that expect\n+/// an error type, and signals to both the compiler and the user that the error\n+/// case is impossible.\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+pub enum Infallible {}\n+\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl fmt::Debug for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n \n /// A cheap reference-to-reference conversion. Used to convert a value to a\n /// reference value within generic code.\n@@ -417,6 +434,17 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n     }\n }\n \n+// Infallible conversions are semantically equivalent to fallible conversions\n+// with an uninhabited error type.\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl<T, U> TryFrom<U> for T where T: From<U> {\n+    type Error = Infallible;\n+\n+    fn try_from(value: U) -> Result<Self, Self::Error> {\n+        Ok(T::from(value))\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // CONCRETE IMPLS\n ////////////////////////////////////////////////////////////////////////////////\n@@ -442,14 +470,3 @@ impl AsRef<str> for str {\n         self\n     }\n }\n-\n-// FromStr implies TryFrom<&str>\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl<'a, T> TryFrom<&'a str> for T where T: FromStr\n-{\n-    type Error = <T as FromStr>::Err;\n-\n-    fn try_from(s: &'a str) -> Result<T, Self::Error> {\n-        FromStr::from_str(s)\n-    }\n-}"}, {"sha": "e9aee4a4676de47fda7282106908e79d3d80b430", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "patch": "@@ -89,6 +89,7 @@ macro_rules! step_impl_unsigned {\n             }\n \n             #[inline]\n+            #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n                 match <$t>::try_from(n) {\n                     Ok(n_as_t) => self.checked_add(n_as_t),\n@@ -120,6 +121,7 @@ macro_rules! step_impl_signed {\n             }\n \n             #[inline]\n+            #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n                 match <$unsigned>::try_from(n) {\n                     Ok(n_as_unsigned) => {"}, {"sha": "4777f9d72ccd78abdeab30295a7f09a440811046", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "patch": "@@ -2507,12 +2507,10 @@ impl fmt::Display for TryFromIntError {\n macro_rules! try_from_unbounded {\n     ($source:ty, $($target:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n-        impl TryFrom<$source> for $target {\n-            type Error = TryFromIntError;\n-\n+        impl From<$source> for $target {\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n-                Ok(u as $target)\n+            fn from(value: $source) -> $target {\n+                value as $target\n             }\n         }\n     )*}\n@@ -2584,31 +2582,17 @@ macro_rules! rev {\n }\n \n /// intra-sign conversions\n-try_from_unbounded!(u8, u8, u16, u32, u64, u128);\n-try_from_unbounded!(u16, u16, u32, u64, u128);\n-try_from_unbounded!(u32, u32, u64, u128);\n-try_from_unbounded!(u64, u64, u128);\n-try_from_unbounded!(u128, u128);\n try_from_upper_bounded!(u16, u8);\n try_from_upper_bounded!(u32, u16, u8);\n try_from_upper_bounded!(u64, u32, u16, u8);\n try_from_upper_bounded!(u128, u64, u32, u16, u8);\n \n-try_from_unbounded!(i8, i8, i16, i32, i64, i128);\n-try_from_unbounded!(i16, i16, i32, i64, i128);\n-try_from_unbounded!(i32, i32, i64, i128);\n-try_from_unbounded!(i64, i64, i128);\n-try_from_unbounded!(i128, i128);\n try_from_both_bounded!(i16, i8);\n try_from_both_bounded!(i32, i16, i8);\n try_from_both_bounded!(i64, i32, i16, i8);\n try_from_both_bounded!(i128, i64, i32, i16, i8);\n \n // unsigned-to-signed\n-try_from_unbounded!(u8, i16, i32, i64, i128);\n-try_from_unbounded!(u16, i32, i64, i128);\n-try_from_unbounded!(u32, i64, i128);\n-try_from_unbounded!(u64, i128);\n try_from_upper_bounded!(u8, i8);\n try_from_upper_bounded!(u16, i8, i16);\n try_from_upper_bounded!(u32, i8, i16, i32);\n@@ -2627,10 +2611,8 @@ try_from_both_bounded!(i64, u32, u16, u8);\n try_from_both_bounded!(i128, u64, u32, u16, u8);\n \n // usize/isize\n-try_from_unbounded!(usize, usize);\n try_from_upper_bounded!(usize, isize);\n try_from_lower_bounded!(isize, usize);\n-try_from_unbounded!(isize, isize);\n \n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n@@ -2647,14 +2629,14 @@ mod ptr_try_from_impls {\n     try_from_both_bounded!(isize, i8);\n     try_from_unbounded!(isize, i16, i32, i64, i128);\n \n-    rev!(try_from_unbounded, usize, u8, u16);\n+    rev!(try_from_unbounded, usize, u16);\n     rev!(try_from_upper_bounded, usize, u32, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16);\n     rev!(try_from_both_bounded, usize, i32, i64, i128);\n \n     rev!(try_from_unbounded, isize, u8);\n     rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i8, i16);\n+    rev!(try_from_unbounded, isize, i16);\n     rev!(try_from_both_bounded, isize, i32, i64, i128);\n }\n \n@@ -2673,14 +2655,14 @@ mod ptr_try_from_impls {\n     try_from_both_bounded!(isize, i8, i16);\n     try_from_unbounded!(isize, i32, i64, i128);\n \n-    rev!(try_from_unbounded, usize, u8, u16, u32);\n+    rev!(try_from_unbounded, usize, u16, u32);\n     rev!(try_from_upper_bounded, usize, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32);\n     rev!(try_from_both_bounded, usize, i64, i128);\n \n     rev!(try_from_unbounded, isize, u8, u16);\n     rev!(try_from_upper_bounded, isize, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i8, i16, i32);\n+    rev!(try_from_unbounded, isize, i16, i32);\n     rev!(try_from_both_bounded, isize, i64, i128);\n }\n \n@@ -2699,14 +2681,14 @@ mod ptr_try_from_impls {\n     try_from_both_bounded!(isize, i8, i16, i32);\n     try_from_unbounded!(isize, i64, i128);\n \n-    rev!(try_from_unbounded, usize, u8, u16, u32, u64);\n+    rev!(try_from_unbounded, usize, u16, u32, u64);\n     rev!(try_from_upper_bounded, usize, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n     rev!(try_from_both_bounded, usize, i128);\n \n     rev!(try_from_unbounded, isize, u8, u16, u32);\n     rev!(try_from_upper_bounded, isize, u64, u128);\n-    rev!(try_from_unbounded, isize, i8, i16, i32, i64);\n+    rev!(try_from_unbounded, isize, i16, i32, i64);\n     rev!(try_from_both_bounded, isize, i128);\n }\n "}, {"sha": "86a3b9f330bbb11c8fbff398dfea23594583f7b4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e3f8941d86bad0bd8d5551e6d066741ade1fc2/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=80e3f8941d86bad0bd8d5551e6d066741ade1fc2", "patch": "@@ -18,7 +18,6 @@ use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char;\n-use convert::TryFrom;\n use fmt;\n use iter::{Map, Cloned, FusedIterator};\n use slice::{self, SliceIndex};\n@@ -2142,7 +2141,7 @@ pub trait StrExt {\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_empty(&self) -> bool;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn parse<'a, T: TryFrom<&'a str>>(&'a self) -> Result<T, T::Error>;\n+    fn parse<T: FromStr>(&self) -> Result<T, T::Err>;\n }\n \n // truncate `&str` to length at most equal to `max`\n@@ -2462,9 +2461,7 @@ impl StrExt for str {\n     fn is_empty(&self) -> bool { self.len() == 0 }\n \n     #[inline]\n-    fn parse<'a, T>(&'a self) -> Result<T, T::Error> where T: TryFrom<&'a str> {\n-        T::try_from(self)\n-    }\n+    fn parse<T: FromStr>(&self) -> Result<T, T::Err> { FromStr::from_str(self) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}