{"sha": "6457b29104028bbb3af5efeefed7343d85576320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NTdiMjkxMDQwMjhiYmIzYWY1ZWZlZWZlZDczNDNkODU1NzYzMjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-10T19:53:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T10:04:26Z"}, "message": "move PanicInfo to mir module", "tree": {"sha": "b61c3be08b95b3805d2a0c6bfad1c8f99361781a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b61c3be08b95b3805d2a0c6bfad1c8f99361781a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6457b29104028bbb3af5efeefed7343d85576320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6457b29104028bbb3af5efeefed7343d85576320", "html_url": "https://github.com/rust-lang/rust/commit/6457b29104028bbb3af5efeefed7343d85576320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6457b29104028bbb3af5efeefed7343d85576320/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a8cfd605fb8d43dc61496a522cf3b84988d69d", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a8cfd605fb8d43dc61496a522cf3b84988d69d", "html_url": "https://github.com/rust-lang/rust/commit/17a8cfd605fb8d43dc61496a522cf3b84988d69d"}], "stats": {"total": 158, "additions": 78, "deletions": 80}, "files": [{"sha": "a7e769b8b967500682a5d67c43afb52e7c309abc", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -7,7 +7,6 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n-use hir::GeneratorKind;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n@@ -266,62 +265,6 @@ impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n     }\n }\n \n-/// Information about a panic.\n-///\n-/// FIXME: this is not actually an InterpError, and should probably be moved to another module.\n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable, PartialEq)]\n-pub enum PanicInfo<O> {\n-    BoundsCheck { len: O, index: O },\n-    Overflow(mir::BinOp),\n-    OverflowNeg,\n-    DivisionByZero,\n-    RemainderByZero,\n-    ResumedAfterReturn(GeneratorKind),\n-    ResumedAfterPanic(GeneratorKind),\n-}\n-\n-/// Type for MIR `Assert` terminator error messages.\n-pub type AssertMessage<'tcx> = PanicInfo<mir::Operand<'tcx>>;\n-\n-impl<O> PanicInfo<O> {\n-    /// Getting a description does not require `O` to be printable, and does not\n-    /// require allocation.\n-    /// The caller is expected to handle `BoundsCheck` separately.\n-    pub fn description(&self) -> &'static str {\n-        use PanicInfo::*;\n-        match self {\n-            Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n-            Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\",\n-            Overflow(mir::BinOp::Mul) => \"attempt to multiply with overflow\",\n-            Overflow(mir::BinOp::Div) => \"attempt to divide with overflow\",\n-            Overflow(mir::BinOp::Rem) => \"attempt to calculate the remainder with overflow\",\n-            OverflowNeg => \"attempt to negate with overflow\",\n-            Overflow(mir::BinOp::Shr) => \"attempt to shift right with overflow\",\n-            Overflow(mir::BinOp::Shl) => \"attempt to shift left with overflow\",\n-            Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n-            DivisionByZero => \"attempt to divide by zero\",\n-            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n-            ResumedAfterReturn(GeneratorKind::Gen) => \"generator resumed after completion\",\n-            ResumedAfterReturn(GeneratorKind::Async(_)) => \"`async fn` resumed after completion\",\n-            ResumedAfterPanic(GeneratorKind::Gen) => \"generator resumed after panicking\",\n-            ResumedAfterPanic(GeneratorKind::Async(_)) => \"`async fn` resumed after panicking\",\n-            BoundsCheck { .. } => bug!(\"Unexpected PanicInfo\"),\n-        }\n-    }\n-}\n-\n-impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use PanicInfo::*;\n-        match self {\n-            BoundsCheck { ref len, ref index } => {\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n-            }\n-            _ => write!(f, \"{}\", self.description()),\n-        }\n-    }\n-}\n-\n /// Error information for when the program we executed turned out not to actually be a valid\n /// program. This cannot happen in stand-alone Miri, but it can happen during CTFE/ConstProp\n /// where we work on generic code or execution does not have all information available."}, {"sha": "f0879bdd8ae9b6482a1362f016db198cd6a027ab", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -90,9 +90,9 @@ mod queries;\n mod value;\n \n pub use self::error::{\n-    struct_error, AssertMessage, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n-    FrameInfo, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, PanicInfo,\n-    ResourceExhaustionInfo, UndefinedBehaviorInfo, UnsupportedOpInfo,\n+    struct_error, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled, FrameInfo,\n+    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, ResourceExhaustionInfo,\n+    UndefinedBehaviorInfo, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUndef};"}, {"sha": "8d224b6d7394fb33777107a2c53d7b85f5bf0316", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -2,7 +2,7 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n \n-use crate::mir::interpret::{GlobalAlloc, PanicInfo, Scalar};\n+use crate::mir::interpret::{GlobalAlloc, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -36,7 +36,6 @@ pub use syntax::ast::Mutability;\n use syntax::ast::Name;\n \n pub use self::cache::{BodyAndCache, ReadOnlyBodyAndCache};\n-pub use self::interpret::AssertMessage;\n pub use self::query::*;\n pub use crate::read_only;\n \n@@ -1154,6 +1153,21 @@ pub enum TerminatorKind<'tcx> {\n     },\n }\n \n+/// Information about an assertion failure.\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable, PartialEq)]\n+pub enum PanicInfo<O> {\n+    BoundsCheck { len: O, index: O },\n+    Overflow(BinOp),\n+    OverflowNeg,\n+    DivisionByZero,\n+    RemainderByZero,\n+    ResumedAfterReturn(GeneratorKind),\n+    ResumedAfterPanic(GeneratorKind),\n+}\n+\n+/// Type for MIR `Assert` terminator error messages.\n+pub type AssertMessage<'tcx> = PanicInfo<Operand<'tcx>>;\n+\n pub type Successors<'a> =\n     iter::Chain<option::IntoIter<&'a BasicBlock>, slice::Iter<'a, BasicBlock>>;\n pub type SuccessorsMut<'a> =\n@@ -1383,6 +1397,45 @@ impl<'tcx> BasicBlockData<'tcx> {\n     }\n }\n \n+impl<O> PanicInfo<O> {\n+    /// Getting a description does not require `O` to be printable, and does not\n+    /// require allocation.\n+    /// The caller is expected to handle `BoundsCheck` separately.\n+    pub fn description(&self) -> &'static str {\n+        use PanicInfo::*;\n+        match self {\n+            Overflow(BinOp::Add) => \"attempt to add with overflow\",\n+            Overflow(BinOp::Sub) => \"attempt to subtract with overflow\",\n+            Overflow(BinOp::Mul) => \"attempt to multiply with overflow\",\n+            Overflow(BinOp::Div) => \"attempt to divide with overflow\",\n+            Overflow(BinOp::Rem) => \"attempt to calculate the remainder with overflow\",\n+            OverflowNeg => \"attempt to negate with overflow\",\n+            Overflow(BinOp::Shr) => \"attempt to shift right with overflow\",\n+            Overflow(BinOp::Shl) => \"attempt to shift left with overflow\",\n+            Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n+            DivisionByZero => \"attempt to divide by zero\",\n+            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n+            ResumedAfterReturn(GeneratorKind::Gen) => \"generator resumed after completion\",\n+            ResumedAfterReturn(GeneratorKind::Async(_)) => \"`async fn` resumed after completion\",\n+            ResumedAfterPanic(GeneratorKind::Gen) => \"generator resumed after panicking\",\n+            ResumedAfterPanic(GeneratorKind::Async(_)) => \"`async fn` resumed after panicking\",\n+            BoundsCheck { .. } => bug!(\"Unexpected PanicInfo\"),\n+        }\n+    }\n+}\n+\n+impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use PanicInfo::*;\n+        match self {\n+            BoundsCheck { ref len, ref index } => {\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n+            }\n+            _ => write!(f, \"{}\", self.description()),\n+        }\n+    }\n+}\n+\n impl<'tcx> Debug for TerminatorKind<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         self.fmt_head(fmt)?;"}, {"sha": "529ed71a6f3918f029a2c3076e41d60fb29b5e32", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -533,7 +533,7 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n-                use crate::mir::interpret::PanicInfo::*;\n+                use crate::mir::PanicInfo::*;\n                 match msg {\n                     BoundsCheck { len, index } => {\n                         self.visit_operand(len, location);"}, {"sha": "835050fece6dbaf044e5820f74bfb7772fb67fae", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -11,7 +11,7 @@ use crate::MemFlags;\n \n use rustc::middle::lang_items;\n use rustc::mir;\n-use rustc::mir::interpret::PanicInfo;\n+use rustc::mir::PanicInfo;\n use rustc::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf};\n use rustc::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_index::vec::Idx;"}, {"sha": "317b5edcb410da68ae50fdfac039c5826d24d584", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -153,7 +153,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::interpret::PanicInfo;\n+                use rustc::mir::PanicInfo;\n                 if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);"}, {"sha": "899529ce2429a857cf3a4f0e4807b4276804f886", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -654,7 +654,7 @@ impl<'cx, 'tcx> dataflow::generic::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::interpret::PanicInfo;\n+                use rustc::mir::PanicInfo;\n                 if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);"}, {"sha": "bb074a81d2a7b924987944852e2aa70ff34af121", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -9,9 +9,9 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n-use rustc::mir::interpret::PanicInfo;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n+use rustc::mir::PanicInfo;\n use rustc::mir::*;\n use rustc::traits::query::type_op;\n use rustc::traits::query::type_op::custom::CustomTypeOp;"}, {"sha": "5f05f439d925a8cd5d36234b0c9ccb2f5a3e7a4e", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -1,10 +1,11 @@\n use std::error::Error;\n use std::fmt;\n \n+use rustc::mir::PanicInfo;\n use rustc_span::Symbol;\n \n use super::InterpCx;\n-use crate::interpret::{ConstEvalErr, InterpError, InterpErrorInfo, Machine, PanicInfo};\n+use crate::interpret::{ConstEvalErr, InterpError, InterpErrorInfo, Machine};\n \n /// The CTFE machine has some custom error kinds.\n #[derive(Clone, Debug)]"}, {"sha": "65cc53cac9df4b0ce56e0256f7c97757ec3b3f38", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -8,12 +8,13 @@ use std::hash::Hash;\n \n use rustc_data_structures::fx::FxHashMap;\n \n+use rustc::mir::AssertMessage;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n use crate::interpret::{\n-    self, snapshot, AllocId, Allocation, AssertMessage, GlobalId, ImmTy, InterpCx, InterpResult,\n-    Memory, MemoryKind, OpTy, PlaceTy, Pointer, Scalar,\n+    self, snapshot, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory,\n+    MemoryKind, OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n@@ -280,7 +281,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         msg: &AssertMessage<'tcx>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        use rustc::mir::interpret::PanicInfo::*;\n+        use rustc::mir::PanicInfo::*;\n         // Convert `PanicInfo<Operand>` to `PanicInfo<u64>`.\n         let err = match msg {\n             BoundsCheck { ref len, ref index } => {"}, {"sha": "5291000d10b3fa775d18135084d1b3d727ac41e8", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -11,8 +11,8 @@ use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n \n use super::{\n-    AllocId, Allocation, AllocationExtra, AssertMessage, Frame, ImmTy, InterpCx, InterpResult,\n-    Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar,\n+    AllocId, Allocation, AllocationExtra, Frame, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n+    OpTy, Operand, PlaceTy, Pointer, Scalar,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -171,7 +171,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         span: Span,\n-        msg: &AssertMessage<'tcx>,\n+        msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;\n "}, {"sha": "c8d832814c7a542716319b4b07c2536960ca0833", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -4,13 +4,13 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n \n-use rustc::mir::interpret::{InterpError, InterpResult, PanicInfo, Scalar};\n+use rustc::mir::interpret::{InterpError, InterpResult, Scalar};\n use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc::mir::{\n     read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate, Constant,\n-    Local, LocalDecl, LocalKind, Location, Operand, Place, ReadOnlyBodyAndCache, Rvalue,\n+    Local, LocalDecl, LocalKind, Location, Operand, PanicInfo, Place, ReadOnlyBodyAndCache, Rvalue,\n     SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n     UnOp, RETURN_PLACE,\n };\n@@ -198,7 +198,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _span: Span,\n-        _msg: &rustc::mir::interpret::AssertMessage<'tcx>,\n+        _msg: &rustc::mir::AssertMessage<'tcx>,\n         _unwind: Option<rustc::mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         bug!(\"panics terminators are not evaluated in ConstProp\");"}, {"sha": "da19fb34927bc9499026459ec664dcdb2f33eaa6", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -1022,7 +1022,7 @@ fn create_generator_resume_function<'tcx>(\n \n     let mut cases = create_cases(body, &transform, Operation::Resume);\n \n-    use rustc::mir::interpret::PanicInfo::{ResumedAfterPanic, ResumedAfterReturn};\n+    use rustc::mir::PanicInfo::{ResumedAfterPanic, ResumedAfterReturn};\n \n     // Jump to the entry point on the unresumed\n     cases.insert(0, (UNRESUMED, BasicBlock::new(0)));"}, {"sha": "86f87790f23493ac640365323095abf36da62416", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -5,7 +5,7 @@ use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::PanicInfo::BoundsCheck;\n+use rustc::mir::PanicInfo::BoundsCheck;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n use rustc_span::Span;"}, {"sha": "5722a8c1cd9332657816b277dbc6ace9e605a8d2", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457b29104028bbb3af5efeefed7343d85576320/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6457b29104028bbb3af5efeefed7343d85576320", "patch": "@@ -6,7 +6,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::PanicInfo;\n+use rustc::mir::PanicInfo;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;"}]}