{"sha": "e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YWQ0OWFhNjdiN2U2ZTBkOWM1YmM0YmQ2OGY0NGEwMDlmOTE1OTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-01-15T14:07:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-01-15T17:14:11Z"}, "message": "Include type alias implementations", "tree": {"sha": "128a9671c4dc92f48ef0517fd075e1abd9e7737d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128a9671c4dc92f48ef0517fd075e1abd9e7737d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595", "html_url": "https://github.com/rust-lang/rust/commit/e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e791464bcabc3d64b8fd5de6f2217c67d81a8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e791464bcabc3d64b8fd5de6f2217c67d81a8b1", "html_url": "https://github.com/rust-lang/rust/commit/6e791464bcabc3d64b8fd5de6f2217c67d81a8b1"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "aafc7a8a10ff6a7e25b5396f4dfbd2a3e6a38076", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e6ad49aa67b7e6e0d9c5bc4bd68f44a009f91595", "patch": "@@ -2595,7 +2595,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n     }\n \n     // If there are methods directly on this trait object, render them here.\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All);\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All);\n \n     let mut synthetic_types = Vec::new();\n \n@@ -2942,7 +2942,7 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n             }\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union) {\n@@ -2988,7 +2988,7 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union)\n             document(w, cx, field);\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n@@ -3130,7 +3130,7 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n             render_stability_since(w, variant, it);\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n@@ -3344,7 +3344,7 @@ fn render_assoc_items(\n     cx: &Context,\n     containing_item: &clean::Item,\n     it: DefId,\n-    what: AssocItemRender<'_>,\n+    what: &AssocItemRender<'_>,\n ) {\n     let c = &cx.cache;\n     let v = match c.impls.get(&it) {\n@@ -3377,7 +3377,7 @@ fn render_assoc_items(\n                     trait_.print(),\n                     type_.print()\n                 );\n-                RenderMode::ForDeref { mut_: deref_mut_ }\n+                RenderMode::ForDeref { mut_: *deref_mut_ }\n             }\n         };\n         for i in &non_trait {\n@@ -3461,6 +3461,19 @@ fn render_assoc_items(\n     }\n }\n \n+fn get_def_id(real_target: &clean::Type, cx: &Context) -> Option<DefId> {\n+    if let Some(did) = real_target.def_id() {\n+        return Some(did);\n+    } else {\n+        if let Some(prim) = real_target.primitive_type() {\n+            if let Some(&did) = cx.cache.primitive_locations.get(&prim) {\n+                return Some(did);\n+            }\n+        }\n+    }\n+    None\n+}\n+\n fn render_deref_methods(\n     w: &mut Buffer,\n     cx: &Context,\n@@ -3475,23 +3488,21 @@ fn render_deref_methods(\n         .iter()\n         .filter_map(|item| match item.inner {\n             clean::TypedefItem(ref t, true) => Some(match *t {\n-                clean::Typedef { item_type: Some(ref type_), .. } => (&t.type_, type_),\n-                _ => (&t.type_, &t.type_),\n+                clean::Typedef { item_type: Some(ref type_), .. } => (&t.type_, Some(type_)),\n+                _ => (&t.type_, None),\n             }),\n             _ => None,\n         })\n         .next()\n         .expect(\"Expected associated type binding\");\n+    let did = get_def_id(&target, cx);\n     let what =\n         AssocItemRender::DerefFor { trait_: deref_type, type_: target, deref_mut_: deref_mut };\n-    if let Some(did) = real_target.def_id() {\n-        render_assoc_items(w, cx, container_item, did, what)\n-    } else {\n-        if let Some(prim) = real_target.primitive_type() {\n-            if let Some(&did) = cx.cache.primitive_locations.get(&prim) {\n-                render_assoc_items(w, cx, container_item, did, what);\n-            }\n-        }\n+    if let Some(did) = did {\n+        render_assoc_items(w, cx, container_item, did, &what);\n+    }\n+    if let Some(did) = real_target.and_then(|x| get_def_id(x, cx)) {\n+        render_assoc_items(w, cx, container_item, did, &what);\n     }\n }\n \n@@ -3873,7 +3884,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Opa\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn item_trait_alias(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::TraitAlias) {\n@@ -3894,7 +3905,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::T\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typedef) {\n@@ -3915,7 +3926,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typed\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n@@ -3930,7 +3941,7 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n \n     document(w, cx, it);\n \n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer) {\n@@ -4602,7 +4613,7 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, m: &clean::Pr\n \n fn item_primitive(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n     document(w, cx, it);\n-    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+    render_assoc_items(w, cx, it, it.def_id, &AssocItemRender::All)\n }\n \n fn item_keyword(w: &mut Buffer, cx: &Context, it: &clean::Item) {"}]}