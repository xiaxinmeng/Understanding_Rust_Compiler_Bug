{"sha": "a19f93410d4315408f8775e1be29536302adc223", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOWY5MzQxMGQ0MzE1NDA4Zjg3NzVlMWJlMjk1MzYzMDJhZGMyMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-12T08:23:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-12T08:23:32Z"}, "message": "Auto merge of #66323 - JohnTitor:rollup-jl8xdk4, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #65965 (Clean up librustc_typeck error_codes file)\n - #66230 (remove vestigial comments referring to defunct numeric trait hierarchy)\n - #66241 (bump openssl version)\n - #66257 (Drop long-section-names linker workaround for windows-gnu)\n - #66263 (make the error message more readable)\n - #66267 (Add rustdoc doc)\n - #66276 (Move lock into CodeStats)\n - #66278 (Fix error message about exported symbols from proc-macro crates)\n - #66280 (Fix HashSet::union performance)\n - #66299 (support issue = \"none\" in unstable attributes )\n - #66309 (Tiny cleanup to size assertions)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6712e00314955a7df2c5581f382988e42b250f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6712e00314955a7df2c5581f382988e42b250f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a19f93410d4315408f8775e1be29536302adc223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a19f93410d4315408f8775e1be29536302adc223", "html_url": "https://github.com/rust-lang/rust/commit/a19f93410d4315408f8775e1be29536302adc223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a19f93410d4315408f8775e1be29536302adc223/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3d998492abd7d61aba12cfa058fce28c998a3ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d998492abd7d61aba12cfa058fce28c998a3ff", "html_url": "https://github.com/rust-lang/rust/commit/e3d998492abd7d61aba12cfa058fce28c998a3ff"}, {"sha": "420f9263068d9091b1705eaacec9b19059ff1793", "url": "https://api.github.com/repos/rust-lang/rust/commits/420f9263068d9091b1705eaacec9b19059ff1793", "html_url": "https://github.com/rust-lang/rust/commit/420f9263068d9091b1705eaacec9b19059ff1793"}], "stats": {"total": 648, "additions": 458, "deletions": 190}, "files": [{"sha": "16f2ffc28150f6c8507c4779df227c32315e0afd", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -2252,9 +2252,9 @@ dependencies = [\n \n [[package]]\n name = \"openssl\"\n-version = \"0.10.16\"\n+version = \"0.10.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ec7bd7ca4cce6dbdc77e7c1230682740d307d1218a87fb0349a571272be749f9\"\n+checksum = \"2f372b2b53ce10fb823a337aaa674e3a7d072b957c6264d0f4ff0bd86e657449\"\n dependencies = [\n  \"bitflags\",\n  \"cfg-if\",\n@@ -2281,15 +2281,15 @@ dependencies = [\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.43\"\n+version = \"0.9.52\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"33c86834957dd5b915623e94f2f4ab2c70dd8f6b70679824155d5ae21dbd495d\"\n+checksum = \"c977d08e1312e2f7e4b86f9ebaa0ed3b19d1daff75fae88bbb88108afbd801fc\"\n dependencies = [\n+ \"autocfg\",\n  \"cc\",\n  \"libc\",\n  \"openssl-src\",\n  \"pkg-config\",\n- \"rustc_version\",\n  \"vcpkg\",\n ]\n "}, {"sha": "7b49cc0a9298cc059b56e2c2670e214bf78c02a5", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -448,12 +448,12 @@ Arguments:\n \n         Flags {\n             verbose: matches.opt_count(\"verbose\"),\n-            stage: matches.opt_str(\"stage\").map(|j| j.parse().unwrap()),\n+            stage: matches.opt_str(\"stage\").map(|j| j.parse().expect(\"`stage` should be a number\")),\n             dry_run: matches.opt_present(\"dry-run\"),\n             on_fail: matches.opt_str(\"on-fail\"),\n             rustc_error_format: matches.opt_str(\"error-format\"),\n             keep_stage: matches.opt_strs(\"keep-stage\")\n-                .into_iter().map(|j| j.parse().unwrap())\n+                .into_iter().map(|j| j.parse().expect(\"`keep-stage` should be a number\"))\n                 .collect(),\n             host: split(&matches.opt_strs(\"host\"))\n                 .into_iter()\n@@ -464,7 +464,7 @@ Arguments:\n                 .map(|x| INTERNER.intern_string(x))\n                 .collect::<Vec<_>>(),\n             config: cfg_file,\n-            jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n+            jobs: matches.opt_str(\"jobs\").map(|j| j.parse().expect(\"`jobs` should be a number\")),\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),\n             exclude: split(&matches.opt_strs(\"exclude\"))"}, {"sha": "d4202f5b367ab4686a8b13b009efaf4475b21c26", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -1,8 +1,10 @@\n # The Rustdoc Book\n \n - [What is rustdoc?](what-is-rustdoc.md)\n+- [How to write documentation](how-to-write-documentation.md)\n - [Command-line arguments](command-line-arguments.md)\n - [The `#[doc]` attribute](the-doc-attribute.md)\n - [Documentation tests](documentation-tests.md)\n+- [Lints](lints.md)\n - [Passes](passes.md)\n - [Unstable features](unstable-features.md)"}, {"sha": "dd3aa5d4b6988ebf5ae47bd4b681f5bf19cc7c72", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -0,0 +1,82 @@\n+# How to write documentation\n+\n+This chapter covers not only how to write documentation but specifically\n+how to write **good** documentation.  Something to keep in mind when\n+writing documentation is that your audience is not just yourself but others\n+who simply don't have the context you do.  It is important to be as clear\n+as you can, and as complete as possible.  As a rule of thumb: the more\n+documentation you write for your crate the better.  If an item is public\n+then it should be documented.\n+\n+## Basic structure\n+\n+It is recommended that each item's documentation follows this basic structure:\n+\n+```text\n+[short sentence explaining what it is]\n+\n+[more detailed explanation]\n+\n+[at least one code example that users can copy/paste to try it]\n+\n+[even more advanced explanations if necessary]\n+```\n+\n+This basic structure should be straightforward to follow when writing your\n+documentation and, while you might think that a code example is trivial,\n+the examples are really important because they can help your users to\n+understand what an item is, how it is used, and for what purpose it exists.\n+\n+Let's see an example coming from the [standard library] by taking a look at the\n+[`std::env::args()`][env::args] function:\n+\n+``````text\n+Returns the arguments which this program was started with (normally passed\n+via the command line).\n+\n+The first element is traditionally the path of the executable, but it can be\n+set to arbitrary text, and may not even exist. This means this property should\n+not be relied upon for security purposes.\n+\n+On Unix systems shell usually expands unquoted arguments with glob patterns\n+(such as `*` and `?`). On Windows this is not done, and such arguments are\n+passed as-is.\n+\n+# Panics\n+\n+The returned iterator will panic during iteration if any argument to the\n+process is not valid unicode. If this is not desired,\n+use the [`args_os`] function instead.\n+\n+# Examples\n+\n+```\n+use std::env;\n+\n+// Prints each argument on a separate line\n+for argument in env::args() {\n+    println!(\"{}\", argument);\n+}\n+```\n+\n+[`args_os`]: ./fn.args_os.html\n+``````\n+\n+As you can see, it follows the structure detailed above: it starts with a short\n+sentence explaining what the functions does, then it provides more information\n+and finally provides a code example.\n+\n+## Markdown\n+\n+`rustdoc` is using the [commonmark markdown specification]. You might be\n+interested into taking a look at their website to see what's possible to do.\n+\n+## Lints\n+\n+To be sure that you didn't miss any item without documentation or code examples,\n+you can take a look at the rustdoc lints [here][rustdoc-lints].\n+\n+[standard library]: https://doc.rust-lang.org/stable/std/index.html\n+[env::args]: https://doc.rust-lang.org/stable/std/env/fn.args.html\n+[commonmark markdown specification]: https://commonmark.org/\n+[rustdoc-lints]: lints.md"}, {"sha": "beb2556872df78278e0cc2b1e385fc707d9294e9", "filename": "src/doc/rustdoc/src/lints.md", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -0,0 +1,119 @@\n+# Lints\n+\n+`rustdoc` provides lints to help you writing and testing your documentation. You\n+can use them like any other lints by doing this:\n+\n+```rust,ignore\n+#![allow(missing_docs)] // allowing the lint, no message\n+#![warn(missing_docs)] // warn if there is missing docs\n+#![deny(missing_docs)] // rustdoc will fail if there is missing docs\n+```\n+\n+Here is the list of the lints provided by `rustdoc`:\n+\n+## intra_doc_link_resolution_failure\n+\n+This lint **warns by default** and is **nightly-only**. This lint detects when\n+an intra-doc link fails to get resolved. For example:\n+\n+```rust\n+/// I want to link to [`Inexistent`] but it doesn't exist!\n+pub fn foo() {}\n+```\n+\n+You'll get a warning saying:\n+\n+```text\n+error: `[`Inexistent`]` cannot be resolved, ignoring it...\n+```\n+\n+## missing_docs\n+\n+This lint is **allowed by default**. It detects items missing documentation.\n+For example:\n+\n+```rust\n+#![warn(missing_docs)]\n+\n+pub fn undocumented() {}\n+# fn main() {}\n+```\n+\n+The `undocumented` function will then have the following warning:\n+\n+```text\n+warning: missing documentation for a function\n+  --> your-crate/lib.rs:3:1\n+   |\n+ 3 | pub fn undocumented() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+```\n+\n+## missing_doc_code_examples\n+\n+This lint is **allowed by default**. It detects when a documentation block\n+is missing a code example. For example:\n+\n+```rust\n+#![warn(missing_doc_code_examples)]\n+\n+/// There is no code example!\n+pub fn no_code_example() {}\n+# fn main() {}\n+```\n+\n+The `no_code_example` function will then have the following warning:\n+\n+```text\n+warning: Missing code example in this documentation\n+  --> your-crate/lib.rs:3:1\n+   |\n+LL | /// There is no code example!\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+```\n+\n+To fix the lint, you need to add a code example into the documentation block:\n+\n+```rust\n+/// There is no code example!\n+///\n+/// ```\n+/// println!(\"calling no_code_example...\");\n+/// no_code_example();\n+/// println!(\"we called no_code_example!\");\n+/// ```\n+pub fn no_code_example() {}\n+```\n+\n+## private_doc_tests\n+\n+This lint is **allowed by default**. It detects documentation tests when they\n+are on a private item. For example:\n+\n+```rust\n+#![warn(private_doc_tests)]\n+\n+mod foo {\n+    /// private doc test\n+    ///\n+    /// ```\n+    /// assert!(false);\n+    /// ```\n+    fn bar() {}\n+}\n+# fn main() {}\n+```\n+\n+Which will give:\n+\n+```text\n+warning: Documentation test in private item\n+  --> your-crate/lib.rs:4:1\n+   |\n+ 4 | /     /// private doc test\n+ 5 | |     ///\n+ 6 | |     /// ```\n+ 7 | |     /// assert!(false);\n+ 8 | |     /// ```\n+   | |___________^\n+```"}, {"sha": "b5d61a3fd4e786ca6b9beea4791407aa56bef29f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -235,7 +235,6 @@ depending on the target pointer size.\n \"}\n }\n \n-// `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n      $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n@@ -2303,7 +2302,6 @@ impl isize {\n          usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n-// `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,"}, {"sha": "fabb0a59da81dadf3f8731a1ce57d0995a7adc04", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -22,8 +22,9 @@ use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n-use std::mem::replace;\n use std::cmp::Ordering;\n+use std::mem::replace;\n+use std::num::NonZeroU32;\n \n #[derive(PartialEq, Clone, Copy, Debug)]\n pub enum StabilityLevel {\n@@ -441,7 +442,7 @@ impl<'tcx> Index<'tcx> {\n                 let stability = tcx.intern_stability(Stability {\n                     level: attr::StabilityLevel::Unstable {\n                         reason: Some(Symbol::intern(reason)),\n-                        issue: 27812,\n+                        issue: NonZeroU32::new(27812),\n                         is_soft: false,\n                     },\n                     feature: sym::rustc_private,\n@@ -488,7 +489,7 @@ pub fn report_unstable(\n     sess: &Session,\n     feature: Symbol,\n     reason: Option<Symbol>,\n-    issue: u32,\n+    issue: Option<NonZeroU32>,\n     is_soft: bool,\n     span: Span,\n     soft_handler: impl FnOnce(&'static lint::Lint, Span, &str),\n@@ -520,7 +521,7 @@ pub fn report_unstable(\n             soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n         } else {\n             emit_feature_err(\n-                &sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg\n+                &sess.parse_sess, feature, span, GateIssue::Library(issue), &msg\n             );\n         }\n     }\n@@ -637,7 +638,7 @@ pub enum EvalResult {\n     Deny {\n         feature: Symbol,\n         reason: Option<Symbol>,\n-        issue: u32,\n+        issue: Option<NonZeroU32>,\n         is_soft: bool,\n     },\n     /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n@@ -758,7 +759,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // the `-Z force-unstable-if-unmarked` flag present (we're\n                 // compiling a compiler crate), then let this missing feature\n                 // annotation slide.\n-                if feature == sym::rustc_private && issue == 27812 {\n+                if feature == sym::rustc_private && issue == NonZeroU32::new(27812) {\n                     if self.sess.opts.debugging_opts.force_unstable_if_unmarked {\n                         return EvalResult::Allow;\n                     }"}, {"sha": "5baf0c5948f28a5481a25ee1111f52494d9c7349", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -1,6 +1,7 @@\n use rustc_target::abi::{Align, Size};\n use rustc_data_structures::fx::{FxHashSet};\n use std::cmp::{self, Ordering};\n+use rustc_data_structures::sync::Lock;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct VariantInfo {\n@@ -44,13 +45,13 @@ pub struct TypeSizeInfo {\n     pub variants: Vec<VariantInfo>,\n }\n \n-#[derive(PartialEq, Eq, Debug, Default)]\n+#[derive(Default)]\n pub struct CodeStats {\n-    type_sizes: FxHashSet<TypeSizeInfo>,\n+    type_sizes: Lock<FxHashSet<TypeSizeInfo>>,\n }\n \n impl CodeStats {\n-    pub fn record_type_size<S: ToString>(&mut self,\n+    pub fn record_type_size<S: ToString>(&self,\n                                          kind: DataTypeKind,\n                                          type_desc: S,\n                                          align: Align,\n@@ -73,11 +74,12 @@ impl CodeStats {\n             opt_discr_size: opt_discr_size.map(|s| s.bytes()),\n             variants,\n         };\n-        self.type_sizes.insert(info);\n+        self.type_sizes.borrow_mut().insert(info);\n     }\n \n     pub fn print_type_sizes(&self) {\n-        let mut sorted: Vec<_> = self.type_sizes.iter().collect();\n+        let type_sizes = self.type_sizes.borrow();\n+        let mut sorted: Vec<_> = type_sizes.iter().collect();\n \n         // Primary sort: large-to-small.\n         // Secondary sort: description (dictionary order)"}, {"sha": "9792223ea15063b2893b553bb84c293635a118f4", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -41,6 +41,7 @@ use std::cell::{self, RefCell};\n use std::env;\n use std::fmt;\n use std::io::Write;\n+use std::num::NonZeroU32;\n use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::Arc;\n@@ -124,7 +125,7 @@ pub struct Session {\n     pub perf_stats: PerfStats,\n \n     /// Data about code being compiled, gathered during compilation.\n-    pub code_stats: Lock<CodeStats>,\n+    pub code_stats: CodeStats,\n \n     /// If `-zfuel=crate=n` is specified, `Some(crate)`.\n     optimization_fuel_crate: Option<String>,\n@@ -183,7 +184,7 @@ enum DiagnosticBuilderMethod {\n pub enum DiagnosticMessageId {\n     ErrorId(u16), // EXXXX error code as integer\n     LintId(lint::LintId),\n-    StabilityId(u32), // issue number\n+    StabilityId(Option<NonZeroU32>), // issue number\n }\n \n impl From<&'static lint::Lint> for DiagnosticMessageId {"}, {"sha": "972452601ddd5c6ef192bf19a277177f8d76ce34", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -1614,13 +1614,13 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // (delay format until we actually need it)\n         let record = |kind, packed, opt_discr_size, variants| {\n             let type_desc = format!(\"{:?}\", layout.ty);\n-            self.tcx.sess.code_stats.borrow_mut().record_type_size(kind,\n-                                                                   type_desc,\n-                                                                   layout.align.abi,\n-                                                                   layout.size,\n-                                                                   packed,\n-                                                                   opt_discr_size,\n-                                                                   variants);\n+            self.tcx.sess.code_stats.record_type_size(kind,\n+                                                      type_desc,\n+                                                      layout.align.abi,\n+                                                      layout.size,\n+                                                      packed,\n+                                                      opt_discr_size,\n+                                                      variants);\n         };\n \n         let adt_def = match layout.ty.kind {"}, {"sha": "10bc6599e7592ac64f8d22447bdc643c2ad45cd8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -393,7 +393,7 @@ pub fn run_compiler(\n         mem::drop(compiler.global_ctxt()?.take());\n \n         if sess.opts.debugging_opts.print_type_sizes {\n-            sess.code_stats.borrow().print_type_sizes();\n+            sess.code_stats.print_type_sizes();\n         }\n \n         compiler.link()?;"}, {"sha": "8ee28875c625931bd277ad2cb8814aa854cc686d", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -15,8 +15,6 @@ use Level::*;\n \n use emitter::{Emitter, EmitterWriter, is_case_difference};\n use registry::Registry;\n-#[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::{self, Lrc, Lock};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -54,7 +52,7 @@ pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n // (See also the comment on `DiagnosticBuilderInner`.)\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PResult<'_, bool>, 16);\n+rustc_data_structures::static_assert_size!(PResult<'_, bool>, 16);\n \n /// Indicates the confidence in the correctness of a suggestion.\n ///"}, {"sha": "ce7b338345caf6e4fed10c2c7313e40d42ca9cbd", "filename": "src/librustc_target/spec/windows_base.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -4,33 +4,6 @@ use std::default::Default;\n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(LinkerFlavor::Gcc, vec![\n-            // And here, we see obscure linker flags #45. On windows, it has been\n-            // found to be necessary to have this flag to compile liblibc.\n-            //\n-            // First a bit of background. On Windows, the file format is not ELF,\n-            // but COFF (at least according to LLVM). COFF doesn't officially allow\n-            // for section names over 8 characters, apparently. Our metadata\n-            // section, \".note.rustc\", you'll note is over 8 characters.\n-            //\n-            // On more recent versions of gcc on mingw, apparently the section name\n-            // is *not* truncated, but rather stored elsewhere in a separate lookup\n-            // table. On older versions of gcc, they apparently always truncated th\n-            // section names (at least in some cases). Truncating the section name\n-            // actually creates \"invalid\" objects [1] [2], but only for some\n-            // introspection tools, not in terms of whether it can be loaded.\n-            //\n-            // Long story short, passing this flag forces the linker to *not*\n-            // truncate section names (so we can find the metadata section after\n-            // it's compiled). The real kicker is that rust compiled just fine on\n-            // windows for quite a long time *without* this flag, so I have no idea\n-            // why it suddenly started failing for liblibc. Regardless, we\n-            // definitely don't want section name truncation, so we're keeping this\n-            // flag for windows.\n-            //\n-            // [1] - https://sourceware.org/bugzilla/show_bug.cgi?id=13130\n-            // [2] - https://code.google.com/p/go/issues/detail?id=2139\n-            \"-Wl,--enable-long-section-names\".to_string(),\n-\n             // Tell GCC to avoid linker plugins, because we are not bundling\n             // them with Windows installer, and Rust does its own LTO anyways.\n             \"-fno-use-linker-plugin\".to_string(),"}, {"sha": "560abeb705704576f7614fa8cb6b2320c669965e", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 132, "deletions": 76, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -3,9 +3,9 @@\n syntax::register_diagnostics! {\n \n E0023: r##\"\n-A pattern used to match against an enum variant must provide a sub-pattern for\n-each field of the enum variant. This error indicates that a pattern attempted to\n-extract an incorrect number of fields from a variant.\n+A pattern attempted to extract an incorrect number of fields from a variant.\n+\n+Erroneous code example:\n \n ```\n enum Fruit {\n@@ -14,6 +14,9 @@ enum Fruit {\n }\n ```\n \n+A pattern used to match against an enum variant must provide a sub-pattern for\n+each field of the enum variant.\n+\n Here the `Apple` variant has two fields, and should be matched against like so:\n \n ```\n@@ -53,8 +56,9 @@ uses the same number.\n \"##,\n \n E0025: r##\"\n-Each field of a struct can only be bound once in a pattern. Erroneous code\n-example:\n+Each field of a struct can only be bound once in a pattern.\n+\n+Erroneous code example:\n \n ```compile_fail,E0025\n struct Foo {\n@@ -89,65 +93,47 @@ fn main(){\n \"##,\n \n E0026: r##\"\n-This error indicates that a struct pattern attempted to extract a non-existent\n-field from a struct. Struct fields are identified by the name used before the\n-colon `:` so struct patterns should resemble the declaration of the struct type\n-being matched.\n-\n-```\n-// Correct matching.\n-struct Thing {\n-    x: u32,\n-    y: u32\n-}\n-\n-let thing = Thing { x: 1, y: 2 };\n+A struct pattern attempted to extract a non-existent field from a struct.\n \n-match thing {\n-    Thing { x: xfield, y: yfield } => {}\n-}\n-```\n-\n-If you are using shorthand field patterns but want to refer to the struct field\n-by a different name, you should rename it explicitly.\n-\n-Change this:\n+Erroneous code example:\n \n ```compile_fail,E0026\n struct Thing {\n     x: u32,\n-    y: u32\n+    y: u32,\n }\n \n let thing = Thing { x: 0, y: 0 };\n \n match thing {\n-    Thing { x, z } => {}\n+    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n }\n ```\n \n-To this:\n+If you are using shorthand field patterns but want to refer to the struct field\n+by a different name, you should rename it explicitly. Struct fields are\n+identified by the name used before the colon `:` so struct patterns should\n+resemble the declaration of the struct type being matched.\n \n ```\n struct Thing {\n     x: u32,\n-    y: u32\n+    y: u32,\n }\n \n let thing = Thing { x: 0, y: 0 };\n \n match thing {\n-    Thing { x, y: z } => {}\n+    Thing { x, y: z } => {} // we renamed `y` to `z`\n }\n ```\n \"##,\n \n E0027: r##\"\n-This error indicates that a pattern for a struct fails to specify a sub-pattern\n-for every one of the struct's fields. Ensure that each field from the struct's\n-definition is mentioned in the pattern, or use `..` to ignore unwanted fields.\n+A pattern for a struct fails to specify a sub-pattern for every one of the\n+struct's fields.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0027\n struct Dog {\n@@ -163,7 +149,8 @@ match d {\n }\n ```\n \n-This is correct (explicit):\n+To fix this error, ensure that each field from the struct's definition is\n+mentioned in the pattern, or use `..` to ignore unwanted fields. Example:\n \n ```\n struct Dog {\n@@ -185,11 +172,9 @@ match d {\n \"##,\n \n E0029: r##\"\n-In a match expression, only numbers and characters can be matched against a\n-range. This is because the compiler checks that the range is non-empty at\n-compile-time, and is unable to evaluate arbitrary comparison functions. If you\n-want to capture values of an orderable type between two end-points, you can use\n-a guard.\n+Something other than numbers and characters has been used for a range.\n+\n+Erroneous code example:\n \n ```compile_fail,E0029\n let string = \"salutations !\";\n@@ -207,14 +192,18 @@ match string {\n     _ => {}\n }\n ```\n+\n+In a match expression, only numbers and characters can be matched against a\n+range. This is because the compiler checks that the range is non-empty at\n+compile-time, and is unable to evaluate arbitrary comparison functions. If you\n+want to capture values of an orderable type between two end-points, you can use\n+a guard.\n \"##,\n \n E0033: r##\"\n-This error indicates that a pointer to a trait type cannot be implicitly\n-dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementers isn't fixed, this type has no compile-time size.\n-Therefore, all accesses to trait types must be through pointers. If you\n-encounter this error you should try to avoid dereferencing the pointer.\n+A trait type has been dereferenced.\n+\n+Erroneous code example:\n \n ```compile_fail,E0033\n # trait SomeTrait { fn method_one(&self){} fn method_two(&self){} }\n@@ -229,6 +218,12 @@ trait_obj.method_one();\n trait_obj.method_two();\n ```\n \n+A pointer to a trait type cannot be implicitly dereferenced by a pattern. Every\n+trait defines a type, but because the size of trait implementers isn't fixed,\n+this type has no compile-time size. Therefore, all accesses to trait types must\n+be through pointers. If you encounter this error you should try to avoid\n+dereferencing the pointer.\n+\n You can read more about trait objects in the [Trait Objects] section of the\n Reference.\n \n@@ -237,7 +232,9 @@ Reference.\n \n E0034: r##\"\n The compiler doesn't know what method to call because more than one method\n-has the same prototype. Erroneous code example:\n+has the same prototype.\n+\n+Erroneous code example:\n \n ```compile_fail,E0034\n struct Test;\n@@ -323,11 +320,9 @@ fn main() {\n \"##,\n \n E0040: r##\"\n-It is not allowed to manually call destructors in Rust. It is also not\n-necessary to do this since `drop` is called automatically whenever a value goes\n-out of scope.\n+It is not allowed to manually call destructors in Rust.\n \n-Here's an example of this error:\n+Erroneous code example:\n \n ```compile_fail,E0040\n struct Foo {\n@@ -345,11 +340,33 @@ fn main() {\n     x.drop(); // error: explicit use of destructor method\n }\n ```\n+\n+It is unnecessary to do this since `drop` is called automatically whenever a\n+value goes out of scope. However, if you really need to drop a value by hand,\n+you can use the `std::mem::drop` function:\n+\n+```\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    drop(x); // ok!\n+}\n+```\n \"##,\n \n E0044: r##\"\n You cannot use type or const parameters on foreign items.\n-Example of erroneous code:\n+\n+Erroneous code example:\n \n ```compile_fail,E0044\n extern { fn some_func<T>(x: T); }\n@@ -365,21 +382,21 @@ extern { fn some_func_i64(x: i64); }\n \"##,\n \n E0045: r##\"\n-Rust only supports variadic parameters for interoperability with C code in its\n-FFI. As such, variadic parameters can only be used with functions which are\n-using the C ABI. Examples of erroneous code:\n+Variadic parameters have been used on a non-C ABI function.\n \n-```compile_fail\n-#![feature(unboxed_closures)]\n-\n-extern \"rust-call\" { fn foo(x: u8, ...); }\n+Erroneous code example:\n \n-// or\n+```compile_fail,E0045\n+#![feature(unboxed_closures)]\n \n-fn foo(x: u8, ...) {}\n+extern \"rust-call\" {\n+    fn foo(x: u8, ...); // error!\n+}\n ```\n \n-To fix such code, put them in an extern \"C\" block:\n+Rust only supports variadic parameters for interoperability with C code in its\n+FFI. As such, variadic parameters can only be used with functions which are\n+using the C ABI. To fix such code, put them in an extern \"C\" block:\n \n ```\n extern \"C\" {\n@@ -389,7 +406,9 @@ extern \"C\" {\n \"##,\n \n E0046: r##\"\n-Items are missing in a trait implementation. Erroneous code example:\n+Items are missing in a trait implementation.\n+\n+Erroneous code example:\n \n ```compile_fail,E0046\n trait Foo {\n@@ -421,11 +440,10 @@ impl Foo for Bar {\n \"##,\n \n E0049: r##\"\n-This error indicates that an attempted implementation of a trait method\n-has the wrong number of type or const parameters.\n+An attempted implementation of a trait method has the wrong number of type or\n+const parameters.\n \n-For example, the trait below has a method `foo` with a type parameter `T`,\n-but the implementation of `foo` for the type `Bar` is missing this parameter:\n+Erroneous code example:\n \n ```compile_fail,E0049\n trait Foo {\n@@ -440,15 +458,31 @@ impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar }\n }\n ```\n+\n+For example, the `Foo` trait has a method `foo` with a type parameter `T`,\n+but the implementation of `foo` for the type `Bar` is missing this parameter.\n+To fix this error, they must have the same type parameters:\n+\n+```\n+trait Foo {\n+    fn foo<T: Default>(x: T) -> Self;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo<T: Default>(x: T) -> Self { // ok!\n+        Bar\n+    }\n+}\n+```\n \"##,\n \n E0050: r##\"\n-This error indicates that an attempted implementation of a trait method\n-has the wrong number of function parameters.\n+An attempted implementation of a trait method has the wrong number of function\n+parameters.\n \n-For example, the trait below has a method `foo` with two function parameters\n-(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n-the `u8` parameter:\n+Erroneous code example:\n \n ```compile_fail,E0050\n trait Foo {\n@@ -463,13 +497,31 @@ impl Foo for Bar {\n     fn foo(&self) -> bool { true }\n }\n ```\n+\n+For example, the `Foo` trait has a method `foo` with two function parameters\n+(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n+the `u8` parameter. To fix this error, they must have the same parameters:\n+\n+```\n+trait Foo {\n+    fn foo(&self, x: u8) -> bool;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(&self, x: u8) -> bool { // ok!\n+        true\n+    }\n+}\n+```\n \"##,\n \n E0053: r##\"\n The parameters of any trait method must match between a trait implementation\n and the trait definition.\n \n-Here are a couple examples of this error:\n+Erroneous code example:\n \n ```compile_fail,E0053\n trait Foo {\n@@ -490,8 +542,9 @@ impl Foo for Bar {\n \"##,\n \n E0054: r##\"\n-It is not allowed to cast to a bool. If you are trying to cast a numeric type\n-to a bool, you can compare it with zero instead:\n+It is not allowed to cast to a bool.\n+\n+Erroneous code example:\n \n ```compile_fail,E0054\n let x = 5;\n@@ -500,6 +553,9 @@ let x = 5;\n let x_is_nonzero = x as bool;\n ```\n \n+If you are trying to cast a numeric type to a bool, you can compare it with\n+zero instead:\n+\n ```\n let x = 5;\n "}, {"sha": "3d42d5bb0caad5f21f3f7a13d6c92356690ee0f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -39,6 +39,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::default::Default;\n use std::{mem, slice, vec};\n+use std::num::NonZeroU32;\n use std::iter::FromIterator;\n use std::rc::Rc;\n use std::cell::RefCell;\n@@ -4399,7 +4400,7 @@ pub struct Stability {\n     pub since: String,\n     pub deprecation: Option<Deprecation>,\n     pub unstable_reason: Option<String>,\n-    pub issue: Option<u32>,\n+    pub issue: Option<NonZeroU32>,\n }\n \n #[derive(Clone, Debug)]\n@@ -4428,7 +4429,7 @@ impl Clean<Stability> for attr::Stability {\n                 _ => None,\n             },\n             issue: match self.level {\n-                attr::Unstable {issue, ..} => Some(issue),\n+                attr::Unstable {issue, ..} => issue,\n                 _ => None,\n             }\n         }"}, {"sha": "a038ee802105728eef0a6759fb34fb60ddcf56ad", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -551,7 +551,7 @@ impl<T, S> HashSet<T, S>\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n-        if self.len() <= other.len() {\n+        if self.len() >= other.len() {\n             Union {\n                 iter: self.iter().chain(other.difference(self)),\n             }"}, {"sha": "13bf6752ba2bc6baeb8fb7c1dd3ce81557f4e2be", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -38,9 +38,6 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::vec::Idx;\n use rustc_serialize::{self, Decoder, Encoder};\n \n-#[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert_size;\n-\n use std::fmt;\n \n #[cfg(test)]\n@@ -1028,7 +1025,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(Expr, 96);\n+rustc_data_structures::static_assert_size!(Expr, 96);\n \n impl Expr {\n     /// Returns `true` if this expression would be valid somewhere that expects a value;"}, {"sha": "2b759c205f54edaf51133de8e77e91610736b7d8", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -6,6 +6,7 @@ use crate::print::pprust;\n use crate::sess::ParseSess;\n \n use errors::{Applicability, Handler};\n+use std::num::NonZeroU32;\n use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n \n@@ -157,7 +158,7 @@ pub struct Stability {\n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n-    Unstable { reason: Option<Symbol>, issue: u32, is_soft: bool },\n+    Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n     Stable { since: Symbol },\n }\n \n@@ -394,18 +395,28 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(issue)) => {\n+                            let issue = match &*issue.as_str() {\n+                                // FIXME(rossmacarthur): remove \"0\" because \"none\" should be used\n+                                // See #41260\n+                                \"none\" | \"0\" => None,\n+                                issue => {\n+                                    if let Ok(num) = issue.parse() {\n+                                        NonZeroU32::new(num)\n+                                    } else {\n+                                        span_err!(\n+                                            diagnostic,\n+                                            attr.span,\n+                                            E0545,\n+                                            \"incorrect 'issue'\"\n+                                        );\n+                                        continue\n+                                    }\n+                                }\n+                            };\n                             stab = Some(Stability {\n                                 level: Unstable {\n                                     reason,\n-                                    issue: {\n-                                        if let Ok(issue) = issue.as_str().parse() {\n-                                            issue\n-                                        } else {\n-                                            span_err!(diagnostic, attr.span, E0545,\n-                                                      \"incorrect 'issue'\");\n-                                            continue\n-                                        }\n-                                    },\n+                                    issue,\n                                     is_soft,\n                                 },\n                                 feature,"}, {"sha": "2819ee273d9f042029956ef097f4d2ed122b3f0e", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -207,10 +207,10 @@ declare_features! (\n     /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n     (active, allocator_internals, \"1.20.0\", None, None),\n \n-    // no-tracking-issue-end\n-\n     /// Added for testing E0705; perma-unstable.\n-    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n+    (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+\n+    // no-tracking-issue-end\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: internal feature gates"}, {"sha": "3bf1e24bf12796d8734d183a537fd7963f231cf8", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -18,6 +18,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n \n use std::env;\n+use std::num::NonZeroU32;\n \n #[derive(Copy, Clone, Debug)]\n pub enum Stability {\n@@ -55,25 +56,28 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n+fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n     if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n         // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(info.issue.is_some())\n-        info.issue\n+        // assert!(info.issue().is_some())\n+        info.issue()\n     } else {\n         // search in Accepted, Removed, or Stable Removed features\n-        let found = ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).chain(STABLE_REMOVED_FEATURES)\n+        let found = ACCEPTED_FEATURES\n+            .iter()\n+            .chain(REMOVED_FEATURES)\n+            .chain(STABLE_REMOVED_FEATURES)\n             .find(|t| t.name == feature);\n         match found {\n-            Some(&Feature { issue, .. }) => issue,\n-            None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n+            Some(found) => found.issue(),\n+            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n         }\n     }\n }\n \n pub enum GateIssue {\n     Language,\n-    Library(Option<u32>)\n+    Library(Option<NonZeroU32>)\n }\n \n #[derive(Debug, Copy, Clone, PartialEq)]\n@@ -126,14 +130,11 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n         GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n-    match issue {\n-        None | Some(0) => {}  // We still accept `0` as a stand-in for backwards compatibility\n-        Some(n) => {\n-            err.note(&format!(\n-                \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n-                n,\n-            ));\n-        }\n+    if let Some(n) = issue {\n+        err.note(&format!(\n+            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n+            n,\n+        ));\n     }\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable"}, {"sha": "c4418c0f0f632b26cf26ec0e1e900ca0868d76c8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -18,8 +18,9 @@ mod active;\n mod builtin_attrs;\n mod check;\n \n-use std::fmt;\n use crate::{edition::Edition, symbol::Symbol};\n+use std::fmt;\n+use std::num::NonZeroU32;\n use syntax_pos::Span;\n \n #[derive(Clone, Copy)]\n@@ -46,11 +47,17 @@ pub struct Feature {\n     state: State,\n     name: Symbol,\n     since: &'static str,\n-    issue: Option<u32>,\n+    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n     edition: Option<Edition>,\n     description: &'static str,\n }\n \n+impl Feature {\n+    fn issue(&self) -> Option<NonZeroU32> {\n+        self.issue.and_then(|i| NonZeroU32::new(i))\n+    }\n+}\n+\n pub use active::{Features, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n     AttributeGate, AttributeType, GatedCfg,"}, {"sha": "ab798e93d67fc009bb2208b86c5d400f44e9ae76", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -14,8 +14,6 @@ use syntax_pos::{self, Span, DUMMY_SP};\n \n use std::fmt;\n use std::mem;\n-#[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -261,7 +259,7 @@ pub enum TokenKind {\n \n // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(TokenKind, 16);\n+rustc_data_structures::static_assert_size!(TokenKind, 16);\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub struct Token {"}, {"sha": "2201f1ed6caca46228936efeef4ef3c135d183ad", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -16,8 +16,6 @@\n use crate::token::{self, DelimToken, Token, TokenKind};\n \n use syntax_pos::{Span, DUMMY_SP};\n-#[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n use smallvec::{SmallVec, smallvec};\n \n@@ -129,7 +127,7 @@ pub type TreeAndJoint = (TokenTree, IsJoint);\n \n // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(TokenStream, 8);\n+rustc_data_structures::static_assert_size!(TokenStream, 8);\n \n #[derive(Clone, Copy, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum IsJoint {"}, {"sha": "fbded7dc130eb3a6a72798e6c20295ac27b5af4e", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -92,10 +92,12 @@ pub fn inject(sess: &ParseSess,\n impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n         if self.is_proc_macro_crate && self.in_root && vis.node.is_pub() {\n-            self.handler.span_err(sp,\n-                                  \"`proc-macro` crate types cannot \\\n-                                   export any items other than functions \\\n-                                   tagged with `#[proc_macro_derive]` currently\");\n+            self.handler.span_err(\n+                sp,\n+                \"`proc-macro` crate types currently cannot export any items other \\\n+                    than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, \\\n+                    or `#[proc_macro_attribute]`\",\n+            );\n         }\n     }\n "}, {"sha": "3ce9de3fb1b4673ea2b6c074aa469c889bc27703", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-none.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -0,0 +1,13 @@\n+// Check that an issue value can be explicitly set to \"none\" instead of \"0\"\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+fn unstable_issue_0() {}\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+fn unstable_issue_none() {}\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"something\")] //~ ERROR incorrect 'issue'\n+fn unstable_issue_not_allowed() {}"}, {"sha": "fc031f5f8c5d163c43970dac78934b8e91bdef88", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-none.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-none.stderr?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -0,0 +1,8 @@\n+error[E0545]: incorrect 'issue'\n+  --> $DIR/unstable-attribute-allow-issue-none.rs:12:1\n+   |\n+LL | #[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0ecbdf98dd31cb3b8e9870893cae2d6d12204620", "filename": "src/test/ui/proc-macro/exports.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Fproc-macro%2Fexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Fproc-macro%2Fexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexports.stderr?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -1,22 +1,22 @@\n-error: `proc-macro` crate types cannot export any items other than functions tagged with `#[proc_macro_derive]` currently\n+error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/exports.rs:7:1\n    |\n LL | pub fn a() {}\n    | ^^^^^^^^^^^^^\n \n-error: `proc-macro` crate types cannot export any items other than functions tagged with `#[proc_macro_derive]` currently\n+error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/exports.rs:8:1\n    |\n LL | pub struct B;\n    | ^^^^^^^^^^^^^\n \n-error: `proc-macro` crate types cannot export any items other than functions tagged with `#[proc_macro_derive]` currently\n+error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/exports.rs:9:1\n    |\n LL | pub enum C {}\n    | ^^^^^^^^^^^^^\n \n-error: `proc-macro` crate types cannot export any items other than functions tagged with `#[proc_macro_derive]` currently\n+error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/exports.rs:10:1\n    |\n LL | pub mod d {}"}, {"sha": "54cf333a45b137bff6cd1bd4e40d78d717346c8b", "filename": "src/test/ui/proc-macro/pub-at-crate-root.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.rs?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -5,7 +5,7 @@\n \n extern crate proc_macro;\n \n-pub mod a { //~ `proc-macro` crate types cannot export any items\n+pub mod a { //~ `proc-macro` crate types currently cannot export any items\n     use proc_macro::TokenStream;\n \n     #[proc_macro_derive(B)]"}, {"sha": "3b69b7875bde093a1820429348494fa5c2e5529c", "filename": "src/test/ui/proc-macro/pub-at-crate-root.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a19f93410d4315408f8775e1be29536302adc223/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fpub-at-crate-root.stderr?ref=a19f93410d4315408f8775e1be29536302adc223", "patch": "@@ -1,4 +1,4 @@\n-error: `proc-macro` crate types cannot export any items other than functions tagged with `#[proc_macro_derive]` currently\n+error: `proc-macro` crate types currently cannot export any items other than functions tagged with `#[proc_macro]`, `#[proc_macro_derive]`, or `#[proc_macro_attribute]`\n   --> $DIR/pub-at-crate-root.rs:8:1\n    |\n LL | / pub mod a {"}]}