{"sha": "63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "node_id": "C_kwDOAAsO6NoAKDYzZmZkZmRkMTc3NmFmYTJlODJiYmQzZDJmZjhmZjdiN2YwZDViNjc", "commit": {"author": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-25T12:19:42Z"}, "committer": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-30T00:53:06Z"}, "message": "Add compilation tests with optimization enabled\n\nIntroduces a new variant of `tests/lib.rs` that compiles the source\nfiles in `tests/run` with `-Copt-level=3`.", "tree": {"sha": "12a50fb5d959adc1716ea9e0946df77387c8c1f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a50fb5d959adc1716ea9e0946df77387c8c1f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "html_url": "https://github.com/rust-lang/rust/commit/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/comments", "author": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "html_url": "https://github.com/rust-lang/rust/commit/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "211d19a8dc8909546bac8558553d2f8ca5c9959c", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "patch": "@@ -9,8 +9,12 @@ license = \"MIT OR Apache-2.0\"\n crate-type = [\"dylib\"]\n \n [[test]]\n-name = \"lang_tests\"\n-path = \"tests/lib.rs\"\n+name = \"lang_tests_debug\"\n+path = \"tests/lang_tests_debug.rs\"\n+harness = false\n+[[test]]\n+name = \"lang_tests_release\"\n+path = \"tests/lang_tests_release.rs\"\n harness = false\n \n [features]"}, {"sha": "8e378177e24572b1f5f199dd0550a13d72ecc096", "filename": "tests/lang_tests_common.rs", "status": "renamed", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Flang_tests_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Flang_tests_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flang_tests_common.rs?ref=63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "patch": "@@ -1,3 +1,4 @@\n+//! The common code for `tests/lang_tests_*.rs`\n use std::{\n     env::{self, current_dir},\n     path::PathBuf,\n@@ -7,7 +8,15 @@ use std::{\n use lang_tester::LangTester;\n use tempfile::TempDir;\n \n-fn main() {\n+/// Controls the compile options (e.g., optimization level) used to compile\n+/// test code.\n+#[allow(dead_code)] // Each test crate picks one variant\n+pub enum Profile {\n+    Debug,\n+    Release,\n+}\n+\n+pub fn main_inner(profile: Profile) {\n     let tempdir = TempDir::new().expect(\"temp dir\");\n     let current_dir = current_dir().expect(\"current dir\");\n     let current_dir = current_dir.to_str().expect(\"current dir\").to_string();\n@@ -42,6 +51,15 @@ fn main() {\n                 \"-o\", exe.to_str().expect(\"to_str\"),\n                 path.to_str().expect(\"to_str\"),\n             ]);\n+            match profile {\n+                Profile::Debug => {}\n+                Profile::Release => {\n+                    compiler.args(&[\n+                        \"-C\", \"opt-level=3\",\n+                        \"-C\", \"lto=no\",\n+                    ]);\n+                }\n+            }\n             // Test command 2: run `tempdir/x`.\n             let runtime = Command::new(exe);\n             vec![(\"Compiler\", compiler), (\"Run-time\", runtime)]", "previous_filename": "tests/lib.rs"}, {"sha": "96bd74883ff0ab50c184b51687f929a40358a947", "filename": "tests/lang_tests_debug.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Flang_tests_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Flang_tests_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flang_tests_debug.rs?ref=63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "patch": "@@ -0,0 +1,5 @@\n+mod lang_tests_common;\n+\n+fn main() {\n+    lang_tests_common::main_inner(lang_tests_common::Profile::Debug);\n+}"}, {"sha": "35d5d60c33ee3b10d4ab3dea57bfa83bd01218c8", "filename": "tests/lang_tests_release.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Flang_tests_release.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Flang_tests_release.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flang_tests_release.rs?ref=63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "patch": "@@ -0,0 +1,5 @@\n+mod lang_tests_common;\n+\n+fn main() {\n+    lang_tests_common::main_inner(lang_tests_common::Profile::Release);\n+}"}, {"sha": "ea2c5add962ae3d871cc0a1a298d9e7b8f54da98", "filename": "tests/run/int_overflow.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Frun%2Fint_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67/tests%2Frun%2Fint_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fint_overflow.rs?ref=63ffdfdd1776afa2e82bbd3d2ff8ff7b7f0d5b67", "patch": "@@ -1,7 +1,7 @@\n // Compiler:\n //\n // Run-time:\n-//   stdout: Panicking\n+//   stdout: Success\n //   status: signal\n \n #![allow(unused_attributes)]\n@@ -64,7 +64,9 @@ mod intrinsics {\n #[no_mangle]\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n-        libc::puts(\"Panicking\\0\" as *const str as *const u8);\n+        // Panicking is expected iff overflow checking is enabled.\n+        #[cfg(debug_assertions)]\n+        libc::puts(\"Success\\0\" as *const str as *const u8);\n         libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n@@ -124,6 +126,15 @@ impl Add for isize {\n #[start]\n fn main(mut argc: isize, _argv: *const *const u8) -> isize {\n     let int = 9223372036854775807isize;\n-    let int = int + argc;\n+    let int = int + argc;  // overflow\n+\n+    // If overflow checking is disabled, we should reach here.\n+    #[cfg(not(debug_assertions))]\n+    unsafe {\n+        libc::puts(\"Success\\0\" as *const str as *const u8);\n+        libc::fflush(libc::stdout);\n+        intrinsics::abort();\n+    }\n+\n     int\n }"}]}