{"sha": "508371ac5accf551672200c71b7d5c9fac80ef04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwODM3MWFjNWFjY2Y1NTE2NzIyMDBjNzFiN2Q1YzlmYWM4MGVmMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-30T07:29:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-30T07:29:19Z"}, "message": "Auto merge of #1412 - josephlr:ptr, r=RalfJung\n\nRemove pointer arithmetic intrinsics\n\n**Do Not Merge** until https://github.com/rust-lang/rust/pull/71500 is in nightly.\n\nAs https://github.com/rust-lang/rust/pull/71500 implements `offset` and `arith_offset` in rustc's MIR interpreter, these implementations can now be removed from miri. Also, the `pointer_offset_inbounds` method has been moved to the main MIR engine, so that too can be removed.\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "49a74e1bf2e33ff05af4928ad072f9574328640e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a74e1bf2e33ff05af4928ad072f9574328640e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508371ac5accf551672200c71b7d5c9fac80ef04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508371ac5accf551672200c71b7d5c9fac80ef04", "html_url": "https://github.com/rust-lang/rust/commit/508371ac5accf551672200c71b7d5c9fac80ef04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508371ac5accf551672200c71b7d5c9fac80ef04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1e1123346c04c0326142e953c910dda45e2285", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1e1123346c04c0326142e953c910dda45e2285", "html_url": "https://github.com/rust-lang/rust/commit/dd1e1123346c04c0326142e953c910dda45e2285"}, {"sha": "c77e9022d5d75a2d273b39f0539bfbf52d0ba6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77e9022d5d75a2d273b39f0539bfbf52d0ba6e6", "html_url": "https://github.com/rust-lang/rust/commit/c77e9022d5d75a2d273b39f0539bfbf52d0ba6e6"}], "stats": {"total": 71, "additions": 2, "deletions": 69}, "files": [{"sha": "0124f254ec1eac5ee259db35f0fe85a65c50fbb1", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508371ac5accf551672200c71b7d5c9fac80ef04/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/508371ac5accf551672200c71b7d5c9fac80ef04/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=508371ac5accf551672200c71b7d5c9fac80ef04", "patch": "@@ -1 +1 @@\n-255c0338dc0b02f833fb1a816d76febd50c399c4\n+0e9e4083100aa3ebf09b8f1ace0348cb37475eb9"}, {"sha": "bfc8e908dc15b8c42274e073d981b6b118eae661", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/508371ac5accf551672200c71b7d5c9fac80ef04/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508371ac5accf551672200c71b7d5c9fac80ef04/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=508371ac5accf551672200c71b7d5c9fac80ef04", "patch": "@@ -1,9 +1,6 @@\n-use std::convert::TryFrom;\n-\n use log::trace;\n \n use rustc_middle::{mir, ty::Ty};\n-use rustc_target::abi::{LayoutOf, Size};\n \n use crate::*;\n \n@@ -16,13 +13,6 @@ pub trait EvalContextExt<'tcx> {\n     ) -> InterpResult<'tcx, (Scalar<Tag>, bool, Ty<'tcx>)>;\n \n     fn ptr_eq(&self, left: Scalar<Tag>, right: Scalar<Tag>) -> InterpResult<'tcx, bool>;\n-\n-    fn pointer_offset_inbounds(\n-        &self,\n-        ptr: Scalar<Tag>,\n-        pointee_ty: Ty<'tcx>,\n-        offset: i64,\n-    ) -> InterpResult<'tcx, Scalar<Tag>>;\n }\n \n impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n@@ -71,7 +61,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             Offset => {\n                 let pointee_ty =\n                     left.layout.ty.builtin_deref(true).expect(\"Offset called on non-ptr type\").ty;\n-                let ptr = self.pointer_offset_inbounds(\n+                let ptr = self.ptr_offset_inbounds(\n                     left.to_scalar()?,\n                     pointee_ty,\n                     right.to_scalar()?.to_machine_isize(self)?,\n@@ -91,38 +81,4 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         let right = self.force_bits(right, size)?;\n         Ok(left == right)\n     }\n-\n-    /// Raises an error if the offset moves the pointer outside of its allocation.\n-    /// For integers, we consider each of them their own tiny allocation of size 0,\n-    /// so offset-by-0 is okay for them -- except for NULL, which we rule out entirely.\n-    fn pointer_offset_inbounds(\n-        &self,\n-        ptr: Scalar<Tag>,\n-        pointee_ty: Ty<'tcx>,\n-        offset: i64,\n-    ) -> InterpResult<'tcx, Scalar<Tag>> {\n-        let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n-        let offset = offset.checked_mul(pointee_size).ok_or_else(|| {\n-            err_ub_format!(\"overflow during offset comutation for inbounds pointer arithmetic\")\n-        })?;\n-        // We do this first, to rule out overflows.\n-        let offset_ptr = ptr.ptr_signed_offset(offset, self)?;\n-        // What we need to check is that starting at `min(ptr, offset_ptr)`,\n-        // we could do an access of size `abs(offset)`. Alignment does not matter.\n-        let (min_ptr, abs_offset) = if offset >= 0 {\n-            (ptr, u64::try_from(offset).unwrap())\n-        } else {\n-            // Negative offset.\n-            // If the negation overflows, the result will be negative so the try_from will fail.\n-            (offset_ptr, u64::try_from(-offset).unwrap())\n-        };\n-        self.memory.check_ptr_access_align(\n-            min_ptr,\n-            Size::from_bytes(abs_offset),\n-            None,\n-            CheckInAllocMsg::InboundsTest,\n-        )?;\n-        // That's it!\n-        Ok(offset_ptr)\n-    }\n }"}, {"sha": "c16fbc278c8d8715e8f8542a1328dedcee6e6a67", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/508371ac5accf551672200c71b7d5c9fac80ef04/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508371ac5accf551672200c71b7d5c9fac80ef04/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=508371ac5accf551672200c71b7d5c9fac80ef04", "patch": "@@ -1,5 +1,4 @@\n use std::iter;\n-use std::convert::TryFrom;\n \n use rustc_attr as attr;\n use rustc_ast::ast::FloatTy;\n@@ -101,26 +100,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .write_bytes(ptr, iter::repeat(val_byte).take(byte_count.bytes() as usize))?;\n             }\n \n-            // Pointer arithmetic\n-            \"arith_offset\" => {\n-                let &[ptr, offset] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n-                let offset = this.read_scalar(offset)?.to_machine_isize(this)?;\n-\n-                let pointee_ty = substs.type_at(0);\n-                let pointee_size = i64::try_from(this.layout_of(pointee_ty)?.size.bytes()).unwrap();\n-                let offset = offset.overflowing_mul(pointee_size).0;\n-                let result_ptr = ptr.ptr_wrapping_signed_offset(offset, this);\n-                this.write_scalar(result_ptr, dest)?;\n-            }\n-            \"offset\" => {\n-                let &[ptr, offset] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n-                let offset = this.read_scalar(offset)?.to_machine_isize(this)?;\n-                let result_ptr = this.pointer_offset_inbounds(ptr, substs.type_at(0), offset)?;\n-                this.write_scalar(result_ptr, dest)?;\n-            }\n-\n             // Floating-point operations\n             #[rustfmt::skip]\n             | \"sinf32\""}, {"sha": "1a9c322ac8d060d9bb1b9c4e485be70615f47c06", "filename": "tests/compile-fail/rc_as_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508371ac5accf551672200c71b7d5c9fac80ef04/tests%2Fcompile-fail%2Frc_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508371ac5accf551672200c71b7d5c9fac80ef04/tests%2Fcompile-fail%2Frc_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_ptr.rs?ref=508371ac5accf551672200c71b7d5c9fac80ef04", "patch": "@@ -1,6 +1,5 @@\n // This should fail even without validation\n // compile-flags: -Zmiri-disable-validation\n-#![feature(weak_into_raw)]\n \n use std::rc::{Rc, Weak};\n use std::ptr;"}, {"sha": "3dc61fe1f00d5708499df414f64e84f08d03f79a", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508371ac5accf551672200c71b7d5c9fac80ef04/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508371ac5accf551672200c71b7d5c9fac80ef04/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=508371ac5accf551672200c71b7d5c9fac80ef04", "patch": "@@ -1,4 +1,3 @@\n-#![feature(weak_into_raw)]\n #![feature(new_uninit)]\n #![feature(get_mut_unchecked)]\n "}]}