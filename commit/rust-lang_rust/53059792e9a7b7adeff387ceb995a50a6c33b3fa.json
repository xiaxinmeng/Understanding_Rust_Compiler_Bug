{"sha": "53059792e9a7b7adeff387ceb995a50a6c33b3fa", "node_id": "C_kwDOAAsO6NoAKDUzMDU5NzkyZTlhN2I3YWRlZmYzODdjZWI5OTVhNTBhNmMzM2IzZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T19:09:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T19:09:25Z"}, "message": "Auto merge of #8071 - GuillaumeGomez:method-must-use, r=xFrednet\n\nAdd new lint to warn when #[must_use] attribute should be used on a method\n\nThis lint is somewhat similar to https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate but also different: it emits a warning by default and only targets methods (so not functions nor associated functions).\n\nSomeone suggested it to me after this tweet: https://twitter.com/m_ou_se/status/1466439813230477312\n\nI think it would reduce the number of cases of API misuses quite a lot.\n\nWhat do you think?\n\n---\n\nchangelog: Added new [`return_self_not_must_use`] lint", "tree": {"sha": "8b2ab65d10d1b20411831d54ca35928542510250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b2ab65d10d1b20411831d54ca35928542510250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53059792e9a7b7adeff387ceb995a50a6c33b3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53059792e9a7b7adeff387ceb995a50a6c33b3fa", "html_url": "https://github.com/rust-lang/rust/commit/53059792e9a7b7adeff387ceb995a50a6c33b3fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53059792e9a7b7adeff387ceb995a50a6c33b3fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "html_url": "https://github.com/rust-lang/rust/commit/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0"}, {"sha": "e93767b395ca18ac895e0d52520c2586b7aae0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93767b395ca18ac895e0d52520c2586b7aae0e6", "html_url": "https://github.com/rust-lang/rust/commit/e93767b395ca18ac895e0d52520c2586b7aae0e6"}], "stats": {"total": 280, "additions": 237, "deletions": 43}, "files": [{"sha": "2f64cd0e914e5a9f2db8da2c5f6c241653c702a0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -3118,6 +3118,7 @@ Released 2018-09-13\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_unit_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n+[`return_self_not_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push"}, {"sha": "9ac77d6387990b0413cd1b9619fa819dad8f57a5", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -245,6 +245,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(reference::REF_IN_DEREF),\n     LintId::of(regex::INVALID_REGEX),\n     LintId::of(repeat_once::REPEAT_ONCE),\n+    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(returns::LET_AND_RETURN),\n     LintId::of(returns::NEEDLESS_RETURN),\n     LintId::of(self_assignment::SELF_ASSIGNMENT),"}, {"sha": "68889f4f50a44c95dd9b269b1efa2076b1a10176", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -422,6 +422,7 @@ store.register_lints(&[\n     regex::INVALID_REGEX,\n     regex::TRIVIAL_REGEX,\n     repeat_once::REPEAT_ONCE,\n+    return_self_not_must_use::RETURN_SELF_NOT_MUST_USE,\n     returns::LET_AND_RETURN,\n     returns::NEEDLESS_RETURN,\n     same_name_method::SAME_NAME_METHOD,"}, {"sha": "8594338ffa5ab5558dfb2ae26a4eb7f6e831f08a", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n+    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "c6b14ecac4318caec2336358741a3856173b42ae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -341,6 +341,7 @@ mod ref_option_ref;\n mod reference;\n mod regex;\n mod repeat_once;\n+mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n mod self_assignment;\n@@ -853,6 +854,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n+    store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1118da6c8cb57299cff3acb51bf8c2d0940a5367", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -0,0 +1,105 @@\n+use clippy_utils::{diagnostics::span_lint, must_use_attr, nth_arg, return_ty};\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::intravisit::FnKind;\n+use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// This lint warns when a method returning `Self` doesn't have the `#[must_use]` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// It prevents to \"forget\" to use the newly created value.\n+    ///\n+    /// ### Limitations\n+    /// This lint is only applied on methods taking a `self` argument. It would be mostly noise\n+    /// if it was added on constructors for example.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// pub struct Bar;\n+    ///\n+    /// impl Bar {\n+    ///     // Bad\n+    ///     pub fn bar(&self) -> Self {\n+    ///         Self\n+    ///     }\n+    ///\n+    ///     // Good\n+    ///     #[must_use]\n+    ///     pub fn foo(&self) -> Self {\n+    ///         Self\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub RETURN_SELF_NOT_MUST_USE,\n+    suspicious,\n+    \"missing `#[must_use]` annotation on a method returning `Self`\"\n+}\n+\n+declare_lint_pass!(ReturnSelfNotMustUse => [RETURN_SELF_NOT_MUST_USE]);\n+\n+fn check_method(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'tcx>, fn_def: LocalDefId, span: Span, hir_id: HirId) {\n+    if_chain! {\n+        // If it comes from an external macro, better ignore it.\n+        if !in_external_macro(cx.sess(), span);\n+        if decl.implicit_self.has_implicit_self();\n+        // We only show this warning for public exported methods.\n+        if cx.access_levels.is_exported(fn_def);\n+        if cx.tcx.visibility(fn_def.to_def_id()).is_public();\n+        // No need to warn if the attribute is already present.\n+        if must_use_attr(cx.tcx.hir().attrs(hir_id)).is_none();\n+        let ret_ty = return_ty(cx, hir_id);\n+        let self_arg = nth_arg(cx, hir_id, 0);\n+        // If `Self` has the same type as the returned type, then we want to warn.\n+        //\n+        // For this check, we don't want to remove the reference on the returned type because if\n+        // there is one, we shouldn't emit a warning!\n+        if self_arg.peel_refs() == ret_ty;\n+\n+        then {\n+            span_lint(\n+                cx,\n+                RETURN_SELF_NOT_MUST_USE,\n+                span,\n+                \"missing `#[must_use]` attribute on a method returning `Self`\",\n+            );\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl<'tcx>,\n+        _: &'tcx Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if_chain! {\n+            // We are only interested in methods, not in functions or associated functions.\n+            if matches!(kind, FnKind::Method(_, _, _));\n+            if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n+            if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n+            // We don't want this method to be te implementation of a trait because the\n+            // `#[must_use]` should be put on the trait definition directly.\n+            if cx.tcx.trait_id_of_impl(impl_def).is_none();\n+\n+            then {\n+                check_method(cx, decl, fn_def, span, hir_id);\n+            }\n+        }\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n+        if let TraitItemKind::Fn(ref sig, _) = item.kind {\n+            check_method(cx, sig.decl, item.def_id, item.span, item.hir_id());\n+        }\n+    }\n+}"}, {"sha": "c1eaa5c518540af65cb4f0a513d89a948449114c", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -41,13 +41,15 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n \n     /// Consider expressions containing potential side effects as not equal.\n+    #[must_use]\n     pub fn deny_side_effects(self) -> Self {\n         Self {\n             allow_side_effects: false,\n             ..self\n         }\n     }\n \n+    #[must_use]\n     pub fn expr_fallback(self, expr_fallback: impl FnMut(&Expr<'_>, &Expr<'_>) -> bool + 'a) -> Self {\n         Self {\n             expr_fallback: Some(Box::new(expr_fallback)),"}, {"sha": "950cafbe9eb767d0c31b0490ca77d4c5c3276245", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1393,6 +1393,13 @@ pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx>\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n+/// Convenience function to get the nth argument type of a function.\n+pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId, nth: usize) -> Ty<'tcx> {\n+    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n+    let arg = cx.tcx.fn_sig(fn_def_id).input(nth);\n+    cx.tcx.erase_late_bound_regions(arg)\n+}\n+\n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(fun, _) = expr.kind {"}, {"sha": "586934df46037a3609de57bdfa0307e0ba619142", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -294,6 +294,7 @@ impl<'a> Sugg<'a> {\n     /// Adds parentheses to any expression that might need them. Suitable to the\n     /// `self` argument of a method call\n     /// (e.g., to build `bar.foo()` or `(1 + 2).foo()`).\n+    #[must_use]\n     pub fn maybe_par(self) -> Self {\n         match self {\n             Sugg::NonParen(..) => self,"}, {"sha": "f9bc9436b079293e5cf79cbbca4a602853074d2b", "filename": "tests/ui/auxiliary/option_helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Foption_helpers.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, unused_variables)]\n+#![allow(dead_code, unused_variables, clippy::return_self_not_must_use)]\n \n /// Utility macro to test linting behavior in `option_methods()`\n /// The lints included in `option_methods()` should not lint if the call to map is partially"}, {"sha": "0029fc673f1107105b110987b20bd6ff236dfab9", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![allow(clippy::return_self_not_must_use)]\n #![warn(clippy::deref_addrof)]\n \n fn get_number() -> usize {"}, {"sha": "f2f02dd5e723d8a78c1918c4f8e597df4239c0aa", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![allow(clippy::return_self_not_must_use)]\n #![warn(clippy::deref_addrof)]\n \n fn get_number() -> usize {"}, {"sha": "5bc1cbfa215100e5bdf0c41648e40dc85722927e", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1,55 +1,55 @@\n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:18:13\n+  --> $DIR/deref_addrof.rs:19:13\n    |\n LL |     let b = *&a;\n    |             ^^^ help: try this: `a`\n    |\n    = note: `-D clippy::deref-addrof` implied by `-D warnings`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:20:13\n+  --> $DIR/deref_addrof.rs:21:13\n    |\n LL |     let b = *&get_number();\n    |             ^^^^^^^^^^^^^^ help: try this: `get_number()`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:25:13\n+  --> $DIR/deref_addrof.rs:26:13\n    |\n LL |     let b = *&bytes[1..2][0];\n    |             ^^^^^^^^^^^^^^^^ help: try this: `bytes[1..2][0]`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:29:13\n+  --> $DIR/deref_addrof.rs:30:13\n    |\n LL |     let b = *&(a);\n    |             ^^^^^ help: try this: `(a)`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:31:13\n+  --> $DIR/deref_addrof.rs:32:13\n    |\n LL |     let b = *(&a);\n    |             ^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:34:13\n+  --> $DIR/deref_addrof.rs:35:13\n    |\n LL |     let b = *((&a));\n    |             ^^^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:36:13\n+  --> $DIR/deref_addrof.rs:37:13\n    |\n LL |     let b = *&&a;\n    |             ^^^^ help: try this: `&a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:38:14\n+  --> $DIR/deref_addrof.rs:39:14\n    |\n LL |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:44:9\n+  --> $DIR/deref_addrof.rs:45:9\n    |\n LL |         *& $visitor\n    |         ^^^^^^^^^^^ help: try this: `$visitor`\n@@ -60,7 +60,7 @@ LL |         m!(self)\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:51:9\n+  --> $DIR/deref_addrof.rs:52:9\n    |\n LL |         *& mut $visitor\n    |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`"}, {"sha": "bdf3f3d799582085b2b39a341445074f18e603b2", "filename": "tests/ui/return_self_not_must_use.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -0,0 +1,42 @@\n+#![crate_type = \"lib\"]\n+\n+#[derive(Clone)]\n+pub struct Bar;\n+\n+pub trait Whatever {\n+    fn what(&self) -> Self;\n+    // There should be no warning here!\n+    fn what2(&self) -> &Self;\n+}\n+\n+impl Bar {\n+    // There should be no warning here!\n+    pub fn not_new() -> Self {\n+        Self\n+    }\n+    pub fn foo(&self) -> Self {\n+        Self\n+    }\n+    pub fn bar(self) -> Self {\n+        self\n+    }\n+    // There should be no warning here!\n+    fn foo2(&self) -> Self {\n+        Self\n+    }\n+    // There should be no warning here!\n+    pub fn foo3(&self) -> &Self {\n+        self\n+    }\n+}\n+\n+impl Whatever for Bar {\n+    // There should be no warning here!\n+    fn what(&self) -> Self {\n+        self.foo2()\n+    }\n+    // There should be no warning here!\n+    fn what2(&self) -> &Self {\n+        self\n+    }\n+}"}, {"sha": "3793a5559ba55394fcc6497bf113a88e5aadd6e0", "filename": "tests/ui/return_self_not_must_use.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Freturn_self_not_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Freturn_self_not_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.stderr?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -0,0 +1,26 @@\n+error: missing `#[must_use]` attribute on a method returning `Self`\n+  --> $DIR/return_self_not_must_use.rs:7:5\n+   |\n+LL |     fn what(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::return-self-not-must-use` implied by `-D warnings`\n+\n+error: missing `#[must_use]` attribute on a method returning `Self`\n+  --> $DIR/return_self_not_must_use.rs:17:5\n+   |\n+LL | /     pub fn foo(&self) -> Self {\n+LL | |         Self\n+LL | |     }\n+   | |_____^\n+\n+error: missing `#[must_use]` attribute on a method returning `Self`\n+  --> $DIR/return_self_not_must_use.rs:20:5\n+   |\n+LL | /     pub fn bar(self) -> Self {\n+LL | |         self\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1ccb0a1d167d23edb4cc1e79648dd691700efc1a", "filename": "tests/ui/should_impl_trait/corner_cases.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -7,7 +7,8 @@\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n     clippy::wrong_self_convention,\n-    clippy::missing_panics_doc\n+    clippy::missing_panics_doc,\n+    clippy::return_self_not_must_use\n )]\n \n use std::ops::Mul;"}, {"sha": "20d49f5a9763413100e898613f1f9554704d0325", "filename": "tests/ui/should_impl_trait/method_list_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -7,7 +7,8 @@\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n     clippy::wrong_self_convention,\n-    clippy::missing_panics_doc\n+    clippy::missing_panics_doc,\n+    clippy::return_self_not_must_use\n )]\n \n use std::ops::Mul;"}, {"sha": "2b7d4628c3fa02b703e9a58cb98b73d4a1dd6489", "filename": "tests/ui/should_impl_trait/method_list_1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1,5 +1,5 @@\n error: method `add` can be confused for the standard trait method `std::ops::Add::add`\n-  --> $DIR/method_list_1.rs:24:5\n+  --> $DIR/method_list_1.rs:25:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name\n \n error: method `as_mut` can be confused for the standard trait method `std::convert::AsMut::as_mut`\n-  --> $DIR/method_list_1.rs:28:5\n+  --> $DIR/method_list_1.rs:29:5\n    |\n LL | /     pub fn as_mut(&mut self) -> &mut T {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsMut` or choosing a less ambiguous method name\n \n error: method `as_ref` can be confused for the standard trait method `std::convert::AsRef::as_ref`\n-  --> $DIR/method_list_1.rs:32:5\n+  --> $DIR/method_list_1.rs:33:5\n    |\n LL | /     pub fn as_ref(&self) -> &T {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsRef` or choosing a less ambiguous method name\n \n error: method `bitand` can be confused for the standard trait method `std::ops::BitAnd::bitand`\n-  --> $DIR/method_list_1.rs:36:5\n+  --> $DIR/method_list_1.rs:37:5\n    |\n LL | /     pub fn bitand(self, rhs: T) -> T {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitAnd` or choosing a less ambiguous method name\n \n error: method `bitor` can be confused for the standard trait method `std::ops::BitOr::bitor`\n-  --> $DIR/method_list_1.rs:40:5\n+  --> $DIR/method_list_1.rs:41:5\n    |\n LL | /     pub fn bitor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitOr` or choosing a less ambiguous method name\n \n error: method `bitxor` can be confused for the standard trait method `std::ops::BitXor::bitxor`\n-  --> $DIR/method_list_1.rs:44:5\n+  --> $DIR/method_list_1.rs:45:5\n    |\n LL | /     pub fn bitxor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitXor` or choosing a less ambiguous method name\n \n error: method `borrow` can be confused for the standard trait method `std::borrow::Borrow::borrow`\n-  --> $DIR/method_list_1.rs:48:5\n+  --> $DIR/method_list_1.rs:49:5\n    |\n LL | /     pub fn borrow(&self) -> &str {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::Borrow` or choosing a less ambiguous method name\n \n error: method `borrow_mut` can be confused for the standard trait method `std::borrow::BorrowMut::borrow_mut`\n-  --> $DIR/method_list_1.rs:52:5\n+  --> $DIR/method_list_1.rs:53:5\n    |\n LL | /     pub fn borrow_mut(&mut self) -> &mut str {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::BorrowMut` or choosing a less ambiguous method name\n \n error: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\n-  --> $DIR/method_list_1.rs:56:5\n+  --> $DIR/method_list_1.rs:57:5\n    |\n LL | /     pub fn clone(&self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\n \n error: method `cmp` can be confused for the standard trait method `std::cmp::Ord::cmp`\n-  --> $DIR/method_list_1.rs:60:5\n+  --> $DIR/method_list_1.rs:61:5\n    |\n LL | /     pub fn cmp(&self, other: &Self) -> Self {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::Ord` or choosing a less ambiguous method name\n \n error: method `deref` can be confused for the standard trait method `std::ops::Deref::deref`\n-  --> $DIR/method_list_1.rs:68:5\n+  --> $DIR/method_list_1.rs:69:5\n    |\n LL | /     pub fn deref(&self) -> &Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Deref` or choosing a less ambiguous method name\n \n error: method `deref_mut` can be confused for the standard trait method `std::ops::DerefMut::deref_mut`\n-  --> $DIR/method_list_1.rs:72:5\n+  --> $DIR/method_list_1.rs:73:5\n    |\n LL | /     pub fn deref_mut(&mut self) -> &mut Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::DerefMut` or choosing a less ambiguous method name\n \n error: method `div` can be confused for the standard trait method `std::ops::Div::div`\n-  --> $DIR/method_list_1.rs:76:5\n+  --> $DIR/method_list_1.rs:77:5\n    |\n LL | /     pub fn div(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Div` or choosing a less ambiguous method name\n \n error: method `drop` can be confused for the standard trait method `std::ops::Drop::drop`\n-  --> $DIR/method_list_1.rs:80:5\n+  --> $DIR/method_list_1.rs:81:5\n    |\n LL | /     pub fn drop(&mut self) {\n LL | |         unimplemented!()"}, {"sha": "3efec1c52023bdb91c14d5483d8fe62c7ddf70b6", "filename": "tests/ui/should_impl_trait/method_list_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -7,7 +7,8 @@\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n     clippy::wrong_self_convention,\n-    clippy::missing_panics_doc\n+    clippy::missing_panics_doc,\n+    clippy::return_self_not_must_use\n )]\n \n use std::ops::Mul;"}, {"sha": "b6fd435695698e6ca47adee8a423824472e6b14d", "filename": "tests/ui/should_impl_trait/method_list_2.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53059792e9a7b7adeff387ceb995a50a6c33b3fa/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr?ref=53059792e9a7b7adeff387ceb995a50a6c33b3fa", "patch": "@@ -1,5 +1,5 @@\n error: method `eq` can be confused for the standard trait method `std::cmp::PartialEq::eq`\n-  --> $DIR/method_list_2.rs:25:5\n+  --> $DIR/method_list_2.rs:26:5\n    |\n LL | /     pub fn eq(&self, other: &Self) -> bool {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::PartialEq` or choosing a less ambiguous method name\n \n error: method `from_iter` can be confused for the standard trait method `std::iter::FromIterator::from_iter`\n-  --> $DIR/method_list_2.rs:29:5\n+  --> $DIR/method_list_2.rs:30:5\n    |\n LL | /     pub fn from_iter<T>(iter: T) -> Self {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::FromIterator` or choosing a less ambiguous method name\n \n error: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`\n-  --> $DIR/method_list_2.rs:33:5\n+  --> $DIR/method_list_2.rs:34:5\n    |\n LL | /     pub fn from_str(s: &str) -> Result<Self, Self> {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name\n \n error: method `hash` can be confused for the standard trait method `std::hash::Hash::hash`\n-  --> $DIR/method_list_2.rs:37:5\n+  --> $DIR/method_list_2.rs:38:5\n    |\n LL | /     pub fn hash(&self, state: &mut T) {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::hash::Hash` or choosing a less ambiguous method name\n \n error: method `index` can be confused for the standard trait method `std::ops::Index::index`\n-  --> $DIR/method_list_2.rs:41:5\n+  --> $DIR/method_list_2.rs:42:5\n    |\n LL | /     pub fn index(&self, index: usize) -> &Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Index` or choosing a less ambiguous method name\n \n error: method `index_mut` can be confused for the standard trait method `std::ops::IndexMut::index_mut`\n-  --> $DIR/method_list_2.rs:45:5\n+  --> $DIR/method_list_2.rs:46:5\n    |\n LL | /     pub fn index_mut(&mut self, index: usize) -> &mut Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::IndexMut` or choosing a less ambiguous method name\n \n error: method `into_iter` can be confused for the standard trait method `std::iter::IntoIterator::into_iter`\n-  --> $DIR/method_list_2.rs:49:5\n+  --> $DIR/method_list_2.rs:50:5\n    |\n LL | /     pub fn into_iter(self) -> Self {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::IntoIterator` or choosing a less ambiguous method name\n \n error: method `mul` can be confused for the standard trait method `std::ops::Mul::mul`\n-  --> $DIR/method_list_2.rs:53:5\n+  --> $DIR/method_list_2.rs:54:5\n    |\n LL | /     pub fn mul(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Mul` or choosing a less ambiguous method name\n \n error: method `neg` can be confused for the standard trait method `std::ops::Neg::neg`\n-  --> $DIR/method_list_2.rs:57:5\n+  --> $DIR/method_list_2.rs:58:5\n    |\n LL | /     pub fn neg(self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Neg` or choosing a less ambiguous method name\n \n error: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\n-  --> $DIR/method_list_2.rs:61:5\n+  --> $DIR/method_list_2.rs:62:5\n    |\n LL | /     pub fn next(&mut self) -> Option<Self> {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n \n error: method `not` can be confused for the standard trait method `std::ops::Not::not`\n-  --> $DIR/method_list_2.rs:65:5\n+  --> $DIR/method_list_2.rs:66:5\n    |\n LL | /     pub fn not(self) -> Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Not` or choosing a less ambiguous method name\n \n error: method `rem` can be confused for the standard trait method `std::ops::Rem::rem`\n-  --> $DIR/method_list_2.rs:69:5\n+  --> $DIR/method_list_2.rs:70:5\n    |\n LL | /     pub fn rem(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Rem` or choosing a less ambiguous method name\n \n error: method `shl` can be confused for the standard trait method `std::ops::Shl::shl`\n-  --> $DIR/method_list_2.rs:73:5\n+  --> $DIR/method_list_2.rs:74:5\n    |\n LL | /     pub fn shl(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shl` or choosing a less ambiguous method name\n \n error: method `shr` can be confused for the standard trait method `std::ops::Shr::shr`\n-  --> $DIR/method_list_2.rs:77:5\n+  --> $DIR/method_list_2.rs:78:5\n    |\n LL | /     pub fn shr(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -140,7 +140,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shr` or choosing a less ambiguous method name\n \n error: method `sub` can be confused for the standard trait method `std::ops::Sub::sub`\n-  --> $DIR/method_list_2.rs:81:5\n+  --> $DIR/method_list_2.rs:82:5\n    |\n LL | /     pub fn sub(self, rhs: Self) -> Self {\n LL | |         unimplemented!()"}]}