{"sha": "529c35331bb3817e90b5099c33d97aa55ad2713d", "node_id": "C_kwDOAAsO6NoAKDUyOWMzNTMzMWJiMzgxN2U5MGI1MDk5YzMzZDk3YWE1NWFkMjcxM2Q", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-10-03T13:29:56Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-10-03T14:04:38Z"}, "message": "Fix unsound optimization with explicit variant discriminants", "tree": {"sha": "5dd74cdf405f8f7c9f6d14b415e2dd76c6958b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd74cdf405f8f7c9f6d14b415e2dd76c6958b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529c35331bb3817e90b5099c33d97aa55ad2713d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529c35331bb3817e90b5099c33d97aa55ad2713d", "html_url": "https://github.com/rust-lang/rust/commit/529c35331bb3817e90b5099c33d97aa55ad2713d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529c35331bb3817e90b5099c33d97aa55ad2713d/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edebf77e0090195bf80c0d8cda821e1bf9d03053", "url": "https://api.github.com/repos/rust-lang/rust/commits/edebf77e0090195bf80c0d8cda821e1bf9d03053", "html_url": "https://github.com/rust-lang/rust/commit/edebf77e0090195bf80c0d8cda821e1bf9d03053"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "8da90a432cea9a348f1855d984b317747f2ea91d", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/529c35331bb3817e90b5099c33d97aa55ad2713d/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c35331bb3817e90b5099c33d97aa55ad2713d/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=529c35331bb3817e90b5099c33d97aa55ad2713d", "patch": "@@ -706,12 +706,22 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n         let helper = |rhs: &Rvalue<'tcx>,\n                       place: &Place<'tcx>,\n                       variant_index: &VariantIdx,\n+                      switch_value: u128,\n                       side_to_choose| {\n             let place_type = place.ty(self.body, self.tcx).ty;\n             let adt = match *place_type.kind() {\n                 ty::Adt(adt, _) if adt.is_enum() => adt,\n                 _ => return StatementEquality::NotEqual,\n             };\n+            let variant_discr = adt.discriminant_for_variant(self.tcx, *variant_index).val;\n+            if variant_discr != switch_value {\n+                trace!(\n+                    \"NO: variant discriminant {} does not equal switch value {}\",\n+                    variant_discr,\n+                    switch_value\n+                );\n+                return StatementEquality::NotEqual;\n+            }\n             let variant_is_fieldless = adt.variants[*variant_index].fields.is_empty();\n             if !variant_is_fieldless {\n                 trace!(\"NO: variant {:?} was not fieldless\", variant_index);\n@@ -742,18 +752,18 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n                 StatementKind::SetDiscriminant { place, variant_index },\n             )\n             // we need to make sure that the switch value that targets the bb with SetDiscriminant (y), is the same as the variant index\n-            if Some(variant_index.index() as u128) == y_target_and_value.value => {\n+            if y_target_and_value.value.is_some() => {\n                 // choose basic block of x, as that has the assign\n-                helper(rhs, place, variant_index, x_target_and_value.target)\n+                helper(rhs, place, variant_index, y_target_and_value.value.unwrap(), x_target_and_value.target)\n             }\n             (\n                 StatementKind::SetDiscriminant { place, variant_index },\n                 StatementKind::Assign(box (_, rhs)),\n             )\n             // we need to make sure that the switch value that targets the bb with SetDiscriminant (x), is the same as the variant index\n-            if Some(variant_index.index() as u128) == x_target_and_value.value  => {\n+            if x_target_and_value.value.is_some() => {\n                 // choose basic block of y, as that has the assign\n-                helper(rhs, place, variant_index, y_target_and_value.target)\n+                helper(rhs, place, variant_index, x_target_and_value.value.unwrap(), y_target_and_value.target)\n             }\n             _ => {\n                 trace!(\"NO: statements `{:?}` and `{:?}` not considered equal\", x, y);"}, {"sha": "cb507eefebbe53e743cbf634b0ffb98710bf43cb", "filename": "src/test/ui/mir/issue-89485.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/529c35331bb3817e90b5099c33d97aa55ad2713d/src%2Ftest%2Fui%2Fmir%2Fissue-89485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c35331bb3817e90b5099c33d97aa55ad2713d/src%2Ftest%2Fui%2Fmir%2Fissue-89485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-89485.rs?ref=529c35331bb3817e90b5099c33d97aa55ad2713d", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for issue #89485.\n+\n+// run-pass\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub enum Type {\n+    A = 1,\n+    B = 2,\n+}\n+pub fn encode(v: Type) -> Type {\n+    match v {\n+        Type::A => Type::B,\n+        _ => v,\n+    }\n+}\n+fn main() {\n+  assert_eq!(Type::B, encode(Type::A));\n+}"}]}